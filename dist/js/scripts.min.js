!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(function(){try{return require("moment")}catch(t){}}()):"function"==typeof define&&define.amd?define(["require"],function(t){return e(function(){try{return t("moment")}catch(t){}}())}):(t=t||self).Chart=e(t.moment)}(this,function(i){"use strict";i=i&&i.hasOwnProperty("default")?i.default:i;var t,d={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},u=(function(t){var u={};for(var e in d)d.hasOwnProperty(e)&&(u[d[e]]=e);var o=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var n in o)if(o.hasOwnProperty(n)){if(!("channels"in o[n]))throw new Error("missing channels property: "+n);if(!("labels"in o[n]))throw new Error("missing channel labels property: "+n);if(o[n].labels.length!==o[n].channels)throw new Error("channel and label counts mismatch: "+n);var i=o[n].channels,r=o[n].labels;delete o[n].channels,delete o[n].labels,Object.defineProperty(o[n],"channels",{value:i}),Object.defineProperty(o[n],"labels",{value:r})}o.rgb.hsl=function(t){var e,n,i=t[0]/255,r=t[1]/255,a=t[2]/255,o=Math.min(i,r,a),s=Math.max(i,r,a),l=s-o;return s===o?e=0:i===s?e=(r-a)/l:r===s?e=2+(a-i)/l:a===s&&(e=4+(i-r)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(o+s)/2,[e,100*(s===o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]},o.rgb.hsv=function(t){function e(t){return(d-t)/6/c+.5}var n,i,r,a,o,s=t[0]/255,l=t[1]/255,u=t[2]/255,d=Math.max(s,l,u),c=d-Math.min(s,l,u);return 0==c?a=o=0:(o=c/d,n=e(s),i=e(l),r=e(u),s===d?a=r-i:l===d?a=1/3+n-r:u===d&&(a=2/3+i-n),a<0?a+=1:1<a&&--a),[360*a,100*o,100*d]},o.rgb.hwb=function(t){var e=t[0],n=t[1],i=t[2];return[o.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(n,i))),100*(i=1-1/255*Math.max(e,Math.max(n,i)))]},o.rgb.cmyk=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-i,1-r)))/(1-e)||0),100*((1-i-e)/(1-e)||0),100*((1-r-e)/(1-e)||0),100*e]},o.rgb.keyword=function(t){var e=u[t];if(e)return e;var n,i,r,a=1/0;for(var o in d)if(d.hasOwnProperty(o)){var s=d[o],l=(i=t,r=s,Math.pow(i[0]-r[0],2)+Math.pow(i[1]-r[1],2)+Math.pow(i[2]-r[2],2));l<a&&(a=l,n=o)}return n},o.keyword.rgb=function(t){return d[t]},o.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;return[100*(.4124*(e=.04045<e?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=.04045<n?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(i=.04045<i?Math.pow((i+.055)/1.055,2.4):i/12.92)),100*(.2126*e+.7152*n+.0722*i),100*(.0193*e+.1192*n+.9505*i)]},o.rgb.lab=function(t){var e=o.rgb.xyz(t),n=e[0],i=e[1],r=e[2];return i/=100,r/=108.883,n=.008856<(n/=95.047)?Math.pow(n,1/3):7.787*n+16/116,[116*(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116)-16,500*(n-i),200*(i-(r=.008856<r?Math.pow(r,1/3):7.787*r+16/116))]},o.hsl.rgb=function(t){var e,n,i,r,a,o=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return[a=255*l,a,a];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),r=[0,0,0];for(var u=0;u<3;u++)(i=o+1/3*-(u-1))<0&&i++,1<i&&i--,a=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,r[u]=255*a;return r},o.hsl.hsv=function(t){var e=t[0],n=t[1]/100,i=t[2]/100,r=n,a=Math.max(i,.01);return n*=(i*=2)<=1?i:2-i,r*=a<=1?a:2-a,[e,100*(0===i?2*r/(a+r):2*n/(i+n)),100*((i+n)/2)]},o.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,r=Math.floor(e)%6,a=e-Math.floor(e),o=255*i*(1-n),s=255*i*(1-n*a),l=255*i*(1-n*(1-a));switch(i*=255,r){case 0:return[i,l,o];case 1:return[s,i,o];case 2:return[o,i,l];case 3:return[o,s,i];case 4:return[l,o,i];case 5:return[i,o,s]}},o.hsv.hsl=function(t){var e,n,i,r=t[0],a=t[1]/100,o=t[2]/100,s=Math.max(o,.01);return i=(2-a)*o,n=a*s,[r,100*(n=(n/=(e=(2-a)*s)<=1?e:2-e)||0),100*(i/=2)]},o.hwb.rgb=function(t){var e,n,i,r,a,o,s,l=t[0]/360,u=t[1]/100,d=t[2]/100,c=u+d;switch(1<c&&(u/=c,d/=c),i=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(i=1-i),r=u+i*((n=1-d)-u),e){default:case 6:case 0:a=n,o=r,s=u;break;case 1:a=r,o=n,s=u;break;case 2:a=u,o=n,s=r;break;case 3:a=u,o=r,s=n;break;case 4:a=r,o=u,s=n;break;case 5:a=n,o=u,s=r}return[255*a,255*o,255*s]},o.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,i=t[2]/100,r=t[3]/100;return[255*(1-Math.min(1,e*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,i*(1-r)+r))]},o.xyz.rgb=function(t){var e,n,i,r=t[0]/100,a=t[1]/100,o=t[2]/100;return n=-.9689*r+1.8758*a+.0415*o,i=.0557*r+-.204*a+1.057*o,e=.0031308<(e=3.2406*r+-1.5372*a+-.4986*o)?1.055*Math.pow(e,1/2.4)-.055:12.92*e,n=.0031308<n?1.055*Math.pow(n,1/2.4)-.055:12.92*n,i=.0031308<i?1.055*Math.pow(i,1/2.4)-.055:12.92*i,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(i=Math.min(Math.max(0,i),1))]},o.xyz.lab=function(t){var e=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,e=.008856<(e/=95.047)?Math.pow(e,1/3):7.787*e+16/116,[116*(n=.008856<n?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116))]},o.lab.xyz=function(t){var e,n,i,r=t[0];e=t[1]/500+(n=(r+16)/116),i=n-t[2]/200;var a=Math.pow(n,3),o=Math.pow(e,3),s=Math.pow(i,3);return n=.008856<a?a:(n-16/116)/7.787,e=.008856<o?o:(e-16/116)/7.787,i=.008856<s?s:(i-16/116)/7.787,[e*=95.047,n*=100,i*=108.883]},o.lab.lch=function(t){var e,n=t[0],i=t[1],r=t[2];return(e=360*Math.atan2(r,i)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(i*i+r*r),e]},o.lch.lab=function(t){var e,n=t[0],i=t[1];return e=t[2]/360*2*Math.PI,[n,i*Math.cos(e),i*Math.sin(e)]},o.rgb.ansi16=function(t){var e=t[0],n=t[1],i=t[2],r=1 in arguments?arguments[1]:o.rgb.hsv(t)[2];if(0===(r=Math.round(r/50)))return 30;var a=30+(Math.round(i/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===r&&(a+=60),a},o.hsv.ansi16=function(t){return o.rgb.ansi16(o.hsv.rgb(t),t[2])},o.rgb.ansi256=function(t){var e=t[0],n=t[1],i=t[2];return e===n&&n===i?e<8?16:248<e?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},o.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return 50<t&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(50<t));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},o.ansi256.rgb=function(t){if(232<=t){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},o.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},o.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split("").map(function(t){return t+t}).join(""));var i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},o.rgb.hcg=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255,a=Math.max(Math.max(n,i),r),o=Math.min(Math.min(n,i),r),s=a-o;return e=s<=0?0:a===n?(i-r)/s%6:a===i?2+(r-n)/s:4+(n-i)/s+4,e/=6,[360*(e%=1),100*s,100*(s<1?o/(1-s):0)]},o.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=1,r=0;return(i=n<.5?2*e*n:2*e*(1-n))<1&&(r=(n-.5*i)/(1-i)),[t[0],100*i,100*r]},o.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=e*n,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},o.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,i=t[2]/100;if(0==n)return[255*i,255*i,255*i];var r,a=[0,0,0],o=e%1*6,s=o%1,l=1-s;switch(Math.floor(o)){case 0:a[0]=1,a[1]=s,a[2]=0;break;case 1:a[0]=l,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=s;break;case 3:a[0]=0,a[1]=l,a[2]=1;break;case 4:a[0]=s,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=l}return r=(1-n)*i,[255*(n*a[0]+r),255*(n*a[1]+r),255*(n*a[2]+r)]},o.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),i=0;return 0<n&&(i=e/n),[t[0],100*i,100*n]},o.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,i=0;return 0<n&&n<.5?i=e/(2*n):.5<=n&&n<1&&(i=e/(2*(1-n))),[t[0],100*i,100*n]},o.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},o.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,i=n-e,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},o.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},o.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},o.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},o.gray.hsl=o.gray.hsv=function(t){return[0,0,t[0]]},o.gray.hwb=function(t){return[0,100,t[0]]},o.gray.cmyk=function(t){return[0,0,0,t[0]]},o.gray.lab=function(t){return[t[0],0,0]},o.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(n.length)+n},o.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}}(t={exports:{}},t.exports),t.exports);u.rgb,u.hsl,u.hsv,u.hwb,u.cmyk,u.xyz,u.lab,u.lch,u.hex,u.keyword,u.ansi16,u.ansi256,u.hcg,u.apple,u.gray;function s(t){var e=function(){for(var t={},e=Object.keys(u),n=e.length,i=0;i<n;i++)t[e[i]]={distance:-1,parent:null};return t}(),n=[t];for(e[t].distance=0;n.length;)for(var i=n.pop(),r=Object.keys(u[i]),a=r.length,o=0;o<a;o++){var s=r[o],l=e[s];-1===l.distance&&(l.distance=e[i].distance+1,l.parent=i,n.unshift(s))}return e}function a(e,n){return function(t){return n(e(t))}}function l(t,e){for(var n=[e[t].parent,t],i=u[e[t].parent][t],r=e[t].parent;e[r].parent;)n.unshift(e[r].parent),i=a(u[e[r].parent][r],i),r=e[r].parent;return i.conversion=n,i}var r={};function o(e){function t(t){return null==t?t:(1<arguments.length&&(t=Array.prototype.slice.call(arguments)),e(t))}return"conversion"in e&&(t.conversion=e.conversion),t}function c(r){function t(t){if(null==t)return t;1<arguments.length&&(t=Array.prototype.slice.call(arguments));var e=r(t);if("object"==typeof e)for(var n=e.length,i=0;i<n;i++)e[i]=Math.round(e[i]);return e}return"conversion"in r&&(t.conversion=r.conversion),t}Object.keys(u).forEach(function(n){r[n]={},Object.defineProperty(r[n],"channels",{value:u[n].channels}),Object.defineProperty(r[n],"labels",{value:u[n].labels});var i=function(t){for(var e=s(t),n={},i=Object.keys(e),r=i.length,a=0;a<r;a++){var o=i[a];null!==e[o].parent&&(n[o]=l(o,e))}return n}(n);Object.keys(i).forEach(function(t){var e=i[t];r[n][t]=c(e),r[n][t].raw=o(e)})});var h=r,f={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n={getRgba:g,getHsla:p,getRgb:function(t){var e=g(t);return e&&e.slice(0,3)},getHsl:function(t){var e=p(t);return e&&e.slice(0,3)},getHwb:m,getAlpha:function(t){var e=g(t);{if(e)return e[3];if(e=p(t))return e[3];if(e=m(t))return e[3]}},hexString:function(t,e){e=void 0!==e&&3===t.length?e:t[3];return"#"+_(t[0])+_(t[1])+_(t[2])+(0<=e&&e<1?_(Math.round(255*e)):"")},rgbString:function(t,e){if(e<1||t[3]&&t[3]<1)return v(t,e);return"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:v,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return b(t,e);var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),r=Math.round(t[2]/255*100);return"rgb("+n+"%, "+i+"%, "+r+"%)"},percentaString:b,hslString:function(t,e){if(e<1||t[3]&&t[3]<1)return y(t,e);return"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:y,hwbString:function(t,e){void 0===e&&(e=void 0!==t[3]?t[3]:1);return"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return e[t.slice(0,3)]}};function g(t){if(t){var e=[0,0,0],n=1,i=t.match(/^#([a-fA-F0-9]{3,4})$/i),r="";if(i){r=(i=i[1])[3];for(var a=0;a<e.length;a++)e[a]=parseInt(i[a]+i[a],16);r&&(n=Math.round(parseInt(r+r,16)/255*100)/100)}else if(i=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){r=i[2],i=i[1];for(a=0;a<e.length;a++)e[a]=parseInt(i.slice(2*a,2*a+2),16);r&&(n=Math.round(parseInt(r,16)/255*100)/100)}else if(i=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=parseInt(i[a+1]);n=parseFloat(i[4])}else if(i=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=Math.round(2.55*parseFloat(i[a+1]));n=parseFloat(i[4])}else if(i=t.match(/(\w+)/)){if("transparent"==i[1])return[0,0,0,0];if(!(e=f[i[1]]))return}for(a=0;a<e.length;a++)e[a]=x(e[a],0,255);return n=n||0==n?x(n,0,1):1,e[3]=n,e}}function p(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[x(parseInt(e[1]),0,360),x(parseFloat(e[2]),0,100),x(parseFloat(e[3]),0,100),x(isNaN(n)?1:n,0,1)]}}}function m(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[x(parseInt(e[1]),0,360),x(parseFloat(e[2]),0,100),x(parseFloat(e[3]),0,100),x(isNaN(n)?1:n,0,1)]}}}function v(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function b(t,e){return"rgba("+Math.round(t[0]/255*100)+"%, "+Math.round(t[1]/255*100)+"%, "+Math.round(t[2]/255*100)+"%, "+(e||t[3]||1)+")"}function y(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function x(t,e,n){return Math.min(Math.max(e,t),n)}function _(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var e={};for(var w in f)e[f[w]]=w;var k=function(t){return t instanceof k?t:this instanceof k?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(e=n.getRgba(t))?this.setValues("rgb",e):(e=n.getHsla(t))?this.setValues("hsl",e):(e=n.getHwb(t))&&this.setValues("hwb",e):"object"==typeof t&&(void 0!==(e=t).r||void 0!==e.red?this.setValues("rgb",e):void 0!==e.l||void 0!==e.lightness?this.setValues("hsl",e):void 0!==e.v||void 0!==e.value?this.setValues("hsv",e):void 0!==e.w||void 0!==e.whiteness?this.setValues("hwb",e):void 0===e.c&&void 0===e.cyan||this.setValues("cmyk",e)))):new k(t);var e};k.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t=t&&((t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return n.hexString(this.values.rgb)},rgbString:function(){return n.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return n.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return n.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return n.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return n.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return n.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return n.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((.055+i)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return n<e?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return 7.1<=e?"AAA":4.5<=e?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=this,i=t,r=void 0===e?.5:e,a=2*r-1,o=n.alpha()-i.alpha(),s=(1+(a*o==-1?a:(a+o)/(1+a*o)))/2,l=1-s;return this.rgb(s*n.red()+l*i.red(),s*n.green()+l*i.green(),s*n.blue()+l*i.blue()).alpha(n.alpha()*r+i.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new k,i=this.values,r=n.values;for(var a in i)i.hasOwnProperty(a)&&(t=i[a],"[object Array]"===(e={}.toString.call(t))?r[a]=t.slice(0):"[object Number]"===e?r[a]=t:console.error("unexpected color value:",t));return n}},k.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},k.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},k.prototype.getValues=function(t){for(var e=this.values,n={},i=0;i<t.length;i++)n[t.charAt(i)]=e[t][i];return 1!==e.alpha&&(n.a=e.alpha),n},k.prototype.setValues=function(t,e){var n,i,r=this.values,a=this.spaces,o=this.maxes,s=1;if(this.valid=!0,"alpha"===t)s=e;else if(e.length)r[t]=e.slice(0,t.length),s=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)r[t][n]=e[t.charAt(n)];s=e.a}else if(void 0!==e[a[t][0]]){var l=a[t];for(n=0;n<t.length;n++)r[t][n]=e[l[n]];s=e.alpha}if(r.alpha=Math.max(0,Math.min(1,void 0===s?r.alpha:s)),"alpha"===t)return!1;for(n=0;n<t.length;n++)i=Math.max(0,Math.min(o[t][n],r[t][n])),r[t][n]=Math.round(i);for(var u in a)u!==t&&(r[u]=h[t][u](r[t]));return!0},k.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},k.prototype.setChannel=function(t,e,n){var i=this.values[t];return void 0===n?i[e]:(n===i[e]||(i[e]=n,this.setValues(t,i)),this)},"undefined"!=typeof window&&(window.Color=k);var M,C=k,S={noop:function(){},uid:(M=0,function(){return M++}),isNullOrUndef:function(t){return null==t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},isFinite:function(t){return("number"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return S.valueOrDefault(S.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,i){var r,a,o;if(S.isArray(t))if(a=t.length,i)for(r=a-1;0<=r;r--)e.call(n,t[r],r);else for(r=0;r<a;r++)e.call(n,t[r],r);else if(S.isObject(t))for(a=(o=Object.keys(t)).length,r=0;r<a;r++)e.call(n,t[o[r]],o[r])},arrayEquals:function(t,e){var n,i,r,a;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],a=e[n],r instanceof Array&&a instanceof Array){if(!S.arrayEquals(r,a))return!1}else if(r!==a)return!1;return!0},clone:function(t){if(S.isArray(t))return t.map(S.clone);if(S.isObject(t)){for(var e={},n=Object.keys(t),i=n.length,r=0;r<i;++r)e[n[r]]=S.clone(t[n[r]]);return e}return t},_merger:function(t,e,n,i){var r=e[t],a=n[t];S.isObject(r)&&S.isObject(a)?S.merge(r,a,i):e[t]=S.clone(a)},_mergerIf:function(t,e,n){var i=e[t],r=n[t];S.isObject(i)&&S.isObject(r)?S.mergeIf(i,r):e.hasOwnProperty(t)||(e[t]=S.clone(r))},merge:function(t,e,n){var i,r,a,o,s,l=S.isArray(e)?e:[e],u=l.length;if(!S.isObject(t))return t;for(i=(n=n||{}).merger||S._merger,r=0;r<u;++r)if(e=l[r],S.isObject(e))for(s=0,o=(a=Object.keys(e)).length;s<o;++s)i(a[s],t,e,n);return t},mergeIf:function(t,e){return S.merge(t,e,{merger:S._mergerIf})},extend:Object.assign||function(t){return S.merge(t,[].slice.call(arguments,1),{merger:function(t,e,n){e[t]=n[t]}})},inherits:function(t){function e(){this.constructor=i}var n=this,i=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return n.apply(this,arguments)};return e.prototype=n.prototype,i.prototype=new e,i.extend=S.inherits,t&&S.extend(i.prototype,t),i.__super__=n.prototype,i},_deprecated:function(t,e,n,i){void 0!==e&&console.warn(t+': "'+n+'" is deprecated. Please use "'+i+'" instead')}},D=S;S.callCallback=S.callback,S.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},S.getValueOrDefault=S.valueOrDefault,S.getValueAtIndexOrDefault=S.valueAtIndexOrDefault;var A={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-(--t*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return--t*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return 1<=t?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1- --t*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),-(i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2==(t/=.5)?1:(n=n||.45,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),t<1?i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*-.5:i*Math.pow(2,-10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){return t*t*(2.70158*t-1.70158)},easeOutBack:function(t){return--t*t*(2.70158*t+1.70158)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-A.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*A.easeInBounce(2*t):.5*A.easeOutBounce(2*t-1)+.5}},P={effects:A};D.easingEffects=A;var T=Math.PI,I=T/180,O=2*T,F=T/2,L=T/4,R=2*T/3,z={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,i,r,a){if(a){var o=Math.min(a,r/2,i/2),s=e+o,l=n+o,u=e+i-o,d=n+r-o;t.moveTo(e,l),s<u&&l<d?(t.arc(s,l,o,-T,-F),t.arc(u,l,o,-F,0),t.arc(u,d,o,0,F),t.arc(s,d,o,F,T)):s<u?(t.moveTo(s,n),t.arc(u,l,o,-F,F),t.arc(s,l,o,F,T+F)):l<d?(t.arc(s,l,o,-T,0),t.arc(s,d,o,0,T)):t.arc(s,l,o,-T,T),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,i,r)},drawPoint:function(t,e,n,i,r,a){var o,s,l,u,d,c=(a||0)*I;if(e&&"object"==typeof e&&("[object HTMLImageElement]"===(o=e.toString())||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,r),t.rotate(c),t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),void t.restore();if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(i,r,n,0,O),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(c)*n,r-Math.cos(c)*n),c+=R,t.lineTo(i+Math.sin(c)*n,r-Math.cos(c)*n),c+=R,t.lineTo(i+Math.sin(c)*n,r-Math.cos(c)*n),t.closePath();break;case"rectRounded":u=n-(d=.516*n),s=Math.cos(c+L)*u,l=Math.sin(c+L)*u,t.arc(i-s,r-l,d,c-T,c-F),t.arc(i+l,r-s,d,c-F,c),t.arc(i+s,r+l,d,c,c+F),t.arc(i-l,r+s,d,c+F,c+T),t.closePath();break;case"rect":if(!a){u=Math.SQRT1_2*n,t.rect(i-u,r-u,2*u,2*u);break}c+=L;case"rectRot":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+l,r-s),t.lineTo(i+s,r+l),t.lineTo(i-l,r+s),t.closePath();break;case"crossRot":c+=L;case"cross":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"star":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s),c+=L,s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"line":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l);break;case"dash":t.moveTo(i,r),t.lineTo(i+Math.cos(c)*n,r+Math.sin(c)*n)}t.fill(),t.stroke()}},_isPointInArea:function(t,e){return t.x>e.left-1e-6&&t.x<e.right+1e-6&&t.y>e.top-1e-6&&t.y<e.bottom+1e-6},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,i){var r=n.steppedLine;if(r){if("middle"===r){var a=(e.x+n.x)/2;t.lineTo(a,i?n.y:e.y),t.lineTo(a,i?e.y:n.y)}else"after"===r&&!i||"after"!==r&&i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}else n.tension?t.bezierCurveTo(i?e.controlPointPreviousX:e.controlPointNextX,i?e.controlPointPreviousY:e.controlPointNextY,i?n.controlPointNextX:n.controlPointPreviousX,i?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}},N=z;D.clear=z.clear,D.drawRoundedRectangle=function(t){t.beginPath(),z.roundedRect.apply(z,arguments)};var B={_set:function(t,e){return D.merge(this[t]||(this[t]={}),e)}};B._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var E=B,W=D.valueOrDefault;var H={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,i,r;return D.isObject(t)?(e=+t.top||0,n=+t.right||0,i=+t.bottom||0,r=+t.left||0):e=n=i=r=+t||0,{top:e,right:n,bottom:i,left:r,height:e+i,width:r+n}},_parseFont:function(t){var e,n=E.global,i=W(t.fontSize,n.defaultFontSize),r={family:W(t.fontFamily,n.defaultFontFamily),lineHeight:D.options.toLineHeight(W(t.lineHeight,n.defaultLineHeight),i),size:i,style:W(t.fontStyle,n.defaultFontStyle),weight:null,string:""};return r.string=!(e=r)||D.isNullOrUndef(e.size)||D.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family,r},resolve:function(t,e,n,i){var r,a,o,s=!0;for(r=0,a=t.length;r<a;++r)if(void 0!==(o=t[r])&&(void 0!==e&&"function"==typeof o&&(o=o(e),s=!1),void 0!==n&&D.isArray(o)&&(o=o[n],s=!1),void 0!==o))return i&&!s&&(i.cacheable=!1),o}},V={_factorize:function(t){var e,n=[],i=Math.sqrt(t);for(e=1;e<i;e++)t%e==0&&(n.push(e),n.push(t/e));return i===(0|i)&&n.push(i),n.sort(function(t,e){return t-e}).pop(),n},log10:Math.log10||function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e}},j=V;D.log10=V.log10;var q=D,U=P,Y=N,G=H,X=j,K={getRtlAdapter:function(t,e,n){return t?(i=e,r=n,{x:function(t){return i+i+r-t},setWidth:function(t){r=t},textAlign:function(t){return"center"===t?t:"right"===t?"left":"right"},xPlus:function(t,e){return t-e},leftForLtr:function(t,e){return t-e}}):{x:function(t){return t},setWidth:function(t){},textAlign:function(t){return t},xPlus:function(t,e){return t+e},leftForLtr:function(t,e){return t}};var i,r},overrideTextDirection:function(t,e){var n,i;"ltr"!==e&&"rtl"!==e||(i=[(n=t.canvas.style).getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)},restoreTextDirection:function(t){var e=t.prevTextDirection;void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}};q.easing=U,q.canvas=Y,q.options=G,q.math=X,q.rtl=K;function Z(t){q.extend(this,t),this.initialize.apply(this,arguments)}q.extend(Z.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=q.extend({},t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,i=e._start,r=e._view;return n&&1!==t?(r=r||(e._view={}),function(t,e,n,i){var r,a,o,s,l,u,d,c,h,f=Object.keys(n);for(r=0,a=f.length;r<a;++r)if(u=n[o=f[r]],e.hasOwnProperty(o)||(e[o]=u),(s=e[o])!==u&&"_"!==o[0]){if(t.hasOwnProperty(o)||(t[o]=s),(d=typeof u)==typeof(l=t[o]))if("string"==d){if((c=C(l)).valid&&(h=C(u)).valid){e[o]=h.mix(c,i).rgbString();continue}}else if(q.isFinite(l)&&q.isFinite(u)){e[o]=l+(u-l)*i;continue}e[o]=u}}(i=i||(e._start={}),r,n,t)):(e._view=q.extend({},n),e._start=null),e},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return q.isNumber(this._model.x)&&q.isNumber(this._model.y)}}),Z.extend=q.inherits;var $=Z,Q=$.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),J=Q;Object.defineProperty(Q.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(Q.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}}),E._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:q.noop,onComplete:q.noop}});var tt={animations:[],request:null,addAnimation:function(t,e,n,i){var r,a,o=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,i||(t.animating=!0),r=0,a=o.length;r<a;++r)if(o[r].chart===t)return void(o[r]=e);o.push(e),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=q.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=q.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){this.advance(),0<this.animations.length&&this.requestAnimationFrame()},advance:function(){for(var t,e,n,i,r=this.animations,a=0;a<r.length;)e=(t=r[a]).chart,n=t.numSteps,i=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(i,n),q.callback(t.render,[e,t],e),q.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(q.callback(t.onAnimationComplete,[t],e),e.animating=!1,r.splice(a,1)):++a}},et=q.options.resolve,nt=["push","pop","shift","splice","unshift"];function it(e,t){var n=e._chartjs;if(n){var i=n.listeners,r=i.indexOf(t);-1!==r&&i.splice(r,1),0<i.length||(nt.forEach(function(t){delete e[t]}),delete e._chartjs)}}function rt(t,e){this.initialize(t,e)}q.extend(rt.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(t,e){var n=this;n.chart=t,n.index=e,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(t){this.index=t},linkScales:function(){var t=this.getMeta(),e=this.chart,n=e.scales,i=this.getDataset(),r=e.options.scales;null!==t.xAxisID&&t.xAxisID in n&&!i.xAxisID||(t.xAxisID=i.xAxisID||r.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in n&&!i.yAxisID||(t.yAxisID=i.yAxisID||r.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&it(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),i=this.getDataset().data||[],r=n.data;for(t=0,e=i.length;t<e;++t)r[t]=r[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var r,t,e=this,n=e.getDataset(),i=n.data||(n.data=[]);e._data!==i&&(e._data&&it(e._data,e),i&&Object.isExtensible(i)&&(t=e,(r=i)._chartjs?r._chartjs.listeners.push(t):(Object.defineProperty(r,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),nt.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),i=r[t];Object.defineProperty(r,t,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),t=i.apply(this,e);return q.each(r._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),t}})}))),e._data=i),e.resyncElements()},_configure:function(){this._config=q.merge({},[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(t,e,n){"_meta"!==t&&"data"!==t&&q._merger(t,e,n)}})},_update:function(t){this._configure(),this._cachedDataOpts=null,this.update(t)},update:q.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],i=n.length,r=0;r<i;++r)n[r].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,i=0;for(t.dataset&&t.dataset.draw();i<n;++i)e[i].draw()},getStyle:function(t){var e,n=this.getMeta(),i=n.dataset;return this._configure(),!1!==(e=i&&void 0===t?this._resolveDatasetElementOptions(i||{}):(t=t||0,this._resolveDataElementOptions(n.data[t]||{},t))).fill&&null!==e.fill||(e.backgroundColor=e.borderColor),e},_resolveDatasetElementOptions:function(t,e){var n,i,r,a,o=this,s=o.chart,l=o._config,u=t.custom||{},d=s.options.elements[o.datasetElementType.prototype._type]||{},c=o._datasetElementOptions,h={},f={chart:s,dataset:o.getDataset(),datasetIndex:o.index,hover:e};for(n=0,i=c.length;n<i;++n)r=c[n],a=e?"hover"+r.charAt(0).toUpperCase()+r.slice(1):r,h[r]=et([u[a],l[a],d[a]],f);return h},_resolveDataElementOptions:function(t,e){var n=this,i=t&&t.custom,r=n._cachedDataOpts;if(r&&!i)return r;var a,o,s,l,u=n.chart,d=n._config,c=u.options.elements[n.dataElementType.prototype._type]||{},h=n._dataElementOptions,f={},g={chart:u,dataIndex:e,dataset:n.getDataset(),datasetIndex:n.index},p={cacheable:!i};if(i=i||{},q.isArray(h))for(o=0,s=h.length;o<s;++o)f[l=h[o]]=et([i[l],d[l],c[l]],g,e,p);else for(o=0,s=(a=Object.keys(h)).length;o<s;++o)f[l=a[o]]=et([i[l],d[h[l]],d[l],c[l]],g,e,p);return p.cacheable&&(n._cachedDataOpts=Object.freeze(f)),f},removeHoverStyle:function(t){q.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,i=t.custom||{},r=t._model,a=q.getHoverColor;t.$previousStyle={backgroundColor:r.backgroundColor,borderColor:r.borderColor,borderWidth:r.borderWidth},r.backgroundColor=et([i.hoverBackgroundColor,e.hoverBackgroundColor,a(r.backgroundColor)],void 0,n),r.borderColor=et([i.hoverBorderColor,e.hoverBorderColor,a(r.borderColor)],void 0,n),r.borderWidth=et([i.hoverBorderWidth,e.hoverBorderWidth,r.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var t=this.getMeta().dataset;t&&this.removeHoverStyle(t)},_setDatasetHoverStyle:function(){var t,e,n,i,r,a,o=this.getMeta().dataset,s={};if(o){for(a=o._model,r=this._resolveDatasetElementOptions(o,!0),t=0,e=(i=Object.keys(r)).length;t<e;++t)s[n=i[t]]=a[n],a[n]=r[n];o.$previousStyle=s}},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,i=e.length;i<n?t.data.splice(i,n-i):n<i&&this.insertElements(n,i-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),rt.extend=q.inherits;var at=rt,ot=2*Math.PI;function st(t,e){var n=e.startAngle,i=e.endAngle,r=e.pixelMargin,a=r/e.outerRadius,o=e.x,s=e.y;t.beginPath(),t.arc(o,s,e.outerRadius,n-a,i+a),e.innerRadius>r?(a=r/e.innerRadius,t.arc(o,s,e.innerRadius-r,i+a,n-a,!0)):t.arc(o,s,r,i+Math.PI/2,n-Math.PI/2),t.closePath(),t.clip()}function lt(t,e,n){var i="inner"===e.borderAlign;i?(t.lineWidth=2*e.borderWidth,t.lineJoin="round"):(t.lineWidth=e.borderWidth,t.lineJoin="bevel"),n.fullCircles&&function(t,e,n,i){var r,a=n.endAngle;for(i&&(n.endAngle=n.startAngle+ot,st(t,n),n.endAngle=a,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=ot,n.fullCircles--)),t.beginPath(),t.arc(n.x,n.y,n.innerRadius,n.startAngle+ot,n.startAngle,!0),r=0;r<n.fullCircles;++r)t.stroke();for(t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.startAngle+ot),r=0;r<n.fullCircles;++r)t.stroke()}(t,e,n,i),i&&st(t,n),t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.endAngle),t.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),t.closePath(),t.stroke()}E._set("global",{elements:{arc:{backgroundColor:E.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var ut=$.extend({_type:"arc",inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var i=q.getAngleFromPoint(n,{x:t,y:e}),r=i.angle,a=i.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=ot;for(;s<r;)r-=ot;for(;r<o;)r+=ot;var l=o<=r&&r<=s,u=a>=n.innerRadius&&a<=n.outerRadius;return l&&u}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,i="inner"===n.borderAlign?.33:0,r={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-i,0),pixelMargin:i,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/ot)};if(e.save(),e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,r.fullCircles){for(r.endAngle=r.startAngle+ot,e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),t=0;t<r.fullCircles;++t)e.fill();r.endAngle=r.startAngle+n.circumference%ot}e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),e.fill(),n.borderWidth&&lt(e,n,r),e.restore()}}),dt=q.valueOrDefault,ct=E.global.defaultColor;E._set("global",{elements:{line:{tension:.4,backgroundColor:ct,borderWidth:3,borderColor:ct,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var ht=$.extend({_type:"line",draw:function(){var t,e,n,i=this,r=i._view,a=i._chart.ctx,o=r.spanGaps,s=i._children.slice(),l=E.global,u=l.elements.line,d=-1,c=i._loop;if(s.length){if(i._loop){for(t=0;t<s.length;++t)if(e=q.previousItem(s,t),!s[t]._view.skip&&e._view.skip){s=s.slice(t).concat(s.slice(0,t)),c=o;break}c&&s.push(s[0])}for(a.save(),a.lineCap=r.borderCapStyle||u.borderCapStyle,a.setLineDash&&a.setLineDash(r.borderDash||u.borderDash),a.lineDashOffset=dt(r.borderDashOffset,u.borderDashOffset),a.lineJoin=r.borderJoinStyle||u.borderJoinStyle,a.lineWidth=dt(r.borderWidth,u.borderWidth),a.strokeStyle=r.borderColor||l.defaultColor,a.beginPath(),(n=s[0]._view).skip||(a.moveTo(n.x,n.y),d=0),t=1;t<s.length;++t)n=s[t]._view,e=-1===d?q.previousItem(s,t):s[d],n.skip||(d!==t-1&&!o||-1===d?a.moveTo(n.x,n.y):q.canvas.lineTo(a,e._view,n),d=t);c&&a.closePath(),a.stroke(),a.restore()}}}),ft=q.valueOrDefault,gt=E.global.defaultColor;function pt(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}E._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:gt,borderColor:gt,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var mt=$.extend({_type:"point",inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:pt,inXRange:pt,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,i=e.pointStyle,r=e.rotation,a=e.radius,o=e.x,s=e.y,l=E.global,u=l.defaultColor;e.skip||void 0!==t&&!q.canvas._isPointInArea(e,t)||(n.strokeStyle=e.borderColor||u,n.lineWidth=ft(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||u,q.canvas.drawPoint(n,i,a,o,s,r))}}),vt=E.global.defaultColor;function bt(t){return t&&void 0!==t.width}function yt(t){var e,n,i,r,a;return r=bt(t)?(a=t.width/2,e=t.x-a,n=t.x+a,i=Math.min(t.y,t.base),Math.max(t.y,t.base)):(a=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),i=t.y-a,t.y+a),{left:e,top:i,right:n,bottom:r}}function xt(t,e,n){return t===e?n:t===n?e:t}function _t(t,e,n){var i,r,a,o,s,l,u,d=t.borderWidth,c=(r=(i=t).borderSkipped,a={},r&&(i.horizontal?i.base>i.x&&(r=xt(r,"left","right")):i.base<i.y&&(r=xt(r,"bottom","top")),a[r]=!0),a);return q.isObject(d)?(o=+d.top||0,s=+d.right||0,l=+d.bottom||0,u=+d.left||0):o=s=l=u=+d||0,{t:c.top||o<0?0:n<o?n:o,r:c.right||s<0?0:e<s?e:s,b:c.bottom||l<0?0:n<l?n:l,l:c.left||u<0?0:e<u?e:u}}function wt(t,e,n){var i=null===e,r=null===n,a=!(!t||i&&r)&&yt(t);return a&&(i||e>=a.left&&e<=a.right)&&(r||n>=a.top&&n<=a.bottom)}E._set("global",{elements:{rectangle:{backgroundColor:vt,borderColor:vt,borderSkipped:"bottom",borderWidth:0}}});var kt=$.extend({_type:"rectangle",draw:function(){var t,e,n,i,r,a=this._chart.ctx,o=this._view,s=(e=yt(t=o),n=e.right-e.left,i=e.bottom-e.top,r=_t(t,n/2,i/2),{outer:{x:e.left,y:e.top,w:n,h:i},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b}}),l=s.outer,u=s.inner;a.fillStyle=o.backgroundColor,a.fillRect(l.x,l.y,l.w,l.h),l.w===u.w&&l.h===u.h||(a.save(),a.beginPath(),a.rect(l.x,l.y,l.w,l.h),a.clip(),a.fillStyle=o.borderColor,a.rect(u.x,u.y,u.w,u.h),a.fill("evenodd"),a.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return wt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return bt(n)?wt(n,t,null):wt(n,null,e)},inXRange:function(t){return wt(this._view,t,null)},inYRange:function(t){return wt(this._view,null,t)},getCenterPoint:function(){var t,e,n=this._view;return e=bt(n)?(t=n.x,(n.y+n.base)/2):(t=(n.x+n.base)/2,n.y),{x:t,y:e}},getArea:function(){var t=this._view;return bt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),Mt={},Ct=ut,St=ht,Dt=mt,At=kt;Mt.Arc=Ct,Mt.Line=St,Mt.Point=Dt,Mt.Rectangle=At;var Pt=q._deprecated,Tt=q.valueOrDefault;function It(t,e,n){var i,r,a=n.barThickness,o=e.stackCount,s=e.pixels[t],l=q.isNullOrUndef(a)?function(t,e){var n,i,r,a,o=t._length;for(r=1,a=e.length;r<a;++r)o=Math.min(o,Math.abs(e[r]-e[r-1]));for(r=0,a=t.getTicks().length;r<a;++r)i=t.getPixelForTick(r),o=0<r?Math.min(o,Math.abs(i-n)):o,n=i;return o}(e.scale,e.pixels):-1;return r=q.isNullOrUndef(a)?(i=l*n.categoryPercentage,n.barPercentage):(i=a*o,1),{chunk:i/o,ratio:r,start:s-i/2}}E._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),E._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var Ot=at.extend({dataElementType:Mt.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var t,e,n=this;at.prototype.initialize.apply(n,arguments),(t=n.getMeta()).stack=n.getDataset().stack,t.bar=!0,e=n._getIndexScale().options,Pt("bar chart",e.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),Pt("bar chart",e.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),Pt("bar chart",e.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),Pt("bar chart",n._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),Pt("bar chart",e.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(t){var e,n,i=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=i.length;e<n;++e)this.updateElement(i[e],e,t)},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=i.getDataset(),o=i._resolveDataElementOptions(t,e);t._xScale=i.getScaleForId(r.xAxisID),t._yScale=i.getScaleForId(r.yAxisID),t._datasetIndex=i.index,t._index=e,t._model={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderSkipped:o.borderSkipped,borderWidth:o.borderWidth,datasetLabel:a.label,label:i.chart.data.labels[e]},q.isArray(a.data[e])&&(t._model.borderSkipped=null),i._updateElementGeometry(t,e,n,o),t.pivot()},_updateElementGeometry:function(t,e,n,i){var r=this,a=t._model,o=r._getValueScale(),s=o.getBasePixel(),l=o.isHorizontal(),u=r._ruler||r.getRuler(),d=r.calculateBarValuePixels(r.index,e,i),c=r.calculateBarIndexPixels(r.index,e,u,i);a.horizontal=l,a.base=n?s:d.base,a.x=l?n?s:d.head:c.center,a.y=l?c.center:n?s:d.head,a.height=l?c.size:void 0,a.width=l?void 0:c.size},_getStacks:function(t){var e,n,i=this._getIndexScale(),r=i._getMatchingVisibleMetas(this._type),a=i.options.stacked,o=r.length,s=[];for(e=0;e<o&&(n=r[e],(!1===a||-1===s.indexOf(n.stack)||void 0===a&&void 0===n.stack)&&s.push(n.stack),n.index!==t);++e);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),i=void 0!==e?n.indexOf(e):-1;return-1===i?n.length-1:i},getRuler:function(){var t,e,n=this._getIndexScale(),i=[];for(t=0,e=this.getMeta().data.length;t<e;++t)i.push(n.getPixelForValue(null,t,this.index));return{pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this.getStackCount(),scale:n}},calculateBarValuePixels:function(t,e,n){var i,r,a,o,s,l,u,d=this.chart,c=this._getValueScale(),h=c.isHorizontal(),f=d.data.datasets,g=c._getMatchingVisibleMetas(this._type),p=c._parseValue(f[t].data[e]),m=n.minBarLength,v=c.options.stacked,b=this.getMeta().stack,y=void 0===p.start?0:0<=p.max&&0<=p.min?p.min:p.max,x=void 0===p.start?p.end:0<=p.max&&0<=p.min?p.max-p.min:p.min-p.max,_=g.length;if(v||void 0===v&&void 0!==b)for(i=0;i<_&&(r=g[i]).index!==t;++i)r.stack===b&&(a=void 0===(u=c._parseValue(f[r.index].data[e])).start?u.end:0<=u.min&&0<=u.max?u.max:u.min,(p.min<0&&a<0||0<=p.max&&0<a)&&(y+=a));return o=c.getPixelForValue(y),l=(s=c.getPixelForValue(y+x))-o,void 0!==m&&Math.abs(l)<m&&(l=m,s=0<=x&&!h||x<0&&h?o-m:o+m),{size:l,base:o,head:s,center:s+l/2}},calculateBarIndexPixels:function(t,e,n,i){var r,a,o,s,l,u,d,c,h,f="flex"===i.barThickness?(r=e,o=i,l=(a=n).pixels,u=l[r],d=0<r?l[r-1]:null,c=r<l.length-1?l[r+1]:null,h=o.categoryPercentage,null===d&&(d=u-(null===c?a.end-a.start:c-u)),null===c&&(c=u+u-d),s=u-(u-Math.min(d,c))/2*h,{chunk:Math.abs(c-d)/2*h/a.stackCount,ratio:o.barPercentage,start:s}):It(e,n,i),g=this.getStackIndex(t,this.getMeta().stack),p=f.start+f.chunk*g+f.chunk/2,m=Math.min(Tt(i.maxBarThickness,1/0),f.chunk*f.ratio);return{base:p-m/2,head:p+m/2,center:p,size:m}},draw:function(){var t=this.chart,e=this._getValueScale(),n=this.getMeta().data,i=this.getDataset(),r=n.length,a=0;for(q.canvas.clipArea(t.ctx,t.chartArea);a<r;++a){var o=e._parseValue(i.data[a]);isNaN(o.min)||isNaN(o.max)||n[a].draw()}q.canvas.unclipArea(t.ctx)},_resolveDataElementOptions:function(){var t=q.extend({},at.prototype._resolveDataElementOptions.apply(this,arguments)),e=this._getIndexScale().options,n=this._getValueScale().options;return t.barPercentage=Tt(e.barPercentage,t.barPercentage),t.barThickness=Tt(e.barThickness,t.barThickness),t.categoryPercentage=Tt(e.categoryPercentage,t.categoryPercentage),t.maxBarThickness=Tt(e.maxBarThickness,t.maxBarThickness),t.minBarLength=Tt(n.minBarLength,t.minBarLength),t}}),Ft=q.valueOrDefault,Lt=q.options.resolve;E._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",i=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+i.r+")"}}}});var Rt=at.extend({dataElementType:Mt.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(n){var i=this,t=i.getMeta().data;q.each(t,function(t,e){i.updateElement(t,e,n)})},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=t.custom||{},o=i.getScaleForId(r.xAxisID),s=i.getScaleForId(r.yAxisID),l=i._resolveDataElementOptions(t,e),u=i.getDataset().data[e],d=i.index,c=n?o.getPixelForDecimal(.5):o.getPixelForValue("object"==typeof u?u:NaN,e,d),h=n?s.getBasePixel():s.getPixelForValue(u,e,d);t._xScale=o,t._yScale=s,t._options=l,t._datasetIndex=d,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:a.skip||isNaN(c)||isNaN(h),x:c,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Ft(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Ft(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Ft(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(t,e){var n=this,i=n.chart,r=n.getDataset(),a=t.custom||{},o=r.data[e]||{},s=at.prototype._resolveDataElementOptions.apply(n,arguments),l={chart:i,dataIndex:e,dataset:r,datasetIndex:n.index};return n._cachedDataOpts===s&&(s=q.extend({},s)),s.radius=Lt([a.radius,o.r,n._config.radius,i.options.elements.point.radius],l,e),s}}),zt=q.valueOrDefault,Nt=Math.PI,Bt=2*Nt,Et=Nt/2;E._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){var n,i,r,a=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(r=o.getDatasetMeta(n)).data[a]&&(r.data[a].hidden=!r.data[a].hidden);o.update()}},cutoutPercentage:50,rotation:-Et,circumference:Bt,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],i=": "+e.datasets[t.datasetIndex].data[t.index];return q.isArray(n)?(n=n.slice())[0]+=i:n+=i,n}}}});var Wt=at.extend({dataElementType:Mt.Arc,linkScales:q.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,i,r,a=this,o=a.chart,s=o.chartArea,l=o.options,u=1,d=1,c=0,h=0,f=a.getMeta(),g=f.data,p=l.cutoutPercentage/100||0,m=l.circumference,v=a._getRingWeight(a.index);if(m<Bt){var b=l.rotation%Bt,y=(b+=Nt<=b?-Bt:b<-Nt?Bt:0)+m,x=Math.cos(b),_=Math.sin(b),w=Math.cos(y),k=Math.sin(y),M=b<=0&&0<=y||Bt<=y,C=b<=Et&&Et<=y||Bt+Et<=y,S=b<=-Et&&-Et<=y||Nt+Et<=y,D=b===-Nt||Nt<=y?-1:Math.min(x,x*p,w,w*p),A=S?-1:Math.min(_,_*p,k,k*p),P=M?1:Math.max(x,x*p,w,w*p),T=C?1:Math.max(_,_*p,k,k*p);u=(P-D)/2,d=(T-A)/2,c=-(P+D)/2,h=-(T+A)/2}for(i=0,r=g.length;i<r;++i)g[i]._options=a._resolveDataElementOptions(g[i],i);for(o.borderWidth=a.getMaxBorderWidth(),e=(s.right-s.left-o.borderWidth)/u,n=(s.bottom-s.top-o.borderWidth)/d,o.outerRadius=Math.max(Math.min(e,n)/2,0),o.innerRadius=Math.max(o.outerRadius*p,0),o.radiusLength=(o.outerRadius-o.innerRadius)/(a._getVisibleDatasetWeightTotal()||1),o.offsetX=c*o.outerRadius,o.offsetY=h*o.outerRadius,f.total=a.calculateTotal(),a.outerRadius=o.outerRadius-o.radiusLength*a._getRingWeightOffset(a.index),a.innerRadius=Math.max(a.outerRadius-o.radiusLength*v,0),i=0,r=g.length;i<r;++i)a.updateElement(g[i],i,t)},updateElement:function(t,e,n){var i=this,r=i.chart,a=r.chartArea,o=r.options,s=o.animation,l=(a.left+a.right)/2,u=(a.top+a.bottom)/2,d=o.rotation,c=o.rotation,h=i.getDataset(),f=n&&s.animateRotate||t.hidden?0:i.calculateCircumference(h.data[e])*(o.circumference/Bt),g=n&&s.animateScale?0:i.innerRadius,p=n&&s.animateScale?0:i.outerRadius,m=t._options||{};q.extend(t,{_datasetIndex:i.index,_index:e,_model:{backgroundColor:m.backgroundColor,borderColor:m.borderColor,borderWidth:m.borderWidth,borderAlign:m.borderAlign,x:l+r.offsetX,y:u+r.offsetY,startAngle:d,endAngle:c,circumference:f,outerRadius:p,innerRadius:g,label:q.valueAtIndexOrDefault(h.label,e,r.data.labels[e])}});var v=t._model;n&&s.animateRotate||(v.startAngle=0===e?o.rotation:i.getMeta().data[e-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),t.pivot()},calculateTotal:function(){var n,i=this.getDataset(),t=this.getMeta(),r=0;return q.each(t.data,function(t,e){n=i.data[e],isNaN(n)||t.hidden||(r+=Math.abs(n))}),r},calculateCircumference:function(t){var e=this.getMeta().total;return 0<e&&!isNaN(t)?Bt*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,i,r,a,o,s,l,u=0,d=this.chart;if(!t)for(e=0,n=d.data.datasets.length;e<n;++e)if(d.isDatasetVisible(e)){t=(i=d.getDatasetMeta(e)).data,e!==this.index&&(a=i.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)r=t[e],"inner"!==(o=a?(a._configure(),a._resolveDataElementOptions(r,e)):r._options).borderAlign&&(u=(u=u<(s=o.borderWidth)?s:u)<(l=o.hoverBorderWidth)?l:u);return u},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=zt(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(zt(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});E._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),E._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var Ht=Ot.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Vt=q.valueOrDefault,jt=q.options.resolve,qt=q.canvas._isPointInArea;function Ut(t,e){var n=t&&t.options.ticks||{},i=n.reverse,r=void 0===n.min?e:0,a=void 0===n.max?e:0;return{start:i?a:r,end:i?r:a}}E._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Yt=at.extend({datasetElementType:Mt.Line,dataElementType:Mt.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.options,l=i._config,u=i._showLine=Vt(l.showLine,s.showLines);for(i._xScale=i.getScaleForId(r.xAxisID),i._yScale=i.getScaleForId(r.yAxisID),u&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=i._yScale,a._datasetIndex=i.index,a._children=o,a._model=i._resolveDatasetElementOptions(a),a.pivot()),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(u&&0!==a._model.tension&&i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i,r,a=this,o=a.getMeta(),s=t.custom||{},l=a.getDataset(),u=a.index,d=l.data[e],c=a._xScale,h=a._yScale,f=o.dataset._model,g=a._resolveDataElementOptions(t,e);i=c.getPixelForValue("object"==typeof d?d:NaN,e,u),r=n?h.getBasePixel():a.calculatePointY(d,e,u),t._xScale=c,t._yScale=h,t._options=g,t._datasetIndex=u,t._index=e,t._model={x:i,y:r,skip:s.skip||isNaN(i)||isNaN(r),radius:g.radius,pointStyle:g.pointStyle,rotation:g.rotation,backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,tension:Vt(s.tension,f?f.tension:0),steppedLine:!!f&&f.steppedLine,hitRadius:g.hitRadius}},_resolveDatasetElementOptions:function(t){var e,n,i,r,a,o,s,l,u,d,c,h=this,f=h._config,g=t.custom||{},p=h.chart.options,m=p.elements.line,v=at.prototype._resolveDatasetElementOptions.apply(h,arguments);return v.spanGaps=Vt(f.spanGaps,p.spanGaps),v.tension=Vt(f.lineTension,m.tension),v.steppedLine=jt([g.steppedLine,f.steppedLine,m.stepped]),v.clip=(e=Vt(f.clip,(o=h._xScale,s=h._yScale,l=v.borderWidth,d=Ut(o,u=l/2),{top:(c=Ut(s,u)).end,right:d.end,bottom:c.start,left:d.start})),q.isObject(e)?(n=e.top,i=e.right,r=e.bottom,a=e.left):n=i=r=a=e,{top:n,right:i,bottom:r,left:a}),v},calculatePointY:function(t,e,n){var i,r,a,o,s,l,u,d=this.chart,c=this._yScale,h=0,f=0;if(c.options.stacked){for(s=+c.getRightValue(t),u=(l=d._getSortedVisibleDatasetMetas()).length,i=0;i<u&&(a=l[i]).index!==n;++i)r=d.data.datasets[a.index],"line"===a.type&&a.yAxisID===c.id&&((o=+c.getRightValue(r.data[e]))<0?f+=o||0:h+=o||0);return s<0?c.getPixelForValue(f+s):c.getPixelForValue(h+s)}return c.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,i,r=this.chart,a=this.getMeta(),o=a.dataset._model,s=r.chartArea,l=a.data||[];function u(t,e,n){return Math.max(Math.min(t,n),e)}if(o.spanGaps&&(l=l.filter(function(t){return!t._model.skip})),"monotone"===o.cubicInterpolationMode)q.splineCurveMonotone(l);else for(t=0,e=l.length;t<e;++t)n=l[t]._model,i=q.splineCurve(q.previousItem(l,t)._model,n,q.nextItem(l,t)._model,o.tension),n.controlPointPreviousX=i.previous.x,n.controlPointPreviousY=i.previous.y,n.controlPointNextX=i.next.x,n.controlPointNextY=i.next.y;if(r.options.elements.line.capBezierPoints)for(t=0,e=l.length;t<e;++t)n=l[t]._model,qt(n,s)&&(0<t&&qt(l[t-1]._model,s)&&(n.controlPointPreviousX=u(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=u(n.controlPointPreviousY,s.top,s.bottom)),t<l.length-1&&qt(l[t+1]._model,s)&&(n.controlPointNextX=u(n.controlPointNextX,s.left,s.right),n.controlPointNextY=u(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var t,e=this.chart,n=this.getMeta(),i=n.data||[],r=e.chartArea,a=e.canvas,o=0,s=i.length;for(this._showLine&&(t=n.dataset._model.clip,q.canvas.clipArea(e.ctx,{left:!1===t.left?0:r.left-t.left,right:!1===t.right?a.width:r.right+t.right,top:!1===t.top?0:r.top-t.top,bottom:!1===t.bottom?a.height:r.bottom+t.bottom}),n.dataset.draw(),q.canvas.unclipArea(e.ctx));o<s;++o)i[o].draw(r)},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Vt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Vt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Vt(n.hoverBorderWidth,n.borderWidth),e.radius=Vt(n.hoverRadius,n.radius)}}),Gt=q.options.resolve;E._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){var n,i,r,a=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(r=o.getDatasetMeta(n)).data[a].hidden=!r.data[a].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});var Xt=at.extend({dataElementType:Mt.Arc,linkScales:q.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i,r=this,a=r.getDataset(),o=r.getMeta(),s=r.chart.options.startAngle||0,l=r._starts=[],u=r._angles=[],d=o.data;for(r._updateRadius(),o.count=r.countVisibleElements(),e=0,n=a.data.length;e<n;e++)l[e]=s,i=r._computeAngle(e),s+=u[e]=i;for(e=0,n=d.length;e<n;++e)d[e]._options=r._resolveDataElementOptions(d[e],e),r.updateElement(d[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,i=e.options,r=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(r/2,0),e.innerRadius=Math.max(i.cutoutPercentage?e.outerRadius/100*i.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var i=this,r=i.chart,a=i.getDataset(),o=r.options,s=o.animation,l=r.scale,u=r.data.labels,d=l.xCenter,c=l.yCenter,h=o.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(a.data[e]),g=i._starts[e],p=g+(t.hidden?0:i._angles[e]),m=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[e]),v=t._options||{};q.extend(t,{_datasetIndex:i.index,_index:e,_scale:l,_model:{backgroundColor:v.backgroundColor,borderColor:v.borderColor,borderWidth:v.borderWidth,borderAlign:v.borderAlign,x:d,y:c,innerRadius:0,outerRadius:n?m:f,startAngle:n&&s.animateRotate?h:g,endAngle:n&&s.animateRotate?h:p,label:q.valueAtIndexOrDefault(u,e,u[e])}}),t.pivot()},countVisibleElements:function(){var n=this.getDataset(),t=this.getMeta(),i=0;return q.each(t.data,function(t,e){isNaN(n.data[e])||t.hidden||i++}),i},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor,r=q.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=r(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=r(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=r(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(t){var e=this,n=this.getMeta().count,i=e.getDataset(),r=e.getMeta();if(isNaN(i.data[t])||r.data[t].hidden)return 0;var a={chart:e.chart,dataIndex:t,dataset:i,datasetIndex:e.index};return Gt([e.chart.options.elements.arc.angle,2*Math.PI/n],a,t)}});E._set("pie",q.clone(E.doughnut)),E._set("pie",{cutoutPercentage:0});var Kt=Wt,Zt=q.valueOrDefault;E._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var $t=at.extend({datasetElementType:Mt.Line,dataElementType:Mt.Point,linkScales:q.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.scale,l=i._config;for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=s,a._datasetIndex=i.index,a._children=o,a._loop=!0,a._model=i._resolveDatasetElementOptions(a),a.pivot(),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i=this,r=t.custom||{},a=i.getDataset(),o=i.chart.scale,s=o.getPointPositionForValue(e,a.data[e]),l=i._resolveDataElementOptions(t,e),u=i.getMeta().dataset._model,d=n?o.xCenter:s.x,c=n?o.yCenter:s.y;t._scale=o,t._options=l,t._datasetIndex=i.index,t._index=e,t._model={x:d,y:c,skip:r.skip||isNaN(d)||isNaN(c),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:Zt(r.tension,u?u.tension:0),hitRadius:l.hitRadius}},_resolveDatasetElementOptions:function(){var t=this._config,e=this.chart.options,n=at.prototype._resolveDatasetElementOptions.apply(this,arguments);return n.spanGaps=Zt(t.spanGaps,e.spanGaps),n.tension=Zt(t.lineTension,e.elements.line.tension),n},updateBezierControlPoints:function(){var t,e,n,i,r=this.getMeta(),a=this.chart.chartArea,o=r.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}for(r.dataset._model.spanGaps&&(o=o.filter(function(t){return!t._model.skip})),t=0,e=o.length;t<e;++t)n=o[t]._model,i=q.splineCurve(q.previousItem(o,t,!0)._model,n,q.nextItem(o,t,!0)._model,n.tension),n.controlPointPreviousX=s(i.previous.x,a.left,a.right),n.controlPointPreviousY=s(i.previous.y,a.top,a.bottom),n.controlPointNextX=s(i.next.x,a.left,a.right),n.controlPointNextY=s(i.next.y,a.top,a.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Zt(n.hoverBorderWidth,n.borderWidth),e.radius=Zt(n.hoverRadius,n.radius)}});E._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}}),E._set("global",{datasets:{scatter:{showLine:!1}}});var Qt={bar:Ot,bubble:Rt,doughnut:Wt,horizontalBar:Ht,line:Yt,polarArea:Xt,pie:Kt,radar:$t,scatter:Yt};function Jt(t,e){return t.native?{x:t.x,y:t.y}:q.getRelativePosition(t,e)}function te(t,e){var n,i,r,a,o,s,l=t._getSortedVisibleDatasetMetas();for(i=0,a=l.length;i<a;++i)for(r=0,o=(n=l[i].data).length;r<o;++r)(s=n[r])._view.skip||e(s)}function ee(t,e){var n=[];return te(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function ne(t,i,r,a){var o=Number.POSITIVE_INFINITY,s=[];return te(t,function(t){if(!r||t.inRange(i.x,i.y)){var e=t.getCenterPoint(),n=a(i,e);n<o?(s=[t],o=n):n===o&&s.push(t)}}),s}function ie(t){var r=-1!==t.indexOf("x"),a=-1!==t.indexOf("y");return function(t,e){var n=r?Math.abs(t.x-e.x):0,i=a?Math.abs(t.y-e.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(i,2))}}function re(t,e,n){var i=Jt(e,t);n.axis=n.axis||"x";var r=ie(n.axis),a=n.intersect?ee(t,i):ne(t,i,!1,r),o=[];return a.length?(t._getSortedVisibleDatasetMetas().forEach(function(t){var e=t.data[a[0]._index];e&&!e._view.skip&&o.push(e)}),o):[]}var ae={modes:{single:function(t,e){var n=Jt(e,t),i=[];return te(t,function(t){return t.inRange(n.x,n.y)&&(i.push(t),i)}),i.slice(0,1)},label:re,index:re,dataset:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||"xy";var r=ie(n.axis),a=n.intersect?ee(t,i):ne(t,i,!1,r);return 0<a.length&&(a=t.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(t,e){return re(t,e,{intersect:!1})},point:function(t,e){return ee(t,Jt(e,t))},nearest:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||"xy";var r=ie(n.axis);return ne(t,i,n.intersect,r)},x:function(t,e,n){var i=Jt(e,t),r=[],a=!1;return te(t,function(t){t.inXRange(i.x)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r},y:function(t,e,n){var i=Jt(e,t),r=[],a=!1;return te(t,function(t){t.inYRange(i.y)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r}}},oe=q.extend;function se(t,e){return q.where(t,function(t){return t.pos===e})}function le(t,r){return t.sort(function(t,e){var n=r?e:t,i=r?t:e;return n.weight===i.weight?n.index-i.index:n.weight-i.weight})}function ue(t){var e=function(t){var e,n,i,r=[];for(e=0,n=(t||[]).length;e<n;++e)i=t[e],r.push({index:e,box:i,pos:i.position,horizontal:i.isHorizontal(),weight:i.weight});return r}(t),n=le(se(e,"left"),!0),i=le(se(e,"right")),r=le(se(e,"top"),!0),a=le(se(e,"bottom"));return{leftAndTop:n.concat(r),rightAndBottom:i.concat(a),chartArea:se(e,"chartArea"),vertical:n.concat(i),horizontal:r.concat(a)}}function de(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function ce(t,e,n){var i,r,a=n.box,o=t.maxPadding;if(n.size&&(t[n.pos]-=n.size),n.size=n.horizontal?a.height:a.width,t[n.pos]+=n.size,a.getPadding){var s=a.getPadding();o.top=Math.max(o.top,s.top),o.left=Math.max(o.left,s.left),o.bottom=Math.max(o.bottom,s.bottom),o.right=Math.max(o.right,s.right)}return i=e.outerWidth-de(o,t,"left","right"),r=e.outerHeight-de(o,t,"top","bottom"),i!==t.w||r!==t.h?(t.w=i,t.h=r,n.horizontal?i!==t.w:r!==t.h):void 0}function he(t,n){var i=n.maxPadding;function e(t){var e={left:0,top:0,right:0,bottom:0};return t.forEach(function(t){e[t]=Math.max(n[t],i[t])}),e}return e(t?["left","right"]:["top","bottom"])}function fe(t,e,n){var i,r,a,o,s,l,u=[];for(i=0,r=t.length;i<r;++i)(o=(a=t[i]).box).update(a.width||e.w,a.height||e.h,he(a.horizontal,e)),ce(e,n,a)&&(l=!0,u.length&&(s=!0)),o.fullWidth||u.push(a);return s&&fe(u,e,n)||l}function ge(t,e,n){var i,r,a,o,s=n.padding,l=e.x,u=e.y;for(i=0,r=t.length;i<r;++i)o=(a=t[i]).box,a.horizontal?(o.left=o.fullWidth?s.left:e.left,o.right=o.fullWidth?n.outerWidth-s.right:e.left+e.w,o.top=u,o.bottom=u+o.height,o.width=o.right-o.left,u=o.bottom):(o.left=l,o.right=l+o.width,o.top=e.top,o.bottom=e.top+e.h,o.height=o.bottom-o.top,l=o.right);e.x=l,e.y=u}E._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var pe,me={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw:function(){e.draw.apply(e,arguments)}}]},t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var i,r=["fullWidth","position","weight"],a=r.length,o=0;o<a;++o)i=r[o],n.hasOwnProperty(i)&&(e[i]=n[i])},update:function(n,t,e){if(n){var i,r,a=n.options.layout||{},o=q.options.toPadding(a.padding),s=t-o.width,l=e-o.height,u=ue(n.boxes),d=u.vertical,c=u.horizontal,h=Object.freeze({outerWidth:t,outerHeight:e,padding:o,availableWidth:s,vBoxMaxWidth:s/2/d.length,hBoxMaxHeight:l/2}),f=oe({maxPadding:oe({},o),w:s,h:l,x:o.left,y:o.top},o);!function(t,e){var n,i,r;for(n=0,i=t.length;n<i;++n)(r=t[n]).width=r.horizontal?r.box.fullWidth&&e.availableWidth:e.vBoxMaxWidth,r.height=r.horizontal&&e.hBoxMaxHeight}(d.concat(c),h),fe(d,f,h),fe(c,f,h)&&fe(d,f,h),r=(i=f).maxPadding,i.y+=g("top"),i.x+=g("left"),g("right"),g("bottom"),ge(u.leftAndTop,f,h),f.x+=f.w,f.y+=f.h,ge(u.rightAndBottom,f,h),n.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h},q.each(u.chartArea,function(t){var e=t.box;oe(e,n.chartArea),e.update(f.w,f.h)})}function g(t){var e=Math.max(r[t]-i[t],0);return i[t]+=e,e}}},ve=(pe=Object.freeze({__proto__:null,default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&pe.default||pe,be="$chartjs",ye="chartjs-",xe=ye+"size-monitor",_e=ye+"render-monitor",we=ye+"render-animation",ke=["animationstart","webkitAnimationStart"],Me={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function Ce(t,e){var n=q.getStyle(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?Number(i[1]):void 0}var Se=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function De(t,e,n){t.addEventListener(e,n,Se)}function Ae(t,e,n){t.removeEventListener(e,n,Se)}function Pe(t,e,n,i,r){return{type:t,chart:e,native:r||null,x:void 0!==n?n:null,y:void 0!==i?i:null}}function Te(t){var e=document.createElement("div");return e.className=t||"",e}function Ie(n,i,r){var t,e,a,o,s,l,u,d,c,h,f,g,p=n[be]||(n[be]={}),m=p.resizer=(u=!(s=function(){if(p.resizer){var t=r.options.maintainAspectRatio&&n.parentNode,e=t?t.clientWidth:0;i(Pe("resize",r)),t&&t.clientWidth<e&&r.canvas&&i(Pe("resize",r))}}),d=[],t=function(){d=Array.prototype.slice.call(arguments),l=l||this,u||(u=!0,q.requestAnimFrame.call(window,function(){u=!1,s.apply(l,d)}))},e=Te(xe),a=Te(xe+"-expand"),o=Te(xe+"-shrink"),a.appendChild(Te()),o.appendChild(Te()),e.appendChild(a),e.appendChild(o),e._reset=function(){a.scrollLeft=1e6,a.scrollTop=1e6,o.scrollLeft=1e6,o.scrollTop=1e6},De(a,"scroll",v.bind(a,"expand")),De(o,"scroll",v.bind(o,"shrink")),e);function v(){e._reset(),t()}h=function(){if(p.resizer){var t=n.parentNode;t&&t!==m.parentNode&&t.insertBefore(m,t.firstChild),m._reset()}},f=(c=n)[be]||(c[be]={}),g=f.renderProxy=function(t){t.animationName===we&&h()},q.each(ke,function(t){De(c,t,g)}),f.reflow=!!c.offsetParent,c.classList.add(_e)}function Oe(t){var e,n,i,r=t[be]||{},a=r.resizer;delete r.resizer,n=(e=t)[be]||{},(i=n.renderProxy)&&(q.each(ke,function(t){Ae(e,t,i)}),delete n.renderProxy),e.classList.remove(_e),a&&a.parentNode&&a.parentNode.removeChild(a)}var Fe={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(t){if(!this.disableCSSInjection){var e=t.getRootNode?t.getRootNode():document;!function(t,e){var n=t[be]||(t[be]={});if(!n.containsStyles){n.containsStyles=!0,e="/* Chart.js */\n"+e;var i=document.createElement("style");i.setAttribute("type","text/css"),i.appendChild(document.createTextNode(e)),t.appendChild(i)}}(e.host?e:document.head,ve)}},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(this._ensureLoaded(t),function(t,e){var n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t[be]={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===r||""===r){var a=Ce(t,"width");void 0!==a&&(t.width=a)}if(null===i||""===i)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var o=Ce(t,"height");void 0!==a&&(t.height=o)}}(t,e),n):null},releaseContext:function(t){var n=t.canvas;if(n[be]){var i=n[be].initial;["height","width"].forEach(function(t){var e=i[t];q.isNullOrUndef(e)?n.removeAttribute(t):n.setAttribute(t,e)}),q.each(i.style||{},function(t,e){n.style[e]=t}),n.width=n.width,delete n[be]}},addEventListener:function(a,t,o){var e=a.canvas;if("resize"!==t){var n=o[be]||(o[be]={});De(e,t,(n.proxies||(n.proxies={}))[a.id+"_"+t]=function(t){var e,n,i,r;o((n=a,i=Me[(e=t).type]||e.type,r=q.getRelativePosition(e,n),Pe(i,n,r.x,r.y,e)))})}else Ie(e,o,a)},removeEventListener:function(t,e,n){var i=t.canvas;if("resize"!==e){var r=((n[be]||{}).proxies||{})[t.id+"_"+e];r&&Ae(i,e,r)}else Oe(i)}};q.addEvent=De,q.removeEvent=Ae;var Le=Fe._enabled?Fe:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},Re=q.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Le);E._set("global",{plugins:{}});var ze={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),this._cacheId++},unregister:function(t){var n=this._plugins;[].concat(t).forEach(function(t){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var i,r,a,o,s,l=this.descriptors(t),u=l.length;for(i=0;i<u;++i)if("function"==typeof(s=(a=(r=l[i]).plugin)[e])&&((o=[t].concat(n||[])).push(r.options),!1===s.apply(a,o)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var i=[],r=[],n=t&&t.config||{},a=n.options&&n.options.plugins||{};return this._plugins.concat(n.plugins||[]).forEach(function(t){if(-1===i.indexOf(t)){var e=t.id,n=a[e];!1!==n&&(!0===n&&(n=q.clone(E.global.plugins[e])),i.push(t),r.push({plugin:t,options:n||{}}))}}),e.descriptors=r,e.id=this._cacheId,r},_invalidate:function(t){delete t.$plugins}},Ne={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=q.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?q.merge({},[E.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=q.extend(this.defaults[t],e))},addScalesToLayout:function(e){q.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,me.addBox(e,t)})}},Be=q.valueOrDefault,Ee=q.rtl.getRtlAdapter;E._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:q.noop,title:function(t,e){var n="",i=e.labels,r=i?i.length:0;if(0<t.length){var a=t[0];a.label?n=a.label:a.xLabel?n=a.xLabel:0<r&&a.index<r&&(n=i[a.index])}return n},afterTitle:q.noop,beforeBody:q.noop,beforeLabel:q.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),q.isNullOrUndef(t.value)?n+=t.yLabel:n+=t.value,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:q.noop,afterBody:q.noop,beforeFooter:q.noop,footer:q.noop,afterFooter:q.noop}}});var We={average:function(t){if(!t.length)return!1;var e,n,i=0,r=0,a=0;for(e=0,n=t.length;e<n;++e){var o=t[e];if(o&&o.hasValue()){var s=o.tooltipPosition();i+=s.x,r+=s.y,++a}}return{x:i/a,y:r/a}},nearest:function(t,e){var n,i,r,a=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){var l=t[n];if(l&&l.hasValue()){var u=l.getCenterPoint(),d=q.distanceBetweenPoints(e,u);d<s&&(s=d,r=l)}}if(r){var c=r.tooltipPosition();a=c.x,o=c.y}return{x:a,y:o}}};function He(t,e){return e&&(q.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ve(t){return("string"==typeof t||t instanceof String)&&-1<t.indexOf("\n")?t.split("\n"):t}function je(t){var e=E.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,rtl:t.rtl,textDirection:t.textDirection,bodyFontColor:t.bodyFontColor,_bodyFontFamily:Be(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:Be(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:Be(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:Be(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:Be(t.titleFontStyle,e.defaultFontStyle),titleFontSize:Be(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:Be(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:Be(t.footerFontStyle,e.defaultFontStyle),footerFontSize:Be(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function qe(t,e){var n=t._chart.ctx,i=2*e.yPadding,r=0,a=e.body,o=a.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);o+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,u=e.titleFontSize,d=e.bodyFontSize,c=e.footerFontSize;i+=s*u,i+=s?(s-1)*e.titleSpacing:0,i+=s?e.titleMarginBottom:0,i+=o*d,i+=o?(o-1)*e.bodySpacing:0,i+=l?e.footerMarginTop:0,i+=l*c,i+=l?(l-1)*e.footerSpacing:0;function h(t){r=Math.max(r,n.measureText(t).width+f)}var f=0;return n.font=q.fontString(u,e._titleFontStyle,e._titleFontFamily),q.each(e.title,h),n.font=q.fontString(d,e._bodyFontStyle,e._bodyFontFamily),q.each(e.beforeBody.concat(e.afterBody),h),f=e.displayColors?d+2:0,q.each(a,function(t){q.each(t.before,h),q.each(t.lines,h),q.each(t.after,h)}),f=0,n.font=q.fontString(c,e._footerFontStyle,e._footerFontFamily),q.each(e.footer,h),{width:r+=2*e.xPadding,height:i}}function Ue(t,e){return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function Ye(t){return He([],Ve(t))}var Ge=$.extend({initialize:function(){this._model=je(this._options),this._lastActive=[]},getTitle:function(){var t=this._options.callbacks,e=t.beforeTitle.apply(this,arguments),n=t.title.apply(this,arguments),i=t.afterTitle.apply(this,arguments),r=[];return r=He(r,Ve(e)),r=He(r,Ve(n)),r=He(r,Ve(i))},getBeforeBody:function(){return Ye(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,n){var i=this,r=i._options.callbacks,a=[];return q.each(t,function(t){var e={before:[],lines:[],after:[]};He(e.before,Ve(r.beforeLabel.call(i,t,n))),He(e.lines,r.label.call(i,t,n)),He(e.after,Ve(r.afterLabel.call(i,t,n))),a.push(e)}),a},getAfterBody:function(){return Ye(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this._options.callbacks,e=t.beforeFooter.apply(this,arguments),n=t.footer.apply(this,arguments),i=t.afterFooter.apply(this,arguments),r=[];return r=He(r,Ve(e)),r=He(r,Ve(n)),r=He(r,Ve(i))},update:function(t){var e,n,i,r,a,o,s,l,u,d,c,h,f,g,p,m,v,b,y,x,_,w,k,M=this,C=M._options,S=M._model,D=M._model=je(C),A=M._active,P=M._data,T={xAlign:S.xAlign,yAlign:S.yAlign},I={x:S.x,y:S.y},O={width:S.width,height:S.height},F={x:S.caretX,y:S.caretY};if(A.length){D.opacity=1;var L=[],R=[];F=We[C.position].call(M,A,M._eventPosition);var z=[];for(e=0,n=A.length;e<n;++e)z.push((m=A[e],k=w=_=b=v=void 0,v=m._xScale,b=m._yScale||m._scale,y=m._index,x=m._datasetIndex,_=m._chart.getDatasetMeta(x).controller,w=_._getIndexScale(),k=_._getValueScale(),{xLabel:v?v.getLabelForIndex(y,x):"",yLabel:b?b.getLabelForIndex(y,x):"",label:w?""+w.getLabelForIndex(y,x):"",value:k?""+k.getLabelForIndex(y,x):"",index:y,datasetIndex:x,x:m._model.x,y:m._model.y}));C.filter&&(z=z.filter(function(t){return C.filter(t,P)})),C.itemSort&&(z=z.sort(function(t,e){return C.itemSort(t,e,P)})),q.each(z,function(t){L.push(C.callbacks.labelColor.call(M,t,M._chart)),R.push(C.callbacks.labelTextColor.call(M,t,M._chart))}),D.title=M.getTitle(z,P),D.beforeBody=M.getBeforeBody(z,P),D.body=M.getBody(z,P),D.afterBody=M.getAfterBody(z,P),D.footer=M.getFooter(z,P),D.x=F.x,D.y=F.y,D.caretPadding=C.caretPadding,D.labelColors=L,D.labelTextColors=R,D.dataPoints=z,T=function(t,e){var n,i,r,a,o,s=t._model,l=t._chart,u=t._chart.chartArea,d="center",c="center";s.y<e.height?c="top":s.y>l.height-e.height&&(c="bottom");var h=(u.left+u.right)/2,f=(u.top+u.bottom)/2;i="center"===c?(n=function(t){return t<=h},function(t){return h<t}):(n=function(t){return t<=e.width/2},function(t){return t>=l.width-e.width/2}),r=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},a=function(t){return t-e.width-s.caretSize-s.caretPadding<0},o=function(t){return t<=f?"top":"bottom"},n(s.x)?(d="left",r(s.x)&&(d="center",c=o(s.y))):i(s.x)&&(d="right",a(s.x)&&(d="center",c=o(s.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:d,yAlign:g.yAlign?g.yAlign:c}}(this,O=qe(this,D)),i=D,r=O,a=T,o=M._chart,s=i.x,l=i.y,u=i.caretSize,d=i.caretPadding,c=i.cornerRadius,h=a.xAlign,f=a.yAlign,g=u+d,p=c+d,"right"===h?s-=r.width:"center"===h&&((s-=r.width/2)+r.width>o.width&&(s=o.width-r.width),s<0&&(s=0)),"top"===f?l+=g:l-="bottom"===f?r.height+g:r.height/2,"center"===f?"left"===h?s+=g:"right"===h&&(s-=g):"left"===h?s-=p:"right"===h&&(s+=p),I={x:s,y:l}}else D.opacity=0;return D.xAlign=T.xAlign,D.yAlign=T.yAlign,D.x=I.x,D.y=I.y,D.width=O.width,D.height=O.height,D.caretX=F.x,D.caretY=F.y,M._model=D,t&&C.custom&&C.custom.call(M,D),M},drawCaret:function(t,e){var n=this._chart.ctx,i=this._view,r=this.getCaretPosition(t,e,i);n.lineTo(r.x1,r.y1),n.lineTo(r.x2,r.y2),n.lineTo(r.x3,r.y3)},getCaretPosition:function(t,e,n){var i,r,a,o,s,l,u=n.caretSize,d=n.cornerRadius,c=n.xAlign,h=n.yAlign,f=t.x,g=t.y,p=e.width,m=e.height;if("center"===h)s=g+m/2,l="left"===c?(r=(i=f)-u,a=i,o=s+u,s-u):(r=(i=f+p)+u,a=i,o=s-u,s+u);else if(a=(i="left"===c?(r=f+d+u)-u:"right"===c?(r=f+p-d-u)-u:(r=n.caretX)-u,r+u),"top"===h)s=(o=g)-u,l=o;else{s=(o=g+m)+u,l=o;var v=a;a=i,i=v}return{x1:i,x2:r,x3:a,y1:o,y2:s,y3:l}},drawTitle:function(t,e,n){var i,r,a,o=e.title,s=o.length;if(s){var l=Ee(e.rtl,e.x,e.width);for(t.x=Ue(e,e._titleAlign),n.textAlign=l.textAlign(e._titleAlign),n.textBaseline="middle",i=e.titleFontSize,r=e.titleSpacing,n.fillStyle=e.titleFontColor,n.font=q.fontString(i,e._titleFontStyle,e._titleFontFamily),a=0;a<s;++a)n.fillText(o[a],l.x(t.x),t.y+i/2),t.y+=i+r,a+1===s&&(t.y+=e.titleMarginBottom-r)}},drawBody:function(e,t,n){function i(t){n.fillText(t,y.x(e.x+v),e.y+h/2),e.y+=h+f}var r,a,o,s,l,u,d,c,h=t.bodyFontSize,f=t.bodySpacing,g=t._bodyAlign,p=t.body,m=t.displayColors,v=0,b=m?Ue(t,"left"):0,y=Ee(t.rtl,t.x,t.width),x=y.textAlign(g);for(n.textAlign=g,n.textBaseline="middle",n.font=q.fontString(h,t._bodyFontStyle,t._bodyFontFamily),e.x=Ue(t,x),n.fillStyle=t.bodyFontColor,q.each(t.beforeBody,i),v=m&&"right"!==x?"center"===g?h/2+1:h+2:0,l=0,d=p.length;l<d;++l){for(r=p[l],a=t.labelTextColors[l],o=t.labelColors[l],n.fillStyle=a,q.each(r.before,i),u=0,c=(s=r.lines).length;u<c;++u){if(m){var _=y.x(b);n.fillStyle=t.legendColorBackground,n.fillRect(y.leftForLtr(_,h),e.y,h,h),n.lineWidth=1,n.strokeStyle=o.borderColor,n.strokeRect(y.leftForLtr(_,h),e.y,h,h),n.fillStyle=o.backgroundColor,n.fillRect(y.leftForLtr(y.xPlus(_,1),h-2),e.y+1,h-2,h-2),n.fillStyle=a}i(s[u])}q.each(r.after,i)}v=0,q.each(t.afterBody,i),e.y-=f},drawFooter:function(t,e,n){var i,r,a=e.footer,o=a.length;if(o){var s=Ee(e.rtl,e.x,e.width);for(t.x=Ue(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=s.textAlign(e._footerAlign),n.textBaseline="middle",i=e.footerFontSize,n.fillStyle=e.footerFontColor,n.font=q.fontString(i,e._footerFontStyle,e._footerFontFamily),r=0;r<o;++r)n.fillText(a[r],s.x(t.x),t.y+i/2),t.y+=i+e.footerSpacing}},drawBackground:function(t,e,n,i){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var r=e.xAlign,a=e.yAlign,o=t.x,s=t.y,l=i.width,u=i.height,d=e.cornerRadius;n.beginPath(),n.moveTo(o+d,s),"top"===a&&this.drawCaret(t,i),n.lineTo(o+l-d,s),n.quadraticCurveTo(o+l,s,o+l,s+d),"center"===a&&"right"===r&&this.drawCaret(t,i),n.lineTo(o+l,s+u-d),n.quadraticCurveTo(o+l,s+u,o+l-d,s+u),"bottom"===a&&this.drawCaret(t,i),n.lineTo(o+d,s+u),n.quadraticCurveTo(o,s+u,o,s+u-d),"center"===a&&"left"===r&&this.drawCaret(t,i),n.lineTo(o,s+d),n.quadraticCurveTo(o,s,o+d,s),n.closePath(),n.fill(),0<e.borderWidth&&n.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},i={x:e.x,y:e.y},r=Math.abs(e.opacity<.001)?0:e.opacity,a=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&a&&(t.save(),t.globalAlpha=r,this.drawBackground(i,e,t,n),i.y+=e.yPadding,q.rtl.overrideTextDirection(t,e.textDirection),this.drawTitle(i,e,t),this.drawBody(i,e,t),this.drawFooter(i,e,t),q.rtl.restoreTextDirection(t,e.textDirection),t.restore())}},handleEvent:function(t){var e,n=this,i=n._options;return n._lastActive=n._lastActive||[],"mouseout"===t.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(t,i.mode,i),i.reverse&&n._active.reverse()),(e=!q.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(i.enabled||i.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}}),Xe=We,Ke=Ge;Ke.positioners=Xe;var Ze=q.valueOrDefault;function $e(){return q.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){if("xAxes"===t||"yAxes"===t){var r,a,o,s=n[t].length;for(e[t]||(e[t]=[]),r=0;r<s;++r)o=n[t][r],a=Ze(o.type,"xAxes"===t?"category":"linear"),r>=e[t].length&&e[t].push({}),!e[t][r].type||o.type&&o.type!==e[t][r].type?q.merge(e[t][r],[Ne.getScaleDefaults(a),o]):q.merge(e[t][r],o)}else q._merger(t,e,n,i)}})}function Qe(){return q.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){var r=e[t]||{},a=n[t];"scales"===t?e[t]=$e(r,a):"scale"===t?e[t]=q.merge(r,[Ne.getScaleDefaults(a.type),a]):q._merger(t,e,n,i)}})}function Je(t,e,n){for(var i,r=function(t){return t.id===i};i=e+n++,0<=q.findIndex(t,r););return i}function tn(t){return"top"===t||"bottom"===t}function en(n,i){return function(t,e){return t[n]===e[n]?t[i]-e[i]:t[n]-e[n]}}E._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});function nn(t,e){return this.construct(t,e),this}q.extend(nn.prototype,{construct:function(t,e){var n,i,r=this;(i=(n=(n=e)||{}).data=n.data||{}).datasets=i.datasets||[],i.labels=i.labels||[],n.options=Qe(E.global,E[n.type],n.options||{}),e=n;var a=Re.acquireContext(t,e),o=a&&a.canvas,s=o&&o.height,l=o&&o.width;r.id=q.uid(),r.ctx=a,r.canvas=o,r.config=e,r.width=l,r.height=s,r.aspectRatio=s?l/s:null,r.options=e.options,r._bufferedRender=!1,r._layers=[],(r.chart=r).controller=r,nn.instances[r.id]=r,Object.defineProperty(r,"data",{get:function(){return r.config.data},set:function(t){r.config.data=t}}),a&&o?(r.initialize(),r.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return ze.notify(t,"beforeInit"),q.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.initToolTip(),ze.notify(t,"afterInit"),t},clear:function(){return q.canvas.clear(this),this},stop:function(){return tt.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,i=e.canvas,r=n.maintainAspectRatio&&e.aspectRatio||null,a=Math.max(0,Math.floor(q.getMaximumWidth(i))),o=Math.max(0,Math.floor(r?a/r:q.getMaximumHeight(i)));if((e.width!==a||e.height!==o)&&(i.width=e.width=a,i.height=e.height=o,i.style.width=a+"px",i.style.height=o+"px",q.retinaScale(e,n.devicePixelRatio),!t)){var s={width:a,height:o};ze.notify(e,"resize",[s]),n.onResize&&n.onResize(e,s),e.stop(),e.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,n=t.scales||{},e=t.scale;q.each(n.xAxes,function(t,e){t.id||(t.id=Je(n.xAxes,"x-axis-",e))}),q.each(n.yAxes,function(t,e){t.id||(t.id=Je(n.yAxes,"y-axis-",e))}),e&&(e.id=e.id||"scale")},buildOrUpdateScales:function(){var o=this,t=o.options,s=o.scales||{},e=[],l=Object.keys(s).reduce(function(t,e){return t[e]=!1,t},{});t.scales&&(e=e.concat((t.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(t.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),t.scale&&e.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),q.each(e,function(t){var e=t.options,n=e.id,i=Ze(e.type,t.dtype);tn(e.position)!==tn(t.dposition)&&(e.position=t.dposition),l[n]=!0;var r=null;if(n in s&&s[n].type===i)(r=s[n]).options=e,r.ctx=o.ctx,r.chart=o;else{var a=Ne.getScaleConstructor(i);if(!a)return;r=new a({id:n,type:i,options:e,ctx:o.ctx,chart:o}),s[r.id]=r}r.mergeTicksOptions(),t.isDefault&&(o.scale=r)}),q.each(l,function(t,e){t||delete s[e]}),o.scales=s,Ne.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t,e,n=this,i=[],r=n.data.datasets;for(t=0,e=r.length;t<e;t++){var a=r[t],o=n.getDatasetMeta(t),s=a.type||n.config.type;if(o.type&&o.type!==s&&(n.destroyDatasetMeta(t),o=n.getDatasetMeta(t)),o.type=s,o.order=a.order||0,o.index=t,o.controller)o.controller.updateIndex(t),o.controller.linkScales();else{var l=Qt[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(n,t),i.push(o.controller)}}return i},resetElements:function(){var n=this;q.each(n.data.datasets,function(t,e){n.getDatasetMeta(e).controller.reset()},n)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e,n,i,r,a=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),r=(i=a).options,q.each(i.scales,function(t){me.removeBox(i,t)}),r=Qe(E.global,E[i.config.type],r),i.options=i.config.options=r,i.ensureScalesHaveIDs(),i.buildOrUpdateScales(),i.tooltip._options=r.tooltips,i.tooltip.initialize(),ze._invalidate(a),!1!==ze.notify(a,"beforeUpdate")){a.tooltip._data=a.data;var o=a.buildOrUpdateControllers();for(e=0,n=a.data.datasets.length;e<n;e++)a.getDatasetMeta(e).controller.buildOrUpdateElements();a.updateLayout(),a.options.animation&&a.options.animation.duration&&q.each(o,function(t){t.reset()}),a.updateDatasets(),a.tooltip.initialize(),a.lastActive=[],ze.notify(a,"afterUpdate"),a._layers.sort(en("z","_idx")),a._bufferedRender?a._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:a.render(t)}},updateLayout:function(){var e=this;!1!==ze.notify(e,"beforeLayout")&&(me.update(this,this.width,this.height),e._layers=[],q.each(e.boxes,function(t){t._configure&&t._configure(),e._layers.push.apply(e._layers,t._layers())},e),e._layers.forEach(function(t,e){t._idx=e}),ze.notify(e,"afterScaleUpdate"),ze.notify(e,"afterLayout"))},updateDatasets:function(){if(!1!==ze.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);ze.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==ze.notify(this,"beforeDatasetUpdate",[n])&&(e.controller._update(),ze.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,i=Ze(t.duration,n&&n.duration),r=t.lazy;if(!1!==ze.notify(e,"beforeRender")){var a=function(t){ze.notify(e,"afterRender"),q.callback(n&&n.onComplete,[t],e)};if(n&&i){var o=new J({numSteps:i/16.66,easing:t.easing||n.easing,render:function(t,e){var n=q.easing.effects[e.easing],i=e.currentStep,r=i/e.numSteps;t.draw(n(r),r,i)},onAnimationProgress:n.onProgress,onAnimationComplete:a});tt.addAnimation(e,o,i,r)}else e.draw(),a(new J({numSteps:0,chart:e}));return e}},draw:function(t){var e,n,i=this;if(i.clear(),q.isNullOrUndef(t)&&(t=1),i.transition(t),!(i.width<=0||i.height<=0)&&!1!==ze.notify(i,"beforeDraw",[t])){for(n=i._layers,e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(i.chartArea);for(i.drawDatasets(t);e<n.length;++e)n[e].draw(i.chartArea);i._drawTooltip(t),ze.notify(i,"afterDraw",[t])}},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},_getSortedDatasetMetas:function(t){var e,n,i=[];for(e=0,n=(this.data.datasets||[]).length;e<n;++e)t&&!this.isDatasetVisible(e)||i.push(this.getDatasetMeta(e));return i.sort(en("order","index")),i},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(t){var e,n;if(!1!==ze.notify(this,"beforeDatasetsDraw",[t])){for(n=(e=this._getSortedVisibleDatasetMetas()).length-1;0<=n;--n)this.drawDataset(e[n],t);ze.notify(this,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n={meta:t,index:t.index,easingValue:e};!1!==ze.notify(this,"beforeDatasetDraw",[n])&&(t.controller.draw(e),ze.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==ze.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),ze.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return ae.modes.single(this,t)},getElementsAtEvent:function(t){return ae.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return ae.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var i=ae.modes[e];return"function"==typeof i?i(this,t,n):[]},getDatasetAtEvent:function(t){return ae.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n=n||(e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e.order||0,index:t})},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],i=n._meta&&n._meta[e];i&&(i.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,i=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),q.canvas.clear(n),Re.releaseContext(n.ctx),n.canvas=null,n.ctx=null),ze.notify(n,"destroy"),delete nn.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new Ke({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var e=this,n=e._listeners={},i=function(){e.eventHandler.apply(e,arguments)};q.each(e.options.events,function(t){Re.addEventListener(e,t,i),n[t]=i}),e.options.responsive&&(i=function(){e.resize()},Re.addEventListener(e,"resize",i),n.resize=i)},unbindEvents:function(){var n=this,t=n._listeners;t&&(delete n._listeners,q.each(t,function(t,e){Re.removeEventListener(n,e,t)}))},updateHoverStyle:function(t,e,n){var i,r,a,o=n?"set":"remove";for(r=0,a=t.length;r<a;++r)(i=t[r])&&this.getDatasetMeta(i._datasetIndex).controller[o+"HoverStyle"](i);"dataset"===e&&this.getDatasetMeta(t[0]._datasetIndex).controller["_"+o+"DatasetHoverStyle"]()},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==ze.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var i=e.handleEvent(t);n&&(i=n._start?n.handleEvent(t):i|n.handleEvent(t)),ze.notify(e,"afterEvent",[t]);var r=e._bufferedRequest;return r?e.render(r):i&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,i=n.options||{},r=i.hover;return n.lastActive=n.lastActive||[],"mouseout"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,r.mode,r),q.callback(i.onHover||i.hover.onHover,[t.native,n.active],n),"mouseup"!==t.type&&"click"!==t.type||i.onClick&&i.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,r.mode,!1),n.active.length&&r.mode&&n.updateHoverStyle(n.active,r.mode,!0),e=!q.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),nn.instances={};var rn=nn;(nn.Controller=nn).types={},q.configMerge=Qe,q.scaleMerge=$e;function an(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function on(t){this.options=t||{}}q.extend(on.prototype,{formats:an,parse:an,format:an,add:an,diff:an,startOf:an,endOf:an,_create:function(t){return t}}),on.override=function(t){q.extend(on.prototype,t)};var sn={_date:on},ln={formatters:{values:function(t){return q.isArray(t)?t:""+t},linear:function(t,e,n){var i=3<n.length?n[2]-n[1]:n[1]-n[0];1<Math.abs(i)&&t!==Math.floor(t)&&(i=t-Math.floor(t));var r=q.log10(Math.abs(i)),a="";if(0!==t)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var o=q.log10(Math.abs(t)),s=Math.floor(o)-Math.floor(r);s=Math.max(Math.min(s,20),0),a=t.toExponential(s)}else{var l=-1*Math.floor(r);l=Math.max(Math.min(l,20),0),a=t.toFixed(l)}else a="0";return a},logarithmic:function(t,e,n){var i=t/Math.pow(10,Math.floor(q.log10(t)));return 0===t?"0":1==i||2==i||5==i||0===e||e===n.length-1?t.toExponential():""}}},un=q.isArray,dn=q.isNullOrUndef,cn=q.valueOrDefault,hn=q.valueAtIndexOrDefault;function fn(t,e,n){var i,r=t.getTicks().length,a=Math.min(e,r-1),o=t.getPixelForTick(a),s=t._startPixel,l=t._endPixel;if(!(n&&(i=1===r?Math.max(o-s,l-o):0===e?(t.getPixelForTick(1)-o)/2:(o-t.getPixelForTick(a-1))/2,(o+=a<e?i:-i)<s-1e-6||l+1e-6<o)))return o}function gn(t,e,n,i){var r,a,o,s,l,u,d,c,h,f,g,p,m,v,b,y=n.length,x=[],_=[],w=[];for(r=0;r<y;++r){if(s=n[r].label,l=n[r].major?e.major:e.minor,t.font=u=l.string,d=i[u]=i[u]||{data:{},gc:[]},c=l.lineHeight,h=f=0,dn(s)||un(s)){if(un(s))for(a=0,o=s.length;a<o;++a)g=s[a],dn(g)||un(g)||(h=q.measureText(t,d.data,d.gc,h,g),f+=c)}else h=q.measureText(t,d.data,d.gc,h,s),f=c;x.push(h),_.push(f),w.push(c/2)}function k(t){return{width:x[t]||0,height:_[t]||0,offset:w[t]||0}}return v=i,b=y,q.each(v,function(t){var e,n=t.gc,i=n.length/2;if(b<i){for(e=0;e<i;++e)delete t.data[n[e]];n.splice(0,i)}}),p=x.indexOf(Math.max.apply(null,x)),m=_.indexOf(Math.max.apply(null,_)),{first:k(0),last:k(y-1),widest:k(p),highest:k(m)}}function pn(t){return t.drawTicks?t.tickMarkLength:0}function mn(t){var e,n;return t.display?(e=q.options._parseFont(t),n=q.options.toPadding(t.padding),e.lineHeight+n.height):0}function vn(t,e){return q.extend(q.options._parseFont({fontFamily:cn(e.fontFamily,t.fontFamily),fontSize:cn(e.fontSize,t.fontSize),fontStyle:cn(e.fontStyle,t.fontStyle),lineHeight:cn(e.lineHeight,t.lineHeight)}),{color:q.options.resolve([e.fontColor,t.fontColor,E.global.defaultFontColor])})}function bn(t){var e=vn(t,t.minor);return{minor:e,major:t.major.enabled?vn(t,t.major):e}}function yn(t){var e,n,i,r=[];for(n=0,i=t.length;n<i;++n)void 0!==(e=t[n])._index&&r.push(e);return r}function xn(t,e,n,i){var r,a,o,s,l=function(t){var e,n,i=t.length;if(i<2)return!1;for(n=t[0],e=1;e<i;++e)if(t[e]-t[e-1]!==n)return!1;return n}(t),u=(e.length-1)/i;if(!l)return Math.max(u,1);for(o=0,s=(r=q.math._factorize(l)).length-1;o<s;o++)if(u<(a=r[o]))return a;return Math.max(u,1)}function _n(t,e,n,i){var r,a,o,s,l=cn(n,0),u=Math.min(cn(i,t.length),t.length),d=0;for(e=Math.ceil(e),i&&(e=(r=i-n)/Math.floor(r/e)),s=l;s<0;)d++,s=Math.round(l+d*e);for(a=Math.max(l,0);a<u;a++)o=t[a],a===s?(o._index=a,d++,s=Math.round(l+d*e)):delete o.label}E._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:ln.formatters.values,minor:{},major:{}}});var wn=$.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){q.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var i,r,a,o,s,l=this,u=l.options.ticks,d=u.sampleSize;if(l.beforeUpdate(),l.maxWidth=t,l.maxHeight=e,l.margins=q.extend({left:0,right:0,top:0,bottom:0},n),l._ticks=null,l.ticks=null,l._labelSizes=null,l._maxLabelLines=0,l.longestLabelWidth=0,l.longestTextCache=l.longestTextCache||{},l._gridLineItems=null,l._labelItems=null,l.beforeSetDimensions(),l.setDimensions(),l.afterSetDimensions(),l.beforeDataLimits(),l.determineDataLimits(),l.afterDataLimits(),l.beforeBuildTicks(),o=l.buildTicks()||[],(!(o=l.afterBuildTicks(o)||o)||!o.length)&&l.ticks)for(o=[],i=0,r=l.ticks.length;i<r;++i)o.push({value:l.ticks[i],major:!1});return s=d<(l._ticks=o).length,a=l._convertTicksToLabels(s?function(t,e){for(var n=[],i=t.length/e,r=0,a=t.length;r<a;r+=i)n.push(t[Math.floor(r)]);return n}(o,d):o),l._configure(),l.beforeCalculateTickRotation(),l.calculateTickRotation(),l.afterCalculateTickRotation(),l.beforeFit(),l.fit(),l.afterFit(),l._ticksToDraw=u.display&&(u.autoSkip||"auto"===u.source)?l._autoSkip(o):o,s&&(a=l._convertTicksToLabels(l._ticksToDraw)),l.ticks=a,l.afterUpdate(),l.minSize},_configure:function(){var t,e,n=this,i=n.options.ticks.reverse;n.isHorizontal()?(t=n.left,e=n.right):(t=n.top,e=n.bottom,i=!i),n._startPixel=t,n._endPixel=e,n._reversePixels=i,n._length=e-t},afterUpdate:function(){q.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){q.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){q.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){q.callback(this.options.beforeDataLimits,[this])},determineDataLimits:q.noop,afterDataLimits:function(){q.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){q.callback(this.options.beforeBuildTicks,[this])},buildTicks:q.noop,afterBuildTicks:function(t){var e=this;return un(t)&&t.length?q.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=q.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){q.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){q.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){q.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t,e,n,i,r,a,o,s=this,l=s.options,u=l.ticks,d=s.getTicks().length,c=u.minRotation||0,h=u.maxRotation,f=c;!s._isVisible()||!u.display||h<=c||d<=1||!s.isHorizontal()?s.labelRotation=c:(e=(t=s._getLabelSizes()).widest.width,n=t.highest.height-t.highest.offset,i=Math.min(s.maxWidth,s.chart.width-e),(r=l.offset?s.maxWidth/d:i/(d-1))<e+6&&(r=i/(d-(l.offset?.5:1)),a=s.maxHeight-pn(l.gridLines)-u.padding-mn(l.scaleLabel),o=Math.sqrt(e*e+n*n),f=q.toDegrees(Math.min(Math.asin(Math.min((t.highest.height+6)/r,1)),Math.asin(Math.min(a/o,1))-Math.asin(n/o))),f=Math.max(c,Math.min(h,f))),s.labelRotation=f)},afterCalculateTickRotation:function(){q.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){q.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=t.chart,i=t.options,r=i.ticks,a=i.scaleLabel,o=i.gridLines,s=t._isVisible(),l="bottom"===i.position,u=t.isHorizontal();if(u?e.width=t.maxWidth:s&&(e.width=pn(o)+mn(a)),u?s&&(e.height=pn(o)+mn(a)):e.height=t.maxHeight,r.display&&s){var d=bn(r),c=t._getLabelSizes(),h=c.first,f=c.last,g=c.widest,p=c.highest,m=.4*d.minor.lineHeight,v=r.padding;if(u){var b=0!==t.labelRotation,y=q.toRadians(t.labelRotation),x=Math.cos(y),_=Math.sin(y),w=_*g.width+x*(p.height-(b?p.offset:0))+(b?0:m);e.height=Math.min(t.maxHeight,e.height+w+v);var k,M,C=t.getPixelForTick(0)-t.left,S=t.right-t.getPixelForTick(t.getTicks().length-1);M=b?(k=l?x*h.width+_*h.offset:_*(h.height-h.offset),l?_*(f.height-f.offset):x*f.width+_*f.offset):(k=h.width/2,f.width/2),t.paddingLeft=Math.max((k-C)*t.width/(t.width-C),0)+3,t.paddingRight=Math.max((M-S)*t.width/(t.width-S),0)+3}else{var D=r.mirror?0:g.width+v+m;e.width=Math.min(t.maxWidth,e.width+D),t.paddingTop=h.height/2,t.paddingBottom=f.height/2}}t.handleMargins(),u?(t.width=t._length=n.width-t.margins.left-t.margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=n.height-t.margins.top-t.margins.bottom)},handleMargins:function(){var t=this;t.margins&&(t.margins.left=Math.max(t.paddingLeft,t.margins.left),t.margins.top=Math.max(t.paddingTop,t.margins.top),t.margins.right=Math.max(t.paddingRight,t.margins.right),t.margins.bottom=Math.max(t.paddingBottom,t.margins.bottom))},afterFit:function(){q.callback(this.options.afterFit,[this])},isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(dn(t))return NaN;if(("number"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},_convertTicksToLabels:function(t){var e,n,i,r=this;for(r.ticks=t.map(function(t){return t.value}),r.beforeTickToLabelConversion(),e=r.convertTicksToLabels(t)||r.ticks,r.afterTickToLabelConversion(),n=0,i=t.length;n<i;++n)t[n].label=e[n];return e},_getLabelSizes:function(){var t=this,e=t._labelSizes;return e||(t._labelSizes=e=gn(t.ctx,bn(t.options.ticks),t.getTicks(),t.longestTextCache),t.longestLabelWidth=e.widest.width),e},_parseValue:function(t){var e,n,i,r;return r=un(t)?(e=+this.getRightValue(t[0]),n=+this.getRightValue(t[1]),i=Math.min(e,n),Math.max(e,n)):(e=void 0,i=n=t=+this.getRightValue(t)),{min:i,max:r,start:e,end:n}},_getScaleLabel:function(t){var e=this._parseValue(t);return void 0!==e.start?"["+e.start+", "+e.end+"]":+this.getRightValue(t)},getLabelForIndex:q.noop,getPixelForValue:q.noop,getValueForPixel:q.noop,getPixelForTick:function(t){var e=this.options.offset,n=this._ticks.length,i=1/Math.max(n-(e?0:1),1);return t<0||n-1<t?null:this.getPixelForDecimal(t*i+(e?i/2:0))},getPixelForDecimal:function(t){return this._reversePixels&&(t=1-t),this._startPixel+t*this._length},getDecimalForPixel:function(t){var e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:0<t&&0<e?t:0},_autoSkip:function(t){var e,n,i,r,a=this.options.ticks,o=this._length,s=a.maxTicksLimit||o/this._tickSize()+1,l=a.major.enabled?function(t){var e,n,i=[];for(e=0,n=t.length;e<n;e++)t[e].major&&i.push(e);return i}(t):[],u=l.length,d=l[0],c=l[u-1];if(s<u)return function(t,e,n){var i,r,a=0,o=e[0];for(n=Math.ceil(n),i=0;i<t.length;i++)r=t[i],i===o?(r._index=i,o=e[++a*n]):delete r.label}(t,l,u/s),yn(t);if(i=xn(l,t,0,s),0<u){for(e=0,n=u-1;e<n;e++)_n(t,i,l[e],l[e+1]);return r=1<u?(c-d)/(u-1):null,_n(t,i,q.isNullOrUndef(r)?0:d-r,d),_n(t,i,c,q.isNullOrUndef(r)?t.length:c+r),yn(t)}return _n(t,i),yn(t)},_tickSize:function(){var t=this.options.ticks,e=q.toRadians(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),a=t.autoSkipPadding||0,o=r?r.widest.width+a:0,s=r?r.highest.height+a:0;return this.isHorizontal()?o*i<s*n?o/n:s/i:s*i<o*n?s/n:o/i},_isVisible:function(){var t,e,n,i=this.chart,r=this.options.display;if("auto"!==r)return!!r;for(t=0,e=i.data.datasets.length;t<e;++t)if(i.isDatasetVisible(t)&&((n=i.getDatasetMeta(t)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(t){function e(t){return O(x,t,T)}var n,i,r,a,o,s,l,u,d,c,h,f,g,p,m,v,b,y=this,x=y.chart,_=y.options,w=_.gridLines,k=_.position,M=w.offsetGridLines,C=y.isHorizontal(),S=y._ticksToDraw,D=S.length+(M?1:0),A=pn(w),P=[],T=w.drawBorder?hn(w.lineWidth,0,0):0,I=T/2,O=q._alignPixel;for("top"===k?(n=e(y.bottom),l=y.bottom-A,d=n-I,h=e(t.top)+I,g=t.bottom):"bottom"===k?(n=e(y.top),h=t.top,g=e(t.bottom)-I,l=n+I,d=y.top+A):"left"===k?(n=e(y.right),s=y.right-A,u=n-I,c=e(t.left)+I,f=t.right):(n=e(y.left),c=t.left,f=e(t.right)-I,s=n+I,u=y.left+A),i=0;i<D;++i)r=S[i]||{},dn(r.label)&&i<S.length||(b=i===y.zeroLineIndex&&_.offset===M?(p=w.zeroLineWidth,m=w.zeroLineColor,v=w.zeroLineBorderDash||[],w.zeroLineBorderDashOffset||0):(p=hn(w.lineWidth,i,1),m=hn(w.color,i,"rgba(0,0,0,0.1)"),v=w.borderDash||[],w.borderDashOffset||0),void 0!==(a=fn(y,r._index||i,M))&&(o=O(x,a,p),C?s=u=c=f=o:l=d=h=g=o,P.push({tx1:s,ty1:l,tx2:u,ty2:d,x1:c,y1:h,x2:f,y2:g,width:p,color:m,borderDash:v,borderDashOffset:b})));return P.ticksLength=D,P.borderValue=n,P},_computeLabelItems:function(){var t,e,n,i,r,a,o,s,l,u,d,c,h=this,f=h.options,g=f.ticks,p=f.position,m=g.mirror,v=h.isHorizontal(),b=h._ticksToDraw,y=bn(g),x=g.padding,_=pn(f.gridLines),w=-q.toRadians(h.labelRotation),k=[];for(o="top"===p?(a=h.bottom-_-x,w?"left":"center"):"bottom"===p?(a=h.top+_+x,w?"right":"center"):"left"===p?(r=h.right-(m?0:_)-x,m?"left":"right"):(r=h.left+(m?0:_)+x,m?"right":"left"),t=0,e=b.length;t<e;++t)i=(n=b[t]).label,dn(i)||(s=h.getPixelForTick(n._index||t)+g.labelOffset,u=(l=n.major?y.major:y.minor).lineHeight,d=un(i)?i.length:1,c=v?(r=s,"top"===p?((w?1:.5)-d)*u:(w?0:.5)*u):(a=s,(1-d)*u/2),k.push({x:r,y:a,rotation:w,label:i,font:l,textOffset:c,textAlign:o}));return k},_drawGrid:function(t){var e=this,n=e.options.gridLines;if(n.display){var i,r,a,o,s,l=e.ctx,u=e.chart,d=q._alignPixel,c=n.drawBorder?hn(n.lineWidth,0,0):0,h=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));for(a=0,o=h.length;a<o;++a)i=(s=h[a]).width,r=s.color,i&&r&&(l.save(),l.lineWidth=i,l.strokeStyle=r,l.setLineDash&&(l.setLineDash(s.borderDash),l.lineDashOffset=s.borderDashOffset),l.beginPath(),n.drawTicks&&(l.moveTo(s.tx1,s.ty1),l.lineTo(s.tx2,s.ty2)),n.drawOnChartArea&&(l.moveTo(s.x1,s.y1),l.lineTo(s.x2,s.y2)),l.stroke(),l.restore());if(c){var f,g,p,m,v=c,b=hn(n.lineWidth,h.ticksLength-1,1),y=h.borderValue;e.isHorizontal()?(f=d(u,e.left,v)-v/2,g=d(u,e.right,b)+b/2,p=m=y):(p=d(u,e.top,v)-v/2,m=d(u,e.bottom,b)+b/2,f=g=y),l.lineWidth=c,l.strokeStyle=hn(n.color,0),l.beginPath(),l.moveTo(f,p),l.lineTo(g,m),l.stroke()}}},_drawLabels:function(){var t=this;if(t.options.ticks.display){var e,n,i,r,a,o,s,l,u=t.ctx,d=t._labelItems||(t._labelItems=t._computeLabelItems());for(e=0,i=d.length;e<i;++e){if(o=(a=d[e]).font,u.save(),u.translate(a.x,a.y),u.rotate(a.rotation),u.font=o.string,u.fillStyle=o.color,u.textBaseline="middle",u.textAlign=a.textAlign,s=a.label,l=a.textOffset,un(s))for(n=0,r=s.length;n<r;++n)u.fillText(""+s[n],0,l),l+=o.lineHeight;else u.fillText(s,0,l);u.restore()}}},_drawTitle:function(){var t=this,e=t.ctx,n=t.options,i=n.scaleLabel;if(i.display){var r,a,o=cn(i.fontColor,E.global.defaultFontColor),s=q.options._parseFont(i),l=q.options.toPadding(i.padding),u=s.lineHeight/2,d=n.position,c=0;if(t.isHorizontal())r=t.left+t.width/2,a="bottom"===d?t.bottom-u-l.bottom:t.top+u+l.top;else{var h="left"===d;r=h?t.left+u+l.top:t.right-u-l.top,a=t.top+t.height/2,c=h?-.5*Math.PI:.5*Math.PI}e.save(),e.translate(r,a),e.rotate(c),e.textAlign="center",e.textBaseline="middle",e.fillStyle=o,e.font=s.string,e.fillText(i.labelString,0,0),e.restore()}},draw:function(t){this._isVisible()&&(this._drawGrid(t),this._drawTitle(),this._drawLabels())},_layers:function(){var t=this,e=t.options,n=e.ticks&&e.ticks.z||0,i=e.gridLines&&e.gridLines.z||0;return t._isVisible()&&n!==i&&t.draw===t._draw?[{z:i,draw:function(){t._drawGrid.apply(t,arguments),t._drawTitle.apply(t,arguments)}},{z:n,draw:function(){t._drawLabels.apply(t,arguments)}}]:[{z:n,draw:function(){t.draw.apply(t,arguments)}}]},_getMatchingVisibleMetas:function(e){var n=this,i=n.isHorizontal();return n.chart._getSortedVisibleDatasetMetas().filter(function(t){return(!e||t.type===e)&&(i?t.xAxisID===n.id:t.yAxisID===n.id)})}});wn.prototype._draw=wn.prototype.draw;var kn=wn,Mn=q.isNullOrUndef,Cn=kn.extend({determineDataLimits:function(){var t,e=this,n=e._getLabels(),i=e.options.ticks,r=i.min,a=i.max,o=0,s=n.length-1;void 0!==r&&0<=(t=n.indexOf(r))&&(o=t),void 0!==a&&0<=(t=n.indexOf(a))&&(s=t),e.minIndex=o,e.maxIndex=s,e.min=n[o],e.max=n[s]},buildTicks:function(){var t=this._getLabels(),e=this.minIndex,n=this.maxIndex;this.ticks=0===e&&n===t.length-1?t:t.slice(e,n+1)},getLabelForIndex:function(t,e){var n=this.chart;return n.getDatasetMeta(e).controller._getValueScaleId()===this.id?this.getRightValue(n.data.datasets[e].data[t]):this._getLabels()[t]},_configure:function(){var t=this,e=t.options.offset,n=t.ticks;kn.prototype._configure.call(t),t.isHorizontal()||(t._reversePixels=!t._reversePixels),n&&(t._startValue=t.minIndex-(e?.5:0),t._valueRange=Math.max(n.length-(e?0:1),1))},getPixelForValue:function(t,e,n){var i,r,a,o=this;return Mn(e)||Mn(n)||(t=o.chart.data.datasets[n].data[e]),Mn(t)||(i=o.isHorizontal()?t.x:t.y),(void 0!==i||void 0!==t&&isNaN(e))&&(r=o._getLabels(),t=q.valueOrDefault(i,t),e=-1!==(a=r.indexOf(t))?a:e,isNaN(e)&&(e=t)),o.getPixelForDecimal((e-o._startValue)/o._valueRange)},getPixelForTick:function(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t],t+this.minIndex)},getValueForPixel:function(t){var e=Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange);return Math.min(Math.max(e,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),Sn={position:"bottom"};Cn._defaults=Sn;var Dn=q.noop,An=q.isNullOrUndef;var Pn=kn.extend({getRightValue:function(t){return"string"==typeof t?+t:kn.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;if(e.beginAtZero){var n=q.sign(t.min),i=q.sign(t.max);n<0&&i<0?t.max=0:0<n&&0<i&&(t.min=0)}var r=void 0!==e.min||void 0!==e.suggestedMin,a=void 0!==e.max||void 0!==e.suggestedMax;void 0!==e.min?t.min=e.min:void 0!==e.suggestedMin&&(null===t.min?t.min=e.suggestedMin:t.min=Math.min(t.min,e.suggestedMin)),void 0!==e.max?t.max=e.max:void 0!==e.suggestedMax&&(null===t.max?t.max=e.suggestedMax:t.max=Math.max(t.max,e.suggestedMax)),r!=a&&t.min>=t.max&&(r?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,e.beginAtZero||t.min--)},getTickLimit:function(){var t,e=this.options.ticks,n=e.stepSize,i=e.maxTicksLimit;return n?t=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(t=this._computeTickLimit(),i=i||11),i&&(t=Math.min(i,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:Dn,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),i={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:q.valueOrDefault(e.fixedStepSize,e.stepSize)},r=t.ticks=function(t,e){var n,i,r,a,o=[],s=t.stepSize,l=s||1,u=t.maxTicks-1,d=t.min,c=t.max,h=t.precision,f=e.min,g=e.max,p=q.niceNum((g-f)/u/l)*l;if(p<1e-14&&An(d)&&An(c))return[f,g];u<(a=Math.ceil(g/p)-Math.floor(f/p))&&(p=q.niceNum(a*p/u/l)*l),s||An(h)?n=Math.pow(10,q._decimalPlaces(p)):(n=Math.pow(10,h),p=Math.ceil(p*n)/n),i=Math.floor(f/p)*p,r=Math.ceil(g/p)*p,s&&(!An(d)&&q.almostWhole(d/p,p/1e3)&&(i=d),!An(c)&&q.almostWhole(c/p,p/1e3)&&(r=c)),a=(r-i)/p,a=q.almostEquals(a,Math.round(a),p/1e3)?Math.round(a):Math.ceil(a),i=Math.round(i*n)/n,r=Math.round(r*n)/n,o.push(An(d)?i:d);for(var m=1;m<a;++m)o.push(Math.round((i+m*p)*n)/n);return o.push(An(c)?r:c),o}(i,t);t.handleDirectionalChanges(),t.max=q.max(r),t.min=q.min(r),e.reverse?(r.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),kn.prototype.convertTicksToLabels.call(t)},_configure:function(){var t,e=this,n=e.getTicks(),i=e.min,r=e.max;kn.prototype._configure.call(e),e.options.offset&&n.length&&(i-=t=(r-i)/Math.max(n.length-1,1)/2,r+=t),e._startValue=i,e._endValue=r,e._valueRange=r-i}}),Tn={position:"left",ticks:{callback:ln.formatters.linear}};function In(t,e,n,i){var r,a,o,s,l,u,d=t.options,c=d.stacked,h=(r=e,a=c,s=[(o=n).type,void 0===a&&void 0===o.stack?o.index:"",o.stack].join("."),void 0===r[s]&&(r[s]={pos:[],neg:[]}),r[s]),f=h.pos,g=h.neg,p=i.length;for(l=0;l<p;++l)u=t._parseValue(i[l]),isNaN(u.min)||isNaN(u.max)||n.data[l].hidden||(f[l]=f[l]||0,g[l]=g[l]||0,d.relativePoints?f[l]=100:u.min<0||u.max<0?g[l]+=u.min:f[l]+=u.max)}function On(t,e,n){var i,r,a=n.length;for(i=0;i<a;++i)r=t._parseValue(n[i]),isNaN(r.min)||isNaN(r.max)||e.data[i].hidden||(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}var Fn=Pn.extend({determineDataLimits:function(){var t,e,n,i,r=this,a=r.options,o=r.chart.data.datasets,s=r._getMatchingVisibleMetas(),l=a.stacked,u={},d=s.length;if(r.min=Number.POSITIVE_INFINITY,r.max=Number.NEGATIVE_INFINITY,void 0===l)for(t=0;!l&&t<d;++t)l=void 0!==(e=s[t]).stack;for(t=0;t<d;++t)n=o[(e=s[t]).index].data,l?In(r,u,e,n):On(r,e,n);q.each(u,function(t){i=t.pos.concat(t.neg),r.min=Math.min(r.min,q.min(i)),r.max=Math.max(r.max,q.max(i))}),r.min=q.isFinite(r.min)&&!isNaN(r.min)?r.min:0,r.max=q.isFinite(r.max)&&!isNaN(r.max)?r.max:1,r.handleTickRangeOptions()},_computeTickLimit:function(){var t;return this.isHorizontal()?Math.ceil(this.width/40):(t=q.options._parseFont(this.options.ticks),Math.ceil(this.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){return this.getPixelForDecimal((this.getRightValue(t)-this._startValue)/this._valueRange)},getValueForPixel:function(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange},getPixelForTick:function(t){var e=this.ticksAsNumbers;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])}}),Ln=Tn;Fn._defaults=Ln;var Rn=q.valueOrDefault,zn=q.math.log10;var Nn={position:"left",ticks:{callback:ln.formatters.logarithmic}};function Bn(t,e){return q.isFinite(t)&&0<=t?t:e}var En=kn.extend({determineDataLimits:function(){var t,e,n,i,r,a,o=this,s=o.options,l=o.chart,u=l.data.datasets,d=o.isHorizontal();function c(t){return d?t.xAxisID===o.id:t.yAxisID===o.id}o.min=Number.POSITIVE_INFINITY,o.max=Number.NEGATIVE_INFINITY,o.minNotZero=Number.POSITIVE_INFINITY;var h=s.stacked;if(void 0===h)for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&c(e)&&void 0!==e.stack){h=!0;break}if(s.stacked||h){var f={};for(t=0;t<u.length;t++){var g=[(e=l.getDatasetMeta(t)).type,void 0===s.stacked&&void 0===e.stack?t:"",e.stack].join(".");if(l.isDatasetVisible(t)&&c(e))for(void 0===f[g]&&(f[g]=[]),r=0,a=(i=u[t].data).length;r<a;r++){var p=f[g];n=o._parseValue(i[r]),isNaN(n.min)||isNaN(n.max)||e.data[r].hidden||n.min<0||n.max<0||(p[r]=p[r]||0,p[r]+=n.max)}}q.each(f,function(t){if(0<t.length){var e=q.min(t),n=q.max(t);o.min=Math.min(o.min,e),o.max=Math.max(o.max,n)}})}else for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&c(e))for(r=0,a=(i=u[t].data).length;r<a;r++)n=o._parseValue(i[r]),isNaN(n.min)||isNaN(n.max)||e.data[r].hidden||n.min<0||n.max<0||(o.min=Math.min(n.min,o.min),o.max=Math.max(n.max,o.max),0!==n.min&&(o.minNotZero=Math.min(n.min,o.minNotZero)));o.min=q.isFinite(o.min)?o.min:null,o.max=q.isFinite(o.max)?o.max:null,o.minNotZero=q.isFinite(o.minNotZero)?o.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;t.min=Bn(e.min,t.min),t.max=Bn(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(zn(t.min))-1),t.max=Math.pow(10,Math.floor(zn(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(zn(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(zn(t.min))+1):10),null===t.minNotZero&&(0<t.min?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(zn(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),i={min:Bn(e.min),max:Bn(e.max)},r=t.ticks=function(t,e){var n,i,r=[],a=Rn(t.min,Math.pow(10,Math.floor(zn(e.min)))),o=Math.floor(zn(e.max)),s=Math.ceil(e.max/Math.pow(10,o));0===a?(n=Math.floor(zn(e.minNotZero)),i=Math.floor(e.minNotZero/Math.pow(10,n)),r.push(a),a=i*Math.pow(10,n)):(n=Math.floor(zn(a)),i=Math.floor(a/Math.pow(10,n)));for(var l=n<0?Math.pow(10,Math.abs(n)):1;r.push(a),10===++i&&(i=1,l=0<=++n?1:l),a=Math.round(i*Math.pow(10,n)*l)/l,n<o||n===o&&i<s;);var u=Rn(t.max,a);return r.push(u),r}(i,t);t.max=q.max(r),t.min=q.min(r),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&r.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),kn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){var e=this.tickValues;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])},_getFirstTickValue:function(t){var e=Math.floor(zn(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},_configure:function(){var t=this,e=t.min,n=0;kn.prototype._configure.call(t),0===e&&(e=t._getFirstTickValue(t.minNotZero),n=Rn(t.options.ticks.fontSize,E.global.defaultFontSize)/t._length),t._startValue=zn(e),t._valueOffset=n,t._valueRange=(zn(t.max)-zn(e))/(1-n)},getPixelForValue:function(t){var e=this,n=0;return(t=+e.getRightValue(t))>e.min&&0<t&&(n=(zn(t)-e._startValue)/e._valueRange+e._valueOffset),e.getPixelForDecimal(n)},getValueForPixel:function(t){var e=this,n=e.getDecimalForPixel(t);return 0===n&&0===e.min?0:Math.pow(10,e._startValue+(n-e._valueOffset)*e._valueRange)}}),Wn=Nn;En._defaults=Wn;var Hn=q.valueOrDefault,Vn=q.valueAtIndexOrDefault,jn=q.options.resolve,qn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:ln.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function Un(t){var e=t.ticks;return e.display&&t.display?Hn(e.fontSize,E.global.defaultFontSize)+2*e.backdropPaddingY:0}function Yn(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||r<t?{start:e-n,end:e}:{start:e,end:e+n}}function Gn(t,e,n,i){var r,a,o=n.y+i/2;if(q.isArray(e))for(r=0,a=e.length;r<a;++r)t.fillText(e[r],n.x,o),o+=i;else t.fillText(e,n.x,o)}function Xn(t){return q.isNumber(t)?t:0}var Kn=Pn.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Un(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var r=this,n=r.chart,a=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY;q.each(n.data.datasets,function(t,e){if(n.isDatasetVisible(e)){var i=n.getDatasetMeta(e);q.each(t.data,function(t,e){var n=+r.getRightValue(t);isNaN(n)||i.data[e].hidden||(a=Math.min(n,a),o=Math.max(n,o))})}}),r.min=a===Number.POSITIVE_INFINITY?0:a,r.max=o===Number.NEGATIVE_INFINITY?0:o,r.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Un(this.options))},convertTicksToLabels:function(){var e=this;Pn.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(function(){var t=q.callback(e.options.pointLabels.callback,arguments,e);return t||0===t?t:""})},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this.options;t.display&&t.pointLabels.display?function(t){var e,n,i,r=q.options._parseFont(t.options.pointLabels),a={l:0,r:t.width,t:0,b:t.height-t.paddingTop},o={};t.ctx.font=r.string,t._pointLabelSizes=[];var s,l,u,d=t.chart.data.labels.length;for(e=0;e<d;e++){i=t.getPointPosition(e,t.drawingArea+5),s=t.ctx,l=r.lineHeight,u=t.pointLabels[e],n=q.isArray(u)?{w:q.longestText(s,s.font,u),h:u.length*l}:{w:s.measureText(u).width,h:l},t._pointLabelSizes[e]=n;var c=t.getIndexAngle(e),h=q.toDegrees(c)%360,f=Yn(h,i.x,n.w,0,180),g=Yn(h,i.y,n.h,90,270);f.start<a.l&&(a.l=f.start,o.l=c),f.end>a.r&&(a.r=f.end,o.r=c),g.start<a.t&&(a.t=g.start,o.t=c),g.end>a.b&&(a.b=g.end,o.b=c)}t.setReductions(t.drawingArea,a,o)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var i=this,r=e.l/Math.sin(n.l),a=Math.max(e.r-i.width,0)/Math.sin(n.r),o=-e.t/Math.cos(n.t),s=-Math.max(e.b-(i.height-i.paddingTop),0)/Math.cos(n.b);r=Xn(r),a=Xn(a),o=Xn(o),s=Xn(s),i.drawingArea=Math.min(Math.floor(t-(r+a)/2),Math.floor(t-(o+s)/2)),i.setCenterPoint(r,a,o,s)},setCenterPoint:function(t,e,n,i){var r=this,a=r.width-e-r.drawingArea,o=t+r.drawingArea,s=n+r.drawingArea,l=r.height-r.paddingTop-i-r.drawingArea;r.xCenter=Math.floor((o+a)/2+r.left),r.yCenter=Math.floor((s+l)/2+r.top+r.paddingTop)},getIndexAngle:function(t){var e=this.chart,n=(t*(360/e.data.labels.length)+((e.options||{}).startAngle||0))%360;return(n<0?360+n:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(q.isNullOrUndef(t))return NaN;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(t){var e=this.min,n=this.max;return this.getPointPositionForValue(t||0,this.beginAtZero?0:e<0&&n<0?n:0<e&&0<n?e:0)},_drawGrid:function(){var t,n,e,i=this,r=i.ctx,a=i.options,o=a.gridLines,s=a.angleLines,l=Hn(s.lineWidth,o.lineWidth),u=Hn(s.color,o.color);if(a.pointLabels.display&&function(t){var e,n,i,r,a=t.ctx,o=t.options,s=o.pointLabels,l=Un(o),u=t.getDistanceFromCenterForValue(o.ticks.reverse?t.min:t.max),d=q.options._parseFont(s);a.save(),a.font=d.string,a.textBaseline="middle";for(var c=t.chart.data.labels.length-1;0<=c;c--){var h=0===c?l/2:0,f=t.getPointPosition(c,u+h+5),g=Vn(s.fontColor,c,E.global.defaultFontColor);a.fillStyle=g;var p=t.getIndexAngle(c),m=q.toDegrees(p);a.textAlign=0===(r=m)||180===r?"center":r<180?"left":"right",e=m,n=t._pointLabelSizes[c],i=f,90===e||270===e?i.y-=n.h/2:(270<e||e<90)&&(i.y-=n.h),Gn(a,t.pointLabels[c],f,d.lineHeight)}a.restore()}(i),o.display&&q.each(i.ticks,function(t,e){0!==e&&(n=i.getDistanceFromCenterForValue(i.ticksAsNumbers[e]),function(t,e,n,i){var r,a=t.ctx,o=e.circular,s=t.chart.data.labels.length,l=Vn(e.color,i-1),u=Vn(e.lineWidth,i-1);if((o||s)&&l&&u){if(a.save(),a.strokeStyle=l,a.lineWidth=u,a.setLineDash&&(a.setLineDash(e.borderDash||[]),a.lineDashOffset=e.borderDashOffset||0),a.beginPath(),o)a.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{r=t.getPointPosition(0,n),a.moveTo(r.x,r.y);for(var d=1;d<s;d++)r=t.getPointPosition(d,n),a.lineTo(r.x,r.y)}a.closePath(),a.stroke(),a.restore()}}(i,o,n,e))}),s.display&&l&&u){for(r.save(),r.lineWidth=l,r.strokeStyle=u,r.setLineDash&&(r.setLineDash(jn([s.borderDash,o.borderDash,[]])),r.lineDashOffset=jn([s.borderDashOffset,o.borderDashOffset,0])),t=i.chart.data.labels.length-1;0<=t;t--)n=i.getDistanceFromCenterForValue(a.ticks.reverse?i.min:i.max),e=i.getPointPosition(t,n),r.beginPath(),r.moveTo(i.xCenter,i.yCenter),r.lineTo(e.x,e.y),r.stroke();r.restore()}},_drawLabels:function(){var n=this,i=n.ctx,r=n.options.ticks;if(r.display){var a,o,t=n.getIndexAngle(0),s=q.options._parseFont(r),l=Hn(r.fontColor,E.global.defaultFontColor);i.save(),i.font=s.string,i.translate(n.xCenter,n.yCenter),i.rotate(t),i.textAlign="center",i.textBaseline="middle",q.each(n.ticks,function(t,e){0===e&&!r.reverse||(a=n.getDistanceFromCenterForValue(n.ticksAsNumbers[e]),r.showLabelBackdrop&&(o=i.measureText(t).width,i.fillStyle=r.backdropColor,i.fillRect(-o/2-r.backdropPaddingX,-a-s.size/2-r.backdropPaddingY,o+2*r.backdropPaddingX,s.size+2*r.backdropPaddingY)),i.fillStyle=l,i.fillText(t,0,-a))}),i.restore()}},_drawTitle:q.noop}),Zn=qn;Kn._defaults=Zn;var $n=q._deprecated,Qn=q.options.resolve,Jn=q.valueOrDefault,ti=Number.MIN_SAFE_INTEGER||-9007199254740991,ei=Number.MAX_SAFE_INTEGER||9007199254740991,ni={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ii=Object.keys(ni);function ri(t,e){return t-e}function ai(t){return q.valueOrDefault(t.time.min,t.ticks.min)}function oi(t){return q.valueOrDefault(t.time.max,t.ticks.max)}function si(t,e,n,i){var r=function(t,e,n){for(var i,r,a,o=0,s=t.length-1;0<=o&&o<=s;){if(r=t[(i=o+s>>1)-1]||null,a=t[i],!r)return{lo:null,hi:a};if(a[e]<n)o=1+i;else{if(!(r[e]>n))return{lo:r,hi:a};s=i-1}}return{lo:a,hi:null}}(t,e,n),a=r.lo?r.hi?r.lo:t[t.length-2]:t[0],o=r.lo?r.hi?r.hi:t[t.length-1]:t[1],s=o[e]-a[e],l=s?(n-a[e])/s:0,u=(o[i]-a[i])*l;return a[i]+u}function li(t,e){var n=t._adapter,i=t.options.time,r=i.parser,a=r||i.format,o=e;return"function"==typeof r&&(o=r(o)),q.isFinite(o)||(o="string"==typeof a?n.parse(o,a):n.parse(o)),null!==o?+o:(r||"function"!=typeof a||(o=a(e),q.isFinite(o)||(o=n.parse(o))),o)}function ui(t,e){if(q.isNullOrUndef(e))return null;var n=t.options.time,i=li(t,t.getRightValue(e));return null===i||n.round&&(i=+t._adapter.startOf(i,n.round)),i}function di(t,e,n,i){var r,a,o,s=ii.length;for(r=ii.indexOf(t);r<s-1;++r)if(o=(a=ni[ii[r]]).steps?a.steps:ei,a.common&&Math.ceil((n-e)/(o*a.size))<=i)return ii[r];return ii[s-1]}function ci(t,e,n){var i,r,a=[],o={},s=e.length;for(i=0;i<s;++i)o[r=e[i]]=i,a.push({value:r,major:!1});return 0!==s&&n?function(t,e,n,i){var r,a,o=t._adapter,s=+o.startOf(e[0].value,i),l=e[e.length-1].value;for(r=s;r<=l;r=+o.add(r,1,i))0<=(a=n[r])&&(e[a].major=!0);return e}(t,a,o,n):a}var hi=kn.extend({initialize:function(){this.mergeTicksOptions(),kn.prototype.initialize.call(this)},update:function(){var t=this.options,e=t.time||(t.time={}),n=this._adapter=new sn._date(t.adapters.date);return $n("time scale",e.format,"time.format","time.parser"),$n("time scale",e.min,"time.min","ticks.min"),$n("time scale",e.max,"time.max","ticks.max"),q.mergeIf(e.displayFormats,n.formats()),kn.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),kn.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,i,r,a,o,s=this,l=s.chart,u=s._adapter,d=s.options,c=d.time.unit||"day",h=ei,f=ti,g=[],p=[],m=[],v=s._getLabels();for(t=0,n=v.length;t<n;++t)m.push(ui(s,v[t]));for(t=0,n=(l.data.datasets||[]).length;t<n;++t)if(l.isDatasetVisible(t))if(r=l.data.datasets[t].data,q.isObject(r[0]))for(p[t]=[],e=0,i=r.length;e<i;++e)a=ui(s,r[e]),g.push(a),p[t][e]=a;else p[t]=m.slice(0),o||(g=g.concat(m),o=!0);else p[t]=[];m.length&&(h=Math.min(h,m[0]),f=Math.max(f,m[m.length-1])),g.length&&(g=1<n?function(t){var e,n,i,r={},a=[];for(e=0,n=t.length;e<n;++e)r[i=t[e]]||(r[i]=!0,a.push(i));return a}(g).sort(ri):g.sort(ri),h=Math.min(h,g[0]),f=Math.max(f,g[g.length-1])),h=ui(s,ai(d))||h,f=ui(s,oi(d))||f,h=h===ei?+u.startOf(Date.now(),c):h,f=f===ti?+u.endOf(Date.now(),c)+1:f,s.min=Math.min(h,f),s.max=Math.max(h+1,f),s._table=[],s._timestamps={data:g,datasets:p,labels:m}},buildTicks:function(){var t,e,n,i,r,a,o,s,l,u=this,d=u.min,c=u.max,h=u.options,f=h.ticks,g=h.time,p=u._timestamps,m=[],v=u.getLabelCapacity(d),b=f.source,y=h.distribution;for(p="data"===b||"auto"===b&&"series"===y?p.data:"labels"===b?p.labels:function(t,e,n,i){var r,a=t._adapter,o=t.options,s=o.time,l=s.unit||di(s.minUnit,e,n,i),u=Qn([s.stepSize,s.unitStepSize,1]),d="week"===l&&s.isoWeekday,c=e,h=[];if(d&&(c=+a.startOf(c,"isoWeek",d)),c=+a.startOf(c,d?"day":l),a.diff(n,e,l)>1e5*u)throw e+" and "+n+" are too far apart with stepSize of "+u+" "+l;for(r=c;r<n;r=+a.add(r,u,l))h.push(r);return r!==n&&"ticks"!==o.bounds||h.push(r),h}(u,d,c,v),"ticks"===h.bounds&&p.length&&(d=p[0],c=p[p.length-1]),d=ui(u,ai(h))||d,c=ui(u,oi(h))||c,t=0,e=p.length;t<e;++t)d<=(n=p[t])&&n<=c&&m.push(n);return u.min=d,u.max=c,u._unit=g.unit||(f.autoSkip?di(g.minUnit,u.min,u.max,v):function(t,e,n,i,r){var a,o;for(a=ii.length-1;a>=ii.indexOf(n);a--)if(o=ii[a],ni[o].common&&t._adapter.diff(r,i,o)>=e-1)return o;return ii[n?ii.indexOf(n):0]}(u,m.length,g.minUnit,u.min,u.max)),u._majorUnit=f.major.enabled&&"year"!==u._unit?function(t){for(var e=ii.indexOf(t)+1,n=ii.length;e<n;++e)if(ni[ii[e]].common)return ii[e]}(u._unit):void 0,u._table=function(t,e,n,i){if("linear"===i||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var r,a,o,s,l,u=[],d=[e];for(r=0,a=t.length;r<a;++r)e<(s=t[r])&&s<n&&d.push(s);for(d.push(n),r=0,a=d.length;r<a;++r)l=d[r+1],o=d[r-1],s=d[r],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:r/(a-1)});return u}(u._timestamps.data,d,c,y),u._offsets=(i=u._table,r=m,l=s=0,h.offset&&r.length&&(a=si(i,"time",r[0],"pos"),s=1===r.length?1-a:(si(i,"time",r[1],"pos")-a)/2,o=si(i,"time",r[r.length-1],"pos"),l=1===r.length?o:(o-si(i,"time",r[r.length-2],"pos"))/2),{start:s,end:l,factor:1/(s+1+l)}),f.reverse&&m.reverse(),ci(u,m,u._majorUnit)},getLabelForIndex:function(t,e){var n=this,i=n._adapter,r=n.chart.data,a=n.options.time,o=r.labels&&t<r.labels.length?r.labels[t]:"",s=r.datasets[e].data[t];return q.isObject(s)&&(o=n.getRightValue(s)),a.tooltipFormat?i.format(li(n,o),a.tooltipFormat):"string"==typeof o?o:i.format(li(n,o),a.displayFormats.datetime)},tickFormatFunction:function(t,e,n,i){var r=this._adapter,a=this.options,o=a.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],d=n[e],c=a.ticks,h=l&&u&&d&&d.major,f=r.format(t,i||(h?u:s)),g=h?c.major:c.minor,p=Qn([g.callback,g.userCallback,c.callback,c.userCallback]);return p?p(f,e,n):f},convertTicksToLabels:function(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(this.tickFormatFunction(t[e].value,e,t));return i},getPixelForOffset:function(t){var e=this._offsets,n=si(this._table,"time",t,"pos");return this.getPixelForDecimal((e.start+n)*e.factor)},getPixelForValue:function(t,e,n){var i=null;if(void 0!==e&&void 0!==n&&(i=this._timestamps.datasets[n][e]),null===i&&(i=ui(this,t)),null!==i)return this.getPixelForOffset(i)},getPixelForTick:function(t){var e=this.getTicks();return 0<=t&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end,i=si(this._table,"pos",n,"time");return this._adapter._create(i)},_getLabelSize:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,i=q.toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),a=Math.sin(i),o=Jn(e.fontSize,E.global.defaultFontSize);return{w:n*r+o*a,h:n*a+o*r}},getLabelWidth:function(t){return this._getLabelSize(t).w},getLabelCapacity:function(t){var e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this.tickFormatFunction(t,0,ci(this,[t],this._majorUnit),i),a=this._getLabelSize(r),o=Math.floor(this.isHorizontal()?this.width/a.w:this.height/a.h);return this.options.offset&&o--,0<o?o:1}}),fi={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};hi._defaults=fi;var gi={category:Cn,linear:Fn,logarithmic:En,radialLinear:Kn,time:hi},pi={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};sn._date.override("function"==typeof i?{_id:"moment",formats:function(){return pi},parse:function(t,e){return"string"==typeof t&&"string"==typeof e?t=i(t,e):t instanceof i||(t=i(t)),t.isValid()?t.valueOf():null},format:function(t,e){return i(t).format(e)},add:function(t,e,n){return i(t).add(e,n).valueOf()},diff:function(t,e,n){return i(t).diff(i(e),n)},startOf:function(t,e,n){return t=i(t),"isoWeek"===e?t.isoWeekday(n).valueOf():t.startOf(e).valueOf()},endOf:function(t,e){return i(t).endOf(e).valueOf()},_create:function(t){return i(t)}}:{}),E._set("global",{plugins:{filler:{propagate:!0}}});var mi={dataset:function(t){var e=t.fill,n=t.chart,i=n.getDatasetMeta(e),r=i&&n.isDatasetVisible(e)&&i.dataset._children||[],a=r.length||0;return a?function(t,e){return e<a&&r[e]._view||null}:null},boundary:function(t){var n=t.boundary,e=n?n.x:null,i=n?n.y:null;return q.isArray(n)?function(t,e){return n[e]}:function(t){return{x:null===e?t.x:e,y:null===i?t.y:i}}}};function vi(t,e,n){var i,r=t._model||{},a=r.fill;if(void 0===a&&(a=!!r.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(i=parseFloat(a,10),isFinite(i)&&Math.floor(i)===i)return"-"!==a[0]&&"+"!==a[0]||(i=e+i),!(i===e||i<0||n<=i)&&i;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}function bi(t){return((t.el._scale||{}).getPointPositionForValue?function(t){var e,n,i,r,a,o=t.el._scale,s=o.options,l=o.chart.data.labels.length,u=t.fill,d=[];if(!l)return null;for(e=s.ticks.reverse?o.max:o.min,n=s.ticks.reverse?o.min:o.max,i=o.getPointPositionForValue(0,e),r=0;r<l;++r)a="start"===u||"end"===u?o.getPointPositionForValue(r,"start"===u?e:n):o.getBasePosition(r),s.gridLines.circular&&(a.cx=i.x,a.cy=i.y,a.angle=o.getIndexAngle(r)-Math.PI/2),d.push(a);return d}:function(t){var e,n=t.el._model||{},i=t.el._scale||{},r=t.fill,a=null;if(isFinite(r))return null;if("start"===r?a=void 0===n.scaleBottom?i.bottom:n.scaleBottom:"end"===r?a=void 0===n.scaleTop?i.top:n.scaleTop:void 0!==n.scaleZero?a=n.scaleZero:i.getBasePixel&&(a=i.getBasePixel()),null!=a){if(void 0!==a.x&&void 0!==a.y)return a;if(q.isFinite(a))return{x:(e=i.isHorizontal())?a:null,y:e?null:a}}return null})(t)}function yi(t,e,n){var i,r=t[e].fill,a=[e];if(!n)return r;for(;!1!==r&&-1===a.indexOf(r);){if(!isFinite(r))return r;if(!(i=t[r]))return!1;if(i.visible)return r;a.push(r),r=i.fill}return!1}function xi(t){return t&&!t.skip}function _i(t,e,n,i,r){var a,o,s,l;if(i&&r){for(t.moveTo(e[0].x,e[0].y),a=1;a<i;++a)q.canvas.lineTo(t,e[a-1],e[a]);if(void 0===n[0].angle)for(t.lineTo(n[r-1].x,n[r-1].y),a=r-1;0<a;--a)q.canvas.lineTo(t,n[a],n[a-1],!0);else for(o=n[0].cx,s=n[0].cy,l=Math.sqrt(Math.pow(n[0].x-o,2)+Math.pow(n[0].y-s,2)),a=r-1;0<a;--a)t.arc(o,s,l,n[a].angle,n[a-1].angle,!0)}}function wi(t,e,n,i,r,a){var o,s,l,u,d,c,h,f,g=e.length,p=i.spanGaps,m=[],v=[],b=0,y=0;for(t.beginPath(),o=0,s=g;o<s;++o)d=n(u=e[l=o%g]._view,l,i),c=xi(u),h=xi(d),a&&void 0===f&&c&&(s=g+(f=o+1)),c&&h?(b=m.push(u),y=v.push(d)):b&&y&&(p?(c&&m.push(u),h&&v.push(d)):(_i(t,m,v,b,y),b=y=0,m=[],v=[]));_i(t,m,v,b,y),t.closePath(),t.fillStyle=r,t.fill()}var ki={id:"filler",afterDatasetsUpdate:function(t,e){var n,i,r,a,o,s,l,u=(t.data.datasets||[]).length,d=e.propagate,c=[];for(i=0;i<u;++i)a=null,(r=(n=t.getDatasetMeta(i)).dataset)&&r._model&&r instanceof Mt.Line&&(a={visible:t.isDatasetVisible(i),fill:vi(r,i,u),chart:t,el:r}),n.$filler=a,c.push(a);for(i=0;i<u;++i)(a=c[i])&&(a.fill=yi(c,i,d),a.boundary=bi(a),a.mapper=(l=void 0,s=(o=a).fill,!(l="dataset")===s?null:(isFinite(s)||(l="boundary"),mi[l](o))))},beforeDatasetsDraw:function(t){var e,n,i,r,a,o,s,l=t._getSortedVisibleDatasetMetas(),u=t.ctx;for(n=l.length-1;0<=n;--n)(e=l[n].$filler)&&e.visible&&(r=(i=e.el)._view,a=i._children||[],o=e.mapper,s=r.backgroundColor||E.global.defaultColor,o&&s&&a.length&&(q.canvas.clipArea(u,t.chartArea),wi(u,a,o,r,s,i._loop),q.canvas.unclipArea(u)))}},Mi=q.rtl.getRtlAdapter,Ci=q.noop,Si=q.valueOrDefault;function Di(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}E._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,i=this.chart,r=i.getDatasetMeta(n);r.hidden=null===r.hidden?!i.data.datasets[n].hidden:null,i.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(n){var i=n.data.datasets,t=n.options.legend||{},r=t.labels&&t.labels.usePointStyle;return n._getSortedDatasetMetas().map(function(t){var e=t.controller.getStyle(r?0:void 0);return{text:i[t.index].label,fillStyle:e.backgroundColor,hidden:!n.isDatasetVisible(t.index),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,rotation:e.rotation,datasetIndex:t.index}},this)}}},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data.datasets;for(r.setAttribute("class",t.id+"-legend"),e=0,n=a.length;e<n;e++)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=a[e].backgroundColor,a[e].label&&i.appendChild(document.createTextNode(a[e].label));return r.outerHTML}});var Ai=$.extend({initialize:function(t){q.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:Ci,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ci,beforeSetDimensions:Ci,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ci,beforeBuildLabels:Ci,buildLabels:function(){var e=this,n=e.options.labels||{},t=q.callback(n.generateLabels,[e.chart],e)||[];n.filter&&(t=t.filter(function(t){return n.filter(t,e.chart.data)})),e.options.reverse&&t.reverse(),e.legendItems=t},afterBuildLabels:Ci,beforeFit:Ci,fit:function(){var t=this,e=t.options,i=e.labels,n=e.display,r=t.ctx,a=q.options._parseFont(i),o=a.size,s=t.legendHitBoxes=[],l=t.minSize,u=t.isHorizontal();if(u?(l.width=t.maxWidth,l.height=n?10:0):(l.width=n?10:0,l.height=t.maxHeight),n){if(r.font=a.string,u){var d=t.lineWidths=[0],c=0;r.textAlign="left",r.textBaseline="middle",q.each(t.legendItems,function(t,e){var n=Di(i,o)+o/2+r.measureText(t.text).width;(0===e||d[d.length-1]+n+2*i.padding>l.width)&&(c+=o+i.padding,d[d.length-(0<e?0:1)]=0),s[e]={left:0,top:0,width:n,height:o},d[d.length-1]+=n+i.padding}),l.height+=c}else{var h=i.padding,f=t.columnWidths=[],g=t.columnHeights=[],p=i.padding,m=0,v=0;q.each(t.legendItems,function(t,e){var n=Di(i,o)+o/2+r.measureText(t.text).width;0<e&&v+o+2*h>l.height&&(p+=m+i.padding,f.push(m),g.push(v),v=m=0),m=Math.max(m,n),v+=o+h,s[e]={left:0,top:0,width:n,height:o}}),p+=m,f.push(m),g.push(v),l.width+=p}t.width=l.width,t.height=l.height}else t.width=l.width=t.height=l.height=0},afterFit:Ci,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var g=this,n=g.options,p=n.labels,t=E.global,m=t.defaultColor,v=t.elements.line,b=g.height,y=g.columnHeights,x=g.width,_=g.lineWidths;if(n.display){var w,k=Mi(n.rtl,g.left,g.minSize.width),M=g.ctx,e=Si(p.fontColor,t.defaultFontColor),i=q.options._parseFont(p),C=i.size;M.textAlign=k.textAlign("left"),M.textBaseline="middle",M.lineWidth=.5,M.strokeStyle=e,M.fillStyle=e,M.font=i.string;var S=Di(p,C),D=g.legendHitBoxes,A=function(t,e){switch(n.align){case"start":return p.padding;case"end":return t-e;default:return(t-e+p.padding)/2}},P=g.isHorizontal();w=P?{x:g.left+A(x,_[0]),y:g.top+p.padding,line:0}:{x:g.left+p.padding,y:g.top+A(b,y[0]),line:0},q.rtl.overrideTextDirection(g.ctx,n.textDirection);var T=C+p.padding;q.each(g.legendItems,function(t,e){var n=M.measureText(t.text).width,i=S+C/2+n,r=w.x,a=w.y;k.setWidth(g.minSize.width),P?0<e&&r+i+p.padding>g.left+g.minSize.width&&(a=w.y+=T,w.line++,r=w.x=g.left+A(x,_[w.line])):0<e&&a+T>g.top+g.minSize.height&&(r=w.x=r+g.columnWidths[w.line]+p.padding,w.line++,a=w.y=g.top+A(b,y[w.line]));var o,s,l,u,d,c,h,f=k.x(r);!function(t,e,n){if(!(isNaN(S)||S<=0)){M.save();var i=Si(n.lineWidth,v.borderWidth);if(M.fillStyle=Si(n.fillStyle,m),M.lineCap=Si(n.lineCap,v.borderCapStyle),M.lineDashOffset=Si(n.lineDashOffset,v.borderDashOffset),M.lineJoin=Si(n.lineJoin,v.borderJoinStyle),M.lineWidth=i,M.strokeStyle=Si(n.strokeStyle,m),M.setLineDash&&M.setLineDash(Si(n.lineDash,v.borderDash)),p&&p.usePointStyle){var r=S*Math.SQRT2/2,a=k.xPlus(t,S/2),o=e+C/2;q.canvas.drawPoint(M,n.pointStyle,r,a,o,n.rotation)}else M.fillRect(k.leftForLtr(t,S),e,S,C),0!==i&&M.strokeRect(k.leftForLtr(t,S),e,S,C);M.restore()}}(f,a,t),D[e].left=k.leftForLtr(f,D[e].width),D[e].top=a,o=f,s=a,l=t,u=n,d=C/2,c=k.xPlus(o,S+d),h=s+d,M.fillText(l.text,c,h),l.hidden&&(M.beginPath(),M.lineWidth=2,M.moveTo(c,h),M.lineTo(k.xPlus(c,u),h),M.stroke()),P?w.x+=i+p.padding:w.y+=T}),q.rtl.restoreTextDirection(g.ctx,n.textDirection)}},_getLegendItemAt:function(t,e){var n,i,r;if(t>=this.left&&t<=this.right&&e>=this.top&&e<=this.bottom)for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(t>=(i=r[n]).left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return this.legendItems[n];return null},handleEvent:function(t){var e,n=this.options,i="mouseup"===t.type?"click":t.type;if("mousemove"===i){if(!n.onHover&&!n.onLeave)return}else{if("click"!==i)return;if(!n.onClick)return}e=this._getLegendItemAt(t.x,t.y),"click"===i?e&&n.onClick&&n.onClick.call(this,t.native,e):(n.onLeave&&e!==this._hoveredItem&&(this._hoveredItem&&n.onLeave.call(this,t.native,this._hoveredItem),this._hoveredItem=e),n.onHover&&e&&n.onHover.call(this,t.native,e))}});function Pi(t,e){var n=new Ai({ctx:t.ctx,options:e,chart:t});me.configure(t,n,e),me.addBox(t,n),t.legend=n}var Ti={id:"legend",_element:Ai,beforeInit:function(t){var e=t.options.legend;e&&Pi(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(q.mergeIf(e,E.global.legend),n?(me.configure(t,n,e),n.options=e):Pi(t,e)):n&&(me.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},Ii=q.noop;E._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Oi=$.extend({initialize:function(t){q.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:Ii,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ii,beforeSetDimensions:Ii,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ii,beforeBuildLabels:Ii,buildLabels:Ii,afterBuildLabels:Ii,beforeFit:Ii,fit:function(){var t,e=this.options,n=this.minSize={},i=this.isHorizontal();e.display?(t=(q.isArray(e.text)?e.text.length:1)*q.options._parseFont(e).lineHeight+2*e.padding,this.width=n.width=i?this.maxWidth:t,this.height=n.height=i?t:this.maxHeight):this.width=n.width=this.height=n.height=0},afterFit:Ii,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this.ctx,e=this.options;if(e.display){var n,i,r,a=q.options._parseFont(e),o=a.lineHeight,s=o/2+e.padding,l=0,u=this.top,d=this.left,c=this.bottom,h=this.right;t.fillStyle=q.valueOrDefault(e.fontColor,E.global.defaultFontColor),t.font=a.string,this.isHorizontal()?(i=d+(h-d)/2,r=u+s,n=h-d):(i="left"===e.position?d+s:h-s,r=u+(c-u)/2,n=c-u,l=Math.PI*("left"===e.position?-.5:.5)),t.save(),t.translate(i,r),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var f=e.text;if(q.isArray(f))for(var g=0,p=0;p<f.length;++p)t.fillText(f[p],0,g,n),g+=o;else t.fillText(f,0,0,n);t.restore()}}});function Fi(t,e){var n=new Oi({ctx:t.ctx,options:e,chart:t});me.configure(t,n,e),me.addBox(t,n),t.titleBlock=n}var Li={},Ri=ki,zi=Ti,Ni={id:"title",_element:Oi,beforeInit:function(t){var e=t.options.title;e&&Fi(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(q.mergeIf(e,E.global.title),n?(me.configure(t,n,e),n.options=e):Fi(t,e)):n&&(me.removeBox(t,n),delete t.titleBlock)}};function Bi(t,e,n){var i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}function Ei(t){return null!=t&&"none"!==t}function Wi(t,e,n){var i=document.defaultView,r=q._getParentNode(t),a=i.getComputedStyle(t)[e],o=i.getComputedStyle(r)[e],s=Ei(a),l=Ei(o),u=Number.POSITIVE_INFINITY;return s||l?Math.min(s?Bi(a,t,n):u,l?Bi(o,r,n):u):"none"}for(var Hi in Li.filler=Ri,Li.legend=zi,Li.title=Ni,(rn.helpers=q).where=function(t,e){if(q.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return q.each(t,function(t){e(t)&&n.push(t)}),n},q.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var i=0,r=t.length;i<r;++i)if(e.call(n,t[i],i,t))return i;return-1},q.findNextWhere=function(t,e,n){q.isNullOrUndef(n)&&(n=-1);for(var i=n+1;i<t.length;i++){var r=t[i];if(e(r))return r}},q.findPreviousWhere=function(t,e,n){q.isNullOrUndef(n)&&(n=t.length);for(var i=n-1;0<=i;i--){var r=t[i];if(e(r))return r}},q.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},q.almostEquals=function(t,e,n){return Math.abs(t-e)<n},q.almostWhole=function(t,e){var n=Math.round(t);return n-e<=t&&t<=n+e},q.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},q.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},q.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0===(t=+t)||isNaN(t)?t:0<t?1:-1},q.toRadians=function(t){return t*(Math.PI/180)},q.toDegrees=function(t){return t*(180/Math.PI)},q._decimalPlaces=function(t){if(q.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},q.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i),a=Math.atan2(i,n);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:r}},q.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},q.aliasPixel=function(t){return t%2==0?0:.5},q._alignPixel=function(t,e,n){var i=t.currentDevicePixelRatio,r=n/2;return Math.round((e-r)*i)/i+r},q.splineCurve=function(t,e,n,i){var r=t.skip?e:t,a=e,o=n.skip?e:n,s=Math.sqrt(Math.pow(a.x-r.x,2)+Math.pow(a.y-r.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),u=s/(s+l),d=l/(s+l),c=i*(u=isNaN(u)?0:u),h=i*(d=isNaN(d)?0:d);return{previous:{x:a.x-c*(o.x-r.x),y:a.y-c*(o.y-r.y)},next:{x:a.x+h*(o.x-r.x),y:a.y+h*(o.y-r.y)}}},q.EPSILON=Number.EPSILON||1e-14,q.splineCurveMonotone=function(t){var e,n,i,r,a,o,s,l,u,d=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),c=d.length;for(e=0;e<c;++e)if(!(i=d[e]).model.skip){if(n=0<e?d[e-1]:null,(r=e<c-1?d[e+1]:null)&&!r.model.skip){var h=r.model.x-i.model.x;i.deltaK=0!=h?(r.model.y-i.model.y)/h:0}!n||n.model.skip?i.mK=i.deltaK:!r||r.model.skip?i.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(i.deltaK)?i.mK=0:i.mK=(n.deltaK+i.deltaK)/2}for(e=0;e<c-1;++e)i=d[e],r=d[e+1],i.model.skip||r.model.skip||(q.almostEquals(i.deltaK,0,this.EPSILON)?i.mK=r.mK=0:(a=i.mK/i.deltaK,o=r.mK/i.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),i.mK=a*s*i.deltaK,r.mK=o*s*i.deltaK)));for(e=0;e<c;++e)(i=d[e]).model.skip||(n=0<e?d[e-1]:null,r=e<c-1?d[e+1]:null,n&&!n.model.skip&&(u=(i.model.x-n.model.x)/3,i.model.controlPointPreviousX=i.model.x-u,i.model.controlPointPreviousY=i.model.y-u*i.mK),r&&!r.model.skip&&(u=(r.model.x-i.model.x)/3,i.model.controlPointNextX=i.model.x+u,i.model.controlPointNextY=i.model.y+u*i.mK))},q.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},q.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},q.niceNum=function(t,e){var n=Math.floor(q.log10(t)),i=t/Math.pow(10,n);return(e?i<1.5?1:i<3?2:i<7?5:10:i<=1?1:i<=2?2:i<=5?5:10)*Math.pow(10,n)},q.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},q.getRelativePosition=function(t,e){var n,i,r=t.originalEvent||t,a=t.target||t.srcElement,o=a.getBoundingClientRect(),s=r.touches;i=s&&0<s.length?(n=s[0].clientX,s[0].clientY):(n=r.clientX,r.clientY);var l=parseFloat(q.getStyle(a,"padding-left")),u=parseFloat(q.getStyle(a,"padding-top")),d=parseFloat(q.getStyle(a,"padding-right")),c=parseFloat(q.getStyle(a,"padding-bottom")),h=o.right-o.left-l-d,f=o.bottom-o.top-u-c;return{x:n=Math.round((n-o.left-l)/h*a.width/e.currentDevicePixelRatio),y:i=Math.round((i-o.top-u)/f*a.height/e.currentDevicePixelRatio)}},q.getConstraintWidth=function(t){return Wi(t,"max-width","clientWidth")},q.getConstraintHeight=function(t){return Wi(t,"max-height","clientHeight")},q._calculatePadding=function(t,e,n){return-1<(e=q.getStyle(t,e)).indexOf("%")?n*parseInt(e,10)/100:parseInt(e,10)},q._getParentNode=function(t){var e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e},q.getMaximumWidth=function(t){var e=q._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,i=n-q._calculatePadding(e,"padding-left",n)-q._calculatePadding(e,"padding-right",n),r=q.getConstraintWidth(t);return isNaN(r)?i:Math.min(i,r)},q.getMaximumHeight=function(t){var e=q._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,i=n-q._calculatePadding(e,"padding-top",n)-q._calculatePadding(e,"padding-bottom",n),r=q.getConstraintHeight(t);return isNaN(r)?i:Math.min(i,r)},q.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},q.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var i=t.canvas,r=t.height,a=t.width;i.height=r*n,i.width=a*n,t.ctx.scale(n,n),i.style.height||i.style.width||(i.style.height=r+"px",i.style.width=a+"px")}},q.fontString=function(t,e,n){return e+" "+t+"px "+n},q.longestText=function(t,e,n,i){var r=(i=i||{}).data=i.data||{},a=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},a=i.garbageCollect=[],i.font=e),t.font=e;var o,s,l,u,d,c=0,h=n.length;for(o=0;o<h;o++)if(null!=(u=n[o])&&!0!==q.isArray(u))c=q.measureText(t,r,a,c,u);else if(q.isArray(u))for(s=0,l=u.length;s<l;s++)null==(d=u[s])||q.isArray(d)||(c=q.measureText(t,r,a,c,d));var f=a.length/2;if(f>n.length){for(o=0;o<f;o++)delete r[a[o]];a.splice(0,f)}return c},q.measureText=function(t,e,n,i,r){var a=e[r];return a||(a=e[r]=t.measureText(r).width,n.push(r)),i<a&&(i=a),i},q.numberOfLabelLines=function(t){var e=1;return q.each(t,function(t){q.isArray(t)&&t.length>e&&(e=t.length)}),e},q.color=C?function(t){return t instanceof CanvasGradient&&(t=E.global.defaultColor),C(t)}:function(t){return console.error("Color.js not found!"),t},q.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:q.color(t).saturate(.5).darken(.1).rgbString()},rn._adapters=sn,rn.Animation=J,rn.animationService=tt,rn.controllers=Qt,rn.DatasetController=at,rn.defaults=E,rn.Element=$,rn.elements=Mt,rn.Interaction=ae,rn.layouts=me,rn.platform=Re,rn.plugins=ze,rn.Scale=kn,rn.scaleService=Ne,rn.Ticks=ln,rn.Tooltip=Ke,rn.helpers.each(gi,function(t,e){rn.scaleService.registerScaleType(e,t,t._defaults)}),Li)Li.hasOwnProperty(Hi)&&rn.plugins.register(Li[Hi]);rn.platform.initialize();var Vi=rn;return"undefined"!=typeof window&&(window.Chart=rn),(rn.Chart=rn).Legend=Li.legend._element,rn.Title=Li.title._element,rn.pluginService=rn.plugins,rn.PluginBase=rn.Element.extend({}),rn.canvasHelpers=rn.helpers.canvas,rn.layoutService=rn.layouts,rn.LinearScaleBase=Pn,rn.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],function(n){rn[n]=function(t,e){return new rn(t,rn.helpers.merge(e||{},{type:n.charAt(0).toLowerCase()+n.slice(1)}))}}),Vi}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Glide=e()}(this,function(){"use strict";var n={type:"slider",startAt:0,perView:1,focusAt:0,gap:10,autoplay:!1,hoverpause:!0,keyboard:!0,bound:!1,swipeThreshold:80,dragThreshold:120,perTouch:!1,touchRatio:.5,touchAngle:45,animationDuration:400,rewind:!0,rewindDuration:800,animationTimingFunc:"cubic-bezier(.165, .840, .440, 1)",throttle:10,direction:"ltr",peek:0,breakpoints:{},classes:{direction:{ltr:"glide--ltr",rtl:"glide--rtl"},slider:"glide--slider",carousel:"glide--carousel",swipeable:"glide--swipeable",dragging:"glide--dragging",cloneSlide:"glide__slide--clone",activeNav:"glide__bullet--active",activeSlide:"glide__slide--active",disabledArrow:"glide__arrow--disabled"}};function s(t){console.error("[Glide warn]: "+t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t=function(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t};function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function b(t){return parseInt(t)}function o(t){return"string"==typeof t}function u(t){var e=void 0===t?"undefined":r(t);return"function"===e||"object"===e&&t}function d(t){return"function"==typeof t}function c(t){return void 0===t}function h(t){return t.constructor===Array}function f(t,e,n){Object.defineProperty(t,e,n)}function g(t,e){var n=l({},t,e);return e.hasOwnProperty("classes")&&(n.classes=l({},t.classes,e.classes),e.classes.hasOwnProperty("direction")&&(n.classes.direction=l({},t.classes.direction,e.classes.direction))),e.hasOwnProperty("breakpoints")&&(n.breakpoints=l({},t.breakpoints,e.breakpoints)),n}var p=(t(e,[{key:"on",value:function(t,e){if(h(t))for(var n=0;n<t.length;n++)this.on(t[n],e);this.hop.call(this.events,t)||(this.events[t]=[]);var i=this.events[t].push(e)-1;return{remove:function(){delete this.events[t][i]}}}},{key:"emit",value:function(t,e){if(h(t))for(var n=0;n<t.length;n++)this.emit(t[n],e);this.hop.call(this.events,t)&&this.events[t].forEach(function(t){t(e||{})})}}]),e);function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,e),this.events=t,this.hop=t.hasOwnProperty}var m=(t(v,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this._e.emit("mount.before"),u(e)?this._c=function(t,e,n){var i={};for(var r in e)d(e[r])?i[r]=e[r](t,i,n):s("Extension must be a function");for(var a in i)d(i[a].mount)&&i[a].mount();return i}(this,e,this._e):s("You need to provide a object on `mount()`"),this._e.emit("mount.after"),this}},{key:"mutate",value:function(t){var e=0<arguments.length&&void 0!==t?t:[];return h(e)?this._t=e:s("You need to provide a array on `mutate()`"),this}},{key:"update",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this.settings=g(this.settings,e),e.hasOwnProperty("startAt")&&(this.index=e.startAt),this._e.emit("update"),this}},{key:"go",value:function(t){return this._c.Run.make(t),this}},{key:"move",value:function(t){return this._c.Transition.disable(),this._c.Move.make(t),this}},{key:"destroy",value:function(){return this._e.emit("destroy"),this}},{key:"play",value:function(t){var e=0<arguments.length&&void 0!==t&&t;return e&&(this.settings.autoplay=e),this._e.emit("play"),this}},{key:"pause",value:function(){return this._e.emit("pause"),this}},{key:"disable",value:function(){return this.disabled=!0,this}},{key:"enable",value:function(){return this.disabled=!1,this}},{key:"on",value:function(t,e){return this._e.on(t,e),this}},{key:"isType",value:function(t){return this.settings.type===t}},{key:"settings",get:function(){return this._o},set:function(t){u(t)?this._o=t:s("Options must be an `object` instance.")}},{key:"index",get:function(){return this._i},set:function(t){this._i=b(t)}},{key:"type",get:function(){return this.settings.type}},{key:"disabled",get:function(){return this._d},set:function(t){this._d=!!t}}]),v);function v(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};i(this,v),this._c={},this._t=[],this._e=new p,this.disabled=!1,this.selector=t,this.settings=g(n,e),this.index=this.settings.startAt}function y(){return(new Date).getTime()}function x(n,i,r){var a=void 0,o=void 0,s=void 0,l=void 0,u=0;r=r||{};function d(){u=!1===r.leading?0:y(),a=null,l=n.apply(o,s),a||(o=s=null)}function t(){var t=y();u||!1!==r.leading||(u=t);var e=i-(t-u);return o=this,s=arguments,e<=0||i<e?(a&&(clearTimeout(a),a=null),u=t,l=n.apply(o,s),a||(o=s=null)):a||!1===r.trailing||(a=setTimeout(d,e)),l}return t.cancel=function(){clearTimeout(a),u=0,a=o=s=null},t}var _={ltr:["marginLeft","marginRight"],rtl:["marginRight","marginLeft"]};function w(t){if(t&&t.parentNode){for(var e=t.parentNode.firstChild,n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}return[]}function k(t){return!!(t&&t instanceof window.HTMLElement)}var M='[data-glide-el="track"]';var C=(t(S,[{key:"on",value:function(t,e,n,i){var r=3<arguments.length&&void 0!==i&&i;o(t)&&(t=[t]);for(var a=0;a<t.length;a++)this.listeners[t[a]]=n,e.addEventListener(t[a],this.listeners[t[a]],r)}},{key:"off",value:function(t,e,n){var i=2<arguments.length&&void 0!==n&&n;o(t)&&(t=[t]);for(var r=0;r<t.length;r++)e.removeEventListener(t[r],this.listeners[t[r]],i)}},{key:"destroy",value:function(){delete this.listeners}}]),S);function S(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,S),this.listeners=t}var D=["ltr","rtl"],A={">":"<","<":">","=":"="};function P(t,e){return{modify:function(t){return e.Direction.is("rtl")?-t:t}}}function T(i,r,a){var o=[function(e,n){return{modify:function(t){return t+n.Gaps.value*e.index}}},function(t,e){return{modify:function(t){return t+e.Clones.grow/2}}},function(n,i){return{modify:function(t){if(0<=n.settings.focusAt){var e=i.Peek.value;return u(e)?t-e.before:t-e}return t}}},function(a,o){return{modify:function(t){var e=o.Gaps.value,n=o.Sizes.width,i=a.settings.focusAt,r=o.Sizes.slideWidth;return"center"===i?t-(n/2-r/2):t-r*i-e*i}}}].concat(i._t,[P]);return{mutate:function(t){for(var e=0;e<o.length;e++){var n=o[e];d(n)&&d(n().modify)?t=n(i,r,a).modify(t):s("Transformer should be a function that returns an object with `modify()` method")}return t}}}var I=!1;try{var O=Object.defineProperty({},"passive",{get:function(){I=!0}});window.addEventListener("testPassive",null,O),window.removeEventListener("testPassive",null,O)}catch(t){}var F=I,L=["touchstart","mousedown"],R=["touchmove","mousemove"],z=["touchend","touchcancel","mouseup","mouseleave"],N=["mousedown","mousemove","mouseup","mouseleave"];function B(t){return u(t)?(n=t,Object.keys(n).sort().reduce(function(t,e){return t[e]=n[e],t[e],t},{})):(s("Breakpoints option must be an object"),{});var n}var E={Html:function(e,t){var n={mount:function(){this.root=e.selector,this.track=this.root.querySelector(M),this.slides=Array.prototype.slice.call(this.wrapper.children).filter(function(t){return!t.classList.contains(e.settings.classes.cloneSlide)})}};return f(n,"root",{get:function(){return n._r},set:function(t){o(t)&&(t=document.querySelector(t)),k(t)?n._r=t:s("Root element must be a existing Html node")}}),f(n,"track",{get:function(){return n._t},set:function(t){k(t)?n._t=t:s("Could not find track element. Please use "+M+" attribute.")}}),f(n,"wrapper",{get:function(){return n.track.children[0]}}),n},Translate:function(r,a,o){var s={set:function(t){var e=T(r,a).mutate(t);a.Html.wrapper.style.transform="translate3d("+-1*e+"px, 0px, 0px)"},remove:function(){a.Html.wrapper.style.transform=""}};return o.on("move",function(t){var e=a.Gaps.value,n=a.Sizes.length,i=a.Sizes.slideWidth;return r.isType("carousel")&&a.Run.isOffset("<")?(a.Transition.after(function(){o.emit("translate.jump"),s.set(i*(n-1))}),s.set(-i-e*n)):r.isType("carousel")&&a.Run.isOffset(">")?(a.Transition.after(function(){o.emit("translate.jump"),s.set(0)}),s.set(i*n+e*n)):s.set(t.movement)}),o.on("destroy",function(){s.remove()}),s},Transition:function(n,i,t){var r=!1,e={compose:function(t){var e=n.settings;return r?t+" 0ms "+e.animationTimingFunc:t+" "+this.duration+"ms "+e.animationTimingFunc},set:function(t){var e=0<arguments.length&&void 0!==t?t:"transform";i.Html.wrapper.style.transition=this.compose(e)},remove:function(){i.Html.wrapper.style.transition=""},after:function(t){setTimeout(function(){t()},this.duration)},enable:function(){r=!1,this.set()},disable:function(){r=!0,this.set()}};return f(e,"duration",{get:function(){var t=n.settings;return n.isType("slider")&&i.Run.offset?t.rewindDuration:t.animationDuration}}),t.on("move",function(){e.set()}),t.on(["build.before","resize","translate.jump"],function(){e.disable()}),t.on("run",function(){e.enable()}),t.on("destroy",function(){e.remove()}),e},Direction:function(t,e,n){var i={mount:function(){this.value=t.settings.direction},resolve:function(t){var e=t.slice(0,1);return this.is("rtl")?t.split(e).join(A[e]):t},is:function(t){return this.value===t},addClass:function(){e.Html.root.classList.add(t.settings.classes.direction[this.value])},removeClass:function(){e.Html.root.classList.remove(t.settings.classes.direction[this.value])}};return f(i,"value",{get:function(){return i._v},set:function(t){-1<D.indexOf(t)?i._v=t:s("Direction value must be `ltr` or `rtl`")}}),n.on(["destroy","update"],function(){i.removeClass()}),n.on("update",function(){i.mount()}),n.on(["build.before","update"],function(){i.addClass()}),i},Peek:function(n,t,e){var i={mount:function(){this.value=n.settings.peek}};return f(i,"value",{get:function(){return i._v},set:function(t){u(t)?(t.before=b(t.before),t.after=b(t.after)):t=b(t),i._v=t}}),f(i,"reductor",{get:function(){var t=i.value,e=n.settings.perView;return u(t)?t.before/e+t.after/e:2*t/e}}),e.on(["resize","update"],function(){i.mount()}),i},Sizes:function(t,i,e){var n={setupSlides:function(){for(var t=this.slideWidth+"px",e=i.Html.slides,n=0;n<e.length;n++)e[n].style.width=t},setupWrapper:function(){i.Html.wrapper.style.width=this.wrapperSize+"px"},remove:function(){for(var t=i.Html.slides,e=0;e<t.length;e++)t[e].style.width="";i.Html.wrapper.style.width=""}};return f(n,"length",{get:function(){return i.Html.slides.length}}),f(n,"width",{get:function(){return i.Html.root.offsetWidth}}),f(n,"wrapperSize",{get:function(){return n.slideWidth*n.length+i.Gaps.grow+i.Clones.grow}}),f(n,"slideWidth",{get:function(){return n.width/t.settings.perView-i.Peek.reductor-i.Gaps.reductor}}),e.on(["build.before","resize","update"],function(){n.setupSlides(),n.setupWrapper()}),e.on("destroy",function(){n.remove()}),n},Gaps:function(e,a,t){var n={apply:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style,r=a.Direction.value;i[_[r][0]]=0!==e?this.value/2+"px":"",e!==t.length-1?i[_[r][1]]=this.value/2+"px":i[_[r][1]]=""}},remove:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style;i.marginLeft="",i.marginRight=""}}};return f(n,"value",{get:function(){return b(e.settings.gap)}}),f(n,"grow",{get:function(){return n.value*(a.Sizes.length-1)}}),f(n,"reductor",{get:function(){var t=e.settings.perView;return n.value*(t-1)/t}}),t.on(["build.after","update"],x(function(){n.apply(a.Html.wrapper.children)},30)),t.on("destroy",function(){n.remove(a.Html.wrapper.children)}),n},Move:function(t,i,r){var e={mount:function(){this._o=0},make:function(t){var e=this,n=0<arguments.length&&void 0!==t?t:0;this.offset=n,r.emit("move",{movement:this.value}),i.Transition.after(function(){r.emit("move.after",{movement:e.value})})}};return f(e,"offset",{get:function(){return e._o},set:function(t){e._o=c(t)?0:b(t)}}),f(e,"translate",{get:function(){return i.Sizes.slideWidth*t.index}}),f(e,"value",{get:function(){var t=this.offset,e=this.translate;return i.Direction.is("rtl")?e+t:e-t}}),r.on(["build.before","run"],function(){e.make()}),e},Clones:function(g,p,t){var e={mount:function(){this.items=[],g.isType("carousel")&&(this.items=this.collect())},collect:function(t){for(var e=0<arguments.length&&void 0!==t?t:[],n=p.Html.slides,i=g.settings,r=i.perView,a=i.classes,o=r+ +!!g.settings.peek,s=n.slice(0,o),l=n.slice(-o),u=0;u<Math.max(1,Math.floor(r/n.length));u++){for(var d=0;d<s.length;d++){var c=s[d].cloneNode(!0);c.classList.add(a.cloneSlide),e.push(c)}for(var h=0;h<l.length;h++){var f=l[h].cloneNode(!0);f.classList.add(a.cloneSlide),e.unshift(f)}}return e},append:function(){for(var t=this.items,e=p.Html,n=e.wrapper,i=e.slides,r=Math.floor(t.length/2),a=t.slice(0,r).reverse(),o=t.slice(r,t.length),s=p.Sizes.slideWidth+"px",l=0;l<o.length;l++)n.appendChild(o[l]);for(var u=0;u<a.length;u++)n.insertBefore(a[u],i[0]);for(var d=0;d<t.length;d++)t[d].style.width=s},remove:function(){for(var t=this.items,e=0;e<t.length;e++)p.Html.wrapper.removeChild(t[e])}};return f(e,"grow",{get:function(){return(p.Sizes.slideWidth+p.Gaps.value)*e.items.length}}),t.on("update",function(){e.remove(),e.mount(),e.append()}),t.on("build.before",function(){g.isType("carousel")&&e.append()}),t.on("destroy",function(){e.remove()}),e},Resize:function(t,e,n){var i=new C,r={mount:function(){this.bind()},bind:function(){i.on("resize",window,x(function(){n.emit("resize")},t.settings.throttle))},unbind:function(){i.off("resize",window)}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Build:function(n,i,t){var e={mount:function(){t.emit("build.before"),this.typeClass(),this.activeClass(),t.emit("build.after")},typeClass:function(){i.Html.root.classList.add(n.settings.classes[n.settings.type])},activeClass:function(){var e=n.settings.classes,t=i.Html.slides[n.index];t&&(t.classList.add(e.activeSlide),w(t).forEach(function(t){t.classList.remove(e.activeSlide)}))},removeClasses:function(){var e=n.settings.classes;i.Html.root.classList.remove(e[n.settings.type]),i.Html.slides.forEach(function(t){t.classList.remove(e.activeSlide)})}};return t.on(["destroy","update"],function(){e.removeClasses()}),t.on(["resize","update"],function(){e.mount()}),t.on("move.after",function(){e.activeClass()}),e},Run:function(a,n,i){var t={mount:function(){this._o=!1},make:function(t){var e=this;a.disabled||(a.disable(),this.move=t,i.emit("run.before",this.move),this.calculate(),i.emit("run",this.move),n.Transition.after(function(){e.isStart()&&i.emit("run.start",e.move),e.isEnd()&&i.emit("run.end",e.move),(e.isOffset("<")||e.isOffset(">"))&&(e._o=!1,i.emit("run.offset",e.move)),i.emit("run.after",e.move),a.enable()}))},calculate:function(){var t=this.move,e=this.length,n=t.steps,i=t.direction,r="number"==typeof b(n)&&0!==b(n);switch(i){case">":">"===n?a.index=e:this.isEnd()?a.isType("slider")&&!a.settings.rewind||(this._o=!0,a.index=0):r?a.index+=Math.min(e-a.index,-b(n)):a.index++;break;case"<":"<"===n?a.index=0:this.isStart()?a.isType("slider")&&!a.settings.rewind||(this._o=!0,a.index=e):r?a.index-=Math.min(a.index,b(n)):a.index--;break;case"=":a.index=n;break;default:s("Invalid direction pattern ["+i+n+"] has been used")}},isStart:function(){return 0===a.index},isEnd:function(){return a.index===this.length},isOffset:function(t){return this._o&&this.move.direction===t}};return f(t,"move",{get:function(){return this._m},set:function(t){var e=t.substr(1);this._m={direction:t.substr(0,1),steps:e?b(e)?b(e):e:0}}}),f(t,"length",{get:function(){var t=a.settings,e=n.Html.slides.length;return a.isType("slider")&&"center"!==t.focusAt&&t.bound?e-1-(b(t.perView)-1)+b(t.focusAt):e-1}}),f(t,"offset",{get:function(){return this._o}}),t},Swipe:function(h,f,g){var n=new C,p=0,m=0,v=0,i=!1,r=!!F&&{passive:!0},t={mount:function(){this.bindSwipeStart()},start:function(t){if(!i&&!h.disabled){this.disable();var e=this.touches(t);p=null,m=b(e.pageX),v=b(e.pageY),this.bindSwipeMove(),this.bindSwipeEnd(),g.emit("swipe.start")}},move:function(t){if(!h.disabled){var e=h.settings,n=e.touchAngle,i=e.touchRatio,r=e.classes,a=this.touches(t),o=b(a.pageX)-m,s=b(a.pageY)-v,l=Math.abs(o<<2),u=Math.abs(s<<2),d=Math.sqrt(l+u),c=Math.sqrt(u);if(!(180*(p=Math.asin(c/d))/Math.PI<n))return!1;t.stopPropagation(),f.Move.make(o*parseFloat(i)),f.Html.root.classList.add(r.dragging),g.emit("swipe.move")}},end:function(t){if(!h.disabled){var e=h.settings,n=this.touches(t),i=this.threshold(t),r=n.pageX-m,a=180*p/Math.PI,o=Math.round(r/f.Sizes.slideWidth);this.enable(),i<r&&a<e.touchAngle?(e.perTouch&&(o=Math.min(o,b(e.perTouch))),f.Direction.is("rtl")&&(o=-o),f.Run.make(f.Direction.resolve("<"+o))):r<-i&&a<e.touchAngle?(e.perTouch&&(o=Math.max(o,-b(e.perTouch))),f.Direction.is("rtl")&&(o=-o),f.Run.make(f.Direction.resolve(">"+o))):f.Move.make(),f.Html.root.classList.remove(e.classes.dragging),this.unbindSwipeMove(),this.unbindSwipeEnd(),g.emit("swipe.end")}},bindSwipeStart:function(){var e=this,t=h.settings;t.swipeThreshold&&n.on(L[0],f.Html.wrapper,function(t){e.start(t)},r),t.dragThreshold&&n.on(L[1],f.Html.wrapper,function(t){e.start(t)},r)},unbindSwipeStart:function(){n.off(L[0],f.Html.wrapper,r),n.off(L[1],f.Html.wrapper,r)},bindSwipeMove:function(){var e=this;n.on(R,f.Html.wrapper,x(function(t){e.move(t)},h.settings.throttle),r)},unbindSwipeMove:function(){n.off(R,f.Html.wrapper,r)},bindSwipeEnd:function(){var e=this;n.on(z,f.Html.wrapper,function(t){e.end(t)})},unbindSwipeEnd:function(){n.off(z,f.Html.wrapper)},touches:function(t){return-1<N.indexOf(t.type)?t:t.touches[0]||t.changedTouches[0]},threshold:function(t){var e=h.settings;return-1<N.indexOf(t.type)?e.dragThreshold:e.swipeThreshold},enable:function(){return i=!1,f.Transition.enable(),this},disable:function(){return i=!0,f.Transition.disable(),this}};return g.on("build.after",function(){f.Html.root.classList.add(h.settings.classes.swipeable)}),g.on("destroy",function(){t.unbindSwipeStart(),t.unbindSwipeMove(),t.unbindSwipeEnd(),n.destroy()}),t},Images:function(t,e,n){var i=new C,r={mount:function(){this.bind()},bind:function(){i.on("dragstart",e.Html.wrapper,this.dragstart)},unbind:function(){i.off("dragstart",e.Html.wrapper)},dragstart:function(t){t.preventDefault()}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Anchors:function(t,e,n){var i=new C,r=!1,a=!1,o={mount:function(){this._a=e.Html.wrapper.querySelectorAll("a"),this.bind()},bind:function(){i.on("click",e.Html.wrapper,this.click)},unbind:function(){i.off("click",e.Html.wrapper)},click:function(t){a&&(t.stopPropagation(),t.preventDefault())},detach:function(){if(a=!0,!r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!1,this.items[t].setAttribute("data-href",this.items[t].getAttribute("href")),this.items[t].removeAttribute("href");r=!0}return this},attach:function(){if(a=!1,r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!0,this.items[t].setAttribute("href",this.items[t].getAttribute("data-href"));r=!1}return this}};return f(o,"items",{get:function(){return o._a}}),n.on("swipe.move",function(){o.detach()}),n.on("swipe.end",function(){e.Transition.after(function(){o.attach()})}),n.on("destroy",function(){o.attach(),o.unbind(),i.destroy()}),o},Controls:function(i,e,t){var n=new C,r=!!F&&{passive:!0},a={mount:function(){this._n=e.Html.root.querySelectorAll('[data-glide-el="controls[nav]"]'),this._c=e.Html.root.querySelectorAll('[data-glide-el^="controls"]'),this.addBindings()},setActive:function(){for(var t=0;t<this._n.length;t++)this.addClass(this._n[t].children)},removeActive:function(){for(var t=0;t<this._n.length;t++)this.removeClass(this._n[t].children)},addClass:function(t){var e=i.settings,n=t[i.index];n&&(n.classList.add(e.classes.activeNav),w(n).forEach(function(t){t.classList.remove(e.classes.activeNav)}))},removeClass:function(t){var e=t[i.index];e&&e.classList.remove(i.settings.classes.activeNav)},addBindings:function(){for(var t=0;t<this._c.length;t++)this.bind(this._c[t].children)},removeBindings:function(){for(var t=0;t<this._c.length;t++)this.unbind(this._c[t].children)},bind:function(t){for(var e=0;e<t.length;e++)n.on("click",t[e],this.click),n.on("touchstart",t[e],this.click,r)},unbind:function(t){for(var e=0;e<t.length;e++)n.off(["click","touchstart"],t[e])},click:function(t){t.preventDefault(),e.Run.make(e.Direction.resolve(t.currentTarget.getAttribute("data-glide-dir")))}};return f(a,"items",{get:function(){return a._c}}),t.on(["mount.after","move.after"],function(){a.setActive()}),t.on("destroy",function(){a.removeBindings(),a.removeActive(),n.destroy()}),a},Keyboard:function(t,e,n){var i=new C,r={mount:function(){t.settings.keyboard&&this.bind()},bind:function(){i.on("keyup",document,this.press)},unbind:function(){i.off("keyup",document)},press:function(t){39===t.keyCode&&e.Run.make(e.Direction.resolve(">")),37===t.keyCode&&e.Run.make(e.Direction.resolve("<"))}};return n.on(["destroy","update"],function(){r.unbind()}),n.on("update",function(){r.mount()}),n.on("destroy",function(){i.destroy()}),r},Autoplay:function(e,n,t){var i=new C,r={mount:function(){this.start(),e.settings.hoverpause&&this.bind()},start:function(){var t=this;e.settings.autoplay&&c(this._i)&&(this._i=setInterval(function(){t.stop(),n.Run.make(">"),t.start()},this.time))},stop:function(){this._i=clearInterval(this._i)},bind:function(){var t=this;i.on("mouseover",n.Html.root,function(){t.stop()}),i.on("mouseout",n.Html.root,function(){t.start()})},unbind:function(){i.off(["mouseover","mouseout"],n.Html.root)}};return f(r,"time",{get:function(){var t=n.Html.slides[e.index].getAttribute("data-glide-autoplay");return b(t||e.settings.autoplay)}}),t.on(["destroy","update"],function(){r.unbind()}),t.on(["run.before","pause","destroy","swipe.start","update"],function(){r.stop()}),t.on(["run.after","play","swipe.end"],function(){r.start()}),t.on("update",function(){r.mount()}),t.on("destroy",function(){i.destroy()}),r},Breakpoints:function(t,e,n){var i=new C,r=t.settings,a=B(r.breakpoints),o=l({},r),s={match:function(t){if(void 0!==window.matchMedia)for(var e in t)if(t.hasOwnProperty(e)&&window.matchMedia("(max-width: "+e+"px)").matches)return t[e];return o}};return l(r,s.match(a)),i.on("resize",window,x(function(){t.settings=g(r,s.match(a))},t.settings.throttle)),n.on("update",function(){a=B(a),o=l({},r)}),n.on("destroy",function(){i.off("resize",window)}),s}};function W(){return i(this,W),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(W.__proto__||Object.getPrototypeOf(W)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(W,m),t(W,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,i)}if("value"in r)return r.value;var o=r.get;return void 0!==o?o.call(i):void 0}(W.prototype.__proto__||Object.getPrototypeOf(W.prototype),"mount",this).call(this,l({},E,e))}}]),W});var chartObject,chartObject1,chartObject2,chartObject3,chartObject4,chartObject5,chartObject6,chartObject7,chartObject8,chartObject9,refreshTime=6e5,reportDaysDisplay=document.querySelector(".js-days"),reportDays=reportDaysDisplay.value;function getData(t,i,r){var a=new XMLHttpRequest;a.onload=function(){if(200<=a.status&&a.status<300){for(var t=JSON.parse(a.response).values,e={labels:[],datasetTitle:[],datasets:{0:[],1:[],2:[],3:[],4:[]},title:t[1][0]},n=0;n<=24*i;n++)0===n?(e.datasetTitle.push(t[n][1]),e.datasetTitle.push(t[n][2]),e.datasetTitle.push(t[n][3]),e.datasetTitle.push(t[n][4]),e.datasetTitle.push(t[n][8])):void 0!==t[n]&&(e.datasets[0].push(t[n][1]),e.datasets[1].push(t[n][2]),e.datasets[2].push(t[n][3]),e.datasets[3].push(t[n][4]),e.datasets[4].push(t[n][8]),e.labels.push(t[n][6]));r(e)}else console.log("The request failed!")},a.open("GET","https://sheets.googleapis.com/v4/spreadsheets/1SSIkRt0WgSDgD6XvQiWsXBOUApTE1RFZ-zFftKyaG6Q/values/"+t+"?key=AIzaSyDxuzVaF80Tx4nN3xqfSHeYznHTCTA01Lk"),a.send()}function addChart(t,e,n,i){var r=document.getElementById(t).getContext("2d"),a=new Chart(r,{type:"line",data:{labels:n.labels,datasets:[{label:n.datasetTitle[0],data:n.datasets[0],fill:!1,borderColor:["rgba(54, 162, 235, 1)"],pointBackgroundColor:"rgba(54, 162, 235, 1)",pointBorderColor:"rgba(54, 162, 235, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[1],data:n.datasets[1],fill:!1,borderColor:["rgba(255, 99, 132, 1)"],pointBackgroundColor:"rgba(255, 99, 132, 1)",pointBorderColor:"rgba(255, 99, 132, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[2],data:n.datasets[2],fill:!1,borderColor:["rgb(65, 255, 99)"],pointBackgroundColor:"rgba(65, 255, 99, 1)",pointBorderColor:"rgba(65, 255, 99, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[3],data:n.datasets[3],fill:!1,borderColor:["rgb(255, 140, 26)"],pointBackgroundColor:"rgba(255, 140, 26, 1)",pointBorderColor:"rgba(255, 140, 26, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[4],data:n.datasets[4],fill:!1,borderColor:["rgb(255,247,55)"],pointBackgroundColor:"rgba(255,247,55, 1)",pointBorderColor:"rgba(255,247,55, 1)",pointRadius:1,borderWidth:2}]},options:{scales:{yAxes:[{ticks:{fontColor:"#6e6e6e",beginAtZero:!0,suggestedMin:0,suggestedMax:3,stepSize:1},gridLines:{display:!0,color:"#262626"}}],xAxes:[{ticks:{fontColor:"#6e6e6e",reverse:!0},gridLines:{display:!0,color:"#262626"}}]},legend:{text:"something",labels:{fontColor:"#6e6e6e"}},title:{display:!0,text:e,fontSize:18,fontColor:"white"},animation:{duration:0},maintainAspectRatio:!1}});a.canvas.parentNode.style.height=window.innerHeight/2.75+"px",i(a)}function updateChart(t,e){t.data.labels=e.labels;for(var n=0;n<t.data.datasets.length;n++)t.data.datasets[n].data=e.datasets[n];t.update()}getData("Home",reportDays,function(t){addChart("metricChart",t.title,t,function(e){chartObject=e,setInterval(function(){getData("Home",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Car Insurance",reportDays,function(t){addChart("metricChart1",t.title,t,function(e){chartObject1=e,setInterval(function(){getData("Car Insurance",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Multi Car",reportDays,function(t){addChart("metricChart2",t.title,t,function(e){chartObject2=e,setInterval(function(){getData("Multi Car",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Claims",reportDays,function(t){addChart("metricChart3",t.title,t,function(e){chartObject3=e,setInterval(function(){getData("Claims",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Home Insurance",reportDays,function(t){addChart("metricChart4",t.title,t,function(e){chartObject4=e,setInterval(function(){getData("Home Insurance",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Smartmiles",reportDays,function(t){addChart("metricChart5",t.title,t,function(e){chartObject5=e,setInterval(function(){getData("Smartmiles",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Help",reportDays,function(t){addChart("metricChart6",t.title,t,function(e){chartObject6=e,setInterval(function(){getData("Help",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("About Us",reportDays,function(t){addChart("metricChart7",t.title,t,function(e){chartObject7=e,setInterval(function(){getData("About Us",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Contact Us",reportDays,function(t){addChart("metricChart8",t.title,t,function(e){chartObject8=e,setInterval(function(){getData("Contact Us",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Coronavirus FAQs",reportDays,function(t){addChart("metricChart9",t.title,t,function(e){chartObject9=e,setInterval(function(){getData("Coronavirus FAQs",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),reportDaysDisplay.addEventListener("change",function(t){getData("Home",reportDays=t.target.value,function(t){updateChart(chartObject,t)}),getData("Car Insurance",reportDays,function(t){updateChart(chartObject1,t)}),getData("Multi Car",reportDays,function(t){updateChart(chartObject2,t)}),getData("Claims",reportDays,function(t){updateChart(chartObject3,t)}),getData("Home Insurance",reportDays,function(t){updateChart(chartObject4,t)}),getData("Smartmiles",reportDays,function(t){updateChart(chartObject5,t)}),getData("Help",reportDays,function(t){updateChart(chartObject6,t)}),getData("About Us",reportDays,function(t){updateChart(chartObject7,t)}),getData("Contact Us",reportDays,function(t){updateChart(chartObject8,t)}),getData("Coronavirus FAQs",reportDays,function(t){updateChart(chartObject9,t)})});var glide=new Glide(".glide",{autoplay:3e4,animationDuration:1e3,hoverpause:!0});glide.mount();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoYXJ0LmpzIiwiZ2xpZGUuanMiLCJkYXNoYm9hcmQuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJDaGFydCIsIm1vbWVudCIsInRoaXMiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbG9yTmFtZSIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29udmVyc2lvbnMiLCJyZXZlcnNlS2V5d29yZHMiLCJrZXkiLCJjb252ZXJ0IiwicmdiIiwiY2hhbm5lbHMiLCJsYWJlbHMiLCJoc2wiLCJoc3YiLCJod2IiLCJjbXlrIiwieHl6IiwibGFiIiwibGNoIiwiaGV4Iiwia2V5d29yZCIsImFuc2kxNiIsImFuc2kyNTYiLCJoY2ciLCJhcHBsZSIsIm1vZGVsIiwiRXJyb3IiLCJsZW5ndGgiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaCIsImwiLCJyIiwiZyIsImIiLCJtaW4iLCJNYXRoIiwibWF4IiwiZGVsdGEiLCJkaWZmYyIsImMiLCJ2IiwiZGlmZiIsInJkaWYiLCJnZGlmIiwiYmRpZiIsInMiLCJrIiwicmV2ZXJzZWQiLCJjdXJyZW50Q2xvc2VzdEtleXdvcmQiLCJ4IiwieSIsImN1cnJlbnRDbG9zZXN0RGlzdGFuY2UiLCJJbmZpbml0eSIsImRpc3RhbmNlIiwicG93IiwieiIsInQxIiwidDIiLCJ0MyIsInZhbCIsImkiLCJzbWluIiwibG1pbiIsImhpIiwiZmxvb3IiLCJmIiwicCIsInEiLCJ0Iiwic2wiLCJ2bWluIiwibiIsIndoIiwiYmwiLCJyYXRpbyIsIm0iLCJ5MiIsIngyIiwiejIiLCJhIiwiYXRhbjIiLCJQSSIsInNxcnQiLCJociIsImNvcyIsInNpbiIsImFyZ3MiLCJhcmd1bWVudHMiLCJyb3VuZCIsImFuc2kiLCJjb2xvciIsIm11bHQiLCJyZW0iLCJzdHJpbmciLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwibWF0Y2giLCJjb2xvclN0cmluZyIsInNwbGl0IiwibWFwIiwiY2hhciIsImpvaW4iLCJpbnRlZ2VyIiwicGFyc2VJbnQiLCJodWUiLCJjaHJvbWEiLCJtZyIsInB1cmUiLCJ3IiwiZm4iLCJkZXJpdmVCRlMiLCJmcm9tTW9kZWwiLCJncmFwaCIsIm1vZGVscyIsImtleXMiLCJsZW4iLCJwYXJlbnQiLCJidWlsZEdyYXBoIiwicXVldWUiLCJjdXJyZW50IiwicG9wIiwiYWRqYWNlbnRzIiwiYWRqYWNlbnQiLCJub2RlIiwidW5zaGlmdCIsImxpbmsiLCJmcm9tIiwidG8iLCJ3cmFwQ29udmVyc2lvbiIsInRvTW9kZWwiLCJwYXRoIiwiY3VyIiwiY29udmVyc2lvbiIsIndyYXBSYXciLCJ3cmFwcGVkRm4iLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsIndyYXBSb3VuZGVkIiwicmVzdWx0IiwiZm9yRWFjaCIsInJvdXRlcyIsInJvdXRlIiwicmF3IiwiY29sb3JDb252ZXJ0IiwiY29sb3JOYW1lJDEiLCJnZXRSZ2JhIiwiZ2V0SHNsYSIsImdldFJnYiIsInJnYmEiLCJnZXRIc2wiLCJoc2xhIiwiZ2V0SHdiIiwiZ2V0QWxwaGEiLCJ2YWxzIiwiaGV4U3RyaW5nIiwidW5kZWZpbmVkIiwiaGV4RG91YmxlIiwicmdiU3RyaW5nIiwiYWxwaGEiLCJyZ2JhU3RyaW5nIiwicGVyY2VudFN0cmluZyIsInBlcmNlbnRhU3RyaW5nIiwiaHNsU3RyaW5nIiwiaHNsYVN0cmluZyIsImh3YlN0cmluZyIsInJldmVyc2VOYW1lcyIsImhleEFscGhhIiwicGFyc2VGbG9hdCIsInNjYWxlIiwiaXNOYU4iLCJudW0iLCJzdHIiLCJuYW1lIiwiQ29sb3IiLCJvYmoiLCJ2YWxpZCIsInZhbHVlcyIsInNldFZhbHVlcyIsImxpZ2h0bmVzcyIsIndoaXRlbmVzcyIsImlzVmFsaWQiLCJzZXRTcGFjZSIsInJnYkFycmF5IiwiaHNsQXJyYXkiLCJoc3ZBcnJheSIsImh3YkFycmF5IiwiY29uY2F0IiwiY215a0FycmF5IiwicmdiYUFycmF5IiwiaHNsYUFycmF5Iiwic2V0Q2hhbm5lbCIsInNhdHVyYXRpb24iLCJzYXR1cmF0aW9udiIsImJsYWNrbmVzcyIsInJnYk51bWJlciIsImx1bWlub3NpdHkiLCJsdW0iLCJjaGFuIiwiY29udHJhc3QiLCJjb2xvcjIiLCJsdW0xIiwibHVtMiIsImxldmVsIiwiY29udHJhc3RSYXRpbyIsImRhcmsiLCJsaWdodCIsIm5lZ2F0ZSIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImRlc2F0dXJhdGUiLCJ3aGl0ZW4iLCJibGFja2VuIiwiZ3JleXNjYWxlIiwiY2xlYXJlciIsIm9wYXF1ZXIiLCJyb3RhdGUiLCJkZWdyZWVzIiwibWl4IiwibWl4aW5Db2xvciIsIndlaWdodCIsImNvbG9yMSIsIncxIiwidzIiLCJ0b0pTT04iLCJjbG9uZSIsInR5cGUiLCJzb3VyY2UiLCJ0YXJnZXQiLCJwcm9wIiwiY29uc29sZSIsImVycm9yIiwic3BhY2VzIiwibWF4ZXMiLCJnZXRWYWx1ZXMiLCJzcGFjZSIsImNoYXJBdCIsImNhcHBlZCIsImNoYW5zIiwic25hbWUiLCJpbmRleCIsInN2YWx1ZXMiLCJ3aW5kb3ciLCJpZCIsImNoYXJ0anNDb2xvciIsImhlbHBlcnMiLCJub29wIiwidWlkIiwiaXNOdWxsT3JVbmRlZiIsImlzQXJyYXkiLCJzdWJzdHIiLCJpc09iamVjdCIsImlzRmluaXRlIiwiTnVtYmVyIiwidmFsdWVPckRlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZUF0SW5kZXhPckRlZmF1bHQiLCJjYWxsYmFjayIsInRoaXNBcmciLCJhcHBseSIsImVhY2giLCJsb29wYWJsZSIsInJldmVyc2UiLCJhcnJheUVxdWFscyIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImtsZW4iLCJfbWVyZ2VyIiwib3B0aW9ucyIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJfbWVyZ2VySWYiLCJtZXJnZUlmIiwic291cmNlcyIsIm1lcmdlciIsImV4dGVuZCIsImFzc2lnbiIsImRzdCIsInNyYyIsImluaGVyaXRzIiwiZXh0ZW5zaW9ucyIsIlN1cnJvZ2F0ZSIsImNvbnN0cnVjdG9yIiwiQ2hhcnRFbGVtZW50IiwibWUiLCJfX3N1cGVyX18iLCJfZGVwcmVjYXRlZCIsInNjb3BlIiwicHJldmlvdXMiLCJ3YXJuIiwiaGVscGVyc19jb3JlIiwiY2FsbENhbGxiYWNrIiwiaW5kZXhPZiIsImFycmF5IiwiaXRlbSIsImZyb21JbmRleCIsImdldFZhbHVlT3JEZWZhdWx0IiwiZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiYXNpbiIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlSW5Cb3VuY2UiLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluT3V0Qm91bmNlIiwiaGVscGVyc19lYXNpbmciLCJlYXNpbmdFZmZlY3RzIiwiUkFEX1BFUl9ERUciLCJET1VCTEVfUEkiLCJIQUxGX1BJIiwiUVVBUlRFUl9QSSIsIlRXT19USElSRFNfUEkiLCJleHBvcnRzJDEiLCJjbGVhciIsImNoYXJ0IiwiY3R4IiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJyb3VuZGVkUmVjdCIsInJhZGl1cyIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsIm1vdmVUbyIsImFyYyIsImNsb3NlUGF0aCIsInJlY3QiLCJkcmF3UG9pbnQiLCJzdHlsZSIsInJvdGF0aW9uIiwieE9mZnNldCIsInlPZmZzZXQiLCJzaXplIiwiY29ybmVyUmFkaXVzIiwicmFkIiwic2F2ZSIsInRyYW5zbGF0ZSIsImRyYXdJbWFnZSIsInJlc3RvcmUiLCJiZWdpblBhdGgiLCJsaW5lVG8iLCJTUVJUMV8yIiwiZmlsbCIsInN0cm9rZSIsIl9pc1BvaW50SW5BcmVhIiwicG9pbnQiLCJhcmVhIiwiY2xpcEFyZWEiLCJjbGlwIiwidW5jbGlwQXJlYSIsImZsaXAiLCJzdGVwcGVkIiwic3RlcHBlZExpbmUiLCJtaWRwb2ludCIsInRlbnNpb24iLCJiZXppZXJDdXJ2ZVRvIiwiY29udHJvbFBvaW50UHJldmlvdXNYIiwiY29udHJvbFBvaW50TmV4dFgiLCJjb250cm9sUG9pbnRQcmV2aW91c1kiLCJjb250cm9sUG9pbnROZXh0WSIsImhlbHBlcnNfY2FudmFzIiwiZHJhd1JvdW5kZWRSZWN0YW5nbGUiLCJkZWZhdWx0cyIsIl9zZXQiLCJkZWZhdWx0Q29sb3IiLCJkZWZhdWx0Rm9udENvbG9yIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJkZWZhdWx0Rm9udFNpemUiLCJkZWZhdWx0Rm9udFN0eWxlIiwiZGVmYXVsdExpbmVIZWlnaHQiLCJzaG93TGluZXMiLCJjb3JlX2RlZmF1bHRzIiwiaGVscGVyc19vcHRpb25zIiwidG9MaW5lSGVpZ2h0IiwibWF0Y2hlcyIsInRvUGFkZGluZyIsIl9wYXJzZUZvbnQiLCJmb250IiwiZ2xvYmFsRGVmYXVsdHMiLCJmb250U2l6ZSIsImZhbWlseSIsImZvbnRGYW1pbHkiLCJsaW5lSGVpZ2h0IiwiZm9udFN0eWxlIiwicmVzb2x2ZSIsImlucHV0cyIsImNvbnRleHQiLCJpbmZvIiwiY2FjaGVhYmxlIiwiZXhwb3J0cyQyIiwiX2ZhY3Rvcml6ZSIsInB1c2giLCJzb3J0IiwibG9nMTAiLCJleHBvbmVudCIsImxvZyIsIkxPRzEwRSIsInBvd2VyT2YxMCIsImhlbHBlcnNfbWF0aCIsImhlbHBlcnMkMSIsImVhc2luZyIsImNhbnZhcyIsIm1hdGgiLCJydGwiLCJnZXRSdGxBZGFwdGVyIiwicmVjdFgiLCJzZXRXaWR0aCIsInRleHRBbGlnbiIsImFsaWduIiwieFBsdXMiLCJsZWZ0Rm9yTHRyIiwiaXRlbVdpZHRoIiwiX2l0ZW1XaWR0aCIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInByZXZUZXh0RGlyZWN0aW9uIiwicmVzdG9yZVRleHREaXJlY3Rpb24iLCJFbGVtZW50IiwiY29uZmlndXJhdGlvbiIsImluaXRpYWxpemUiLCJfdHlwZSIsImhpZGRlbiIsInBpdm90IiwiX3ZpZXciLCJfbW9kZWwiLCJfc3RhcnQiLCJ0cmFuc2l0aW9uIiwiZWFzZSIsInN0YXJ0IiwidmlldyIsImFjdHVhbCIsIm9yaWdpbiIsImMwIiwiYzEiLCJpbnRlcnBvbGF0ZSIsInRvb2x0aXBQb3NpdGlvbiIsImhhc1ZhbHVlIiwiaXNOdW1iZXIiLCJjb3JlX2VsZW1lbnQiLCJleHBvcnRzJDMiLCJjdXJyZW50U3RlcCIsIm51bVN0ZXBzIiwicmVuZGVyIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uQW5pbWF0aW9uQ29tcGxldGUiLCJjb3JlX2FuaW1hdGlvbiIsImdldCIsInNldCIsImFuaW1hdGlvbiIsImR1cmF0aW9uIiwib25Qcm9ncmVzcyIsIm9uQ29tcGxldGUiLCJjb3JlX2FuaW1hdGlvbnMiLCJhbmltYXRpb25zIiwicmVxdWVzdCIsImFkZEFuaW1hdGlvbiIsImxhenkiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiYW5pbWF0aW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uIiwiZmluZEluZGV4Iiwic3BsaWNlIiwicmVxdWVzdEFuaW1GcmFtZSIsInN0YXJ0RGlnZXN0IiwiYWR2YW5jZSIsIm5leHRTdGVwIiwiYXJyYXlFdmVudHMiLCJ1bmxpc3RlbkFycmF5RXZlbnRzIiwibGlzdGVuZXIiLCJzdHViIiwiX2NoYXJ0anMiLCJsaXN0ZW5lcnMiLCJEYXRhc2V0Q29udHJvbGxlciIsImRhdGFzZXRJbmRleCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImRhdGFFbGVtZW50VHlwZSIsIl9kYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJfZGF0YUVsZW1lbnRPcHRpb25zIiwibGlua1NjYWxlcyIsImFkZEVsZW1lbnRzIiwiZ2V0TWV0YSIsInVwZGF0ZUluZGV4IiwibWV0YSIsInNjYWxlcyIsImRhdGFzZXQiLCJnZXREYXRhc2V0Iiwic2NhbGVzT3B0cyIsInhBeGlzSUQiLCJ4QXhlcyIsInlBeGlzSUQiLCJ5QXhlcyIsImRhdGEiLCJkYXRhc2V0cyIsImdldERhdGFzZXRNZXRhIiwiZ2V0U2NhbGVGb3JJZCIsInNjYWxlSUQiLCJfZ2V0VmFsdWVTY2FsZUlkIiwiX2dldEluZGV4U2NhbGVJZCIsIl9nZXRWYWx1ZVNjYWxlIiwiX2dldEluZGV4U2NhbGUiLCJyZXNldCIsIl91cGRhdGUiLCJkZXN0cm95IiwiX2RhdGEiLCJjcmVhdGVNZXRhRGF0YXNldCIsIl9jaGFydCIsIl9kYXRhc2V0SW5kZXgiLCJjcmVhdGVNZXRhRGF0YSIsIl9pbmRleCIsIm1ldGFEYXRhIiwiYWRkRWxlbWVudEFuZFJlc2V0IiwiZWxlbWVudCIsInVwZGF0ZUVsZW1lbnQiLCJidWlsZE9yVXBkYXRlRWxlbWVudHMiLCJpc0V4dGVuc2libGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwibWV0aG9kIiwiYmFzZSIsInJlcyIsIm9iamVjdCIsInJlc3luY0VsZW1lbnRzIiwiX2NvbmZpZ3VyZSIsIl9jb25maWciLCJfY2FjaGVkRGF0YU9wdHMiLCJ1cGRhdGUiLCJlYXNpbmdWYWx1ZSIsImVsZW1lbnRzIiwiZHJhdyIsImdldFN0eWxlIiwiX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiaG92ZXIiLCJyZWFkS2V5IiwiZGF0YXNldE9wdHMiLCJjdXN0b20iLCJlbGVtZW50T3B0aW9ucyIsImNhY2hlZCIsImRhdGFJbmRleCIsImZyZWV6ZSIsInJlbW92ZUhvdmVyU3R5bGUiLCIkcHJldmlvdXNTdHlsZSIsInNldEhvdmVyU3R5bGUiLCJnZXRIb3ZlckNvbG9yIiwiYm9yZGVyV2lkdGgiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckJvcmRlcldpZHRoIiwiX3JlbW92ZURhdGFzZXRIb3ZlclN0eWxlIiwiX3NldERhdGFzZXRIb3ZlclN0eWxlIiwiaG92ZXJPcHRpb25zIiwicHJldiIsIm51bU1ldGEiLCJudW1EYXRhIiwiaW5zZXJ0RWxlbWVudHMiLCJjb3VudCIsIm9uRGF0YVB1c2giLCJvbkRhdGFQb3AiLCJvbkRhdGFTaGlmdCIsInNoaWZ0Iiwib25EYXRhU3BsaWNlIiwib25EYXRhVW5zaGlmdCIsImNvcmVfZGF0YXNldENvbnRyb2xsZXIiLCJUQVUiLCJjbGlwQXJjIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwicGl4ZWxNYXJnaW4iLCJhbmdsZU1hcmdpbiIsIm91dGVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJkcmF3Qm9yZGVyIiwidm0iLCJpbm5lciIsImJvcmRlckFsaWduIiwibGluZVdpZHRoIiwibGluZUpvaW4iLCJmdWxsQ2lyY2xlcyIsImRyYXdGdWxsQ2lyY2xlQm9yZGVycyIsImVsZW1lbnRfYXJjIiwiaW5MYWJlbFJhbmdlIiwibW91c2VYIiwiaG92ZXJSYWRpdXMiLCJpblJhbmdlIiwiY2hhcnRYIiwiY2hhcnRZIiwicG9pbnRSZWxhdGl2ZVBvc2l0aW9uIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJhbmdsZSIsImJldHdlZW5BbmdsZXMiLCJ3aXRoaW5SYWRpdXMiLCJnZXRDZW50ZXJQb2ludCIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJnZXRBcmVhIiwiY2VudHJlQW5nbGUiLCJyYW5nZUZyb21DZW50cmUiLCJjaXJjdW1mZXJlbmNlIiwiZmlsbFN0eWxlIiwic3Ryb2tlU3R5bGUiLCJ2YWx1ZU9yRGVmYXVsdCQxIiwibGluZSIsImJvcmRlckNhcFN0eWxlIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJjYXBCZXppZXJQb2ludHMiLCJlbGVtZW50X2xpbmUiLCJjdXJyZW50Vk0iLCJzcGFuR2FwcyIsInBvaW50cyIsIl9jaGlsZHJlbiIsImdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cyIsImxhc3REcmF3bkluZGV4IiwiX2xvb3AiLCJwcmV2aW91c0l0ZW0iLCJza2lwIiwibGluZUNhcCIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJ2YWx1ZU9yRGVmYXVsdCQyIiwiZGVmYXVsdENvbG9yJDEiLCJ4UmFuZ2UiLCJhYnMiLCJoaXRSYWRpdXMiLCJwb2ludFN0eWxlIiwiZWxlbWVudF9wb2ludCIsIm1vdXNlWSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJwYWRkaW5nIiwiY2hhcnRBcmVhIiwiZGVmYXVsdENvbG9yJDIiLCJpc1ZlcnRpY2FsIiwiZ2V0QmFyQm91bmRzIiwieDEiLCJ5MSIsImhhbGYiLCJzd2FwIiwib3JpZyIsInYyIiwicGFyc2VCb3JkZXJXaWR0aCIsIm1heFciLCJtYXhIIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwic2tpcFgiLCJza2lwWSIsImJvdW5kcyIsInJlY3RhbmdsZSIsImVsZW1lbnRfcmVjdGFuZ2xlIiwiYm9yZGVyIiwicmVjdHMiLCJvdXRlciIsImZpbGxSZWN0IiwiQXJjIiwiTGluZSIsIlBvaW50IiwiUmVjdGFuZ2xlIiwiZGVwcmVjYXRlZCIsInZhbHVlT3JEZWZhdWx0JDMiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJydWxlciIsInRoaWNrbmVzcyIsImJhclRoaWNrbmVzcyIsInN0YWNrQ291bnQiLCJjdXJyIiwicGl4ZWxzIiwiX2xlbmd0aCIsImdldFRpY2tzIiwiZ2V0UGl4ZWxGb3JUaWNrIiwiY29tcHV0ZU1pblNhbXBsZVNpemUiLCJjYXRlZ29yeVBlcmNlbnRhZ2UiLCJiYXJQZXJjZW50YWdlIiwiY2h1bmsiLCJtb2RlIiwib2Zmc2V0IiwiZ3JpZExpbmVzIiwib2Zmc2V0R3JpZExpbmVzIiwiYmFyIiwiY29udHJvbGxlcl9iYXIiLCJzY2FsZU9wdHMiLCJzdGFjayIsIm1pbkJhckxlbmd0aCIsIm1heEJhclRoaWNrbmVzcyIsIl9ydWxlciIsImdldFJ1bGVyIiwiX3hTY2FsZSIsIl95U2NhbGUiLCJkYXRhc2V0TGFiZWwiLCJsYWJlbCIsIl91cGRhdGVFbGVtZW50R2VvbWV0cnkiLCJ2c2NhbGUiLCJnZXRCYXNlUGl4ZWwiLCJpc0hvcml6b250YWwiLCJ2cGl4ZWxzIiwiY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCJpcGl4ZWxzIiwiY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMiLCJoZWFkIiwiY2VudGVyIiwiX2dldFN0YWNrcyIsImxhc3QiLCJtZXRhc2V0cyIsIl9nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyIsInN0YWNrZWQiLCJzdGFja3MiLCJnZXRTdGFja0NvdW50IiwiZ2V0U3RhY2tJbmRleCIsImdldFBpeGVsRm9yVmFsdWUiLCJfc3RhcnRQaXhlbCIsImVuZCIsIl9lbmRQaXhlbCIsImltZXRhIiwiaXZhbHVlIiwic3RhY2tMZW5ndGgiLCJfcGFyc2VWYWx1ZSIsIm5leHQiLCJwZXJjZW50IiwicmFuZ2UiLCJzdGFja0luZGV4IiwiaW5kZXhPcHRzIiwidmFsdWVPcHRzIiwidmFsdWVPckRlZmF1bHQkNCIsInJlc29sdmUkMSIsInBvc2l0aW9uIiwidG9vbHRpcHMiLCJjYWxsYmFja3MiLCJ0aXRsZSIsImRhdGFQb2ludCIsInhMYWJlbCIsInlMYWJlbCIsImNvbnRyb2xsZXJfYnViYmxlIiwieFNjYWxlIiwieVNjYWxlIiwiZHNJbmRleCIsImdldFBpeGVsRm9yRGVjaW1hbCIsIk5hTiIsIl9vcHRpb25zIiwidmFsdWVPckRlZmF1bHQkNSIsIlBJJDEiLCJET1VCTEVfUEkkMSIsIkhBTEZfUEkkMSIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJsZWdlbmRDYWxsYmFjayIsImxpc3RJdGVtIiwibGlzdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJvdXRlckhUTUwiLCJsZWdlbmQiLCJnZW5lcmF0ZUxhYmVscyIsImNvbnRyb2xsZXIiLCJ0ZXh0Iiwib25DbGljayIsImxlZ2VuZEl0ZW0iLCJjdXRvdXRQZXJjZW50YWdlIiwidG9vbHRpcEl0ZW0iLCJkYXRhTGFiZWwiLCJjb250cm9sbGVyX2RvdWdobnV0IiwiZ2V0UmluZ0luZGV4IiwicmluZ0luZGV4IiwiaiIsImlzRGF0YXNldFZpc2libGUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIm9wdHMiLCJyYXRpb1giLCJyYXRpb1kiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImFyY3MiLCJjdXRvdXQiLCJjaGFydFdlaWdodCIsIl9nZXRSaW5nV2VpZ2h0Iiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJjb250YWluczAiLCJjb250YWluczkwIiwiY29udGFpbnMyNzAiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsImFuaW1hdGlvbk9wdHMiLCJjZW50ZXJYIiwiY2VudGVyWSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJob3ZlcldpZHRoIiwicmluZ1dlaWdodE9mZnNldCIsImRhdGFTZXRJbmRleCIsImF4aXMiLCJob3Jpem9udGFsQmFyIiwiY29udHJvbGxlcl9ob3Jpem9udGFsQmFyIiwidmFsdWVPckRlZmF1bHQkNiIsInJlc29sdmUkMiIsImlzUG9pbnRJbkFyZWEiLCJzY2FsZUNsaXAiLCJoYWxmQm9yZGVyV2lkdGgiLCJ0aWNrT3B0cyIsInRpY2tzIiwiY29udHJvbGxlcl9saW5lIiwiY29uZmlnIiwic2hvd0xpbmUiLCJfc2hvd0xpbmUiLCJsaW5lVGVuc2lvbiIsIl9zY2FsZSIsInVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJsaW5lTW9kZWwiLCJjYWxjdWxhdGVQb2ludFkiLCJsaW5lT3B0aW9ucyIsImRzIiwiZHNNZXRhIiwic3RhY2tlZFJpZ2h0VmFsdWUiLCJyaWdodFZhbHVlIiwic3VtUG9zIiwic3VtTmVnIiwiZ2V0UmlnaHRWYWx1ZSIsIl9nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiY29udHJvbFBvaW50cyIsImNhcENvbnRyb2xQb2ludCIsInB0IiwiZmlsdGVyIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJzcGxpbmVDdXJ2ZSIsIm5leHRJdGVtIiwicmVzb2x2ZSQzIiwiYW5nbGVMaW5lcyIsImRpc3BsYXkiLCJjaXJjdWxhciIsInBvaW50TGFiZWxzIiwiYmVnaW5BdFplcm8iLCJjb250cm9sbGVyX3BvbGFyQXJlYSIsInN0YXJ0cyIsIl9zdGFydHMiLCJhbmdsZXMiLCJfYW5nbGVzIiwiX3VwZGF0ZVJhZGl1cyIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwiX2NvbXB1dGVBbmdsZSIsIm1pblNpemUiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50IiwieENlbnRlciIsInlDZW50ZXIiLCJkYXRhc2V0U3RhcnRBbmdsZSIsImdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlIiwicmVzZXRSYWRpdXMiLCJkb3VnaG51dCIsImNvbnRyb2xsZXJfcGllIiwidmFsdWVPckRlZmF1bHQkNyIsImNvbnRyb2xsZXJfcmFkYXIiLCJwb2ludFBvc2l0aW9uIiwiZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlIiwic2NhdHRlciIsImNvbnRyb2xsZXJzIiwiYnViYmxlIiwicG9sYXJBcmVhIiwicGllIiwicmFkYXIiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwibmF0aXZlIiwicGFyc2VWaXNpYmxlSXRlbXMiLCJoYW5kbGVyIiwibWV0YWRhdGEiLCJqbGVuIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJnZXROZWFyZXN0SXRlbXMiLCJpbnRlcnNlY3QiLCJkaXN0YW5jZU1ldHJpYyIsIm1pbkRpc3RhbmNlIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJuZWFyZXN0SXRlbXMiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJ1c2VYIiwidXNlWSIsInB0MSIsInB0MiIsImRlbHRhWCIsImRlbHRhWSIsImluZGV4TW9kZSIsIml0ZW1zIiwiY29yZV9pbnRlcmFjdGlvbiIsIm1vZGVzIiwic2luZ2xlIiwieC1heGlzIiwibmVhcmVzdCIsImludGVyc2VjdHNJdGVtIiwiZmlsdGVyQnlQb3NpdGlvbiIsIndoZXJlIiwicG9zIiwic29ydEJ5V2VpZ2h0IiwiYnVpbGRMYXlvdXRCb3hlcyIsImJveGVzIiwibGF5b3V0Qm94ZXMiLCJib3giLCJ3cmFwQm94ZXMiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImdldENvbWJpbmVkTWF4IiwibWF4UGFkZGluZyIsInVwZGF0ZURpbXMiLCJwYXJhbXMiLCJsYXlvdXQiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsImdldFBhZGRpbmciLCJib3hQYWRkaW5nIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiZ2V0TWFyZ2lucyIsIm1hcmdpbkZvclBvc2l0aW9ucyIsInBvc2l0aW9ucyIsIm1hcmdpbiIsImZpdEJveGVzIiwicmVmaXQiLCJjaGFuZ2VkIiwicmVmaXRCb3hlcyIsImZ1bGxXaWR0aCIsInBsYWNlQm94ZXMiLCJ1c2VyUGFkZGluZyIsImNvcmVfbGF5b3V0cyIsImFkZEJveCIsIl9sYXllcnMiLCJyZW1vdmVCb3giLCJsYXlvdXRJdGVtIiwiY29uZmlndXJlIiwicHJvcHMiLCJsYXlvdXRPcHRpb25zIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwidkJveE1heFdpZHRoIiwiaEJveE1heEhlaWdodCIsImxheW91dHMiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwic3R5bGVzaGVldCIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJFWFBBTkRPX0tFWSIsIkNTU19QUkVGSVgiLCJDU1NfU0laRV9NT05JVE9SIiwiQ1NTX1JFTkRFUl9NT05JVE9SIiwiQ1NTX1JFTkRFUl9BTklNQVRJT04iLCJBTklNQVRJT05fU1RBUlRfRVZFTlRTIiwiRVZFTlRfVFlQRVMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmxlYXZlIiwicG9pbnRlcm91dCIsInJlYWRVc2VkU2l6ZSIsInByb3BlcnR5IiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJzdXBwb3J0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXNzaXZlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiY3JlYXRlRGl2IiwiY2xzIiwiZWwiLCJjbGFzc05hbWUiLCJhZGRSZXNpemVMaXN0ZW5lciIsInJlc2l6ZXIiLCJleHBhbmQiLCJzaHJpbmsiLCJ0aWNraW5nIiwiZXhwYW5kbyIsInByb3h5IiwiY29udGFpbmVyIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInBhcmVudE5vZGUiLCJjbGllbnRXaWR0aCIsIl9yZXNldCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJvblNjcm9sbCIsImJpbmQiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicmVuZGVyUHJveHkiLCJhbmltYXRpb25OYW1lIiwicmVmbG93Iiwib2Zmc2V0UGFyZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlUmVzaXplTGlzdGVuZXIiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInBsYXRmb3JtX2RvbSQyIiwiZGlzYWJsZUNTU0luamVjdGlvbiIsIl9lbmFibGVkIiwiX2Vuc3VyZUxvYWRlZCIsInJvb3QiLCJnZXRSb290Tm9kZSIsInJvb3ROb2RlIiwiY3NzIiwiY29udGFpbnNTdHlsZXMiLCJpbmplY3RDU1MiLCJob3N0IiwiYWNxdWlyZUNvbnRleHQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJyZW5kZXJIZWlnaHQiLCJnZXRBdHRyaWJ1dGUiLCJyZW5kZXJXaWR0aCIsImluaXRpYWwiLCJkaXNwbGF5V2lkdGgiLCJhc3BlY3RSYXRpbyIsImRpc3BsYXlIZWlnaHQiLCJpbml0Q2FudmFzIiwicmVsZWFzZUNvbnRleHQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcm94aWVzIiwiZXZlbnQiLCJhZGRFdmVudCIsInJlbW92ZUV2ZW50IiwiaW1wbGVtZW50YXRpb24iLCJwbGF0Zm9ybSIsInBsdWdpbnMiLCJjb3JlX3BsdWdpbnMiLCJfcGx1Z2lucyIsIl9jYWNoZUlkIiwicmVnaXN0ZXIiLCJwbHVnaW4iLCJ1bnJlZ2lzdGVyIiwiaWR4IiwiZ2V0QWxsIiwibm90aWZ5IiwiaG9vayIsImRlc2NyaXB0b3IiLCJkZXNjcmlwdG9ycyIsImNhY2hlIiwiJHBsdWdpbnMiLCJfaW52YWxpZGF0ZSIsImNvcmVfc2NhbGVTZXJ2aWNlIiwiY29uc3RydWN0b3JzIiwicmVnaXN0ZXJTY2FsZVR5cGUiLCJzY2FsZUNvbnN0cnVjdG9yIiwic2NhbGVEZWZhdWx0cyIsImdldFNjYWxlQ29uc3RydWN0b3IiLCJnZXRTY2FsZURlZmF1bHRzIiwidXBkYXRlU2NhbGVEZWZhdWx0cyIsImFkZGl0aW9ucyIsImFkZFNjYWxlc1RvTGF5b3V0IiwidmFsdWVPckRlZmF1bHQkOCIsImdldFJ0bEhlbHBlciIsImVuYWJsZWQiLCJ0aXRsZUZvbnRTdHlsZSIsInRpdGxlU3BhY2luZyIsInRpdGxlTWFyZ2luQm90dG9tIiwidGl0bGVGb250Q29sb3IiLCJ0aXRsZUFsaWduIiwiYm9keVNwYWNpbmciLCJib2R5Rm9udENvbG9yIiwiYm9keUFsaWduIiwiZm9vdGVyRm9udFN0eWxlIiwiZm9vdGVyU3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlckZvbnRDb2xvciIsImZvb3RlckFsaWduIiwieVBhZGRpbmciLCJ4UGFkZGluZyIsImNhcmV0UGFkZGluZyIsImNhcmV0U2l6ZSIsIm11bHRpS2V5QmFja2dyb3VuZCIsImRpc3BsYXlDb2xvcnMiLCJiZWZvcmVUaXRsZSIsInRvb2x0aXBJdGVtcyIsImxhYmVsQ291bnQiLCJhZnRlclRpdGxlIiwiYmVmb3JlQm9keSIsImJlZm9yZUxhYmVsIiwibGFiZWxDb2xvciIsImxhYmVsVGV4dENvbG9yIiwiYWZ0ZXJMYWJlbCIsImFmdGVyQm9keSIsImJlZm9yZUZvb3RlciIsImZvb3RlciIsImFmdGVyRm9vdGVyIiwicG9zaXRpb25lcnMiLCJhdmVyYWdlIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwiZCIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsInRwIiwicHVzaE9yQ29uY2F0IiwidG9QdXNoIiwic3BsaXROZXdsaW5lcyIsIlN0cmluZyIsImdldEJhc2VNb2RlbCIsInRvb2x0aXBPcHRzIiwieEFsaWduIiwieUFsaWduIiwidGV4dERpcmVjdGlvbiIsIl9ib2R5Rm9udEZhbWlseSIsImJvZHlGb250RmFtaWx5IiwiX2JvZHlGb250U3R5bGUiLCJib2R5Rm9udFN0eWxlIiwiX2JvZHlBbGlnbiIsImJvZHlGb250U2l6ZSIsIl90aXRsZUZvbnRGYW1pbHkiLCJ0aXRsZUZvbnRGYW1pbHkiLCJfdGl0bGVGb250U3R5bGUiLCJ0aXRsZUZvbnRTaXplIiwiX3RpdGxlQWxpZ24iLCJfZm9vdGVyRm9udEZhbWlseSIsImZvb3RlckZvbnRGYW1pbHkiLCJfZm9vdGVyRm9udFN0eWxlIiwiZm9vdGVyRm9udFNpemUiLCJfZm9vdGVyQWxpZ24iLCJvcGFjaXR5IiwibGVnZW5kQ29sb3JCYWNrZ3JvdW5kIiwiZ2V0VG9vbHRpcFNpemUiLCJ0b29sdGlwIiwiYm9keSIsImNvbWJpbmVkQm9keUxlbmd0aCIsInJlZHVjZSIsImJvZHlJdGVtIiwiYmVmb3JlIiwibGluZXMiLCJhZnRlciIsInRpdGxlTGluZUNvdW50IiwiZm9vdGVyTGluZUNvdW50IiwibWF4TGluZVdpZHRoIiwibWVhc3VyZVRleHQiLCJ3aWR0aFBhZGRpbmciLCJmb250U3RyaW5nIiwiZ2V0QWxpZ25lZFgiLCJnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyIsImV4cG9ydHMkNCIsIl9sYXN0QWN0aXZlIiwiZ2V0VGl0bGUiLCJnZXRCZWZvcmVCb2R5IiwiZ2V0Qm9keSIsImJvZHlJdGVtcyIsImdldEFmdGVyQm9keSIsImdldEZvb3RlciIsImFsaWdubWVudCIsInBhZGRpbmdBbmRTaXplIiwicmFkaXVzQW5kUGFkZGluZyIsImluZGV4U2NhbGUiLCJ2YWx1ZVNjYWxlIiwiZXhpc3RpbmdNb2RlbCIsImFjdGl2ZSIsIl9hY3RpdmUiLCJiYWNrZ3JvdW5kUG9pbnQiLCJ0b29sdGlwU2l6ZSIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxUZXh0Q29sb3JzIiwiX2V2ZW50UG9zaXRpb24iLCJnZXRMYWJlbEZvckluZGV4IiwiaXRlbVNvcnQiLCJkYXRhUG9pbnRzIiwibGYiLCJyZiIsIm9sZiIsIm9yZiIsInlmIiwibWlkWCIsIm1pZFkiLCJkZXRlcm1pbmVBbGlnbm1lbnQiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0bXAiLCJkcmF3VGl0bGUiLCJydGxIZWxwZXIiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsVGV4dCIsImRyYXdCb2R5IiwiZmlsbExpbmVPZlRleHQiLCJ4TGluZVBhZGRpbmciLCJ0ZXh0Q29sb3IiLCJkcmF3Q29sb3JCb3hlcyIsImNvbG9yWCIsImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwicnRsQ29sb3JYIiwic3Ryb2tlUmVjdCIsImRyYXdGb290ZXIiLCJkcmF3QmFja2dyb3VuZCIsInF1YWRyYXRpY0N1cnZlVG8iLCJoYXNUb29sdGlwQ29udGVudCIsImdsb2JhbEFscGhhIiwiaGFuZGxlRXZlbnQiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwicG9zaXRpb25lcnNfMSIsImNvcmVfdG9vbHRpcCIsInZhbHVlT3JEZWZhdWx0JDkiLCJtZXJnZVNjYWxlQ29uZmlnIiwic2xlbiIsIm1lcmdlQ29uZmlnIiwibmV4dEF2YWlsYWJsZVNjYWxlSWQiLCJheGVzT3B0cyIsInByZWZpeCIsImhhc0lkIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJsMiIsImV2ZW50cyIsIm9uSG92ZXIiLCJhbmltYXRpb25EdXJhdGlvbiIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlQW5pbWF0aW9uRHVyYXRpb24iLCJjb25zdHJ1Y3QiLCJfYnVmZmVyZWRSZW5kZXIiLCJpbnN0YW5jZXMiLCJyZXRpbmFTY2FsZSIsImRldmljZVBpeGVsUmF0aW8iLCJiaW5kRXZlbnRzIiwicmVzaXplIiwiaW5pdFRvb2xUaXAiLCJzdG9wIiwic2lsZW50IiwiZ2V0TWF4aW11bVdpZHRoIiwiZ2V0TWF4aW11bUhlaWdodCIsIm5ld1NpemUiLCJvblJlc2l6ZSIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJzY2FsZXNPcHRpb25zIiwic2NhbGVPcHRpb25zIiwieEF4aXNPcHRpb25zIiwieUF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInVwZGF0ZWQiLCJkdHlwZSIsImRwb3NpdGlvbiIsImlzRGVmYXVsdCIsInNjYWxlVHlwZSIsInNjYWxlQ2xhc3MiLCJtZXJnZVRpY2tzT3B0aW9ucyIsImhhc1VwZGF0ZWQiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsImRlc3Ryb3lEYXRhc2V0TWV0YSIsIm9yZGVyIiwiQ29udHJvbGxlckNsYXNzIiwicmVzZXRFbGVtZW50cyIsIm5ld09wdGlvbnMiLCJ1cGRhdGVMYXlvdXQiLCJ1cGRhdGVEYXRhc2V0cyIsImxhc3RBY3RpdmUiLCJfYnVmZmVyZWRSZXF1ZXN0IiwiX2lkeCIsInVwZGF0ZURhdGFzZXQiLCJhbmltYXRpb25PcHRpb25zIiwiYW5pbWF0aW9uT2JqZWN0IiwiZWFzaW5nRnVuY3Rpb24iLCJzdGVwRGVjaW1hbCIsImxheWVycyIsImRyYXdEYXRhc2V0cyIsIl9kcmF3VG9vbHRpcCIsIl9nZXRTb3J0ZWREYXRhc2V0TWV0YXMiLCJmaWx0ZXJWaXNpYmxlIiwiZHJhd0RhdGFzZXQiLCJnZXRFbGVtZW50QXRFdmVudCIsImdldEVsZW1lbnRzQXRFdmVudCIsImdldEVsZW1lbnRzQXRYQXhpcyIsImdldERhdGFzZXRBdEV2ZW50IiwiX21ldGEiLCJnZW5lcmF0ZUxlZ2VuZCIsInVuYmluZEV2ZW50cyIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJfY2hhcnRJbnN0YW5jZSIsIl9saXN0ZW5lcnMiLCJldmVudEhhbmRsZXIiLCJ1cGRhdGVIb3ZlclN0eWxlIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY29yZV9jb250cm9sbGVyIiwiQ29udHJvbGxlciIsInR5cGVzIiwiY29uZmlnTWVyZ2UiLCJzY2FsZU1lcmdlIiwiYWJzdHJhY3QiLCJEYXRlQWRhcHRlciIsImZvcm1hdHMiLCJwYXJzZSIsImZvcm1hdCIsInN0YXJ0T2YiLCJlbmRPZiIsIl9jcmVhdGUiLCJvdmVycmlkZSIsIm1lbWJlcnMiLCJjb3JlX2FkYXB0ZXJzIiwiX2RhdGUiLCJjb3JlX3RpY2tzIiwiZm9ybWF0dGVycyIsInRpY2tWYWx1ZSIsImxvZ0RlbHRhIiwidGlja1N0cmluZyIsImxvZ1RpY2siLCJudW1FeHBvbmVudGlhbCIsInRvRXhwb25lbnRpYWwiLCJudW1EZWNpbWFsIiwidG9GaXhlZCIsImxvZ2FyaXRobWljIiwicmVtYWluIiwidmFsdWVPckRlZmF1bHQkYSIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiY29tcHV0ZUxhYmVsU2l6ZXMiLCJ0aWNrRm9udHMiLCJjYWNoZXMiLCJ0aWNrRm9udCIsIm5lc3RlZExhYmVsIiwid2lkZXN0IiwiaGlnaGVzdCIsIndpZHRocyIsImhlaWdodHMiLCJvZmZzZXRzIiwibWFqb3IiLCJtaW5vciIsImdjIiwidmFsdWVBdCIsImdjTGVuIiwiZmlyc3QiLCJnZXRUaWNrTWFya0xlbmd0aCIsImRyYXdUaWNrcyIsInRpY2tNYXJrTGVuZ3RoIiwiZ2V0U2NhbGVMYWJlbEhlaWdodCIsInBhcnNlRm9udE9wdGlvbnMiLCJuZXN0ZWRPcHRzIiwiZm9udENvbG9yIiwicGFyc2VUaWNrRm9udE9wdGlvbnMiLCJub25Ta2lwcGVkIiwidGlja3NUb0ZpbHRlciIsImZpbHRlcmVkIiwiY2FsY3VsYXRlU3BhY2luZyIsIm1ham9ySW5kaWNlcyIsImF4aXNMZW5ndGgiLCJ0aWNrc0xpbWl0IiwiZmFjdG9ycyIsImZhY3RvciIsImV2ZW5NYWpvclNwYWNpbmciLCJhcnIiLCJnZXRFdmVuU3BhY2luZyIsInNwYWNpbmciLCJtYWpvclN0YXJ0IiwibWFqb3JFbmQiLCJ0aWNrIiwiY2VpbCIsImRyYXdPbkNoYXJ0QXJlYSIsInplcm9MaW5lV2lkdGgiLCJ6ZXJvTGluZUNvbG9yIiwiemVyb0xpbmVCb3JkZXJEYXNoIiwiemVyb0xpbmVCb3JkZXJEYXNoT2Zmc2V0Iiwic2NhbGVMYWJlbCIsImxhYmVsU3RyaW5nIiwibWluUm90YXRpb24iLCJtYXhSb3RhdGlvbiIsIm1pcnJvciIsImF1dG9Ta2lwIiwiYXV0b1NraXBQYWRkaW5nIiwibGFiZWxPZmZzZXQiLCJTY2FsZSIsInplcm9MaW5lSW5kZXgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwiX3RpY2tzIiwiX2dldExhYmVscyIsInhMYWJlbHMiLCJ5TGFiZWxzIiwiYmVmb3JlVXBkYXRlIiwibWFyZ2lucyIsInNhbXBsaW5nRW5hYmxlZCIsInNhbXBsZVNpemUiLCJfbGFiZWxTaXplcyIsIl9tYXhMYWJlbExpbmVzIiwibG9uZ2VzdExhYmVsV2lkdGgiLCJsb25nZXN0VGV4dENhY2hlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsImJlZm9yZVNldERpbWVuc2lvbnMiLCJzZXREaW1lbnNpb25zIiwiYWZ0ZXJTZXREaW1lbnNpb25zIiwiYmVmb3JlRGF0YUxpbWl0cyIsImRldGVybWluZURhdGFMaW1pdHMiLCJhZnRlckRhdGFMaW1pdHMiLCJiZWZvcmVCdWlsZFRpY2tzIiwiYnVpbGRUaWNrcyIsImFmdGVyQnVpbGRUaWNrcyIsIl9jb252ZXJ0VGlja3NUb0xhYmVscyIsIm51bUl0ZW1zIiwiaW5jcmVtZW50Iiwic2FtcGxlIiwiYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uIiwiY2FsY3VsYXRlVGlja1JvdGF0aW9uIiwiYWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb24iLCJiZWZvcmVGaXQiLCJmaXQiLCJhZnRlckZpdCIsIl90aWNrc1RvRHJhdyIsIl9hdXRvU2tpcCIsImFmdGVyVXBkYXRlIiwic3RhcnRQaXhlbCIsImVuZFBpeGVsIiwicmV2ZXJzZVBpeGVscyIsIl9yZXZlcnNlUGl4ZWxzIiwiYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uIiwiY29udmVydFRpY2tzVG9MYWJlbHMiLCJ1c2VyQ2FsbGJhY2siLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImxhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwibWF4TGFiZWxIZWlnaHQiLCJ0aWNrV2lkdGgiLCJtYXhMYWJlbERpYWdvbmFsIiwibnVtVGlja3MiLCJsYWJlbFJvdGF0aW9uIiwiX2lzVmlzaWJsZSIsIl9nZXRMYWJlbFNpemVzIiwidG9EZWdyZWVzIiwic2NhbGVMYWJlbE9wdHMiLCJncmlkTGluZU9wdHMiLCJpc0JvdHRvbSIsImZpcnN0TGFiZWxTaXplIiwibGFzdExhYmVsU2l6ZSIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJsaW5lU3BhY2UiLCJ0aWNrUGFkZGluZyIsImlzUm90YXRlZCIsImFuZ2xlUmFkaWFucyIsInRvUmFkaWFucyIsImNvc1JvdGF0aW9uIiwic2luUm90YXRpb24iLCJsYWJlbEhlaWdodCIsIm9mZnNldExlZnQiLCJvZmZzZXRSaWdodCIsImxhYmVsV2lkdGgiLCJoYW5kbGVNYXJnaW5zIiwiaXNGdWxsV2lkdGgiLCJyYXdWYWx1ZSIsIl9nZXRTY2FsZUxhYmVsIiwiZ2V0VmFsdWVGb3JQaXhlbCIsImRlY2ltYWwiLCJnZXREZWNpbWFsRm9yUGl4ZWwiLCJwaXhlbCIsImdldEJhc2VWYWx1ZSIsImF2Z01ham9yU3BhY2luZyIsIm1heFRpY2tzTGltaXQiLCJfdGlja1NpemUiLCJnZXRNYWpvckluZGljZXMiLCJudW1NYWpvckluZGljZXMiLCJza2lwTWFqb3JzIiwib3B0aW9uVGlja3MiLCJyb3QiLCJfY29tcHV0ZUdyaWRMaW5lSXRlbXMiLCJhbGlnbkJvcmRlclZhbHVlIiwiYWxpZ25QaXhlbCIsImF4aXNXaWR0aCIsImJvcmRlclZhbHVlIiwiYWxpZ25lZExpbmVWYWx1ZSIsInR4MSIsInR5MSIsInR4MiIsInR5MiIsImxpbmVDb2xvciIsInRpY2tzTGVuZ3RoIiwidGwiLCJheGlzSGFsZldpZHRoIiwiX2FsaWduUGl4ZWwiLCJfY29tcHV0ZUxhYmVsSXRlbXMiLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiaXNNaXJyb3JlZCIsImZvbnRzIiwiX2RyYXdHcmlkIiwiZmlyc3RMaW5lV2lkdGgiLCJsYXN0TGluZVdpZHRoIiwiX2RyYXdMYWJlbHMiLCJfZHJhd1RpdGxlIiwic2NhbGVMYWJlbFgiLCJzY2FsZUxhYmVsWSIsInNjYWxlTGFiZWxGb250Q29sb3IiLCJzY2FsZUxhYmVsRm9udCIsInNjYWxlTGFiZWxQYWRkaW5nIiwiaGFsZkxpbmVIZWlnaHQiLCJpc0xlZnQiLCJ0eiIsImd6IiwiX2RyYXciLCJjb3JlX3NjYWxlIiwiaXNOdWxsT3JVbmRlZiQxIiwic2NhbGVfY2F0ZWdvcnkiLCJ0aWNrc09wdHMiLCJtaW5JbmRleCIsIm1heEluZGV4IiwiX3N0YXJ0VmFsdWUiLCJfdmFsdWVSYW5nZSIsInZhbHVlQ2F0ZWdvcnkiLCJfZGVmYXVsdHMiLCJpc051bGxPclVuZGVmJDIiLCJzY2FsZV9saW5lYXJiYXNlIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsIm1pblNpZ24iLCJzaWduIiwibWF4U2lnbiIsInNldE1pbiIsInN1Z2dlc3RlZE1pbiIsInNldE1heCIsInN1Z2dlc3RlZE1heCIsImdldFRpY2tMaW1pdCIsIm1heFRpY2tzIiwic3RlcFNpemUiLCJfY29tcHV0ZVRpY2tMaW1pdCIsImhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlcyIsIm51bWVyaWNHZW5lcmF0b3JPcHRpb25zIiwicHJlY2lzaW9uIiwiZml4ZWRTdGVwU2l6ZSIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwibmljZU1pbiIsIm5pY2VNYXgiLCJudW1TcGFjZXMiLCJ1bml0IiwibWF4TnVtU3BhY2VzIiwicm1pbiIsInJtYXgiLCJuaWNlTnVtIiwiX2RlY2ltYWxQbGFjZXMiLCJhbG1vc3RXaG9sZSIsImFsbW9zdEVxdWFscyIsImdlbmVyYXRlVGlja3MiLCJ0aWNrc0FzTnVtYmVycyIsIl9lbmRWYWx1ZSIsImRlZmF1bHRDb25maWckMSIsInN0YWNrRGF0YSIsIm5lZyIsInJlbGF0aXZlUG9pbnRzIiwidXBkYXRlTWluTWF4Iiwic2NhbGVfbGluZWFyIiwiaGFzU3RhY2tzIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJzdGFja1ZhbHVlcyIsIl9kZWZhdWx0cyQxIiwidmFsdWVPckRlZmF1bHQkYiIsImRlZmF1bHRDb25maWckMiIsIm5vbk5lZ2F0aXZlT3JEZWZhdWx0Iiwic2NhbGVfbG9nYXJpdGhtaWMiLCJJRE1hdGNoZXMiLCJtaW5Ob3RaZXJvIiwidmFsdWVzUGVyU3RhY2siLCJ2YWx1ZXNGb3JUeXBlIiwibWluVmFsIiwibWF4VmFsIiwiZXhwIiwic2lnbmlmaWNhbmQiLCJ0aWNrVmFsIiwiZW5kRXhwIiwiZW5kU2lnbmlmaWNhbmQiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MkMSIsInRpY2tWYWx1ZXMiLCJfZ2V0Rmlyc3RUaWNrVmFsdWUiLCJfdmFsdWVPZmZzZXQiLCJfZGVmYXVsdHMkMiIsInZhbHVlT3JEZWZhdWx0JGMiLCJ2YWx1ZUF0SW5kZXhPckRlZmF1bHQkMSIsInJlc29sdmUkNCIsImRlZmF1bHRDb25maWckMyIsImFuaW1hdGUiLCJzaG93TGFiZWxCYWNrZHJvcCIsImJhY2tkcm9wQ29sb3IiLCJiYWNrZHJvcFBhZGRpbmdZIiwiYmFja2Ryb3BQYWRkaW5nWCIsImdldFRpY2tCYWNrZHJvcEhlaWdodCIsImRldGVybWluZUxpbWl0cyIsIm51bWJlck9yWmVybyIsInBhcmFtIiwic2NhbGVfcmFkaWFsTGluZWFyIiwiZHJhd2luZ0FyZWEiLCJ0ZXh0U2l6ZSIsInBsRm9udCIsImZ1cnRoZXN0TGltaXRzIiwiZnVydGhlc3RBbmdsZXMiLCJfcG9pbnRMYWJlbFNpemVzIiwidmFsdWVDb3VudCIsImdldFBvaW50UG9zaXRpb24iLCJsb25nZXN0VGV4dCIsImdldEluZGV4QW5nbGUiLCJoTGltaXRzIiwidkxpbWl0cyIsInNldFJlZHVjdGlvbnMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJzZXRDZW50ZXJQb2ludCIsImxhcmdlc3RQb3NzaWJsZVJhZGl1cyIsInJhZGl1c1JlZHVjdGlvbkxlZnQiLCJyYWRpdXNSZWR1Y3Rpb25SaWdodCIsInJhZGl1c1JlZHVjdGlvblRvcCIsInJhZGl1c1JlZHVjdGlvbkJvdHRvbSIsImxlZnRNb3ZlbWVudCIsInJpZ2h0TW92ZW1lbnQiLCJ0b3BNb3ZlbWVudCIsImJvdHRvbU1vdmVtZW50IiwibWF4UmlnaHQiLCJtYXhMZWZ0IiwibWF4VG9wIiwibWF4Qm90dG9tIiwic2NhbGluZ0ZhY3RvciIsImRpc3RhbmNlRnJvbUNlbnRlciIsInRoaXNBbmdsZSIsImdldEJhc2VQb3NpdGlvbiIsImFuZ2xlTGluZU9wdHMiLCJwb2ludExhYmVsT3B0cyIsInRpY2tCYWNrZHJvcEhlaWdodCIsIm91dGVyRGlzdGFuY2UiLCJleHRyYSIsInBvaW50TGFiZWxQb3NpdGlvbiIsInBvaW50TGFiZWxGb250Q29sb3IiLCJkcmF3UG9pbnRMYWJlbHMiLCJkcmF3UmFkaXVzTGluZSIsInRpY2tGb250Q29sb3IiLCJfZGVmYXVsdHMkMyIsImRlcHJlY2F0ZWQkMSIsInJlc29sdmUkNSIsInZhbHVlT3JEZWZhdWx0JGQiLCJNSU5fSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJNQVhfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInN0ZXBzIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInF1YXJ0ZXIiLCJ5ZWFyIiwiVU5JVFMiLCJzb3J0ZXIiLCJnZXRNaW4iLCJ0aW1lIiwiZ2V0TWF4IiwiaW50ZXJwb2xhdGUkMSIsInRhYmxlIiwic2tleSIsInRrZXkiLCJtaWQiLCJpMCIsImkxIiwibG8iLCJsb29rdXAiLCJzcGFuIiwidG9UaW1lc3RhbXAiLCJpbnB1dCIsImFkYXB0ZXIiLCJfYWRhcHRlciIsInBhcnNlciIsImRldGVybWluZVVuaXRGb3JBdXRvVGlja3MiLCJtaW5Vbml0IiwiY2FwYWNpdHkiLCJpbnRlcnZhbCIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwic2NhbGVfdGltZSIsImFkYXB0ZXJzIiwiZGF0ZSIsImRpc3BsYXlGb3JtYXRzIiwidGltZXN0YW1wIiwibGFiZWxzQWRkZWQiLCJ0aW1lc3RhbXBzIiwiZGF0YUxhYmVscyIsImhhc2giLCJvdXQiLCJhcnJheVVuaXF1ZSIsIl90YWJsZSIsIl90aW1lc3RhbXBzIiwidGltZU9wdHMiLCJnZXRMYWJlbENhcGFjaXR5IiwiZGlzdHJpYnV0aW9uIiwidW5pdFN0ZXBTaXplIiwid2Vla2RheSIsImlzb1dlZWtkYXkiLCJnZW5lcmF0ZSIsIl91bml0IiwiZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmciLCJfbWFqb3JVbml0IiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiYnVpbGRMb29rdXBUYWJsZSIsIl9vZmZzZXRzIiwidG9vbHRpcEZvcm1hdCIsImRhdGV0aW1lIiwidGlja0Zvcm1hdEZ1bmN0aW9uIiwibWlub3JGb3JtYXQiLCJtYWpvckZvcm1hdCIsIm5lc3RlZFRpY2tPcHRzIiwiZm9ybWF0dGVyIiwiZ2V0UGl4ZWxGb3JPZmZzZXQiLCJfZ2V0TGFiZWxTaXplIiwidGlja0xhYmVsV2lkdGgiLCJ0aWNrRm9udFNpemUiLCJnZXRMYWJlbFdpZHRoIiwiZXhhbXBsZVRpbWUiLCJleGFtcGxlTGFiZWwiLCJfZGVmYXVsdHMkNCIsImRpc3BsYXlGb3JtYXQiLCJjYXRlZ29yeSIsInJhZGlhbExpbmVhciIsIkZPUk1BVFMiLCJfaWQiLCJ2YWx1ZU9mIiwiYW1vdW50IiwiZmlsbGVyIiwicHJvcGFnYXRlIiwibWFwcGVycyIsImJvdW5kYXJ5IiwiZGVjb2RlRmlsbCIsImNvbXB1dGVCb3VuZGFyeSIsImN4IiwiY3kiLCJzY2FsZUJvdHRvbSIsInNjYWxlVG9wIiwic2NhbGVaZXJvIiwicmVzb2x2ZVRhcmdldCIsInZpc2l0ZWQiLCJ2aXNpYmxlIiwiaXNEcmF3YWJsZSIsImRyYXdBcmVhIiwiY3VydmUwIiwiY3VydmUxIiwibGVuMCIsImxlbjEiLCJkb0ZpbGwiLCJtYXBwZXIiLCJsb29wIiwicDAiLCJwMSIsImQwIiwiZDEiLCJsb29wT2Zmc2V0IiwicGx1Z2luX2ZpbGxlciIsImFmdGVyRGF0YXNldHNVcGRhdGUiLCIkZmlsbGVyIiwiYmVmb3JlRGF0YXNldHNEcmF3IiwiZ2V0UnRsSGVscGVyJDEiLCJub29wJDEiLCJ2YWx1ZU9yRGVmYXVsdCRlIiwiZ2V0Qm94V2lkdGgiLCJsYWJlbE9wdHMiLCJ1c2VQb2ludFN0eWxlIiwiYm94V2lkdGgiLCJjaSIsIm9uTGVhdmUiLCJsaW5lRGFzaCIsIkxlZ2VuZCIsImxlZ2VuZEhpdEJveGVzIiwiX2hvdmVyZWRJdGVtIiwiZG91Z2hudXRNb2RlIiwiYmVmb3JlQnVpbGRMYWJlbHMiLCJidWlsZExhYmVscyIsImFmdGVyQnVpbGRMYWJlbHMiLCJsZWdlbmRJdGVtcyIsImxhYmVsRm9udCIsImhpdGJveGVzIiwibGluZVdpZHRocyIsInRvdGFsSGVpZ2h0IiwidlBhZGRpbmciLCJjb2x1bW5XaWR0aHMiLCJjb2x1bW5IZWlnaHRzIiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJsaW5lRGVmYXVsdCIsImxlZ2VuZEhlaWdodCIsImxlZ2VuZFdpZHRoIiwiY3Vyc29yIiwiYWxpZ25tZW50T2Zmc2V0IiwiZGltZW5zaW9uIiwiYmxvY2tTaXplIiwiaXRlbUhlaWdodCIsInRleHRXaWR0aCIsImhhbGZGb250U2l6ZSIsInhMZWZ0IiwieU1pZGRsZSIsInJlYWxYIiwiU1FSVDIiLCJkcmF3TGVnZW5kQm94IiwiX2dldExlZ2VuZEl0ZW1BdCIsImhpdEJveCIsImxoIiwiaG92ZXJlZEl0ZW0iLCJjcmVhdGVOZXdMZWdlbmRBbmRBdHRhY2giLCJsZWdlbmRPcHRzIiwicGx1Z2luX2xlZ2VuZCIsIl9lbGVtZW50IiwiYmVmb3JlSW5pdCIsImFmdGVyRXZlbnQiLCJub29wJDIiLCJUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsImZvbnRPcHRzIiwiY3JlYXRlTmV3VGl0bGVCbG9ja0FuZEF0dGFjaCIsInRpdGxlT3B0cyIsInRpdGxlQmxvY2siLCJwYXJzZU1heFN0eWxlIiwic3R5bGVWYWx1ZSIsInBhcmVudFByb3BlcnR5IiwidmFsdWVJblBpeGVscyIsImlzQ29uc3RyYWluZWRWYWx1ZSIsImdldENvbnN0cmFpbnREaW1lbnNpb24iLCJkb21Ob2RlIiwibWF4U3R5bGUiLCJwZXJjZW50YWdlUHJvcGVydHkiLCJkZWZhdWx0VmlldyIsIl9nZXRQYXJlbnROb2RlIiwiY29uc3RyYWluZWROb2RlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbnN0cmFpbmVkQ29udGFpbmVyIiwiaGFzQ05vZGUiLCJoYXNDQ29udGFpbmVyIiwiaW5maW5pdHkiLCJjb2xsZWN0aW9uIiwiZmlsdGVyQ2FsbGJhY2siLCJmaW5kTmV4dFdoZXJlIiwiYXJyYXlUb1NlYXJjaCIsInN0YXJ0SW5kZXgiLCJjdXJyZW50SXRlbSIsImZpbmRQcmV2aW91c1doZXJlIiwiZXBzaWxvbiIsInJvdW5kZWQiLCJyYWRpYW5zIiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJhbGlhc1BpeGVsIiwicGl4ZWxXaWR0aCIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiaGFsZldpZHRoIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsImQwMSIsImQxMiIsInMwMSIsInMxMiIsImZhIiwiZmIiLCJFUFNJTE9OIiwicG9pbnRCZWZvcmUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwiYWxwaGFLIiwiYmV0YUsiLCJ0YXVLIiwic3F1YXJlZE1hZ25pdHVkZSIsInBvaW50c1dpdGhUYW5nZW50cyIsImRlbHRhSyIsIm1LIiwicG9pbnRzTGVuIiwic2xvcGVEZWx0YVgiLCJmcmFjdGlvbiIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJldnQiLCJvcmlnaW5hbEV2ZW50Iiwic3JjRWxlbWVudCIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsImdldENvbnN0cmFpbnRXaWR0aCIsImdldENvbnN0cmFpbnRIZWlnaHQiLCJfY2FsY3VsYXRlUGFkZGluZyIsInBhcmVudERpbWVuc2lvbiIsImN3IiwiY2xpZW50SGVpZ2h0IiwiY2giLCJjdXJyZW50U3R5bGUiLCJmb3JjZVJhdGlvIiwicGl4ZWxSYXRpbyIsInBpeGVsU2l6ZSIsImFycmF5T2ZUaGluZ3MiLCJnYXJiYWdlQ29sbGVjdCIsInRoaW5nIiwibmVzdGVkVGhpbmciLCJsb25nZXN0IiwibnVtYmVyT2ZMYWJlbExpbmVzIiwibnVtYmVyT2ZMaW5lcyIsIkNhbnZhc0dyYWRpZW50IiwiY29sb3JWYWx1ZSIsIkNhbnZhc1BhdHRlcm4iLCJfYWRhcHRlcnMiLCJBbmltYXRpb24iLCJhbmltYXRpb25TZXJ2aWNlIiwiSW50ZXJhY3Rpb24iLCJzY2FsZVNlcnZpY2UiLCJUaWNrcyIsIlRvb2x0aXAiLCJwbHVnaW5TZXJ2aWNlIiwiUGx1Z2luQmFzZSIsImNhbnZhc0hlbHBlcnMiLCJsYXlvdXRTZXJ2aWNlIiwiTGluZWFyU2NhbGVCYXNlIiwia2xhc3MiLCJjZmciLCJ0b0xvd2VyQ2FzZSIsIkdsaWRlIiwic3RhcnRBdCIsInBlclZpZXciLCJmb2N1c0F0IiwiZ2FwIiwiYXV0b3BsYXkiLCJob3ZlcnBhdXNlIiwia2V5Ym9hcmQiLCJib3VuZCIsInN3aXBlVGhyZXNob2xkIiwiZHJhZ1RocmVzaG9sZCIsInBlclRvdWNoIiwidG91Y2hSYXRpbyIsInRvdWNoQW5nbGUiLCJyZXdpbmQiLCJyZXdpbmREdXJhdGlvbiIsImFuaW1hdGlvblRpbWluZ0Z1bmMiLCJ0aHJvdHRsZSIsInBlZWsiLCJicmVha3BvaW50cyIsImNsYXNzZXMiLCJsdHIiLCJzbGlkZXIiLCJjYXJvdXNlbCIsInN3aXBlYWJsZSIsImRyYWdnaW5nIiwiY2xvbmVTbGlkZSIsImFjdGl2ZU5hdiIsImFjdGl2ZVNsaWRlIiwiZGlzYWJsZWRBcnJvdyIsIm1zZyIsImNsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiZGVmaW5lUHJvcGVydGllcyIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJ0b0ludCIsImlzU3RyaW5nIiwiaXNGdW5jdGlvbiIsImlzVW5kZWZpbmVkIiwiZGVmaW5pdGlvbiIsIm1lcmdlT3B0aW9ucyIsInNldHRpbmdzIiwiRXZlbnRzQnVzIiwib24iLCJob3AiLCJlbWl0IiwiX2UiLCJfYyIsImdsaWRlIiwiY29tcG9uZW50cyIsIl9uYW1lIiwibW91bnQiLCJ0cmFuc2Zvcm1lcnMiLCJfdCIsInBhdHRlcm4iLCJSdW4iLCJtYWtlIiwiVHJhbnNpdGlvbiIsImRpc2FibGUiLCJNb3ZlIiwiZGlzYWJsZWQiLCJfbyIsIm8iLCJfaSIsIl9kIiwic3RhdHVzIiwic2VsZWN0b3IiLCJnZXRUaW1lIiwiZnVuYyIsIndhaXQiLCJ0aW1lb3V0IiwibGF0ZXIiLCJsZWFkaW5nIiwidGhyb3R0bGVkIiwiYXQiLCJyZW1haW5pbmciLCJjbGVhclRpbWVvdXQiLCJ0cmFpbGluZyIsImNhbmNlbCIsIk1BUkdJTl9UWVBFIiwic2libGluZ3MiLCJtYXRjaGVkIiwibmV4dFNpYmxpbmciLCJub2RlVHlwZSIsImV4aXN0IiwiSFRNTEVsZW1lbnQiLCJUUkFDS19TRUxFQ1RPUiIsIkV2ZW50c0JpbmRlciIsImNsb3N1cmUiLCJjYXB0dXJlIiwiVkFMSURfRElSRUNUSU9OUyIsIkZMSVBFRF9NT1ZFTUVOVFMiLCI+IiwiPCIsIj0iLCJSdGwiLCJDb21wb25lbnRzIiwibW9kaWZ5IiwiRGlyZWN0aW9uIiwiaXMiLCJtdXRhdG9yIiwiRXZlbnRzIiwiVFJBTlNGT1JNRVJTIiwiR2FwcyIsIkNsb25lcyIsImdyb3ciLCJQZWVrIiwiU2l6ZXMiLCJzbGlkZVdpZHRoIiwibXV0YXRlIiwidHJhbnNmb3JtZXIiLCJzdXBwb3J0c1Bhc3NpdmUiLCJzdXBwb3J0c1Bhc3NpdmUkMSIsIlNUQVJUX0VWRU5UUyIsIk1PVkVfRVZFTlRTIiwiRU5EX0VWRU5UUyIsIk1PVVNFX0VWRU5UUyIsInNvcnRCcmVha3BvaW50cyIsIkNPTVBPTkVOVFMiLCJIdG1sIiwidHJhY2siLCJxdWVyeVNlbGVjdG9yIiwic2xpZGVzIiwid3JhcHBlciIsImNoaWxkcmVuIiwic2xpZGUiLCJjb250YWlucyIsIl9yIiwiVHJhbnNsYXRlIiwidHJhbnNmb3JtIiwiaXNUeXBlIiwiaXNPZmZzZXQiLCJtb3ZlbWVudCIsImNvbXBvc2UiLCJlbmFibGUiLCJ0b2tlbiIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJfdiIsInNldHVwU2xpZGVzIiwic2V0dXBXcmFwcGVyIiwid3JhcHBlclNpemUiLCJvZmZzZXRXaWR0aCIsInJlZHVjdG9yIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiX3RoaXMiLCJjb2xsZWN0IiwiX0dsaWRlJHNldHRpbmdzIiwicGFydCIsImNsb25lTm9kZSIsIl9jbG9uZSIsImFwcGVuZCIsIl9Db21wb25lbnRzJEh0bWwiLCJwcmVwZW5kIiwiX2kyIiwiX2kzIiwiUmVzaXplIiwiQmluZGVyIiwidW5iaW5kIiwib2ZmIiwiQnVpbGQiLCJ0eXBlQ2xhc3MiLCJhY3RpdmVDbGFzcyIsInNpYmxpbmciLCJyZW1vdmVDbGFzc2VzIiwibW92ZSIsImNhbGN1bGF0ZSIsImlzU3RhcnQiLCJpc0VuZCIsImNvdW50YWJsZVN0ZXBzIiwiX20iLCJzdGVwIiwiU3dpcGUiLCJzd2lwZVNpbiIsInN3aXBlU3RhcnRYIiwic3dpcGVTdGFydFkiLCJiaW5kU3dpcGVTdGFydCIsInN3aXBlIiwicGFnZVgiLCJwYWdlWSIsImJpbmRTd2lwZU1vdmUiLCJiaW5kU3dpcGVFbmQiLCJzdWJFeFN4Iiwic3ViRXlTeSIsInBvd0VYIiwicG93RVkiLCJzd2lwZUh5cG90ZW51c2UiLCJzd2lwZUNhdGhldHVzIiwic3RvcFByb3BhZ2F0aW9uIiwidGhyZXNob2xkIiwic3dpcGVEaXN0YW5jZSIsInN3aXBlRGVnIiwidW5iaW5kU3dpcGVNb3ZlIiwidW5iaW5kU3dpcGVFbmQiLCJ1bmJpbmRTd2lwZVN0YXJ0IiwiX3RoaXMyIiwiX3RoaXMzIiwiY2hhbmdlZFRvdWNoZXMiLCJJbWFnZXMiLCJkcmFnc3RhcnQiLCJwcmV2ZW50RGVmYXVsdCIsIkFuY2hvcnMiLCJkZXRhY2hlZCIsInByZXZlbnRlZCIsIl9hIiwicXVlcnlTZWxlY3RvckFsbCIsImNsaWNrIiwiZGV0YWNoIiwiZHJhZ2dhYmxlIiwiYXR0YWNoIiwiQ29udHJvbHMiLCJfbiIsImFkZEJpbmRpbmdzIiwic2V0QWN0aXZlIiwicmVtb3ZlQWN0aXZlIiwiY29udHJvbHMiLCJyZW1vdmVCaW5kaW5ncyIsImN1cnJlbnRUYXJnZXQiLCJLZXlib2FyZCIsInByZXNzIiwia2V5Q29kZSIsIkF1dG9wbGF5Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiQnJlYWtwb2ludHMiLCJtYXRjaE1lZGlhIiwiR2xpZGUkJDEiLCJSZWZlcmVuY2VFcnJvciIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJnZXRQcm90b3R5cGVPZiIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsInNldFByb3RvdHlwZU9mIiwicmVjZWl2ZXIiLCJGdW5jdGlvbiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJjaGFydE9iamVjdCIsImNoYXJ0T2JqZWN0MSIsImNoYXJ0T2JqZWN0MiIsImNoYXJ0T2JqZWN0MyIsImNoYXJ0T2JqZWN0NCIsImNoYXJ0T2JqZWN0NSIsImNoYXJ0T2JqZWN0NiIsImNoYXJ0T2JqZWN0NyIsImNoYXJ0T2JqZWN0OCIsImNoYXJ0T2JqZWN0OSIsInJlZnJlc2hUaW1lIiwicmVwb3J0RGF5c0Rpc3BsYXkiLCJyZXBvcnREYXlzIiwiZ2V0RGF0YSIsInNoZWV0TmFtZSIsImRhdGVSYW5nZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25sb2FkIiwiSlNPTiIsInJlc3BvbnNlIiwiZGF0YXNldFRpdGxlIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCJvcGVuIiwic2VuZCIsImFkZENoYXJ0IiwicG9pbnRCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludEJvcmRlckNvbG9yIiwicG9pbnRSYWRpdXMiLCJpbm5lckhlaWdodCIsInVwZGF0ZUNoYXJ0Il0sIm1hcHBpbmdzIjoiQ0FNQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLG9CQUFBQyxPQUFBQSxPQUFBRCxRQUFBRCxFQUFBLFdBQUEsSUFBQSxPQUFBRyxRQUFBLFVBQUEsTUFBQUMsS0FBQSxJQUNBLG1CQUFBQyxRQUFBQSxPQUFBQyxJQUFBRCxPQUFBLENBQUEsV0FBQSxTQUFBRixHQUFBLE9BQUFILEVBQUEsV0FBQSxJQUFBLE9BQUFHLEVBQUEsVUFBQSxNQUFBQyxLQUFBLE9BQ0FMLEVBQUFBLEdBQUFRLE1BQUFDLE1BQUFSLEVBQUFELEVBQUFVLFFBSEEsQ0FJQUMsS0FBQSxTQUFBRCxHQUFBLGFBRUFBLEVBQUFBLEdBQUFBLEVBQUFFLGVBQUEsV0FBQUYsRUFBQSxRQUFBQSxFQVVBLElBUkFQLEVBUUFVLEVBQUEsQ0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxhQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsRUFBQSxFQUFBLEdBQ0FDLGVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLEVBQUEsRUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLGVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLEtBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsU0FBQSxDQUFBLEVBQUEsRUFBQSxLQUNBQyxTQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsRUFBQSxJQUFBLEdBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLGVBQUEsQ0FBQSxHQUFBLElBQUEsSUFDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxXQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLEVBQUEsR0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxhQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxHQUFBLEdBQUEsS0FDQUMsY0FBQSxDQUFBLEdBQUEsR0FBQSxJQUNBQyxjQUFBLENBQUEsR0FBQSxHQUFBLElBQ0FDLGNBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsRUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLFlBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxZQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxHQUFBLElBQUEsSUFDQUMsUUFBQSxDQUFBLElBQUEsRUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLEVBQUEsSUFBQSxHQUNBQyxZQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsT0FBQSxDQUFBLEdBQUEsRUFBQSxLQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsYUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxxQkFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxhQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxlQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLEVBQUEsSUFBQSxHQUNBQyxVQUFBLENBQUEsR0FBQSxJQUFBLElBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsRUFBQSxLQUNBQyxPQUFBLENBQUEsSUFBQSxFQUFBLEdBQ0FDLGlCQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxFQUFBLEVBQUEsS0FDQUMsYUFBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxhQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsZ0JBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsa0JBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsZ0JBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsZ0JBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsYUFBQSxDQUFBLEdBQUEsR0FBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxFQUFBLEVBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsT0FBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxVQUFBLENBQUEsSUFBQSxHQUFBLEdBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxPQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLGNBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsSUFBQSxDQUFBLElBQUEsRUFBQSxHQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsU0FBQSxDQUFBLEdBQUEsSUFBQSxJQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsT0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLElBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsVUFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxLQUdBQyxHQUFBLFNBQUEvSixHQVFBLElBQUFnSyxFQUFBLEdBQ0EsSUFBQSxJQUFBQyxLQUFBdkosRUFDQUEsRUFBQUQsZUFBQXdKLEtBQ0FELEVBQUF0SixFQUFBdUosSUFBQUEsR0FJQSxJQUFBQyxFQUFBbEssRUFBQUQsUUFBQSxDQUNBb0ssSUFBQSxDQUFBQyxTQUFBLEVBQUFDLE9BQUEsT0FDQUMsSUFBQSxDQUFBRixTQUFBLEVBQUFDLE9BQUEs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LElBQUEsSUFBQSxHQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsZUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsS0FBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsRUFBQSxFQUFBLEtBQ0FDLFNBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxFQUFBLElBQUEsR0FDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxJQUFBLEVBQUEsS0FDQUMsZUFBQSxDQUFBLEdBQUEsSUFBQSxJQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFdBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsRUFBQSxHQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLEdBQUEsR0FBQSxLQUNBQyxjQUFBLENBQUEsR0FBQSxHQUFBLElBQ0FDLGNBQUEsQ0FBQSxHQUFBLEdBQUEsSUFDQUMsY0FBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLFNBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsWUFBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLEdBQUEsSUFBQSxJQUNBQyxRQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsRUFBQSxJQUFBLEdBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxPQUFBLENBQUEsR0FBQSxFQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxhQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLHFCQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxlQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsRUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxHQUFBLElBQUEsSUFDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLEVBQUEsR0FDQUMsaUJBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLEVBQUEsRUFBQSxLQUNBQyxhQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxnQkFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxrQkFBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxnQkFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxnQkFBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxhQUFBLENBQUEsR0FBQSxHQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLEVBQUEsRUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLEdBQUEsR0FDQUMsT0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLEVBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxJQUFBLENBQUEsSUFBQSxFQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxTQUFBLENBQUEsR0FBQSxJQUFBLElBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsSUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxVQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxZQUFBLENBQUEsSUFBQSxJQUFBLEtBTUFnRyxFQUFBLENBQ0FrRCxRQUFBQSxFQUNBQyxRQUFBQSxFQUNBQyxPQXFIQSxTQUFBekQsR0FDQSxJQUFBMEQsRUFBQUgsRUFBQXZELEdBQ0EsT0FBQTBELEdBQUFBLEVBQUFiLE1BQUEsRUFBQSxJQXRIQWMsT0F5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ckQsR0FDQTZzRCxZQUFBOUIsYUFBQS9xRCxLQUdBd3JELFFBQUEsYUFBQUQsV0FBQSxTQUFBdnJELEdBQ0E2c0QsWUFBQTdCLGFBQUFockQsS0FHQXdyRCxRQUFBLE9BQUFELFdBQUEsU0FBQXZyRCxHQUNBNnNELFlBQUE1QixhQUFBanJELEtBR0F3ckQsUUFBQSxXQUFBRCxXQUFBLFNBQUF2ckQsR0FDQTZzRCxZQUFBM0IsYUFBQWxyRCxLQUdBd3JELFFBQUEsYUFBQUQsV0FBQSxTQUFBdnJELEdBQ0E2c0QsWUFBQTFCLGFBQUFuckQsS0FHQXdyRCxRQUFBLG1CQUFBRCxXQUFBLFNBQUF2ckQsR0FDQTZzRCxZQUFBekIsYUFBQXByRCxPQUlBLElBQUEyK0MsTUFBQSxJQUFBekQsTUFBQSxTQUFBLENBQ0FLLFNBQUEsSUFDQTdzQixrQkFBQSxJQUNBOHNCLFlBQUEsSUFHQW1ELE1BQUFHIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDaGFydC5qcyB2Mi45LjNcbiAqIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnXG4gKiAoYykgMjAxOSBDaGFydC5qcyBDb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xudHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGZ1bmN0aW9uKCkgeyB0cnkgeyByZXR1cm4gcmVxdWlyZSgnbW9tZW50Jyk7IH0gY2F0Y2goZSkgeyB9IH0oKSkgOlxudHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsncmVxdWlyZSddLCBmdW5jdGlvbihyZXF1aXJlKSB7IHJldHVybiBmYWN0b3J5KGZ1bmN0aW9uKCkgeyB0cnkgeyByZXR1cm4gcmVxdWlyZSgnbW9tZW50Jyk7IH0gY2F0Y2goZSkgeyB9IH0oKSk7IH0pIDpcbihnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLkNoYXJ0ID0gZmFjdG9yeShnbG9iYWwubW9tZW50KSk7XG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxubW9tZW50ID0gbW9tZW50ICYmIG1vbWVudC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gbW9tZW50WydkZWZhdWx0J10gOiBtb21lbnQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBnZXRDanNFeHBvcnRGcm9tTmFtZXNwYWNlIChuKSB7XG5cdHJldHVybiBuICYmIG5bJ2RlZmF1bHQnXSB8fCBuO1xufVxuXG52YXIgY29sb3JOYW1lID0ge1xyXG5cdFwiYWxpY2VibHVlXCI6IFsyNDAsIDI0OCwgMjU1XSxcclxuXHRcImFudGlxdWV3aGl0ZVwiOiBbMjUwLCAyMzUsIDIxNV0sXHJcblx0XCJhcXVhXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJhcXVhbWFyaW5lXCI6IFsxMjcsIDI1NSwgMjEyXSxcclxuXHRcImF6dXJlXCI6IFsyNDAsIDI1NSwgMjU1XSxcclxuXHRcImJlaWdlXCI6IFsyNDUsIDI0NSwgMjIwXSxcclxuXHRcImJpc3F1ZVwiOiBbMjU1LCAyMjgsIDE5Nl0sXHJcblx0XCJibGFja1wiOiBbMCwgMCwgMF0sXHJcblx0XCJibGFuY2hlZGFsbW9uZFwiOiBbMjU1LCAyMzUsIDIwNV0sXHJcblx0XCJibHVlXCI6IFswLCAwLCAyNTVdLFxyXG5cdFwiYmx1ZXZpb2xldFwiOiBbMTM4LCA0MywgMjI2XSxcclxuXHRcImJyb3duXCI6IFsxNjUsIDQyLCA0Ml0sXHJcblx0XCJidXJseXdvb2RcIjogWzIyMiwgMTg0LCAxMzVdLFxyXG5cdFwiY2FkZXRibHVlXCI6IFs5NSwgMTU4LCAxNjBdLFxyXG5cdFwiY2hhcnRyZXVzZVwiOiBbMTI3LCAyNTUsIDBdLFxyXG5cdFwiY2hvY29sYXRlXCI6IFsyMTAsIDEwNSwgMzBdLFxyXG5cdFwiY29yYWxcIjogWzI1NSwgMTI3LCA4MF0sXHJcblx0XCJjb3JuZmxvd2VyYmx1ZVwiOiBbMTAwLCAxNDksIDIzN10sXHJcblx0XCJjb3Juc2lsa1wiOiBbMjU1LCAyNDgsIDIyMF0sXHJcblx0XCJjcmltc29uXCI6IFsyMjAsIDIwLCA2MF0sXHJcblx0XCJjeWFuXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJkYXJrYmx1ZVwiOiBbMCwgMCwgMTM5XSxcclxuXHRcImRhcmtjeWFuXCI6IFswLCAxMzksIDEzOV0sXHJcblx0XCJkYXJrZ29sZGVucm9kXCI6IFsxODQsIDEzNCwgMTFdLFxyXG5cdFwiZGFya2dyYXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2dyZWVuXCI6IFswLCAxMDAsIDBdLFxyXG5cdFwiZGFya2dyZXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2toYWtpXCI6IFsxODksIDE4MywgMTA3XSxcclxuXHRcImRhcmttYWdlbnRhXCI6IFsxMzksIDAsIDEzOV0sXHJcblx0XCJkYXJrb2xpdmVncmVlblwiOiBbODUsIDEwNywgNDddLFxyXG5cdFwiZGFya29yYW5nZVwiOiBbMjU1LCAxNDAsIDBdLFxyXG5cdFwiZGFya29yY2hpZFwiOiBbMTUzLCA1MCwgMjA0XSxcclxuXHRcImRhcmtyZWRcIjogWzEzOSwgMCwgMF0sXHJcblx0XCJkYXJrc2FsbW9uXCI6IFsyMzMsIDE1MCwgMTIyXSxcclxuXHRcImRhcmtzZWFncmVlblwiOiBbMTQzLCAxODgsIDE0M10sXHJcblx0XCJkYXJrc2xhdGVibHVlXCI6IFs3MiwgNjEsIDEzOV0sXHJcblx0XCJkYXJrc2xhdGVncmF5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmtzbGF0ZWdyZXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3R1cnF1b2lzZVwiOiBbMCwgMjA2LCAyMDldLFxyXG5cdFwiZGFya3Zpb2xldFwiOiBbMTQ4LCAwLCAyMTFdLFxyXG5cdFwiZGVlcHBpbmtcIjogWzI1NSwgMjAsIDE0N10sXHJcblx0XCJkZWVwc2t5Ymx1ZVwiOiBbMCwgMTkxLCAyNTVdLFxyXG5cdFwiZGltZ3JheVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkaW1ncmV5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRvZGdlcmJsdWVcIjogWzMwLCAxNDQsIDI1NV0sXHJcblx0XCJmaXJlYnJpY2tcIjogWzE3OCwgMzQsIDM0XSxcclxuXHRcImZsb3JhbHdoaXRlXCI6IFsyNTUsIDI1MCwgMjQwXSxcclxuXHRcImZvcmVzdGdyZWVuXCI6IFszNCwgMTM5LCAzNF0sXHJcblx0XCJmdWNoc2lhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJnYWluc2Jvcm9cIjogWzIyMCwgMjIwLCAyMjBdLFxyXG5cdFwiZ2hvc3R3aGl0ZVwiOiBbMjQ4LCAyNDgsIDI1NV0sXHJcblx0XCJnb2xkXCI6IFsyNTUsIDIxNSwgMF0sXHJcblx0XCJnb2xkZW5yb2RcIjogWzIxOCwgMTY1LCAzMl0sXHJcblx0XCJncmF5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImdyZWVuXCI6IFswLCAxMjgsIDBdLFxyXG5cdFwiZ3JlZW55ZWxsb3dcIjogWzE3MywgMjU1LCA0N10sXHJcblx0XCJncmV5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImhvbmV5ZGV3XCI6IFsyNDAsIDI1NSwgMjQwXSxcclxuXHRcImhvdHBpbmtcIjogWzI1NSwgMTA1LCAxODBdLFxyXG5cdFwiaW5kaWFucmVkXCI6IFsyMDUsIDkyLCA5Ml0sXHJcblx0XCJpbmRpZ29cIjogWzc1LCAwLCAxMzBdLFxyXG5cdFwiaXZvcnlcIjogWzI1NSwgMjU1LCAyNDBdLFxyXG5cdFwia2hha2lcIjogWzI0MCwgMjMwLCAxNDBdLFxyXG5cdFwibGF2ZW5kZXJcIjogWzIzMCwgMjMwLCAyNTBdLFxyXG5cdFwibGF2ZW5kZXJibHVzaFwiOiBbMjU1LCAyNDAsIDI0NV0sXHJcblx0XCJsYXduZ3JlZW5cIjogWzEyNCwgMjUyLCAwXSxcclxuXHRcImxlbW9uY2hpZmZvblwiOiBbMjU1LCAyNTAsIDIwNV0sXHJcblx0XCJsaWdodGJsdWVcIjogWzE3MywgMjE2LCAyMzBdLFxyXG5cdFwibGlnaHRjb3JhbFwiOiBbMjQwLCAxMjgsIDEyOF0sXHJcblx0XCJsaWdodGN5YW5cIjogWzIyNCwgMjU1LCAyNTVdLFxyXG5cdFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjogWzI1MCwgMjUwLCAyMTBdLFxyXG5cdFwibGlnaHRncmF5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0Z3JlZW5cIjogWzE0NCwgMjM4LCAxNDRdLFxyXG5cdFwibGlnaHRncmV5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0cGlua1wiOiBbMjU1LCAxODIsIDE5M10sXHJcblx0XCJsaWdodHNhbG1vblwiOiBbMjU1LCAxNjAsIDEyMl0sXHJcblx0XCJsaWdodHNlYWdyZWVuXCI6IFszMiwgMTc4LCAxNzBdLFxyXG5cdFwibGlnaHRza3libHVlXCI6IFsxMzUsIDIwNiwgMjUwXSxcclxuXHRcImxpZ2h0c2xhdGVncmF5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c2xhdGVncmV5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c3RlZWxibHVlXCI6IFsxNzYsIDE5NiwgMjIyXSxcclxuXHRcImxpZ2h0eWVsbG93XCI6IFsyNTUsIDI1NSwgMjI0XSxcclxuXHRcImxpbWVcIjogWzAsIDI1NSwgMF0sXHJcblx0XCJsaW1lZ3JlZW5cIjogWzUwLCAyMDUsIDUwXSxcclxuXHRcImxpbmVuXCI6IFsyNTAsIDI0MCwgMjMwXSxcclxuXHRcIm1hZ2VudGFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcIm1hcm9vblwiOiBbMTI4LCAwLCAwXSxcclxuXHRcIm1lZGl1bWFxdWFtYXJpbmVcIjogWzEwMiwgMjA1LCAxNzBdLFxyXG5cdFwibWVkaXVtYmx1ZVwiOiBbMCwgMCwgMjA1XSxcclxuXHRcIm1lZGl1bW9yY2hpZFwiOiBbMTg2LCA4NSwgMjExXSxcclxuXHRcIm1lZGl1bXB1cnBsZVwiOiBbMTQ3LCAxMTIsIDIxOV0sXHJcblx0XCJtZWRpdW1zZWFncmVlblwiOiBbNjAsIDE3OSwgMTEzXSxcclxuXHRcIm1lZGl1bXNsYXRlYmx1ZVwiOiBbMTIzLCAxMDQsIDIzOF0sXHJcblx0XCJtZWRpdW1zcHJpbmdncmVlblwiOiBbMCwgMjUwLCAxNTRdLFxyXG5cdFwibWVkaXVtdHVycXVvaXNlXCI6IFs3MiwgMjA5LCAyMDRdLFxyXG5cdFwibWVkaXVtdmlvbGV0cmVkXCI6IFsxOTksIDIxLCAxMzNdLFxyXG5cdFwibWlkbmlnaHRibHVlXCI6IFsyNSwgMjUsIDExMl0sXHJcblx0XCJtaW50Y3JlYW1cIjogWzI0NSwgMjU1LCAyNTBdLFxyXG5cdFwibWlzdHlyb3NlXCI6IFsyNTUsIDIyOCwgMjI1XSxcclxuXHRcIm1vY2Nhc2luXCI6IFsyNTUsIDIyOCwgMTgxXSxcclxuXHRcIm5hdmFqb3doaXRlXCI6IFsyNTUsIDIyMiwgMTczXSxcclxuXHRcIm5hdnlcIjogWzAsIDAsIDEyOF0sXHJcblx0XCJvbGRsYWNlXCI6IFsyNTMsIDI0NSwgMjMwXSxcclxuXHRcIm9saXZlXCI6IFsxMjgsIDEyOCwgMF0sXHJcblx0XCJvbGl2ZWRyYWJcIjogWzEwNywgMTQyLCAzNV0sXHJcblx0XCJvcmFuZ2VcIjogWzI1NSwgMTY1LCAwXSxcclxuXHRcIm9yYW5nZXJlZFwiOiBbMjU1LCA2OSwgMF0sXHJcblx0XCJvcmNoaWRcIjogWzIxOCwgMTEyLCAyMTRdLFxyXG5cdFwicGFsZWdvbGRlbnJvZFwiOiBbMjM4LCAyMzIsIDE3MF0sXHJcblx0XCJwYWxlZ3JlZW5cIjogWzE1MiwgMjUxLCAxNTJdLFxyXG5cdFwicGFsZXR1cnF1b2lzZVwiOiBbMTc1LCAyMzgsIDIzOF0sXHJcblx0XCJwYWxldmlvbGV0cmVkXCI6IFsyMTksIDExMiwgMTQ3XSxcclxuXHRcInBhcGF5YXdoaXBcIjogWzI1NSwgMjM5LCAyMTNdLFxyXG5cdFwicGVhY2hwdWZmXCI6IFsyNTUsIDIxOCwgMTg1XSxcclxuXHRcInBlcnVcIjogWzIwNSwgMTMzLCA2M10sXHJcblx0XCJwaW5rXCI6IFsyNTUsIDE5MiwgMjAzXSxcclxuXHRcInBsdW1cIjogWzIyMSwgMTYwLCAyMjFdLFxyXG5cdFwicG93ZGVyYmx1ZVwiOiBbMTc2LCAyMjQsIDIzMF0sXHJcblx0XCJwdXJwbGVcIjogWzEyOCwgMCwgMTI4XSxcclxuXHRcInJlYmVjY2FwdXJwbGVcIjogWzEwMiwgNTEsIDE1M10sXHJcblx0XCJyZWRcIjogWzI1NSwgMCwgMF0sXHJcblx0XCJyb3N5YnJvd25cIjogWzE4OCwgMTQzLCAxNDNdLFxyXG5cdFwicm95YWxibHVlXCI6IFs2NSwgMTA1LCAyMjVdLFxyXG5cdFwic2FkZGxlYnJvd25cIjogWzEzOSwgNjksIDE5XSxcclxuXHRcInNhbG1vblwiOiBbMjUwLCAxMjgsIDExNF0sXHJcblx0XCJzYW5keWJyb3duXCI6IFsyNDQsIDE2NCwgOTZdLFxyXG5cdFwic2VhZ3JlZW5cIjogWzQ2LCAxMzksIDg3XSxcclxuXHRcInNlYXNoZWxsXCI6IFsyNTUsIDI0NSwgMjM4XSxcclxuXHRcInNpZW5uYVwiOiBbMTYwLCA4MiwgNDVdLFxyXG5cdFwic2lsdmVyXCI6IFsxOTIsIDE5MiwgMTkyXSxcclxuXHRcInNreWJsdWVcIjogWzEzNSwgMjA2LCAyMzVdLFxyXG5cdFwic2xhdGVibHVlXCI6IFsxMDYsIDkwLCAyMDVdLFxyXG5cdFwic2xhdGVncmF5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNsYXRlZ3JleVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbm93XCI6IFsyNTUsIDI1MCwgMjUwXSxcclxuXHRcInNwcmluZ2dyZWVuXCI6IFswLCAyNTUsIDEyN10sXHJcblx0XCJzdGVlbGJsdWVcIjogWzcwLCAxMzAsIDE4MF0sXHJcblx0XCJ0YW5cIjogWzIxMCwgMTgwLCAxNDBdLFxyXG5cdFwidGVhbFwiOiBbMCwgMTI4LCAxMjhdLFxyXG5cdFwidGhpc3RsZVwiOiBbMjE2LCAxOTEsIDIxNl0sXHJcblx0XCJ0b21hdG9cIjogWzI1NSwgOTksIDcxXSxcclxuXHRcInR1cnF1b2lzZVwiOiBbNjQsIDIyNCwgMjA4XSxcclxuXHRcInZpb2xldFwiOiBbMjM4LCAxMzAsIDIzOF0sXHJcblx0XCJ3aGVhdFwiOiBbMjQ1LCAyMjIsIDE3OV0sXHJcblx0XCJ3aGl0ZVwiOiBbMjU1LCAyNTUsIDI1NV0sXHJcblx0XCJ3aGl0ZXNtb2tlXCI6IFsyNDUsIDI0NSwgMjQ1XSxcclxuXHRcInllbGxvd1wiOiBbMjU1LCAyNTUsIDBdLFxyXG5cdFwieWVsbG93Z3JlZW5cIjogWzE1NCwgMjA1LCA1MF1cclxufTtcblxudmFyIGNvbnZlcnNpb25zID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuLyogTUlUIGxpY2Vuc2UgKi9cblxuXG4vLyBOT1RFOiBjb252ZXJzaW9ucyBzaG91bGQgb25seSByZXR1cm4gcHJpbWl0aXZlIHZhbHVlcyAoaS5lLiBhcnJheXMsIG9yXG4vLyAgICAgICB2YWx1ZXMgdGhhdCBnaXZlIGNvcnJlY3QgYHR5cGVvZmAgcmVzdWx0cykuXG4vLyAgICAgICBkbyBub3QgdXNlIGJveCB2YWx1ZXMgdHlwZXMgKGkuZS4gTnVtYmVyKCksIFN0cmluZygpLCBldGMuKVxuXG52YXIgcmV2ZXJzZUtleXdvcmRzID0ge307XG5mb3IgKHZhciBrZXkgaW4gY29sb3JOYW1lKSB7XG5cdGlmIChjb2xvck5hbWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdHJldmVyc2VLZXl3b3Jkc1tjb2xvck5hbWVba2V5XV0gPSBrZXk7XG5cdH1cbn1cblxudmFyIGNvbnZlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IHtcblx0cmdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3JnYid9LFxuXHRoc2w6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHNsJ30sXG5cdGhzdjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc3YnfSxcblx0aHdiOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2h3Yid9LFxuXHRjbXlrOiB7Y2hhbm5lbHM6IDQsIGxhYmVsczogJ2NteWsnfSxcblx0eHl6OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ3h5eid9LFxuXHRsYWI6IHtjaGFubmVsczogMywgbGFiZWxzOiAnbGFiJ30sXG5cdGxjaDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsY2gnfSxcblx0aGV4OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydoZXgnXX0sXG5cdGtleXdvcmQ6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2tleXdvcmQnXX0sXG5cdGFuc2kxNjoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnYW5zaTE2J119LFxuXHRhbnNpMjU2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMjU2J119LFxuXHRoY2c6IHtjaGFubmVsczogMywgbGFiZWxzOiBbJ2gnLCAnYycsICdnJ119LFxuXHRhcHBsZToge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsncjE2JywgJ2cxNicsICdiMTYnXX0sXG5cdGdyYXk6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2dyYXknXX1cbn07XG5cbi8vIGhpZGUgLmNoYW5uZWxzIGFuZCAubGFiZWxzIHByb3BlcnRpZXNcbmZvciAodmFyIG1vZGVsIGluIGNvbnZlcnQpIHtcblx0aWYgKGNvbnZlcnQuaGFzT3duUHJvcGVydHkobW9kZWwpKSB7XG5cdFx0aWYgKCEoJ2NoYW5uZWxzJyBpbiBjb252ZXJ0W21vZGVsXSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0XHR9XG5cblx0XHRpZiAoISgnbGFiZWxzJyBpbiBjb252ZXJ0W21vZGVsXSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignbWlzc2luZyBjaGFubmVsIGxhYmVscyBwcm9wZXJ0eTogJyArIG1vZGVsKTtcblx0XHR9XG5cblx0XHRpZiAoY29udmVydFttb2RlbF0ubGFiZWxzLmxlbmd0aCAhPT0gY29udmVydFttb2RlbF0uY2hhbm5lbHMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignY2hhbm5lbCBhbmQgbGFiZWwgY291bnRzIG1pc21hdGNoOiAnICsgbW9kZWwpO1xuXHRcdH1cblxuXHRcdHZhciBjaGFubmVscyA9IGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuXHRcdHZhciBsYWJlbHMgPSBjb252ZXJ0W21vZGVsXS5sYWJlbHM7XG5cdFx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuXHRcdGRlbGV0ZSBjb252ZXJ0W21vZGVsXS5sYWJlbHM7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNoYW5uZWxzfSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBsYWJlbHN9KTtcblx0fVxufVxuXG5jb252ZXJ0LnJnYi5oc2wgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcblx0dmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHR2YXIgZGVsdGEgPSBtYXggLSBtaW47XG5cdHZhciBoO1xuXHR2YXIgcztcblx0dmFyIGw7XG5cblx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0aCA9IDA7XG5cdH0gZWxzZSBpZiAociA9PT0gbWF4KSB7XG5cdFx0aCA9IChnIC0gYikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChnID09PSBtYXgpIHtcblx0XHRoID0gMiArIChiIC0gcikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChiID09PSBtYXgpIHtcblx0XHRoID0gNCArIChyIC0gZykgLyBkZWx0YTtcblx0fVxuXG5cdGggPSBNYXRoLm1pbihoICogNjAsIDM2MCk7XG5cblx0aWYgKGggPCAwKSB7XG5cdFx0aCArPSAzNjA7XG5cdH1cblxuXHRsID0gKG1pbiArIG1heCkgLyAyO1xuXG5cdGlmIChtYXggPT09IG1pbikge1xuXHRcdHMgPSAwO1xuXHR9IGVsc2UgaWYgKGwgPD0gMC41KSB7XG5cdFx0cyA9IGRlbHRhIC8gKG1heCArIG1pbik7XG5cdH0gZWxzZSB7XG5cdFx0cyA9IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pO1xuXHR9XG5cblx0cmV0dXJuIFtoLCBzICogMTAwLCBsICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmhzdiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHJkaWY7XG5cdHZhciBnZGlmO1xuXHR2YXIgYmRpZjtcblx0dmFyIGg7XG5cdHZhciBzO1xuXG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciB2ID0gTWF0aC5tYXgociwgZywgYik7XG5cdHZhciBkaWZmID0gdiAtIE1hdGgubWluKHIsIGcsIGIpO1xuXHR2YXIgZGlmZmMgPSBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiAodiAtIGMpIC8gNiAvIGRpZmYgKyAxIC8gMjtcblx0fTtcblxuXHRpZiAoZGlmZiA9PT0gMCkge1xuXHRcdGggPSBzID0gMDtcblx0fSBlbHNlIHtcblx0XHRzID0gZGlmZiAvIHY7XG5cdFx0cmRpZiA9IGRpZmZjKHIpO1xuXHRcdGdkaWYgPSBkaWZmYyhnKTtcblx0XHRiZGlmID0gZGlmZmMoYik7XG5cblx0XHRpZiAociA9PT0gdikge1xuXHRcdFx0aCA9IGJkaWYgLSBnZGlmO1xuXHRcdH0gZWxzZSBpZiAoZyA9PT0gdikge1xuXHRcdFx0aCA9ICgxIC8gMykgKyByZGlmIC0gYmRpZjtcblx0XHR9IGVsc2UgaWYgKGIgPT09IHYpIHtcblx0XHRcdGggPSAoMiAvIDMpICsgZ2RpZiAtIHJkaWY7XG5cdFx0fVxuXHRcdGlmIChoIDwgMCkge1xuXHRcdFx0aCArPSAxO1xuXHRcdH0gZWxzZSBpZiAoaCA+IDEpIHtcblx0XHRcdGggLT0gMTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gW1xuXHRcdGggKiAzNjAsXG5cdFx0cyAqIDEwMCxcblx0XHR2ICogMTAwXG5cdF07XG59O1xuXG5jb252ZXJ0LnJnYi5od2IgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdO1xuXHR2YXIgZyA9IHJnYlsxXTtcblx0dmFyIGIgPSByZ2JbMl07XG5cdHZhciBoID0gY29udmVydC5yZ2IuaHNsKHJnYilbMF07XG5cdHZhciB3ID0gMSAvIDI1NSAqIE1hdGgubWluKHIsIE1hdGgubWluKGcsIGIpKTtcblxuXHRiID0gMSAtIDEgLyAyNTUgKiBNYXRoLm1heChyLCBNYXRoLm1heChnLCBiKSk7XG5cblx0cmV0dXJuIFtoLCB3ICogMTAwLCBiICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmNteWsgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBjO1xuXHR2YXIgbTtcblx0dmFyIHk7XG5cdHZhciBrO1xuXG5cdGsgPSBNYXRoLm1pbigxIC0gciwgMSAtIGcsIDEgLSBiKTtcblx0YyA9ICgxIC0gciAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXHRtID0gKDEgLSBnIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdHkgPSAoMSAtIGIgLSBrKSAvICgxIC0gaykgfHwgMDtcblxuXHRyZXR1cm4gW2MgKiAxMDAsIG0gKiAxMDAsIHkgKiAxMDAsIGsgKiAxMDBdO1xufTtcblxuLyoqXG4gKiBTZWUgaHR0cHM6Ly9lbi5tLndpa2lwZWRpYS5vcmcvd2lraS9FdWNsaWRlYW5fZGlzdGFuY2UjU3F1YXJlZF9FdWNsaWRlYW5fZGlzdGFuY2VcbiAqICovXG5mdW5jdGlvbiBjb21wYXJhdGl2ZURpc3RhbmNlKHgsIHkpIHtcblx0cmV0dXJuIChcblx0XHRNYXRoLnBvdyh4WzBdIC0geVswXSwgMikgK1xuXHRcdE1hdGgucG93KHhbMV0gLSB5WzFdLCAyKSArXG5cdFx0TWF0aC5wb3coeFsyXSAtIHlbMl0sIDIpXG5cdCk7XG59XG5cbmNvbnZlcnQucmdiLmtleXdvcmQgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByZXZlcnNlZCA9IHJldmVyc2VLZXl3b3Jkc1tyZ2JdO1xuXHRpZiAocmV2ZXJzZWQpIHtcblx0XHRyZXR1cm4gcmV2ZXJzZWQ7XG5cdH1cblxuXHR2YXIgY3VycmVudENsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuXHR2YXIgY3VycmVudENsb3Nlc3RLZXl3b3JkO1xuXG5cdGZvciAodmFyIGtleXdvcmQgaW4gY29sb3JOYW1lKSB7XG5cdFx0aWYgKGNvbG9yTmFtZS5oYXNPd25Qcm9wZXJ0eShrZXl3b3JkKSkge1xuXHRcdFx0dmFyIHZhbHVlID0gY29sb3JOYW1lW2tleXdvcmRdO1xuXG5cdFx0XHQvLyBDb21wdXRlIGNvbXBhcmF0aXZlIGRpc3RhbmNlXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBjb21wYXJhdGl2ZURpc3RhbmNlKHJnYiwgdmFsdWUpO1xuXG5cdFx0XHQvLyBDaGVjayBpZiBpdHMgbGVzcywgaWYgc28gc2V0IGFzIGNsb3Nlc3Rcblx0XHRcdGlmIChkaXN0YW5jZSA8IGN1cnJlbnRDbG9zZXN0RGlzdGFuY2UpIHtcblx0XHRcdFx0Y3VycmVudENsb3Nlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuXHRcdFx0XHRjdXJyZW50Q2xvc2VzdEtleXdvcmQgPSBrZXl3b3JkO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjdXJyZW50Q2xvc2VzdEtleXdvcmQ7XG59O1xuXG5jb252ZXJ0LmtleXdvcmQucmdiID0gZnVuY3Rpb24gKGtleXdvcmQpIHtcblx0cmV0dXJuIGNvbG9yTmFtZVtrZXl3b3JkXTtcbn07XG5cbmNvbnZlcnQucmdiLnh5eiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHIgPSByZ2JbMF0gLyAyNTU7XG5cdHZhciBnID0gcmdiWzFdIC8gMjU1O1xuXHR2YXIgYiA9IHJnYlsyXSAvIDI1NTtcblxuXHQvLyBhc3N1bWUgc1JHQlxuXHRyID0gciA+IDAuMDQwNDUgPyBNYXRoLnBvdygoKHIgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCkgOiAociAvIDEyLjkyKTtcblx0ZyA9IGcgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKChnICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogKGcgLyAxMi45Mik7XG5cdGIgPSBiID4gMC4wNDA0NSA/IE1hdGgucG93KCgoYiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KSA6IChiIC8gMTIuOTIpO1xuXG5cdHZhciB4ID0gKHIgKiAwLjQxMjQpICsgKGcgKiAwLjM1NzYpICsgKGIgKiAwLjE4MDUpO1xuXHR2YXIgeSA9IChyICogMC4yMTI2KSArIChnICogMC43MTUyKSArIChiICogMC4wNzIyKTtcblx0dmFyIHogPSAociAqIDAuMDE5MykgKyAoZyAqIDAuMTE5MikgKyAoYiAqIDAuOTUwNSk7XG5cblx0cmV0dXJuIFt4ICogMTAwLCB5ICogMTAwLCB6ICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmxhYiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHh5eiA9IGNvbnZlcnQucmdiLnh5eihyZ2IpO1xuXHR2YXIgeCA9IHh5elswXTtcblx0dmFyIHkgPSB4eXpbMV07XG5cdHZhciB6ID0geHl6WzJdO1xuXHR2YXIgbDtcblx0dmFyIGE7XG5cdHZhciBiO1xuXG5cdHggLz0gOTUuMDQ3O1xuXHR5IC89IDEwMDtcblx0eiAvPSAxMDguODgzO1xuXG5cdHggPSB4ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiAoNy43ODcgKiB4KSArICgxNiAvIDExNik7XG5cdHkgPSB5ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh5LCAxIC8gMykgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh6LCAxIC8gMykgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cblx0bCA9ICgxMTYgKiB5KSAtIDE2O1xuXHRhID0gNTAwICogKHggLSB5KTtcblx0YiA9IDIwMCAqICh5IC0geik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQuaHNsLnJnYiA9IGZ1bmN0aW9uIChoc2wpIHtcblx0dmFyIGggPSBoc2xbMF0gLyAzNjA7XG5cdHZhciBzID0gaHNsWzFdIC8gMTAwO1xuXHR2YXIgbCA9IGhzbFsyXSAvIDEwMDtcblx0dmFyIHQxO1xuXHR2YXIgdDI7XG5cdHZhciB0Mztcblx0dmFyIHJnYjtcblx0dmFyIHZhbDtcblxuXHRpZiAocyA9PT0gMCkge1xuXHRcdHZhbCA9IGwgKiAyNTU7XG5cdFx0cmV0dXJuIFt2YWwsIHZhbCwgdmFsXTtcblx0fVxuXG5cdGlmIChsIDwgMC41KSB7XG5cdFx0dDIgPSBsICogKDEgKyBzKTtcblx0fSBlbHNlIHtcblx0XHR0MiA9IGwgKyBzIC0gbCAqIHM7XG5cdH1cblxuXHR0MSA9IDIgKiBsIC0gdDI7XG5cblx0cmdiID0gWzAsIDAsIDBdO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdHQzID0gaCArIDEgLyAzICogLShpIC0gMSk7XG5cdFx0aWYgKHQzIDwgMCkge1xuXHRcdFx0dDMrKztcblx0XHR9XG5cdFx0aWYgKHQzID4gMSkge1xuXHRcdFx0dDMtLTtcblx0XHR9XG5cblx0XHRpZiAoNiAqIHQzIDwgMSkge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiA2ICogdDM7XG5cdFx0fSBlbHNlIGlmICgyICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0Mjtcblx0XHR9IGVsc2UgaWYgKDMgKiB0MyA8IDIpIHtcblx0XHRcdHZhbCA9IHQxICsgKHQyIC0gdDEpICogKDIgLyAzIC0gdDMpICogNjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsID0gdDE7XG5cdFx0fVxuXG5cdFx0cmdiW2ldID0gdmFsICogMjU1O1xuXHR9XG5cblx0cmV0dXJuIHJnYjtcbn07XG5cbmNvbnZlcnQuaHNsLmhzdiA9IGZ1bmN0aW9uIChoc2wpIHtcblx0dmFyIGggPSBoc2xbMF07XG5cdHZhciBzID0gaHNsWzFdIC8gMTAwO1xuXHR2YXIgbCA9IGhzbFsyXSAvIDEwMDtcblx0dmFyIHNtaW4gPSBzO1xuXHR2YXIgbG1pbiA9IE1hdGgubWF4KGwsIDAuMDEpO1xuXHR2YXIgc3Y7XG5cdHZhciB2O1xuXG5cdGwgKj0gMjtcblx0cyAqPSAobCA8PSAxKSA/IGwgOiAyIC0gbDtcblx0c21pbiAqPSBsbWluIDw9IDEgPyBsbWluIDogMiAtIGxtaW47XG5cdHYgPSAobCArIHMpIC8gMjtcblx0c3YgPSBsID09PSAwID8gKDIgKiBzbWluKSAvIChsbWluICsgc21pbikgOiAoMiAqIHMpIC8gKGwgKyBzKTtcblxuXHRyZXR1cm4gW2gsIHN2ICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHN2LnJnYiA9IGZ1bmN0aW9uIChoc3YpIHtcblx0dmFyIGggPSBoc3ZbMF0gLyA2MDtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXHR2YXIgaGkgPSBNYXRoLmZsb29yKGgpICUgNjtcblxuXHR2YXIgZiA9IGggLSBNYXRoLmZsb29yKGgpO1xuXHR2YXIgcCA9IDI1NSAqIHYgKiAoMSAtIHMpO1xuXHR2YXIgcSA9IDI1NSAqIHYgKiAoMSAtIChzICogZikpO1xuXHR2YXIgdCA9IDI1NSAqIHYgKiAoMSAtIChzICogKDEgLSBmKSkpO1xuXHR2ICo9IDI1NTtcblxuXHRzd2l0Y2ggKGhpKSB7XG5cdFx0Y2FzZSAwOlxuXHRcdFx0cmV0dXJuIFt2LCB0LCBwXTtcblx0XHRjYXNlIDE6XG5cdFx0XHRyZXR1cm4gW3EsIHYsIHBdO1xuXHRcdGNhc2UgMjpcblx0XHRcdHJldHVybiBbcCwgdiwgdF07XG5cdFx0Y2FzZSAzOlxuXHRcdFx0cmV0dXJuIFtwLCBxLCB2XTtcblx0XHRjYXNlIDQ6XG5cdFx0XHRyZXR1cm4gW3QsIHAsIHZdO1xuXHRcdGNhc2UgNTpcblx0XHRcdHJldHVybiBbdiwgcCwgcV07XG5cdH1cbn07XG5cbmNvbnZlcnQuaHN2LmhzbCA9IGZ1bmN0aW9uIChoc3YpIHtcblx0dmFyIGggPSBoc3ZbMF07XG5cdHZhciBzID0gaHN2WzFdIC8gMTAwO1xuXHR2YXIgdiA9IGhzdlsyXSAvIDEwMDtcblx0dmFyIHZtaW4gPSBNYXRoLm1heCh2LCAwLjAxKTtcblx0dmFyIGxtaW47XG5cdHZhciBzbDtcblx0dmFyIGw7XG5cblx0bCA9ICgyIC0gcykgKiB2O1xuXHRsbWluID0gKDIgLSBzKSAqIHZtaW47XG5cdHNsID0gcyAqIHZtaW47XG5cdHNsIC89IChsbWluIDw9IDEpID8gbG1pbiA6IDIgLSBsbWluO1xuXHRzbCA9IHNsIHx8IDA7XG5cdGwgLz0gMjtcblxuXHRyZXR1cm4gW2gsIHNsICogMTAwLCBsICogMTAwXTtcbn07XG5cbi8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1jb2xvci8jaHdiLXRvLXJnYlxuY29udmVydC5od2IucmdiID0gZnVuY3Rpb24gKGh3Yikge1xuXHR2YXIgaCA9IGh3YlswXSAvIDM2MDtcblx0dmFyIHdoID0gaHdiWzFdIC8gMTAwO1xuXHR2YXIgYmwgPSBod2JbMl0gLyAxMDA7XG5cdHZhciByYXRpbyA9IHdoICsgYmw7XG5cdHZhciBpO1xuXHR2YXIgdjtcblx0dmFyIGY7XG5cdHZhciBuO1xuXG5cdC8vIHdoICsgYmwgY2FudCBiZSA+IDFcblx0aWYgKHJhdGlvID4gMSkge1xuXHRcdHdoIC89IHJhdGlvO1xuXHRcdGJsIC89IHJhdGlvO1xuXHR9XG5cblx0aSA9IE1hdGguZmxvb3IoNiAqIGgpO1xuXHR2ID0gMSAtIGJsO1xuXHRmID0gNiAqIGggLSBpO1xuXG5cdGlmICgoaSAmIDB4MDEpICE9PSAwKSB7XG5cdFx0ZiA9IDEgLSBmO1xuXHR9XG5cblx0biA9IHdoICsgZiAqICh2IC0gd2gpOyAvLyBsaW5lYXIgaW50ZXJwb2xhdGlvblxuXG5cdHZhciByO1xuXHR2YXIgZztcblx0dmFyIGI7XG5cdHN3aXRjaCAoaSkge1xuXHRcdGRlZmF1bHQ6XG5cdFx0Y2FzZSA2OlxuXHRcdGNhc2UgMDogciA9IHY7IGcgPSBuOyBiID0gd2g7IGJyZWFrO1xuXHRcdGNhc2UgMTogciA9IG47IGcgPSB2OyBiID0gd2g7IGJyZWFrO1xuXHRcdGNhc2UgMjogciA9IHdoOyBnID0gdjsgYiA9IG47IGJyZWFrO1xuXHRcdGNhc2UgMzogciA9IHdoOyBnID0gbjsgYiA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgNDogciA9IG47IGcgPSB3aDsgYiA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgNTogciA9IHY7IGcgPSB3aDsgYiA9IG47IGJyZWFrO1xuXHR9XG5cblx0cmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn07XG5cbmNvbnZlcnQuY215ay5yZ2IgPSBmdW5jdGlvbiAoY215aykge1xuXHR2YXIgYyA9IGNteWtbMF0gLyAxMDA7XG5cdHZhciBtID0gY215a1sxXSAvIDEwMDtcblx0dmFyIHkgPSBjbXlrWzJdIC8gMTAwO1xuXHR2YXIgayA9IGNteWtbM10gLyAxMDA7XG5cdHZhciByO1xuXHR2YXIgZztcblx0dmFyIGI7XG5cblx0ciA9IDEgLSBNYXRoLm1pbigxLCBjICogKDEgLSBrKSArIGspO1xuXHRnID0gMSAtIE1hdGgubWluKDEsIG0gKiAoMSAtIGspICsgayk7XG5cdGIgPSAxIC0gTWF0aC5taW4oMSwgeSAqICgxIC0gaykgKyBrKTtcblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC54eXoucmdiID0gZnVuY3Rpb24gKHh5eikge1xuXHR2YXIgeCA9IHh5elswXSAvIDEwMDtcblx0dmFyIHkgPSB4eXpbMV0gLyAxMDA7XG5cdHZhciB6ID0geHl6WzJdIC8gMTAwO1xuXHR2YXIgcjtcblx0dmFyIGc7XG5cdHZhciBiO1xuXG5cdHIgPSAoeCAqIDMuMjQwNikgKyAoeSAqIC0xLjUzNzIpICsgKHogKiAtMC40OTg2KTtcblx0ZyA9ICh4ICogLTAuOTY4OSkgKyAoeSAqIDEuODc1OCkgKyAoeiAqIDAuMDQxNSk7XG5cdGIgPSAoeCAqIDAuMDU1NykgKyAoeSAqIC0wLjIwNDApICsgKHogKiAxLjA1NzApO1xuXG5cdC8vIGFzc3VtZSBzUkdCXG5cdHIgPSByID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogTWF0aC5wb3cociwgMS4wIC8gMi40KSkgLSAwLjA1NSlcblx0XHQ6IHIgKiAxMi45MjtcblxuXHRnID0gZyA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIE1hdGgucG93KGcsIDEuMCAvIDIuNCkpIC0gMC4wNTUpXG5cdFx0OiBnICogMTIuOTI7XG5cblx0YiA9IGIgPiAwLjAwMzEzMDhcblx0XHQ/ICgoMS4wNTUgKiBNYXRoLnBvdyhiLCAxLjAgLyAyLjQpKSAtIDAuMDU1KVxuXHRcdDogYiAqIDEyLjkyO1xuXG5cdHIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCByKSwgMSk7XG5cdGcgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBnKSwgMSk7XG5cdGIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBiKSwgMSk7XG5cblx0cmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn07XG5cbmNvbnZlcnQueHl6LmxhYiA9IGZ1bmN0aW9uICh4eXopIHtcblx0dmFyIHggPSB4eXpbMF07XG5cdHZhciB5ID0geHl6WzFdO1xuXHR2YXIgeiA9IHh5elsyXTtcblx0dmFyIGw7XG5cdHZhciBhO1xuXHR2YXIgYjtcblxuXHR4IC89IDk1LjA0Nztcblx0eSAvPSAxMDA7XG5cdHogLz0gMTA4Ljg4MztcblxuXHR4ID0geCA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeCwgMSAvIDMpIDogKDcuNzg3ICogeCkgKyAoMTYgLyAxMTYpO1xuXHR5ID0geSA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeSwgMSAvIDMpIDogKDcuNzg3ICogeSkgKyAoMTYgLyAxMTYpO1xuXHR6ID0geiA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeiwgMSAvIDMpIDogKDcuNzg3ICogeikgKyAoMTYgLyAxMTYpO1xuXG5cdGwgPSAoMTE2ICogeSkgLSAxNjtcblx0YSA9IDUwMCAqICh4IC0geSk7XG5cdGIgPSAyMDAgKiAoeSAtIHopO1xuXG5cdHJldHVybiBbbCwgYSwgYl07XG59O1xuXG5jb252ZXJ0LmxhYi54eXogPSBmdW5jdGlvbiAobGFiKSB7XG5cdHZhciBsID0gbGFiWzBdO1xuXHR2YXIgYSA9IGxhYlsxXTtcblx0dmFyIGIgPSBsYWJbMl07XG5cdHZhciB4O1xuXHR2YXIgeTtcblx0dmFyIHo7XG5cblx0eSA9IChsICsgMTYpIC8gMTE2O1xuXHR4ID0gYSAvIDUwMCArIHk7XG5cdHogPSB5IC0gYiAvIDIwMDtcblxuXHR2YXIgeTIgPSBNYXRoLnBvdyh5LCAzKTtcblx0dmFyIHgyID0gTWF0aC5wb3coeCwgMyk7XG5cdHZhciB6MiA9IE1hdGgucG93KHosIDMpO1xuXHR5ID0geTIgPiAwLjAwODg1NiA/IHkyIDogKHkgLSAxNiAvIDExNikgLyA3Ljc4Nztcblx0eCA9IHgyID4gMC4wMDg4NTYgPyB4MiA6ICh4IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cdHogPSB6MiA+IDAuMDA4ODU2ID8gejIgOiAoeiAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXG5cdHggKj0gOTUuMDQ3O1xuXHR5ICo9IDEwMDtcblx0eiAqPSAxMDguODgzO1xuXG5cdHJldHVybiBbeCwgeSwgel07XG59O1xuXG5jb252ZXJ0LmxhYi5sY2ggPSBmdW5jdGlvbiAobGFiKSB7XG5cdHZhciBsID0gbGFiWzBdO1xuXHR2YXIgYSA9IGxhYlsxXTtcblx0dmFyIGIgPSBsYWJbMl07XG5cdHZhciBocjtcblx0dmFyIGg7XG5cdHZhciBjO1xuXG5cdGhyID0gTWF0aC5hdGFuMihiLCBhKTtcblx0aCA9IGhyICogMzYwIC8gMiAvIE1hdGguUEk7XG5cblx0aWYgKGggPCAwKSB7XG5cdFx0aCArPSAzNjA7XG5cdH1cblxuXHRjID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuXG5cdHJldHVybiBbbCwgYywgaF07XG59O1xuXG5jb252ZXJ0LmxjaC5sYWIgPSBmdW5jdGlvbiAobGNoKSB7XG5cdHZhciBsID0gbGNoWzBdO1xuXHR2YXIgYyA9IGxjaFsxXTtcblx0dmFyIGggPSBsY2hbMl07XG5cdHZhciBhO1xuXHR2YXIgYjtcblx0dmFyIGhyO1xuXG5cdGhyID0gaCAvIDM2MCAqIDIgKiBNYXRoLlBJO1xuXHRhID0gYyAqIE1hdGguY29zKGhyKTtcblx0YiA9IGMgKiBNYXRoLnNpbihocik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQucmdiLmFuc2kxNiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHZhciByID0gYXJnc1swXTtcblx0dmFyIGcgPSBhcmdzWzFdO1xuXHR2YXIgYiA9IGFyZ3NbMl07XG5cdHZhciB2YWx1ZSA9IDEgaW4gYXJndW1lbnRzID8gYXJndW1lbnRzWzFdIDogY29udmVydC5yZ2IuaHN2KGFyZ3MpWzJdOyAvLyBoc3YgLT4gYW5zaTE2IG9wdGltaXphdGlvblxuXG5cdHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAvIDUwKTtcblxuXHRpZiAodmFsdWUgPT09IDApIHtcblx0XHRyZXR1cm4gMzA7XG5cdH1cblxuXHR2YXIgYW5zaSA9IDMwXG5cdFx0KyAoKE1hdGgucm91bmQoYiAvIDI1NSkgPDwgMilcblx0XHR8IChNYXRoLnJvdW5kKGcgLyAyNTUpIDw8IDEpXG5cdFx0fCBNYXRoLnJvdW5kKHIgLyAyNTUpKTtcblxuXHRpZiAodmFsdWUgPT09IDIpIHtcblx0XHRhbnNpICs9IDYwO1xuXHR9XG5cblx0cmV0dXJuIGFuc2k7XG59O1xuXG5jb252ZXJ0Lmhzdi5hbnNpMTYgPSBmdW5jdGlvbiAoYXJncykge1xuXHQvLyBvcHRpbWl6YXRpb24gaGVyZTsgd2UgYWxyZWFkeSBrbm93IHRoZSB2YWx1ZSBhbmQgZG9uJ3QgbmVlZCB0byBnZXRcblx0Ly8gaXQgY29udmVydGVkIGZvciB1cy5cblx0cmV0dXJuIGNvbnZlcnQucmdiLmFuc2kxNihjb252ZXJ0Lmhzdi5yZ2IoYXJncyksIGFyZ3NbMl0pO1xufTtcblxuY29udmVydC5yZ2IuYW5zaTI1NiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHZhciByID0gYXJnc1swXTtcblx0dmFyIGcgPSBhcmdzWzFdO1xuXHR2YXIgYiA9IGFyZ3NbMl07XG5cblx0Ly8gd2UgdXNlIHRoZSBleHRlbmRlZCBncmV5c2NhbGUgcGFsZXR0ZSBoZXJlLCB3aXRoIHRoZSBleGNlcHRpb24gb2Zcblx0Ly8gYmxhY2sgYW5kIHdoaXRlLiBub3JtYWwgcGFsZXR0ZSBvbmx5IGhhcyA0IGdyZXlzY2FsZSBzaGFkZXMuXG5cdGlmIChyID09PSBnICYmIGcgPT09IGIpIHtcblx0XHRpZiAociA8IDgpIHtcblx0XHRcdHJldHVybiAxNjtcblx0XHR9XG5cblx0XHRpZiAociA+IDI0OCkge1xuXHRcdFx0cmV0dXJuIDIzMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gTWF0aC5yb3VuZCgoKHIgLSA4KSAvIDI0NykgKiAyNCkgKyAyMzI7XG5cdH1cblxuXHR2YXIgYW5zaSA9IDE2XG5cdFx0KyAoMzYgKiBNYXRoLnJvdW5kKHIgLyAyNTUgKiA1KSlcblx0XHQrICg2ICogTWF0aC5yb3VuZChnIC8gMjU1ICogNSkpXG5cdFx0KyBNYXRoLnJvdW5kKGIgLyAyNTUgKiA1KTtcblxuXHRyZXR1cm4gYW5zaTtcbn07XG5cbmNvbnZlcnQuYW5zaTE2LnJnYiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHZhciBjb2xvciA9IGFyZ3MgJSAxMDtcblxuXHQvLyBoYW5kbGUgZ3JleXNjYWxlXG5cdGlmIChjb2xvciA9PT0gMCB8fCBjb2xvciA9PT0gNykge1xuXHRcdGlmIChhcmdzID4gNTApIHtcblx0XHRcdGNvbG9yICs9IDMuNTtcblx0XHR9XG5cblx0XHRjb2xvciA9IGNvbG9yIC8gMTAuNSAqIDI1NTtcblxuXHRcdHJldHVybiBbY29sb3IsIGNvbG9yLCBjb2xvcl07XG5cdH1cblxuXHR2YXIgbXVsdCA9ICh+fihhcmdzID4gNTApICsgMSkgKiAwLjU7XG5cdHZhciByID0gKChjb2xvciAmIDEpICogbXVsdCkgKiAyNTU7XG5cdHZhciBnID0gKCgoY29sb3IgPj4gMSkgJiAxKSAqIG11bHQpICogMjU1O1xuXHR2YXIgYiA9ICgoKGNvbG9yID4+IDIpICYgMSkgKiBtdWx0KSAqIDI1NTtcblxuXHRyZXR1cm4gW3IsIGcsIGJdO1xufTtcblxuY29udmVydC5hbnNpMjU2LnJnYiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdC8vIGhhbmRsZSBncmV5c2NhbGVcblx0aWYgKGFyZ3MgPj0gMjMyKSB7XG5cdFx0dmFyIGMgPSAoYXJncyAtIDIzMikgKiAxMCArIDg7XG5cdFx0cmV0dXJuIFtjLCBjLCBjXTtcblx0fVxuXG5cdGFyZ3MgLT0gMTY7XG5cblx0dmFyIHJlbTtcblx0dmFyIHIgPSBNYXRoLmZsb29yKGFyZ3MgLyAzNikgLyA1ICogMjU1O1xuXHR2YXIgZyA9IE1hdGguZmxvb3IoKHJlbSA9IGFyZ3MgJSAzNikgLyA2KSAvIDUgKiAyNTU7XG5cdHZhciBiID0gKHJlbSAlIDYpIC8gNSAqIDI1NTtcblxuXHRyZXR1cm4gW3IsIGcsIGJdO1xufTtcblxuY29udmVydC5yZ2IuaGV4ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIGludGVnZXIgPSAoKE1hdGgucm91bmQoYXJnc1swXSkgJiAweEZGKSA8PCAxNilcblx0XHQrICgoTWF0aC5yb3VuZChhcmdzWzFdKSAmIDB4RkYpIDw8IDgpXG5cdFx0KyAoTWF0aC5yb3VuZChhcmdzWzJdKSAmIDB4RkYpO1xuXG5cdHZhciBzdHJpbmcgPSBpbnRlZ2VyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHRyZXR1cm4gJzAwMDAwMCcuc3Vic3RyaW5nKHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufTtcblxuY29udmVydC5oZXgucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIG1hdGNoID0gYXJncy50b1N0cmluZygxNikubWF0Y2goL1thLWYwLTldezZ9fFthLWYwLTldezN9L2kpO1xuXHRpZiAoIW1hdGNoKSB7XG5cdFx0cmV0dXJuIFswLCAwLCAwXTtcblx0fVxuXG5cdHZhciBjb2xvclN0cmluZyA9IG1hdGNoWzBdO1xuXG5cdGlmIChtYXRjaFswXS5sZW5ndGggPT09IDMpIHtcblx0XHRjb2xvclN0cmluZyA9IGNvbG9yU3RyaW5nLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGNoYXIpIHtcblx0XHRcdHJldHVybiBjaGFyICsgY2hhcjtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdHZhciBpbnRlZ2VyID0gcGFyc2VJbnQoY29sb3JTdHJpbmcsIDE2KTtcblx0dmFyIHIgPSAoaW50ZWdlciA+PiAxNikgJiAweEZGO1xuXHR2YXIgZyA9IChpbnRlZ2VyID4+IDgpICYgMHhGRjtcblx0dmFyIGIgPSBpbnRlZ2VyICYgMHhGRjtcblxuXHRyZXR1cm4gW3IsIGcsIGJdO1xufTtcblxuY29udmVydC5yZ2IuaGNnID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgciA9IHJnYlswXSAvIDI1NTtcblx0dmFyIGcgPSByZ2JbMV0gLyAyNTU7XG5cdHZhciBiID0gcmdiWzJdIC8gMjU1O1xuXHR2YXIgbWF4ID0gTWF0aC5tYXgoTWF0aC5tYXgociwgZyksIGIpO1xuXHR2YXIgbWluID0gTWF0aC5taW4oTWF0aC5taW4ociwgZyksIGIpO1xuXHR2YXIgY2hyb21hID0gKG1heCAtIG1pbik7XG5cdHZhciBncmF5c2NhbGU7XG5cdHZhciBodWU7XG5cblx0aWYgKGNocm9tYSA8IDEpIHtcblx0XHRncmF5c2NhbGUgPSBtaW4gLyAoMSAtIGNocm9tYSk7XG5cdH0gZWxzZSB7XG5cdFx0Z3JheXNjYWxlID0gMDtcblx0fVxuXG5cdGlmIChjaHJvbWEgPD0gMCkge1xuXHRcdGh1ZSA9IDA7XG5cdH0gZWxzZVxuXHRpZiAobWF4ID09PSByKSB7XG5cdFx0aHVlID0gKChnIC0gYikgLyBjaHJvbWEpICUgNjtcblx0fSBlbHNlXG5cdGlmIChtYXggPT09IGcpIHtcblx0XHRodWUgPSAyICsgKGIgLSByKSAvIGNocm9tYTtcblx0fSBlbHNlIHtcblx0XHRodWUgPSA0ICsgKHIgLSBnKSAvIGNocm9tYSArIDQ7XG5cdH1cblxuXHRodWUgLz0gNjtcblx0aHVlICU9IDE7XG5cblx0cmV0dXJuIFtodWUgKiAzNjAsIGNocm9tYSAqIDEwMCwgZ3JheXNjYWxlICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHNsLmhjZyA9IGZ1bmN0aW9uIChoc2wpIHtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgYyA9IDE7XG5cdHZhciBmID0gMDtcblxuXHRpZiAobCA8IDAuNSkge1xuXHRcdGMgPSAyLjAgKiBzICogbDtcblx0fSBlbHNlIHtcblx0XHRjID0gMi4wICogcyAqICgxLjAgLSBsKTtcblx0fVxuXG5cdGlmIChjIDwgMS4wKSB7XG5cdFx0ZiA9IChsIC0gMC41ICogYykgLyAoMS4wIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2hzbFswXSwgYyAqIDEwMCwgZiAqIDEwMF07XG59O1xuXG5jb252ZXJ0Lmhzdi5oY2cgPSBmdW5jdGlvbiAoaHN2KSB7XG5cdHZhciBzID0gaHN2WzFdIC8gMTAwO1xuXHR2YXIgdiA9IGhzdlsyXSAvIDEwMDtcblxuXHR2YXIgYyA9IHMgKiB2O1xuXHR2YXIgZiA9IDA7XG5cblx0aWYgKGMgPCAxLjApIHtcblx0XHRmID0gKHYgLSBjKSAvICgxIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2hzdlswXSwgYyAqIDEwMCwgZiAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5yZ2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdHZhciBoID0gaGNnWzBdIC8gMzYwO1xuXHR2YXIgYyA9IGhjZ1sxXSAvIDEwMDtcblx0dmFyIGcgPSBoY2dbMl0gLyAxMDA7XG5cblx0aWYgKGMgPT09IDAuMCkge1xuXHRcdHJldHVybiBbZyAqIDI1NSwgZyAqIDI1NSwgZyAqIDI1NV07XG5cdH1cblxuXHR2YXIgcHVyZSA9IFswLCAwLCAwXTtcblx0dmFyIGhpID0gKGggJSAxKSAqIDY7XG5cdHZhciB2ID0gaGkgJSAxO1xuXHR2YXIgdyA9IDEgLSB2O1xuXHR2YXIgbWcgPSAwO1xuXG5cdHN3aXRjaCAoTWF0aC5mbG9vcihoaSkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IHY7IHB1cmVbMl0gPSAwOyBicmVhaztcblx0XHRjYXNlIDE6XG5cdFx0XHRwdXJlWzBdID0gdzsgcHVyZVsxXSA9IDE7IHB1cmVbMl0gPSAwOyBicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHRwdXJlWzBdID0gMDsgcHVyZVsxXSA9IDE7IHB1cmVbMl0gPSB2OyBicmVhaztcblx0XHRjYXNlIDM6XG5cdFx0XHRwdXJlWzBdID0gMDsgcHVyZVsxXSA9IHc7IHB1cmVbMl0gPSAxOyBicmVhaztcblx0XHRjYXNlIDQ6XG5cdFx0XHRwdXJlWzBdID0gdjsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSAxOyBicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0cHVyZVswXSA9IDE7IHB1cmVbMV0gPSAwOyBwdXJlWzJdID0gdztcblx0fVxuXG5cdG1nID0gKDEuMCAtIGMpICogZztcblxuXHRyZXR1cm4gW1xuXHRcdChjICogcHVyZVswXSArIG1nKSAqIDI1NSxcblx0XHQoYyAqIHB1cmVbMV0gKyBtZykgKiAyNTUsXG5cdFx0KGMgKiBwdXJlWzJdICsgbWcpICogMjU1XG5cdF07XG59O1xuXG5jb252ZXJ0LmhjZy5oc3YgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHR2YXIgdiA9IGMgKyBnICogKDEuMCAtIGMpO1xuXHR2YXIgZiA9IDA7XG5cblx0aWYgKHYgPiAwLjApIHtcblx0XHRmID0gYyAvIHY7XG5cdH1cblxuXHRyZXR1cm4gW2hjZ1swXSwgZiAqIDEwMCwgdiAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5oc2wgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHR2YXIgbCA9IGcgKiAoMS4wIC0gYykgKyAwLjUgKiBjO1xuXHR2YXIgcyA9IDA7XG5cblx0aWYgKGwgPiAwLjAgJiYgbCA8IDAuNSkge1xuXHRcdHMgPSBjIC8gKDIgKiBsKTtcblx0fSBlbHNlXG5cdGlmIChsID49IDAuNSAmJiBsIDwgMS4wKSB7XG5cdFx0cyA9IGMgLyAoMiAqICgxIC0gbCkpO1xuXHR9XG5cblx0cmV0dXJuIFtoY2dbMF0sIHMgKiAxMDAsIGwgKiAxMDBdO1xufTtcblxuY29udmVydC5oY2cuaHdiID0gZnVuY3Rpb24gKGhjZykge1xuXHR2YXIgYyA9IGhjZ1sxXSAvIDEwMDtcblx0dmFyIGcgPSBoY2dbMl0gLyAxMDA7XG5cdHZhciB2ID0gYyArIGcgKiAoMS4wIC0gYyk7XG5cdHJldHVybiBbaGNnWzBdLCAodiAtIGMpICogMTAwLCAoMSAtIHYpICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHdiLmhjZyA9IGZ1bmN0aW9uIChod2IpIHtcblx0dmFyIHcgPSBod2JbMV0gLyAxMDA7XG5cdHZhciBiID0gaHdiWzJdIC8gMTAwO1xuXHR2YXIgdiA9IDEgLSBiO1xuXHR2YXIgYyA9IHYgLSB3O1xuXHR2YXIgZyA9IDA7XG5cblx0aWYgKGMgPCAxKSB7XG5cdFx0ZyA9ICh2IC0gYykgLyAoMSAtIGMpO1xuXHR9XG5cblx0cmV0dXJuIFtod2JbMF0sIGMgKiAxMDAsIGcgKiAxMDBdO1xufTtcblxuY29udmVydC5hcHBsZS5yZ2IgPSBmdW5jdGlvbiAoYXBwbGUpIHtcblx0cmV0dXJuIFsoYXBwbGVbMF0gLyA2NTUzNSkgKiAyNTUsIChhcHBsZVsxXSAvIDY1NTM1KSAqIDI1NSwgKGFwcGxlWzJdIC8gNjU1MzUpICogMjU1XTtcbn07XG5cbmNvbnZlcnQucmdiLmFwcGxlID0gZnVuY3Rpb24gKHJnYikge1xuXHRyZXR1cm4gWyhyZ2JbMF0gLyAyNTUpICogNjU1MzUsIChyZ2JbMV0gLyAyNTUpICogNjU1MzUsIChyZ2JbMl0gLyAyNTUpICogNjU1MzVdO1xufTtcblxuY29udmVydC5ncmF5LnJnYiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHJldHVybiBbYXJnc1swXSAvIDEwMCAqIDI1NSwgYXJnc1swXSAvIDEwMCAqIDI1NSwgYXJnc1swXSAvIDEwMCAqIDI1NV07XG59O1xuXG5jb252ZXJ0LmdyYXkuaHNsID0gY29udmVydC5ncmF5LmhzdiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHJldHVybiBbMCwgMCwgYXJnc1swXV07XG59O1xuXG5jb252ZXJ0LmdyYXkuaHdiID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFswLCAxMDAsIGdyYXlbMF1dO1xufTtcblxuY29udmVydC5ncmF5LmNteWsgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gWzAsIDAsIDAsIGdyYXlbMF1dO1xufTtcblxuY29udmVydC5ncmF5LmxhYiA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbZ3JheVswXSwgMCwgMF07XG59O1xuXG5jb252ZXJ0LmdyYXkuaGV4ID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0dmFyIHZhbCA9IE1hdGgucm91bmQoZ3JheVswXSAvIDEwMCAqIDI1NSkgJiAweEZGO1xuXHR2YXIgaW50ZWdlciA9ICh2YWwgPDwgMTYpICsgKHZhbCA8PCA4KSArIHZhbDtcblxuXHR2YXIgc3RyaW5nID0gaW50ZWdlci50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0cmV0dXJuICcwMDAwMDAnLnN1YnN0cmluZyhzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbn07XG5cbmNvbnZlcnQucmdiLmdyYXkgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciB2YWwgPSAocmdiWzBdICsgcmdiWzFdICsgcmdiWzJdKSAvIDM7XG5cdHJldHVybiBbdmFsIC8gMjU1ICogMTAwXTtcbn07XG59KTtcbnZhciBjb252ZXJzaW9uc18xID0gY29udmVyc2lvbnMucmdiO1xudmFyIGNvbnZlcnNpb25zXzIgPSBjb252ZXJzaW9ucy5oc2w7XG52YXIgY29udmVyc2lvbnNfMyA9IGNvbnZlcnNpb25zLmhzdjtcbnZhciBjb252ZXJzaW9uc180ID0gY29udmVyc2lvbnMuaHdiO1xudmFyIGNvbnZlcnNpb25zXzUgPSBjb252ZXJzaW9ucy5jbXlrO1xudmFyIGNvbnZlcnNpb25zXzYgPSBjb252ZXJzaW9ucy54eXo7XG52YXIgY29udmVyc2lvbnNfNyA9IGNvbnZlcnNpb25zLmxhYjtcbnZhciBjb252ZXJzaW9uc184ID0gY29udmVyc2lvbnMubGNoO1xudmFyIGNvbnZlcnNpb25zXzkgPSBjb252ZXJzaW9ucy5oZXg7XG52YXIgY29udmVyc2lvbnNfMTAgPSBjb252ZXJzaW9ucy5rZXl3b3JkO1xudmFyIGNvbnZlcnNpb25zXzExID0gY29udmVyc2lvbnMuYW5zaTE2O1xudmFyIGNvbnZlcnNpb25zXzEyID0gY29udmVyc2lvbnMuYW5zaTI1NjtcbnZhciBjb252ZXJzaW9uc18xMyA9IGNvbnZlcnNpb25zLmhjZztcbnZhciBjb252ZXJzaW9uc18xNCA9IGNvbnZlcnNpb25zLmFwcGxlO1xudmFyIGNvbnZlcnNpb25zXzE1ID0gY29udmVyc2lvbnMuZ3JheTtcblxuLypcblx0dGhpcyBmdW5jdGlvbiByb3V0ZXMgYSBtb2RlbCB0byBhbGwgb3RoZXIgbW9kZWxzLlxuXG5cdGFsbCBmdW5jdGlvbnMgdGhhdCBhcmUgcm91dGVkIGhhdmUgYSBwcm9wZXJ0eSBgLmNvbnZlcnNpb25gIGF0dGFjaGVkXG5cdHRvIHRoZSByZXR1cm5lZCBzeW50aGV0aWMgZnVuY3Rpb24uIFRoaXMgcHJvcGVydHkgaXMgYW4gYXJyYXlcblx0b2Ygc3RyaW5ncywgZWFjaCB3aXRoIHRoZSBzdGVwcyBpbiBiZXR3ZWVuIHRoZSAnZnJvbScgYW5kICd0bydcblx0Y29sb3IgbW9kZWxzIChpbmNsdXNpdmUpLlxuXG5cdGNvbnZlcnNpb25zIHRoYXQgYXJlIG5vdCBwb3NzaWJsZSBzaW1wbHkgYXJlIG5vdCBpbmNsdWRlZC5cbiovXG5cbmZ1bmN0aW9uIGJ1aWxkR3JhcGgoKSB7XG5cdHZhciBncmFwaCA9IHt9O1xuXHQvLyBodHRwczovL2pzcGVyZi5jb20vb2JqZWN0LWtleXMtdnMtZm9yLWluLXdpdGgtY2xvc3VyZS8zXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdGdyYXBoW21vZGVsc1tpXV0gPSB7XG5cdFx0XHQvLyBodHRwOi8vanNwZXJmLmNvbS8xLXZzLWluZmluaXR5XG5cdFx0XHQvLyBtaWNyby1vcHQsIGJ1dCB0aGlzIGlzIHNpbXBsZS5cblx0XHRcdGRpc3RhbmNlOiAtMSxcblx0XHRcdHBhcmVudDogbnVsbFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JyZWFkdGgtZmlyc3Rfc2VhcmNoXG5mdW5jdGlvbiBkZXJpdmVCRlMoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGJ1aWxkR3JhcGgoKTtcblx0dmFyIHF1ZXVlID0gW2Zyb21Nb2RlbF07IC8vIHVuc2hpZnQgLT4gcXVldWUgLT4gcG9wXG5cblx0Z3JhcGhbZnJvbU1vZGVsXS5kaXN0YW5jZSA9IDA7XG5cblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXHRcdHZhciBjdXJyZW50ID0gcXVldWUucG9wKCk7XG5cdFx0dmFyIGFkamFjZW50cyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zW2N1cnJlbnRdKTtcblxuXHRcdGZvciAodmFyIGxlbiA9IGFkamFjZW50cy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHZhciBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcblx0XHRcdHZhciBub2RlID0gZ3JhcGhbYWRqYWNlbnRdO1xuXG5cdFx0XHRpZiAobm9kZS5kaXN0YW5jZSA9PT0gLTEpIHtcblx0XHRcdFx0bm9kZS5kaXN0YW5jZSA9IGdyYXBoW2N1cnJlbnRdLmRpc3RhbmNlICsgMTtcblx0XHRcdFx0bm9kZS5wYXJlbnQgPSBjdXJyZW50O1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KGFkamFjZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIGxpbmsoZnJvbSwgdG8pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0cmV0dXJuIHRvKGZyb20oYXJncykpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCkge1xuXHR2YXIgcGF0aCA9IFtncmFwaFt0b01vZGVsXS5wYXJlbnQsIHRvTW9kZWxdO1xuXHR2YXIgZm4gPSBjb252ZXJzaW9uc1tncmFwaFt0b01vZGVsXS5wYXJlbnRdW3RvTW9kZWxdO1xuXG5cdHZhciBjdXIgPSBncmFwaFt0b01vZGVsXS5wYXJlbnQ7XG5cdHdoaWxlIChncmFwaFtjdXJdLnBhcmVudCkge1xuXHRcdHBhdGgudW5zaGlmdChncmFwaFtjdXJdLnBhcmVudCk7XG5cdFx0Zm4gPSBsaW5rKGNvbnZlcnNpb25zW2dyYXBoW2N1cl0ucGFyZW50XVtjdXJdLCBmbik7XG5cdFx0Y3VyID0gZ3JhcGhbY3VyXS5wYXJlbnQ7XG5cdH1cblxuXHRmbi5jb252ZXJzaW9uID0gcGF0aDtcblx0cmV0dXJuIGZuO1xufVxuXG52YXIgcm91dGUgPSBmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGRlcml2ZUJGUyhmcm9tTW9kZWwpO1xuXHR2YXIgY29udmVyc2lvbiA9IHt9O1xuXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhncmFwaCk7XG5cdGZvciAodmFyIGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHR2YXIgdG9Nb2RlbCA9IG1vZGVsc1tpXTtcblx0XHR2YXIgbm9kZSA9IGdyYXBoW3RvTW9kZWxdO1xuXG5cdFx0aWYgKG5vZGUucGFyZW50ID09PSBudWxsKSB7XG5cdFx0XHQvLyBubyBwb3NzaWJsZSBjb252ZXJzaW9uLCBvciB0aGlzIG5vZGUgaXMgdGhlIHNvdXJjZSBtb2RlbC5cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnZlcnNpb25bdG9Nb2RlbF0gPSB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCk7XG5cdH1cblxuXHRyZXR1cm4gY29udmVyc2lvbjtcbn07XG5cbnZhciBjb252ZXJ0ID0ge307XG5cbnZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cbmZ1bmN0aW9uIHdyYXBSYXcoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmbihhcmdzKTtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbmZ1bmN0aW9uIHdyYXBSb3VuZGVkKGZuKSB7XG5cdHZhciB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoYXJncykge1xuXHRcdGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHR2YXIgcmVzdWx0ID0gZm4oYXJncyk7XG5cblx0XHQvLyB3ZSdyZSBhc3N1bWluZyB0aGUgcmVzdWx0IGlzIGFuIGFycmF5IGhlcmUuXG5cdFx0Ly8gc2VlIG5vdGljZSBpbiBjb252ZXJzaW9ucy5qczsgZG9uJ3QgdXNlIGJveCB0eXBlc1xuXHRcdC8vIGluIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yICh2YXIgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBNYXRoLnJvdW5kKHJlc3VsdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbm1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0Y29udmVydFtmcm9tTW9kZWxdID0ge307XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2NoYW5uZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzfSk7XG5cblx0dmFyIHJvdXRlcyA9IHJvdXRlKGZyb21Nb2RlbCk7XG5cdHZhciByb3V0ZU1vZGVscyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG5cblx0cm91dGVNb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAodG9Nb2RlbCkge1xuXHRcdHZhciBmbiA9IHJvdXRlc1t0b01vZGVsXTtcblxuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXSA9IHdyYXBSb3VuZGVkKGZuKTtcblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0ucmF3ID0gd3JhcFJhdyhmbik7XG5cdH0pO1xufSk7XG5cbnZhciBjb2xvckNvbnZlcnQgPSBjb252ZXJ0O1xuXG52YXIgY29sb3JOYW1lJDEgPSB7XHJcblx0XCJhbGljZWJsdWVcIjogWzI0MCwgMjQ4LCAyNTVdLFxyXG5cdFwiYW50aXF1ZXdoaXRlXCI6IFsyNTAsIDIzNSwgMjE1XSxcclxuXHRcImFxdWFcIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImFxdWFtYXJpbmVcIjogWzEyNywgMjU1LCAyMTJdLFxyXG5cdFwiYXp1cmVcIjogWzI0MCwgMjU1LCAyNTVdLFxyXG5cdFwiYmVpZ2VcIjogWzI0NSwgMjQ1LCAyMjBdLFxyXG5cdFwiYmlzcXVlXCI6IFsyNTUsIDIyOCwgMTk2XSxcclxuXHRcImJsYWNrXCI6IFswLCAwLCAwXSxcclxuXHRcImJsYW5jaGVkYWxtb25kXCI6IFsyNTUsIDIzNSwgMjA1XSxcclxuXHRcImJsdWVcIjogWzAsIDAsIDI1NV0sXHJcblx0XCJibHVldmlvbGV0XCI6IFsxMzgsIDQzLCAyMjZdLFxyXG5cdFwiYnJvd25cIjogWzE2NSwgNDIsIDQyXSxcclxuXHRcImJ1cmx5d29vZFwiOiBbMjIyLCAxODQsIDEzNV0sXHJcblx0XCJjYWRldGJsdWVcIjogWzk1LCAxNTgsIDE2MF0sXHJcblx0XCJjaGFydHJldXNlXCI6IFsxMjcsIDI1NSwgMF0sXHJcblx0XCJjaG9jb2xhdGVcIjogWzIxMCwgMTA1LCAzMF0sXHJcblx0XCJjb3JhbFwiOiBbMjU1LCAxMjcsIDgwXSxcclxuXHRcImNvcm5mbG93ZXJibHVlXCI6IFsxMDAsIDE0OSwgMjM3XSxcclxuXHRcImNvcm5zaWxrXCI6IFsyNTUsIDI0OCwgMjIwXSxcclxuXHRcImNyaW1zb25cIjogWzIyMCwgMjAsIDYwXSxcclxuXHRcImN5YW5cIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImRhcmtibHVlXCI6IFswLCAwLCAxMzldLFxyXG5cdFwiZGFya2N5YW5cIjogWzAsIDEzOSwgMTM5XSxcclxuXHRcImRhcmtnb2xkZW5yb2RcIjogWzE4NCwgMTM0LCAxMV0sXHJcblx0XCJkYXJrZ3JheVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJrZ3JlZW5cIjogWzAsIDEwMCwgMF0sXHJcblx0XCJkYXJrZ3JleVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJra2hha2lcIjogWzE4OSwgMTgzLCAxMDddLFxyXG5cdFwiZGFya21hZ2VudGFcIjogWzEzOSwgMCwgMTM5XSxcclxuXHRcImRhcmtvbGl2ZWdyZWVuXCI6IFs4NSwgMTA3LCA0N10sXHJcblx0XCJkYXJrb3JhbmdlXCI6IFsyNTUsIDE0MCwgMF0sXHJcblx0XCJkYXJrb3JjaGlkXCI6IFsxNTMsIDUwLCAyMDRdLFxyXG5cdFwiZGFya3JlZFwiOiBbMTM5LCAwLCAwXSxcclxuXHRcImRhcmtzYWxtb25cIjogWzIzMywgMTUwLCAxMjJdLFxyXG5cdFwiZGFya3NlYWdyZWVuXCI6IFsxNDMsIDE4OCwgMTQzXSxcclxuXHRcImRhcmtzbGF0ZWJsdWVcIjogWzcyLCA2MSwgMTM5XSxcclxuXHRcImRhcmtzbGF0ZWdyYXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3NsYXRlZ3JleVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrdHVycXVvaXNlXCI6IFswLCAyMDYsIDIwOV0sXHJcblx0XCJkYXJrdmlvbGV0XCI6IFsxNDgsIDAsIDIxMV0sXHJcblx0XCJkZWVwcGlua1wiOiBbMjU1LCAyMCwgMTQ3XSxcclxuXHRcImRlZXBza3libHVlXCI6IFswLCAxOTEsIDI1NV0sXHJcblx0XCJkaW1ncmF5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRpbWdyZXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZG9kZ2VyYmx1ZVwiOiBbMzAsIDE0NCwgMjU1XSxcclxuXHRcImZpcmVicmlja1wiOiBbMTc4LCAzNCwgMzRdLFxyXG5cdFwiZmxvcmFsd2hpdGVcIjogWzI1NSwgMjUwLCAyNDBdLFxyXG5cdFwiZm9yZXN0Z3JlZW5cIjogWzM0LCAxMzksIDM0XSxcclxuXHRcImZ1Y2hzaWFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcImdhaW5zYm9yb1wiOiBbMjIwLCAyMjAsIDIyMF0sXHJcblx0XCJnaG9zdHdoaXRlXCI6IFsyNDgsIDI0OCwgMjU1XSxcclxuXHRcImdvbGRcIjogWzI1NSwgMjE1LCAwXSxcclxuXHRcImdvbGRlbnJvZFwiOiBbMjE4LCAxNjUsIDMyXSxcclxuXHRcImdyYXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiZ3JlZW5cIjogWzAsIDEyOCwgMF0sXHJcblx0XCJncmVlbnllbGxvd1wiOiBbMTczLCAyNTUsIDQ3XSxcclxuXHRcImdyZXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiaG9uZXlkZXdcIjogWzI0MCwgMjU1LCAyNDBdLFxyXG5cdFwiaG90cGlua1wiOiBbMjU1LCAxMDUsIDE4MF0sXHJcblx0XCJpbmRpYW5yZWRcIjogWzIwNSwgOTIsIDkyXSxcclxuXHRcImluZGlnb1wiOiBbNzUsIDAsIDEzMF0sXHJcblx0XCJpdm9yeVwiOiBbMjU1LCAyNTUsIDI0MF0sXHJcblx0XCJraGFraVwiOiBbMjQwLCAyMzAsIDE0MF0sXHJcblx0XCJsYXZlbmRlclwiOiBbMjMwLCAyMzAsIDI1MF0sXHJcblx0XCJsYXZlbmRlcmJsdXNoXCI6IFsyNTUsIDI0MCwgMjQ1XSxcclxuXHRcImxhd25ncmVlblwiOiBbMTI0LCAyNTIsIDBdLFxyXG5cdFwibGVtb25jaGlmZm9uXCI6IFsyNTUsIDI1MCwgMjA1XSxcclxuXHRcImxpZ2h0Ymx1ZVwiOiBbMTczLCAyMTYsIDIzMF0sXHJcblx0XCJsaWdodGNvcmFsXCI6IFsyNDAsIDEyOCwgMTI4XSxcclxuXHRcImxpZ2h0Y3lhblwiOiBbMjI0LCAyNTUsIDI1NV0sXHJcblx0XCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBbMjUwLCAyNTAsIDIxMF0sXHJcblx0XCJsaWdodGdyYXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRncmVlblwiOiBbMTQ0LCAyMzgsIDE0NF0sXHJcblx0XCJsaWdodGdyZXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRwaW5rXCI6IFsyNTUsIDE4MiwgMTkzXSxcclxuXHRcImxpZ2h0c2FsbW9uXCI6IFsyNTUsIDE2MCwgMTIyXSxcclxuXHRcImxpZ2h0c2VhZ3JlZW5cIjogWzMyLCAxNzgsIDE3MF0sXHJcblx0XCJsaWdodHNreWJsdWVcIjogWzEzNSwgMjA2LCAyNTBdLFxyXG5cdFwibGlnaHRzbGF0ZWdyYXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzbGF0ZWdyZXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzdGVlbGJsdWVcIjogWzE3NiwgMTk2LCAyMjJdLFxyXG5cdFwibGlnaHR5ZWxsb3dcIjogWzI1NSwgMjU1LCAyMjRdLFxyXG5cdFwibGltZVwiOiBbMCwgMjU1LCAwXSxcclxuXHRcImxpbWVncmVlblwiOiBbNTAsIDIwNSwgNTBdLFxyXG5cdFwibGluZW5cIjogWzI1MCwgMjQwLCAyMzBdLFxyXG5cdFwibWFnZW50YVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwibWFyb29uXCI6IFsxMjgsIDAsIDBdLFxyXG5cdFwibWVkaXVtYXF1YW1hcmluZVwiOiBbMTAyLCAyMDUsIDE3MF0sXHJcblx0XCJtZWRpdW1ibHVlXCI6IFswLCAwLCAyMDVdLFxyXG5cdFwibWVkaXVtb3JjaGlkXCI6IFsxODYsIDg1LCAyMTFdLFxyXG5cdFwibWVkaXVtcHVycGxlXCI6IFsxNDcsIDExMiwgMjE5XSxcclxuXHRcIm1lZGl1bXNlYWdyZWVuXCI6IFs2MCwgMTc5LCAxMTNdLFxyXG5cdFwibWVkaXVtc2xhdGVibHVlXCI6IFsxMjMsIDEwNCwgMjM4XSxcclxuXHRcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLCAyNTAsIDE1NF0sXHJcblx0XCJtZWRpdW10dXJxdW9pc2VcIjogWzcyLCAyMDksIDIwNF0sXHJcblx0XCJtZWRpdW12aW9sZXRyZWRcIjogWzE5OSwgMjEsIDEzM10sXHJcblx0XCJtaWRuaWdodGJsdWVcIjogWzI1LCAyNSwgMTEyXSxcclxuXHRcIm1pbnRjcmVhbVwiOiBbMjQ1LCAyNTUsIDI1MF0sXHJcblx0XCJtaXN0eXJvc2VcIjogWzI1NSwgMjI4LCAyMjVdLFxyXG5cdFwibW9jY2FzaW5cIjogWzI1NSwgMjI4LCAxODFdLFxyXG5cdFwibmF2YWpvd2hpdGVcIjogWzI1NSwgMjIyLCAxNzNdLFxyXG5cdFwibmF2eVwiOiBbMCwgMCwgMTI4XSxcclxuXHRcIm9sZGxhY2VcIjogWzI1MywgMjQ1LCAyMzBdLFxyXG5cdFwib2xpdmVcIjogWzEyOCwgMTI4LCAwXSxcclxuXHRcIm9saXZlZHJhYlwiOiBbMTA3LCAxNDIsIDM1XSxcclxuXHRcIm9yYW5nZVwiOiBbMjU1LCAxNjUsIDBdLFxyXG5cdFwib3JhbmdlcmVkXCI6IFsyNTUsIDY5LCAwXSxcclxuXHRcIm9yY2hpZFwiOiBbMjE4LCAxMTIsIDIxNF0sXHJcblx0XCJwYWxlZ29sZGVucm9kXCI6IFsyMzgsIDIzMiwgMTcwXSxcclxuXHRcInBhbGVncmVlblwiOiBbMTUyLCAyNTEsIDE1Ml0sXHJcblx0XCJwYWxldHVycXVvaXNlXCI6IFsxNzUsIDIzOCwgMjM4XSxcclxuXHRcInBhbGV2aW9sZXRyZWRcIjogWzIxOSwgMTEyLCAxNDddLFxyXG5cdFwicGFwYXlhd2hpcFwiOiBbMjU1LCAyMzksIDIxM10sXHJcblx0XCJwZWFjaHB1ZmZcIjogWzI1NSwgMjE4LCAxODVdLFxyXG5cdFwicGVydVwiOiBbMjA1LCAxMzMsIDYzXSxcclxuXHRcInBpbmtcIjogWzI1NSwgMTkyLCAyMDNdLFxyXG5cdFwicGx1bVwiOiBbMjIxLCAxNjAsIDIyMV0sXHJcblx0XCJwb3dkZXJibHVlXCI6IFsxNzYsIDIyNCwgMjMwXSxcclxuXHRcInB1cnBsZVwiOiBbMTI4LCAwLCAxMjhdLFxyXG5cdFwicmViZWNjYXB1cnBsZVwiOiBbMTAyLCA1MSwgMTUzXSxcclxuXHRcInJlZFwiOiBbMjU1LCAwLCAwXSxcclxuXHRcInJvc3licm93blwiOiBbMTg4LCAxNDMsIDE0M10sXHJcblx0XCJyb3lhbGJsdWVcIjogWzY1LCAxMDUsIDIyNV0sXHJcblx0XCJzYWRkbGVicm93blwiOiBbMTM5LCA2OSwgMTldLFxyXG5cdFwic2FsbW9uXCI6IFsyNTAsIDEyOCwgMTE0XSxcclxuXHRcInNhbmR5YnJvd25cIjogWzI0NCwgMTY0LCA5Nl0sXHJcblx0XCJzZWFncmVlblwiOiBbNDYsIDEzOSwgODddLFxyXG5cdFwic2Vhc2hlbGxcIjogWzI1NSwgMjQ1LCAyMzhdLFxyXG5cdFwic2llbm5hXCI6IFsxNjAsIDgyLCA0NV0sXHJcblx0XCJzaWx2ZXJcIjogWzE5MiwgMTkyLCAxOTJdLFxyXG5cdFwic2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDIzNV0sXHJcblx0XCJzbGF0ZWJsdWVcIjogWzEwNiwgOTAsIDIwNV0sXHJcblx0XCJzbGF0ZWdyYXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic2xhdGVncmV5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNub3dcIjogWzI1NSwgMjUwLCAyNTBdLFxyXG5cdFwic3ByaW5nZ3JlZW5cIjogWzAsIDI1NSwgMTI3XSxcclxuXHRcInN0ZWVsYmx1ZVwiOiBbNzAsIDEzMCwgMTgwXSxcclxuXHRcInRhblwiOiBbMjEwLCAxODAsIDE0MF0sXHJcblx0XCJ0ZWFsXCI6IFswLCAxMjgsIDEyOF0sXHJcblx0XCJ0aGlzdGxlXCI6IFsyMTYsIDE5MSwgMjE2XSxcclxuXHRcInRvbWF0b1wiOiBbMjU1LCA5OSwgNzFdLFxyXG5cdFwidHVycXVvaXNlXCI6IFs2NCwgMjI0LCAyMDhdLFxyXG5cdFwidmlvbGV0XCI6IFsyMzgsIDEzMCwgMjM4XSxcclxuXHRcIndoZWF0XCI6IFsyNDUsIDIyMiwgMTc5XSxcclxuXHRcIndoaXRlXCI6IFsyNTUsIDI1NSwgMjU1XSxcclxuXHRcIndoaXRlc21va2VcIjogWzI0NSwgMjQ1LCAyNDVdLFxyXG5cdFwieWVsbG93XCI6IFsyNTUsIDI1NSwgMF0sXHJcblx0XCJ5ZWxsb3dncmVlblwiOiBbMTU0LCAyMDUsIDUwXVxyXG59O1xuXG4vKiBNSVQgbGljZW5zZSAqL1xuXG5cbnZhciBjb2xvclN0cmluZyA9IHtcbiAgIGdldFJnYmE6IGdldFJnYmEsXG4gICBnZXRIc2xhOiBnZXRIc2xhLFxuICAgZ2V0UmdiOiBnZXRSZ2IsXG4gICBnZXRIc2w6IGdldEhzbCxcbiAgIGdldEh3YjogZ2V0SHdiLFxuICAgZ2V0QWxwaGE6IGdldEFscGhhLFxuXG4gICBoZXhTdHJpbmc6IGhleFN0cmluZyxcbiAgIHJnYlN0cmluZzogcmdiU3RyaW5nLFxuICAgcmdiYVN0cmluZzogcmdiYVN0cmluZyxcbiAgIHBlcmNlbnRTdHJpbmc6IHBlcmNlbnRTdHJpbmcsXG4gICBwZXJjZW50YVN0cmluZzogcGVyY2VudGFTdHJpbmcsXG4gICBoc2xTdHJpbmc6IGhzbFN0cmluZyxcbiAgIGhzbGFTdHJpbmc6IGhzbGFTdHJpbmcsXG4gICBod2JTdHJpbmc6IGh3YlN0cmluZyxcbiAgIGtleXdvcmQ6IGtleXdvcmRcbn07XG5cbmZ1bmN0aW9uIGdldFJnYmEoc3RyaW5nKSB7XG4gICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuO1xuICAgfVxuICAgdmFyIGFiYnIgPSAgL14jKFthLWZBLUYwLTldezMsNH0pJC9pLFxuICAgICAgIGhleCA9ICAvXiMoW2EtZkEtRjAtOV17Nn0oW2EtZkEtRjAtOV17Mn0pPykkL2ksXG4gICAgICAgcmdiYSA9IC9ecmdiYT9cXChcXHMqKFsrLV0/XFxkKylcXHMqLFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvaSxcbiAgICAgICBwZXIgPSAvXnJnYmE/XFwoXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqLFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkkL2ksXG4gICAgICAga2V5d29yZCA9IC8oXFx3KykvO1xuXG4gICB2YXIgcmdiID0gWzAsIDAsIDBdLFxuICAgICAgIGEgPSAxLFxuICAgICAgIG1hdGNoID0gc3RyaW5nLm1hdGNoKGFiYnIpLFxuICAgICAgIGhleEFscGhhID0gXCJcIjtcbiAgIGlmIChtYXRjaCkge1xuICAgICAgbWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgIGhleEFscGhhID0gbWF0Y2hbM107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgcmdiW2ldID0gcGFyc2VJbnQobWF0Y2hbaV0gKyBtYXRjaFtpXSwgMTYpO1xuICAgICAgfVxuICAgICAgaWYgKGhleEFscGhhKSB7XG4gICAgICAgICBhID0gTWF0aC5yb3VuZCgocGFyc2VJbnQoaGV4QWxwaGEgKyBoZXhBbHBoYSwgMTYpIC8gMjU1KSAqIDEwMCkgLyAxMDA7XG4gICAgICB9XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChoZXgpKSB7XG4gICAgICBoZXhBbHBoYSA9IG1hdGNoWzJdO1xuICAgICAgbWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaC5zbGljZShpICogMiwgaSAqIDIgKyAyKSwgMTYpO1xuICAgICAgfVxuICAgICAgaWYgKGhleEFscGhhKSB7XG4gICAgICAgICBhID0gTWF0aC5yb3VuZCgocGFyc2VJbnQoaGV4QWxwaGEsIDE2KSAvIDI1NSkgKiAxMDApIC8gMTAwO1xuICAgICAgfVxuICAgfVxuICAgZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2gocmdiYSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpICsgMV0pO1xuICAgICAgfVxuICAgICAgYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgfVxuICAgZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2gocGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChtYXRjaFtpICsgMV0pICogMi41NSk7XG4gICAgICB9XG4gICAgICBhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChrZXl3b3JkKSkge1xuICAgICAgaWYgKG1hdGNoWzFdID09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgICAgIH1cbiAgICAgIHJnYiA9IGNvbG9yTmFtZSQxW21hdGNoWzFdXTtcbiAgICAgIGlmICghcmdiKSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICB9XG5cbiAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZ2JbaV0gPSBzY2FsZShyZ2JbaV0sIDAsIDI1NSk7XG4gICB9XG4gICBpZiAoIWEgJiYgYSAhPSAwKSB7XG4gICAgICBhID0gMTtcbiAgIH1cbiAgIGVsc2Uge1xuICAgICAgYSA9IHNjYWxlKGEsIDAsIDEpO1xuICAgfVxuICAgcmdiWzNdID0gYTtcbiAgIHJldHVybiByZ2I7XG59XG5cbmZ1bmN0aW9uIGdldEhzbGEoc3RyaW5nKSB7XG4gICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuO1xuICAgfVxuICAgdmFyIGhzbCA9IC9eaHNsYT9cXChcXHMqKFsrLV0/XFxkKykoPzpkZWcpP1xccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpLztcbiAgIHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaChoc2wpO1xuICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgYWxwaGEgPSBwYXJzZUZsb2F0KG1hdGNoWzRdKTtcbiAgICAgIHZhciBoID0gc2NhbGUocGFyc2VJbnQobWF0Y2hbMV0pLCAwLCAzNjApLFxuICAgICAgICAgIHMgPSBzY2FsZShwYXJzZUZsb2F0KG1hdGNoWzJdKSwgMCwgMTAwKSxcbiAgICAgICAgICBsID0gc2NhbGUocGFyc2VGbG9hdChtYXRjaFszXSksIDAsIDEwMCksXG4gICAgICAgICAgYSA9IHNjYWxlKGlzTmFOKGFscGhhKSA/IDEgOiBhbHBoYSwgMCwgMSk7XG4gICAgICByZXR1cm4gW2gsIHMsIGwsIGFdO1xuICAgfVxufVxuXG5mdW5jdGlvbiBnZXRId2Ioc3RyaW5nKSB7XG4gICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuO1xuICAgfVxuICAgdmFyIGh3YiA9IC9eaHdiXFwoXFxzKihbKy1dP1xcZCspKD86ZGVnKT9cXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKS87XG4gICB2YXIgbWF0Y2ggPSBzdHJpbmcubWF0Y2goaHdiKTtcbiAgIGlmIChtYXRjaCkge1xuICAgIHZhciBhbHBoYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgICAgdmFyIGggPSBzY2FsZShwYXJzZUludChtYXRjaFsxXSksIDAsIDM2MCksXG4gICAgICAgICAgdyA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbMl0pLCAwLCAxMDApLFxuICAgICAgICAgIGIgPSBzY2FsZShwYXJzZUZsb2F0KG1hdGNoWzNdKSwgMCwgMTAwKSxcbiAgICAgICAgICBhID0gc2NhbGUoaXNOYU4oYWxwaGEpID8gMSA6IGFscGhhLCAwLCAxKTtcbiAgICAgIHJldHVybiBbaCwgdywgYiwgYV07XG4gICB9XG59XG5cbmZ1bmN0aW9uIGdldFJnYihzdHJpbmcpIHtcbiAgIHZhciByZ2JhID0gZ2V0UmdiYShzdHJpbmcpO1xuICAgcmV0dXJuIHJnYmEgJiYgcmdiYS5zbGljZSgwLCAzKTtcbn1cblxuZnVuY3Rpb24gZ2V0SHNsKHN0cmluZykge1xuICB2YXIgaHNsYSA9IGdldEhzbGEoc3RyaW5nKTtcbiAgcmV0dXJuIGhzbGEgJiYgaHNsYS5zbGljZSgwLCAzKTtcbn1cblxuZnVuY3Rpb24gZ2V0QWxwaGEoc3RyaW5nKSB7XG4gICB2YXIgdmFscyA9IGdldFJnYmEoc3RyaW5nKTtcbiAgIGlmICh2YWxzKSB7XG4gICAgICByZXR1cm4gdmFsc1szXTtcbiAgIH1cbiAgIGVsc2UgaWYgKHZhbHMgPSBnZXRIc2xhKHN0cmluZykpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxuICAgZWxzZSBpZiAodmFscyA9IGdldEh3YihzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gdmFsc1szXTtcbiAgIH1cbn1cblxuLy8gZ2VuZXJhdG9yc1xuZnVuY3Rpb24gaGV4U3RyaW5nKHJnYmEsIGEpIHtcbiAgIHZhciBhID0gKGEgIT09IHVuZGVmaW5lZCAmJiByZ2JhLmxlbmd0aCA9PT0gMykgPyBhIDogcmdiYVszXTtcbiAgIHJldHVybiBcIiNcIiArIGhleERvdWJsZShyZ2JhWzBdKSBcbiAgICAgICAgICAgICAgKyBoZXhEb3VibGUocmdiYVsxXSlcbiAgICAgICAgICAgICAgKyBoZXhEb3VibGUocmdiYVsyXSlcbiAgICAgICAgICAgICAgKyAoXG4gICAgICAgICAgICAgICAgIChhID49IDAgJiYgYSA8IDEpXG4gICAgICAgICAgICAgICAgID8gaGV4RG91YmxlKE1hdGgucm91bmQoYSAqIDI1NSkpXG4gICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgICApO1xufVxuXG5mdW5jdGlvbiByZ2JTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKHJnYmFbM10gJiYgcmdiYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gcmdiYVN0cmluZyhyZ2JhLCBhbHBoYSk7XG4gICB9XG4gICByZXR1cm4gXCJyZ2IoXCIgKyByZ2JhWzBdICsgXCIsIFwiICsgcmdiYVsxXSArIFwiLCBcIiArIHJnYmFbMl0gKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gcmdiYVN0cmluZyhyZ2JhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFscGhhID0gKHJnYmFbM10gIT09IHVuZGVmaW5lZCA/IHJnYmFbM10gOiAxKTtcbiAgIH1cbiAgIHJldHVybiBcInJnYmEoXCIgKyByZ2JhWzBdICsgXCIsIFwiICsgcmdiYVsxXSArIFwiLCBcIiArIHJnYmFbMl1cbiAgICAgICAgICAgKyBcIiwgXCIgKyBhbHBoYSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBwZXJjZW50U3RyaW5nKHJnYmEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPCAxIHx8IChyZ2JhWzNdICYmIHJnYmFbM10gPCAxKSkge1xuICAgICAgcmV0dXJuIHBlcmNlbnRhU3RyaW5nKHJnYmEsIGFscGhhKTtcbiAgIH1cbiAgIHZhciByID0gTWF0aC5yb3VuZChyZ2JhWzBdLzI1NSAqIDEwMCksXG4gICAgICAgZyA9IE1hdGgucm91bmQocmdiYVsxXS8yNTUgKiAxMDApLFxuICAgICAgIGIgPSBNYXRoLnJvdW5kKHJnYmFbMl0vMjU1ICogMTAwKTtcblxuICAgcmV0dXJuIFwicmdiKFwiICsgciArIFwiJSwgXCIgKyBnICsgXCIlLCBcIiArIGIgKyBcIiUpXCI7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnRhU3RyaW5nKHJnYmEsIGFscGhhKSB7XG4gICB2YXIgciA9IE1hdGgucm91bmQocmdiYVswXS8yNTUgKiAxMDApLFxuICAgICAgIGcgPSBNYXRoLnJvdW5kKHJnYmFbMV0vMjU1ICogMTAwKSxcbiAgICAgICBiID0gTWF0aC5yb3VuZChyZ2JhWzJdLzI1NSAqIDEwMCk7XG4gICByZXR1cm4gXCJyZ2JhKFwiICsgciArIFwiJSwgXCIgKyBnICsgXCIlLCBcIiArIGIgKyBcIiUsIFwiICsgKGFscGhhIHx8IHJnYmFbM10gfHwgMSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gaHNsU3RyaW5nKGhzbGEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPCAxIHx8IChoc2xhWzNdICYmIGhzbGFbM10gPCAxKSkge1xuICAgICAgcmV0dXJuIGhzbGFTdHJpbmcoaHNsYSwgYWxwaGEpO1xuICAgfVxuICAgcmV0dXJuIFwiaHNsKFwiICsgaHNsYVswXSArIFwiLCBcIiArIGhzbGFbMV0gKyBcIiUsIFwiICsgaHNsYVsyXSArIFwiJSlcIjtcbn1cblxuZnVuY3Rpb24gaHNsYVN0cmluZyhoc2xhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFscGhhID0gKGhzbGFbM10gIT09IHVuZGVmaW5lZCA/IGhzbGFbM10gOiAxKTtcbiAgIH1cbiAgIHJldHVybiBcImhzbGEoXCIgKyBoc2xhWzBdICsgXCIsIFwiICsgaHNsYVsxXSArIFwiJSwgXCIgKyBoc2xhWzJdICsgXCIlLCBcIlxuICAgICAgICAgICArIGFscGhhICsgXCIpXCI7XG59XG5cbi8vIGh3YiBpcyBhIGJpdCBkaWZmZXJlbnQgdGhhbiByZ2IoYSkgJiBoc2woYSkgc2luY2UgdGhlcmUgaXMgbm8gYWxwaGEgc3BlY2lmaWMgc3ludGF4XG4vLyAoaHdiIGhhdmUgYWxwaGEgb3B0aW9uYWwgJiAxIGlzIGRlZmF1bHQgdmFsdWUpXG5mdW5jdGlvbiBod2JTdHJpbmcoaHdiLCBhbHBoYSkge1xuICAgaWYgKGFscGhhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFscGhhID0gKGh3YlszXSAhPT0gdW5kZWZpbmVkID8gaHdiWzNdIDogMSk7XG4gICB9XG4gICByZXR1cm4gXCJod2IoXCIgKyBod2JbMF0gKyBcIiwgXCIgKyBod2JbMV0gKyBcIiUsIFwiICsgaHdiWzJdICsgXCIlXCJcbiAgICAgICAgICAgKyAoYWxwaGEgIT09IHVuZGVmaW5lZCAmJiBhbHBoYSAhPT0gMSA/IFwiLCBcIiArIGFscGhhIDogXCJcIikgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24ga2V5d29yZChyZ2IpIHtcbiAgcmV0dXJuIHJldmVyc2VOYW1lc1tyZ2Iuc2xpY2UoMCwgMyldO1xufVxuXG4vLyBoZWxwZXJzXG5mdW5jdGlvbiBzY2FsZShudW0sIG1pbiwgbWF4KSB7XG4gICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCBudW0pLCBtYXgpO1xufVxuXG5mdW5jdGlvbiBoZXhEb3VibGUobnVtKSB7XG4gIHZhciBzdHIgPSBudW0udG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gIHJldHVybiAoc3RyLmxlbmd0aCA8IDIpID8gXCIwXCIgKyBzdHIgOiBzdHI7XG59XG5cblxuLy9jcmVhdGUgYSBsaXN0IG9mIHJldmVyc2UgY29sb3IgbmFtZXNcbnZhciByZXZlcnNlTmFtZXMgPSB7fTtcbmZvciAodmFyIG5hbWUgaW4gY29sb3JOYW1lJDEpIHtcbiAgIHJldmVyc2VOYW1lc1tjb2xvck5hbWUkMVtuYW1lXV0gPSBuYW1lO1xufVxuXG4vKiBNSVQgbGljZW5zZSAqL1xuXG5cblxudmFyIENvbG9yID0gZnVuY3Rpb24gKG9iaikge1xuXHRpZiAob2JqIGluc3RhbmNlb2YgQ29sb3IpIHtcblx0XHRyZXR1cm4gb2JqO1xuXHR9XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb2xvcikpIHtcblx0XHRyZXR1cm4gbmV3IENvbG9yKG9iaik7XG5cdH1cblxuXHR0aGlzLnZhbGlkID0gZmFsc2U7XG5cdHRoaXMudmFsdWVzID0ge1xuXHRcdHJnYjogWzAsIDAsIDBdLFxuXHRcdGhzbDogWzAsIDAsIDBdLFxuXHRcdGhzdjogWzAsIDAsIDBdLFxuXHRcdGh3YjogWzAsIDAsIDBdLFxuXHRcdGNteWs6IFswLCAwLCAwLCAwXSxcblx0XHRhbHBoYTogMVxuXHR9O1xuXG5cdC8vIHBhcnNlIENvbG9yKCkgYXJndW1lbnRcblx0dmFyIHZhbHM7XG5cdGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuXHRcdHZhbHMgPSBjb2xvclN0cmluZy5nZXRSZ2JhKG9iaik7XG5cdFx0aWYgKHZhbHMpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdyZ2InLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMgPSBjb2xvclN0cmluZy5nZXRIc2xhKG9iaikpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMgPSBjb2xvclN0cmluZy5nZXRId2Iob2JqKSkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2h3YicsIHZhbHMpO1xuXHRcdH1cblx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuXHRcdHZhbHMgPSBvYmo7XG5cdFx0aWYgKHZhbHMuciAhPT0gdW5kZWZpbmVkIHx8IHZhbHMucmVkICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdyZ2InLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMubCAhPT0gdW5kZWZpbmVkIHx8IHZhbHMubGlnaHRuZXNzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMudiAhPT0gdW5kZWZpbmVkIHx8IHZhbHMudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzdicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy53ICE9PSB1bmRlZmluZWQgfHwgdmFscy53aGl0ZW5lc3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2h3YicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy5jICE9PSB1bmRlZmluZWQgfHwgdmFscy5jeWFuICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdjbXlrJywgdmFscyk7XG5cdFx0fVxuXHR9XG59O1xuXG5Db2xvci5wcm90b3R5cGUgPSB7XG5cdGlzVmFsaWQ6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWxpZDtcblx0fSxcblx0cmdiOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ3JnYicsIGFyZ3VtZW50cyk7XG5cdH0sXG5cdGhzbDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdoc2wnLCBhcmd1bWVudHMpO1xuXHR9LFxuXHRoc3Y6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgnaHN2JywgYXJndW1lbnRzKTtcblx0fSxcblx0aHdiOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ2h3YicsIGFyZ3VtZW50cyk7XG5cdH0sXG5cdGNteWs6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgnY215aycsIGFyZ3VtZW50cyk7XG5cdH0sXG5cblx0cmdiQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMucmdiO1xuXHR9LFxuXHRoc2xBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5oc2w7XG5cdH0sXG5cdGhzdkFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmhzdjtcblx0fSxcblx0aHdiQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdFx0aWYgKHZhbHVlcy5hbHBoYSAhPT0gMSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlcy5od2IuY29uY2F0KFt2YWx1ZXMuYWxwaGFdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlcy5od2I7XG5cdH0sXG5cdGNteWtBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5jbXlrO1xuXHR9LFxuXHRyZ2JhQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdFx0cmV0dXJuIHZhbHVlcy5yZ2IuY29uY2F0KFt2YWx1ZXMuYWxwaGFdKTtcblx0fSxcblx0aHNsYUFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHRcdHJldHVybiB2YWx1ZXMuaHNsLmNvbmNhdChbdmFsdWVzLmFscGhhXSk7XG5cdH0sXG5cdGFscGhhOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0aWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuYWxwaGE7XG5cdFx0fVxuXHRcdHRoaXMuc2V0VmFsdWVzKCdhbHBoYScsIHZhbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVkOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgncmdiJywgMCwgdmFsKTtcblx0fSxcblx0Z3JlZW46IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAxLCB2YWwpO1xuXHR9LFxuXHRibHVlOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgncmdiJywgMiwgdmFsKTtcblx0fSxcblx0aHVlOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0aWYgKHZhbCkge1xuXHRcdFx0dmFsICU9IDM2MDtcblx0XHRcdHZhbCA9IHZhbCA8IDAgPyAzNjAgKyB2YWwgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDAsIHZhbCk7XG5cdH0sXG5cdHNhdHVyYXRpb246IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc2wnLCAxLCB2YWwpO1xuXHR9LFxuXHRsaWdodG5lc3M6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc2wnLCAyLCB2YWwpO1xuXHR9LFxuXHRzYXR1cmF0aW9udjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzdicsIDEsIHZhbCk7XG5cdH0sXG5cdHdoaXRlbmVzczogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2h3YicsIDEsIHZhbCk7XG5cdH0sXG5cdGJsYWNrbmVzczogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2h3YicsIDIsIHZhbCk7XG5cdH0sXG5cdHZhbHVlOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHN2JywgMiwgdmFsKTtcblx0fSxcblx0Y3lhbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2NteWsnLCAwLCB2YWwpO1xuXHR9LFxuXHRtYWdlbnRhOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDEsIHZhbCk7XG5cdH0sXG5cdHllbGxvdzogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2NteWsnLCAyLCB2YWwpO1xuXHR9LFxuXHRibGFjazogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2NteWsnLCAzLCB2YWwpO1xuXHR9LFxuXG5cdGhleFN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb2xvclN0cmluZy5oZXhTdHJpbmcodGhpcy52YWx1ZXMucmdiKTtcblx0fSxcblx0cmdiU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLnJnYlN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0cmdiYVN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb2xvclN0cmluZy5yZ2JhU3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRwZXJjZW50U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLnBlcmNlbnRTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdGhzbFN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb2xvclN0cmluZy5oc2xTdHJpbmcodGhpcy52YWx1ZXMuaHNsLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdGhzbGFTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcuaHNsYVN0cmluZyh0aGlzLnZhbHVlcy5oc2wsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHdiU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLmh3YlN0cmluZyh0aGlzLnZhbHVlcy5od2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0a2V5d29yZDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb2xvclN0cmluZy5rZXl3b3JkKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXG5cdHJnYk51bWJlcjogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0cmV0dXJuIChyZ2JbMF0gPDwgMTYpIHwgKHJnYlsxXSA8PCA4KSB8IHJnYlsyXTtcblx0fSxcblxuXHRsdW1pbm9zaXR5OiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0dmFyIGx1bSA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgY2hhbiA9IHJnYltpXSAvIDI1NTtcblx0XHRcdGx1bVtpXSA9IChjaGFuIDw9IDAuMDM5MjgpID8gY2hhbiAvIDEyLjkyIDogTWF0aC5wb3coKChjaGFuICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO1xuXHRcdH1cblx0XHRyZXR1cm4gMC4yMTI2ICogbHVtWzBdICsgMC43MTUyICogbHVtWzFdICsgMC4wNzIyICogbHVtWzJdO1xuXHR9LFxuXG5cdGNvbnRyYXN0OiBmdW5jdGlvbiAoY29sb3IyKSB7XG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNjb250cmFzdC1yYXRpb2RlZlxuXHRcdHZhciBsdW0xID0gdGhpcy5sdW1pbm9zaXR5KCk7XG5cdFx0dmFyIGx1bTIgPSBjb2xvcjIubHVtaW5vc2l0eSgpO1xuXHRcdGlmIChsdW0xID4gbHVtMikge1xuXHRcdFx0cmV0dXJuIChsdW0xICsgMC4wNSkgLyAobHVtMiArIDAuMDUpO1xuXHRcdH1cblx0XHRyZXR1cm4gKGx1bTIgKyAwLjA1KSAvIChsdW0xICsgMC4wNSk7XG5cdH0sXG5cblx0bGV2ZWw6IGZ1bmN0aW9uIChjb2xvcjIpIHtcblx0XHR2YXIgY29udHJhc3RSYXRpbyA9IHRoaXMuY29udHJhc3QoY29sb3IyKTtcblx0XHRpZiAoY29udHJhc3RSYXRpbyA+PSA3LjEpIHtcblx0XHRcdHJldHVybiAnQUFBJztcblx0XHR9XG5cblx0XHRyZXR1cm4gKGNvbnRyYXN0UmF0aW8gPj0gNC41KSA/ICdBQScgOiAnJztcblx0fSxcblxuXHRkYXJrOiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gWUlRIGVxdWF0aW9uIGZyb20gaHR0cDovLzI0d2F5cy5vcmcvMjAxMC9jYWxjdWxhdGluZy1jb2xvci1jb250cmFzdFxuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0dmFyIHlpcSA9IChyZ2JbMF0gKiAyOTkgKyByZ2JbMV0gKiA1ODcgKyByZ2JbMl0gKiAxMTQpIC8gMTAwMDtcblx0XHRyZXR1cm4geWlxIDwgMTI4O1xuXHR9LFxuXG5cdGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICF0aGlzLmRhcmsoKTtcblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRcdHJnYltpXSA9IDI1NSAtIHRoaXMudmFsdWVzLnJnYltpXTtcblx0XHR9XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHJnYik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0bGlnaHRlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHRoc2xbMl0gKz0gaHNsWzJdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZGFya2VuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsyXSAtPSBoc2xbMl0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzYXR1cmF0ZTogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHRoc2xbMV0gKz0gaHNsWzFdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZGVzYXR1cmF0ZTogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHRoc2xbMV0gLT0gaHNsWzFdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d2hpdGVuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHdiID0gdGhpcy52YWx1ZXMuaHdiO1xuXHRcdGh3YlsxXSArPSBod2JbMV0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgaHdiKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRibGFja2VuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHdiID0gdGhpcy52YWx1ZXMuaHdiO1xuXHRcdGh3YlsyXSArPSBod2JbMl0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgaHdiKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRncmV5c2NhbGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy52YWx1ZXMucmdiO1xuXHRcdC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3JheXNjYWxlI0NvbnZlcnRpbmdfY29sb3JfdG9fZ3JheXNjYWxlXG5cdFx0dmFyIHZhbCA9IHJnYlswXSAqIDAuMyArIHJnYlsxXSAqIDAuNTkgKyByZ2JbMl0gKiAwLjExO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdyZ2InLCBbdmFsLCB2YWwsIHZhbF0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsZWFyZXI6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBhbHBoYSA9IHRoaXMudmFsdWVzLmFscGhhO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdhbHBoYScsIGFscGhhIC0gKGFscGhhICogcmF0aW8pKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRvcGFxdWVyOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgYWxwaGEgPSB0aGlzLnZhbHVlcy5hbHBoYTtcblx0XHR0aGlzLnNldFZhbHVlcygnYWxwaGEnLCBhbHBoYSArIChhbHBoYSAqIHJhdGlvKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cm90YXRlOiBmdW5jdGlvbiAoZGVncmVlcykge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0dmFyIGh1ZSA9IChoc2xbMF0gKyBkZWdyZWVzKSAlIDM2MDtcblx0XHRoc2xbMF0gPSBodWUgPCAwID8gMzYwICsgaHVlIDogaHVlO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCBoc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQb3J0ZWQgZnJvbSBzYXNzIGltcGxlbWVudGF0aW9uIGluIENcblx0ICogaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MvbGlic2Fzcy9ibG9iLzBlNmI0YTI4NTAwOTIzNTZhYTNlY2UwN2M2YjI0OWYwMjIxY2FjZWQvZnVuY3Rpb25zLmNwcCNMMjA5XG5cdCAqL1xuXHRtaXg6IGZ1bmN0aW9uIChtaXhpbkNvbG9yLCB3ZWlnaHQpIHtcblx0XHR2YXIgY29sb3IxID0gdGhpcztcblx0XHR2YXIgY29sb3IyID0gbWl4aW5Db2xvcjtcblx0XHR2YXIgcCA9IHdlaWdodCA9PT0gdW5kZWZpbmVkID8gMC41IDogd2VpZ2h0O1xuXG5cdFx0dmFyIHcgPSAyICogcCAtIDE7XG5cdFx0dmFyIGEgPSBjb2xvcjEuYWxwaGEoKSAtIGNvbG9yMi5hbHBoYSgpO1xuXG5cdFx0dmFyIHcxID0gKCgodyAqIGEgPT09IC0xKSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG5cdFx0dmFyIHcyID0gMSAtIHcxO1xuXG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5yZ2IoXG5cdFx0XHRcdHcxICogY29sb3IxLnJlZCgpICsgdzIgKiBjb2xvcjIucmVkKCksXG5cdFx0XHRcdHcxICogY29sb3IxLmdyZWVuKCkgKyB3MiAqIGNvbG9yMi5ncmVlbigpLFxuXHRcdFx0XHR3MSAqIGNvbG9yMS5ibHVlKCkgKyB3MiAqIGNvbG9yMi5ibHVlKClcblx0XHRcdClcblx0XHRcdC5hbHBoYShjb2xvcjEuYWxwaGEoKSAqIHAgKyBjb2xvcjIuYWxwaGEoKSAqICgxIC0gcCkpO1xuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnJnYigpO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gTk9URShTQik6IHVzaW5nIG5vZGUtY2xvbmUgY3JlYXRlcyBhIGRlcGVuZGVuY3kgdG8gQnVmZmVyIHdoZW4gdXNpbmcgYnJvd3NlcmlmeSxcblx0XHQvLyBtYWtpbmcgdGhlIGZpbmFsIGJ1aWxkIHdheSB0byBiaWcgdG8gZW1iZWQgaW4gQ2hhcnQuanMuIFNvIGxldCdzIGRvIGl0IG1hbnVhbGx5LFxuXHRcdC8vIGFzc3VtaW5nIHRoYXQgdmFsdWVzIHRvIGNsb25lIGFyZSAxIGRpbWVuc2lvbiBhcnJheXMgY29udGFpbmluZyBvbmx5IG51bWJlcnMsXG5cdFx0Ly8gZXhjZXB0ICdhbHBoYScgd2hpY2ggaXMgYSBudW1iZXIuXG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDb2xvcigpO1xuXHRcdHZhciBzb3VyY2UgPSB0aGlzLnZhbHVlcztcblx0XHR2YXIgdGFyZ2V0ID0gcmVzdWx0LnZhbHVlcztcblx0XHR2YXIgdmFsdWUsIHR5cGU7XG5cblx0XHRmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuXHRcdFx0aWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuXHRcdFx0XHR2YWx1ZSA9IHNvdXJjZVtwcm9wXTtcblx0XHRcdFx0dHlwZSA9ICh7fSkudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cdFx0XHRcdGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG5cdFx0XHRcdFx0dGFyZ2V0W3Byb3BdID0gdmFsdWUuc2xpY2UoMCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcblx0XHRcdFx0XHR0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCd1bmV4cGVjdGVkIGNvbG9yIHZhbHVlOicsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zcGFjZXMgPSB7XG5cdHJnYjogWydyZWQnLCAnZ3JlZW4nLCAnYmx1ZSddLFxuXHRoc2w6IFsnaHVlJywgJ3NhdHVyYXRpb24nLCAnbGlnaHRuZXNzJ10sXG5cdGhzdjogWydodWUnLCAnc2F0dXJhdGlvbicsICd2YWx1ZSddLFxuXHRod2I6IFsnaHVlJywgJ3doaXRlbmVzcycsICdibGFja25lc3MnXSxcblx0Y215azogWydjeWFuJywgJ21hZ2VudGEnLCAneWVsbG93JywgJ2JsYWNrJ11cbn07XG5cbkNvbG9yLnByb3RvdHlwZS5tYXhlcyA9IHtcblx0cmdiOiBbMjU1LCAyNTUsIDI1NV0sXG5cdGhzbDogWzM2MCwgMTAwLCAxMDBdLFxuXHRoc3Y6IFszNjAsIDEwMCwgMTAwXSxcblx0aHdiOiBbMzYwLCAxMDAsIDEwMF0sXG5cdGNteWs6IFsxMDAsIDEwMCwgMTAwLCAxMDBdXG59O1xuXG5Db2xvci5wcm90b3R5cGUuZ2V0VmFsdWVzID0gZnVuY3Rpb24gKHNwYWNlKSB7XG5cdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0dmFyIHZhbHMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFsc1tzcGFjZS5jaGFyQXQoaSldID0gdmFsdWVzW3NwYWNlXVtpXTtcblx0fVxuXG5cdGlmICh2YWx1ZXMuYWxwaGEgIT09IDEpIHtcblx0XHR2YWxzLmEgPSB2YWx1ZXMuYWxwaGE7XG5cdH1cblxuXHQvLyB7cjogMjU1LCBnOiAyNTUsIGI6IDI1NSwgYTogMC40fVxuXHRyZXR1cm4gdmFscztcbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zZXRWYWx1ZXMgPSBmdW5jdGlvbiAoc3BhY2UsIHZhbHMpIHtcblx0dmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHR2YXIgc3BhY2VzID0gdGhpcy5zcGFjZXM7XG5cdHZhciBtYXhlcyA9IHRoaXMubWF4ZXM7XG5cdHZhciBhbHBoYSA9IDE7XG5cdHZhciBpO1xuXG5cdHRoaXMudmFsaWQgPSB0cnVlO1xuXG5cdGlmIChzcGFjZSA9PT0gJ2FscGhhJykge1xuXHRcdGFscGhhID0gdmFscztcblx0fSBlbHNlIGlmICh2YWxzLmxlbmd0aCkge1xuXHRcdC8vIFsxMCwgMTAsIDEwXVxuXHRcdHZhbHVlc1tzcGFjZV0gPSB2YWxzLnNsaWNlKDAsIHNwYWNlLmxlbmd0aCk7XG5cdFx0YWxwaGEgPSB2YWxzW3NwYWNlLmxlbmd0aF07XG5cdH0gZWxzZSBpZiAodmFsc1tzcGFjZS5jaGFyQXQoMCldICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB7cjogMTAsIGc6IDEwLCBiOiAxMH1cblx0XHRmb3IgKGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhbHVlc1tzcGFjZV1baV0gPSB2YWxzW3NwYWNlLmNoYXJBdChpKV07XG5cdFx0fVxuXG5cdFx0YWxwaGEgPSB2YWxzLmE7XG5cdH0gZWxzZSBpZiAodmFsc1tzcGFjZXNbc3BhY2VdWzBdXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8ge3JlZDogMTAsIGdyZWVuOiAxMCwgYmx1ZTogMTB9XG5cdFx0dmFyIGNoYW5zID0gc3BhY2VzW3NwYWNlXTtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFsdWVzW3NwYWNlXVtpXSA9IHZhbHNbY2hhbnNbaV1dO1xuXHRcdH1cblxuXHRcdGFscGhhID0gdmFscy5hbHBoYTtcblx0fVxuXG5cdHZhbHVlcy5hbHBoYSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIChhbHBoYSA9PT0gdW5kZWZpbmVkID8gdmFsdWVzLmFscGhhIDogYWxwaGEpKSk7XG5cblx0aWYgKHNwYWNlID09PSAnYWxwaGEnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGNhcHBlZDtcblxuXHQvLyBjYXAgdmFsdWVzIG9mIHRoZSBzcGFjZSBwcmlvciBjb252ZXJ0aW5nIGFsbCB2YWx1ZXNcblx0Zm9yIChpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2FwcGVkID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4ZXNbc3BhY2VdW2ldLCB2YWx1ZXNbc3BhY2VdW2ldKSk7XG5cdFx0dmFsdWVzW3NwYWNlXVtpXSA9IE1hdGgucm91bmQoY2FwcGVkKTtcblx0fVxuXG5cdC8vIGNvbnZlcnQgdG8gYWxsIHRoZSBvdGhlciBjb2xvciBzcGFjZXNcblx0Zm9yICh2YXIgc25hbWUgaW4gc3BhY2VzKSB7XG5cdFx0aWYgKHNuYW1lICE9PSBzcGFjZSkge1xuXHRcdFx0dmFsdWVzW3NuYW1lXSA9IGNvbG9yQ29udmVydFtzcGFjZV1bc25hbWVdKHZhbHVlc1tzcGFjZV0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcblxuQ29sb3IucHJvdG90eXBlLnNldFNwYWNlID0gZnVuY3Rpb24gKHNwYWNlLCBhcmdzKSB7XG5cdHZhciB2YWxzID0gYXJnc1swXTtcblxuXHRpZiAodmFscyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8gY29sb3IucmdiKClcblx0XHRyZXR1cm4gdGhpcy5nZXRWYWx1ZXMoc3BhY2UpO1xuXHR9XG5cblx0Ly8gY29sb3IucmdiKDEwLCAxMCwgMTApXG5cdGlmICh0eXBlb2YgdmFscyA9PT0gJ251bWJlcicpIHtcblx0XHR2YWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG5cdH1cblxuXHR0aGlzLnNldFZhbHVlcyhzcGFjZSwgdmFscyk7XG5cdHJldHVybiB0aGlzO1xufTtcblxuQ29sb3IucHJvdG90eXBlLnNldENoYW5uZWwgPSBmdW5jdGlvbiAoc3BhY2UsIGluZGV4LCB2YWwpIHtcblx0dmFyIHN2YWx1ZXMgPSB0aGlzLnZhbHVlc1tzcGFjZV07XG5cdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIGNvbG9yLnJlZCgpXG5cdFx0cmV0dXJuIHN2YWx1ZXNbaW5kZXhdO1xuXHR9IGVsc2UgaWYgKHZhbCA9PT0gc3ZhbHVlc1tpbmRleF0pIHtcblx0XHQvLyBjb2xvci5yZWQoY29sb3IucmVkKCkpXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvLyBjb2xvci5yZWQoMTAwKVxuXHRzdmFsdWVzW2luZGV4XSA9IHZhbDtcblx0dGhpcy5zZXRWYWx1ZXMoc3BhY2UsIHN2YWx1ZXMpO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdHdpbmRvdy5Db2xvciA9IENvbG9yO1xufVxuXG52YXIgY2hhcnRqc0NvbG9yID0gQ29sb3I7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzXG4gKi9cbnZhciBoZWxwZXJzID0ge1xuXHQvKipcblx0ICogQW4gZW1wdHkgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIGZvciBvcHRpb25hbCBjYWxsYmFjay5cblx0ICovXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB1bmlxdWUgaWQsIHNlcXVlbnRpYWxseSBnZW5lcmF0ZWQgZnJvbSBhIGdsb2JhbCB2YXJpYWJsZS5cblx0ICogQHJldHVybnMge251bWJlcn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHR1aWQ6IChmdW5jdGlvbigpIHtcblx0XHR2YXIgaWQgPSAwO1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBpZCsrO1xuXHRcdH07XG5cdH0oKSksXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIG5laXRoZXIgbnVsbCBub3IgdW5kZWZpbmVkLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aXNOdWxsT3JVbmRlZjogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgKGluY2x1ZGluZyB0eXBlZCBhcnJheXMpLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0aXNBcnJheTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblx0XHRpZiAodHlwZS5zdWJzdHIoMCwgNykgPT09ICdbb2JqZWN0JyAmJiB0eXBlLnN1YnN0cigtNikgPT09ICdBcnJheV0nKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QgKGV4Y2x1ZGluZyBudWxsKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdGlzT2JqZWN0OiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIHJldHVybnMgZmFsc2Vcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqL1xuXHRpc0Zpbml0ZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRyZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpICYmIGlzRmluaXRlKHZhbHVlKTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBgdmFsdWVgIGlmIGRlZmluZWQsIGVsc2UgcmV0dXJucyBgZGVmYXVsdFZhbHVlYC5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgZGVmaW5lZC5cblx0ICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdHZhbHVlT3JEZWZhdWx0OiBmdW5jdGlvbih2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG5cdFx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB2YWx1ZSBhdCB0aGUgZ2l2ZW4gYGluZGV4YCBpbiBhcnJheSBpZiBkZWZpbmVkLCBlbHNlIHJldHVybnMgYGRlZmF1bHRWYWx1ZWAuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlIC0gVGhlIGFycmF5IHRvIGxvb2t1cCBmb3IgdmFsdWUgYXQgYGluZGV4YC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGluIGB2YWx1ZWAgdG8gbG9va3VwIGZvciB2YWx1ZS5cblx0ICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGB2YWx1ZVtpbmRleF1gIGlzIHVuZGVmaW5lZC5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHR2YWx1ZUF0SW5kZXhPckRlZmF1bHQ6IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgZGVmYXVsdFZhbHVlKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnMudmFsdWVPckRlZmF1bHQoaGVscGVycy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlW2luZGV4XSA6IHZhbHVlLCBkZWZhdWx0VmFsdWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDYWxscyBgZm5gIHdpdGggdGhlIGdpdmVuIGBhcmdzYCBpbiB0aGUgc2NvcGUgZGVmaW5lZCBieSBgdGhpc0FyZ2AgYW5kIHJldHVybnMgdGhlXG5cdCAqIHZhbHVlIHJldHVybmVkIGJ5IGBmbmAuIElmIGBmbmAgaXMgbm90IGEgZnVuY3Rpb24sIHRoaXMgbWV0aG9kIHJldHVybnMgdW5kZWZpbmVkLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsLlxuXHQgKiBAcGFyYW0ge0FycmF5fHVuZGVmaW5lZHxudWxsfSBhcmdzIC0gVGhlIGFyZ3VtZW50cyB3aXRoIHdoaWNoIGBmbmAgc2hvdWxkIGJlIGNhbGxlZC5cblx0ICogQHBhcmFtIHtvYmplY3R9IFt0aGlzQXJnXSAtIFRoZSB2YWx1ZSBvZiBgdGhpc2AgcHJvdmlkZWQgZm9yIHRoZSBjYWxsIHRvIGBmbmAuXG5cdCAqIEByZXR1cm5zIHsqfVxuXHQgKi9cblx0Y2FsbGJhY2s6IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGlzQXJnKSB7XG5cdFx0aWYgKGZuICYmIHR5cGVvZiBmbi5jYWxsID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBOb3RlKFNCKSBmb3IgcGVyZm9ybWFuY2Ugc2FrZSwgdGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIGxvb3BhYmxlIHR5cGVcblx0ICogaXMgdW5rbm93biBvciBpbiBub25lIGludGVuc2l2ZSBjb2RlIChub3QgY2FsbGVkIG9mdGVuIGFuZCBzbWFsbCBsb29wYWJsZSkuIEVsc2Vcblx0ICogaXQncyBwcmVmZXJhYmxlIHRvIHVzZSBhIHJlZ3VsYXIgZm9yKCkgbG9vcCBhbmQgc2F2ZSBleHRyYSBmdW5jdGlvbiBjYWxscy5cblx0ICogQHBhcmFtIHtvYmplY3R8QXJyYXl9IGxvb3BhYmxlIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSBpdGVyYXRlZC5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpdGVtLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbcmV2ZXJzZV0gLSBJZiB0cnVlLCBpdGVyYXRlcyBiYWNrd2FyZCBvbiB0aGUgbG9vcGFibGUuXG5cdCAqL1xuXHRlYWNoOiBmdW5jdGlvbihsb29wYWJsZSwgZm4sIHRoaXNBcmcsIHJldmVyc2UpIHtcblx0XHR2YXIgaSwgbGVuLCBrZXlzO1xuXHRcdGlmIChoZWxwZXJzLmlzQXJyYXkobG9vcGFibGUpKSB7XG5cdFx0XHRsZW4gPSBsb29wYWJsZS5sZW5ndGg7XG5cdFx0XHRpZiAocmV2ZXJzZSkge1xuXHRcdFx0XHRmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHRmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoaGVscGVycy5pc09iamVjdChsb29wYWJsZSkpIHtcblx0XHRcdGtleXMgPSBPYmplY3Qua2V5cyhsb29wYWJsZSk7XG5cdFx0XHRsZW4gPSBrZXlzLmxlbmd0aDtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2tleXNbaV1dLCBrZXlzW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYGEwYCBhbmQgYGExYCBhcnJheXMgaGF2ZSB0aGUgc2FtZSBjb250ZW50LCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0ODUzOTc0XG5cdCAqIEBwYXJhbSB7QXJyYXl9IGEwIC0gVGhlIGFycmF5IHRvIGNvbXBhcmVcblx0ICogQHBhcmFtIHtBcnJheX0gYTEgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdGFycmF5RXF1YWxzOiBmdW5jdGlvbihhMCwgYTEpIHtcblx0XHR2YXIgaSwgaWxlbiwgdjAsIHYxO1xuXG5cdFx0aWYgKCFhMCB8fCAhYTEgfHwgYTAubGVuZ3RoICE9PSBhMS5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYTAubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHR2MCA9IGEwW2ldO1xuXHRcdFx0djEgPSBhMVtpXTtcblxuXHRcdFx0aWYgKHYwIGluc3RhbmNlb2YgQXJyYXkgJiYgdjEgaW5zdGFuY2VvZiBBcnJheSkge1xuXHRcdFx0XHRpZiAoIWhlbHBlcnMuYXJyYXlFcXVhbHModjAsIHYxKSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh2MCAhPT0gdjEpIHtcblx0XHRcdFx0Ly8gTk9URTogdHdvIGRpZmZlcmVudCBvYmplY3QgaW5zdGFuY2VzIHdpbGwgbmV2ZXIgYmUgZXF1YWw6IHt4OjIwfSAhPSB7eDoyMH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgIHdpdGhvdXQga2VlcGluZyByZWZlcmVuY2VzIG9uIG9iamVjdHMgYW5kIGFycmF5cy5cblx0ICogQHBhcmFtIHsqfSBzb3VyY2UgLSBUaGUgdmFsdWUgdG8gY2xvbmUuXG5cdCAqIEByZXR1cm5zIHsqfVxuXHQgKi9cblx0Y2xvbmU6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdGlmIChoZWxwZXJzLmlzQXJyYXkoc291cmNlKSkge1xuXHRcdFx0cmV0dXJuIHNvdXJjZS5tYXAoaGVscGVycy5jbG9uZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGhlbHBlcnMuaXNPYmplY3Qoc291cmNlKSkge1xuXHRcdFx0dmFyIHRhcmdldCA9IHt9O1xuXHRcdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXHRcdFx0dmFyIGtsZW4gPSBrZXlzLmxlbmd0aDtcblx0XHRcdHZhciBrID0gMDtcblxuXHRcdFx0Zm9yICg7IGsgPCBrbGVuOyArK2spIHtcblx0XHRcdFx0dGFyZ2V0W2tleXNba11dID0gaGVscGVycy5jbG9uZShzb3VyY2Vba2V5c1trXV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdHJldHVybiBzb3VyY2U7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFRoZSBkZWZhdWx0IG1lcmdlciB3aGVuIENoYXJ0LmhlbHBlcnMubWVyZ2UgaXMgY2FsbGVkIHdpdGhvdXQgbWVyZ2VyIG9wdGlvbi5cblx0ICogTm90ZShTQik6IGFsc28gdXNlZCBieSBtZXJnZUNvbmZpZyBhbmQgbWVyZ2VTY2FsZUNvbmZpZyBhcyBmYWxsYmFjay5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9tZXJnZXI6IGZ1bmN0aW9uKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHR2YXIgdHZhbCA9IHRhcmdldFtrZXldO1xuXHRcdHZhciBzdmFsID0gc291cmNlW2tleV07XG5cblx0XHRpZiAoaGVscGVycy5pc09iamVjdCh0dmFsKSAmJiBoZWxwZXJzLmlzT2JqZWN0KHN2YWwpKSB7XG5cdFx0XHRoZWxwZXJzLm1lcmdlKHR2YWwsIHN2YWwsIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXRba2V5XSA9IGhlbHBlcnMuY2xvbmUoc3ZhbCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBNZXJnZXMgc291cmNlW2tleV0gaW4gdGFyZ2V0W2tleV0gb25seSBpZiB0YXJnZXRba2V5XSBpcyB1bmRlZmluZWQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfbWVyZ2VySWY6IGZ1bmN0aW9uKGtleSwgdGFyZ2V0LCBzb3VyY2UpIHtcblx0XHR2YXIgdHZhbCA9IHRhcmdldFtrZXldO1xuXHRcdHZhciBzdmFsID0gc291cmNlW2tleV07XG5cblx0XHRpZiAoaGVscGVycy5pc09iamVjdCh0dmFsKSAmJiBoZWxwZXJzLmlzT2JqZWN0KHN2YWwpKSB7XG5cdFx0XHRoZWxwZXJzLm1lcmdlSWYodHZhbCwgc3ZhbCk7XG5cdFx0fSBlbHNlIGlmICghdGFyZ2V0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdHRhcmdldFtrZXldID0gaGVscGVycy5jbG9uZShzdmFsKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJlY3Vyc2l2ZWx5IGRlZXAgY29waWVzIGBzb3VyY2VgIHByb3BlcnRpZXMgaW50byBgdGFyZ2V0YCB3aXRoIHRoZSBnaXZlbiBgb3B0aW9uc2AuXG5cdCAqIElNUE9SVEFOVDogYHRhcmdldGAgaXMgbm90IGNsb25lZCBhbmQgd2lsbCBiZSB1cGRhdGVkIHdpdGggYHNvdXJjZWAgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IGluIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSBtZXJnZWQgaW50by5cblx0ICogQHBhcmFtIHtvYmplY3R8b2JqZWN0W119IHNvdXJjZSAtIE9iamVjdChzKSB0byBtZXJnZSBpbnRvIGB0YXJnZXRgLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gTWVyZ2luZyBvcHRpb25zOlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5tZXJnZXJdIC0gVGhlIG1lcmdlIG1ldGhvZCAoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0ICogQHJldHVybnMge29iamVjdH0gVGhlIGB0YXJnZXRgIG9iamVjdC5cblx0ICovXG5cdG1lcmdlOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciBzb3VyY2VzID0gaGVscGVycy5pc0FycmF5KHNvdXJjZSkgPyBzb3VyY2UgOiBbc291cmNlXTtcblx0XHR2YXIgaWxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuXHRcdHZhciBtZXJnZSwgaSwga2V5cywga2xlbiwgaztcblxuXHRcdGlmICghaGVscGVycy5pc09iamVjdCh0YXJnZXQpKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdG1lcmdlID0gb3B0aW9ucy5tZXJnZXIgfHwgaGVscGVycy5fbWVyZ2VyO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0c291cmNlID0gc291cmNlc1tpXTtcblx0XHRcdGlmICghaGVscGVycy5pc09iamVjdChzb3VyY2UpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblx0XHRcdGZvciAoayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsraykge1xuXHRcdFx0XHRtZXJnZShrZXlzW2tdLCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblx0fSxcblxuXHQvKipcblx0ICogUmVjdXJzaXZlbHkgZGVlcCBjb3BpZXMgYHNvdXJjZWAgcHJvcGVydGllcyBpbnRvIGB0YXJnZXRgICpvbmx5KiBpZiBub3QgZGVmaW5lZCBpbiB0YXJnZXQuXG5cdCAqIElNUE9SVEFOVDogYHRhcmdldGAgaXMgbm90IGNsb25lZCBhbmQgd2lsbCBiZSB1cGRhdGVkIHdpdGggYHNvdXJjZWAgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IGluIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSBtZXJnZWQgaW50by5cblx0ICogQHBhcmFtIHtvYmplY3R8b2JqZWN0W119IHNvdXJjZSAtIE9iamVjdChzKSB0byBtZXJnZSBpbnRvIGB0YXJnZXRgLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgYHRhcmdldGAgb2JqZWN0LlxuXHQgKi9cblx0bWVyZ2VJZjogZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcblx0XHRyZXR1cm4gaGVscGVycy5tZXJnZSh0YXJnZXQsIHNvdXJjZSwge21lcmdlcjogaGVscGVycy5fbWVyZ2VySWZ9KTtcblx0fSxcblxuXHQvKipcblx0ICogQXBwbGllcyB0aGUgY29udGVudHMgb2YgdHdvIG9yIG1vcmUgb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdCBpbiB3aGljaCBhbGwgb2JqZWN0cyBhcmUgbWVyZ2VkIGludG8uXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBhcmcxIC0gT2JqZWN0IGNvbnRhaW5pbmcgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIG1lcmdlIGluIHRhcmdldC5cblx0ICogQHBhcmFtIHtvYmplY3R9IGFyZ04gLSBBZGRpdGlvbmFsIG9iamVjdHMgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIG1lcmdlIGluIHRhcmdldC5cblx0ICogQHJldHVybnMge29iamVjdH0gVGhlIGB0YXJnZXRgIG9iamVjdC5cblx0ICovXG5cdGV4dGVuZDogT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRyZXR1cm4gaGVscGVycy5tZXJnZSh0YXJnZXQsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwge1xuXHRcdFx0bWVyZ2VyOiBmdW5jdGlvbihrZXksIGRzdCwgc3JjKSB7XG5cdFx0XHRcdGRzdFtrZXldID0gc3JjW2tleV07XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEJhc2ljIGphdmFzY3JpcHQgaW5oZXJpdGFuY2UgYmFzZWQgb24gdGhlIG1vZGVsIGNyZWF0ZWQgaW4gQmFja2JvbmUuanNcblx0ICovXG5cdGluaGVyaXRzOiBmdW5jdGlvbihleHRlbnNpb25zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgQ2hhcnRFbGVtZW50ID0gKGV4dGVuc2lvbnMgJiYgZXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eSgnY29uc3RydWN0b3InKSkgPyBleHRlbnNpb25zLmNvbnN0cnVjdG9yIDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9O1xuXG5cdFx0dmFyIFN1cnJvZ2F0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5jb25zdHJ1Y3RvciA9IENoYXJ0RWxlbWVudDtcblx0XHR9O1xuXG5cdFx0U3Vycm9nYXRlLnByb3RvdHlwZSA9IG1lLnByb3RvdHlwZTtcblx0XHRDaGFydEVsZW1lbnQucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZSgpO1xuXHRcdENoYXJ0RWxlbWVudC5leHRlbmQgPSBoZWxwZXJzLmluaGVyaXRzO1xuXG5cdFx0aWYgKGV4dGVuc2lvbnMpIHtcblx0XHRcdGhlbHBlcnMuZXh0ZW5kKENoYXJ0RWxlbWVudC5wcm90b3R5cGUsIGV4dGVuc2lvbnMpO1xuXHRcdH1cblxuXHRcdENoYXJ0RWxlbWVudC5fX3N1cGVyX18gPSBtZS5wcm90b3R5cGU7XG5cdFx0cmV0dXJuIENoYXJ0RWxlbWVudDtcblx0fSxcblxuXHRfZGVwcmVjYXRlZDogZnVuY3Rpb24oc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuXHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oc2NvcGUgKyAnOiBcIicgKyBwcmV2aW91cyArXG5cdFx0XHRcdCdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGhlbHBlcnNfY29yZSA9IGhlbHBlcnM7XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5jYWxsYmFjayBpbnN0ZWFkLlxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuY2FsbENhbGxiYWNrXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmNhbGxDYWxsYmFjayA9IGhlbHBlcnMuY2FsbGJhY2s7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiBpbnN0ZWFkLlxuICogQXJyYXkucHJvdG90eXBlLmluZGV4T2YgY29tcGF0aWJpbGl0eTogQ2hyb21lLCBPcGVyYSwgU2FmYXJpLCBGRjEuNSssIElFOStcbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmluZGV4T2ZcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBmcm9tSW5kZXgpIHtcblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJyYXksIGl0ZW0sIGZyb21JbmRleCk7XG59O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy52YWx1ZU9yRGVmYXVsdCBpbnN0ZWFkLlxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuZ2V0VmFsdWVPckRlZmF1bHRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuZ2V0VmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQgaW5zdGVhZC5cbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblxuLyoqXG4gKiBFYXNpbmcgZnVuY3Rpb25zIGFkYXB0ZWQgZnJvbSBSb2JlcnQgUGVubmVyJ3MgZWFzaW5nIGVxdWF0aW9ucy5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5lYXNpbmdFZmZlY3RzXG4gKiBAc2VlIGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmcvXG4gKi9cbnZhciBlZmZlY3RzID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdDtcblx0fSxcblxuXHRlYXNlSW5RdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQgKiB0O1xuXHR9LFxuXG5cdGVhc2VPdXRRdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC10ICogKHQgLSAyKTtcblx0fSxcblxuXHRlYXNlSW5PdXRRdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogdCAqIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAtMC41ICogKCgtLXQpICogKHQgLSAyKSAtIDEpO1xuXHR9LFxuXG5cdGVhc2VJbkN1YmljOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQgKiB0ICogdDtcblx0fSxcblxuXHRlYXNlT3V0Q3ViaWM6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gKHQgPSB0IC0gMSkgKiB0ICogdCArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0Q3ViaWM6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiB0ICogdCAqIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpO1xuXHR9LFxuXG5cdGVhc2VJblF1YXJ0OiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQgKiB0ICogdCAqIHQ7XG5cdH0sXG5cblx0ZWFzZU91dFF1YXJ0OiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC0oKHQgPSB0IC0gMSkgKiB0ICogdCAqIHQgLSAxKTtcblx0fSxcblxuXHRlYXNlSW5PdXRRdWFydDogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIHQgKiB0ICogdCAqIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMik7XG5cdH0sXG5cblx0ZWFzZUluUXVpbnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0ICogdCAqIHQ7XG5cdH0sXG5cblx0ZWFzZU91dFF1aW50OiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuICh0ID0gdCAtIDEpICogdCAqIHQgKiB0ICogdCArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0UXVpbnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiB0ICogdCAqIHQgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKTtcblx0fSxcblxuXHRlYXNlSW5TaW5lOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC1NYXRoLmNvcyh0ICogKE1hdGguUEkgLyAyKSkgKyAxO1xuXHR9LFxuXG5cdGVhc2VPdXRTaW5lOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIE1hdGguc2luKHQgKiAoTWF0aC5QSSAvIDIpKTtcblx0fSxcblxuXHRlYXNlSW5PdXRTaW5lOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQpIC0gMSk7XG5cdH0sXG5cblx0ZWFzZUluRXhwbzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAodCA9PT0gMCkgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTtcblx0fSxcblxuXHRlYXNlT3V0RXhwbzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAodCA9PT0gMSkgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIHQpICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRFeHBvOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRpZiAodCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSk7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqIC0tdCkgKyAyKTtcblx0fSxcblxuXHRlYXNlSW5DaXJjOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPj0gMSkge1xuXHRcdFx0cmV0dXJuIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAtKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSk7XG5cdH0sXG5cblx0ZWFzZU91dENpcmM6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KDEgLSAodCA9IHQgLSAxKSAqIHQpO1xuXHR9LFxuXG5cdGVhc2VJbk91dENpcmM6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSk7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSk7XG5cdH0sXG5cblx0ZWFzZUluRWxhc3RpYzogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHR2YXIgcCA9IDA7XG5cdFx0dmFyIGEgPSAxO1xuXHRcdGlmICh0ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0aWYgKHQgPT09IDEpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0XHRpZiAoIXApIHtcblx0XHRcdHAgPSAwLjM7XG5cdFx0fVxuXHRcdGlmIChhIDwgMSkge1xuXHRcdFx0YSA9IDE7XG5cdFx0XHRzID0gcCAvIDQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxIC8gYSk7XG5cdFx0fVxuXHRcdHJldHVybiAtKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpO1xuXHR9LFxuXG5cdGVhc2VPdXRFbGFzdGljOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHZhciBwID0gMDtcblx0XHR2YXIgYSA9IDE7XG5cdFx0aWYgKHQgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRpZiAodCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmICghcCkge1xuXHRcdFx0cCA9IDAuMztcblx0XHR9XG5cdFx0aWYgKGEgPCAxKSB7XG5cdFx0XHRhID0gMTtcblx0XHRcdHMgPSBwIC8gNDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTtcblx0XHR9XG5cdFx0cmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dEVsYXN0aWM6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0dmFyIHAgPSAwO1xuXHRcdHZhciBhID0gMTtcblx0XHRpZiAodCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGlmICgodCAvPSAwLjUpID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKCFwKSB7XG5cdFx0XHRwID0gMC40NTtcblx0XHR9XG5cdFx0aWYgKGEgPCAxKSB7XG5cdFx0XHRhID0gMTtcblx0XHRcdHMgPSBwIC8gNDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTtcblx0XHR9XG5cdFx0aWYgKHQgPCAxKSB7XG5cdFx0XHRyZXR1cm4gLTAuNSAqIChhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApKTtcblx0XHR9XG5cdFx0cmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICogMC41ICsgMTtcblx0fSxcblx0ZWFzZUluQmFjazogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRyZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcblx0fSxcblxuXHRlYXNlT3V0QmFjazogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRyZXR1cm4gKHQgPSB0IC0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dEJhY2s6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogKHQgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCAtIHMpKTtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKTtcblx0fSxcblxuXHRlYXNlSW5Cb3VuY2U6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gMSAtIGVmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCk7XG5cdH0sXG5cblx0ZWFzZU91dEJvdW5jZTogZnVuY3Rpb24odCkge1xuXHRcdGlmICh0IDwgKDEgLyAyLjc1KSkge1xuXHRcdFx0cmV0dXJuIDcuNTYyNSAqIHQgKiB0O1xuXHRcdH1cblx0XHRpZiAodCA8ICgyIC8gMi43NSkpIHtcblx0XHRcdHJldHVybiA3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIDAuNzU7XG5cdFx0fVxuXHRcdGlmICh0IDwgKDIuNSAvIDIuNzUpKSB7XG5cdFx0XHRyZXR1cm4gNy41NjI1ICogKHQgLT0gKDIuMjUgLyAyLjc1KSkgKiB0ICsgMC45Mzc1O1xuXHRcdH1cblx0XHRyZXR1cm4gNy41NjI1ICogKHQgLT0gKDIuNjI1IC8gMi43NSkpICogdCArIDAuOTg0Mzc1O1xuXHR9LFxuXG5cdGVhc2VJbk91dEJvdW5jZTogZnVuY3Rpb24odCkge1xuXHRcdGlmICh0IDwgMC41KSB7XG5cdFx0XHRyZXR1cm4gZWZmZWN0cy5lYXNlSW5Cb3VuY2UodCAqIDIpICogMC41O1xuXHRcdH1cblx0XHRyZXR1cm4gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKHQgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XG5cdH1cbn07XG5cbnZhciBoZWxwZXJzX2Vhc2luZyA9IHtcblx0ZWZmZWN0czogZWZmZWN0c1xufTtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmVhc2luZy5lZmZlY3RzIGluc3RlYWQuXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5lYXNpbmdFZmZlY3RzXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzX2NvcmUuZWFzaW5nRWZmZWN0cyA9IGVmZmVjdHM7XG5cbnZhciBQSSA9IE1hdGguUEk7XG52YXIgUkFEX1BFUl9ERUcgPSBQSSAvIDE4MDtcbnZhciBET1VCTEVfUEkgPSBQSSAqIDI7XG52YXIgSEFMRl9QSSA9IFBJIC8gMjtcbnZhciBRVUFSVEVSX1BJID0gUEkgLyA0O1xudmFyIFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5jYW52YXNcbiAqL1xudmFyIGV4cG9ydHMkMSA9IHtcblx0LyoqXG5cdCAqIENsZWFycyB0aGUgZW50aXJlIGNhbnZhcyBhc3NvY2lhdGVkIHRvIHRoZSBnaXZlbiBgY2hhcnRgLlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBmb3Igd2hpY2ggdG8gY2xlYXIgdGhlIGNhbnZhcy5cblx0ICovXG5cdGNsZWFyOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdGNoYXJ0LmN0eC5jbGVhclJlY3QoMCwgMCwgY2hhcnQud2lkdGgsIGNoYXJ0LmhlaWdodCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBcInBhdGhcIiBmb3IgYSByZWN0YW5nbGUgd2l0aCByb3VuZGVkIGNvcm5lcnMgYXQgcG9zaXRpb24gKHgsIHkpIHdpdGggYVxuXHQgKiBnaXZlbiBzaXplICh3aWR0aCwgaGVpZ2h0KSBhbmQgdGhlIHNhbWUgYHJhZGl1c2AgZm9yIGFsbCBjb3JuZXJzLlxuXHQgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IC0gVGhlIGNhbnZhcyAyRCBDb250ZXh0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IGF4aXMgb2YgdGhlIGNvb3JkaW5hdGUgZm9yIHRoZSByZWN0YW5nbGUgc3RhcnRpbmcgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgYXhpcyBvZiB0aGUgY29vcmRpbmF0ZSBmb3IgdGhlIHJlY3RhbmdsZSBzdGFydGluZyBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHJlY3RhbmdsZSdzIHdpZHRoLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIHJlY3RhbmdsZSdzIGhlaWdodC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIFRoZSByb3VuZGVkIGFtb3VudCAoaW4gcGl4ZWxzKSBmb3IgdGhlIGZvdXIgY29ybmVycy5cblx0ICogQHRvZG8gaGFuZGxlIGByYWRpdXNgIGFzIHRvcC1sZWZ0LCB0b3AtcmlnaHQsIGJvdHRvbS1yaWdodCwgYm90dG9tLWxlZnQgYXJyYXkvb2JqZWN0P1xuXHQgKi9cblx0cm91bmRlZFJlY3Q6IGZ1bmN0aW9uKGN0eCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG5cdFx0aWYgKHJhZGl1cykge1xuXHRcdFx0dmFyIHIgPSBNYXRoLm1pbihyYWRpdXMsIGhlaWdodCAvIDIsIHdpZHRoIC8gMik7XG5cdFx0XHR2YXIgbGVmdCA9IHggKyByO1xuXHRcdFx0dmFyIHRvcCA9IHkgKyByO1xuXHRcdFx0dmFyIHJpZ2h0ID0geCArIHdpZHRoIC0gcjtcblx0XHRcdHZhciBib3R0b20gPSB5ICsgaGVpZ2h0IC0gcjtcblxuXHRcdFx0Y3R4Lm1vdmVUbyh4LCB0b3ApO1xuXHRcdFx0aWYgKGxlZnQgPCByaWdodCAmJiB0b3AgPCBib3R0b20pIHtcblx0XHRcdFx0Y3R4LmFyYyhsZWZ0LCB0b3AsIHIsIC1QSSwgLUhBTEZfUEkpO1xuXHRcdFx0XHRjdHguYXJjKHJpZ2h0LCB0b3AsIHIsIC1IQUxGX1BJLCAwKTtcblx0XHRcdFx0Y3R4LmFyYyhyaWdodCwgYm90dG9tLCByLCAwLCBIQUxGX1BJKTtcblx0XHRcdFx0Y3R4LmFyYyhsZWZ0LCBib3R0b20sIHIsIEhBTEZfUEksIFBJKTtcblx0XHRcdH0gZWxzZSBpZiAobGVmdCA8IHJpZ2h0KSB7XG5cdFx0XHRcdGN0eC5tb3ZlVG8obGVmdCwgeSk7XG5cdFx0XHRcdGN0eC5hcmMocmlnaHQsIHRvcCwgciwgLUhBTEZfUEksIEhBTEZfUEkpO1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIHRvcCwgciwgSEFMRl9QSSwgUEkgKyBIQUxGX1BJKTtcblx0XHRcdH0gZWxzZSBpZiAodG9wIDwgYm90dG9tKSB7XG5cdFx0XHRcdGN0eC5hcmMobGVmdCwgdG9wLCByLCAtUEksIDApO1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIGJvdHRvbSwgciwgMCwgUEkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3R4LmFyYyhsZWZ0LCB0b3AsIHIsIC1QSSwgUEkpO1xuXHRcdFx0fVxuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4LCB5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3R4LnJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHR9LFxuXG5cdGRyYXdQb2ludDogZnVuY3Rpb24oY3R4LCBzdHlsZSwgcmFkaXVzLCB4LCB5LCByb3RhdGlvbikge1xuXHRcdHZhciB0eXBlLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzaXplLCBjb3JuZXJSYWRpdXM7XG5cdFx0dmFyIHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuXG5cdFx0aWYgKHN0eWxlICYmIHR5cGVvZiBzdHlsZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdHR5cGUgPSBzdHlsZS50b1N0cmluZygpO1xuXHRcdFx0aWYgKHR5cGUgPT09ICdbb2JqZWN0IEhUTUxJbWFnZUVsZW1lbnRdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ2FudmFzRWxlbWVudF0nKSB7XG5cdFx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRcdGN0eC50cmFuc2xhdGUoeCwgeSk7XG5cdFx0XHRcdGN0eC5yb3RhdGUocmFkKTtcblx0XHRcdFx0Y3R4LmRyYXdJbWFnZShzdHlsZSwgLXN0eWxlLndpZHRoIC8gMiwgLXN0eWxlLmhlaWdodCAvIDIsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuXHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRzd2l0Y2ggKHN0eWxlKSB7XG5cdFx0Ly8gRGVmYXVsdCBpbmNsdWRlcyBjaXJjbGVcblx0XHRkZWZhdWx0OlxuXHRcdFx0Y3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIERPVUJMRV9QSSk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICd0cmlhbmdsZSc6XG5cdFx0XHRjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG5cdFx0XHRyYWQgKz0gVFdPX1RISVJEU19QSTtcblx0XHRcdGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcblx0XHRcdHJhZCArPSBUV09fVEhJUkRTX1BJO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAncmVjdFJvdW5kZWQnOlxuXHRcdFx0Ly8gTk9URTogdGhlIHJvdW5kZWQgcmVjdCBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VkIHRvIHVzZSBgYXJjYCBpbnN0ZWFkIG9mXG5cdFx0XHQvLyBgcXVhZHJhdGljQ3VydmVUb2Agc2luY2UgaXQgZ2VuZXJhdGVzIGJldHRlciByZXN1bHRzIHdoZW4gcmVjdCBpc1xuXHRcdFx0Ly8gYWxtb3N0IGEgY2lyY2xlLiAwLjUxNiAoaW5zdGVhZCBvZiAwLjUpIHByb2R1Y2VzIHJlc3VsdHMgd2l0aCB2aXN1YWxseVxuXHRcdFx0Ly8gY2xvc2VyIHByb3BvcnRpb24gdG8gdGhlIHByZXZpb3VzIGltcGwgYW5kIGl0IGlzIGluc2NyaWJlZCBpbiB0aGVcblx0XHRcdC8vIGNpcmNsZSB3aXRoIGByYWRpdXNgLiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIGZvbGxvd2luZyBQUnM6XG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTU5N1xuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU4NThcblx0XHRcdGNvcm5lclJhZGl1cyA9IHJhZGl1cyAqIDAuNTE2O1xuXHRcdFx0c2l6ZSA9IHJhZGl1cyAtIGNvcm5lclJhZGl1cztcblx0XHRcdHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuXHRcdFx0Y3R4LmFyYyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gUEksIHJhZCAtIEhBTEZfUEkpO1xuXHRcdFx0Y3R4LmFyYyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gSEFMRl9QSSwgcmFkKTtcblx0XHRcdGN0eC5hcmMoeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCwgcmFkICsgSEFMRl9QSSk7XG5cdFx0XHRjdHguYXJjKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgKyBIQUxGX1BJLCByYWQgKyBQSSk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyZWN0Jzpcblx0XHRcdGlmICghcm90YXRpb24pIHtcblx0XHRcdFx0c2l6ZSA9IE1hdGguU1FSVDFfMiAqIHJhZGl1cztcblx0XHRcdFx0Y3R4LnJlY3QoeCAtIHNpemUsIHkgLSBzaXplLCAyICogc2l6ZSwgMiAqIHNpemUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdHJhZCArPSBRVUFSVEVSX1BJO1xuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgJ3JlY3RSb3QnOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2Nyb3NzUm90Jzpcblx0XHRcdHJhZCArPSBRVUFSVEVSX1BJO1xuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdGNhc2UgJ2Nyb3NzJzpcblx0XHRcdHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuXHRcdFx0eU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG5cdFx0XHRjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG5cdFx0XHRjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdzdGFyJzpcblx0XHRcdHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuXHRcdFx0eU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG5cdFx0XHRjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG5cdFx0XHRjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG5cdFx0XHRyYWQgKz0gUVVBUlRFUl9QSTtcblx0XHRcdHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuXHRcdFx0eU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG5cdFx0XHRjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG5cdFx0XHRjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdsaW5lJzpcblx0XHRcdHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuXHRcdFx0eU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG5cdFx0XHRjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdkYXNoJzpcblx0XHRcdGN0eC5tb3ZlVG8oeCwgeSk7XG5cdFx0XHRjdHgubGluZVRvKHggKyBNYXRoLmNvcyhyYWQpICogcmFkaXVzLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRjdHguZmlsbCgpO1xuXHRcdGN0eC5zdHJva2UoKTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlIHJlY3RhbmdsZVxuXHQgKiBAcGFyYW0ge29iamVjdH0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gdGVzdFxuXHQgKiBAcGFyYW0ge29iamVjdH0gYXJlYSAtIFRoZSByZWN0YW5nbGVcblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfaXNQb2ludEluQXJlYTogZnVuY3Rpb24ocG9pbnQsIGFyZWEpIHtcblx0XHR2YXIgZXBzaWxvbiA9IDFlLTY7IC8vIDFlLTYgaXMgbWFyZ2luIGluIHBpeGVscyBmb3IgYWNjdW11bGF0ZWQgZXJyb3IuXG5cblx0XHRyZXR1cm4gcG9pbnQueCA+IGFyZWEubGVmdCAtIGVwc2lsb24gJiYgcG9pbnQueCA8IGFyZWEucmlnaHQgKyBlcHNpbG9uICYmXG5cdFx0XHRwb2ludC55ID4gYXJlYS50b3AgLSBlcHNpbG9uICYmIHBvaW50LnkgPCBhcmVhLmJvdHRvbSArIGVwc2lsb247XG5cdH0sXG5cblx0Y2xpcEFyZWE6IGZ1bmN0aW9uKGN0eCwgYXJlYSkge1xuXHRcdGN0eC5zYXZlKCk7XG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGN0eC5yZWN0KGFyZWEubGVmdCwgYXJlYS50b3AsIGFyZWEucmlnaHQgLSBhcmVhLmxlZnQsIGFyZWEuYm90dG9tIC0gYXJlYS50b3ApO1xuXHRcdGN0eC5jbGlwKCk7XG5cdH0sXG5cblx0dW5jbGlwQXJlYTogZnVuY3Rpb24oY3R4KSB7XG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fSxcblxuXHRsaW5lVG86IGZ1bmN0aW9uKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCkge1xuXHRcdHZhciBzdGVwcGVkID0gdGFyZ2V0LnN0ZXBwZWRMaW5lO1xuXHRcdGlmIChzdGVwcGVkKSB7XG5cdFx0XHRpZiAoc3RlcHBlZCA9PT0gJ21pZGRsZScpIHtcblx0XHRcdFx0dmFyIG1pZHBvaW50ID0gKHByZXZpb3VzLnggKyB0YXJnZXQueCkgLyAyLjA7XG5cdFx0XHRcdGN0eC5saW5lVG8obWlkcG9pbnQsIGZsaXAgPyB0YXJnZXQueSA6IHByZXZpb3VzLnkpO1xuXHRcdFx0XHRjdHgubGluZVRvKG1pZHBvaW50LCBmbGlwID8gcHJldmlvdXMueSA6IHRhcmdldC55KTtcblx0XHRcdH0gZWxzZSBpZiAoKHN0ZXBwZWQgPT09ICdhZnRlcicgJiYgIWZsaXApIHx8IChzdGVwcGVkICE9PSAnYWZ0ZXInICYmIGZsaXApKSB7XG5cdFx0XHRcdGN0eC5saW5lVG8ocHJldmlvdXMueCwgdGFyZ2V0LnkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG5cdFx0XHR9XG5cdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCF0YXJnZXQudGVuc2lvbikge1xuXHRcdFx0Y3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGN0eC5iZXppZXJDdXJ2ZVRvKFxuXHRcdFx0ZmxpcCA/IHByZXZpb3VzLmNvbnRyb2xQb2ludFByZXZpb3VzWCA6IHByZXZpb3VzLmNvbnRyb2xQb2ludE5leHRYLFxuXHRcdFx0ZmxpcCA/IHByZXZpb3VzLmNvbnRyb2xQb2ludFByZXZpb3VzWSA6IHByZXZpb3VzLmNvbnRyb2xQb2ludE5leHRZLFxuXHRcdFx0ZmxpcCA/IHRhcmdldC5jb250cm9sUG9pbnROZXh0WCA6IHRhcmdldC5jb250cm9sUG9pbnRQcmV2aW91c1gsXG5cdFx0XHRmbGlwID8gdGFyZ2V0LmNvbnRyb2xQb2ludE5leHRZIDogdGFyZ2V0LmNvbnRyb2xQb2ludFByZXZpb3VzWSxcblx0XHRcdHRhcmdldC54LFxuXHRcdFx0dGFyZ2V0LnkpO1xuXHR9XG59O1xuXG52YXIgaGVscGVyc19jYW52YXMgPSBleHBvcnRzJDE7XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5jYW52YXMuY2xlYXIgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5jbGVhclxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVyc19jb3JlLmNsZWFyID0gZXhwb3J0cyQxLmNsZWFyO1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5jYW52YXMucm91bmRlZFJlY3QgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5kcmF3Um91bmRlZFJlY3RhbmdsZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVyc19jb3JlLmRyYXdSb3VuZGVkUmVjdGFuZ2xlID0gZnVuY3Rpb24oY3R4KSB7XG5cdGN0eC5iZWdpblBhdGgoKTtcblx0ZXhwb3J0cyQxLnJvdW5kZWRSZWN0LmFwcGx5KGV4cG9ydHMkMSwgYXJndW1lbnRzKTtcbn07XG5cbnZhciBkZWZhdWx0cyA9IHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfc2V0OiBmdW5jdGlvbihzY29wZSwgdmFsdWVzKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnNfY29yZS5tZXJnZSh0aGlzW3Njb3BlXSB8fCAodGhpc1tzY29wZV0gPSB7fSksIHZhbHVlcyk7XG5cdH1cbn07XG5cbi8vIFRPRE8odjMpOiByZW1vdmUgJ2dsb2JhbCcgZnJvbSBuYW1lc3BhY2UuICBhbGwgZGVmYXVsdCBhcmUgZ2xvYmFsIGFuZFxuLy8gdGhlcmUncyBpbmNvbnNpc3RlbmN5IGFyb3VuZCB3aGljaCBvcHRpb25zIGFyZSB1bmRlciAnZ2xvYmFsJ1xuZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRkZWZhdWx0Q29sb3I6ICdyZ2JhKDAsMCwwLDAuMSknLFxuXHRkZWZhdWx0Rm9udENvbG9yOiAnIzY2NicsXG5cdGRlZmF1bHRGb250RmFtaWx5OiBcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsXG5cdGRlZmF1bHRGb250U2l6ZTogMTIsXG5cdGRlZmF1bHRGb250U3R5bGU6ICdub3JtYWwnLFxuXHRkZWZhdWx0TGluZUhlaWdodDogMS4yLFxuXHRzaG93TGluZXM6IHRydWVcbn0pO1xuXG52YXIgY29yZV9kZWZhdWx0cyA9IGRlZmF1bHRzO1xuXG52YXIgdmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzX2NvcmUudmFsdWVPckRlZmF1bHQ7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGZvbnQgb2JqZWN0IGludG8gYSBDU1MgZm9udCBzdHJpbmcuXG4gKiBAcGFyYW0ge29iamVjdH0gZm9udCAtIEEgZm9udCBvYmplY3QuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBDU1MgZm9udCBzdHJpbmcuIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdG9Gb250U3RyaW5nKGZvbnQpIHtcblx0aWYgKCFmb250IHx8IGhlbHBlcnNfY29yZS5pc051bGxPclVuZGVmKGZvbnQuc2l6ZSkgfHwgaGVscGVyc19jb3JlLmlzTnVsbE9yVW5kZWYoZm9udC5mYW1pbHkpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gKGZvbnQuc3R5bGUgPyBmb250LnN0eWxlICsgJyAnIDogJycpXG5cdFx0KyAoZm9udC53ZWlnaHQgPyBmb250LndlaWdodCArICcgJyA6ICcnKVxuXHRcdCsgZm9udC5zaXplICsgJ3B4ICdcblx0XHQrIGZvbnQuZmFtaWx5O1xufVxuXG4vKipcbiAqIEBhbGlhcyBDaGFydC5oZWxwZXJzLm9wdGlvbnNcbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIGhlbHBlcnNfb3B0aW9ucyA9IHtcblx0LyoqXG5cdCAqIENvbnZlcnRzIHRoZSBnaXZlbiBsaW5lIGhlaWdodCBgdmFsdWVgIGluIHBpeGVscyBmb3IgYSBzcGVjaWZpYyBmb250IGBzaXplYC5cblx0ICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZSAtIFRoZSBsaW5lSGVpZ2h0IHRvIHBhcnNlIChlZy4gMS42LCAnMTRweCcsICc3NSUnLCAnMS42ZW0nKS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHNpemUgLSBUaGUgZm9udCBzaXplIChpbiBwaXhlbHMpIHVzZWQgdG8gcmVzb2x2ZSByZWxhdGl2ZSBgdmFsdWVgLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZWZmZWN0aXZlIGxpbmUgaGVpZ2h0IGluIHBpeGVscyAoc2l6ZSAqIDEuMiBpZiB2YWx1ZSBpcyBpbnZhbGlkKS5cblx0ICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGluZS1oZWlnaHRcblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHR0b0xpbmVIZWlnaHQ6IGZ1bmN0aW9uKHZhbHVlLCBzaXplKSB7XG5cdFx0dmFyIG1hdGNoZXMgPSAoJycgKyB2YWx1ZSkubWF0Y2goL14obm9ybWFsfChcXGQrKD86XFwuXFxkKyk/KShweHxlbXwlKT8pJC8pO1xuXHRcdGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzWzFdID09PSAnbm9ybWFsJykge1xuXHRcdFx0cmV0dXJuIHNpemUgKiAxLjI7XG5cdFx0fVxuXG5cdFx0dmFsdWUgPSArbWF0Y2hlc1syXTtcblxuXHRcdHN3aXRjaCAobWF0Y2hlc1szXSkge1xuXHRcdGNhc2UgJ3B4Jzpcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRjYXNlICclJzpcblx0XHRcdHZhbHVlIC89IDEwMDtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBzaXplICogdmFsdWU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgcGFkZGluZyBvYmplY3Qgd2l0aCBwcmUtY29tcHV0ZWQgd2lkdGgvaGVpZ2h0LlxuXHQgKiBAcGFyYW0ge251bWJlcnxvYmplY3R9IHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29tcG9uZW50LFxuXHQgKiAgZWxzZSwgaWYgYW5kIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgd2lkdGgsIGhlaWdodClcblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHR0b1BhZGRpbmc6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dmFyIHQsIHIsIGIsIGw7XG5cblx0XHRpZiAoaGVscGVyc19jb3JlLmlzT2JqZWN0KHZhbHVlKSkge1xuXHRcdFx0dCA9ICt2YWx1ZS50b3AgfHwgMDtcblx0XHRcdHIgPSArdmFsdWUucmlnaHQgfHwgMDtcblx0XHRcdGIgPSArdmFsdWUuYm90dG9tIHx8IDA7XG5cdFx0XHRsID0gK3ZhbHVlLmxlZnQgfHwgMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dCA9IHIgPSBiID0gbCA9ICt2YWx1ZSB8fCAwO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHQsXG5cdFx0XHRyaWdodDogcixcblx0XHRcdGJvdHRvbTogYixcblx0XHRcdGxlZnQ6IGwsXG5cdFx0XHRoZWlnaHQ6IHQgKyBiLFxuXHRcdFx0d2lkdGg6IGwgKyByXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogUGFyc2VzIGZvbnQgb3B0aW9ucyBhbmQgcmV0dXJucyB0aGUgZm9udCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQSBvYmplY3QgdGhhdCBjb250YWlucyBmb250IG9wdGlvbnMgdG8gYmUgcGFyc2VkLlxuXHQgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBmb250IG9iamVjdC5cblx0ICogQHRvZG8gU3VwcG9ydCBmb250Liogb3B0aW9ucyBhbmQgcmVuYW1lZCB0byB0b0ZvbnQoKS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9wYXJzZUZvbnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblx0XHR2YXIgc2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0dmFyIGZvbnQgPSB7XG5cdFx0XHRmYW1pbHk6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpLFxuXHRcdFx0bGluZUhlaWdodDogaGVscGVyc19jb3JlLm9wdGlvbnMudG9MaW5lSGVpZ2h0KHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubGluZUhlaWdodCwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdExpbmVIZWlnaHQpLCBzaXplKSxcblx0XHRcdHNpemU6IHNpemUsXG5cdFx0XHRzdHlsZTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mb250U3R5bGUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U3R5bGUpLFxuXHRcdFx0d2VpZ2h0OiBudWxsLFxuXHRcdFx0c3RyaW5nOiAnJ1xuXHRcdH07XG5cblx0XHRmb250LnN0cmluZyA9IHRvRm9udFN0cmluZyhmb250KTtcblx0XHRyZXR1cm4gZm9udDtcblx0fSxcblxuXHQvKipcblx0ICogRXZhbHVhdGVzIHRoZSBnaXZlbiBgaW5wdXRzYCBzZXF1ZW50aWFsbHkgYW5kIHJldHVybnMgdGhlIGZpcnN0IGRlZmluZWQgdmFsdWUuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGlucHV0cyAtIEFuIGFycmF5IG9mIHZhbHVlcywgZmFsbGluZyBiYWNrIHRvIHRoZSBsYXN0IHZhbHVlLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW2NvbnRleHRdIC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYSBmdW5jdGlvbiwgdGhlIHZhbHVlXG5cdCAqIGlzIGNhbGxlZCB3aXRoIGBjb250ZXh0YCBhcyBmaXJzdCBhcmd1bWVudCBhbmQgdGhlIHJlc3VsdCBiZWNvbWVzIHRoZSBuZXcgaW5wdXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXhdIC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYW4gYXJyYXksIHRoZSB2YWx1ZVxuXHQgKiBhdCBgaW5kZXhgIGJlY29tZSB0aGUgbmV3IGlucHV0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW2luZm9dIC0gb2JqZWN0IHRvIHJldHVybiBpbmZvcm1hdGlvbiBhYm91dCByZXNvbHV0aW9uIGluXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luZm8uY2FjaGVhYmxlXSAtIFdpbGwgYmUgc2V0IHRvIGBmYWxzZWAgaWYgb3B0aW9uIGlzIG5vdCBjYWNoZWFibGUuXG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0cmVzb2x2ZTogZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0LCBpbmRleCwgaW5mbykge1xuXHRcdHZhciBjYWNoZWFibGUgPSB0cnVlO1xuXHRcdHZhciBpLCBpbGVuLCB2YWx1ZTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHR2YWx1ZSA9IGlucHV0c1tpXTtcblx0XHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcblx0XHRcdFx0Y2FjaGVhYmxlID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBoZWxwZXJzX2NvcmUuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtpbmRleF07XG5cdFx0XHRcdGNhY2hlYWJsZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKGluZm8gJiYgIWNhY2hlYWJsZSkge1xuXHRcdFx0XHRcdGluZm8uY2FjaGVhYmxlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLyoqXG4gKiBAYWxpYXMgQ2hhcnQuaGVscGVycy5tYXRoXG4gKiBAbmFtZXNwYWNlXG4gKi9cbnZhciBleHBvcnRzJDIgPSB7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGZhY3RvcnMgc29ydGVkIGZyb20gMSB0byBzcXJ0KHZhbHVlKVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2ZhY3Rvcml6ZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0dmFyIHNxcnQgPSBNYXRoLnNxcnQodmFsdWUpO1xuXHRcdHZhciBpO1xuXG5cdFx0Zm9yIChpID0gMTsgaSA8IHNxcnQ7IGkrKykge1xuXHRcdFx0aWYgKHZhbHVlICUgaSA9PT0gMCkge1xuXHRcdFx0XHRyZXN1bHQucHVzaChpKTtcblx0XHRcdFx0cmVzdWx0LnB1c2godmFsdWUgLyBpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHNxcnQgPT09IChzcXJ0IHwgMCkpIHsgLy8gaWYgdmFsdWUgaXMgYSBzcXVhcmUgbnVtYmVyXG5cdFx0XHRyZXN1bHQucHVzaChzcXJ0KTtcblx0XHR9XG5cblx0XHRyZXN1bHQuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRyZXR1cm4gYSAtIGI7XG5cdFx0fSkucG9wKCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSxcblxuXHRsb2cxMDogTWF0aC5sb2cxMCB8fCBmdW5jdGlvbih4KSB7XG5cdFx0dmFyIGV4cG9uZW50ID0gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTsgLy8gTWF0aC5MT0cxMEUgPSAxIC8gTWF0aC5MTjEwLlxuXHRcdC8vIENoZWNrIGZvciB3aG9sZSBwb3dlcnMgb2YgMTAsXG5cdFx0Ly8gd2hpY2ggZHVlIHRvIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yIHNob3VsZCBiZSBjb3JyZWN0ZWQuXG5cdFx0dmFyIHBvd2VyT2YxMCA9IE1hdGgucm91bmQoZXhwb25lbnQpO1xuXHRcdHZhciBpc1Bvd2VyT2YxMCA9IHggPT09IE1hdGgucG93KDEwLCBwb3dlck9mMTApO1xuXG5cdFx0cmV0dXJuIGlzUG93ZXJPZjEwID8gcG93ZXJPZjEwIDogZXhwb25lbnQ7XG5cdH1cbn07XG5cbnZhciBoZWxwZXJzX21hdGggPSBleHBvcnRzJDI7XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5tYXRoLmxvZzEwIGluc3RlYWQuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnMubG9nMTBcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi45LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnNfY29yZS5sb2cxMCA9IGV4cG9ydHMkMi5sb2cxMDtcblxudmFyIGdldFJ0bEFkYXB0ZXIgPSBmdW5jdGlvbihyZWN0WCwgd2lkdGgpIHtcblx0cmV0dXJuIHtcblx0XHR4OiBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4gcmVjdFggKyByZWN0WCArIHdpZHRoIC0geDtcblx0XHR9LFxuXHRcdHNldFdpZHRoOiBmdW5jdGlvbih3KSB7XG5cdFx0XHR3aWR0aCA9IHc7XG5cdFx0fSxcblx0XHR0ZXh0QWxpZ246IGZ1bmN0aW9uKGFsaWduKSB7XG5cdFx0XHRpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0XHRcdHJldHVybiBhbGlnbjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cdFx0fSxcblx0XHR4UGx1czogZnVuY3Rpb24oeCwgdmFsdWUpIHtcblx0XHRcdHJldHVybiB4IC0gdmFsdWU7XG5cdFx0fSxcblx0XHRsZWZ0Rm9yTHRyOiBmdW5jdGlvbih4LCBpdGVtV2lkdGgpIHtcblx0XHRcdHJldHVybiB4IC0gaXRlbVdpZHRoO1xuXHRcdH0sXG5cdH07XG59O1xuXG52YXIgZ2V0THRyQWRhcHRlciA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4ge1xuXHRcdHg6IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiB4O1xuXHRcdH0sXG5cdFx0c2V0V2lkdGg6IGZ1bmN0aW9uKHcpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHRcdH0sXG5cdFx0dGV4dEFsaWduOiBmdW5jdGlvbihhbGlnbikge1xuXHRcdFx0cmV0dXJuIGFsaWduO1xuXHRcdH0sXG5cdFx0eFBsdXM6IGZ1bmN0aW9uKHgsIHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4geCArIHZhbHVlO1xuXHRcdH0sXG5cdFx0bGVmdEZvckx0cjogZnVuY3Rpb24oeCwgX2l0ZW1XaWR0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdFx0XHRyZXR1cm4geDtcblx0XHR9LFxuXHR9O1xufTtcblxudmFyIGdldEFkYXB0ZXIgPSBmdW5jdGlvbihydGwsIHJlY3RYLCB3aWR0aCkge1xuXHRyZXR1cm4gcnRsID8gZ2V0UnRsQWRhcHRlcihyZWN0WCwgd2lkdGgpIDogZ2V0THRyQWRhcHRlcigpO1xufTtcblxudmFyIG92ZXJyaWRlVGV4dERpcmVjdGlvbiA9IGZ1bmN0aW9uKGN0eCwgZGlyZWN0aW9uKSB7XG5cdHZhciBzdHlsZSwgb3JpZ2luYWw7XG5cdGlmIChkaXJlY3Rpb24gPT09ICdsdHInIHx8IGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcblx0XHRzdHlsZSA9IGN0eC5jYW52YXMuc3R5bGU7XG5cdFx0b3JpZ2luYWwgPSBbXG5cdFx0XHRzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSxcblx0XHRcdHN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2RpcmVjdGlvbicpLFxuXHRcdF07XG5cblx0XHRzdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgZGlyZWN0aW9uLCAnaW1wb3J0YW50Jyk7XG5cdFx0Y3R4LnByZXZUZXh0RGlyZWN0aW9uID0gb3JpZ2luYWw7XG5cdH1cbn07XG5cbnZhciByZXN0b3JlVGV4dERpcmVjdGlvbiA9IGZ1bmN0aW9uKGN0eCkge1xuXHR2YXIgb3JpZ2luYWwgPSBjdHgucHJldlRleHREaXJlY3Rpb247XG5cdGlmIChvcmlnaW5hbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ZGVsZXRlIGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcblx0XHRjdHguY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBvcmlnaW5hbFswXSwgb3JpZ2luYWxbMV0pO1xuXHR9XG59O1xuXG52YXIgaGVscGVyc19ydGwgPSB7XG5cdGdldFJ0bEFkYXB0ZXI6IGdldEFkYXB0ZXIsXG5cdG92ZXJyaWRlVGV4dERpcmVjdGlvbjogb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLFxuXHRyZXN0b3JlVGV4dERpcmVjdGlvbjogcmVzdG9yZVRleHREaXJlY3Rpb24sXG59O1xuXG52YXIgaGVscGVycyQxID0gaGVscGVyc19jb3JlO1xudmFyIGVhc2luZyA9IGhlbHBlcnNfZWFzaW5nO1xudmFyIGNhbnZhcyA9IGhlbHBlcnNfY2FudmFzO1xudmFyIG9wdGlvbnMgPSBoZWxwZXJzX29wdGlvbnM7XG52YXIgbWF0aCA9IGhlbHBlcnNfbWF0aDtcbnZhciBydGwgPSBoZWxwZXJzX3J0bDtcbmhlbHBlcnMkMS5lYXNpbmcgPSBlYXNpbmc7XG5oZWxwZXJzJDEuY2FudmFzID0gY2FudmFzO1xuaGVscGVycyQxLm9wdGlvbnMgPSBvcHRpb25zO1xuaGVscGVycyQxLm1hdGggPSBtYXRoO1xuaGVscGVycyQxLnJ0bCA9IHJ0bDtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIHZpZXcsIG1vZGVsLCBlYXNlKSB7XG5cdHZhciBrZXlzID0gT2JqZWN0LmtleXMobW9kZWwpO1xuXHR2YXIgaSwgaWxlbiwga2V5LCBhY3R1YWwsIG9yaWdpbiwgdGFyZ2V0LCB0eXBlLCBjMCwgYzE7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0a2V5ID0ga2V5c1tpXTtcblxuXHRcdHRhcmdldCA9IG1vZGVsW2tleV07XG5cblx0XHQvLyBpZiBhIHZhbHVlIGlzIGFkZGVkIHRvIHRoZSBtb2RlbCBhZnRlciBwaXZvdCgpIGhhcyBiZWVuIGNhbGxlZCwgdGhlIHZpZXdcblx0XHQvLyBkb2Vzbid0IGNvbnRhaW4gaXQsIHNvIGxldCdzIGluaXRpYWxpemUgdGhlIHZpZXcgdG8gdGhlIHRhcmdldCB2YWx1ZS5cblx0XHRpZiAoIXZpZXcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0dmlld1trZXldID0gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdGFjdHVhbCA9IHZpZXdba2V5XTtcblxuXHRcdGlmIChhY3R1YWwgPT09IHRhcmdldCB8fCBrZXlbMF0gPT09ICdfJykge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWYgKCFzdGFydC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRzdGFydFtrZXldID0gYWN0dWFsO1xuXHRcdH1cblxuXHRcdG9yaWdpbiA9IHN0YXJ0W2tleV07XG5cblx0XHR0eXBlID0gdHlwZW9mIHRhcmdldDtcblxuXHRcdGlmICh0eXBlID09PSB0eXBlb2Ygb3JpZ2luKSB7XG5cdFx0XHRpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0YzAgPSBjaGFydGpzQ29sb3Iob3JpZ2luKTtcblx0XHRcdFx0aWYgKGMwLnZhbGlkKSB7XG5cdFx0XHRcdFx0YzEgPSBjaGFydGpzQ29sb3IodGFyZ2V0KTtcblx0XHRcdFx0XHRpZiAoYzEudmFsaWQpIHtcblx0XHRcdFx0XHRcdHZpZXdba2V5XSA9IGMxLm1peChjMCwgZWFzZSkucmdiU3RyaW5nKCk7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoaGVscGVycyQxLmlzRmluaXRlKG9yaWdpbikgJiYgaGVscGVycyQxLmlzRmluaXRlKHRhcmdldCkpIHtcblx0XHRcdFx0dmlld1trZXldID0gb3JpZ2luICsgKHRhcmdldCAtIG9yaWdpbikgKiBlYXNlO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2aWV3W2tleV0gPSB0YXJnZXQ7XG5cdH1cbn1cblxudmFyIEVsZW1lbnQgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uKSB7XG5cdGhlbHBlcnMkMS5leHRlbmQodGhpcywgY29uZmlndXJhdGlvbik7XG5cdHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuaGVscGVycyQxLmV4dGVuZChFbGVtZW50LnByb3RvdHlwZSwge1xuXHRfdHlwZTogdW5kZWZpbmVkLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuaGlkZGVuID0gZmFsc2U7XG5cdH0sXG5cblx0cGl2b3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0aWYgKCFtZS5fdmlldykge1xuXHRcdFx0bWUuX3ZpZXcgPSBoZWxwZXJzJDEuZXh0ZW5kKHt9LCBtZS5fbW9kZWwpO1xuXHRcdH1cblx0XHRtZS5fc3RhcnQgPSB7fTtcblx0XHRyZXR1cm4gbWU7XG5cdH0sXG5cblx0dHJhbnNpdGlvbjogZnVuY3Rpb24oZWFzZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1vZGVsID0gbWUuX21vZGVsO1xuXHRcdHZhciBzdGFydCA9IG1lLl9zdGFydDtcblx0XHR2YXIgdmlldyA9IG1lLl92aWV3O1xuXG5cdFx0Ly8gTm8gYW5pbWF0aW9uIC0+IE5vIFRyYW5zaXRpb25cblx0XHRpZiAoIW1vZGVsIHx8IGVhc2UgPT09IDEpIHtcblx0XHRcdG1lLl92aWV3ID0gaGVscGVycyQxLmV4dGVuZCh7fSwgbW9kZWwpO1xuXHRcdFx0bWUuX3N0YXJ0ID0gbnVsbDtcblx0XHRcdHJldHVybiBtZTtcblx0XHR9XG5cblx0XHRpZiAoIXZpZXcpIHtcblx0XHRcdHZpZXcgPSBtZS5fdmlldyA9IHt9O1xuXHRcdH1cblxuXHRcdGlmICghc3RhcnQpIHtcblx0XHRcdHN0YXJ0ID0gbWUuX3N0YXJ0ID0ge307XG5cdFx0fVxuXG5cdFx0aW50ZXJwb2xhdGUoc3RhcnQsIHZpZXcsIG1vZGVsLCBlYXNlKTtcblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHR0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB0aGlzLl9tb2RlbC54LFxuXHRcdFx0eTogdGhpcy5fbW9kZWwueVxuXHRcdH07XG5cdH0sXG5cblx0aGFzVmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBoZWxwZXJzJDEuaXNOdW1iZXIodGhpcy5fbW9kZWwueCkgJiYgaGVscGVycyQxLmlzTnVtYmVyKHRoaXMuX21vZGVsLnkpO1xuXHR9XG59KTtcblxuRWxlbWVudC5leHRlbmQgPSBoZWxwZXJzJDEuaW5oZXJpdHM7XG5cbnZhciBjb3JlX2VsZW1lbnQgPSBFbGVtZW50O1xuXG52YXIgZXhwb3J0cyQzID0gY29yZV9lbGVtZW50LmV4dGVuZCh7XG5cdGNoYXJ0OiBudWxsLCAvLyB0aGUgYW5pbWF0aW9uIGFzc29jaWF0ZWQgY2hhcnQgaW5zdGFuY2Vcblx0Y3VycmVudFN0ZXA6IDAsIC8vIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzdGVwXG5cdG51bVN0ZXBzOiA2MCwgLy8gZGVmYXVsdCBudW1iZXIgb2Ygc3RlcHNcblx0ZWFzaW5nOiAnJywgLy8gdGhlIGVhc2luZyB0byB1c2UgZm9yIHRoaXMgYW5pbWF0aW9uXG5cdHJlbmRlcjogbnVsbCwgLy8gcmVuZGVyIGZ1bmN0aW9uIHVzZWQgYnkgdGhlIGFuaW1hdGlvbiBzZXJ2aWNlXG5cblx0b25BbmltYXRpb25Qcm9ncmVzczogbnVsbCwgLy8gdXNlciBzcGVjaWZpZWQgY2FsbGJhY2sgdG8gZmlyZSBvbiBlYWNoIHN0ZXAgb2YgdGhlIGFuaW1hdGlvblxuXHRvbkFuaW1hdGlvbkNvbXBsZXRlOiBudWxsLCAvLyB1c2VyIHNwZWNpZmllZCBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIGFuaW1hdGlvbiBmaW5pc2hlc1xufSk7XG5cbnZhciBjb3JlX2FuaW1hdGlvbiA9IGV4cG9ydHMkMztcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5BbmltYXRpb24gaW5zdGVhZFxuICogQHByb3AgQ2hhcnQuQW5pbWF0aW9uI2FuaW1hdGlvbk9iamVjdFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyQzLnByb3RvdHlwZSwgJ2FuaW1hdGlvbk9iamVjdCcsIHtcblx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSk7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5BbmltYXRpb24jY2hhcnQgaW5zdGVhZFxuICogQHByb3AgQ2hhcnQuQW5pbWF0aW9uI2NoYXJ0SW5zdGFuY2VcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMkMy5wcm90b3R5cGUsICdjaGFydEluc3RhbmNlJywge1xuXHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0O1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dGhpcy5jaGFydCA9IHZhbHVlO1xuXHR9XG59KTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGFuaW1hdGlvbjoge1xuXHRcdGR1cmF0aW9uOiAxMDAwLFxuXHRcdGVhc2luZzogJ2Vhc2VPdXRRdWFydCcsXG5cdFx0b25Qcm9ncmVzczogaGVscGVycyQxLm5vb3AsXG5cdFx0b25Db21wbGV0ZTogaGVscGVycyQxLm5vb3Bcblx0fVxufSk7XG5cbnZhciBjb3JlX2FuaW1hdGlvbnMgPSB7XG5cdGFuaW1hdGlvbnM6IFtdLFxuXHRyZXF1ZXN0OiBudWxsLFxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCB0byBhbmltYXRlLlxuXHQgKiBAcGFyYW0ge0NoYXJ0LkFuaW1hdGlvbn0gYW5pbWF0aW9uIC0gVGhlIGFuaW1hdGlvbiB0aGF0IHdlIHdpbGwgYW5pbWF0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFuaW1hdGlvbiBkdXJhdGlvbiBpbiBtcy5cblx0ICogQHBhcmFtIHtib29sZWFufSBsYXp5IC0gaWYgdHJ1ZSwgdGhlIGNoYXJ0IGlzIG5vdCBtYXJrZWQgYXMgYW5pbWF0aW5nIHRvIGVuYWJsZSBtb3JlIHJlc3BvbnNpdmUgaW50ZXJhY3Rpb25zXG5cdCAqL1xuXHRhZGRBbmltYXRpb246IGZ1bmN0aW9uKGNoYXJ0LCBhbmltYXRpb24sIGR1cmF0aW9uLCBsYXp5KSB7XG5cdFx0dmFyIGFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnM7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRhbmltYXRpb24uY2hhcnQgPSBjaGFydDtcblx0XHRhbmltYXRpb24uc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRhbmltYXRpb24uZHVyYXRpb24gPSBkdXJhdGlvbjtcblxuXHRcdGlmICghbGF6eSkge1xuXHRcdFx0Y2hhcnQuYW5pbWF0aW5nID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYW5pbWF0aW9ucy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmIChhbmltYXRpb25zW2ldLmNoYXJ0ID09PSBjaGFydCkge1xuXHRcdFx0XHRhbmltYXRpb25zW2ldID0gYW5pbWF0aW9uO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgbm8gYW5pbWF0aW9ucyBxdWV1ZWQsIG1hbnVhbGx5IGtpY2tzdGFydCBhIGRpZ2VzdCwgZm9yIGxhY2sgb2YgYSBiZXR0ZXIgd29yZFxuXHRcdGlmIChhbmltYXRpb25zLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0dGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcblx0XHR9XG5cdH0sXG5cblx0Y2FuY2VsQW5pbWF0aW9uOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBpbmRleCA9IGhlbHBlcnMkMS5maW5kSW5kZXgodGhpcy5hbmltYXRpb25zLCBmdW5jdGlvbihhbmltYXRpb24pIHtcblx0XHRcdHJldHVybiBhbmltYXRpb24uY2hhcnQgPT09IGNoYXJ0O1xuXHRcdH0pO1xuXG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0dGhpcy5hbmltYXRpb25zLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRjaGFydC5hbmltYXRpbmcgPSBmYWxzZTtcblx0XHR9XG5cdH0sXG5cblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGlmIChtZS5yZXF1ZXN0ID09PSBudWxsKSB7XG5cdFx0XHQvLyBTa2lwIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0cyB1bnRpbCB0aGUgYWN0aXZlIG9uZSBpcyBleGVjdXRlZC5cblx0XHRcdC8vIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHByb2Nlc3NpbmcgbW91c2UgZXZlbnRzLCBlLmcuICdtb3VzZW1vdmUnXG5cdFx0XHQvLyBhbmQgJ21vdXNlb3V0JyBldmVudHMgd2lsbCB0cmlnZ2VyIG11bHRpcGxlIHJlbmRlcnMuXG5cdFx0XHRtZS5yZXF1ZXN0ID0gaGVscGVycyQxLnJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZS5yZXF1ZXN0ID0gbnVsbDtcblx0XHRcdFx0bWUuc3RhcnREaWdlc3QoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHN0YXJ0RGlnZXN0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0bWUuYWR2YW5jZSgpO1xuXG5cdFx0Ly8gRG8gd2UgaGF2ZSBtb3JlIHN0dWZmIHRvIGFuaW1hdGU/XG5cdFx0aWYgKG1lLmFuaW1hdGlvbnMubGVuZ3RoID4gMCkge1xuXHRcdFx0bWUucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0YWR2YW5jZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnM7XG5cdFx0dmFyIGFuaW1hdGlvbiwgY2hhcnQsIG51bVN0ZXBzLCBuZXh0U3RlcDtcblx0XHR2YXIgaSA9IDA7XG5cblx0XHQvLyAxIGFuaW1hdGlvbiBwZXIgY2hhcnQsIHNvIHdlIGFyZSBsb29waW5nIGNoYXJ0cyBoZXJlXG5cdFx0d2hpbGUgKGkgPCBhbmltYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uc1tpXTtcblx0XHRcdGNoYXJ0ID0gYW5pbWF0aW9uLmNoYXJ0O1xuXHRcdFx0bnVtU3RlcHMgPSBhbmltYXRpb24ubnVtU3RlcHM7XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IGN1cnJlbnRTdGVwIHN0YXJ0cyBhdCAxXG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNjEwNFxuXHRcdFx0bmV4dFN0ZXAgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gYW5pbWF0aW9uLnN0YXJ0VGltZSkgLyBhbmltYXRpb24uZHVyYXRpb24gKiBudW1TdGVwcykgKyAxO1xuXHRcdFx0YW5pbWF0aW9uLmN1cnJlbnRTdGVwID0gTWF0aC5taW4obmV4dFN0ZXAsIG51bVN0ZXBzKTtcblxuXHRcdFx0aGVscGVycyQxLmNhbGxiYWNrKGFuaW1hdGlvbi5yZW5kZXIsIFtjaGFydCwgYW5pbWF0aW9uXSwgY2hhcnQpO1xuXHRcdFx0aGVscGVycyQxLmNhbGxiYWNrKGFuaW1hdGlvbi5vbkFuaW1hdGlvblByb2dyZXNzLCBbYW5pbWF0aW9uXSwgY2hhcnQpO1xuXG5cdFx0XHRpZiAoYW5pbWF0aW9uLmN1cnJlbnRTdGVwID49IG51bVN0ZXBzKSB7XG5cdFx0XHRcdGhlbHBlcnMkMS5jYWxsYmFjayhhbmltYXRpb24ub25BbmltYXRpb25Db21wbGV0ZSwgW2FuaW1hdGlvbl0sIGNoYXJ0KTtcblx0XHRcdFx0Y2hhcnQuYW5pbWF0aW5nID0gZmFsc2U7XG5cdFx0XHRcdGFuaW1hdGlvbnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0KytpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxudmFyIHJlc29sdmUgPSBoZWxwZXJzJDEub3B0aW9ucy5yZXNvbHZlO1xuXG52YXIgYXJyYXlFdmVudHMgPSBbJ3B1c2gnLCAncG9wJywgJ3NoaWZ0JywgJ3NwbGljZScsICd1bnNoaWZ0J107XG5cbi8qKlxuICogSG9va3MgdGhlIGFycmF5IG1ldGhvZHMgdGhhdCBhZGQgb3IgcmVtb3ZlIHZhbHVlcyAoJ3B1c2gnLCBwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJyxcbiAqICd1bnNoaWZ0JykgYW5kIG5vdGlmeSB0aGUgbGlzdGVuZXIgQUZURVIgdGhlIGFycmF5IGhhcyBiZWVuIGFsdGVyZWQuIExpc3RlbmVycyBhcmVcbiAqIGNhbGxlZCBvbiB0aGUgJ29uRGF0YSonIGNhbGxiYWNrcyAoZS5nLiBvbkRhdGFQdXNoLCBldGMuKSB3aXRoIHNhbWUgYXJndW1lbnRzLlxuICovXG5mdW5jdGlvbiBsaXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcblx0aWYgKGFycmF5Ll9jaGFydGpzKSB7XG5cdFx0YXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuXHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHR2YWx1ZToge1xuXHRcdFx0bGlzdGVuZXJzOiBbbGlzdGVuZXJdXG5cdFx0fVxuXHR9KTtcblxuXHRhcnJheUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdHZhciBtZXRob2QgPSAnb25EYXRhJyArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTtcblx0XHR2YXIgYmFzZSA9IGFycmF5W2tleV07XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHRcdFx0dmFyIHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG5cblx0XHRcdFx0aGVscGVycyQxLmVhY2goYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLCBmdW5jdGlvbihvYmplY3QpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0XHRvYmplY3RbbWV0aG9kXS5hcHBseShvYmplY3QsIGFyZ3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuIHJlcztcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZ2l2ZW4gYXJyYXkgZXZlbnQgbGlzdGVuZXIgYW5kIGNsZWFudXAgZXh0cmEgYXR0YWNoZWQgcHJvcGVydGllcyAoc3VjaCBhc1xuICogdGhlIF9jaGFydGpzIHN0dWIgYW5kIG92ZXJyaWRkZW4gbWV0aG9kcykgaWYgYXJyYXkgZG9lc24ndCBoYXZlIGFueSBtb3JlIGxpc3RlbmVycy5cbiAqL1xuZnVuY3Rpb24gdW5saXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcblx0dmFyIHN0dWIgPSBhcnJheS5fY2hhcnRqcztcblx0aWYgKCFzdHViKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuXHR2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG5cdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcblx0fVxuXG5cdGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGFycmF5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0ZGVsZXRlIGFycmF5W2tleV07XG5cdH0pO1xuXG5cdGRlbGV0ZSBhcnJheS5fY2hhcnRqcztcbn1cblxuLy8gQmFzZSBjbGFzcyBmb3IgYWxsIGRhdGFzZXQgY29udHJvbGxlcnMgKGxpbmUsIGJhciwgZXRjKVxudmFyIERhdGFzZXRDb250cm9sbGVyID0gZnVuY3Rpb24oY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuXHR0aGlzLmluaXRpYWxpemUoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG59O1xuXG5oZWxwZXJzJDEuZXh0ZW5kKERhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZSwge1xuXG5cdC8qKlxuXHQgKiBFbGVtZW50IHR5cGUgdXNlZCB0byBnZW5lcmF0ZSBhIG1ldGEgZGF0YXNldCAoZS5nLiBDaGFydC5lbGVtZW50LkxpbmUpLlxuXHQgKiBAdHlwZSB7Q2hhcnQuY29yZS5lbGVtZW50fVxuXHQgKi9cblx0ZGF0YXNldEVsZW1lbnRUeXBlOiBudWxsLFxuXG5cdC8qKlxuXHQgKiBFbGVtZW50IHR5cGUgdXNlZCB0byBnZW5lcmF0ZSBhIG1ldGEgZGF0YSAoZS5nLiBDaGFydC5lbGVtZW50LlBvaW50KS5cblx0ICogQHR5cGUge0NoYXJ0LmNvcmUuZWxlbWVudH1cblx0ICovXG5cdGRhdGFFbGVtZW50VHlwZTogbnVsbCxcblxuXHQvKipcblx0ICogRGF0YXNldCBlbGVtZW50IG9wdGlvbiBrZXlzIHRvIGJlIHJlc29sdmVkIGluIF9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zLlxuXHQgKiBBIGRlcml2ZWQgY29udHJvbGxlciBtYXkgb3ZlcnJpZGUgdGhpcyB0byByZXNvbHZlIGNvbnRyb2xsZXItc3BlY2lmaWMgb3B0aW9ucy5cblx0ICogVGhlIGtleXMgZGVmaW5lZCBoZXJlIGFyZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBmb3IgbGVnZW5kIHN0eWxlcy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhc2V0RWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ2FwU3R5bGUnLFxuXHRcdCdib3JkZXJDb2xvcicsXG5cdFx0J2JvcmRlckRhc2gnLFxuXHRcdCdib3JkZXJEYXNoT2Zmc2V0Jyxcblx0XHQnYm9yZGVySm9pblN0eWxlJyxcblx0XHQnYm9yZGVyV2lkdGgnXG5cdF0sXG5cblx0LyoqXG5cdCAqIERhdGEgZWxlbWVudCBvcHRpb24ga2V5cyB0byBiZSByZXNvbHZlZCBpbiBfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucy5cblx0ICogQSBkZXJpdmVkIGNvbnRyb2xsZXIgbWF5IG92ZXJyaWRlIHRoaXMgdG8gcmVzb2x2ZSBjb250cm9sbGVyLXNwZWNpZmljIG9wdGlvbnMuXG5cdCAqIFRoZSBrZXlzIGRlZmluZWQgaGVyZSBhcmUgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIGxlZ2VuZCBzdHlsZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YUVsZW1lbnRPcHRpb25zOiBbXG5cdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0J2JvcmRlckNvbG9yJyxcblx0XHQnYm9yZGVyV2lkdGgnLFxuXHRcdCdwb2ludFN0eWxlJ1xuXHRdLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdG1lLmNoYXJ0ID0gY2hhcnQ7XG5cdFx0bWUuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG5cdFx0bWUubGlua1NjYWxlcygpO1xuXHRcdG1lLmFkZEVsZW1lbnRzKCk7XG5cdFx0bWUuX3R5cGUgPSBtZS5nZXRNZXRhKCkudHlwZTtcblx0fSxcblxuXHR1cGRhdGVJbmRleDogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0dGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcblx0fSxcblxuXHRsaW5rU2NhbGVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBzY2FsZXMgPSBjaGFydC5zY2FsZXM7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIHNjYWxlc09wdHMgPSBjaGFydC5vcHRpb25zLnNjYWxlcztcblxuXHRcdGlmIChtZXRhLnhBeGlzSUQgPT09IG51bGwgfHwgIShtZXRhLnhBeGlzSUQgaW4gc2NhbGVzKSB8fCBkYXRhc2V0LnhBeGlzSUQpIHtcblx0XHRcdG1ldGEueEF4aXNJRCA9IGRhdGFzZXQueEF4aXNJRCB8fCBzY2FsZXNPcHRzLnhBeGVzWzBdLmlkO1xuXHRcdH1cblx0XHRpZiAobWV0YS55QXhpc0lEID09PSBudWxsIHx8ICEobWV0YS55QXhpc0lEIGluIHNjYWxlcykgfHwgZGF0YXNldC55QXhpc0lEKSB7XG5cdFx0XHRtZXRhLnlBeGlzSUQgPSBkYXRhc2V0LnlBeGlzSUQgfHwgc2NhbGVzT3B0cy55QXhlc1swXS5pZDtcblx0XHR9XG5cdH0sXG5cblx0Z2V0RGF0YXNldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0aGlzLmluZGV4XTtcblx0fSxcblxuXHRnZXRNZXRhOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KTtcblx0fSxcblxuXHRnZXRTY2FsZUZvcklkOiBmdW5jdGlvbihzY2FsZUlEKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFZhbHVlU2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0TWV0YSgpLnlBeGlzSUQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0SW5kZXhTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueEF4aXNJRDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRWYWx1ZVNjYWxlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRTY2FsZUZvcklkKHRoaXMuX2dldFZhbHVlU2NhbGVJZCgpKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRJbmRleFNjYWxlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRTY2FsZUZvcklkKHRoaXMuX2dldEluZGV4U2NhbGVJZCgpKTtcblx0fSxcblxuXHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fdXBkYXRlKHRydWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2RhdGEpIHtcblx0XHRcdHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG5cdFx0fVxuXHR9LFxuXG5cdGNyZWF0ZU1ldGFEYXRhc2V0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0eXBlID0gbWUuZGF0YXNldEVsZW1lbnRUeXBlO1xuXHRcdHJldHVybiB0eXBlICYmIG5ldyB0eXBlKHtcblx0XHRcdF9jaGFydDogbWUuY2hhcnQsXG5cdFx0XHRfZGF0YXNldEluZGV4OiBtZS5pbmRleFxuXHRcdH0pO1xuXHR9LFxuXG5cdGNyZWF0ZU1ldGFEYXRhOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHR5cGUgPSBtZS5kYXRhRWxlbWVudFR5cGU7XG5cdFx0cmV0dXJuIHR5cGUgJiYgbmV3IHR5cGUoe1xuXHRcdFx0X2NoYXJ0OiBtZS5jaGFydCxcblx0XHRcdF9kYXRhc2V0SW5kZXg6IG1lLmluZGV4LFxuXHRcdFx0X2luZGV4OiBpbmRleFxuXHRcdH0pO1xuXHR9LFxuXG5cdGFkZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBkYXRhID0gbWUuZ2V0RGF0YXNldCgpLmRhdGEgfHwgW107XG5cdFx0dmFyIG1ldGFEYXRhID0gbWV0YS5kYXRhO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZXRhRGF0YVtpXSA9IG1ldGFEYXRhW2ldIHx8IG1lLmNyZWF0ZU1ldGFEYXRhKGkpO1xuXHRcdH1cblxuXHRcdG1ldGEuZGF0YXNldCA9IG1ldGEuZGF0YXNldCB8fCBtZS5jcmVhdGVNZXRhRGF0YXNldCgpO1xuXHR9LFxuXG5cdGFkZEVsZW1lbnRBbmRSZXNldDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuY3JlYXRlTWV0YURhdGEoaW5kZXgpO1xuXHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEuc3BsaWNlKGluZGV4LCAwLCBlbGVtZW50KTtcblx0XHR0aGlzLnVwZGF0ZUVsZW1lbnQoZWxlbWVudCwgaW5kZXgsIHRydWUpO1xuXHR9LFxuXG5cdGJ1aWxkT3JVcGRhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuXG5cdFx0Ly8gSW4gb3JkZXIgdG8gY29ycmVjdGx5IGhhbmRsZSBkYXRhIGFkZGl0aW9uL2RlbGV0aW9uIGFuaW1hdGlvbiAoYW4gdGh1cyBzaW11bGF0ZVxuXHRcdC8vIHJlYWwtdGltZSBjaGFydHMpLCB3ZSBuZWVkIHRvIG1vbml0b3IgdGhlc2UgZGF0YSBtb2RpZmljYXRpb25zIGFuZCBzeW5jaHJvbml6ZVxuXHRcdC8vIHRoZSBpbnRlcm5hbCBtZXRhIGRhdGEgYWNjb3JkaW5nbHkuXG5cdFx0aWYgKG1lLl9kYXRhICE9PSBkYXRhKSB7XG5cdFx0XHRpZiAobWUuX2RhdGEpIHtcblx0XHRcdFx0Ly8gVGhpcyBjYXNlIGhhcHBlbnMgd2hlbiB0aGUgdXNlciByZXBsYWNlZCB0aGUgZGF0YSBhcnJheSBpbnN0YW5jZS5cblx0XHRcdFx0dW5saXN0ZW5BcnJheUV2ZW50cyhtZS5fZGF0YSwgbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG5cdFx0XHRcdGxpc3RlbkFycmF5RXZlbnRzKGRhdGEsIG1lKTtcblx0XHRcdH1cblx0XHRcdG1lLl9kYXRhID0gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBSZS1zeW5jIG1ldGEgZGF0YSBpbiBjYXNlIHRoZSB1c2VyIHJlcGxhY2VkIHRoZSBkYXRhIGFycmF5IG9yIGlmIHdlIG1pc3NlZFxuXHRcdC8vIGFueSB1cGRhdGVzIGFuZCBzbyBtYWtlIHN1cmUgdGhhdCB3ZSBoYW5kbGUgbnVtYmVyIG9mIGRhdGFwb2ludHMgY2hhbmdpbmcuXG5cdFx0bWUucmVzeW5jRWxlbWVudHMoKTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbWVyZ2VkIHVzZXItc3VwcGxpZWQgYW5kIGRlZmF1bHQgZGF0YXNldC1sZXZlbCBvcHRpb25zXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY29uZmlndXJlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdG1lLl9jb25maWcgPSBoZWxwZXJzJDEubWVyZ2Uoe30sIFtcblx0XHRcdG1lLmNoYXJ0Lm9wdGlvbnMuZGF0YXNldHNbbWUuX3R5cGVdLFxuXHRcdFx0bWUuZ2V0RGF0YXNldCgpLFxuXHRcdF0sIHtcblx0XHRcdG1lcmdlcjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuXHRcdFx0XHRpZiAoa2V5ICE9PSAnX21ldGEnICYmIGtleSAhPT0gJ2RhdGEnKSB7XG5cdFx0XHRcdFx0aGVscGVycyQxLl9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRfdXBkYXRlOiBmdW5jdGlvbihyZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0bWUuX2NvbmZpZ3VyZSgpO1xuXHRcdG1lLl9jYWNoZWREYXRhT3B0cyA9IG51bGw7XG5cdFx0bWUudXBkYXRlKHJlc2V0KTtcblx0fSxcblxuXHR1cGRhdGU6IGhlbHBlcnMkMS5ub29wLFxuXG5cdHRyYW5zaXRpb246IGZ1bmN0aW9uKGVhc2luZ1ZhbHVlKSB7XG5cdFx0dmFyIG1ldGEgPSB0aGlzLmdldE1ldGEoKTtcblx0XHR2YXIgZWxlbWVudHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cdFx0dmFyIGkgPSAwO1xuXG5cdFx0Zm9yICg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGVsZW1lbnRzW2ldLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdH1cblxuXHRcdGlmIChtZXRhLmRhdGFzZXQpIHtcblx0XHRcdG1ldGEuZGF0YXNldC50cmFuc2l0aW9uKGVhc2luZ1ZhbHVlKTtcblx0XHR9XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1ldGEgPSB0aGlzLmdldE1ldGEoKTtcblx0XHR2YXIgZWxlbWVudHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cdFx0dmFyIGkgPSAwO1xuXG5cdFx0aWYgKG1ldGEuZGF0YXNldCkge1xuXHRcdFx0bWV0YS5kYXRhc2V0LmRyYXcoKTtcblx0XHR9XG5cblx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0ZWxlbWVudHNbaV0uZHJhdygpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhIHNldCBvZiBwcmVkZWZpbmVkIHN0eWxlIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgdXNlZCB0byByZXByZXNlbnQgdGhlIGRhdGFzZXRcblx0ICogb3IgdGhlIGRhdGEgaWYgdGhlIGluZGV4IGlzIHNwZWNpZmllZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBkYXRhIGluZGV4XG5cdCAqIEByZXR1cm4ge0lTdHlsZUludGVyZmFjZX0gc3R5bGUgb2JqZWN0XG5cdCAqL1xuXHRnZXRTdHlsZTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuXHRcdHZhciBzdHlsZTtcblxuXHRcdG1lLl9jb25maWd1cmUoKTtcblx0XHRpZiAoZGF0YXNldCAmJiBpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRzdHlsZSA9IG1lLl9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKGRhdGFzZXQgfHwge30pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbmRleCA9IGluZGV4IHx8IDA7XG5cdFx0XHRzdHlsZSA9IG1lLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKG1ldGEuZGF0YVtpbmRleF0gfHwge30sIGluZGV4KTtcblx0XHR9XG5cblx0XHRpZiAoc3R5bGUuZmlsbCA9PT0gZmFsc2UgfHwgc3R5bGUuZmlsbCA9PT0gbnVsbCkge1xuXHRcdFx0c3R5bGUuYmFja2dyb3VuZENvbG9yID0gc3R5bGUuYm9yZGVyQ29sb3I7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0eWxlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnM6IGZ1bmN0aW9uKGVsZW1lbnQsIGhvdmVyKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgZGF0YXNldE9wdHMgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBjdXN0b20gPSBlbGVtZW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgb3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuZWxlbWVudHNbbWUuZGF0YXNldEVsZW1lbnRUeXBlLnByb3RvdHlwZS5fdHlwZV0gfHwge307XG5cdFx0dmFyIGVsZW1lbnRPcHRpb25zID0gbWUuX2RhdGFzZXRFbGVtZW50T3B0aW9ucztcblx0XHR2YXIgdmFsdWVzID0ge307XG5cdFx0dmFyIGksIGlsZW4sIGtleSwgcmVhZEtleTtcblxuXHRcdC8vIFNjcmlwdGFibGUgb3B0aW9uc1xuXHRcdHZhciBjb250ZXh0ID0ge1xuXHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0ZGF0YXNldDogbWUuZ2V0RGF0YXNldCgpLFxuXHRcdFx0ZGF0YXNldEluZGV4OiBtZS5pbmRleCxcblx0XHRcdGhvdmVyOiBob3ZlclxuXHRcdH07XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZWxlbWVudE9wdGlvbnMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRrZXkgPSBlbGVtZW50T3B0aW9uc1tpXTtcblx0XHRcdHJlYWRLZXkgPSBob3ZlciA/ICdob3ZlcicgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSkgOiBrZXk7XG5cdFx0XHR2YWx1ZXNba2V5XSA9IHJlc29sdmUoW1xuXHRcdFx0XHRjdXN0b21bcmVhZEtleV0sXG5cdFx0XHRcdGRhdGFzZXRPcHRzW3JlYWRLZXldLFxuXHRcdFx0XHRvcHRpb25zW3JlYWRLZXldXG5cdFx0XHRdLCBjb250ZXh0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWVzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnM6IGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY3VzdG9tID0gZWxlbWVudCAmJiBlbGVtZW50LmN1c3RvbTtcblx0XHR2YXIgY2FjaGVkID0gbWUuX2NhY2hlZERhdGFPcHRzO1xuXHRcdGlmIChjYWNoZWQgJiYgIWN1c3RvbSkge1xuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblx0XHR9XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGRhdGFzZXRPcHRzID0gbWUuX2NvbmZpZztcblx0XHR2YXIgb3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuZWxlbWVudHNbbWUuZGF0YUVsZW1lbnRUeXBlLnByb3RvdHlwZS5fdHlwZV0gfHwge307XG5cdFx0dmFyIGVsZW1lbnRPcHRpb25zID0gbWUuX2RhdGFFbGVtZW50T3B0aW9ucztcblx0XHR2YXIgdmFsdWVzID0ge307XG5cblx0XHQvLyBTY3JpcHRhYmxlIG9wdGlvbnNcblx0XHR2YXIgY29udGV4dCA9IHtcblx0XHRcdGNoYXJ0OiBjaGFydCxcblx0XHRcdGRhdGFJbmRleDogaW5kZXgsXG5cdFx0XHRkYXRhc2V0OiBtZS5nZXREYXRhc2V0KCksXG5cdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0fTtcblxuXHRcdC8vIGByZXNvbHZlYCBzZXRzIGNhY2hlYWJsZSB0byBgZmFsc2VgIGlmIGFueSBvcHRpb24gaXMgaW5kZXhlZCBvciBzY3JpcHRlZFxuXHRcdHZhciBpbmZvID0ge2NhY2hlYWJsZTogIWN1c3RvbX07XG5cblx0XHR2YXIga2V5cywgaSwgaWxlbiwga2V5O1xuXG5cdFx0Y3VzdG9tID0gY3VzdG9tIHx8IHt9O1xuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KGVsZW1lbnRPcHRpb25zKSkge1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGVsZW1lbnRPcHRpb25zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRrZXkgPSBlbGVtZW50T3B0aW9uc1tpXTtcblx0XHRcdFx0dmFsdWVzW2tleV0gPSByZXNvbHZlKFtcblx0XHRcdFx0XHRjdXN0b21ba2V5XSxcblx0XHRcdFx0XHRkYXRhc2V0T3B0c1trZXldLFxuXHRcdFx0XHRcdG9wdGlvbnNba2V5XVxuXHRcdFx0XHRdLCBjb250ZXh0LCBpbmRleCwgaW5mbyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGtleXMgPSBPYmplY3Qua2V5cyhlbGVtZW50T3B0aW9ucyk7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0a2V5ID0ga2V5c1tpXTtcblx0XHRcdFx0dmFsdWVzW2tleV0gPSByZXNvbHZlKFtcblx0XHRcdFx0XHRjdXN0b21ba2V5XSxcblx0XHRcdFx0XHRkYXRhc2V0T3B0c1tlbGVtZW50T3B0aW9uc1trZXldXSxcblx0XHRcdFx0XHRkYXRhc2V0T3B0c1trZXldLFxuXHRcdFx0XHRcdG9wdGlvbnNba2V5XVxuXHRcdFx0XHRdLCBjb250ZXh0LCBpbmRleCwgaW5mbyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGluZm8uY2FjaGVhYmxlKSB7XG5cdFx0XHRtZS5fY2FjaGVkRGF0YU9wdHMgPSBPYmplY3QuZnJlZXplKHZhbHVlcyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fSxcblxuXHRyZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0aGVscGVycyQxLm1lcmdlKGVsZW1lbnQuX21vZGVsLCBlbGVtZW50LiRwcmV2aW91c1N0eWxlIHx8IHt9KTtcblx0XHRkZWxldGUgZWxlbWVudC4kcHJldmlvdXNTdHlsZTtcblx0fSxcblxuXHRzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZWxlbWVudC5fZGF0YXNldEluZGV4XTtcblx0XHR2YXIgaW5kZXggPSBlbGVtZW50Ll9pbmRleDtcblx0XHR2YXIgY3VzdG9tID0gZWxlbWVudC5jdXN0b20gfHwge307XG5cdFx0dmFyIG1vZGVsID0gZWxlbWVudC5fbW9kZWw7XG5cdFx0dmFyIGdldEhvdmVyQ29sb3IgPSBoZWxwZXJzJDEuZ2V0SG92ZXJDb2xvcjtcblxuXHRcdGVsZW1lbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBtb2RlbC5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aFxuXHRcdH07XG5cblx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSByZXNvbHZlKFtjdXN0b20uaG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGRhdGFzZXQuaG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGdldEhvdmVyQ29sb3IobW9kZWwuYmFja2dyb3VuZENvbG9yKV0sIHVuZGVmaW5lZCwgaW5kZXgpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gcmVzb2x2ZShbY3VzdG9tLmhvdmVyQm9yZGVyQ29sb3IsIGRhdGFzZXQuaG92ZXJCb3JkZXJDb2xvciwgZ2V0SG92ZXJDb2xvcihtb2RlbC5ib3JkZXJDb2xvcildLCB1bmRlZmluZWQsIGluZGV4KTtcblx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IHJlc29sdmUoW2N1c3RvbS5ob3ZlckJvcmRlcldpZHRoLCBkYXRhc2V0LmhvdmVyQm9yZGVyV2lkdGgsIG1vZGVsLmJvcmRlcldpZHRoXSwgdW5kZWZpbmVkLCBpbmRleCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5nZXRNZXRhKCkuZGF0YXNldDtcblxuXHRcdGlmIChlbGVtZW50KSB7XG5cdFx0XHR0aGlzLnJlbW92ZUhvdmVyU3R5bGUoZWxlbWVudCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3NldERhdGFzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuZ2V0TWV0YSgpLmRhdGFzZXQ7XG5cdFx0dmFyIHByZXYgPSB7fTtcblx0XHR2YXIgaSwgaWxlbiwga2V5LCBrZXlzLCBob3Zlck9wdGlvbnMsIG1vZGVsO1xuXG5cdFx0aWYgKCFlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bW9kZWwgPSBlbGVtZW50Ll9tb2RlbDtcblx0XHRob3Zlck9wdGlvbnMgPSB0aGlzLl9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKGVsZW1lbnQsIHRydWUpO1xuXG5cdFx0a2V5cyA9IE9iamVjdC5rZXlzKGhvdmVyT3B0aW9ucyk7XG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdFx0cHJldltrZXldID0gbW9kZWxba2V5XTtcblx0XHRcdG1vZGVsW2tleV0gPSBob3Zlck9wdGlvbnNba2V5XTtcblx0XHR9XG5cblx0XHRlbGVtZW50LiRwcmV2aW91c1N0eWxlID0gcHJldjtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHJlc3luY0VsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBkYXRhID0gbWUuZ2V0RGF0YXNldCgpLmRhdGE7XG5cdFx0dmFyIG51bU1ldGEgPSBtZXRhLmRhdGEubGVuZ3RoO1xuXHRcdHZhciBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG5cblx0XHRpZiAobnVtRGF0YSA8IG51bU1ldGEpIHtcblx0XHRcdG1ldGEuZGF0YS5zcGxpY2UobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuXHRcdH0gZWxzZSBpZiAobnVtRGF0YSA+IG51bU1ldGEpIHtcblx0XHRcdG1lLmluc2VydEVsZW1lbnRzKG51bU1ldGEsIG51bURhdGEgLSBudW1NZXRhKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRpbnNlcnRFbGVtZW50czogZnVuY3Rpb24oc3RhcnQsIGNvdW50KSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG5cdFx0XHR0aGlzLmFkZEVsZW1lbnRBbmRSZXNldChzdGFydCArIGkpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdG9uRGF0YVB1c2g6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0dGhpcy5pbnNlcnRFbGVtZW50cyh0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIGNvdW50LCBjb3VudCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRvbkRhdGFQb3A6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEucG9wKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRvbkRhdGFTaGlmdDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5nZXRNZXRhKCkuZGF0YS5zaGlmdCgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0b25EYXRhU3BsaWNlOiBmdW5jdGlvbihzdGFydCwgY291bnQpIHtcblx0XHR0aGlzLmdldE1ldGEoKS5kYXRhLnNwbGljZShzdGFydCwgY291bnQpO1xuXHRcdHRoaXMuaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggLSAyKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdG9uRGF0YVVuc2hpZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuaW5zZXJ0RWxlbWVudHMoMCwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdH1cbn0pO1xuXG5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQgPSBoZWxwZXJzJDEuaW5oZXJpdHM7XG5cbnZhciBjb3JlX2RhdGFzZXRDb250cm9sbGVyID0gRGF0YXNldENvbnRyb2xsZXI7XG5cbnZhciBUQVUgPSBNYXRoLlBJICogMjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0YXJjOiB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiAnI2ZmZicsXG5cdFx0XHRib3JkZXJXaWR0aDogMixcblx0XHRcdGJvcmRlckFsaWduOiAnY2VudGVyJ1xuXHRcdH1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBhcmMpIHtcblx0dmFyIHN0YXJ0QW5nbGUgPSBhcmMuc3RhcnRBbmdsZTtcblx0dmFyIGVuZEFuZ2xlID0gYXJjLmVuZEFuZ2xlO1xuXHR2YXIgcGl4ZWxNYXJnaW4gPSBhcmMucGl4ZWxNYXJnaW47XG5cdHZhciBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gYXJjLm91dGVyUmFkaXVzO1xuXHR2YXIgeCA9IGFyYy54O1xuXHR2YXIgeSA9IGFyYy55O1xuXG5cdC8vIERyYXcgYW4gaW5uZXIgYm9yZGVyIGJ5IGNsaXBpbmcgdGhlIGFyYyBhbmQgZHJhd2luZyBhIGRvdWJsZS13aWR0aCBib3JkZXJcblx0Ly8gRW5sYXJnZSB0aGUgY2xpcHBpbmcgYXJjIGJ5IDAuMzMgcGl4ZWxzIHRvIGVsaW1pbmF0ZSBnbGl0Y2hlcyBiZXR3ZWVuIGJvcmRlcnNcblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRjdHguYXJjKHgsIHksIGFyYy5vdXRlclJhZGl1cywgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luKTtcblx0aWYgKGFyYy5pbm5lclJhZGl1cyA+IHBpeGVsTWFyZ2luKSB7XG5cdFx0YW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIGFyYy5pbm5lclJhZGl1cztcblx0XHRjdHguYXJjKHgsIHksIGFyYy5pbm5lclJhZGl1cyAtIHBpeGVsTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdGN0eC5hcmMoeCwgeSwgcGl4ZWxNYXJnaW4sIGVuZEFuZ2xlICsgTWF0aC5QSSAvIDIsIHN0YXJ0QW5nbGUgLSBNYXRoLlBJIC8gMik7XG5cdH1cblx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRjdHguY2xpcCgpO1xufVxuXG5mdW5jdGlvbiBkcmF3RnVsbENpcmNsZUJvcmRlcnMoY3R4LCB2bSwgYXJjLCBpbm5lcikge1xuXHR2YXIgZW5kQW5nbGUgPSBhcmMuZW5kQW5nbGU7XG5cdHZhciBpO1xuXG5cdGlmIChpbm5lcikge1xuXHRcdGFyYy5lbmRBbmdsZSA9IGFyYy5zdGFydEFuZ2xlICsgVEFVO1xuXHRcdGNsaXBBcmMoY3R4LCBhcmMpO1xuXHRcdGFyYy5lbmRBbmdsZSA9IGVuZEFuZ2xlO1xuXHRcdGlmIChhcmMuZW5kQW5nbGUgPT09IGFyYy5zdGFydEFuZ2xlICYmIGFyYy5mdWxsQ2lyY2xlcykge1xuXHRcdFx0YXJjLmVuZEFuZ2xlICs9IFRBVTtcblx0XHRcdGFyYy5mdWxsQ2lyY2xlcy0tO1xuXHRcdH1cblx0fVxuXG5cdGN0eC5iZWdpblBhdGgoKTtcblx0Y3R4LmFyYyhhcmMueCwgYXJjLnksIGFyYy5pbm5lclJhZGl1cywgYXJjLnN0YXJ0QW5nbGUgKyBUQVUsIGFyYy5zdGFydEFuZ2xlLCB0cnVlKTtcblx0Zm9yIChpID0gMDsgaSA8IGFyYy5mdWxsQ2lyY2xlczsgKytpKSB7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHR9XG5cblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRjdHguYXJjKGFyYy54LCBhcmMueSwgdm0ub3V0ZXJSYWRpdXMsIGFyYy5zdGFydEFuZ2xlLCBhcmMuc3RhcnRBbmdsZSArIFRBVSk7XG5cdGZvciAoaSA9IDA7IGkgPCBhcmMuZnVsbENpcmNsZXM7ICsraSkge1xuXHRcdGN0eC5zdHJva2UoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBkcmF3Qm9yZGVyKGN0eCwgdm0sIGFyYykge1xuXHR2YXIgaW5uZXIgPSB2bS5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJztcblxuXHRpZiAoaW5uZXIpIHtcblx0XHRjdHgubGluZVdpZHRoID0gdm0uYm9yZGVyV2lkdGggKiAyO1xuXHRcdGN0eC5saW5lSm9pbiA9ICdyb3VuZCc7XG5cdH0gZWxzZSB7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZtLmJvcmRlcldpZHRoO1xuXHRcdGN0eC5saW5lSm9pbiA9ICdiZXZlbCc7XG5cdH1cblxuXHRpZiAoYXJjLmZ1bGxDaXJjbGVzKSB7XG5cdFx0ZHJhd0Z1bGxDaXJjbGVCb3JkZXJzKGN0eCwgdm0sIGFyYywgaW5uZXIpO1xuXHR9XG5cblx0aWYgKGlubmVyKSB7XG5cdFx0Y2xpcEFyYyhjdHgsIGFyYyk7XG5cdH1cblxuXHRjdHguYmVnaW5QYXRoKCk7XG5cdGN0eC5hcmMoYXJjLngsIGFyYy55LCB2bS5vdXRlclJhZGl1cywgYXJjLnN0YXJ0QW5nbGUsIGFyYy5lbmRBbmdsZSk7XG5cdGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMuaW5uZXJSYWRpdXMsIGFyYy5lbmRBbmdsZSwgYXJjLnN0YXJ0QW5nbGUsIHRydWUpO1xuXHRjdHguY2xvc2VQYXRoKCk7XG5cdGN0eC5zdHJva2UoKTtcbn1cblxudmFyIGVsZW1lbnRfYXJjID0gY29yZV9lbGVtZW50LmV4dGVuZCh7XG5cdF90eXBlOiAnYXJjJyxcblxuXHRpbkxhYmVsUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRpZiAodm0pIHtcblx0XHRcdHJldHVybiAoTWF0aC5wb3cobW91c2VYIC0gdm0ueCwgMikgPCBNYXRoLnBvdyh2bS5yYWRpdXMgKyB2bS5ob3ZlclJhZGl1cywgMikpO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0aW5SYW5nZTogZnVuY3Rpb24oY2hhcnRYLCBjaGFydFkpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXG5cdFx0aWYgKHZtKSB7XG5cdFx0XHR2YXIgcG9pbnRSZWxhdGl2ZVBvc2l0aW9uID0gaGVscGVycyQxLmdldEFuZ2xlRnJvbVBvaW50KHZtLCB7eDogY2hhcnRYLCB5OiBjaGFydFl9KTtcblx0XHRcdHZhciBhbmdsZSA9IHBvaW50UmVsYXRpdmVQb3NpdGlvbi5hbmdsZTtcblx0XHRcdHZhciBkaXN0YW5jZSA9IHBvaW50UmVsYXRpdmVQb3NpdGlvbi5kaXN0YW5jZTtcblxuXHRcdFx0Ly8gU2FuaXRpc2UgYW5nbGUgcmFuZ2Vcblx0XHRcdHZhciBzdGFydEFuZ2xlID0gdm0uc3RhcnRBbmdsZTtcblx0XHRcdHZhciBlbmRBbmdsZSA9IHZtLmVuZEFuZ2xlO1xuXHRcdFx0d2hpbGUgKGVuZEFuZ2xlIDwgc3RhcnRBbmdsZSkge1xuXHRcdFx0XHRlbmRBbmdsZSArPSBUQVU7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoYW5nbGUgPiBlbmRBbmdsZSkge1xuXHRcdFx0XHRhbmdsZSAtPSBUQVU7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoYW5nbGUgPCBzdGFydEFuZ2xlKSB7XG5cdFx0XHRcdGFuZ2xlICs9IFRBVTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2hlY2sgaWYgd2l0aGluIHRoZSByYW5nZSBvZiB0aGUgb3Blbi9jbG9zZSBhbmdsZVxuXHRcdFx0dmFyIGJldHdlZW5BbmdsZXMgPSAoYW5nbGUgPj0gc3RhcnRBbmdsZSAmJiBhbmdsZSA8PSBlbmRBbmdsZSk7XG5cdFx0XHR2YXIgd2l0aGluUmFkaXVzID0gKGRpc3RhbmNlID49IHZtLmlubmVyUmFkaXVzICYmIGRpc3RhbmNlIDw9IHZtLm91dGVyUmFkaXVzKTtcblxuXHRcdFx0cmV0dXJuIChiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cyk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgaGFsZkFuZ2xlID0gKHZtLnN0YXJ0QW5nbGUgKyB2bS5lbmRBbmdsZSkgLyAyO1xuXHRcdHZhciBoYWxmUmFkaXVzID0gKHZtLmlubmVyUmFkaXVzICsgdm0ub3V0ZXJSYWRpdXMpIC8gMjtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCArIE1hdGguY29zKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzLFxuXHRcdFx0eTogdm0ueSArIE1hdGguc2luKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzXG5cdFx0fTtcblx0fSxcblxuXHRnZXRBcmVhOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiBNYXRoLlBJICogKCh2bS5lbmRBbmdsZSAtIHZtLnN0YXJ0QW5nbGUpIC8gKDIgKiBNYXRoLlBJKSkgKiAoTWF0aC5wb3codm0ub3V0ZXJSYWRpdXMsIDIpIC0gTWF0aC5wb3codm0uaW5uZXJSYWRpdXMsIDIpKTtcblx0fSxcblxuXHR0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIGNlbnRyZUFuZ2xlID0gdm0uc3RhcnRBbmdsZSArICgodm0uZW5kQW5nbGUgLSB2bS5zdGFydEFuZ2xlKSAvIDIpO1xuXHRcdHZhciByYW5nZUZyb21DZW50cmUgPSAodm0ub3V0ZXJSYWRpdXMgLSB2bS5pbm5lclJhZGl1cykgLyAyICsgdm0uaW5uZXJSYWRpdXM7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCArIChNYXRoLmNvcyhjZW50cmVBbmdsZSkgKiByYW5nZUZyb21DZW50cmUpLFxuXHRcdFx0eTogdm0ueSArIChNYXRoLnNpbihjZW50cmVBbmdsZSkgKiByYW5nZUZyb21DZW50cmUpXG5cdFx0fTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5fY2hhcnQuY3R4O1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIHBpeGVsTWFyZ2luID0gKHZtLmJvcmRlckFsaWduID09PSAnaW5uZXInKSA/IDAuMzMgOiAwO1xuXHRcdHZhciBhcmMgPSB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueSxcblx0XHRcdGlubmVyUmFkaXVzOiB2bS5pbm5lclJhZGl1cyxcblx0XHRcdG91dGVyUmFkaXVzOiBNYXRoLm1heCh2bS5vdXRlclJhZGl1cyAtIHBpeGVsTWFyZ2luLCAwKSxcblx0XHRcdHBpeGVsTWFyZ2luOiBwaXhlbE1hcmdpbixcblx0XHRcdHN0YXJ0QW5nbGU6IHZtLnN0YXJ0QW5nbGUsXG5cdFx0XHRlbmRBbmdsZTogdm0uZW5kQW5nbGUsXG5cdFx0XHRmdWxsQ2lyY2xlczogTWF0aC5mbG9vcih2bS5jaXJjdW1mZXJlbmNlIC8gVEFVKVxuXHRcdH07XG5cdFx0dmFyIGk7XG5cblx0XHRjdHguc2F2ZSgpO1xuXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJhY2tncm91bmRDb2xvcjtcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2bS5ib3JkZXJDb2xvcjtcblxuXHRcdGlmIChhcmMuZnVsbENpcmNsZXMpIHtcblx0XHRcdGFyYy5lbmRBbmdsZSA9IGFyYy5zdGFydEFuZ2xlICsgVEFVO1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0Y3R4LmFyYyhhcmMueCwgYXJjLnksIGFyYy5vdXRlclJhZGl1cywgYXJjLnN0YXJ0QW5nbGUsIGFyYy5lbmRBbmdsZSk7XG5cdFx0XHRjdHguYXJjKGFyYy54LCBhcmMueSwgYXJjLmlubmVyUmFkaXVzLCBhcmMuZW5kQW5nbGUsIGFyYy5zdGFydEFuZ2xlLCB0cnVlKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBhcmMuZnVsbENpcmNsZXM7ICsraSkge1xuXHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0fVxuXHRcdFx0YXJjLmVuZEFuZ2xlID0gYXJjLnN0YXJ0QW5nbGUgKyB2bS5jaXJjdW1mZXJlbmNlICUgVEFVO1xuXHRcdH1cblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHguYXJjKGFyYy54LCBhcmMueSwgYXJjLm91dGVyUmFkaXVzLCBhcmMuc3RhcnRBbmdsZSwgYXJjLmVuZEFuZ2xlKTtcblx0XHRjdHguYXJjKGFyYy54LCBhcmMueSwgYXJjLmlubmVyUmFkaXVzLCBhcmMuZW5kQW5nbGUsIGFyYy5zdGFydEFuZ2xlLCB0cnVlKTtcblx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0Y3R4LmZpbGwoKTtcblxuXHRcdGlmICh2bS5ib3JkZXJXaWR0aCkge1xuXHRcdFx0ZHJhd0JvcmRlcihjdHgsIHZtLCBhcmMpO1xuXHRcdH1cblxuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH1cbn0pO1xuXG52YXIgdmFsdWVPckRlZmF1bHQkMSA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxudmFyIGRlZmF1bHRDb2xvciA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0bGluZToge1xuXHRcdFx0dGVuc2lvbjogMC40LFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJXaWR0aDogMyxcblx0XHRcdGJvcmRlckNvbG9yOiBkZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuXHRcdFx0Ym9yZGVyRGFzaDogW10sXG5cdFx0XHRib3JkZXJEYXNoT2Zmc2V0OiAwLjAsXG5cdFx0XHRib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG5cdFx0XHRjYXBCZXppZXJQb2ludHM6IHRydWUsXG5cdFx0XHRmaWxsOiB0cnVlLCAvLyBkbyB3ZSBmaWxsIGluIHRoZSBhcmVhIGJldHdlZW4gdGhlIGxpbmUgYW5kIGl0cyBiYXNlIGF4aXNcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgZWxlbWVudF9saW5lID0gY29yZV9lbGVtZW50LmV4dGVuZCh7XG5cdF90eXBlOiAnbGluZScsXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdm0gPSBtZS5fdmlldztcblx0XHR2YXIgY3R4ID0gbWUuX2NoYXJ0LmN0eDtcblx0XHR2YXIgc3BhbkdhcHMgPSB2bS5zcGFuR2Fwcztcblx0XHR2YXIgcG9pbnRzID0gbWUuX2NoaWxkcmVuLnNsaWNlKCk7IC8vIGNsb25lIGFycmF5XG5cdFx0dmFyIGdsb2JhbERlZmF1bHRzID0gY29yZV9kZWZhdWx0cy5nbG9iYWw7XG5cdFx0dmFyIGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cyA9IGdsb2JhbERlZmF1bHRzLmVsZW1lbnRzLmxpbmU7XG5cdFx0dmFyIGxhc3REcmF3bkluZGV4ID0gLTE7XG5cdFx0dmFyIGNsb3NlUGF0aCA9IG1lLl9sb29wO1xuXHRcdHZhciBpbmRleCwgcHJldmlvdXMsIGN1cnJlbnRWTTtcblxuXHRcdGlmICghcG9pbnRzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChtZS5fbG9vcCkge1xuXHRcdFx0Zm9yIChpbmRleCA9IDA7IGluZGV4IDwgcG9pbnRzLmxlbmd0aDsgKytpbmRleCkge1xuXHRcdFx0XHRwcmV2aW91cyA9IGhlbHBlcnMkMS5wcmV2aW91c0l0ZW0ocG9pbnRzLCBpbmRleCk7XG5cdFx0XHRcdC8vIElmIHRoZSBsaW5lIGhhcyBhbiBvcGVuIHBhdGgsIHNoaWZ0IHRoZSBwb2ludCBhcnJheVxuXHRcdFx0XHRpZiAoIXBvaW50c1tpbmRleF0uX3ZpZXcuc2tpcCAmJiBwcmV2aW91cy5fdmlldy5za2lwKSB7XG5cdFx0XHRcdFx0cG9pbnRzID0gcG9pbnRzLnNsaWNlKGluZGV4KS5jb25jYXQocG9pbnRzLnNsaWNlKDAsIGluZGV4KSk7XG5cdFx0XHRcdFx0Y2xvc2VQYXRoID0gc3BhbkdhcHM7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIElmIHRoZSBsaW5lIGhhcyBhIGNsb3NlIHBhdGgsIGFkZCB0aGUgZmlyc3QgcG9pbnQgYWdhaW5cblx0XHRcdGlmIChjbG9zZVBhdGgpIHtcblx0XHRcdFx0cG9pbnRzLnB1c2gocG9pbnRzWzBdKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjdHguc2F2ZSgpO1xuXG5cdFx0Ly8gU3Ryb2tlIExpbmUgT3B0aW9uc1xuXHRcdGN0eC5saW5lQ2FwID0gdm0uYm9yZGVyQ2FwU3R5bGUgfHwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlckNhcFN0eWxlO1xuXG5cdFx0Ly8gSUUgOSBhbmQgMTAgZG8gbm90IHN1cHBvcnQgbGluZSBkYXNoXG5cdFx0aWYgKGN0eC5zZXRMaW5lRGFzaCkge1xuXHRcdFx0Y3R4LnNldExpbmVEYXNoKHZtLmJvcmRlckRhc2ggfHwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlckRhc2gpO1xuXHRcdH1cblxuXHRcdGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0JDEodm0uYm9yZGVyRGFzaE9mZnNldCwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlckRhc2hPZmZzZXQpO1xuXHRcdGN0eC5saW5lSm9pbiA9IHZtLmJvcmRlckpvaW5TdHlsZSB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVySm9pblN0eWxlO1xuXHRcdGN0eC5saW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdCQxKHZtLmJvcmRlcldpZHRoLCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyV2lkdGgpO1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHZtLmJvcmRlckNvbG9yIHx8IGdsb2JhbERlZmF1bHRzLmRlZmF1bHRDb2xvcjtcblxuXHRcdC8vIFN0cm9rZSBMaW5lXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdFx0Ly8gRmlyc3QgcG9pbnQgbW92ZXMgdG8gaXQncyBzdGFydGluZyBwb3NpdGlvbiBubyBtYXR0ZXIgd2hhdFxuXHRcdGN1cnJlbnRWTSA9IHBvaW50c1swXS5fdmlldztcblx0XHRpZiAoIWN1cnJlbnRWTS5za2lwKSB7XG5cdFx0XHRjdHgubW92ZVRvKGN1cnJlbnRWTS54LCBjdXJyZW50Vk0ueSk7XG5cdFx0XHRsYXN0RHJhd25JbmRleCA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChpbmRleCA9IDE7IGluZGV4IDwgcG9pbnRzLmxlbmd0aDsgKytpbmRleCkge1xuXHRcdFx0Y3VycmVudFZNID0gcG9pbnRzW2luZGV4XS5fdmlldztcblx0XHRcdHByZXZpb3VzID0gbGFzdERyYXduSW5kZXggPT09IC0xID8gaGVscGVycyQxLnByZXZpb3VzSXRlbShwb2ludHMsIGluZGV4KSA6IHBvaW50c1tsYXN0RHJhd25JbmRleF07XG5cblx0XHRcdGlmICghY3VycmVudFZNLnNraXApIHtcblx0XHRcdFx0aWYgKChsYXN0RHJhd25JbmRleCAhPT0gKGluZGV4IC0gMSkgJiYgIXNwYW5HYXBzKSB8fCBsYXN0RHJhd25JbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0XHQvLyBUaGVyZSB3YXMgYSBnYXAgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHBvaW50IGFmdGVyIHRoZSBnYXBcblx0XHRcdFx0XHRjdHgubW92ZVRvKGN1cnJlbnRWTS54LCBjdXJyZW50Vk0ueSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gTGluZSB0byBuZXh0IHBvaW50XG5cdFx0XHRcdFx0aGVscGVycyQxLmNhbnZhcy5saW5lVG8oY3R4LCBwcmV2aW91cy5fdmlldywgY3VycmVudFZNKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsYXN0RHJhd25JbmRleCA9IGluZGV4O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChjbG9zZVBhdGgpIHtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHR9XG5cblx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fVxufSk7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQyID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xuXG52YXIgZGVmYXVsdENvbG9yJDEgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3I7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRlbGVtZW50czoge1xuXHRcdHBvaW50OiB7XG5cdFx0XHRyYWRpdXM6IDMsXG5cdFx0XHRwb2ludFN0eWxlOiAnY2lyY2xlJyxcblx0XHRcdGJhY2tncm91bmRDb2xvcjogZGVmYXVsdENvbG9yJDEsXG5cdFx0XHRib3JkZXJDb2xvcjogZGVmYXVsdENvbG9yJDEsXG5cdFx0XHRib3JkZXJXaWR0aDogMSxcblx0XHRcdC8vIEhvdmVyXG5cdFx0XHRoaXRSYWRpdXM6IDEsXG5cdFx0XHRob3ZlclJhZGl1czogNCxcblx0XHRcdGhvdmVyQm9yZGVyV2lkdGg6IDFcblx0XHR9XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiB4UmFuZ2UobW91c2VYKSB7XG5cdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdHJldHVybiB2bSA/IChNYXRoLmFicyhtb3VzZVggLSB2bS54KSA8IHZtLnJhZGl1cyArIHZtLmhpdFJhZGl1cykgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24geVJhbmdlKG1vdXNlWSkge1xuXHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRyZXR1cm4gdm0gPyAoTWF0aC5hYnMobW91c2VZIC0gdm0ueSkgPCB2bS5yYWRpdXMgKyB2bS5oaXRSYWRpdXMpIDogZmFsc2U7XG59XG5cbnZhciBlbGVtZW50X3BvaW50ID0gY29yZV9lbGVtZW50LmV4dGVuZCh7XG5cdF90eXBlOiAncG9pbnQnLFxuXG5cdGluUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWCwgbW91c2VZKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4gdm0gPyAoKE1hdGgucG93KG1vdXNlWCAtIHZtLngsIDIpICsgTWF0aC5wb3cobW91c2VZIC0gdm0ueSwgMikpIDwgTWF0aC5wb3codm0uaGl0UmFkaXVzICsgdm0ucmFkaXVzLCAyKSkgOiBmYWxzZTtcblx0fSxcblxuXHRpbkxhYmVsUmFuZ2U6IHhSYW5nZSxcblx0aW5YUmFuZ2U6IHhSYW5nZSxcblx0aW5ZUmFuZ2U6IHlSYW5nZSxcblxuXHRnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCxcblx0XHRcdHk6IHZtLnlcblx0XHR9O1xuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBNYXRoLlBJICogTWF0aC5wb3codGhpcy5fdmlldy5yYWRpdXMsIDIpO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCxcblx0XHRcdHk6IHZtLnksXG5cdFx0XHRwYWRkaW5nOiB2bS5yYWRpdXMgKyB2bS5ib3JkZXJXaWR0aFxuXHRcdH07XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oY2hhcnRBcmVhKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgY3R4ID0gdGhpcy5fY2hhcnQuY3R4O1xuXHRcdHZhciBwb2ludFN0eWxlID0gdm0ucG9pbnRTdHlsZTtcblx0XHR2YXIgcm90YXRpb24gPSB2bS5yb3RhdGlvbjtcblx0XHR2YXIgcmFkaXVzID0gdm0ucmFkaXVzO1xuXHRcdHZhciB4ID0gdm0ueDtcblx0XHR2YXIgeSA9IHZtLnk7XG5cdFx0dmFyIGdsb2JhbERlZmF1bHRzID0gY29yZV9kZWZhdWx0cy5nbG9iYWw7XG5cdFx0dmFyIGRlZmF1bHRDb2xvciA9IGdsb2JhbERlZmF1bHRzLmRlZmF1bHRDb2xvcjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaGFkb3dcblxuXHRcdGlmICh2bS5za2lwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2xpcHBpbmcgZm9yIFBvaW50cy5cblx0XHRpZiAoY2hhcnRBcmVhID09PSB1bmRlZmluZWQgfHwgaGVscGVycyQxLmNhbnZhcy5faXNQb2ludEluQXJlYSh2bSwgY2hhcnRBcmVhKSkge1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdm0uYm9yZGVyQ29sb3IgfHwgZGVmYXVsdENvbG9yO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JDIodm0uYm9yZGVyV2lkdGgsIGdsb2JhbERlZmF1bHRzLmVsZW1lbnRzLnBvaW50LmJvcmRlcldpZHRoKTtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSB2bS5iYWNrZ3JvdW5kQ29sb3IgfHwgZGVmYXVsdENvbG9yO1xuXHRcdFx0aGVscGVycyQxLmNhbnZhcy5kcmF3UG9pbnQoY3R4LCBwb2ludFN0eWxlLCByYWRpdXMsIHgsIHksIHJvdGF0aW9uKTtcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgZGVmYXVsdENvbG9yJDIgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3I7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRlbGVtZW50czoge1xuXHRcdHJlY3RhbmdsZToge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0Q29sb3IkMixcblx0XHRcdGJvcmRlckNvbG9yOiBkZWZhdWx0Q29sb3IkMixcblx0XHRcdGJvcmRlclNraXBwZWQ6ICdib3R0b20nLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IDBcblx0XHR9XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBpc1ZlcnRpY2FsKHZtKSB7XG5cdHJldHVybiB2bSAmJiB2bS53aWR0aCAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGJvdW5kcyBvZiB0aGUgYmFyIHJlZ2FyZGxlc3Mgb2YgdGhlIG9yaWVudGF0aW9uXG4gKiBAcGFyYW0gYmFyIHtDaGFydC5FbGVtZW50LlJlY3RhbmdsZX0gdGhlIGJhclxuICogQHJldHVybiB7Qm91bmRzfSBib3VuZHMgb2YgdGhlIGJhclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0QmFyQm91bmRzKHZtKSB7XG5cdHZhciB4MSwgeDIsIHkxLCB5MiwgaGFsZjtcblxuXHRpZiAoaXNWZXJ0aWNhbCh2bSkpIHtcblx0XHRoYWxmID0gdm0ud2lkdGggLyAyO1xuXHRcdHgxID0gdm0ueCAtIGhhbGY7XG5cdFx0eDIgPSB2bS54ICsgaGFsZjtcblx0XHR5MSA9IE1hdGgubWluKHZtLnksIHZtLmJhc2UpO1xuXHRcdHkyID0gTWF0aC5tYXgodm0ueSwgdm0uYmFzZSk7XG5cdH0gZWxzZSB7XG5cdFx0aGFsZiA9IHZtLmhlaWdodCAvIDI7XG5cdFx0eDEgPSBNYXRoLm1pbih2bS54LCB2bS5iYXNlKTtcblx0XHR4MiA9IE1hdGgubWF4KHZtLngsIHZtLmJhc2UpO1xuXHRcdHkxID0gdm0ueSAtIGhhbGY7XG5cdFx0eTIgPSB2bS55ICsgaGFsZjtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bGVmdDogeDEsXG5cdFx0dG9wOiB5MSxcblx0XHRyaWdodDogeDIsXG5cdFx0Ym90dG9tOiB5MlxuXHR9O1xufVxuXG5mdW5jdGlvbiBzd2FwKG9yaWcsIHYxLCB2Mikge1xuXHRyZXR1cm4gb3JpZyA9PT0gdjEgPyB2MiA6IG9yaWcgPT09IHYyID8gdjEgOiBvcmlnO1xufVxuXG5mdW5jdGlvbiBwYXJzZUJvcmRlclNraXBwZWQodm0pIHtcblx0dmFyIGVkZ2UgPSB2bS5ib3JkZXJTa2lwcGVkO1xuXHR2YXIgcmVzID0ge307XG5cblx0aWYgKCFlZGdlKSB7XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXG5cdGlmICh2bS5ob3Jpem9udGFsKSB7XG5cdFx0aWYgKHZtLmJhc2UgPiB2bS54KSB7XG5cdFx0XHRlZGdlID0gc3dhcChlZGdlLCAnbGVmdCcsICdyaWdodCcpO1xuXHRcdH1cblx0fSBlbHNlIGlmICh2bS5iYXNlIDwgdm0ueSkge1xuXHRcdGVkZ2UgPSBzd2FwKGVkZ2UsICdib3R0b20nLCAndG9wJyk7XG5cdH1cblxuXHRyZXNbZWRnZV0gPSB0cnVlO1xuXHRyZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBwYXJzZUJvcmRlcldpZHRoKHZtLCBtYXhXLCBtYXhIKSB7XG5cdHZhciB2YWx1ZSA9IHZtLmJvcmRlcldpZHRoO1xuXHR2YXIgc2tpcCA9IHBhcnNlQm9yZGVyU2tpcHBlZCh2bSk7XG5cdHZhciB0LCByLCBiLCBsO1xuXG5cdGlmIChoZWxwZXJzJDEuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0dCA9ICt2YWx1ZS50b3AgfHwgMDtcblx0XHRyID0gK3ZhbHVlLnJpZ2h0IHx8IDA7XG5cdFx0YiA9ICt2YWx1ZS5ib3R0b20gfHwgMDtcblx0XHRsID0gK3ZhbHVlLmxlZnQgfHwgMDtcblx0fSBlbHNlIHtcblx0XHR0ID0gciA9IGIgPSBsID0gK3ZhbHVlIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHQ6IHNraXAudG9wIHx8ICh0IDwgMCkgPyAwIDogdCA+IG1heEggPyBtYXhIIDogdCxcblx0XHRyOiBza2lwLnJpZ2h0IHx8IChyIDwgMCkgPyAwIDogciA+IG1heFcgPyBtYXhXIDogcixcblx0XHRiOiBza2lwLmJvdHRvbSB8fCAoYiA8IDApID8gMCA6IGIgPiBtYXhIID8gbWF4SCA6IGIsXG5cdFx0bDogc2tpcC5sZWZ0IHx8IChsIDwgMCkgPyAwIDogbCA+IG1heFcgPyBtYXhXIDogbFxuXHR9O1xufVxuXG5mdW5jdGlvbiBib3VuZGluZ1JlY3RzKHZtKSB7XG5cdHZhciBib3VuZHMgPSBnZXRCYXJCb3VuZHModm0pO1xuXHR2YXIgd2lkdGggPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcblx0dmFyIGhlaWdodCA9IGJvdW5kcy5ib3R0b20gLSBib3VuZHMudG9wO1xuXHR2YXIgYm9yZGVyID0gcGFyc2VCb3JkZXJXaWR0aCh2bSwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcblxuXHRyZXR1cm4ge1xuXHRcdG91dGVyOiB7XG5cdFx0XHR4OiBib3VuZHMubGVmdCxcblx0XHRcdHk6IGJvdW5kcy50b3AsXG5cdFx0XHR3OiB3aWR0aCxcblx0XHRcdGg6IGhlaWdodFxuXHRcdH0sXG5cdFx0aW5uZXI6IHtcblx0XHRcdHg6IGJvdW5kcy5sZWZ0ICsgYm9yZGVyLmwsXG5cdFx0XHR5OiBib3VuZHMudG9wICsgYm9yZGVyLnQsXG5cdFx0XHR3OiB3aWR0aCAtIGJvcmRlci5sIC0gYm9yZGVyLnIsXG5cdFx0XHRoOiBoZWlnaHQgLSBib3JkZXIudCAtIGJvcmRlci5iXG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBpblJhbmdlKHZtLCB4LCB5KSB7XG5cdHZhciBza2lwWCA9IHggPT09IG51bGw7XG5cdHZhciBza2lwWSA9IHkgPT09IG51bGw7XG5cdHZhciBib3VuZHMgPSAhdm0gfHwgKHNraXBYICYmIHNraXBZKSA/IGZhbHNlIDogZ2V0QmFyQm91bmRzKHZtKTtcblxuXHRyZXR1cm4gYm91bmRzXG5cdFx0JiYgKHNraXBYIHx8IHggPj0gYm91bmRzLmxlZnQgJiYgeCA8PSBib3VuZHMucmlnaHQpXG5cdFx0JiYgKHNraXBZIHx8IHkgPj0gYm91bmRzLnRvcCAmJiB5IDw9IGJvdW5kcy5ib3R0b20pO1xufVxuXG52YXIgZWxlbWVudF9yZWN0YW5nbGUgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0X3R5cGU6ICdyZWN0YW5nbGUnLFxuXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgcmVjdHMgPSBib3VuZGluZ1JlY3RzKHZtKTtcblx0XHR2YXIgb3V0ZXIgPSByZWN0cy5vdXRlcjtcblx0XHR2YXIgaW5uZXIgPSByZWN0cy5pbm5lcjtcblxuXHRcdGN0eC5maWxsU3R5bGUgPSB2bS5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0Y3R4LmZpbGxSZWN0KG91dGVyLngsIG91dGVyLnksIG91dGVyLncsIG91dGVyLmgpO1xuXG5cdFx0aWYgKG91dGVyLncgPT09IGlubmVyLncgJiYgb3V0ZXIuaCA9PT0gaW5uZXIuaCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGN0eC5zYXZlKCk7XG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGN0eC5yZWN0KG91dGVyLngsIG91dGVyLnksIG91dGVyLncsIG91dGVyLmgpO1xuXHRcdGN0eC5jbGlwKCk7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJvcmRlckNvbG9yO1xuXHRcdGN0eC5yZWN0KGlubmVyLngsIGlubmVyLnksIGlubmVyLncsIGlubmVyLmgpO1xuXHRcdGN0eC5maWxsKCdldmVub2RkJyk7XG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fSxcblxuXHRoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIHZtLmJhc2UgLSB2bS55O1xuXHR9LFxuXG5cdGluUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWCwgbW91c2VZKSB7XG5cdFx0cmV0dXJuIGluUmFuZ2UodGhpcy5fdmlldywgbW91c2VYLCBtb3VzZVkpO1xuXHR9LFxuXG5cdGluTGFiZWxSYW5nZTogZnVuY3Rpb24obW91c2VYLCBtb3VzZVkpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiBpc1ZlcnRpY2FsKHZtKVxuXHRcdFx0PyBpblJhbmdlKHZtLCBtb3VzZVgsIG51bGwpXG5cdFx0XHQ6IGluUmFuZ2Uodm0sIG51bGwsIG1vdXNlWSk7XG5cdH0sXG5cblx0aW5YUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWCkge1xuXHRcdHJldHVybiBpblJhbmdlKHRoaXMuX3ZpZXcsIG1vdXNlWCwgbnVsbCk7XG5cdH0sXG5cblx0aW5ZUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWSkge1xuXHRcdHJldHVybiBpblJhbmdlKHRoaXMuX3ZpZXcsIG51bGwsIG1vdXNlWSk7XG5cdH0sXG5cblx0Z2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIHgsIHk7XG5cdFx0aWYgKGlzVmVydGljYWwodm0pKSB7XG5cdFx0XHR4ID0gdm0ueDtcblx0XHRcdHkgPSAodm0ueSArIHZtLmJhc2UpIC8gMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0eCA9ICh2bS54ICsgdm0uYmFzZSkgLyAyO1xuXHRcdFx0eSA9IHZtLnk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHt4OiB4LCB5OiB5fTtcblx0fSxcblxuXHRnZXRBcmVhOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXG5cdFx0cmV0dXJuIGlzVmVydGljYWwodm0pXG5cdFx0XHQ/IHZtLndpZHRoICogTWF0aC5hYnModm0ueSAtIHZtLmJhc2UpXG5cdFx0XHQ6IHZtLmhlaWdodCAqIE1hdGguYWJzKHZtLnggLSB2bS5iYXNlKTtcblx0fSxcblxuXHR0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHZtLngsXG5cdFx0XHR5OiB2bS55XG5cdFx0fTtcblx0fVxufSk7XG5cbnZhciBlbGVtZW50cyA9IHt9O1xudmFyIEFyYyA9IGVsZW1lbnRfYXJjO1xudmFyIExpbmUgPSBlbGVtZW50X2xpbmU7XG52YXIgUG9pbnQgPSBlbGVtZW50X3BvaW50O1xudmFyIFJlY3RhbmdsZSA9IGVsZW1lbnRfcmVjdGFuZ2xlO1xuZWxlbWVudHMuQXJjID0gQXJjO1xuZWxlbWVudHMuTGluZSA9IExpbmU7XG5lbGVtZW50cy5Qb2ludCA9IFBvaW50O1xuZWxlbWVudHMuUmVjdGFuZ2xlID0gUmVjdGFuZ2xlO1xuXG52YXIgZGVwcmVjYXRlZCA9IGhlbHBlcnMkMS5fZGVwcmVjYXRlZDtcbnZhciB2YWx1ZU9yRGVmYXVsdCQzID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2JhcicsIHtcblx0aG92ZXI6IHtcblx0XHRtb2RlOiAnbGFiZWwnXG5cdH0sXG5cblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnY2F0ZWdvcnknLFxuXHRcdFx0b2Zmc2V0OiB0cnVlLFxuXHRcdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRcdG9mZnNldEdyaWRMaW5lczogdHJ1ZVxuXHRcdFx0fVxuXHRcdH1dLFxuXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJ1xuXHRcdH1dXG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZGF0YXNldHM6IHtcblx0XHRiYXI6IHtcblx0XHRcdGNhdGVnb3J5UGVyY2VudGFnZTogMC44LFxuXHRcdFx0YmFyUGVyY2VudGFnZTogMC45XG5cdFx0fVxuXHR9XG59KTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgXCJvcHRpbWFsXCIgc2FtcGxlIHNpemUgdG8gbWFpbnRhaW4gYmFycyBlcXVhbGx5IHNpemVkIHdoaWxlIHByZXZlbnRpbmcgb3ZlcmxhcC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVNaW5TYW1wbGVTaXplKHNjYWxlLCBwaXhlbHMpIHtcblx0dmFyIG1pbiA9IHNjYWxlLl9sZW5ndGg7XG5cdHZhciBwcmV2LCBjdXJyLCBpLCBpbGVuO1xuXG5cdGZvciAoaSA9IDEsIGlsZW4gPSBwaXhlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bWluID0gTWF0aC5taW4obWluLCBNYXRoLmFicyhwaXhlbHNbaV0gLSBwaXhlbHNbaSAtIDFdKSk7XG5cdH1cblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gc2NhbGUuZ2V0VGlja3MoKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKGkpO1xuXHRcdG1pbiA9IGkgPiAwID8gTWF0aC5taW4obWluLCBNYXRoLmFicyhjdXJyIC0gcHJldikpIDogbWluO1xuXHRcdHByZXYgPSBjdXJyO1xuXHR9XG5cblx0cmV0dXJuIG1pbjtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhbiBcImlkZWFsXCIgY2F0ZWdvcnkgYmFzZWQgb24gdGhlIGFic29sdXRlIGJhciB0aGlja25lc3Mgb3IsIGlmIHVuZGVmaW5lZCBvciBudWxsLFxuICogdXNlcyB0aGUgc21hbGxlc3QgaW50ZXJ2YWwgKHNlZSBjb21wdXRlTWluU2FtcGxlU2l6ZSkgdGhhdCBwcmV2ZW50cyBiYXIgb3ZlcmxhcHBpbmcuIFRoaXNcbiAqIG1vZGUgY3VycmVudGx5IGFsd2F5cyBnZW5lcmF0ZXMgYmFycyBlcXVhbGx5IHNpemVkICh1bnRpbCB3ZSBpbnRyb2R1Y2Ugc2NyaXB0YWJsZSBvcHRpb25zPykuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zKSB7XG5cdHZhciB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcblx0dmFyIGNvdW50ID0gcnVsZXIuc3RhY2tDb3VudDtcblx0dmFyIGN1cnIgPSBydWxlci5waXhlbHNbaW5kZXhdO1xuXHR2YXIgbWluID0gaGVscGVycyQxLmlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKVxuXHRcdD8gY29tcHV0ZU1pblNhbXBsZVNpemUocnVsZXIuc2NhbGUsIHJ1bGVyLnBpeGVscylcblx0XHQ6IC0xO1xuXHR2YXIgc2l6ZSwgcmF0aW87XG5cblx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKHRoaWNrbmVzcykpIHtcblx0XHRzaXplID0gbWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG5cdFx0cmF0aW8gPSBvcHRpb25zLmJhclBlcmNlbnRhZ2U7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gV2hlbiBiYXIgdGhpY2tuZXNzIGlzIGVuZm9yY2VkLCBjYXRlZ29yeSBhbmQgYmFyIHBlcmNlbnRhZ2VzIGFyZSBpZ25vcmVkLlxuXHRcdC8vIE5vdGUoU0IpOiB3ZSBjb3VsZCBhZGQgc3VwcG9ydCBmb3IgcmVsYXRpdmUgYmFyIHRoaWNrbmVzcyAoZS5nLiBiYXJUaGlja25lc3M6ICc1MCUnKVxuXHRcdC8vIGFuZCBkZXByZWNhdGUgYmFyUGVyY2VudGFnZSBzaW5jZSB0aGlzIHZhbHVlIGlzIGlnbm9yZWQgd2hlbiB0aGlja25lc3MgaXMgYWJzb2x1dGUuXG5cdFx0c2l6ZSA9IHRoaWNrbmVzcyAqIGNvdW50O1xuXHRcdHJhdGlvID0gMTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Y2h1bms6IHNpemUgLyBjb3VudCxcblx0XHRyYXRpbzogcmF0aW8sXG5cdFx0c3RhcnQ6IGN1cnIgLSAoc2l6ZSAvIDIpXG5cdH07XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgYW4gXCJvcHRpbWFsXCIgY2F0ZWdvcnkgdGhhdCBnbG9iYWxseSBhcnJhbmdlcyBiYXJzIHNpZGUgYnkgc2lkZSAobm8gZ2FwIHdoZW5cbiAqIHBlcmNlbnRhZ2Ugb3B0aW9ucyBhcmUgMSksIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBhbmQgZm9sbG93aW5nIGNhdGVnb3JpZXMuIFRoaXMgbW9kZVxuICogZ2VuZXJhdGVzIGJhcnMgd2l0aCBkaWZmZXJlbnQgd2lkdGhzIHdoZW4gZGF0YSBhcmUgbm90IGV2ZW5seSBzcGFjZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucykge1xuXHR2YXIgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuXHR2YXIgY3VyciA9IHBpeGVsc1tpbmRleF07XG5cdHZhciBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuXHR2YXIgbmV4dCA9IGluZGV4IDwgcGl4ZWxzLmxlbmd0aCAtIDEgPyBwaXhlbHNbaW5kZXggKyAxXSA6IG51bGw7XG5cdHZhciBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG5cdHZhciBzdGFydCwgc2l6ZTtcblxuXHRpZiAocHJldiA9PT0gbnVsbCkge1xuXHRcdC8vIGZpcnN0IGRhdGE6IGl0cyBzaXplIGlzIGRvdWJsZSBiYXNlZCBvbiB0aGUgbmV4dCBwb2ludCBvcixcblx0XHQvLyBpZiBpdCdzIGFsc28gdGhlIGxhc3QgZGF0YSwgd2UgdXNlIHRoZSBzY2FsZSBzaXplLlxuXHRcdHByZXYgPSBjdXJyIC0gKG5leHQgPT09IG51bGwgPyBydWxlci5lbmQgLSBydWxlci5zdGFydCA6IG5leHQgLSBjdXJyKTtcblx0fVxuXG5cdGlmIChuZXh0ID09PSBudWxsKSB7XG5cdFx0Ly8gbGFzdCBkYXRhOiBpdHMgc2l6ZSBpcyBhbHNvIGRvdWJsZSBiYXNlZCBvbiB0aGUgcHJldmlvdXMgcG9pbnQuXG5cdFx0bmV4dCA9IGN1cnIgKyBjdXJyIC0gcHJldjtcblx0fVxuXG5cdHN0YXJ0ID0gY3VyciAtIChjdXJyIC0gTWF0aC5taW4ocHJldiwgbmV4dCkpIC8gMiAqIHBlcmNlbnQ7XG5cdHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcblxuXHRyZXR1cm4ge1xuXHRcdGNodW5rOiBzaXplIC8gcnVsZXIuc3RhY2tDb3VudCxcblx0XHRyYXRpbzogb3B0aW9ucy5iYXJQZXJjZW50YWdlLFxuXHRcdHN0YXJ0OiBzdGFydFxuXHR9O1xufVxuXG52YXIgY29udHJvbGxlcl9iYXIgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cblx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5SZWN0YW5nbGUsXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YUVsZW1lbnRPcHRpb25zOiBbXG5cdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0J2JvcmRlckNvbG9yJyxcblx0XHQnYm9yZGVyU2tpcHBlZCcsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnYmFyUGVyY2VudGFnZScsXG5cdFx0J2JhclRoaWNrbmVzcycsXG5cdFx0J2NhdGVnb3J5UGVyY2VudGFnZScsXG5cdFx0J21heEJhclRoaWNrbmVzcycsXG5cdFx0J21pbkJhckxlbmd0aCdcblx0XSxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhLCBzY2FsZU9wdHM7XG5cblx0XHRjb3JlX2RhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5pbml0aWFsaXplLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0bWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRtZXRhLnN0YWNrID0gbWUuZ2V0RGF0YXNldCgpLnN0YWNrO1xuXHRcdG1ldGEuYmFyID0gdHJ1ZTtcblxuXHRcdHNjYWxlT3B0cyA9IG1lLl9nZXRJbmRleFNjYWxlKCkub3B0aW9ucztcblx0XHRkZXByZWNhdGVkKCdiYXIgY2hhcnQnLCBzY2FsZU9wdHMuYmFyUGVyY2VudGFnZSwgJ3NjYWxlcy5beC95XUF4ZXMuYmFyUGVyY2VudGFnZScsICdkYXRhc2V0LmJhclBlcmNlbnRhZ2UnKTtcblx0XHRkZXByZWNhdGVkKCdiYXIgY2hhcnQnLCBzY2FsZU9wdHMuYmFyVGhpY2tuZXNzLCAnc2NhbGVzLlt4L3ldQXhlcy5iYXJUaGlja25lc3MnLCAnZGF0YXNldC5iYXJUaGlja25lc3MnKTtcblx0XHRkZXByZWNhdGVkKCdiYXIgY2hhcnQnLCBzY2FsZU9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlLCAnc2NhbGVzLlt4L3ldQXhlcy5jYXRlZ29yeVBlcmNlbnRhZ2UnLCAnZGF0YXNldC5jYXRlZ29yeVBlcmNlbnRhZ2UnKTtcblx0XHRkZXByZWNhdGVkKCdiYXIgY2hhcnQnLCBtZS5fZ2V0VmFsdWVTY2FsZSgpLm9wdGlvbnMubWluQmFyTGVuZ3RoLCAnc2NhbGVzLlt4L3ldQXhlcy5taW5CYXJMZW5ndGgnLCAnZGF0YXNldC5taW5CYXJMZW5ndGgnKTtcblx0XHRkZXByZWNhdGVkKCdiYXIgY2hhcnQnLCBzY2FsZU9wdHMubWF4QmFyVGhpY2tuZXNzLCAnc2NhbGVzLlt4L3ldQXhlcy5tYXhCYXJUaGlja25lc3MnLCAnZGF0YXNldC5tYXhCYXJUaGlja25lc3MnKTtcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgcmVjdHMgPSBtZS5nZXRNZXRhKCkuZGF0YTtcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdG1lLl9ydWxlciA9IG1lLmdldFJ1bGVyKCk7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcmVjdHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZS51cGRhdGVFbGVtZW50KHJlY3RzW2ldLCBpLCByZXNldCk7XG5cdFx0fVxuXHR9LFxuXG5cdHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHJlY3RhbmdsZSwgaW5kZXgsIHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHJlY3RhbmdsZSwgaW5kZXgpO1xuXG5cdFx0cmVjdGFuZ2xlLl94U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueEF4aXNJRCk7XG5cdFx0cmVjdGFuZ2xlLl95U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cdFx0cmVjdGFuZ2xlLl9kYXRhc2V0SW5kZXggPSBtZS5pbmRleDtcblx0XHRyZWN0YW5nbGUuX2luZGV4ID0gaW5kZXg7XG5cdFx0cmVjdGFuZ2xlLl9tb2RlbCA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlclNraXBwZWQ6IG9wdGlvbnMuYm9yZGVyU2tpcHBlZCxcblx0XHRcdGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuXHRcdFx0ZGF0YXNldExhYmVsOiBkYXRhc2V0LmxhYmVsLFxuXHRcdFx0bGFiZWw6IG1lLmNoYXJ0LmRhdGEubGFiZWxzW2luZGV4XVxuXHRcdH07XG5cblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkoZGF0YXNldC5kYXRhW2luZGV4XSkpIHtcblx0XHRcdHJlY3RhbmdsZS5fbW9kZWwuYm9yZGVyU2tpcHBlZCA9IG51bGw7XG5cdFx0fVxuXG5cdFx0bWUuX3VwZGF0ZUVsZW1lbnRHZW9tZXRyeShyZWN0YW5nbGUsIGluZGV4LCByZXNldCwgb3B0aW9ucyk7XG5cblx0XHRyZWN0YW5nbGUucGl2b3QoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF91cGRhdGVFbGVtZW50R2VvbWV0cnk6IGZ1bmN0aW9uKHJlY3RhbmdsZSwgaW5kZXgsIHJlc2V0LCBvcHRpb25zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbW9kZWwgPSByZWN0YW5nbGUuX21vZGVsO1xuXHRcdHZhciB2c2NhbGUgPSBtZS5fZ2V0VmFsdWVTY2FsZSgpO1xuXHRcdHZhciBiYXNlID0gdnNjYWxlLmdldEJhc2VQaXhlbCgpO1xuXHRcdHZhciBob3Jpem9udGFsID0gdnNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuXHRcdHZhciBydWxlciA9IG1lLl9ydWxlciB8fCBtZS5nZXRSdWxlcigpO1xuXHRcdHZhciB2cGl4ZWxzID0gbWUuY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMobWUuaW5kZXgsIGluZGV4LCBvcHRpb25zKTtcblx0XHR2YXIgaXBpeGVscyA9IG1lLmNhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKG1lLmluZGV4LCBpbmRleCwgcnVsZXIsIG9wdGlvbnMpO1xuXG5cdFx0bW9kZWwuaG9yaXpvbnRhbCA9IGhvcml6b250YWw7XG5cdFx0bW9kZWwuYmFzZSA9IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuYmFzZTtcblx0XHRtb2RlbC54ID0gaG9yaXpvbnRhbCA/IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuaGVhZCA6IGlwaXhlbHMuY2VudGVyO1xuXHRcdG1vZGVsLnkgPSBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiByZXNldCA/IGJhc2UgOiB2cGl4ZWxzLmhlYWQ7XG5cdFx0bW9kZWwuaGVpZ2h0ID0gaG9yaXpvbnRhbCA/IGlwaXhlbHMuc2l6ZSA6IHVuZGVmaW5lZDtcblx0XHRtb2RlbC53aWR0aCA9IGhvcml6b250YWwgPyB1bmRlZmluZWQgOiBpcGl4ZWxzLnNpemU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHN0YWNrcyBiYXNlZCBvbiBncm91cHMgYW5kIGJhciB2aXNpYmlsaXR5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2xhc3RdIC0gVGhlIGRhdGFzZXQgaW5kZXhcblx0ICogQHJldHVybnMge3N0cmluZ1tdfSBUaGUgbGlzdCBvZiBzdGFjayBJRHNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRTdGFja3M6IGZ1bmN0aW9uKGxhc3QpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBzY2FsZSA9IG1lLl9nZXRJbmRleFNjYWxlKCk7XG5cdFx0dmFyIG1ldGFzZXRzID0gc2NhbGUuX2dldE1hdGNoaW5nVmlzaWJsZU1ldGFzKG1lLl90eXBlKTtcblx0XHR2YXIgc3RhY2tlZCA9IHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcblx0XHR2YXIgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDtcblx0XHR2YXIgc3RhY2tzID0gW107XG5cdFx0dmFyIGksIG1ldGE7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZXRhID0gbWV0YXNldHNbaV07XG5cdFx0XHQvLyBzdGFja2VkICAgfCBtZXRhLnN0YWNrXG5cdFx0XHQvLyAgICAgICAgICAgfCBmb3VuZCB8IG5vdCBmb3VuZCB8IHVuZGVmaW5lZFxuXHRcdFx0Ly8gZmFsc2UgICAgIHwgICB4ICAgfCAgICAgeCAgICAgfCAgICAgeFxuXHRcdFx0Ly8gdHJ1ZSAgICAgIHwgICAgICAgfCAgICAgeCAgICAgfFxuXHRcdFx0Ly8gdW5kZWZpbmVkIHwgICAgICAgfCAgICAgeCAgICAgfCAgICAgeFxuXHRcdFx0aWYgKHN0YWNrZWQgPT09IGZhbHNlIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSB8fFxuXHRcdFx0XHQoc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgPT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdFx0c3RhY2tzLnB1c2gobWV0YS5zdGFjayk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWV0YS5pbmRleCA9PT0gbGFzdCkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gc3RhY2tzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBlZmZlY3RpdmUgbnVtYmVyIG9mIHN0YWNrcyBiYXNlZCBvbiBncm91cHMgYW5kIGJhciB2aXNpYmlsaXR5LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0U3RhY2tDb3VudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFN0YWNrcygpLmxlbmd0aDtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc3RhY2sgaW5kZXggZm9yIHRoZSBnaXZlbiBkYXRhc2V0IGJhc2VkIG9uIGdyb3VwcyBhbmQgYmFyIHZpc2liaWxpdHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGF0YXNldEluZGV4XSAtIFRoZSBkYXRhc2V0IGluZGV4XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV0gLSBUaGUgc3RhY2sgbmFtZSB0byBmaW5kXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzdGFjayBpbmRleFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0U3RhY2tJbmRleDogZnVuY3Rpb24oZGF0YXNldEluZGV4LCBuYW1lKSB7XG5cdFx0dmFyIHN0YWNrcyA9IHRoaXMuX2dldFN0YWNrcyhkYXRhc2V0SW5kZXgpO1xuXHRcdHZhciBpbmRleCA9IChuYW1lICE9PSB1bmRlZmluZWQpXG5cdFx0XHQ/IHN0YWNrcy5pbmRleE9mKG5hbWUpXG5cdFx0XHQ6IC0xOyAvLyBpbmRleE9mIHJldHVybnMgLTEgaWYgZWxlbWVudCBpcyBub3QgcHJlc2VudFxuXG5cdFx0cmV0dXJuIChpbmRleCA9PT0gLTEpXG5cdFx0XHQ/IHN0YWNrcy5sZW5ndGggLSAxXG5cdFx0XHQ6IGluZGV4O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0UnVsZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHNjYWxlID0gbWUuX2dldEluZGV4U2NhbGUoKTtcblx0XHR2YXIgcGl4ZWxzID0gW107XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gbWUuZ2V0TWV0YSgpLmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwaXhlbHMucHVzaChzY2FsZS5nZXRQaXhlbEZvclZhbHVlKG51bGwsIGksIG1lLmluZGV4KSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHBpeGVsczogcGl4ZWxzLFxuXHRcdFx0c3RhcnQ6IHNjYWxlLl9zdGFydFBpeGVsLFxuXHRcdFx0ZW5kOiBzY2FsZS5fZW5kUGl4ZWwsXG5cdFx0XHRzdGFja0NvdW50OiBtZS5nZXRTdGFja0NvdW50KCksXG5cdFx0XHRzY2FsZTogc2NhbGVcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBOb3RlOiBwaXhlbCB2YWx1ZXMgYXJlIG5vdCBjbGFtcGVkIHRvIHRoZSBzY2FsZSBhcmVhLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Y2FsY3VsYXRlQmFyVmFsdWVQaXhlbHM6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCwgaW5kZXgsIG9wdGlvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBzY2FsZSA9IG1lLl9nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuXHRcdHZhciBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIG1ldGFzZXRzID0gc2NhbGUuX2dldE1hdGNoaW5nVmlzaWJsZU1ldGFzKG1lLl90eXBlKTtcblx0XHR2YXIgdmFsdWUgPSBzY2FsZS5fcGFyc2VWYWx1ZShkYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdKTtcblx0XHR2YXIgbWluQmFyTGVuZ3RoID0gb3B0aW9ucy5taW5CYXJMZW5ndGg7XG5cdFx0dmFyIHN0YWNrZWQgPSBzY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG5cdFx0dmFyIHN0YWNrID0gbWUuZ2V0TWV0YSgpLnN0YWNrO1xuXHRcdHZhciBzdGFydCA9IHZhbHVlLnN0YXJ0ID09PSB1bmRlZmluZWQgPyAwIDogdmFsdWUubWF4ID49IDAgJiYgdmFsdWUubWluID49IDAgPyB2YWx1ZS5taW4gOiB2YWx1ZS5tYXg7XG5cdFx0dmFyIGxlbmd0aCA9IHZhbHVlLnN0YXJ0ID09PSB1bmRlZmluZWQgPyB2YWx1ZS5lbmQgOiB2YWx1ZS5tYXggPj0gMCAmJiB2YWx1ZS5taW4gPj0gMCA/IHZhbHVlLm1heCAtIHZhbHVlLm1pbiA6IHZhbHVlLm1pbiAtIHZhbHVlLm1heDtcblx0XHR2YXIgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDtcblx0XHR2YXIgaSwgaW1ldGEsIGl2YWx1ZSwgYmFzZSwgaGVhZCwgc2l6ZSwgc3RhY2tMZW5ndGg7XG5cblx0XHRpZiAoc3RhY2tlZCB8fCAoc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIHN0YWNrICE9PSB1bmRlZmluZWQpKSB7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGltZXRhID0gbWV0YXNldHNbaV07XG5cblx0XHRcdFx0aWYgKGltZXRhLmluZGV4ID09PSBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChpbWV0YS5zdGFjayA9PT0gc3RhY2spIHtcblx0XHRcdFx0XHRzdGFja0xlbmd0aCA9IHNjYWxlLl9wYXJzZVZhbHVlKGRhdGFzZXRzW2ltZXRhLmluZGV4XS5kYXRhW2luZGV4XSk7XG5cdFx0XHRcdFx0aXZhbHVlID0gc3RhY2tMZW5ndGguc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YWNrTGVuZ3RoLmVuZCA6IHN0YWNrTGVuZ3RoLm1pbiA+PSAwICYmIHN0YWNrTGVuZ3RoLm1heCA+PSAwID8gc3RhY2tMZW5ndGgubWF4IDogc3RhY2tMZW5ndGgubWluO1xuXG5cdFx0XHRcdFx0aWYgKCh2YWx1ZS5taW4gPCAwICYmIGl2YWx1ZSA8IDApIHx8ICh2YWx1ZS5tYXggPj0gMCAmJiBpdmFsdWUgPiAwKSkge1xuXHRcdFx0XHRcdFx0c3RhcnQgKz0gaXZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGJhc2UgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0KTtcblx0XHRoZWFkID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydCArIGxlbmd0aCk7XG5cdFx0c2l6ZSA9IGhlYWQgLSBiYXNlO1xuXG5cdFx0aWYgKG1pbkJhckxlbmd0aCAhPT0gdW5kZWZpbmVkICYmIE1hdGguYWJzKHNpemUpIDwgbWluQmFyTGVuZ3RoKSB7XG5cdFx0XHRzaXplID0gbWluQmFyTGVuZ3RoO1xuXHRcdFx0aWYgKGxlbmd0aCA+PSAwICYmICFpc0hvcml6b250YWwgfHwgbGVuZ3RoIDwgMCAmJiBpc0hvcml6b250YWwpIHtcblx0XHRcdFx0aGVhZCA9IGJhc2UgLSBtaW5CYXJMZW5ndGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWFkID0gYmFzZSArIG1pbkJhckxlbmd0aDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0c2l6ZTogc2l6ZSxcblx0XHRcdGJhc2U6IGJhc2UsXG5cdFx0XHRoZWFkOiBoZWFkLFxuXHRcdFx0Y2VudGVyOiBoZWFkICsgc2l6ZSAvIDJcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Y2FsY3VsYXRlQmFySW5kZXhQaXhlbHM6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCwgaW5kZXgsIHJ1bGVyLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgcmFuZ2UgPSBvcHRpb25zLmJhclRoaWNrbmVzcyA9PT0gJ2ZsZXgnXG5cdFx0XHQ/IGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zKVxuXHRcdFx0OiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zKTtcblxuXHRcdHZhciBzdGFja0luZGV4ID0gbWUuZ2V0U3RhY2tJbmRleChkYXRhc2V0SW5kZXgsIG1lLmdldE1ldGEoKS5zdGFjayk7XG5cdFx0dmFyIGNlbnRlciA9IHJhbmdlLnN0YXJ0ICsgKHJhbmdlLmNodW5rICogc3RhY2tJbmRleCkgKyAocmFuZ2UuY2h1bmsgLyAyKTtcblx0XHR2YXIgc2l6ZSA9IE1hdGgubWluKFxuXHRcdFx0dmFsdWVPckRlZmF1bHQkMyhvcHRpb25zLm1heEJhclRoaWNrbmVzcywgSW5maW5pdHkpLFxuXHRcdFx0cmFuZ2UuY2h1bmsgKiByYW5nZS5yYXRpbyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YmFzZTogY2VudGVyIC0gc2l6ZSAvIDIsXG5cdFx0XHRoZWFkOiBjZW50ZXIgKyBzaXplIC8gMixcblx0XHRcdGNlbnRlcjogY2VudGVyLFxuXHRcdFx0c2l6ZTogc2l6ZVxuXHRcdH07XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgc2NhbGUgPSBtZS5fZ2V0VmFsdWVTY2FsZSgpO1xuXHRcdHZhciByZWN0cyA9IG1lLmdldE1ldGEoKS5kYXRhO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBpbGVuID0gcmVjdHMubGVuZ3RoO1xuXHRcdHZhciBpID0gMDtcblxuXHRcdGhlbHBlcnMkMS5jYW52YXMuY2xpcEFyZWEoY2hhcnQuY3R4LCBjaGFydC5jaGFydEFyZWEpO1xuXG5cdFx0Zm9yICg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHZhciB2YWwgPSBzY2FsZS5fcGFyc2VWYWx1ZShkYXRhc2V0LmRhdGFbaV0pO1xuXHRcdFx0aWYgKCFpc05hTih2YWwubWluKSAmJiAhaXNOYU4odmFsLm1heCkpIHtcblx0XHRcdFx0cmVjdHNbaV0uZHJhdygpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhlbHBlcnMkMS5jYW52YXMudW5jbGlwQXJlYShjaGFydC5jdHgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHZhbHVlcyA9IGhlbHBlcnMkMS5leHRlbmQoe30sIGNvcmVfZGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zLmFwcGx5KG1lLCBhcmd1bWVudHMpKTtcblx0XHR2YXIgaW5kZXhPcHRzID0gbWUuX2dldEluZGV4U2NhbGUoKS5vcHRpb25zO1xuXHRcdHZhciB2YWx1ZU9wdHMgPSBtZS5fZ2V0VmFsdWVTY2FsZSgpLm9wdGlvbnM7XG5cblx0XHR2YWx1ZXMuYmFyUGVyY2VudGFnZSA9IHZhbHVlT3JEZWZhdWx0JDMoaW5kZXhPcHRzLmJhclBlcmNlbnRhZ2UsIHZhbHVlcy5iYXJQZXJjZW50YWdlKTtcblx0XHR2YWx1ZXMuYmFyVGhpY2tuZXNzID0gdmFsdWVPckRlZmF1bHQkMyhpbmRleE9wdHMuYmFyVGhpY2tuZXNzLCB2YWx1ZXMuYmFyVGhpY2tuZXNzKTtcblx0XHR2YWx1ZXMuY2F0ZWdvcnlQZXJjZW50YWdlID0gdmFsdWVPckRlZmF1bHQkMyhpbmRleE9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlLCB2YWx1ZXMuY2F0ZWdvcnlQZXJjZW50YWdlKTtcblx0XHR2YWx1ZXMubWF4QmFyVGhpY2tuZXNzID0gdmFsdWVPckRlZmF1bHQkMyhpbmRleE9wdHMubWF4QmFyVGhpY2tuZXNzLCB2YWx1ZXMubWF4QmFyVGhpY2tuZXNzKTtcblx0XHR2YWx1ZXMubWluQmFyTGVuZ3RoID0gdmFsdWVPckRlZmF1bHQkMyh2YWx1ZU9wdHMubWluQmFyTGVuZ3RoLCB2YWx1ZXMubWluQmFyTGVuZ3RoKTtcblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH1cblxufSk7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQ0ID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xudmFyIHJlc29sdmUkMSA9IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmU7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnYnViYmxlJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdzaW5nbGUnXG5cdH0sXG5cblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJywgLy8gYnViYmxlIHNob3VsZCBwcm9iYWJseSB1c2UgYSBsaW5lYXIgc2NhbGUgYnkgZGVmYXVsdFxuXHRcdFx0cG9zaXRpb246ICdib3R0b20nLFxuXHRcdFx0aWQ6ICd4LWF4aXMtMCcgLy8gbmVlZCBhbiBJRCBzbyBkYXRhc2V0cyBjYW4gcmVmZXJlbmNlIHRoZSBzY2FsZVxuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0dHlwZTogJ2xpbmVhcicsXG5cdFx0XHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRcdFx0aWQ6ICd5LWF4aXMtMCdcblx0XHR9XVxuXHR9LFxuXG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIFRpdGxlIGRvZXNuJ3QgbWFrZSBzZW5zZSBmb3Igc2NhdHRlciBzaW5jZSB3ZSBmb3JtYXQgdGhlIGRhdGEgYXMgYSBwb2ludFxuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKGl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0dmFyIGRhdGFzZXRMYWJlbCA9IGRhdGEuZGF0YXNldHNbaXRlbS5kYXRhc2V0SW5kZXhdLmxhYmVsIHx8ICcnO1xuXHRcdFx0XHR2YXIgZGF0YVBvaW50ID0gZGF0YS5kYXRhc2V0c1tpdGVtLmRhdGFzZXRJbmRleF0uZGF0YVtpdGVtLmluZGV4XTtcblx0XHRcdFx0cmV0dXJuIGRhdGFzZXRMYWJlbCArICc6ICgnICsgaXRlbS54TGFiZWwgKyAnLCAnICsgaXRlbS55TGFiZWwgKyAnLCAnICsgZGF0YVBvaW50LnIgKyAnKSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxudmFyIGNvbnRyb2xsZXJfYnViYmxlID0gY29yZV9kYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5Qb2ludCxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J2hvdmVyQmFja2dyb3VuZENvbG9yJyxcblx0XHQnaG92ZXJCb3JkZXJDb2xvcicsXG5cdFx0J2hvdmVyQm9yZGVyV2lkdGgnLFxuXHRcdCdob3ZlclJhZGl1cycsXG5cdFx0J2hpdFJhZGl1cycsXG5cdFx0J3BvaW50U3R5bGUnLFxuXHRcdCdyb3RhdGlvbidcblx0XSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0dXBkYXRlOiBmdW5jdGlvbihyZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIHBvaW50cyA9IG1ldGEuZGF0YTtcblxuXHRcdC8vIFVwZGF0ZSBQb2ludHNcblx0XHRoZWxwZXJzJDEuZWFjaChwb2ludHMsIGZ1bmN0aW9uKHBvaW50LCBpbmRleCkge1xuXHRcdFx0bWUudXBkYXRlRWxlbWVudChwb2ludCwgaW5kZXgsIHJlc2V0KTtcblx0XHR9KTtcblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgeFNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnhBeGlzSUQpO1xuXHRcdHZhciB5U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5fcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhwb2ludCwgaW5kZXgpO1xuXHRcdHZhciBkYXRhID0gbWUuZ2V0RGF0YXNldCgpLmRhdGFbaW5kZXhdO1xuXHRcdHZhciBkc0luZGV4ID0gbWUuaW5kZXg7XG5cblx0XHR2YXIgeCA9IHJlc2V0ID8geFNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgwLjUpIDogeFNjYWxlLmdldFBpeGVsRm9yVmFsdWUodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnID8gZGF0YSA6IE5hTiwgaW5kZXgsIGRzSW5kZXgpO1xuXHRcdHZhciB5ID0gcmVzZXQgPyB5U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB5U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShkYXRhLCBpbmRleCwgZHNJbmRleCk7XG5cblx0XHRwb2ludC5feFNjYWxlID0geFNjYWxlO1xuXHRcdHBvaW50Ll95U2NhbGUgPSB5U2NhbGU7XG5cdFx0cG9pbnQuX29wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHBvaW50Ll9kYXRhc2V0SW5kZXggPSBkc0luZGV4O1xuXHRcdHBvaW50Ll9pbmRleCA9IGluZGV4O1xuXHRcdHBvaW50Ll9tb2RlbCA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuXHRcdFx0aGl0UmFkaXVzOiBvcHRpb25zLmhpdFJhZGl1cyxcblx0XHRcdHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcblx0XHRcdHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuXHRcdFx0cmFkaXVzOiByZXNldCA/IDAgOiBvcHRpb25zLnJhZGl1cyxcblx0XHRcdHNraXA6IGN1c3RvbS5za2lwIHx8IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuXHRcdFx0eDogeCxcblx0XHRcdHk6IHksXG5cdFx0fTtcblxuXHRcdHBvaW50LnBpdm90KCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0dmFyIG1vZGVsID0gcG9pbnQuX21vZGVsO1xuXHRcdHZhciBvcHRpb25zID0gcG9pbnQuX29wdGlvbnM7XG5cdFx0dmFyIGdldEhvdmVyQ29sb3IgPSBoZWxwZXJzJDEuZ2V0SG92ZXJDb2xvcjtcblxuXHRcdHBvaW50LiRwcmV2aW91c1N0eWxlID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBtb2RlbC5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogbW9kZWwuYm9yZGVyQ29sb3IsXG5cdFx0XHRib3JkZXJXaWR0aDogbW9kZWwuYm9yZGVyV2lkdGgsXG5cdFx0XHRyYWRpdXM6IG1vZGVsLnJhZGl1c1xuXHRcdH07XG5cblx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdCQ0KG9wdGlvbnMuaG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpKTtcblx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDQob3B0aW9ucy5ob3ZlckJvcmRlckNvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpKTtcblx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JDQob3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcblx0XHRtb2RlbC5yYWRpdXMgPSBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaG92ZXJSYWRpdXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9uczogZnVuY3Rpb24ocG9pbnQsIGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXHRcdHZhciBkYXRhID0gZGF0YXNldC5kYXRhW2luZGV4XSB8fCB7fTtcblx0XHR2YXIgdmFsdWVzID0gY29yZV9kYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHQvLyBTY3JpcHRhYmxlIG9wdGlvbnNcblx0XHR2YXIgY29udGV4dCA9IHtcblx0XHRcdGNoYXJ0OiBjaGFydCxcblx0XHRcdGRhdGFJbmRleDogaW5kZXgsXG5cdFx0XHRkYXRhc2V0OiBkYXRhc2V0LFxuXHRcdFx0ZGF0YXNldEluZGV4OiBtZS5pbmRleFxuXHRcdH07XG5cblx0XHQvLyBJbiBjYXNlIHZhbHVlcyB3ZXJlIGNhY2hlZCAoYW5kIHRodXMgZnJvemVuKSwgd2UgbmVlZCB0byBjbG9uZSB0aGUgdmFsdWVzXG5cdFx0aWYgKG1lLl9jYWNoZWREYXRhT3B0cyA9PT0gdmFsdWVzKSB7XG5cdFx0XHR2YWx1ZXMgPSBoZWxwZXJzJDEuZXh0ZW5kKHt9LCB2YWx1ZXMpO1xuXHRcdH1cblxuXHRcdC8vIEN1c3RvbSByYWRpdXMgcmVzb2x1dGlvblxuXHRcdHZhbHVlcy5yYWRpdXMgPSByZXNvbHZlJDEoW1xuXHRcdFx0Y3VzdG9tLnJhZGl1cyxcblx0XHRcdGRhdGEucixcblx0XHRcdG1lLl9jb25maWcucmFkaXVzLFxuXHRcdFx0Y2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5yYWRpdXNcblx0XHRdLCBjb250ZXh0LCBpbmRleCk7XG5cblx0XHRyZXR1cm4gdmFsdWVzO1xuXHR9XG59KTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDUgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbnZhciBQSSQxID0gTWF0aC5QSTtcbnZhciBET1VCTEVfUEkkMSA9IFBJJDEgKiAyO1xudmFyIEhBTEZfUEkkMSA9IFBJJDEgLyAyO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2RvdWdobnV0Jywge1xuXHRhbmltYXRpb246IHtcblx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgRG91Z2hudXRcblx0XHRhbmltYXRlUm90YXRlOiB0cnVlLFxuXHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXG5cdFx0YW5pbWF0ZVNjYWxlOiBmYWxzZVxuXHR9LFxuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdzaW5nbGUnXG5cdH0sXG5cdGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcblx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0dmFyIGRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbGFiZWxzID0gZGF0YS5sYWJlbHM7XG5cdFx0dmFyIGksIGlsZW4sIGxpc3RJdGVtLCBsaXN0SXRlbVNwYW47XG5cblx0XHRsaXN0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjaGFydC5pZCArICctbGVnZW5kJyk7XG5cdFx0aWYgKGRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzWzBdLmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGxpc3RJdGVtID0gbGlzdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpKTtcblx0XHRcdFx0bGlzdEl0ZW1TcGFuID0gbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpKTtcblx0XHRcdFx0bGlzdEl0ZW1TcGFuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXRzWzBdLmJhY2tncm91bmRDb2xvcltpXTtcblx0XHRcdFx0aWYgKGxhYmVsc1tpXSkge1xuXHRcdFx0XHRcdGxpc3RJdGVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxhYmVsc1tpXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Qub3V0ZXJIVE1MO1xuXHR9LFxuXHRsZWdlbmQ6IHtcblx0XHRsYWJlbHM6IHtcblx0XHRcdGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0XHRcdGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YS5sYWJlbHMubWFwKGZ1bmN0aW9uKGxhYmVsLCBpKSB7XG5cdFx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuXHRcdFx0XHRcdFx0dmFyIHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHR0ZXh0OiBsYWJlbCxcblx0XHRcdFx0XHRcdFx0ZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdFx0XHRcdHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcblx0XHRcdFx0XHRcdFx0bGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcblx0XHRcdFx0XHRcdFx0aGlkZGVuOiBpc05hTihkYXRhLmRhdGFzZXRzWzBdLmRhdGFbaV0pIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4sXG5cblx0XHRcdFx0XHRcdFx0Ly8gRXh0cmEgZGF0YSB1c2VkIGZvciB0b2dnbGluZyB0aGUgY29ycmVjdCBpdGVtXG5cdFx0XHRcdFx0XHRcdGluZGV4OiBpXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5pbmRleDtcblx0XHRcdHZhciBjaGFydCA9IHRoaXMuY2hhcnQ7XG5cdFx0XHR2YXIgaSwgaWxlbiwgbWV0YTtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0XHQvLyB0b2dnbGUgdmlzaWJpbGl0eSBvZiBpbmRleCBpZiBleGlzdHNcblx0XHRcdFx0aWYgKG1ldGEuZGF0YVtpbmRleF0pIHtcblx0XHRcdFx0XHRtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbiA9ICFtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjaGFydC51cGRhdGUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gVGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNoYXJ0IHRoYXQgd2UgY3V0IG91dCBvZiB0aGUgbWlkZGxlLlxuXHRjdXRvdXRQZXJjZW50YWdlOiA1MCxcblxuXHQvLyBUaGUgcm90YXRpb24gb2YgdGhlIGNoYXJ0LCB3aGVyZSB0aGUgZmlyc3QgZGF0YSBhcmMgYmVnaW5zLlxuXHRyb3RhdGlvbjogLUhBTEZfUEkkMSxcblxuXHQvLyBUaGUgdG90YWwgY2lyY3VtZmVyZW5jZSBvZiB0aGUgY2hhcnQuXG5cdGNpcmN1bWZlcmVuY2U6IERPVUJMRV9QSSQxLFxuXG5cdC8vIE5lZWQgdG8gb3ZlcnJpZGUgdGhlc2UgdG8gZ2l2ZSBhIG5pY2UgZGVmYXVsdFxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtLCBkYXRhKSB7XG5cdFx0XHRcdHZhciBkYXRhTGFiZWwgPSBkYXRhLmxhYmVsc1t0b29sdGlwSXRlbS5pbmRleF07XG5cdFx0XHRcdHZhciB2YWx1ZSA9ICc6ICcgKyBkYXRhLmRhdGFzZXRzW3Rvb2x0aXBJdGVtLmRhdGFzZXRJbmRleF0uZGF0YVt0b29sdGlwSXRlbS5pbmRleF07XG5cblx0XHRcdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KGRhdGFMYWJlbCkpIHtcblx0XHRcdFx0XHQvLyBzaG93IHZhbHVlIG9uIGZpcnN0IGxpbmUgb2YgbXVsdGlsaW5lIGxhYmVsXG5cdFx0XHRcdFx0Ly8gbmVlZCB0byBjbG9uZSBiZWNhdXNlIHdlIGFyZSBjaGFuZ2luZyB0aGUgdmFsdWVcblx0XHRcdFx0XHRkYXRhTGFiZWwgPSBkYXRhTGFiZWwuc2xpY2UoKTtcblx0XHRcdFx0XHRkYXRhTGFiZWxbMF0gKz0gdmFsdWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YUxhYmVsICs9IHZhbHVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGRhdGFMYWJlbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgY29udHJvbGxlcl9kb3VnaG51dCA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLkFyYyxcblxuXHRsaW5rU2NhbGVzOiBoZWxwZXJzJDEubm9vcCxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J2JvcmRlckFsaWduJyxcblx0XHQnaG92ZXJCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdob3ZlckJvcmRlckNvbG9yJyxcblx0XHQnaG92ZXJCb3JkZXJXaWR0aCcsXG5cdF0sXG5cblx0Ly8gR2V0IGluZGV4IG9mIHRoZSBkYXRhc2V0IGluIHJlbGF0aW9uIHRvIHRoZSB2aXNpYmxlIGRhdGFzZXRzLiBUaGlzIGFsbG93cyBkZXRlcm1pbmluZyB0aGUgaW5uZXIgYW5kIG91dGVyIHJhZGl1cyBjb3JyZWN0bHlcblx0Z2V0UmluZ0luZGV4OiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgcmluZ0luZGV4ID0gMDtcblxuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgZGF0YXNldEluZGV4OyArK2opIHtcblx0XHRcdGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaikpIHtcblx0XHRcdFx0KytyaW5nSW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJpbmdJbmRleDtcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuXHRcdHZhciBvcHRzID0gY2hhcnQub3B0aW9ucztcblx0XHR2YXIgcmF0aW9YID0gMTtcblx0XHR2YXIgcmF0aW9ZID0gMTtcblx0XHR2YXIgb2Zmc2V0WCA9IDA7XG5cdFx0dmFyIG9mZnNldFkgPSAwO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBhcmNzID0gbWV0YS5kYXRhO1xuXHRcdHZhciBjdXRvdXQgPSBvcHRzLmN1dG91dFBlcmNlbnRhZ2UgLyAxMDAgfHwgMDtcblx0XHR2YXIgY2lyY3VtZmVyZW5jZSA9IG9wdHMuY2lyY3VtZmVyZW5jZTtcblx0XHR2YXIgY2hhcnRXZWlnaHQgPSBtZS5fZ2V0UmluZ1dlaWdodChtZS5pbmRleCk7XG5cdFx0dmFyIG1heFdpZHRoLCBtYXhIZWlnaHQsIGksIGlsZW47XG5cblx0XHQvLyBJZiB0aGUgY2hhcnQncyBjaXJjdW1mZXJlbmNlIGlzbid0IGEgZnVsbCBjaXJjbGUsIGNhbGN1bGF0ZSBzaXplIGFzIGEgcmF0aW8gb2YgdGhlIHdpZHRoL2hlaWdodCBvZiB0aGUgYXJjXG5cdFx0aWYgKGNpcmN1bWZlcmVuY2UgPCBET1VCTEVfUEkkMSkge1xuXHRcdFx0dmFyIHN0YXJ0QW5nbGUgPSBvcHRzLnJvdGF0aW9uICUgRE9VQkxFX1BJJDE7XG5cdFx0XHRzdGFydEFuZ2xlICs9IHN0YXJ0QW5nbGUgPj0gUEkkMSA/IC1ET1VCTEVfUEkkMSA6IHN0YXJ0QW5nbGUgPCAtUEkkMSA/IERPVUJMRV9QSSQxIDogMDtcblx0XHRcdHZhciBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlO1xuXHRcdFx0dmFyIHN0YXJ0WCA9IE1hdGguY29zKHN0YXJ0QW5nbGUpO1xuXHRcdFx0dmFyIHN0YXJ0WSA9IE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuXHRcdFx0dmFyIGVuZFggPSBNYXRoLmNvcyhlbmRBbmdsZSk7XG5cdFx0XHR2YXIgZW5kWSA9IE1hdGguc2luKGVuZEFuZ2xlKTtcblx0XHRcdHZhciBjb250YWluczAgPSAoc3RhcnRBbmdsZSA8PSAwICYmIGVuZEFuZ2xlID49IDApIHx8IGVuZEFuZ2xlID49IERPVUJMRV9QSSQxO1xuXHRcdFx0dmFyIGNvbnRhaW5zOTAgPSAoc3RhcnRBbmdsZSA8PSBIQUxGX1BJJDEgJiYgZW5kQW5nbGUgPj0gSEFMRl9QSSQxKSB8fCBlbmRBbmdsZSA+PSBET1VCTEVfUEkkMSArIEhBTEZfUEkkMTtcblx0XHRcdHZhciBjb250YWluczE4MCA9IHN0YXJ0QW5nbGUgPT09IC1QSSQxIHx8IGVuZEFuZ2xlID49IFBJJDE7XG5cdFx0XHR2YXIgY29udGFpbnMyNzAgPSAoc3RhcnRBbmdsZSA8PSAtSEFMRl9QSSQxICYmIGVuZEFuZ2xlID49IC1IQUxGX1BJJDEpIHx8IGVuZEFuZ2xlID49IFBJJDEgKyBIQUxGX1BJJDE7XG5cdFx0XHR2YXIgbWluWCA9IGNvbnRhaW5zMTgwID8gLTEgOiBNYXRoLm1pbihzdGFydFgsIHN0YXJ0WCAqIGN1dG91dCwgZW5kWCwgZW5kWCAqIGN1dG91dCk7XG5cdFx0XHR2YXIgbWluWSA9IGNvbnRhaW5zMjcwID8gLTEgOiBNYXRoLm1pbihzdGFydFksIHN0YXJ0WSAqIGN1dG91dCwgZW5kWSwgZW5kWSAqIGN1dG91dCk7XG5cdFx0XHR2YXIgbWF4WCA9IGNvbnRhaW5zMCA/IDEgOiBNYXRoLm1heChzdGFydFgsIHN0YXJ0WCAqIGN1dG91dCwgZW5kWCwgZW5kWCAqIGN1dG91dCk7XG5cdFx0XHR2YXIgbWF4WSA9IGNvbnRhaW5zOTAgPyAxIDogTWF0aC5tYXgoc3RhcnRZLCBzdGFydFkgKiBjdXRvdXQsIGVuZFksIGVuZFkgKiBjdXRvdXQpO1xuXHRcdFx0cmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG5cdFx0XHRyYXRpb1kgPSAobWF4WSAtIG1pblkpIC8gMjtcblx0XHRcdG9mZnNldFggPSAtKG1heFggKyBtaW5YKSAvIDI7XG5cdFx0XHRvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0YXJjc1tpXS5fb3B0aW9ucyA9IG1lLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGFyY3NbaV0sIGkpO1xuXHRcdH1cblxuXHRcdGNoYXJ0LmJvcmRlcldpZHRoID0gbWUuZ2V0TWF4Qm9yZGVyV2lkdGgoKTtcblx0XHRtYXhXaWR0aCA9IChjaGFydEFyZWEucmlnaHQgLSBjaGFydEFyZWEubGVmdCAtIGNoYXJ0LmJvcmRlcldpZHRoKSAvIHJhdGlvWDtcblx0XHRtYXhIZWlnaHQgPSAoY2hhcnRBcmVhLmJvdHRvbSAtIGNoYXJ0QXJlYS50b3AgLSBjaGFydC5ib3JkZXJXaWR0aCkgLyByYXRpb1k7XG5cdFx0Y2hhcnQub3V0ZXJSYWRpdXMgPSBNYXRoLm1heChNYXRoLm1pbihtYXhXaWR0aCwgbWF4SGVpZ2h0KSAvIDIsIDApO1xuXHRcdGNoYXJ0LmlubmVyUmFkaXVzID0gTWF0aC5tYXgoY2hhcnQub3V0ZXJSYWRpdXMgKiBjdXRvdXQsIDApO1xuXHRcdGNoYXJ0LnJhZGl1c0xlbmd0aCA9IChjaGFydC5vdXRlclJhZGl1cyAtIGNoYXJ0LmlubmVyUmFkaXVzKSAvIChtZS5fZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpIHx8IDEpO1xuXHRcdGNoYXJ0Lm9mZnNldFggPSBvZmZzZXRYICogY2hhcnQub3V0ZXJSYWRpdXM7XG5cdFx0Y2hhcnQub2Zmc2V0WSA9IG9mZnNldFkgKiBjaGFydC5vdXRlclJhZGl1cztcblxuXHRcdG1ldGEudG90YWwgPSBtZS5jYWxjdWxhdGVUb3RhbCgpO1xuXG5cdFx0bWUub3V0ZXJSYWRpdXMgPSBjaGFydC5vdXRlclJhZGl1cyAtIGNoYXJ0LnJhZGl1c0xlbmd0aCAqIG1lLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KG1lLmluZGV4KTtcblx0XHRtZS5pbm5lclJhZGl1cyA9IE1hdGgubWF4KG1lLm91dGVyUmFkaXVzIC0gY2hhcnQucmFkaXVzTGVuZ3RoICogY2hhcnRXZWlnaHQsIDApO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZS51cGRhdGVFbGVtZW50KGFyY3NbaV0sIGksIHJlc2V0KTtcblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24oYXJjLCBpbmRleCwgcmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdHZhciBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG5cdFx0dmFyIGNlbnRlclggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMjtcblx0XHR2YXIgY2VudGVyWSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyO1xuXHRcdHZhciBzdGFydEFuZ2xlID0gb3B0cy5yb3RhdGlvbjsgLy8gbm9uIHJlc2V0IGNhc2UgaGFuZGxlZCBsYXRlclxuXHRcdHZhciBlbmRBbmdsZSA9IG9wdHMucm90YXRpb247IC8vIG5vbiByZXNldCBjYXNlIGhhbmRsZWQgbGF0ZXJcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgY2lyY3VtZmVyZW5jZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSA/IDAgOiBhcmMuaGlkZGVuID8gMCA6IG1lLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UoZGF0YXNldC5kYXRhW2luZGV4XSkgKiAob3B0cy5jaXJjdW1mZXJlbmNlIC8gRE9VQkxFX1BJJDEpO1xuXHRcdHZhciBpbm5lclJhZGl1cyA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlID8gMCA6IG1lLmlubmVyUmFkaXVzO1xuXHRcdHZhciBvdXRlclJhZGl1cyA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlID8gMCA6IG1lLm91dGVyUmFkaXVzO1xuXHRcdHZhciBvcHRpb25zID0gYXJjLl9vcHRpb25zIHx8IHt9O1xuXG5cdFx0aGVscGVycyQxLmV4dGVuZChhcmMsIHtcblx0XHRcdC8vIFV0aWxpdHlcblx0XHRcdF9kYXRhc2V0SW5kZXg6IG1lLmluZGV4LFxuXHRcdFx0X2luZGV4OiBpbmRleCxcblxuXHRcdFx0Ly8gRGVzaXJlZCB2aWV3IHByb3BlcnRpZXNcblx0XHRcdF9tb2RlbDoge1xuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0XHRib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcblx0XHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHRcdGJvcmRlckFsaWduOiBvcHRpb25zLmJvcmRlckFsaWduLFxuXHRcdFx0XHR4OiBjZW50ZXJYICsgY2hhcnQub2Zmc2V0WCxcblx0XHRcdFx0eTogY2VudGVyWSArIGNoYXJ0Lm9mZnNldFksXG5cdFx0XHRcdHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG5cdFx0XHRcdGVuZEFuZ2xlOiBlbmRBbmdsZSxcblx0XHRcdFx0Y2lyY3VtZmVyZW5jZTogY2lyY3VtZmVyZW5jZSxcblx0XHRcdFx0b3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzLFxuXHRcdFx0XHRpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXG5cdFx0XHRcdGxhYmVsOiBoZWxwZXJzJDEudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQubGFiZWwsIGluZGV4LCBjaGFydC5kYXRhLmxhYmVsc1tpbmRleF0pXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR2YXIgbW9kZWwgPSBhcmMuX21vZGVsO1xuXG5cdFx0Ly8gU2V0IGNvcnJlY3QgYW5nbGVzIGlmIG5vdCByZXNldHRpbmdcblx0XHRpZiAoIXJlc2V0IHx8ICFhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUpIHtcblx0XHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0XHRtb2RlbC5zdGFydEFuZ2xlID0gb3B0cy5yb3RhdGlvbjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1vZGVsLnN0YXJ0QW5nbGUgPSBtZS5nZXRNZXRhKCkuZGF0YVtpbmRleCAtIDFdLl9tb2RlbC5lbmRBbmdsZTtcblx0XHRcdH1cblxuXHRcdFx0bW9kZWwuZW5kQW5nbGUgPSBtb2RlbC5zdGFydEFuZ2xlICsgbW9kZWwuY2lyY3VtZmVyZW5jZTtcblx0XHR9XG5cblx0XHRhcmMucGl2b3QoKTtcblx0fSxcblxuXHRjYWxjdWxhdGVUb3RhbDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcblx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdHZhciB0b3RhbCA9IDA7XG5cdFx0dmFyIHZhbHVlO1xuXG5cdFx0aGVscGVycyQxLmVhY2gobWV0YS5kYXRhLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuXHRcdFx0dmFsdWUgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuXHRcdFx0aWYgKCFpc05hTih2YWx1ZSkgJiYgIWVsZW1lbnQuaGlkZGVuKSB7XG5cdFx0XHRcdHRvdGFsICs9IE1hdGguYWJzKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8qIGlmICh0b3RhbCA9PT0gMCkge1xuXHRcdFx0dG90YWwgPSBOYU47XG5cdFx0fSovXG5cblx0XHRyZXR1cm4gdG90YWw7XG5cdH0sXG5cblx0Y2FsY3VsYXRlQ2lyY3VtZmVyZW5jZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgdG90YWwgPSB0aGlzLmdldE1ldGEoKS50b3RhbDtcblx0XHRpZiAodG90YWwgPiAwICYmICFpc05hTih2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBET1VCTEVfUEkkMSAqIChNYXRoLmFicyh2YWx1ZSkgLyB0b3RhbCk7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIGdldHMgdGhlIG1heCBib3JkZXIgb3IgaG92ZXIgd2lkdGggdG8gcHJvcGVybHkgc2NhbGUgcGllIGNoYXJ0c1xuXHRnZXRNYXhCb3JkZXJXaWR0aDogZnVuY3Rpb24oYXJjcykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1heCA9IDA7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGksIGlsZW4sIG1ldGEsIGFyYywgY29udHJvbGxlciwgb3B0aW9ucywgYm9yZGVyV2lkdGgsIGhvdmVyV2lkdGg7XG5cblx0XHRpZiAoIWFyY3MpIHtcblx0XHRcdC8vIEZpbmQgdGhlIG91dG1vc3QgdmlzaWJsZSBkYXRhc2V0XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdFx0YXJjcyA9IG1ldGEuZGF0YTtcblx0XHRcdFx0XHRpZiAoaSAhPT0gbWUuaW5kZXgpIHtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIgPSBtZXRhLmNvbnRyb2xsZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFhcmNzKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGFyYyA9IGFyY3NbaV07XG5cdFx0XHRpZiAoY29udHJvbGxlcikge1xuXHRcdFx0XHRjb250cm9sbGVyLl9jb25maWd1cmUoKTtcblx0XHRcdFx0b3B0aW9ucyA9IGNvbnRyb2xsZXIuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoYXJjLCBpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdGlvbnMgPSBhcmMuX29wdGlvbnM7XG5cdFx0XHR9XG5cdFx0XHRpZiAob3B0aW9ucy5ib3JkZXJBbGlnbiAhPT0gJ2lubmVyJykge1xuXHRcdFx0XHRib3JkZXJXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG5cdFx0XHRcdGhvdmVyV2lkdGggPSBvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGg7XG5cblx0XHRcdFx0bWF4ID0gYm9yZGVyV2lkdGggPiBtYXggPyBib3JkZXJXaWR0aCA6IG1heDtcblx0XHRcdFx0bWF4ID0gaG92ZXJXaWR0aCA+IG1heCA/IGhvdmVyV2lkdGggOiBtYXg7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtYXg7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKGFyYykge1xuXHRcdHZhciBtb2RlbCA9IGFyYy5fbW9kZWw7XG5cdFx0dmFyIG9wdGlvbnMgPSBhcmMuX29wdGlvbnM7XG5cdFx0dmFyIGdldEhvdmVyQ29sb3IgPSBoZWxwZXJzJDEuZ2V0SG92ZXJDb2xvcjtcblxuXHRcdGFyYy4kcHJldmlvdXNTdHlsZSA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG1vZGVsLmJvcmRlcldpZHRoLFxuXHRcdH07XG5cblx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdCQ1KG9wdGlvbnMuaG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpKTtcblx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDUob3B0aW9ucy5ob3ZlckJvcmRlckNvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpKTtcblx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JDUob3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0IHJhZGl1cyBsZW5ndGggb2Zmc2V0IG9mIHRoZSBkYXRhc2V0IGluIHJlbGF0aW9uIHRvIHRoZSB2aXNpYmxlIGRhdGFzZXRzIHdlaWdodHMuIFRoaXMgYWxsb3dzIGRldGVybWluaW5nIHRoZSBpbm5lciBhbmQgb3V0ZXIgcmFkaXVzIGNvcnJlY3RseVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFJpbmdXZWlnaHRPZmZzZXQ6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciByaW5nV2VpZ2h0T2Zmc2V0ID0gMDtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpIHtcblx0XHRcdGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdFx0cmluZ1dlaWdodE9mZnNldCArPSB0aGlzLl9nZXRSaW5nV2VpZ2h0KGkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByaW5nV2VpZ2h0T2Zmc2V0O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFJpbmdXZWlnaHQ6IGZ1bmN0aW9uKGRhdGFTZXRJbmRleCkge1xuXHRcdHJldHVybiBNYXRoLm1heCh2YWx1ZU9yRGVmYXVsdCQ1KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhU2V0SW5kZXhdLndlaWdodCwgMSksIDApO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzdW0gb2YgYWxsIHZpc2liaWxlIGRhdGEgc2V0IHdlaWdodHMuICBUaGlzIHZhbHVlIGNhbiBiZSAwLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpO1xuXHR9XG59KTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdob3Jpem9udGFsQmFyJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdpbmRleCcsXG5cdFx0YXhpczogJ3knXG5cdH0sXG5cblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdHBvc2l0aW9uOiAnYm90dG9tJ1xuXHRcdH1dLFxuXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnY2F0ZWdvcnknLFxuXHRcdFx0cG9zaXRpb246ICdsZWZ0Jyxcblx0XHRcdG9mZnNldDogdHJ1ZSxcblx0XHRcdGdyaWRMaW5lczoge1xuXHRcdFx0XHRvZmZzZXRHcmlkTGluZXM6IHRydWVcblx0XHRcdH1cblx0XHR9XVxuXHR9LFxuXG5cdGVsZW1lbnRzOiB7XG5cdFx0cmVjdGFuZ2xlOiB7XG5cdFx0XHRib3JkZXJTa2lwcGVkOiAnbGVmdCdcblx0XHR9XG5cdH0sXG5cblx0dG9vbHRpcHM6IHtcblx0XHRtb2RlOiAnaW5kZXgnLFxuXHRcdGF4aXM6ICd5J1xuXHR9XG59KTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGRhdGFzZXRzOiB7XG5cdFx0aG9yaXpvbnRhbEJhcjoge1xuXHRcdFx0Y2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG5cdFx0XHRiYXJQZXJjZW50YWdlOiAwLjlcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgY29udHJvbGxlcl9ob3Jpem9udGFsQmFyID0gY29udHJvbGxlcl9iYXIuZXh0ZW5kKHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0VmFsdWVTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueEF4aXNJRDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRJbmRleFNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldE1ldGEoKS55QXhpc0lEO1xuXHR9XG59KTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDYgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgcmVzb2x2ZSQyID0gaGVscGVycyQxLm9wdGlvbnMucmVzb2x2ZTtcbnZhciBpc1BvaW50SW5BcmVhID0gaGVscGVycyQxLmNhbnZhcy5faXNQb2ludEluQXJlYTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdsaW5lJywge1xuXHRzaG93TGluZXM6IHRydWUsXG5cdHNwYW5HYXBzOiBmYWxzZSxcblxuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdsYWJlbCdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdjYXRlZ29yeScsXG5cdFx0XHRpZDogJ3gtYXhpcy0wJ1xuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0dHlwZTogJ2xpbmVhcicsXG5cdFx0XHRpZDogJ3ktYXhpcy0wJ1xuXHRcdH1dXG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGhhbGZCb3JkZXJXaWR0aCkge1xuXHR2YXIgdGlja09wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zLnRpY2tzIHx8IHt9O1xuXHR2YXIgcmV2ZXJzZSA9IHRpY2tPcHRzLnJldmVyc2U7XG5cdHZhciBtaW4gPSB0aWNrT3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGhhbGZCb3JkZXJXaWR0aCA6IDA7XG5cdHZhciBtYXggPSB0aWNrT3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGhhbGZCb3JkZXJXaWR0aCA6IDA7XG5cdHJldHVybiB7XG5cdFx0c3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG5cdFx0ZW5kOiByZXZlcnNlID8gbWluIDogbWF4XG5cdH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDbGlwKHhTY2FsZSwgeVNjYWxlLCBib3JkZXJXaWR0aCkge1xuXHR2YXIgaGFsZkJvcmRlcldpZHRoID0gYm9yZGVyV2lkdGggLyAyO1xuXHR2YXIgeCA9IHNjYWxlQ2xpcCh4U2NhbGUsIGhhbGZCb3JkZXJXaWR0aCk7XG5cdHZhciB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgaGFsZkJvcmRlcldpZHRoKTtcblxuXHRyZXR1cm4ge1xuXHRcdHRvcDogeS5lbmQsXG5cdFx0cmlnaHQ6IHguZW5kLFxuXHRcdGJvdHRvbTogeS5zdGFydCxcblx0XHRsZWZ0OiB4LnN0YXJ0XG5cdH07XG59XG5cbmZ1bmN0aW9uIHRvQ2xpcCh2YWx1ZSkge1xuXHR2YXIgdCwgciwgYiwgbDtcblxuXHRpZiAoaGVscGVycyQxLmlzT2JqZWN0KHZhbHVlKSkge1xuXHRcdHQgPSB2YWx1ZS50b3A7XG5cdFx0ciA9IHZhbHVlLnJpZ2h0O1xuXHRcdGIgPSB2YWx1ZS5ib3R0b207XG5cdFx0bCA9IHZhbHVlLmxlZnQ7XG5cdH0gZWxzZSB7XG5cdFx0dCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR0b3A6IHQsXG5cdFx0cmlnaHQ6IHIsXG5cdFx0Ym90dG9tOiBiLFxuXHRcdGxlZnQ6IGxcblx0fTtcbn1cblxuXG52YXIgY29udHJvbGxlcl9saW5lID0gY29yZV9kYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXG5cdGRhdGFzZXRFbGVtZW50VHlwZTogZWxlbWVudHMuTGluZSxcblxuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLlBvaW50LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFzZXRFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJDYXBTdHlsZScsXG5cdFx0J2JvcmRlckNvbG9yJyxcblx0XHQnYm9yZGVyRGFzaCcsXG5cdFx0J2JvcmRlckRhc2hPZmZzZXQnLFxuXHRcdCdib3JkZXJKb2luU3R5bGUnLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J2N1YmljSW50ZXJwb2xhdGlvbk1vZGUnLFxuXHRcdCdmaWxsJ1xuXHRdLFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFFbGVtZW50T3B0aW9uczoge1xuXHRcdGJhY2tncm91bmRDb2xvcjogJ3BvaW50QmFja2dyb3VuZENvbG9yJyxcblx0XHRib3JkZXJDb2xvcjogJ3BvaW50Qm9yZGVyQ29sb3InLFxuXHRcdGJvcmRlcldpZHRoOiAncG9pbnRCb3JkZXJXaWR0aCcsXG5cdFx0aGl0UmFkaXVzOiAncG9pbnRIaXRSYWRpdXMnLFxuXHRcdGhvdmVyQmFja2dyb3VuZENvbG9yOiAncG9pbnRIb3ZlckJhY2tncm91bmRDb2xvcicsXG5cdFx0aG92ZXJCb3JkZXJDb2xvcjogJ3BvaW50SG92ZXJCb3JkZXJDb2xvcicsXG5cdFx0aG92ZXJCb3JkZXJXaWR0aDogJ3BvaW50SG92ZXJCb3JkZXJXaWR0aCcsXG5cdFx0aG92ZXJSYWRpdXM6ICdwb2ludEhvdmVyUmFkaXVzJyxcblx0XHRwb2ludFN0eWxlOiAncG9pbnRTdHlsZScsXG5cdFx0cmFkaXVzOiAncG9pbnRSYWRpdXMnLFxuXHRcdHJvdGF0aW9uOiAncG9pbnRSb3RhdGlvbidcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgbGluZSA9IG1ldGEuZGF0YXNldDtcblx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdHZhciBvcHRpb25zID0gbWUuY2hhcnQub3B0aW9ucztcblx0XHR2YXIgY29uZmlnID0gbWUuX2NvbmZpZztcblx0XHR2YXIgc2hvd0xpbmUgPSBtZS5fc2hvd0xpbmUgPSB2YWx1ZU9yRGVmYXVsdCQ2KGNvbmZpZy5zaG93TGluZSwgb3B0aW9ucy5zaG93TGluZXMpO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0bWUuX3hTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS54QXhpc0lEKTtcblx0XHRtZS5feVNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnlBeGlzSUQpO1xuXG5cdFx0Ly8gVXBkYXRlIExpbmVcblx0XHRpZiAoc2hvd0xpbmUpIHtcblx0XHRcdC8vIENvbXBhdGliaWxpdHk6IElmIHRoZSBwcm9wZXJ0aWVzIGFyZSBkZWZpbmVkIHdpdGggb25seSB0aGUgb2xkIG5hbWUsIHVzZSB0aG9zZSB2YWx1ZXNcblx0XHRcdGlmIChjb25maWcudGVuc2lvbiAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZy5saW5lVGVuc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbmZpZy5saW5lVGVuc2lvbiA9IGNvbmZpZy50ZW5zaW9uO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRsaW5lLl9zY2FsZSA9IG1lLl95U2NhbGU7XG5cdFx0XHRsaW5lLl9kYXRhc2V0SW5kZXggPSBtZS5pbmRleDtcblx0XHRcdC8vIERhdGFcblx0XHRcdGxpbmUuX2NoaWxkcmVuID0gcG9pbnRzO1xuXHRcdFx0Ly8gTW9kZWxcblx0XHRcdGxpbmUuX21vZGVsID0gbWUuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobGluZSk7XG5cblx0XHRcdGxpbmUucGl2b3QoKTtcblx0XHR9XG5cblx0XHQvLyBVcGRhdGUgUG9pbnRzXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQocG9pbnRzW2ldLCBpLCByZXNldCk7XG5cdFx0fVxuXG5cdFx0aWYgKHNob3dMaW5lICYmIGxpbmUuX21vZGVsLnRlbnNpb24gIT09IDApIHtcblx0XHRcdG1lLnVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMoKTtcblx0XHR9XG5cblx0XHQvLyBOb3cgcGl2b3QgdGhlIHBvaW50IGZvciBhbmltYXRpb25cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0cG9pbnRzW2ldLnBpdm90KCk7XG5cdFx0fVxuXHR9LFxuXG5cdHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHBvaW50LCBpbmRleCwgcmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIGRhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdHZhciB2YWx1ZSA9IGRhdGFzZXQuZGF0YVtpbmRleF07XG5cdFx0dmFyIHhTY2FsZSA9IG1lLl94U2NhbGU7XG5cdFx0dmFyIHlTY2FsZSA9IG1lLl95U2NhbGU7XG5cdFx0dmFyIGxpbmVNb2RlbCA9IG1ldGEuZGF0YXNldC5fbW9kZWw7XG5cdFx0dmFyIHgsIHk7XG5cblx0XHR2YXIgb3B0aW9ucyA9IG1lLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHBvaW50LCBpbmRleCk7XG5cblx0XHR4ID0geFNjYWxlLmdldFBpeGVsRm9yVmFsdWUodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHZhbHVlIDogTmFOLCBpbmRleCwgZGF0YXNldEluZGV4KTtcblx0XHR5ID0gcmVzZXQgPyB5U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiBtZS5jYWxjdWxhdGVQb2ludFkodmFsdWUsIGluZGV4LCBkYXRhc2V0SW5kZXgpO1xuXG5cdFx0Ly8gVXRpbGl0eVxuXHRcdHBvaW50Ll94U2NhbGUgPSB4U2NhbGU7XG5cdFx0cG9pbnQuX3lTY2FsZSA9IHlTY2FsZTtcblx0XHRwb2ludC5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0cG9pbnQuX2RhdGFzZXRJbmRleCA9IGRhdGFzZXRJbmRleDtcblx0XHRwb2ludC5faW5kZXggPSBpbmRleDtcblxuXHRcdC8vIERlc2lyZWQgdmlldyBwcm9wZXJ0aWVzXG5cdFx0cG9pbnQuX21vZGVsID0ge1xuXHRcdFx0eDogeCxcblx0XHRcdHk6IHksXG5cdFx0XHRza2lwOiBjdXN0b20uc2tpcCB8fCBpc05hTih4KSB8fCBpc05hTih5KSxcblx0XHRcdC8vIEFwcGVhcmFuY2Vcblx0XHRcdHJhZGl1czogb3B0aW9ucy5yYWRpdXMsXG5cdFx0XHRwb2ludFN0eWxlOiBvcHRpb25zLnBvaW50U3R5bGUsXG5cdFx0XHRyb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvbixcblx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuXHRcdFx0dGVuc2lvbjogdmFsdWVPckRlZmF1bHQkNihjdXN0b20udGVuc2lvbiwgbGluZU1vZGVsID8gbGluZU1vZGVsLnRlbnNpb24gOiAwKSxcblx0XHRcdHN0ZXBwZWRMaW5lOiBsaW5lTW9kZWwgPyBsaW5lTW9kZWwuc3RlcHBlZExpbmUgOiBmYWxzZSxcblx0XHRcdC8vIFRvb2x0aXBcblx0XHRcdGhpdFJhZGl1czogb3B0aW9ucy5oaXRSYWRpdXNcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnM6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjb25maWcgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBjdXN0b20gPSBlbGVtZW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLmNoYXJ0Lm9wdGlvbnM7XG5cdFx0dmFyIGxpbmVPcHRpb25zID0gb3B0aW9ucy5lbGVtZW50cy5saW5lO1xuXHRcdHZhciB2YWx1ZXMgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5fcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucy5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdC8vIFRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIGxpbmVzIGlzIHRvIGJyZWFrIGF0IG51bGwgdmFsdWVzLCBhY2NvcmRpbmdcblx0XHQvLyB0byBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjQzNSNpc3N1ZWNvbW1lbnQtMjE2NzE4MTU4XG5cdFx0Ly8gVGhpcyBvcHRpb24gZ2l2ZXMgbGluZXMgdGhlIGFiaWxpdHkgdG8gc3BhbiBnYXBzXG5cdFx0dmFsdWVzLnNwYW5HYXBzID0gdmFsdWVPckRlZmF1bHQkNihjb25maWcuc3BhbkdhcHMsIG9wdGlvbnMuc3BhbkdhcHMpO1xuXHRcdHZhbHVlcy50ZW5zaW9uID0gdmFsdWVPckRlZmF1bHQkNihjb25maWcubGluZVRlbnNpb24sIGxpbmVPcHRpb25zLnRlbnNpb24pO1xuXHRcdHZhbHVlcy5zdGVwcGVkTGluZSA9IHJlc29sdmUkMihbY3VzdG9tLnN0ZXBwZWRMaW5lLCBjb25maWcuc3RlcHBlZExpbmUsIGxpbmVPcHRpb25zLnN0ZXBwZWRdKTtcblx0XHR2YWx1ZXMuY2xpcCA9IHRvQ2xpcCh2YWx1ZU9yRGVmYXVsdCQ2KGNvbmZpZy5jbGlwLCBkZWZhdWx0Q2xpcChtZS5feFNjYWxlLCBtZS5feVNjYWxlLCB2YWx1ZXMuYm9yZGVyV2lkdGgpKSk7XG5cblx0XHRyZXR1cm4gdmFsdWVzO1xuXHR9LFxuXG5cdGNhbGN1bGF0ZVBvaW50WTogZnVuY3Rpb24odmFsdWUsIGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciB5U2NhbGUgPSBtZS5feVNjYWxlO1xuXHRcdHZhciBzdW1Qb3MgPSAwO1xuXHRcdHZhciBzdW1OZWcgPSAwO1xuXHRcdHZhciBpLCBkcywgZHNNZXRhLCBzdGFja2VkUmlnaHRWYWx1ZSwgcmlnaHRWYWx1ZSwgbWV0YXNldHMsIGlsZW47XG5cblx0XHRpZiAoeVNjYWxlLm9wdGlvbnMuc3RhY2tlZCkge1xuXHRcdFx0cmlnaHRWYWx1ZSA9ICt5U2NhbGUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cdFx0XHRtZXRhc2V0cyA9IGNoYXJ0Ll9nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG5cdFx0XHRpbGVuID0gbWV0YXNldHMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGRzTWV0YSA9IG1ldGFzZXRzW2ldO1xuXHRcdFx0XHRpZiAoZHNNZXRhLmluZGV4ID09PSBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRzID0gY2hhcnQuZGF0YS5kYXRhc2V0c1tkc01ldGEuaW5kZXhdO1xuXHRcdFx0XHRpZiAoZHNNZXRhLnR5cGUgPT09ICdsaW5lJyAmJiBkc01ldGEueUF4aXNJRCA9PT0geVNjYWxlLmlkKSB7XG5cdFx0XHRcdFx0c3RhY2tlZFJpZ2h0VmFsdWUgPSAreVNjYWxlLmdldFJpZ2h0VmFsdWUoZHMuZGF0YVtpbmRleF0pO1xuXHRcdFx0XHRcdGlmIChzdGFja2VkUmlnaHRWYWx1ZSA8IDApIHtcblx0XHRcdFx0XHRcdHN1bU5lZyArPSBzdGFja2VkUmlnaHRWYWx1ZSB8fCAwO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdW1Qb3MgKz0gc3RhY2tlZFJpZ2h0VmFsdWUgfHwgMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHJpZ2h0VmFsdWUgPCAwKSB7XG5cdFx0XHRcdHJldHVybiB5U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdW1OZWcgKyByaWdodFZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB5U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdW1Qb3MgKyByaWdodFZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKTtcblx0fSxcblxuXHR1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBsaW5lTW9kZWwgPSBtZXRhLmRhdGFzZXQuX21vZGVsO1xuXHRcdHZhciBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIGksIGlsZW4sIG1vZGVsLCBjb250cm9sUG9pbnRzO1xuXG5cdFx0Ly8gT25seSBjb25zaWRlciBwb2ludHMgdGhhdCBhcmUgZHJhd24gaW4gY2FzZSB0aGUgc3BhbkdhcHMgb3B0aW9uIGlzIHVzZWRcblx0XHRpZiAobGluZU1vZGVsLnNwYW5HYXBzKSB7XG5cdFx0XHRwb2ludHMgPSBwb2ludHMuZmlsdGVyKGZ1bmN0aW9uKHB0KSB7XG5cdFx0XHRcdHJldHVybiAhcHQuX21vZGVsLnNraXA7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjYXBDb250cm9sUG9pbnQocHQsIG1pbiwgbWF4KSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG5cdFx0fVxuXG5cdFx0aWYgKGxpbmVNb2RlbC5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG5cdFx0XHRoZWxwZXJzJDEuc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtb2RlbCA9IHBvaW50c1tpXS5fbW9kZWw7XG5cdFx0XHRcdGNvbnRyb2xQb2ludHMgPSBoZWxwZXJzJDEuc3BsaW5lQ3VydmUoXG5cdFx0XHRcdFx0aGVscGVycyQxLnByZXZpb3VzSXRlbShwb2ludHMsIGkpLl9tb2RlbCxcblx0XHRcdFx0XHRtb2RlbCxcblx0XHRcdFx0XHRoZWxwZXJzJDEubmV4dEl0ZW0ocG9pbnRzLCBpKS5fbW9kZWwsXG5cdFx0XHRcdFx0bGluZU1vZGVsLnRlbnNpb25cblx0XHRcdFx0KTtcblx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gY29udHJvbFBvaW50cy5wcmV2aW91cy54O1xuXHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG5cdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRYID0gY29udHJvbFBvaW50cy5uZXh0Lng7XG5cdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMubGluZS5jYXBCZXppZXJQb2ludHMpIHtcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1vZGVsID0gcG9pbnRzW2ldLl9tb2RlbDtcblx0XHRcdFx0aWYgKGlzUG9pbnRJbkFyZWEobW9kZWwsIGFyZWEpKSB7XG5cdFx0XHRcdFx0aWYgKGkgPiAwICYmIGlzUG9pbnRJbkFyZWEocG9pbnRzW2kgLSAxXS5fbW9kZWwsIGFyZWEpKSB7XG5cdFx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBjYXBDb250cm9sUG9pbnQobW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYLCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuXHRcdFx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNZID0gY2FwQ29udHJvbFBvaW50KG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGkgPCBwb2ludHMubGVuZ3RoIC0gMSAmJiBpc1BvaW50SW5BcmVhKHBvaW50c1tpICsgMV0uX21vZGVsLCBhcmVhKSkge1xuXHRcdFx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFggPSBjYXBDb250cm9sUG9pbnQobW9kZWwuY29udHJvbFBvaW50TmV4dFgsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG5cdFx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnROZXh0WSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdHZhciBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuXHRcdHZhciBjYW52YXMgPSBjaGFydC5jYW52YXM7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciBpbGVuID0gcG9pbnRzLmxlbmd0aDtcblx0XHR2YXIgY2xpcDtcblxuXHRcdGlmIChtZS5fc2hvd0xpbmUpIHtcblx0XHRcdGNsaXAgPSBtZXRhLmRhdGFzZXQuX21vZGVsLmNsaXA7XG5cblx0XHRcdGhlbHBlcnMkMS5jYW52YXMuY2xpcEFyZWEoY2hhcnQuY3R4LCB7XG5cdFx0XHRcdGxlZnQ6IGNsaXAubGVmdCA9PT0gZmFsc2UgPyAwIDogYXJlYS5sZWZ0IC0gY2xpcC5sZWZ0LFxuXHRcdFx0XHRyaWdodDogY2xpcC5yaWdodCA9PT0gZmFsc2UgPyBjYW52YXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcblx0XHRcdFx0dG9wOiBjbGlwLnRvcCA9PT0gZmFsc2UgPyAwIDogYXJlYS50b3AgLSBjbGlwLnRvcCxcblx0XHRcdFx0Ym90dG9tOiBjbGlwLmJvdHRvbSA9PT0gZmFsc2UgPyBjYW52YXMuaGVpZ2h0IDogYXJlYS5ib3R0b20gKyBjbGlwLmJvdHRvbVxuXHRcdFx0fSk7XG5cblx0XHRcdG1ldGEuZGF0YXNldC5kcmF3KCk7XG5cblx0XHRcdGhlbHBlcnMkMS5jYW52YXMudW5jbGlwQXJlYShjaGFydC5jdHgpO1xuXHRcdH1cblxuXHRcdC8vIERyYXcgdGhlIHBvaW50c1xuXHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwb2ludHNbaV0uZHJhdyhhcmVhKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0dmFyIG1vZGVsID0gcG9pbnQuX21vZGVsO1xuXHRcdHZhciBvcHRpb25zID0gcG9pbnQuX29wdGlvbnM7XG5cdFx0dmFyIGdldEhvdmVyQ29sb3IgPSBoZWxwZXJzJDEuZ2V0SG92ZXJDb2xvcjtcblxuXHRcdHBvaW50LiRwcmV2aW91c1N0eWxlID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBtb2RlbC5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogbW9kZWwuYm9yZGVyQ29sb3IsXG5cdFx0XHRib3JkZXJXaWR0aDogbW9kZWwuYm9yZGVyV2lkdGgsXG5cdFx0XHRyYWRpdXM6IG1vZGVsLnJhZGl1c1xuXHRcdH07XG5cblx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdCQ2KG9wdGlvbnMuaG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpKTtcblx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDYob3B0aW9ucy5ob3ZlckJvcmRlckNvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpKTtcblx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JDYob3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcblx0XHRtb2RlbC5yYWRpdXMgPSB2YWx1ZU9yRGVmYXVsdCQ2KG9wdGlvbnMuaG92ZXJSYWRpdXMsIG9wdGlvbnMucmFkaXVzKTtcblx0fSxcbn0pO1xuXG52YXIgcmVzb2x2ZSQzID0gaGVscGVycyQxLm9wdGlvbnMucmVzb2x2ZTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdwb2xhckFyZWEnLCB7XG5cdHNjYWxlOiB7XG5cdFx0dHlwZTogJ3JhZGlhbExpbmVhcicsXG5cdFx0YW5nbGVMaW5lczoge1xuXHRcdFx0ZGlzcGxheTogZmFsc2Vcblx0XHR9LFxuXHRcdGdyaWRMaW5lczoge1xuXHRcdFx0Y2lyY3VsYXI6IHRydWVcblx0XHR9LFxuXHRcdHBvaW50TGFiZWxzOiB7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZVxuXHRcdH0sXG5cdFx0dGlja3M6IHtcblx0XHRcdGJlZ2luQXRaZXJvOiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRvIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBjaGFydFxuXHRhbmltYXRpb246IHtcblx0XHRhbmltYXRlUm90YXRlOiB0cnVlLFxuXHRcdGFuaW1hdGVTY2FsZTogdHJ1ZVxuXHR9LFxuXG5cdHN0YXJ0QW5nbGU6IC0wLjUgKiBNYXRoLlBJLFxuXHRsZWdlbmRDYWxsYmFjazogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG5cdFx0dmFyIGRhdGEgPSBjaGFydC5kYXRhO1xuXHRcdHZhciBkYXRhc2V0cyA9IGRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIGxhYmVscyA9IGRhdGEubGFiZWxzO1xuXHRcdHZhciBpLCBpbGVuLCBsaXN0SXRlbSwgbGlzdEl0ZW1TcGFuO1xuXG5cdFx0bGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2hhcnQuaWQgKyAnLWxlZ2VuZCcpO1xuXHRcdGlmIChkYXRhc2V0cy5sZW5ndGgpIHtcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0c1swXS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRsaXN0SXRlbSA9IGxpc3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSk7XG5cdFx0XHRcdGxpc3RJdGVtU3BhbiA9IGxpc3RJdGVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSk7XG5cdFx0XHRcdGxpc3RJdGVtU3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhc2V0c1swXS5iYWNrZ3JvdW5kQ29sb3JbaV07XG5cdFx0XHRcdGlmIChsYWJlbHNbaV0pIHtcblx0XHRcdFx0XHRsaXN0SXRlbS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsYWJlbHNbaV0pKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBsaXN0Lm91dGVySFRNTDtcblx0fSxcblx0bGVnZW5kOiB7XG5cdFx0bGFiZWxzOiB7XG5cdFx0XHRnZW5lcmF0ZUxhYmVsczogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHRcdFx0dmFyIGRhdGEgPSBjaGFydC5kYXRhO1xuXHRcdFx0XHRpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGEubGFiZWxzLm1hcChmdW5jdGlvbihsYWJlbCwgaSkge1xuXHRcdFx0XHRcdFx0dmFyIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcblx0XHRcdFx0XHRcdHZhciBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0dGV4dDogbGFiZWwsXG5cdFx0XHRcdFx0XHRcdGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0XHRcdFx0XHRzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdFx0XHRcdGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG5cdFx0XHRcdFx0XHRcdGhpZGRlbjogaXNOYU4oZGF0YS5kYXRhc2V0c1swXS5kYXRhW2ldKSB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuLFxuXG5cdFx0XHRcdFx0XHRcdC8vIEV4dHJhIGRhdGEgdXNlZCBmb3IgdG9nZ2xpbmcgdGhlIGNvcnJlY3QgaXRlbVxuXHRcdFx0XHRcdFx0XHRpbmRleDogaVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG9uQ2xpY2s6IGZ1bmN0aW9uKGUsIGxlZ2VuZEl0ZW0pIHtcblx0XHRcdHZhciBpbmRleCA9IGxlZ2VuZEl0ZW0uaW5kZXg7XG5cdFx0XHR2YXIgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuXHRcdFx0dmFyIGksIGlsZW4sIG1ldGE7XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdFx0bWV0YS5kYXRhW2luZGV4XS5oaWRkZW4gPSAhbWV0YS5kYXRhW2luZGV4XS5oaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdGNoYXJ0LnVwZGF0ZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOZWVkIHRvIG92ZXJyaWRlIHRoZXNlIHRvIGdpdmUgYSBuaWNlIGRlZmF1bHRcblx0dG9vbHRpcHM6IHtcblx0XHRjYWxsYmFja3M6IHtcblx0XHRcdHRpdGxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fSxcblx0XHRcdGxhYmVsOiBmdW5jdGlvbihpdGVtLCBkYXRhKSB7XG5cdFx0XHRcdHJldHVybiBkYXRhLmxhYmVsc1tpdGVtLmluZGV4XSArICc6ICcgKyBpdGVtLnlMYWJlbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgY29udHJvbGxlcl9wb2xhckFyZWEgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cblx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5BcmMsXG5cblx0bGlua1NjYWxlczogaGVscGVycyQxLm5vb3AsXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YUVsZW1lbnRPcHRpb25zOiBbXG5cdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0J2JvcmRlckNvbG9yJyxcblx0XHQnYm9yZGVyV2lkdGgnLFxuXHRcdCdib3JkZXJBbGlnbicsXG5cdFx0J2hvdmVyQmFja2dyb3VuZENvbG9yJyxcblx0XHQnaG92ZXJCb3JkZXJDb2xvcicsXG5cdFx0J2hvdmVyQm9yZGVyV2lkdGgnLFxuXHRdLFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEluZGV4U2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2hhcnQuc2NhbGUuaWQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0VmFsdWVTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZS5pZDtcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgc3RhcnQgPSBtZS5jaGFydC5vcHRpb25zLnN0YXJ0QW5nbGUgfHwgMDtcblx0XHR2YXIgc3RhcnRzID0gbWUuX3N0YXJ0cyA9IFtdO1xuXHRcdHZhciBhbmdsZXMgPSBtZS5fYW5nbGVzID0gW107XG5cdFx0dmFyIGFyY3MgPSBtZXRhLmRhdGE7XG5cdFx0dmFyIGksIGlsZW4sIGFuZ2xlO1xuXG5cdFx0bWUuX3VwZGF0ZVJhZGl1cygpO1xuXG5cdFx0bWV0YS5jb3VudCA9IG1lLmNvdW50VmlzaWJsZUVsZW1lbnRzKCk7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldC5kYXRhLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0c3RhcnRzW2ldID0gc3RhcnQ7XG5cdFx0XHRhbmdsZSA9IG1lLl9jb21wdXRlQW5nbGUoaSk7XG5cdFx0XHRhbmdsZXNbaV0gPSBhbmdsZTtcblx0XHRcdHN0YXJ0ICs9IGFuZ2xlO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0YXJjc1tpXS5fb3B0aW9ucyA9IG1lLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGFyY3NbaV0sIGkpO1xuXHRcdFx0bWUudXBkYXRlRWxlbWVudChhcmNzW2ldLCBpLCByZXNldCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3VwZGF0ZVJhZGl1czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuXHRcdHZhciBvcHRzID0gY2hhcnQub3B0aW9ucztcblx0XHR2YXIgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG5cblx0XHRjaGFydC5vdXRlclJhZGl1cyA9IE1hdGgubWF4KG1pblNpemUgLyAyLCAwKTtcblx0XHRjaGFydC5pbm5lclJhZGl1cyA9IE1hdGgubWF4KG9wdHMuY3V0b3V0UGVyY2VudGFnZSA/IChjaGFydC5vdXRlclJhZGl1cyAvIDEwMCkgKiAob3B0cy5jdXRvdXRQZXJjZW50YWdlKSA6IDEsIDApO1xuXHRcdGNoYXJ0LnJhZGl1c0xlbmd0aCA9IChjaGFydC5vdXRlclJhZGl1cyAtIGNoYXJ0LmlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcblxuXHRcdG1lLm91dGVyUmFkaXVzID0gY2hhcnQub3V0ZXJSYWRpdXMgLSAoY2hhcnQucmFkaXVzTGVuZ3RoICogbWUuaW5kZXgpO1xuXHRcdG1lLmlubmVyUmFkaXVzID0gbWUub3V0ZXJSYWRpdXMgLSBjaGFydC5yYWRpdXNMZW5ndGg7XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24oYXJjLCBpbmRleCwgcmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBvcHRzID0gY2hhcnQub3B0aW9ucztcblx0XHR2YXIgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuXHRcdHZhciBzY2FsZSA9IGNoYXJ0LnNjYWxlO1xuXHRcdHZhciBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscztcblxuXHRcdHZhciBjZW50ZXJYID0gc2NhbGUueENlbnRlcjtcblx0XHR2YXIgY2VudGVyWSA9IHNjYWxlLnlDZW50ZXI7XG5cblx0XHQvLyB2YXIgbmVnSGFsZlBJID0gLTAuNSAqIE1hdGguUEk7XG5cdFx0dmFyIGRhdGFzZXRTdGFydEFuZ2xlID0gb3B0cy5zdGFydEFuZ2xlO1xuXHRcdHZhciBkaXN0YW5jZSA9IGFyYy5oaWRkZW4gPyAwIDogc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoZGF0YXNldC5kYXRhW2luZGV4XSk7XG5cdFx0dmFyIHN0YXJ0QW5nbGUgPSBtZS5fc3RhcnRzW2luZGV4XTtcblx0XHR2YXIgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGFyYy5oaWRkZW4gPyAwIDogbWUuX2FuZ2xlc1tpbmRleF0pO1xuXG5cdFx0dmFyIHJlc2V0UmFkaXVzID0gYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUgPyAwIDogc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoZGF0YXNldC5kYXRhW2luZGV4XSk7XG5cdFx0dmFyIG9wdGlvbnMgPSBhcmMuX29wdGlvbnMgfHwge307XG5cblx0XHRoZWxwZXJzJDEuZXh0ZW5kKGFyYywge1xuXHRcdFx0Ly8gVXRpbGl0eVxuXHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRfaW5kZXg6IGluZGV4LFxuXHRcdFx0X3NjYWxlOiBzY2FsZSxcblxuXHRcdFx0Ly8gRGVzaXJlZCB2aWV3IHByb3BlcnRpZXNcblx0XHRcdF9tb2RlbDoge1xuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0XHRib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcblx0XHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHRcdGJvcmRlckFsaWduOiBvcHRpb25zLmJvcmRlckFsaWduLFxuXHRcdFx0XHR4OiBjZW50ZXJYLFxuXHRcdFx0XHR5OiBjZW50ZXJZLFxuXHRcdFx0XHRpbm5lclJhZGl1czogMCxcblx0XHRcdFx0b3V0ZXJSYWRpdXM6IHJlc2V0ID8gcmVzZXRSYWRpdXMgOiBkaXN0YW5jZSxcblx0XHRcdFx0c3RhcnRBbmdsZTogcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlID8gZGF0YXNldFN0YXJ0QW5nbGUgOiBzdGFydEFuZ2xlLFxuXHRcdFx0XHRlbmRBbmdsZTogcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlID8gZGF0YXNldFN0YXJ0QW5nbGUgOiBlbmRBbmdsZSxcblx0XHRcdFx0bGFiZWw6IGhlbHBlcnMkMS52YWx1ZUF0SW5kZXhPckRlZmF1bHQobGFiZWxzLCBpbmRleCwgbGFiZWxzW2luZGV4XSlcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFyYy5waXZvdCgpO1xuXHR9LFxuXG5cdGNvdW50VmlzaWJsZUVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBtZXRhID0gdGhpcy5nZXRNZXRhKCk7XG5cdFx0dmFyIGNvdW50ID0gMDtcblxuXHRcdGhlbHBlcnMkMS5lYWNoKG1ldGEuZGF0YSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcblx0XHRcdGlmICghaXNOYU4oZGF0YXNldC5kYXRhW2luZGV4XSkgJiYgIWVsZW1lbnQuaGlkZGVuKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY291bnQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKGFyYykge1xuXHRcdHZhciBtb2RlbCA9IGFyYy5fbW9kZWw7XG5cdFx0dmFyIG9wdGlvbnMgPSBhcmMuX29wdGlvbnM7XG5cdFx0dmFyIGdldEhvdmVyQ29sb3IgPSBoZWxwZXJzJDEuZ2V0SG92ZXJDb2xvcjtcblx0XHR2YXIgdmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cblx0XHRhcmMuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBtb2RlbC5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aCxcblx0XHR9O1xuXG5cdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5ob3ZlckJvcmRlckNvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpKTtcblx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aCwgb3B0aW9ucy5ib3JkZXJXaWR0aCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY29tcHV0ZUFuZ2xlOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNvdW50ID0gdGhpcy5nZXRNZXRhKCkuY291bnQ7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cblx0XHRpZiAoaXNOYU4oZGF0YXNldC5kYXRhW2luZGV4XSkgfHwgbWV0YS5kYXRhW2luZGV4XS5oaWRkZW4pIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNjcmlwdGFibGUgb3B0aW9uc1xuXHRcdHZhciBjb250ZXh0ID0ge1xuXHRcdFx0Y2hhcnQ6IG1lLmNoYXJ0LFxuXHRcdFx0ZGF0YUluZGV4OiBpbmRleCxcblx0XHRcdGRhdGFzZXQ6IGRhdGFzZXQsXG5cdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0fTtcblxuXHRcdHJldHVybiByZXNvbHZlJDMoW1xuXHRcdFx0bWUuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5hcmMuYW5nbGUsXG5cdFx0XHQoMiAqIE1hdGguUEkpIC8gY291bnRcblx0XHRdLCBjb250ZXh0LCBpbmRleCk7XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3BpZScsIGhlbHBlcnMkMS5jbG9uZShjb3JlX2RlZmF1bHRzLmRvdWdobnV0KSk7XG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3BpZScsIHtcblx0Y3V0b3V0UGVyY2VudGFnZTogMFxufSk7XG5cbi8vIFBpZSBjaGFydHMgYXJlIERvdWdobnV0IGNoYXJ0IHdpdGggZGlmZmVyZW50IGRlZmF1bHRzXG52YXIgY29udHJvbGxlcl9waWUgPSBjb250cm9sbGVyX2RvdWdobnV0O1xuXG52YXIgdmFsdWVPckRlZmF1bHQkNyA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdyYWRhcicsIHtcblx0c3BhbkdhcHM6IGZhbHNlLFxuXHRzY2FsZToge1xuXHRcdHR5cGU6ICdyYWRpYWxMaW5lYXInXG5cdH0sXG5cdGVsZW1lbnRzOiB7XG5cdFx0bGluZToge1xuXHRcdFx0ZmlsbDogJ3N0YXJ0Jyxcblx0XHRcdHRlbnNpb246IDAgLy8gbm8gYmV6aWVyIGluIHJhZGFyXG5cdFx0fVxuXHR9XG59KTtcblxudmFyIGNvbnRyb2xsZXJfcmFkYXIgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cdGRhdGFzZXRFbGVtZW50VHlwZTogZWxlbWVudHMuTGluZSxcblxuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLlBvaW50LFxuXG5cdGxpbmtTY2FsZXM6IGhlbHBlcnMkMS5ub29wLFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFzZXRFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J2JvcmRlckNvbG9yJyxcblx0XHQnYm9yZGVyQ2FwU3R5bGUnLFxuXHRcdCdib3JkZXJEYXNoJyxcblx0XHQnYm9yZGVyRGFzaE9mZnNldCcsXG5cdFx0J2JvcmRlckpvaW5TdHlsZScsXG5cdFx0J2ZpbGwnXG5cdF0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YUVsZW1lbnRPcHRpb25zOiB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiAncG9pbnRCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdGJvcmRlckNvbG9yOiAncG9pbnRCb3JkZXJDb2xvcicsXG5cdFx0Ym9yZGVyV2lkdGg6ICdwb2ludEJvcmRlcldpZHRoJyxcblx0XHRoaXRSYWRpdXM6ICdwb2ludEhpdFJhZGl1cycsXG5cdFx0aG92ZXJCYWNrZ3JvdW5kQ29sb3I6ICdwb2ludEhvdmVyQmFja2dyb3VuZENvbG9yJyxcblx0XHRob3ZlckJvcmRlckNvbG9yOiAncG9pbnRIb3ZlckJvcmRlckNvbG9yJyxcblx0XHRob3ZlckJvcmRlcldpZHRoOiAncG9pbnRIb3ZlckJvcmRlcldpZHRoJyxcblx0XHRob3ZlclJhZGl1czogJ3BvaW50SG92ZXJSYWRpdXMnLFxuXHRcdHBvaW50U3R5bGU6ICdwb2ludFN0eWxlJyxcblx0XHRyYWRpdXM6ICdwb2ludFJhZGl1cycsXG5cdFx0cm90YXRpb246ICdwb2ludFJvdGF0aW9uJ1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEluZGV4U2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2hhcnQuc2NhbGUuaWQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0VmFsdWVTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZS5pZDtcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgbGluZSA9IG1ldGEuZGF0YXNldDtcblx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdHZhciBzY2FsZSA9IG1lLmNoYXJ0LnNjYWxlO1xuXHRcdHZhciBjb25maWcgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0Ly8gQ29tcGF0aWJpbGl0eTogSWYgdGhlIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgd2l0aCBvbmx5IHRoZSBvbGQgbmFtZSwgdXNlIHRob3NlIHZhbHVlc1xuXHRcdGlmIChjb25maWcudGVuc2lvbiAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZy5saW5lVGVuc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb25maWcubGluZVRlbnNpb24gPSBjb25maWcudGVuc2lvbjtcblx0XHR9XG5cblx0XHQvLyBVdGlsaXR5XG5cdFx0bGluZS5fc2NhbGUgPSBzY2FsZTtcblx0XHRsaW5lLl9kYXRhc2V0SW5kZXggPSBtZS5pbmRleDtcblx0XHQvLyBEYXRhXG5cdFx0bGluZS5fY2hpbGRyZW4gPSBwb2ludHM7XG5cdFx0bGluZS5fbG9vcCA9IHRydWU7XG5cdFx0Ly8gTW9kZWxcblx0XHRsaW5lLl9tb2RlbCA9IG1lLl9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKGxpbmUpO1xuXG5cdFx0bGluZS5waXZvdCgpO1xuXG5cdFx0Ly8gVXBkYXRlIFBvaW50c1xuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZS51cGRhdGVFbGVtZW50KHBvaW50c1tpXSwgaSwgcmVzZXQpO1xuXHRcdH1cblxuXHRcdC8vIFVwZGF0ZSBiZXppZXIgY29udHJvbCBwb2ludHNcblx0XHRtZS51cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKCk7XG5cblx0XHQvLyBOb3cgcGl2b3QgdGhlIHBvaW50IGZvciBhbmltYXRpb25cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0cG9pbnRzW2ldLnBpdm90KCk7XG5cdFx0fVxuXHR9LFxuXG5cdHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHBvaW50LCBpbmRleCwgcmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIHNjYWxlID0gbWUuY2hhcnQuc2NhbGU7XG5cdFx0dmFyIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIGRhdGFzZXQuZGF0YVtpbmRleF0pO1xuXHRcdHZhciBvcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMocG9pbnQsIGluZGV4KTtcblx0XHR2YXIgbGluZU1vZGVsID0gbWUuZ2V0TWV0YSgpLmRhdGFzZXQuX21vZGVsO1xuXHRcdHZhciB4ID0gcmVzZXQgPyBzY2FsZS54Q2VudGVyIDogcG9pbnRQb3NpdGlvbi54O1xuXHRcdHZhciB5ID0gcmVzZXQgPyBzY2FsZS55Q2VudGVyIDogcG9pbnRQb3NpdGlvbi55O1xuXG5cdFx0Ly8gVXRpbGl0eVxuXHRcdHBvaW50Ll9zY2FsZSA9IHNjYWxlO1xuXHRcdHBvaW50Ll9vcHRpb25zID0gb3B0aW9ucztcblx0XHRwb2ludC5fZGF0YXNldEluZGV4ID0gbWUuaW5kZXg7XG5cdFx0cG9pbnQuX2luZGV4ID0gaW5kZXg7XG5cblx0XHQvLyBEZXNpcmVkIHZpZXcgcHJvcGVydGllc1xuXHRcdHBvaW50Ll9tb2RlbCA9IHtcblx0XHRcdHg6IHgsIC8vIHZhbHVlIG5vdCB1c2VkIGluIGRhdGFzZXQgc2NhbGUsIGJ1dCB3ZSB3YW50IGEgY29uc2lzdGVudCBBUEkgYmV0d2VlbiBzY2FsZXNcblx0XHRcdHk6IHksXG5cdFx0XHRza2lwOiBjdXN0b20uc2tpcCB8fCBpc05hTih4KSB8fCBpc05hTih5KSxcblx0XHRcdC8vIEFwcGVhcmFuY2Vcblx0XHRcdHJhZGl1czogb3B0aW9ucy5yYWRpdXMsXG5cdFx0XHRwb2ludFN0eWxlOiBvcHRpb25zLnBvaW50U3R5bGUsXG5cdFx0XHRyb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvbixcblx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuXHRcdFx0dGVuc2lvbjogdmFsdWVPckRlZmF1bHQkNyhjdXN0b20udGVuc2lvbiwgbGluZU1vZGVsID8gbGluZU1vZGVsLnRlbnNpb24gOiAwKSxcblxuXHRcdFx0Ly8gVG9vbHRpcFxuXHRcdFx0aGl0UmFkaXVzOiBvcHRpb25zLmhpdFJhZGl1c1xuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY29uZmlnID0gbWUuX2NvbmZpZztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLmNoYXJ0Lm9wdGlvbnM7XG5cdFx0dmFyIHZhbHVlcyA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLl9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0dmFsdWVzLnNwYW5HYXBzID0gdmFsdWVPckRlZmF1bHQkNyhjb25maWcuc3BhbkdhcHMsIG9wdGlvbnMuc3BhbkdhcHMpO1xuXHRcdHZhbHVlcy50ZW5zaW9uID0gdmFsdWVPckRlZmF1bHQkNyhjb25maWcubGluZVRlbnNpb24sIG9wdGlvbnMuZWxlbWVudHMubGluZS50ZW5zaW9uKTtcblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH0sXG5cblx0dXBkYXRlQmV6aWVyQ29udHJvbFBvaW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgYXJlYSA9IG1lLmNoYXJ0LmNoYXJ0QXJlYTtcblx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdHZhciBpLCBpbGVuLCBtb2RlbCwgY29udHJvbFBvaW50cztcblxuXHRcdC8vIE9ubHkgY29uc2lkZXIgcG9pbnRzIHRoYXQgYXJlIGRyYXduIGluIGNhc2UgdGhlIHNwYW5HYXBzIG9wdGlvbiBpcyB1c2VkXG5cdFx0aWYgKG1ldGEuZGF0YXNldC5fbW9kZWwuc3BhbkdhcHMpIHtcblx0XHRcdHBvaW50cyA9IHBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocHQpIHtcblx0XHRcdFx0cmV0dXJuICFwdC5fbW9kZWwuc2tpcDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNhcENvbnRyb2xQb2ludChwdCwgbWluLCBtYXgpIHtcblx0XHRcdHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0bW9kZWwgPSBwb2ludHNbaV0uX21vZGVsO1xuXHRcdFx0Y29udHJvbFBvaW50cyA9IGhlbHBlcnMkMS5zcGxpbmVDdXJ2ZShcblx0XHRcdFx0aGVscGVycyQxLnByZXZpb3VzSXRlbShwb2ludHMsIGksIHRydWUpLl9tb2RlbCxcblx0XHRcdFx0bW9kZWwsXG5cdFx0XHRcdGhlbHBlcnMkMS5uZXh0SXRlbShwb2ludHMsIGksIHRydWUpLl9tb2RlbCxcblx0XHRcdFx0bW9kZWwudGVuc2lvblxuXHRcdFx0KTtcblxuXHRcdFx0Ly8gUHJldmVudCB0aGUgYmV6aWVyIGdvaW5nIG91dHNpZGUgb2YgdGhlIGJvdW5kcyBvZiB0aGUgZ3JhcGhcblx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IGNhcENvbnRyb2xQb2ludChjb250cm9sUG9pbnRzLnByZXZpb3VzLngsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG5cdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBjYXBDb250cm9sUG9pbnQoY29udHJvbFBvaW50cy5wcmV2aW91cy55LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFggPSBjYXBDb250cm9sUG9pbnQoY29udHJvbFBvaW50cy5uZXh0LngsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG5cdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IGNhcENvbnRyb2xQb2ludChjb250cm9sUG9pbnRzLm5leHQueSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcblx0XHR9XG5cdH0sXG5cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0dmFyIG9wdGlvbnMgPSBwb2ludC5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0cG9pbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBtb2RlbC5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aCxcblx0XHRcdHJhZGl1czogbW9kZWwucmFkaXVzXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDcob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQkNyhvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQkNyhvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuXHRcdG1vZGVsLnJhZGl1cyA9IHZhbHVlT3JEZWZhdWx0JDcob3B0aW9ucy5ob3ZlclJhZGl1cywgb3B0aW9ucy5yYWRpdXMpO1xuXHR9XG59KTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdzY2F0dGVyJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdzaW5nbGUnXG5cdH0sXG5cblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHRpZDogJ3gtYXhpcy0xJywgICAgLy8gbmVlZCBhbiBJRCBzbyBkYXRhc2V0cyBjYW4gcmVmZXJlbmNlIHRoZSBzY2FsZVxuXHRcdFx0dHlwZTogJ2xpbmVhcicsICAgIC8vIHNjYXR0ZXIgc2hvdWxkIG5vdCB1c2UgYSBjYXRlZ29yeSBheGlzXG5cdFx0XHRwb3NpdGlvbjogJ2JvdHRvbSdcblx0XHR9XSxcblx0XHR5QXhlczogW3tcblx0XHRcdGlkOiAneS1heGlzLTEnLFxuXHRcdFx0dHlwZTogJ2xpbmVhcicsXG5cdFx0XHRwb3NpdGlvbjogJ2xlZnQnXG5cdFx0fV1cblx0fSxcblxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7ICAgICAvLyBkb2Vzbid0IG1ha2Ugc2Vuc2UgZm9yIHNjYXR0ZXIgc2luY2UgZGF0YSBhcmUgZm9ybWF0dGVkIGFzIGEgcG9pbnRcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gJygnICsgaXRlbS54TGFiZWwgKyAnLCAnICsgaXRlbS55TGFiZWwgKyAnKSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGRhdGFzZXRzOiB7XG5cdFx0c2NhdHRlcjoge1xuXHRcdFx0c2hvd0xpbmU6IGZhbHNlXG5cdFx0fVxuXHR9XG59KTtcblxuLy8gU2NhdHRlciBjaGFydHMgdXNlIGxpbmUgY29udHJvbGxlcnNcbnZhciBjb250cm9sbGVyX3NjYXR0ZXIgPSBjb250cm9sbGVyX2xpbmU7XG5cbi8vIE5PVEUgZXhwb3J0IGEgbWFwIGluIHdoaWNoIHRoZSBrZXkgcmVwcmVzZW50cyB0aGUgY29udHJvbGxlciB0eXBlLCBub3Rcbi8vIHRoZSBjbGFzcywgYW5kIHNvIG11c3QgYmUgQ2FtZWxDYXNlIGluIG9yZGVyIHRvIGJlIGNvcnJlY3RseSByZXRyaWV2ZWRcbi8vIGJ5IHRoZSBjb250cm9sbGVyIGluIGNvcmUuY29udHJvbGxlci5qcyAoYGNvbnRyb2xsZXJzW21ldGEudHlwZV1gKS5cblxudmFyIGNvbnRyb2xsZXJzID0ge1xuXHRiYXI6IGNvbnRyb2xsZXJfYmFyLFxuXHRidWJibGU6IGNvbnRyb2xsZXJfYnViYmxlLFxuXHRkb3VnaG51dDogY29udHJvbGxlcl9kb3VnaG51dCxcblx0aG9yaXpvbnRhbEJhcjogY29udHJvbGxlcl9ob3Jpem9udGFsQmFyLFxuXHRsaW5lOiBjb250cm9sbGVyX2xpbmUsXG5cdHBvbGFyQXJlYTogY29udHJvbGxlcl9wb2xhckFyZWEsXG5cdHBpZTogY29udHJvbGxlcl9waWUsXG5cdHJhZGFyOiBjb250cm9sbGVyX3JhZGFyLFxuXHRzY2F0dGVyOiBjb250cm9sbGVyX3NjYXR0ZXJcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCByZWxhdGl2ZSBwb3NpdGlvbiBmb3IgYW4gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnR8SUV2ZW50fSBldmVudCAtIFRoZSBldmVudCB0byBnZXQgdGhlIHBvc2l0aW9uIGZvclxuICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnRcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBldmVudCBwb3NpdGlvblxuICovXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KSB7XG5cdGlmIChlLm5hdGl2ZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBlLngsXG5cdFx0XHR5OiBlLnlcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIGhlbHBlcnMkMS5nZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gdHJhdmVyc2UgYWxsIG9mIHRoZSB2aXNpYmxlIGVsZW1lbnRzIGluIHRoZSBjaGFydFxuICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXIgLSB0aGUgY2FsbGJhY2sgdG8gZXhlY3V0ZSBmb3IgZWFjaCB2aXNpYmxlIGl0ZW1cbiAqL1xuZnVuY3Rpb24gcGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGhhbmRsZXIpIHtcblx0dmFyIG1ldGFzZXRzID0gY2hhcnQuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcblx0dmFyIG1ldGFkYXRhLCBpLCBqLCBpbGVuLCBqbGVuLCBlbGVtZW50O1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRtZXRhZGF0YSA9IG1ldGFzZXRzW2ldLmRhdGE7XG5cdFx0Zm9yIChqID0gMCwgamxlbiA9IG1ldGFkYXRhLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuXHRcdFx0ZWxlbWVudCA9IG1ldGFkYXRhW2pdO1xuXHRcdFx0aWYgKCFlbGVtZW50Ll92aWV3LnNraXApIHtcblx0XHRcdFx0aGFuZGxlcihlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBpdGVtcyB0aGF0IGludGVyc2VjdCB0aGUgZXZlbnQgcG9zaXRpb25cbiAqIEBwYXJhbSB7Q2hhcnRFbGVtZW50W119IGl0ZW1zIC0gZWxlbWVudHMgdG8gZmlsdGVyXG4gKiBAcGFyYW0ge29iamVjdH0gcG9zaXRpb24gLSB0aGUgcG9pbnQgdG8gYmUgbmVhcmVzdCB0b1xuICogQHJldHVybiB7Q2hhcnRFbGVtZW50W119IHRoZSBuZWFyZXN0IGl0ZW1zXG4gKi9cbmZ1bmN0aW9uIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbikge1xuXHR2YXIgZWxlbWVudHMgPSBbXTtcblxuXHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSkpIHtcblx0XHRcdGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB0aGUgaXRlbXMgbmVhcmVzdCB0byB0aGUgZXZlbnQgcG9zaXRpb24gY29uc2lkZXJpbmcgYWxsIHZpc2libGUgaXRlbXMgaW4gdGVoIGNoYXJ0XG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB0byBsb29rIGF0IGVsZW1lbnRzIGZyb21cbiAqIEBwYXJhbSB7b2JqZWN0fSBwb3NpdGlvbiAtIHRoZSBwb2ludCB0byBiZSBuZWFyZXN0IHRvXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGludGVyc2VjdCAtIGlmIHRydWUsIG9ubHkgY29uc2lkZXIgaXRlbXMgdGhhdCBpbnRlcnNlY3QgdGhlIHBvc2l0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkaXN0YW5jZU1ldHJpYyAtIGZ1bmN0aW9uIHRvIHByb3ZpZGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gcG9pbnRzXG4gKiBAcmV0dXJuIHtDaGFydEVsZW1lbnRbXX0gdGhlIG5lYXJlc3QgaXRlbXNcbiAqL1xuZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgaW50ZXJzZWN0LCBkaXN0YW5jZU1ldHJpYykge1xuXHR2YXIgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cdHZhciBuZWFyZXN0SXRlbXMgPSBbXTtcblxuXHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdGlmIChpbnRlcnNlY3QgJiYgIWVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjZW50ZXIgPSBlbGVtZW50LmdldENlbnRlclBvaW50KCk7XG5cdFx0dmFyIGRpc3RhbmNlID0gZGlzdGFuY2VNZXRyaWMocG9zaXRpb24sIGNlbnRlcik7XG5cdFx0aWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcblx0XHRcdG5lYXJlc3RJdGVtcyA9IFtlbGVtZW50XTtcblx0XHRcdG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG5cdFx0fSBlbHNlIGlmIChkaXN0YW5jZSA9PT0gbWluRGlzdGFuY2UpIHtcblx0XHRcdC8vIENhbiBoYXZlIG11bHRpcGxlIGl0ZW1zIGF0IHRoZSBzYW1lIGRpc3RhbmNlIGluIHdoaWNoIGNhc2Ugd2Ugc29ydCBieSBzaXplXG5cdFx0XHRuZWFyZXN0SXRlbXMucHVzaChlbGVtZW50KTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBuZWFyZXN0SXRlbXM7XG59XG5cbi8qKlxuICogR2V0IGEgZGlzdGFuY2UgbWV0cmljIGZ1bmN0aW9uIGZvciB0d28gcG9pbnRzIGJhc2VkIG9uIHRoZVxuICogYXhpcyBtb2RlIHNldHRpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBheGlzIC0gdGhlIGF4aXMgbW9kZS4geHx5fHh5XG4gKi9cbmZ1bmN0aW9uIGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKSB7XG5cdHZhciB1c2VYID0gYXhpcy5pbmRleE9mKCd4JykgIT09IC0xO1xuXHR2YXIgdXNlWSA9IGF4aXMuaW5kZXhPZigneScpICE9PSAtMTtcblxuXHRyZXR1cm4gZnVuY3Rpb24ocHQxLCBwdDIpIHtcblx0XHR2YXIgZGVsdGFYID0gdXNlWCA/IE1hdGguYWJzKHB0MS54IC0gcHQyLngpIDogMDtcblx0XHR2YXIgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gaW5kZXhNb2RlKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG5cdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHQvLyBEZWZhdWx0IGF4aXMgZm9yIGluZGV4IG1vZGUgaXMgJ3gnIHRvIG1hdGNoIG9sZCBiZWhhdmlvdXJcblx0b3B0aW9ucy5heGlzID0gb3B0aW9ucy5heGlzIHx8ICd4Jztcblx0dmFyIGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKG9wdGlvbnMuYXhpcyk7XG5cdHZhciBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGZhbHNlLCBkaXN0YW5jZU1ldHJpYyk7XG5cdHZhciBlbGVtZW50cyA9IFtdO1xuXG5cdGlmICghaXRlbXMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Y2hhcnQuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGEpIHtcblx0XHR2YXIgZWxlbWVudCA9IG1ldGEuZGF0YVtpdGVtc1swXS5faW5kZXhdO1xuXG5cdFx0Ly8gZG9uJ3QgY291bnQgaXRlbXMgdGhhdCBhcmUgc2tpcHBlZCAobnVsbCBkYXRhKVxuXHRcdGlmIChlbGVtZW50ICYmICFlbGVtZW50Ll92aWV3LnNraXApIHtcblx0XHRcdGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbi8qKlxuICogQGludGVyZmFjZSBJSW50ZXJhY3Rpb25PcHRpb25zXG4gKi9cbi8qKlxuICogSWYgdHJ1ZSwgb25seSBjb25zaWRlciBpdGVtcyB0aGF0IGludGVyc2VjdCB0aGUgcG9pbnRcbiAqIEBuYW1lIElJbnRlcmZhY2VPcHRpb25zI2Jvb2xlYW5cbiAqIEB0eXBlIEJvb2xlYW5cbiAqL1xuXG4vKipcbiAqIENvbnRhaW5zIGludGVyYWN0aW9uIHJlbGF0ZWQgZnVuY3Rpb25zXG4gKiBAbmFtZXNwYWNlIENoYXJ0LkludGVyYWN0aW9uXG4gKi9cbnZhciBjb3JlX2ludGVyYWN0aW9uID0ge1xuXHQvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGRpZmZlcmVudCBtb2Rlc1xuXHRtb2Rlczoge1xuXHRcdHNpbmdsZTogZnVuY3Rpb24oY2hhcnQsIGUpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gW107XG5cblx0XHRcdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRcdGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSkpIHtcblx0XHRcdFx0XHRlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuXHRcdFx0XHRcdHJldHVybiBlbGVtZW50cztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBlbGVtZW50cy5zbGljZSgwLCAxKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmxhYmVsXG5cdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjQuMFxuXHRcdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGxhYmVsOiBpbmRleE1vZGUsXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGl0ZW1zIGF0IHRoZSBzYW1lIGluZGV4LiBJZiB0aGUgb3B0aW9ucy5pbnRlcnNlY3QgcGFyYW1ldGVyIGlzIHRydWUsIHdlIG9ubHkgcmV0dXJuIGl0ZW1zIGlmIHdlIGludGVyc2VjdCBzb21ldGhpbmdcblx0XHQgKiBJZiB0aGUgb3B0aW9ucy5pbnRlcnNlY3QgbW9kZSBpcyBmYWxzZSwgd2UgZmluZCB0aGUgbmVhcmVzdCBpdGVtIGFuZCByZXR1cm4gdGhlIGl0ZW1zIGF0IHRoZSBzYW1lIGluZGV4IGFzIHRoYXQgaXRlbVxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5pbmRleFxuXHRcdCAqIEBzaW5jZSB2Mi40LjBcblx0XHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0ge0V2ZW50fSBlIC0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEBwYXJhbSB7SUludGVyYWN0aW9uT3B0aW9uc30gb3B0aW9ucyAtIG9wdGlvbnMgdG8gdXNlIGR1cmluZyBpbnRlcmFjdGlvblxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHRpbmRleDogaW5kZXhNb2RlLFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBpdGVtcyBpbiB0aGUgc2FtZSBkYXRhc2V0LiBJZiB0aGUgb3B0aW9ucy5pbnRlcnNlY3QgcGFyYW1ldGVyIGlzIHRydWUsIHdlIG9ubHkgcmV0dXJuIGl0ZW1zIGlmIHdlIGludGVyc2VjdCBzb21ldGhpbmdcblx0XHQgKiBJZiB0aGUgb3B0aW9ucy5pbnRlcnNlY3QgaXMgZmFsc2UsIHdlIGZpbmQgdGhlIG5lYXJlc3QgaXRlbSBhbmQgcmV0dXJuIHRoZSBpdGVtcyBpbiB0aGF0IGRhdGFzZXRcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMuZGF0YXNldFxuXHRcdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSB7RXZlbnR9IGUgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIC0gb3B0aW9ucyB0byB1c2UgZHVyaW5nIGludGVyYWN0aW9uXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdGRhdGFzZXQ6IGZ1bmN0aW9uKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcblx0XHRcdG9wdGlvbnMuYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuXHRcdFx0dmFyIGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKG9wdGlvbnMuYXhpcyk7XG5cdFx0XHR2YXIgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdCA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbikgOiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBmYWxzZSwgZGlzdGFuY2VNZXRyaWMpO1xuXG5cdFx0XHRpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRpdGVtcyA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGl0ZW1zWzBdLl9kYXRhc2V0SW5kZXgpLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpdGVtcztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLngtYXhpc1xuXHRcdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi40LjAuIFVzZSBpbmRleCBtb2RlIGFuZCBpbnRlcnNlY3QgPT0gdHJ1ZVxuXHRcdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdCd4LWF4aXMnOiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdFx0cmV0dXJuIGluZGV4TW9kZShjaGFydCwgZSwge2ludGVyc2VjdDogZmFsc2V9KTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUG9pbnQgbW9kZSByZXR1cm5zIGFsbCBlbGVtZW50cyB0aGF0IGhpdCB0ZXN0IGJhc2VkIG9uIHRoZSBldmVudCBwb3NpdGlvblxuXHRcdCAqIG9mIHRoZSBldmVudFxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5pbnRlcnNlY3Rcblx0XHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0ge0V2ZW50fSBlIC0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHRwb2ludDogZnVuY3Rpb24oY2hhcnQsIGUpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0cmV0dXJuIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIG5lYXJlc3QgbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50IGNsb3Nlc3QgdG8gdGhlIHBvaW50XG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmludGVyc2VjdFxuXHRcdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSB7RXZlbnR9IGUgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIC0gb3B0aW9ucyB0byB1c2Vcblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0bmVhcmVzdDogZnVuY3Rpb24oY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0b3B0aW9ucy5heGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG5cdFx0XHR2YXIgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMob3B0aW9ucy5heGlzKTtcblx0XHRcdHJldHVybiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBvcHRpb25zLmludGVyc2VjdCwgZGlzdGFuY2VNZXRyaWMpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiB4IG1vZGUgcmV0dXJucyB0aGUgZWxlbWVudHMgdGhhdCBoaXQtdGVzdCBhdCB0aGUgY3VycmVudCB4IGNvb3JkaW5hdGVcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMueFxuXHRcdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSB7RXZlbnR9IGUgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIC0gb3B0aW9ucyB0byB1c2Vcblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0eDogZnVuY3Rpb24oY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0dmFyIGl0ZW1zID0gW107XG5cdFx0XHR2YXIgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcblxuXHRcdFx0cGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5YUmFuZ2UocG9zaXRpb24ueCkpIHtcblx0XHRcdFx0XHRpdGVtcy5wdXNoKGVsZW1lbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGludGVyc2VjdHNJdGVtID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIElmIHdlIHdhbnQgdG8gdHJpZ2dlciBvbiBhbiBpbnRlcnNlY3QgYW5kIHdlIGRvbid0IGhhdmUgYW55IGl0ZW1zXG5cdFx0XHQvLyB0aGF0IGludGVyc2VjdCB0aGUgcG9zaXRpb24sIHJldHVybiBub3RoaW5nXG5cdFx0XHRpZiAob3B0aW9ucy5pbnRlcnNlY3QgJiYgIWludGVyc2VjdHNJdGVtKSB7XG5cdFx0XHRcdGl0ZW1zID0gW107XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIHkgbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50cyB0aGF0IGhpdC10ZXN0IGF0IHRoZSBjdXJyZW50IHkgY29vcmRpbmF0ZVxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy55XG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIHtFdmVudH0gZSAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0ge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBvcHRpb25zIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHR5OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHRcdHZhciBpbnRlcnNlY3RzSXRlbSA9IGZhbHNlO1xuXG5cdFx0XHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0XHRpZiAoZWxlbWVudC5pbllSYW5nZShwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGl0ZW1zLnB1c2goZWxlbWVudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRcdFx0aW50ZXJzZWN0c0l0ZW0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSWYgd2Ugd2FudCB0byB0cmlnZ2VyIG9uIGFuIGludGVyc2VjdCBhbmQgd2UgZG9uJ3QgaGF2ZSBhbnkgaXRlbXNcblx0XHRcdC8vIHRoYXQgaW50ZXJzZWN0IHRoZSBwb3NpdGlvbiwgcmV0dXJuIG5vdGhpbmdcblx0XHRcdGlmIChvcHRpb25zLmludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcblx0XHRcdFx0aXRlbXMgPSBbXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBpdGVtcztcblx0XHR9XG5cdH1cbn07XG5cbnZhciBleHRlbmQgPSBoZWxwZXJzJDEuZXh0ZW5kO1xuXG5mdW5jdGlvbiBmaWx0ZXJCeVBvc2l0aW9uKGFycmF5LCBwb3NpdGlvbikge1xuXHRyZXR1cm4gaGVscGVycyQxLndoZXJlKGFycmF5LCBmdW5jdGlvbih2KSB7XG5cdFx0cmV0dXJuIHYucG9zID09PSBwb3NpdGlvbjtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRCeVdlaWdodChhcnJheSwgcmV2ZXJzZSkge1xuXHRyZXR1cm4gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0dmFyIHYwID0gcmV2ZXJzZSA/IGIgOiBhO1xuXHRcdHZhciB2MSA9IHJldmVyc2UgPyBhIDogYjtcblx0XHRyZXR1cm4gdjAud2VpZ2h0ID09PSB2MS53ZWlnaHQgP1xuXHRcdFx0djAuaW5kZXggLSB2MS5pbmRleCA6XG5cdFx0XHR2MC53ZWlnaHQgLSB2MS53ZWlnaHQ7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiB3cmFwQm94ZXMoYm94ZXMpIHtcblx0dmFyIGxheW91dEJveGVzID0gW107XG5cdHZhciBpLCBpbGVuLCBib3g7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IChib3hlcyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0Ym94ID0gYm94ZXNbaV07XG5cdFx0bGF5b3V0Qm94ZXMucHVzaCh7XG5cdFx0XHRpbmRleDogaSxcblx0XHRcdGJveDogYm94LFxuXHRcdFx0cG9zOiBib3gucG9zaXRpb24sXG5cdFx0XHRob3Jpem9udGFsOiBib3guaXNIb3Jpem9udGFsKCksXG5cdFx0XHR3ZWlnaHQ6IGJveC53ZWlnaHRcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gbGF5b3V0Qm94ZXM7XG59XG5cbmZ1bmN0aW9uIHNldExheW91dERpbXMobGF5b3V0cywgcGFyYW1zKSB7XG5cdHZhciBpLCBpbGVuLCBsYXlvdXQ7XG5cdGZvciAoaSA9IDAsIGlsZW4gPSBsYXlvdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGxheW91dCA9IGxheW91dHNbaV07XG5cdFx0Ly8gc3RvcmUgd2lkdGggdXNlZCBpbnN0ZWFkIG9mIGNoYXJ0QXJlYS53IGluIGZpdEJveGVzXG5cdFx0bGF5b3V0LndpZHRoID0gbGF5b3V0Lmhvcml6b250YWxcblx0XHRcdD8gbGF5b3V0LmJveC5mdWxsV2lkdGggJiYgcGFyYW1zLmF2YWlsYWJsZVdpZHRoXG5cdFx0XHQ6IHBhcmFtcy52Qm94TWF4V2lkdGg7XG5cdFx0Ly8gc3RvcmUgaGVpZ2h0IHVzZWQgaW5zdGVhZCBvZiBjaGFydEFyZWEuaCBpbiBmaXRCb3hlc1xuXHRcdGxheW91dC5oZWlnaHQgPSBsYXlvdXQuaG9yaXpvbnRhbCAmJiBwYXJhbXMuaEJveE1heEhlaWdodDtcblx0fVxufVxuXG5mdW5jdGlvbiBidWlsZExheW91dEJveGVzKGJveGVzKSB7XG5cdHZhciBsYXlvdXRCb3hlcyA9IHdyYXBCb3hlcyhib3hlcyk7XG5cdHZhciBsZWZ0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdsZWZ0JyksIHRydWUpO1xuXHR2YXIgcmlnaHQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3JpZ2h0JykpO1xuXHR2YXIgdG9wID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICd0b3AnKSwgdHJ1ZSk7XG5cdHZhciBib3R0b20gPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2JvdHRvbScpKTtcblxuXHRyZXR1cm4ge1xuXHRcdGxlZnRBbmRUb3A6IGxlZnQuY29uY2F0KHRvcCksXG5cdFx0cmlnaHRBbmRCb3R0b206IHJpZ2h0LmNvbmNhdChib3R0b20pLFxuXHRcdGNoYXJ0QXJlYTogZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2NoYXJ0QXJlYScpLFxuXHRcdHZlcnRpY2FsOiBsZWZ0LmNvbmNhdChyaWdodCksXG5cdFx0aG9yaXpvbnRhbDogdG9wLmNvbmNhdChib3R0b20pXG5cdH07XG59XG5cbmZ1bmN0aW9uIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgYSwgYikge1xuXHRyZXR1cm4gTWF0aC5tYXgobWF4UGFkZGluZ1thXSwgY2hhcnRBcmVhW2FdKSArIE1hdGgubWF4KG1heFBhZGRpbmdbYl0sIGNoYXJ0QXJlYVtiXSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCkge1xuXHR2YXIgYm94ID0gbGF5b3V0LmJveDtcblx0dmFyIG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcblx0dmFyIG5ld1dpZHRoLCBuZXdIZWlnaHQ7XG5cblx0aWYgKGxheW91dC5zaXplKSB7XG5cdFx0Ly8gdGhpcyBsYXlvdXQgd2FzIGFscmVhZHkgY291bnRlZCBmb3IsIGxldHMgZmlyc3QgcmVkdWNlIG9sZCBzaXplXG5cdFx0Y2hhcnRBcmVhW2xheW91dC5wb3NdIC09IGxheW91dC5zaXplO1xuXHR9XG5cdGxheW91dC5zaXplID0gbGF5b3V0Lmhvcml6b250YWwgPyBib3guaGVpZ2h0IDogYm94LndpZHRoO1xuXHRjaGFydEFyZWFbbGF5b3V0LnBvc10gKz0gbGF5b3V0LnNpemU7XG5cblx0aWYgKGJveC5nZXRQYWRkaW5nKSB7XG5cdFx0dmFyIGJveFBhZGRpbmcgPSBib3guZ2V0UGFkZGluZygpO1xuXHRcdG1heFBhZGRpbmcudG9wID0gTWF0aC5tYXgobWF4UGFkZGluZy50b3AsIGJveFBhZGRpbmcudG9wKTtcblx0XHRtYXhQYWRkaW5nLmxlZnQgPSBNYXRoLm1heChtYXhQYWRkaW5nLmxlZnQsIGJveFBhZGRpbmcubGVmdCk7XG5cdFx0bWF4UGFkZGluZy5ib3R0b20gPSBNYXRoLm1heChtYXhQYWRkaW5nLmJvdHRvbSwgYm94UGFkZGluZy5ib3R0b20pO1xuXHRcdG1heFBhZGRpbmcucmlnaHQgPSBNYXRoLm1heChtYXhQYWRkaW5nLnJpZ2h0LCBib3hQYWRkaW5nLnJpZ2h0KTtcblx0fVxuXG5cdG5ld1dpZHRoID0gcGFyYW1zLm91dGVyV2lkdGggLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICdsZWZ0JywgJ3JpZ2h0Jyk7XG5cdG5ld0hlaWdodCA9IHBhcmFtcy5vdXRlckhlaWdodCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ3RvcCcsICdib3R0b20nKTtcblxuXHRpZiAobmV3V2lkdGggIT09IGNoYXJ0QXJlYS53IHx8IG5ld0hlaWdodCAhPT0gY2hhcnRBcmVhLmgpIHtcblx0XHRjaGFydEFyZWEudyA9IG5ld1dpZHRoO1xuXHRcdGNoYXJ0QXJlYS5oID0gbmV3SGVpZ2h0O1xuXG5cdFx0Ly8gcmV0dXJuIHRydWUgaWYgY2hhcnQgYXJlYSBjaGFuZ2VkIGluIGxheW91dCdzIGRpcmVjdGlvblxuXHRcdHJldHVybiBsYXlvdXQuaG9yaXpvbnRhbCA/IG5ld1dpZHRoICE9PSBjaGFydEFyZWEudyA6IG5ld0hlaWdodCAhPT0gY2hhcnRBcmVhLmg7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpIHtcblx0dmFyIG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcblxuXHRmdW5jdGlvbiB1cGRhdGVQb3MocG9zKSB7XG5cdFx0dmFyIGNoYW5nZSA9IE1hdGgubWF4KG1heFBhZGRpbmdbcG9zXSAtIGNoYXJ0QXJlYVtwb3NdLCAwKTtcblx0XHRjaGFydEFyZWFbcG9zXSArPSBjaGFuZ2U7XG5cdFx0cmV0dXJuIGNoYW5nZTtcblx0fVxuXHRjaGFydEFyZWEueSArPSB1cGRhdGVQb3MoJ3RvcCcpO1xuXHRjaGFydEFyZWEueCArPSB1cGRhdGVQb3MoJ2xlZnQnKTtcblx0dXBkYXRlUG9zKCdyaWdodCcpO1xuXHR1cGRhdGVQb3MoJ2JvdHRvbScpO1xufVxuXG5mdW5jdGlvbiBnZXRNYXJnaW5zKGhvcml6b250YWwsIGNoYXJ0QXJlYSkge1xuXHR2YXIgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuXG5cdGZ1bmN0aW9uIG1hcmdpbkZvclBvc2l0aW9ucyhwb3NpdGlvbnMpIHtcblx0XHR2YXIgbWFyZ2luID0ge2xlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMH07XG5cdFx0cG9zaXRpb25zLmZvckVhY2goZnVuY3Rpb24ocG9zKSB7XG5cdFx0XHRtYXJnaW5bcG9zXSA9IE1hdGgubWF4KGNoYXJ0QXJlYVtwb3NdLCBtYXhQYWRkaW5nW3Bvc10pO1xuXHRcdH0pO1xuXHRcdHJldHVybiBtYXJnaW47XG5cdH1cblxuXHRyZXR1cm4gaG9yaXpvbnRhbFxuXHRcdD8gbWFyZ2luRm9yUG9zaXRpb25zKFsnbGVmdCcsICdyaWdodCddKVxuXHRcdDogbWFyZ2luRm9yUG9zaXRpb25zKFsndG9wJywgJ2JvdHRvbSddKTtcbn1cblxuZnVuY3Rpb24gZml0Qm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zKSB7XG5cdHZhciByZWZpdEJveGVzID0gW107XG5cdHZhciBpLCBpbGVuLCBsYXlvdXQsIGJveCwgcmVmaXQsIGNoYW5nZWQ7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGJveGVzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGxheW91dCA9IGJveGVzW2ldO1xuXHRcdGJveCA9IGxheW91dC5ib3g7XG5cblx0XHRib3gudXBkYXRlKFxuXHRcdFx0bGF5b3V0LndpZHRoIHx8IGNoYXJ0QXJlYS53LFxuXHRcdFx0bGF5b3V0LmhlaWdodCB8fCBjaGFydEFyZWEuaCxcblx0XHRcdGdldE1hcmdpbnMobGF5b3V0Lmhvcml6b250YWwsIGNoYXJ0QXJlYSlcblx0XHQpO1xuXHRcdGlmICh1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQpKSB7XG5cdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdGlmIChyZWZpdEJveGVzLmxlbmd0aCkge1xuXHRcdFx0XHQvLyBEaW1lbnNpb25zIGNoYW5nZWQgYW5kIHRoZXJlIHdlcmUgbm9uIGZ1bGwgd2lkdGggYm94ZXMgYmVmb3JlIHRoaXNcblx0XHRcdFx0Ly8gLT4gd2UgaGF2ZSB0byByZWZpdCB0aG9zZVxuXHRcdFx0XHRyZWZpdCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICghYm94LmZ1bGxXaWR0aCkgeyAvLyBmdWxsV2lkdGggYm94ZXMgZG9uJ3QgbmVlZCB0byBiZSByZS1maXR0ZWQgaW4gYW55IGNhc2Vcblx0XHRcdHJlZml0Qm94ZXMucHVzaChsYXlvdXQpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZWZpdCA/IGZpdEJveGVzKHJlZml0Qm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zKSB8fCBjaGFuZ2VkIDogY2hhbmdlZDtcbn1cblxuZnVuY3Rpb24gcGxhY2VCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpIHtcblx0dmFyIHVzZXJQYWRkaW5nID0gcGFyYW1zLnBhZGRpbmc7XG5cdHZhciB4ID0gY2hhcnRBcmVhLng7XG5cdHZhciB5ID0gY2hhcnRBcmVhLnk7XG5cdHZhciBpLCBpbGVuLCBsYXlvdXQsIGJveDtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bGF5b3V0ID0gYm94ZXNbaV07XG5cdFx0Ym94ID0gbGF5b3V0LmJveDtcblx0XHRpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcblx0XHRcdGJveC5sZWZ0ID0gYm94LmZ1bGxXaWR0aCA/IHVzZXJQYWRkaW5nLmxlZnQgOiBjaGFydEFyZWEubGVmdDtcblx0XHRcdGJveC5yaWdodCA9IGJveC5mdWxsV2lkdGggPyBwYXJhbXMub3V0ZXJXaWR0aCAtIHVzZXJQYWRkaW5nLnJpZ2h0IDogY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEudztcblx0XHRcdGJveC50b3AgPSB5O1xuXHRcdFx0Ym94LmJvdHRvbSA9IHkgKyBib3guaGVpZ2h0O1xuXHRcdFx0Ym94LndpZHRoID0gYm94LnJpZ2h0IC0gYm94LmxlZnQ7XG5cdFx0XHR5ID0gYm94LmJvdHRvbTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ym94LmxlZnQgPSB4O1xuXHRcdFx0Ym94LnJpZ2h0ID0geCArIGJveC53aWR0aDtcblx0XHRcdGJveC50b3AgPSBjaGFydEFyZWEudG9wO1xuXHRcdFx0Ym94LmJvdHRvbSA9IGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuaDtcblx0XHRcdGJveC5oZWlnaHQgPSBib3guYm90dG9tIC0gYm94LnRvcDtcblx0XHRcdHggPSBib3gucmlnaHQ7XG5cdFx0fVxuXHR9XG5cblx0Y2hhcnRBcmVhLnggPSB4O1xuXHRjaGFydEFyZWEueSA9IHk7XG59XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRsYXlvdXQ6IHtcblx0XHRwYWRkaW5nOiB7XG5cdFx0XHR0b3A6IDAsXG5cdFx0XHRyaWdodDogMCxcblx0XHRcdGJvdHRvbTogMCxcblx0XHRcdGxlZnQ6IDBcblx0XHR9XG5cdH1cbn0pO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgSUxheW91dEl0ZW1cbiAqIEBwcm9wIHtzdHJpbmd9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIGluIHRoZSBjaGFydCBsYXlvdXQuIFBvc3NpYmxlIHZhbHVlcyBhcmVcbiAqICdsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCBhbmQgJ2NoYXJ0QXJlYSdcbiAqIEBwcm9wIHtudW1iZXJ9IHdlaWdodCAtIFRoZSB3ZWlnaHQgdXNlZCB0byBzb3J0IHRoZSBpdGVtLiBIaWdoZXIgd2VpZ2h0cyBhcmUgZnVydGhlciBhd2F5IGZyb20gdGhlIGNoYXJ0IGFyZWFcbiAqIEBwcm9wIHtib29sZWFufSBmdWxsV2lkdGggLSBpZiB0cnVlLCBhbmQgdGhlIGl0ZW0gaXMgaG9yaXpvbnRhbCwgdGhlbiBwdXNoIHZlcnRpY2FsIGJveGVzIGRvd25cbiAqIEBwcm9wIHtmdW5jdGlvbn0gaXNIb3Jpem9udGFsIC0gcmV0dXJucyB0cnVlIGlmIHRoZSBsYXlvdXQgaXRlbSBpcyBob3Jpem9udGFsIChpZS4gdG9wIG9yIGJvdHRvbSlcbiAqIEBwcm9wIHtmdW5jdGlvbn0gdXBkYXRlIC0gVGFrZXMgdHdvIHBhcmFtZXRlcnM6IHdpZHRoIGFuZCBoZWlnaHQuIFJldHVybnMgc2l6ZSBvZiBpdGVtXG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdldFBhZGRpbmcgLSAgUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBwYWRkaW5nIG9uIHRoZSBlZGdlc1xuICogQHByb3Age251bWJlcn0gd2lkdGggLSBXaWR0aCBvZiBpdGVtLiBNdXN0IGJlIHZhbGlkIGFmdGVyIHVwZGF0ZSgpXG4gKiBAcHJvcCB7bnVtYmVyfSBoZWlnaHQgLSBIZWlnaHQgb2YgaXRlbS4gTXVzdCBiZSB2YWxpZCBhZnRlciB1cGRhdGUoKVxuICogQHByb3Age251bWJlcn0gbGVmdCAtIExlZnQgZWRnZSBvZiB0aGUgaXRlbS4gU2V0IGJ5IGxheW91dCBzeXN0ZW0gYW5kIGNhbm5vdCBiZSB1c2VkIGluIHVwZGF0ZVxuICogQHByb3Age251bWJlcn0gdG9wIC0gVG9wIGVkZ2Ugb2YgdGhlIGl0ZW0uIFNldCBieSBsYXlvdXQgc3lzdGVtIGFuZCBjYW5ub3QgYmUgdXNlZCBpbiB1cGRhdGVcbiAqIEBwcm9wIHtudW1iZXJ9IHJpZ2h0IC0gUmlnaHQgZWRnZSBvZiB0aGUgaXRlbS4gU2V0IGJ5IGxheW91dCBzeXN0ZW0gYW5kIGNhbm5vdCBiZSB1c2VkIGluIHVwZGF0ZVxuICogQHByb3Age251bWJlcn0gYm90dG9tIC0gQm90dG9tIGVkZ2Ugb2YgdGhlIGl0ZW0uIFNldCBieSBsYXlvdXQgc3lzdGVtIGFuZCBjYW5ub3QgYmUgdXNlZCBpbiB1cGRhdGVcbiAqL1xuXG4vLyBUaGUgbGF5b3V0IHNlcnZpY2UgaXMgdmVyeSBzZWxmIGV4cGxhbmF0b3J5LiAgSXQncyByZXNwb25zaWJsZSBmb3IgdGhlIGxheW91dCB3aXRoaW4gYSBjaGFydC5cbi8vIFNjYWxlcywgTGVnZW5kcyBhbmQgUGx1Z2lucyBhbGwgcmVseSBvbiB0aGUgbGF5b3V0IHNlcnZpY2UgYW5kIGNhbiBlYXNpbHkgcmVnaXN0ZXIgdG8gYmUgcGxhY2VkIGFueXdoZXJlIHRoZXkgbmVlZFxuLy8gSXQgaXMgdGhpcyBzZXJ2aWNlJ3MgcmVzcG9uc2liaWxpdHkgb2YgY2Fycnlpbmcgb3V0IHRoYXQgbGF5b3V0LlxudmFyIGNvcmVfbGF5b3V0cyA9IHtcblx0ZGVmYXVsdHM6IHt9LFxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBhIGJveCB0byBhIGNoYXJ0LlxuXHQgKiBBIGJveCBpcyBzaW1wbHkgYSByZWZlcmVuY2UgdG8gYW4gb2JqZWN0IHRoYXQgcmVxdWlyZXMgbGF5b3V0LiBlZy4gU2NhbGVzLCBMZWdlbmQsIFRpdGxlLlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB0byB1c2Vcblx0ICogQHBhcmFtIHtJTGF5b3V0SXRlbX0gaXRlbSAtIHRoZSBpdGVtIHRvIGFkZCB0byBiZSBsYXllZCBvdXRcblx0ICovXG5cdGFkZEJveDogZnVuY3Rpb24oY2hhcnQsIGl0ZW0pIHtcblx0XHRpZiAoIWNoYXJ0LmJveGVzKSB7XG5cdFx0XHRjaGFydC5ib3hlcyA9IFtdO1xuXHRcdH1cblxuXHRcdC8vIGluaXRpYWxpemUgaXRlbSB3aXRoIGRlZmF1bHQgdmFsdWVzXG5cdFx0aXRlbS5mdWxsV2lkdGggPSBpdGVtLmZ1bGxXaWR0aCB8fCBmYWxzZTtcblx0XHRpdGVtLnBvc2l0aW9uID0gaXRlbS5wb3NpdGlvbiB8fCAndG9wJztcblx0XHRpdGVtLndlaWdodCA9IGl0ZW0ud2VpZ2h0IHx8IDA7XG5cdFx0aXRlbS5fbGF5ZXJzID0gaXRlbS5fbGF5ZXJzIHx8IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFt7XG5cdFx0XHRcdHo6IDAsXG5cdFx0XHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uZHJhdy5hcHBseShpdGVtLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XTtcblx0XHR9O1xuXG5cdFx0Y2hhcnQuYm94ZXMucHVzaChpdGVtKTtcblx0fSxcblxuXHQvKipcblx0ICogUmVtb3ZlIGEgbGF5b3V0SXRlbSBmcm9tIGEgY2hhcnRcblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgdG8gcmVtb3ZlIHRoZSBib3ggZnJvbVxuXHQgKiBAcGFyYW0ge0lMYXlvdXRJdGVtfSBsYXlvdXRJdGVtIC0gdGhlIGl0ZW0gdG8gcmVtb3ZlIGZyb20gdGhlIGxheW91dFxuXHQgKi9cblx0cmVtb3ZlQm94OiBmdW5jdGlvbihjaGFydCwgbGF5b3V0SXRlbSkge1xuXHRcdHZhciBpbmRleCA9IGNoYXJ0LmJveGVzID8gY2hhcnQuYm94ZXMuaW5kZXhPZihsYXlvdXRJdGVtKSA6IC0xO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdGNoYXJ0LmJveGVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXRzIChvciB1cGRhdGVzKSBvcHRpb25zIG9uIHRoZSBnaXZlbiBgaXRlbWAuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IGluIHdoaWNoIHRoZSBpdGVtIGxpdmVzIChvciB3aWxsIGJlIGFkZGVkIHRvKVxuXHQgKiBAcGFyYW0ge0lMYXlvdXRJdGVtfSBpdGVtIC0gdGhlIGl0ZW0gdG8gY29uZmlndXJlIHdpdGggdGhlIGdpdmVuIG9wdGlvbnNcblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSB0aGUgbmV3IGl0ZW0gb3B0aW9ucy5cblx0ICovXG5cdGNvbmZpZ3VyZTogZnVuY3Rpb24oY2hhcnQsIGl0ZW0sIG9wdGlvbnMpIHtcblx0XHR2YXIgcHJvcHMgPSBbJ2Z1bGxXaWR0aCcsICdwb3NpdGlvbicsICd3ZWlnaHQnXTtcblx0XHR2YXIgaWxlbiA9IHByb3BzLmxlbmd0aDtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIHByb3A7XG5cblx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0cHJvcCA9IHByb3BzW2ldO1xuXHRcdFx0aWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblx0XHRcdFx0aXRlbVtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBGaXRzIGJveGVzIG9mIHRoZSBnaXZlbiBjaGFydCBpbnRvIHRoZSBnaXZlbiBzaXplIGJ5IGhhdmluZyBlYWNoIGJveCBtZWFzdXJlIGl0c2VsZlxuXHQgKiB0aGVuIHJ1bm5pbmcgYSBmaXR0aW5nIGFsZ29yaXRobVxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydFxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSB0aGUgd2lkdGggdG8gZml0IGludG9cblx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIHRoZSBoZWlnaHQgdG8gZml0IGludG9cblx0ICovXG5cdHVwZGF0ZTogZnVuY3Rpb24oY2hhcnQsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRpZiAoIWNoYXJ0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGxheW91dE9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmxheW91dCB8fCB7fTtcblx0XHR2YXIgcGFkZGluZyA9IGhlbHBlcnMkMS5vcHRpb25zLnRvUGFkZGluZyhsYXlvdXRPcHRpb25zLnBhZGRpbmcpO1xuXG5cdFx0dmFyIGF2YWlsYWJsZVdpZHRoID0gd2lkdGggLSBwYWRkaW5nLndpZHRoO1xuXHRcdHZhciBhdmFpbGFibGVIZWlnaHQgPSBoZWlnaHQgLSBwYWRkaW5nLmhlaWdodDtcblx0XHR2YXIgYm94ZXMgPSBidWlsZExheW91dEJveGVzKGNoYXJ0LmJveGVzKTtcblx0XHR2YXIgdmVydGljYWxCb3hlcyA9IGJveGVzLnZlcnRpY2FsO1xuXHRcdHZhciBob3Jpem9udGFsQm94ZXMgPSBib3hlcy5ob3Jpem9udGFsO1xuXG5cdFx0Ly8gRXNzZW50aWFsbHkgd2Ugbm93IGhhdmUgYW55IG51bWJlciBvZiBib3hlcyBvbiBlYWNoIG9mIHRoZSA0IHNpZGVzLlxuXHRcdC8vIE91ciBjYW52YXMgbG9va3MgbGlrZSB0aGUgZm9sbG93aW5nLlxuXHRcdC8vIFRoZSBhcmVhcyBMMSBhbmQgTDIgYXJlIHRoZSBsZWZ0IGF4ZXMuIFIxIGlzIHRoZSByaWdodCBheGlzLCBUMSBpcyB0aGUgdG9wIGF4aXMgYW5kXG5cdFx0Ly8gQjEgaXMgdGhlIGJvdHRvbSBheGlzXG5cdFx0Ly8gVGhlcmUgYXJlIGFsc28gNCBxdWFkcmFudC1saWtlIGxvY2F0aW9ucyAobGVmdCB0byByaWdodCBpbnN0ZWFkIG9mIGNsb2Nrd2lzZSkgcmVzZXJ2ZWQgZm9yIGNoYXJ0IG92ZXJsYXlzXG5cdFx0Ly8gVGhlc2UgbG9jYXRpb25zIGFyZSBzaW5nbGUtYm94IGxvY2F0aW9ucyBvbmx5LCB3aGVuIHRyeWluZyB0byByZWdpc3RlciBhIGNoYXJ0QXJlYSBsb2NhdGlvbiB0aGF0IGlzIGFscmVhZHkgdGFrZW4sXG5cdFx0Ly8gYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG5cdFx0Ly9cblx0XHQvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcblx0XHQvLyB8ICAgICAgICAgICAgICAgICAgVDEgKEZ1bGwgV2lkdGgpICAgICAgICAgICAgICAgICAgIHxcblx0XHQvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcblx0XHQvLyB8ICAgIHwgICAgfCAgICAgICAgICAgICAgICAgVDIgICAgICAgICAgICAgICAgICB8ICAgIHxcblx0XHQvLyB8ICAgIHwtLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLXxcblx0XHQvLyB8ICAgIHwgICAgfCBDMSB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBDMiB8ICAgIHxcblx0XHQvLyB8ICAgIHwgICAgfC0tLS18ICAgICAgICAgICAgICAgICAgICAgICAgICAgfC0tLS18ICAgIHxcblx0XHQvLyB8ICAgIHwgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgIHxcblx0XHQvLyB8IEwxIHwgTDIgfCAgICAgICAgICAgQ2hhcnRBcmVhIChDMCkgICAgICAgICAgICB8IFIxIHxcblx0XHQvLyB8ICAgIHwgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgIHxcblx0XHQvLyB8ICAgIHwgICAgfC0tLS18ICAgICAgICAgICAgICAgICAgICAgICAgICAgfC0tLS18ICAgIHxcblx0XHQvLyB8ICAgIHwgICAgfCBDMyB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBDNCB8ICAgIHxcblx0XHQvLyB8ICAgIHwtLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLXxcblx0XHQvLyB8ICAgIHwgICAgfCAgICAgICAgICAgICAgICAgQjEgICAgICAgICAgICAgICAgICB8ICAgIHxcblx0XHQvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcblx0XHQvLyB8ICAgICAgICAgICAgICAgICAgQjIgKEZ1bGwgV2lkdGgpICAgICAgICAgICAgICAgICAgIHxcblx0XHQvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcblx0XHQvL1xuXG5cdFx0dmFyIHBhcmFtcyA9IE9iamVjdC5mcmVlemUoe1xuXHRcdFx0b3V0ZXJXaWR0aDogd2lkdGgsXG5cdFx0XHRvdXRlckhlaWdodDogaGVpZ2h0LFxuXHRcdFx0cGFkZGluZzogcGFkZGluZyxcblx0XHRcdGF2YWlsYWJsZVdpZHRoOiBhdmFpbGFibGVXaWR0aCxcblx0XHRcdHZCb3hNYXhXaWR0aDogYXZhaWxhYmxlV2lkdGggLyAyIC8gdmVydGljYWxCb3hlcy5sZW5ndGgsXG5cdFx0XHRoQm94TWF4SGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQgLyAyXG5cdFx0fSk7XG5cdFx0dmFyIGNoYXJ0QXJlYSA9IGV4dGVuZCh7XG5cdFx0XHRtYXhQYWRkaW5nOiBleHRlbmQoe30sIHBhZGRpbmcpLFxuXHRcdFx0dzogYXZhaWxhYmxlV2lkdGgsXG5cdFx0XHRoOiBhdmFpbGFibGVIZWlnaHQsXG5cdFx0XHR4OiBwYWRkaW5nLmxlZnQsXG5cdFx0XHR5OiBwYWRkaW5nLnRvcFxuXHRcdH0sIHBhZGRpbmcpO1xuXG5cdFx0c2V0TGF5b3V0RGltcyh2ZXJ0aWNhbEJveGVzLmNvbmNhdChob3Jpem9udGFsQm94ZXMpLCBwYXJhbXMpO1xuXG5cdFx0Ly8gRmlyc3QgZml0IHZlcnRpY2FsIGJveGVzXG5cdFx0Zml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpO1xuXG5cdFx0Ly8gVGhlbiBmaXQgaG9yaXpvbnRhbCBib3hlc1xuXHRcdGlmIChmaXRCb3hlcyhob3Jpem9udGFsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zKSkge1xuXHRcdFx0Ly8gaWYgdGhlIGFyZWEgY2hhbmdlZCwgcmUtZml0IHZlcnRpY2FsIGJveGVzXG5cdFx0XHRmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcyk7XG5cdFx0fVxuXG5cdFx0aGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpO1xuXG5cdFx0Ly8gRmluYWxseSBwbGFjZSB0aGUgYm94ZXMgdG8gY29ycmVjdCBjb29yZGluYXRlc1xuXHRcdHBsYWNlQm94ZXMoYm94ZXMubGVmdEFuZFRvcCwgY2hhcnRBcmVhLCBwYXJhbXMpO1xuXG5cdFx0Ly8gTW92ZSB0byBvcHBvc2l0ZSBzaWRlIG9mIGNoYXJ0XG5cdFx0Y2hhcnRBcmVhLnggKz0gY2hhcnRBcmVhLnc7XG5cdFx0Y2hhcnRBcmVhLnkgKz0gY2hhcnRBcmVhLmg7XG5cblx0XHRwbGFjZUJveGVzKGJveGVzLnJpZ2h0QW5kQm90dG9tLCBjaGFydEFyZWEsIHBhcmFtcyk7XG5cblx0XHRjaGFydC5jaGFydEFyZWEgPSB7XG5cdFx0XHRsZWZ0OiBjaGFydEFyZWEubGVmdCxcblx0XHRcdHRvcDogY2hhcnRBcmVhLnRvcCxcblx0XHRcdHJpZ2h0OiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53LFxuXHRcdFx0Ym90dG9tOiBjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmhcblx0XHR9O1xuXG5cdFx0Ly8gRmluYWxseSB1cGRhdGUgYm94ZXMgaW4gY2hhcnRBcmVhIChyYWRpYWwgc2NhbGUgZm9yIGV4YW1wbGUpXG5cdFx0aGVscGVycyQxLmVhY2goYm94ZXMuY2hhcnRBcmVhLCBmdW5jdGlvbihsYXlvdXQpIHtcblx0XHRcdHZhciBib3ggPSBsYXlvdXQuYm94O1xuXHRcdFx0ZXh0ZW5kKGJveCwgY2hhcnQuY2hhcnRBcmVhKTtcblx0XHRcdGJveC51cGRhdGUoY2hhcnRBcmVhLncsIGNoYXJ0QXJlYS5oKTtcblx0XHR9KTtcblx0fVxufTtcblxuLyoqXG4gKiBQbGF0Zm9ybSBmYWxsYmFjayBpbXBsZW1lbnRhdGlvbiAobWluaW1hbCkuXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvNDU5MSNpc3N1ZWNvbW1lbnQtMzE5NTc1OTM5XG4gKi9cblxudmFyIHBsYXRmb3JtX2Jhc2ljID0ge1xuXHRhY3F1aXJlQ29udGV4dDogZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmIChpdGVtICYmIGl0ZW0uY2FudmFzKSB7XG5cdFx0XHQvLyBTdXBwb3J0IGZvciBhbnkgb2JqZWN0IGFzc29jaWF0ZWQgdG8gYSBjYW52YXMgKGluY2x1ZGluZyBhIGNvbnRleHQyZClcblx0XHRcdGl0ZW0gPSBpdGVtLmNhbnZhcztcblx0XHR9XG5cblx0XHRyZXR1cm4gaXRlbSAmJiBpdGVtLmdldENvbnRleHQoJzJkJykgfHwgbnVsbDtcblx0fVxufTtcblxudmFyIHBsYXRmb3JtX2RvbSA9IFwiLypcXG4gKiBET00gZWxlbWVudCByZW5kZXJpbmcgZGV0ZWN0aW9uXFxuICogaHR0cHM6Ly9kYXZpZHdhbHNoLm5hbWUvZGV0ZWN0LW5vZGUtaW5zZXJ0aW9uXFxuICovXFxuQGtleWZyYW1lcyBjaGFydGpzLXJlbmRlci1hbmltYXRpb24ge1xcblxcdGZyb20geyBvcGFjaXR5OiAwLjk5OyB9XFxuXFx0dG8geyBvcGFjaXR5OiAxOyB9XFxufVxcblxcbi5jaGFydGpzLXJlbmRlci1tb25pdG9yIHtcXG5cXHRhbmltYXRpb246IGNoYXJ0anMtcmVuZGVyLWFuaW1hdGlvbiAwLjAwMXM7XFxufVxcblxcbi8qXFxuICogRE9NIGVsZW1lbnQgcmVzaXppbmcgZGV0ZWN0aW9uXFxuICogaHR0cHM6Ly9naXRodWIuY29tL21hcmNqL2Nzcy1lbGVtZW50LXF1ZXJpZXNcXG4gKi9cXG4uY2hhcnRqcy1zaXplLW1vbml0b3IsXFxuLmNoYXJ0anMtc2l6ZS1tb25pdG9yLWV4cGFuZCxcXG4uY2hhcnRqcy1zaXplLW1vbml0b3Itc2hyaW5rIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0ZGlyZWN0aW9uOiBsdHI7XFxuXFx0bGVmdDogMDtcXG5cXHR0b3A6IDA7XFxuXFx0cmlnaHQ6IDA7XFxuXFx0Ym90dG9tOiAwO1xcblxcdG92ZXJmbG93OiBoaWRkZW47XFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxuXFx0dmlzaWJpbGl0eTogaGlkZGVuO1xcblxcdHotaW5kZXg6IC0xO1xcbn1cXG5cXG4uY2hhcnRqcy1zaXplLW1vbml0b3ItZXhwYW5kID4gZGl2IHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0d2lkdGg6IDEwMDAwMDBweDtcXG5cXHRoZWlnaHQ6IDEwMDAwMDBweDtcXG5cXHRsZWZ0OiAwO1xcblxcdHRvcDogMDtcXG59XFxuXFxuLmNoYXJ0anMtc2l6ZS1tb25pdG9yLXNocmluayA+IGRpdiB7XFxuXFx0cG9zaXRpb246IGFic29sdXRlO1xcblxcdHdpZHRoOiAyMDAlO1xcblxcdGhlaWdodDogMjAwJTtcXG5cXHRsZWZ0OiAwO1xcblxcdHRvcDogMDtcXG59XFxuXCI7XG5cbnZhciBwbGF0Zm9ybV9kb20kMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbidkZWZhdWx0JzogcGxhdGZvcm1fZG9tXG59KTtcblxudmFyIHN0eWxlc2hlZXQgPSBnZXRDanNFeHBvcnRGcm9tTmFtZXNwYWNlKHBsYXRmb3JtX2RvbSQxKTtcblxudmFyIEVYUEFORE9fS0VZID0gJyRjaGFydGpzJztcbnZhciBDU1NfUFJFRklYID0gJ2NoYXJ0anMtJztcbnZhciBDU1NfU0laRV9NT05JVE9SID0gQ1NTX1BSRUZJWCArICdzaXplLW1vbml0b3InO1xudmFyIENTU19SRU5ERVJfTU9OSVRPUiA9IENTU19QUkVGSVggKyAncmVuZGVyLW1vbml0b3InO1xudmFyIENTU19SRU5ERVJfQU5JTUFUSU9OID0gQ1NTX1BSRUZJWCArICdyZW5kZXItYW5pbWF0aW9uJztcbnZhciBBTklNQVRJT05fU1RBUlRfRVZFTlRTID0gWydhbmltYXRpb25zdGFydCcsICd3ZWJraXRBbmltYXRpb25TdGFydCddO1xuXG4vKipcbiAqIERPTSBldmVudCB0eXBlcyAtPiBDaGFydC5qcyBldmVudCB0eXBlcy5cbiAqIE5vdGU6IG9ubHkgZXZlbnRzIHdpdGggZGlmZmVyZW50IHR5cGVzIGFyZSBtYXBwZWQuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50c1xuICovXG52YXIgRVZFTlRfVFlQRVMgPSB7XG5cdHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuXHR0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuXHR0b3VjaGVuZDogJ21vdXNldXAnLFxuXHRwb2ludGVyZW50ZXI6ICdtb3VzZWVudGVyJyxcblx0cG9pbnRlcmRvd246ICdtb3VzZWRvd24nLFxuXHRwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG5cdHBvaW50ZXJ1cDogJ21vdXNldXAnLFxuXHRwb2ludGVybGVhdmU6ICdtb3VzZW91dCcsXG5cdHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5cbi8qKlxuICogVGhlIFwidXNlZFwiIHNpemUgaXMgdGhlIGZpbmFsIHZhbHVlIG9mIGEgZGltZW5zaW9uIHByb3BlcnR5IGFmdGVyIGFsbCBjYWxjdWxhdGlvbnMgaGF2ZVxuICogYmVlbiBwZXJmb3JtZWQuIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGNvbXB1dGVkIHN0eWxlIG9mIGBlbGVtZW50YCBidXQgcmV0dXJucyB1bmRlZmluZWRcbiAqIGlmIHRoZSBjb21wdXRlZCBzdHlsZSBpcyBub3QgZXhwcmVzc2VkIGluIHBpeGVscy4gVGhhdCBjYW4gaGFwcGVuIGluIHNvbWUgY2FzZXMgd2hlcmVcbiAqIGBlbGVtZW50YCBoYXMgYSBzaXplIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgYW5kIHRoaXMgbGFzdCBvbmUgaXMgbm90IHlldCBkaXNwbGF5ZWQsXG4gKiBmb3IgZXhhbXBsZSBiZWNhdXNlIG9mIGBkaXNwbGF5OiBub25lYCBvbiBhIHBhcmVudCBub2RlLlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdXNlZF92YWx1ZVxuICogQHJldHVybnMge251bWJlcn0gU2l6ZSBpbiBwaXhlbHMgb3IgdW5kZWZpbmVkIGlmIHVua25vd24uXG4gKi9cbmZ1bmN0aW9uIHJlYWRVc2VkU2l6ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuXHR2YXIgdmFsdWUgPSBoZWxwZXJzJDEuZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHkpO1xuXHR2YXIgbWF0Y2hlcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKC9eKFxcZCspKFxcLlxcZCspP3B4JC8pO1xuXHRyZXR1cm4gbWF0Y2hlcyA/IE51bWJlcihtYXRjaGVzWzFdKSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgY2FudmFzIHN0eWxlIGFuZCByZW5kZXIgc2l6ZSB3aXRob3V0IG1vZGlmeWluZyB0aGUgY2FudmFzIGRpc3BsYXkgc2l6ZSxcbiAqIHNpbmNlIHJlc3BvbnNpdmVuZXNzIGlzIGhhbmRsZWQgYnkgdGhlIGNvbnRyb2xsZXIucmVzaXplKCkgbWV0aG9kLiBUaGUgY29uZmlnIGlzIHVzZWRcbiAqIHRvIGRldGVybWluZSB0aGUgYXNwZWN0IHJhdGlvIHRvIGFwcGx5IGluIGNhc2Ugbm8gZXhwbGljaXQgaGVpZ2h0IGhhcyBiZWVuIHNwZWNpZmllZC5cbiAqL1xuZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGNvbmZpZykge1xuXHR2YXIgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG5cblx0Ly8gTk9URShTQikgY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSAhPT0gY2FudmFzLndpZHRoOiBpbiB0aGUgZmlyc3QgY2FzZSBpdFxuXHQvLyByZXR1cm5zIG51bGwgb3IgJycgaWYgbm8gZXhwbGljaXQgdmFsdWUgaGFzIGJlZW4gc2V0IHRvIHRoZSBjYW52YXMgYXR0cmlidXRlLlxuXHR2YXIgcmVuZGVySGVpZ2h0ID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG5cdHZhciByZW5kZXJXaWR0aCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG5cblx0Ly8gQ2hhcnQuanMgbW9kaWZpZXMgc29tZSBjYW52YXMgdmFsdWVzIHRoYXQgd2Ugd2FudCB0byByZXN0b3JlIG9uIGRlc3Ryb3lcblx0Y2FudmFzW0VYUEFORE9fS0VZXSA9IHtcblx0XHRpbml0aWFsOiB7XG5cdFx0XHRoZWlnaHQ6IHJlbmRlckhlaWdodCxcblx0XHRcdHdpZHRoOiByZW5kZXJXaWR0aCxcblx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdGRpc3BsYXk6IHN0eWxlLmRpc3BsYXksXG5cdFx0XHRcdGhlaWdodDogc3R5bGUuaGVpZ2h0LFxuXHRcdFx0XHR3aWR0aDogc3R5bGUud2lkdGhcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gRm9yY2UgY2FudmFzIHRvIGRpc3BsYXkgYXMgYmxvY2sgdG8gYXZvaWQgZXh0cmEgc3BhY2UgY2F1c2VkIGJ5IGlubGluZVxuXHQvLyBlbGVtZW50cywgd2hpY2ggd291bGQgaW50ZXJmZXJlIHdpdGggdGhlIHJlc3BvbnNpdmUgcmVzaXplIHByb2Nlc3MuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yNTM4XG5cdHN0eWxlLmRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5IHx8ICdibG9jayc7XG5cblx0aWYgKHJlbmRlcldpZHRoID09PSBudWxsIHx8IHJlbmRlcldpZHRoID09PSAnJykge1xuXHRcdHZhciBkaXNwbGF5V2lkdGggPSByZWFkVXNlZFNpemUoY2FudmFzLCAnd2lkdGgnKTtcblx0XHRpZiAoZGlzcGxheVdpZHRoICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNhbnZhcy53aWR0aCA9IGRpc3BsYXlXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRpZiAocmVuZGVySGVpZ2h0ID09PSBudWxsIHx8IHJlbmRlckhlaWdodCA9PT0gJycpIHtcblx0XHRpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcblx0XHRcdC8vIElmIG5vIGV4cGxpY2l0IHJlbmRlciBoZWlnaHQgYW5kIHN0eWxlIGhlaWdodCwgbGV0J3MgYXBwbHkgdGhlIGFzcGVjdCByYXRpbyxcblx0XHRcdC8vIHdoaWNoIG9uZSBjYW4gYmUgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyIGJ1dCBhbHNvIGJ5IGNoYXJ0cyBhcyBkZWZhdWx0IG9wdGlvblxuXHRcdFx0Ly8gKGkuZS4gb3B0aW9ucy5hc3BlY3RSYXRpbykuIElmIG5vdCBzcGVjaWZpZWQsIHVzZSBjYW52YXMgYXNwZWN0IHJhdGlvIG9mIDIuXG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gY2FudmFzLndpZHRoIC8gKGNvbmZpZy5vcHRpb25zLmFzcGVjdFJhdGlvIHx8IDIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZGlzcGxheUhlaWdodCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICdoZWlnaHQnKTtcblx0XHRcdGlmIChkaXNwbGF5V2lkdGggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjYW52YXMuaGVpZ2h0ID0gZGlzcGxheUhlaWdodDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2FudmFzO1xufVxuXG4vKipcbiAqIERldGVjdHMgc3VwcG9ydCBmb3Igb3B0aW9ucyBvYmplY3QgYXJndW1lbnQgaW4gYWRkRXZlbnRMaXN0ZW5lci5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyI1NhZmVseV9kZXRlY3Rpbmdfb3B0aW9uX3N1cHBvcnRcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID0gKGZ1bmN0aW9uKCkge1xuXHR2YXIgc3VwcG9ydHMgPSBmYWxzZTtcblx0dHJ5IHtcblx0XHR2YXIgb3B0aW9ucyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2V0dGVyLXJldHVyblxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3VwcG9ydHMgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlJywgbnVsbCwgb3B0aW9ucyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG5cdH1cblx0cmV0dXJuIHN1cHBvcnRzO1xufSgpKTtcblxuLy8gRGVmYXVsdCBwYXNzaXZlIHRvIHRydWUgYXMgZXhwZWN0ZWQgYnkgQ2hyb21lIGZvciAndG91Y2hzdGFydCcgYW5kICd0b3VjaGVuZCcgZXZlbnRzLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQyODdcbnZhciBldmVudExpc3RlbmVyT3B0aW9ucyA9IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPyB7cGFzc2l2ZTogdHJ1ZX0gOiBmYWxzZTtcblxuZnVuY3Rpb24gYWRkTGlzdGVuZXIobm9kZSwgdHlwZSwgbGlzdGVuZXIpIHtcblx0bm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKG5vZGUsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudCh0eXBlLCBjaGFydCwgeCwgeSwgbmF0aXZlRXZlbnQpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiB0eXBlLFxuXHRcdGNoYXJ0OiBjaGFydCxcblx0XHRuYXRpdmU6IG5hdGl2ZUV2ZW50IHx8IG51bGwsXG5cdFx0eDogeCAhPT0gdW5kZWZpbmVkID8geCA6IG51bGwsXG5cdFx0eTogeSAhPT0gdW5kZWZpbmVkID8geSA6IG51bGwsXG5cdH07XG59XG5cbmZ1bmN0aW9uIGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpIHtcblx0dmFyIHR5cGUgPSBFVkVOVF9UWVBFU1tldmVudC50eXBlXSB8fCBldmVudC50eXBlO1xuXHR2YXIgcG9zID0gaGVscGVycyQxLmdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KTtcblx0cmV0dXJuIGNyZWF0ZUV2ZW50KHR5cGUsIGNoYXJ0LCBwb3MueCwgcG9zLnksIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gdGhyb3R0bGVkKGZuLCB0aGlzQXJnKSB7XG5cdHZhciB0aWNraW5nID0gZmFsc2U7XG5cdHZhciBhcmdzID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdHRoaXNBcmcgPSB0aGlzQXJnIHx8IHRoaXM7XG5cblx0XHRpZiAoIXRpY2tpbmcpIHtcblx0XHRcdHRpY2tpbmcgPSB0cnVlO1xuXHRcdFx0aGVscGVycyQxLnJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aWNraW5nID0gZmFsc2U7XG5cdFx0XHRcdGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEaXYoY2xzKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRlbC5jbGFzc05hbWUgPSBjbHMgfHwgJyc7XG5cdHJldHVybiBlbDtcbn1cblxuLy8gSW1wbGVtZW50YXRpb24gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21hcmNqL2Nzcy1lbGVtZW50LXF1ZXJpZXNcbmZ1bmN0aW9uIGNyZWF0ZVJlc2l6ZXIoaGFuZGxlcikge1xuXHR2YXIgbWF4U2l6ZSA9IDEwMDAwMDA7XG5cblx0Ly8gTk9URShTQikgRG9uJ3QgdXNlIGlubmVySFRNTCBiZWNhdXNlIGl0IGNvdWxkIGJlIGNvbnNpZGVyZWQgdW5zYWZlLlxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTkwMlxuXHR2YXIgcmVzaXplciA9IGNyZWF0ZURpdihDU1NfU0laRV9NT05JVE9SKTtcblx0dmFyIGV4cGFuZCA9IGNyZWF0ZURpdihDU1NfU0laRV9NT05JVE9SICsgJy1leHBhbmQnKTtcblx0dmFyIHNocmluayA9IGNyZWF0ZURpdihDU1NfU0laRV9NT05JVE9SICsgJy1zaHJpbmsnKTtcblxuXHRleHBhbmQuYXBwZW5kQ2hpbGQoY3JlYXRlRGl2KCkpO1xuXHRzaHJpbmsuYXBwZW5kQ2hpbGQoY3JlYXRlRGl2KCkpO1xuXG5cdHJlc2l6ZXIuYXBwZW5kQ2hpbGQoZXhwYW5kKTtcblx0cmVzaXplci5hcHBlbmRDaGlsZChzaHJpbmspO1xuXHRyZXNpemVyLl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuXHRcdGV4cGFuZC5zY3JvbGxMZWZ0ID0gbWF4U2l6ZTtcblx0XHRleHBhbmQuc2Nyb2xsVG9wID0gbWF4U2l6ZTtcblx0XHRzaHJpbmsuc2Nyb2xsTGVmdCA9IG1heFNpemU7XG5cdFx0c2hyaW5rLnNjcm9sbFRvcCA9IG1heFNpemU7XG5cdH07XG5cblx0dmFyIG9uU2Nyb2xsID0gZnVuY3Rpb24oKSB7XG5cdFx0cmVzaXplci5fcmVzZXQoKTtcblx0XHRoYW5kbGVyKCk7XG5cdH07XG5cblx0YWRkTGlzdGVuZXIoZXhwYW5kLCAnc2Nyb2xsJywgb25TY3JvbGwuYmluZChleHBhbmQsICdleHBhbmQnKSk7XG5cdGFkZExpc3RlbmVyKHNocmluaywgJ3Njcm9sbCcsIG9uU2Nyb2xsLmJpbmQoc2hyaW5rLCAnc2hyaW5rJykpO1xuXG5cdHJldHVybiByZXNpemVyO1xufVxuXG4vLyBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9kZXRlY3Qtbm9kZS1pbnNlcnRpb25cbmZ1bmN0aW9uIHdhdGNoRm9yUmVuZGVyKG5vZGUsIGhhbmRsZXIpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCAobm9kZVtFWFBBTkRPX0tFWV0gPSB7fSk7XG5cdHZhciBwcm94eSA9IGV4cGFuZG8ucmVuZGVyUHJveHkgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUuYW5pbWF0aW9uTmFtZSA9PT0gQ1NTX1JFTkRFUl9BTklNQVRJT04pIHtcblx0XHRcdGhhbmRsZXIoKTtcblx0XHR9XG5cdH07XG5cblx0aGVscGVycyQxLmVhY2goQU5JTUFUSU9OX1NUQVJUX0VWRU5UUywgZnVuY3Rpb24odHlwZSkge1xuXHRcdGFkZExpc3RlbmVyKG5vZGUsIHR5cGUsIHByb3h5KTtcblx0fSk7XG5cblx0Ly8gIzQ3Mzc6IENocm9tZSBtaWdodCBza2lwIHRoZSBDU1MgYW5pbWF0aW9uIHdoZW4gdGhlIENTU19SRU5ERVJfTU9OSVRPUiBjbGFzc1xuXHQvLyBpcyByZW1vdmVkIHRoZW4gYWRkZWQgYmFjayBpbW1lZGlhdGVseSAoc2FtZSBhbmltYXRpb24gZnJhbWU/KS4gQWNjZXNzaW5nIHRoZVxuXHQvLyBgb2Zmc2V0UGFyZW50YCBwcm9wZXJ0eSB3aWxsIGZvcmNlIGEgcmVmbG93IGFuZCByZS1ldmFsdWF0ZSB0aGUgQ1NTIGFuaW1hdGlvbi5cblx0Ly8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzVkNTJmYjA4MWIzNTcwYzgxZTNhI2JveC1tZXRyaWNzXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy80NzM3XG5cdGV4cGFuZG8ucmVmbG93ID0gISFub2RlLm9mZnNldFBhcmVudDtcblxuXHRub2RlLmNsYXNzTGlzdC5hZGQoQ1NTX1JFTkRFUl9NT05JVE9SKTtcbn1cblxuZnVuY3Rpb24gdW53YXRjaEZvclJlbmRlcihub2RlKSB7XG5cdHZhciBleHBhbmRvID0gbm9kZVtFWFBBTkRPX0tFWV0gfHwge307XG5cdHZhciBwcm94eSA9IGV4cGFuZG8ucmVuZGVyUHJveHk7XG5cblx0aWYgKHByb3h5KSB7XG5cdFx0aGVscGVycyQxLmVhY2goQU5JTUFUSU9OX1NUQVJUX0VWRU5UUywgZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0cmVtb3ZlTGlzdGVuZXIobm9kZSwgdHlwZSwgcHJveHkpO1xuXHRcdH0pO1xuXG5cdFx0ZGVsZXRlIGV4cGFuZG8ucmVuZGVyUHJveHk7XG5cdH1cblxuXHRub2RlLmNsYXNzTGlzdC5yZW1vdmUoQ1NTX1JFTkRFUl9NT05JVE9SKTtcbn1cblxuZnVuY3Rpb24gYWRkUmVzaXplTGlzdGVuZXIobm9kZSwgbGlzdGVuZXIsIGNoYXJ0KSB7XG5cdHZhciBleHBhbmRvID0gbm9kZVtFWFBBTkRPX0tFWV0gfHwgKG5vZGVbRVhQQU5ET19LRVldID0ge30pO1xuXG5cdC8vIExldCdzIGtlZXAgdHJhY2sgb2YgdGhpcyBhZGRlZCByZXNpemVyIGFuZCB0aHVzIGF2b2lkIERPTSBxdWVyeSB3aGVuIHJlbW92aW5nIGl0LlxuXHR2YXIgcmVzaXplciA9IGV4cGFuZG8ucmVzaXplciA9IGNyZWF0ZVJlc2l6ZXIodGhyb3R0bGVkKGZ1bmN0aW9uKCkge1xuXHRcdGlmIChleHBhbmRvLnJlc2l6ZXIpIHtcblx0XHRcdHZhciBjb250YWluZXIgPSBjaGFydC5vcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgbm9kZS5wYXJlbnROb2RlO1xuXHRcdFx0dmFyIHcgPSBjb250YWluZXIgPyBjb250YWluZXIuY2xpZW50V2lkdGggOiAwO1xuXHRcdFx0bGlzdGVuZXIoY3JlYXRlRXZlbnQoJ3Jlc2l6ZScsIGNoYXJ0KSk7XG5cdFx0XHRpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5jbGllbnRXaWR0aCA8IHcgJiYgY2hhcnQuY2FudmFzKSB7XG5cdFx0XHRcdC8vIElmIHRoZSBjb250YWluZXIgc2l6ZSBzaHJhbmsgZHVyaW5nIGNoYXJ0IHJlc2l6ZSwgbGV0J3MgYXNzdW1lXG5cdFx0XHRcdC8vIHNjcm9sbGJhciBhcHBlYXJlZC4gU28gd2UgcmVzaXplIGFnYWluIHdpdGggdGhlIHNjcm9sbGJhciB2aXNpYmxlIC1cblx0XHRcdFx0Ly8gZWZmZWN0aXZlbHkgbWFraW5nIGNoYXJ0IHNtYWxsZXIgYW5kIHRoZSBzY3JvbGxiYXIgaGlkZGVuIGFnYWluLlxuXHRcdFx0XHQvLyBCZWNhdXNlIHdlIGFyZSBpbnNpZGUgYHRocm90dGxlZGAsIGFuZCBjdXJyZW50bHkgYHRpY2tpbmdgLCBzY3JvbGxcblx0XHRcdFx0Ly8gZXZlbnRzIGFyZSBpZ25vcmVkIGR1cmluZyB0aGlzIHdob2xlIDIgcmVzaXplIHByb2Nlc3MuXG5cdFx0XHRcdC8vIElmIHdlIGFzc3VtZWQgd3JvbmcgYW5kIHNvbWV0aGluZyBlbHNlIGhhcHBlbmVkLCB3ZSBhcmUgcmVzaXppbmdcblx0XHRcdFx0Ly8gdHdpY2UgaW4gYSBmcmFtZSAocG90ZW50aWFsIHBlcmZvcm1hbmNlIGlzc3VlKVxuXHRcdFx0XHRsaXN0ZW5lcihjcmVhdGVFdmVudCgncmVzaXplJywgY2hhcnQpKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pKTtcblxuXHQvLyBUaGUgcmVzaXplciBuZWVkcyB0byBiZSBhdHRhY2hlZCB0byB0aGUgbm9kZSBwYXJlbnQsIHNvIHdlIGZpcnN0IG5lZWQgdG8gYmVcblx0Ly8gc3VyZSB0aGF0IGBub2RlYCBpcyBhdHRhY2hlZCB0byB0aGUgRE9NIGJlZm9yZSBpbmplY3RpbmcgdGhlIHJlc2l6ZXIgZWxlbWVudC5cblx0d2F0Y2hGb3JSZW5kZXIobm9kZSwgZnVuY3Rpb24oKSB7XG5cdFx0aWYgKGV4cGFuZG8ucmVzaXplcikge1xuXHRcdFx0dmFyIGNvbnRhaW5lciA9IG5vZGUucGFyZW50Tm9kZTtcblx0XHRcdGlmIChjb250YWluZXIgJiYgY29udGFpbmVyICE9PSByZXNpemVyLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0Y29udGFpbmVyLmluc2VydEJlZm9yZShyZXNpemVyLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBjb250YWluZXIgc2l6ZSBtaWdodCBoYXZlIGNoYW5nZWQsIGxldCdzIHJlc2V0IHRoZSByZXNpemVyIHN0YXRlLlxuXHRcdFx0cmVzaXplci5fcmVzZXQoKTtcblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSZXNpemVMaXN0ZW5lcihub2RlKSB7XG5cdHZhciBleHBhbmRvID0gbm9kZVtFWFBBTkRPX0tFWV0gfHwge307XG5cdHZhciByZXNpemVyID0gZXhwYW5kby5yZXNpemVyO1xuXG5cdGRlbGV0ZSBleHBhbmRvLnJlc2l6ZXI7XG5cdHVud2F0Y2hGb3JSZW5kZXIobm9kZSk7XG5cblx0aWYgKHJlc2l6ZXIgJiYgcmVzaXplci5wYXJlbnROb2RlKSB7XG5cdFx0cmVzaXplci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJlc2l6ZXIpO1xuXHR9XG59XG5cbi8qKlxuICogSW5qZWN0cyBDU1Mgc3R5bGVzIGlubGluZSBpZiB0aGUgc3R5bGVzIGFyZSBub3QgYWxyZWFkeSBwcmVzZW50LlxuICogQHBhcmFtIHtIVE1MRG9jdW1lbnR8U2hhZG93Um9vdH0gcm9vdE5vZGUgLSB0aGUgbm9kZSB0byBjb250YWluIHRoZSA8c3R5bGU+LlxuICogQHBhcmFtIHtzdHJpbmd9IGNzcyAtIHRoZSBDU1MgdG8gYmUgaW5qZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGluamVjdENTUyhyb290Tm9kZSwgY3NzKSB7XG5cdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8zOTIyMTM5XG5cdHZhciBleHBhbmRvID0gcm9vdE5vZGVbRVhQQU5ET19LRVldIHx8IChyb290Tm9kZVtFWFBBTkRPX0tFWV0gPSB7fSk7XG5cdGlmICghZXhwYW5kby5jb250YWluc1N0eWxlcykge1xuXHRcdGV4cGFuZG8uY29udGFpbnNTdHlsZXMgPSB0cnVlO1xuXHRcdGNzcyA9ICcvKiBDaGFydC5qcyAqL1xcbicgKyBjc3M7XG5cdFx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0XHRyb290Tm9kZS5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH1cbn1cblxudmFyIHBsYXRmb3JtX2RvbSQyID0ge1xuXHQvKipcblx0ICogV2hlbiBgdHJ1ZWAsIHByZXZlbnRzIHRoZSBhdXRvbWF0aWMgaW5qZWN0aW9uIG9mIHRoZSBzdHlsZXNoZWV0IHJlcXVpcmVkIHRvXG5cdCAqIGNvcnJlY3RseSBkZXRlY3Qgd2hlbiB0aGUgY2hhcnQgaXMgYWRkZWQgdG8gdGhlIERPTSBhbmQgdGhlbiByZXNpemVkLiBUaGlzXG5cdCAqIHN3aXRjaCBoYXMgYmVlbiBhZGRlZCB0byBhbGxvdyBleHRlcm5hbCBzdHlsZXNoZWV0IChgZGlzdC9DaGFydCgubWluKT8uanNgKVxuXHQgKiB0byBiZSBtYW51YWxseSBpbXBvcnRlZCB0byBtYWtlIHRoaXMgbGlicmFyeSBjb21wYXRpYmxlIHdpdGggYW55IENTUC5cblx0ICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81MjA4XG5cdCAqL1xuXHRkaXNhYmxlQ1NTSW5qZWN0aW9uOiBmYWxzZSxcblxuXHQvKipcblx0ICogVGhpcyBwcm9wZXJ0eSBob2xkcyB3aGV0aGVyIHRoaXMgcGxhdGZvcm0gaXMgZW5hYmxlZCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG5cdCAqIEN1cnJlbnRseSB1c2VkIGJ5IHBsYXRmb3JtLmpzIHRvIHNlbGVjdCB0aGUgcHJvcGVyIGltcGxlbWVudGF0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2VuYWJsZWQ6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHJlc291cmNlcyB0aGF0IGRlcGVuZCBvbiBwbGF0Zm9ybSBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMgLSBUaGUgQ2FudmFzIGVsZW1lbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZW5zdXJlTG9hZGVkOiBmdW5jdGlvbihjYW52YXMpIHtcblx0XHRpZiAoIXRoaXMuZGlzYWJsZUNTU0luamVjdGlvbikge1xuXHRcdFx0Ly8gSWYgdGhlIGNhbnZhcyBpcyBpbiBhIHNoYWRvdyBET00sIHRoZW4gdGhlIHN0eWxlcyBtdXN0IGFsc28gYmUgaW5zZXJ0ZWRcblx0XHRcdC8vIGludG8gdGhlIHNhbWUgc2hhZG93IERPTS5cblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81NzYzXG5cdFx0XHR2YXIgcm9vdCA9IGNhbnZhcy5nZXRSb290Tm9kZSA/IGNhbnZhcy5nZXRSb290Tm9kZSgpIDogZG9jdW1lbnQ7XG5cdFx0XHR2YXIgdGFyZ2V0Tm9kZSA9IHJvb3QuaG9zdCA/IHJvb3QgOiBkb2N1bWVudC5oZWFkO1xuXHRcdFx0aW5qZWN0Q1NTKHRhcmdldE5vZGUsIHN0eWxlc2hlZXQpO1xuXHRcdH1cblx0fSxcblxuXHRhY3F1aXJlQ29udGV4dDogZnVuY3Rpb24oaXRlbSwgY29uZmlnKSB7XG5cdFx0aWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuXHRcdFx0aXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuXHRcdH0gZWxzZSBpZiAoaXRlbS5sZW5ndGgpIHtcblx0XHRcdC8vIFN1cHBvcnQgZm9yIGFycmF5IGJhc2VkIHF1ZXJpZXMgKHN1Y2ggYXMgalF1ZXJ5KVxuXHRcdFx0aXRlbSA9IGl0ZW1bMF07XG5cdFx0fVxuXG5cdFx0aWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcblx0XHRcdC8vIFN1cHBvcnQgZm9yIGFueSBvYmplY3QgYXNzb2NpYXRlZCB0byBhIGNhbnZhcyAoaW5jbHVkaW5nIGEgY29udGV4dDJkKVxuXHRcdFx0aXRlbSA9IGl0ZW0uY2FudmFzO1xuXHRcdH1cblxuXHRcdC8vIFRvIHByZXZlbnQgY2FudmFzIGZpbmdlcnByaW50aW5nLCBzb21lIGFkZC1vbnMgdW5kZWZpbmUgdGhlIGdldENvbnRleHRcblx0XHQvLyBtZXRob2QsIGZvciBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20va2thcHNuZXIvQ2FudmFzQmxvY2tlclxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yODA3XG5cdFx0dmFyIGNvbnRleHQgPSBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCAmJiBpdGVtLmdldENvbnRleHQoJzJkJyk7XG5cblx0XHQvLyBgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudC9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkRgIGZhaWxzIHdoZW4gdGhlIGl0ZW0gaXNcblx0XHQvLyBpbnNpZGUgYW4gaWZyYW1lIG9yIHdoZW4gcnVubmluZyBpbiBhIHByb3RlY3RlZCBlbnZpcm9ubWVudC4gV2UgY291bGQgZ3Vlc3MgdGhlXG5cdFx0Ly8gdHlwZXMgZnJvbSB0aGVpciB0b1N0cmluZygpIHZhbHVlIGJ1dCBsZXQncyBrZWVwIHRoaW5ncyBmbGV4aWJsZSBhbmQgYXNzdW1lIGl0J3Ncblx0XHQvLyBhIHN1ZmZpY2llbnQgY29uZGl0aW9uIGlmIHRoZSBpdGVtIGhhcyBhIGNvbnRleHQyRCB3aGljaCBoYXMgaXRlbSBhcyBgY2FudmFzYC5cblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMzg4N1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy80MTAyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQxNTJcblx0XHRpZiAoY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcyA9PT0gaXRlbSkge1xuXHRcdFx0Ly8gTG9hZCBwbGF0Zm9ybSByZXNvdXJjZXMgb24gZmlyc3QgY2hhcnQgY3JlYXRpb24sIHRvIG1ha2UgaXQgcG9zc2libGUgdG9cblx0XHRcdC8vIGltcG9ydCB0aGUgbGlicmFyeSBiZWZvcmUgc2V0dGluZyBwbGF0Zm9ybSBvcHRpb25zLlxuXHRcdFx0dGhpcy5fZW5zdXJlTG9hZGVkKGl0ZW0pO1xuXHRcdFx0aW5pdENhbnZhcyhpdGVtLCBjb25maWcpO1xuXHRcdFx0cmV0dXJuIGNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cblx0cmVsZWFzZUNvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQpIHtcblx0XHR2YXIgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG5cdFx0aWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGluaXRpYWwgPSBjYW52YXNbRVhQQU5ET19LRVldLmluaXRpYWw7XG5cdFx0WydoZWlnaHQnLCAnd2lkdGgnXS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcblx0XHRcdHZhciB2YWx1ZSA9IGluaXRpYWxbcHJvcF07XG5cdFx0XHRpZiAoaGVscGVycyQxLmlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG5cdFx0XHRcdGNhbnZhcy5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW52YXMuc2V0QXR0cmlidXRlKHByb3AsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGhlbHBlcnMkMS5lYWNoKGluaXRpYWwuc3R5bGUgfHwge30sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcblx0XHRcdGNhbnZhcy5zdHlsZVtrZXldID0gdmFsdWU7XG5cdFx0fSk7XG5cblx0XHQvLyBUaGUgY2FudmFzIHJlbmRlciBzaXplIG1pZ2h0IGhhdmUgYmVlbiBjaGFuZ2VkIChhbmQgdGh1cyB0aGUgc3RhdGUgc3RhY2sgZGlzY2FyZGVkKSxcblx0XHQvLyB3ZSBjYW4ndCB1c2Ugc2F2ZSgpIGFuZCByZXN0b3JlKCkgdG8gcmVzdG9yZSB0aGUgaW5pdGlhbCBzdGF0ZS4gU28gbWFrZSBzdXJlIHRoYXQgYXRcblx0XHQvLyBsZWFzdCB0aGUgY2FudmFzIGNvbnRleHQgaXMgcmVzZXQgdG8gdGhlIGRlZmF1bHQgc3RhdGUgYnkgc2V0dGluZyB0aGUgY2FudmFzIHdpZHRoLlxuXHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwNTI1L3RoZS1jYW52YXMtZWxlbWVudC5odG1sXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtYXNzaWduXG5cdFx0Y2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuXG5cdFx0ZGVsZXRlIGNhbnZhc1tFWFBBTkRPX0tFWV07XG5cdH0sXG5cblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHRpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcblx0XHRcdC8vIE5vdGU6IHRoZSByZXNpemUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXG5cdFx0XHRhZGRSZXNpemVMaXN0ZW5lcihjYW52YXMsIGxpc3RlbmVyLCBjaGFydCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGV4cGFuZG8gPSBsaXN0ZW5lcltFWFBBTkRPX0tFWV0gfHwgKGxpc3RlbmVyW0VYUEFORE9fS0VZXSA9IHt9KTtcblx0XHR2YXIgcHJveGllcyA9IGV4cGFuZG8ucHJveGllcyB8fCAoZXhwYW5kby5wcm94aWVzID0ge30pO1xuXHRcdHZhciBwcm94eSA9IHByb3hpZXNbY2hhcnQuaWQgKyAnXycgKyB0eXBlXSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRsaXN0ZW5lcihmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSk7XG5cdFx0fTtcblxuXHRcdGFkZExpc3RlbmVyKGNhbnZhcywgdHlwZSwgcHJveHkpO1xuXHR9LFxuXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuXHRcdHZhciBjYW52YXMgPSBjaGFydC5jYW52YXM7XG5cdFx0aWYgKHR5cGUgPT09ICdyZXNpemUnKSB7XG5cdFx0XHQvLyBOb3RlOiB0aGUgcmVzaXplIGV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGJyb3dzZXJzLlxuXHRcdFx0cmVtb3ZlUmVzaXplTGlzdGVuZXIoY2FudmFzKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZXhwYW5kbyA9IGxpc3RlbmVyW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0XHR2YXIgcHJveGllcyA9IGV4cGFuZG8ucHJveGllcyB8fCB7fTtcblx0XHR2YXIgcHJveHkgPSBwcm94aWVzW2NoYXJ0LmlkICsgJ18nICsgdHlwZV07XG5cdFx0aWYgKCFwcm94eSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJlbW92ZUxpc3RlbmVyKGNhbnZhcywgdHlwZSwgcHJveHkpO1xuXHR9XG59O1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIEV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIgaW5zdGVhZC5cbiAqIEV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIgY29tcGF0aWJpbGl0eTogQ2hyb21lLCBPcGVyYSA3LCBTYWZhcmksIEZGMS41KywgSUU5K1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lclxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuYWRkRXZlbnRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMkMS5hZGRFdmVudCA9IGFkZExpc3RlbmVyO1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgRXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciBpbnN0ZWFkLlxuICogRXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciBjb21wYXRpYmlsaXR5OiBDaHJvbWUsIE9wZXJhIDcsIFNhZmFyaSwgRkYxLjUrLCBJRTkrXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9yZW1vdmVFdmVudExpc3RlbmVyXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5yZW1vdmVFdmVudFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycyQxLnJlbW92ZUV2ZW50ID0gcmVtb3ZlTGlzdGVuZXI7XG5cbi8vIEBUT0RPIE1ha2UgcG9zc2libGUgdG8gc2VsZWN0IGFub3RoZXIgcGxhdGZvcm0gYXQgYnVpbGQgdGltZS5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHBsYXRmb3JtX2RvbSQyLl9lbmFibGVkID8gcGxhdGZvcm1fZG9tJDIgOiBwbGF0Zm9ybV9iYXNpYztcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LnBsYXRmb3JtXG4gKiBAc2VlIGh0dHBzOi8vY2hhcnRqcy5naXRib29rcy5pby9wcm9wb3NhbHMvY29udGVudC9QbGF0Zm9ybS5odG1sXG4gKiBAc2luY2UgMi40LjBcbiAqL1xudmFyIHBsYXRmb3JtID0gaGVscGVycyQxLmV4dGVuZCh7XG5cdC8qKlxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIENhbGxlZCBhdCBjaGFydCBjb25zdHJ1Y3Rpb24gdGltZSwgcmV0dXJucyBhIGNvbnRleHQyZCBpbnN0YW5jZSBpbXBsZW1lbnRpbmdcblx0ICogdGhlIFtXM0MgQ2FudmFzIDJEIENvbnRleHQgQVBJIHN0YW5kYXJkXXtAbGluayBodHRwczovL3d3dy53My5vcmcvVFIvMmRjb250ZXh0L30uXG5cdCAqIEBwYXJhbSB7Kn0gaXRlbSAtIFRoZSBuYXRpdmUgaXRlbSBmcm9tIHdoaWNoIHRvIGFjcXVpcmUgY29udGV4dCAocGxhdGZvcm0gc3BlY2lmaWMpXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gVGhlIGNoYXJ0IG9wdGlvbnNcblx0ICogQHJldHVybnMge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dDJkIGluc3RhbmNlXG5cdCAqL1xuXHRhY3F1aXJlQ29udGV4dDogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogQ2FsbGVkIGF0IGNoYXJ0IGRlc3RydWN0aW9uIHRpbWUsIHJlbGVhc2VzIGFueSByZXNvdXJjZXMgYXNzb2NpYXRlZCB0byB0aGUgY29udGV4dFxuXHQgKiBwcmV2aW91c2x5IHJldHVybmVkIGJ5IHRoZSBhY3F1aXJlQ29udGV4dCgpIG1ldGhvZC5cblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgLSBUaGUgY29udGV4dDJkIGluc3RhbmNlXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBtZXRob2Qgc3VjY2VlZGVkLCBlbHNlIGZhbHNlXG5cdCAqL1xuXHRyZWxlYXNlQ29udGV4dDogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIgb24gdGhlIGdpdmVuIGNoYXJ0LlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIENoYXJ0IGZyb20gd2hpY2ggdG8gbGlzdGVuIGZvciBldmVudFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSAoe0BsaW5rIElFdmVudH0pIHR5cGUgdG8gbGlzdGVuIGZvclxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIFJlY2VpdmVzIGEgbm90aWZpY2F0aW9uIChhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzXG5cdCAqIHRoZSB7QGxpbmsgSUV2ZW50fSBpbnRlcmZhY2UpIHdoZW4gYW4gZXZlbnQgb2YgdGhlIHNwZWNpZmllZCB0eXBlIG9jY3Vycy5cblx0ICovXG5cdGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgd2l0aCBhZGRFdmVudExpc3RlbmVyLlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIENoYXJ0IGZyb20gd2hpY2ggdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSAoe0BsaW5rIElFdmVudH0pIHR5cGUgdG8gcmVtb3ZlXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBldmVudCB0YXJnZXQuXG5cdCAqL1xuXHRyZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHt9XG5cbn0sIGltcGxlbWVudGF0aW9uKTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdHBsdWdpbnM6IHt9XG59KTtcblxuLyoqXG4gKiBUaGUgcGx1Z2luIHNlcnZpY2Ugc2luZ2xldG9uXG4gKiBAbmFtZXNwYWNlIENoYXJ0LnBsdWdpbnNcbiAqIEBzaW5jZSAyLjEuMFxuICovXG52YXIgY29yZV9wbHVnaW5zID0ge1xuXHQvKipcblx0ICogR2xvYmFsbHkgcmVnaXN0ZXJlZCBwbHVnaW5zLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3BsdWdpbnM6IFtdLFxuXG5cdC8qKlxuXHQgKiBUaGlzIGlkZW50aWZpZXIgaXMgdXNlZCB0byBpbnZhbGlkYXRlIHRoZSBkZXNjcmlwdG9ycyBjYWNoZSBhdHRhY2hlZCB0byBlYWNoIGNoYXJ0XG5cdCAqIHdoZW4gYSBnbG9iYWwgcGx1Z2luIGlzIHJlZ2lzdGVyZWQgb3IgdW5yZWdpc3RlcmVkLiBJbiB0aGlzIGNhc2UsIHRoZSBjYWNoZSBJRCBpc1xuXHQgKiBpbmNyZW1lbnRlZCBhbmQgZGVzY3JpcHRvcnMgYXJlIHJlZ2VuZXJhdGVkIGR1cmluZyBmb2xsb3dpbmcgQVBJIGNhbGxzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NhY2hlSWQ6IDAsXG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVycyB0aGUgZ2l2ZW4gcGx1Z2luKHMpIGlmIG5vdCBhbHJlYWR5IHJlZ2lzdGVyZWQuXG5cdCAqIEBwYXJhbSB7SVBsdWdpbltdfElQbHVnaW59IHBsdWdpbnMgcGx1Z2luIGluc3RhbmNlKHMpLlxuXHQgKi9cblx0cmVnaXN0ZXI6IGZ1bmN0aW9uKHBsdWdpbnMpIHtcblx0XHR2YXIgcCA9IHRoaXMuX3BsdWdpbnM7XG5cdFx0KFtdKS5jb25jYXQocGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pIHtcblx0XHRcdGlmIChwLmluZGV4T2YocGx1Z2luKSA9PT0gLTEpIHtcblx0XHRcdFx0cC5wdXNoKHBsdWdpbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9jYWNoZUlkKys7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFVucmVnaXN0ZXJzIHRoZSBnaXZlbiBwbHVnaW4ocykgb25seSBpZiByZWdpc3RlcmVkLlxuXHQgKiBAcGFyYW0ge0lQbHVnaW5bXXxJUGx1Z2lufSBwbHVnaW5zIHBsdWdpbiBpbnN0YW5jZShzKS5cblx0ICovXG5cdHVucmVnaXN0ZXI6IGZ1bmN0aW9uKHBsdWdpbnMpIHtcblx0XHR2YXIgcCA9IHRoaXMuX3BsdWdpbnM7XG5cdFx0KFtdKS5jb25jYXQocGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pIHtcblx0XHRcdHZhciBpZHggPSBwLmluZGV4T2YocGx1Z2luKTtcblx0XHRcdGlmIChpZHggIT09IC0xKSB7XG5cdFx0XHRcdHAuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9jYWNoZUlkKys7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJlbW92ZSBhbGwgcmVnaXN0ZXJlZCBwbHVnaW5zLlxuXHQgKiBAc2luY2UgMi4xLjVcblx0ICovXG5cdGNsZWFyOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9wbHVnaW5zID0gW107XG5cdFx0dGhpcy5fY2FjaGVJZCsrO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcmVnaXN0ZXJlZCBwbHVnaW5zP1xuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKiBAc2luY2UgMi4xLjVcblx0ICovXG5cdGNvdW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGx1Z2lucy5sZW5ndGg7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYWxsIHJlZ2lzdGVyZWQgcGx1Z2luIGluc3RhbmNlcy5cblx0ICogQHJldHVybnMge0lQbHVnaW5bXX0gYXJyYXkgb2YgcGx1Z2luIG9iamVjdHMuXG5cdCAqIEBzaW5jZSAyLjEuNVxuXHQgKi9cblx0Z2V0QWxsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGx1Z2lucztcblx0fSxcblxuXHQvKipcblx0ICogQ2FsbHMgZW5hYmxlZCBwbHVnaW5zIGZvciBgY2hhcnRgIG9uIHRoZSBzcGVjaWZpZWQgaG9vayBhbmQgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cblx0ICogVGhpcyBtZXRob2QgaW1tZWRpYXRlbHkgcmV0dXJucyBhcyBzb29uIGFzIGEgcGx1Z2luIGV4cGxpY2l0bHkgcmV0dXJucyBmYWxzZS4gVGhlXG5cdCAqIHJldHVybmVkIHZhbHVlIGNhbiBiZSB1c2VkLCBmb3IgaW5zdGFuY2UsIHRvIGludGVycnVwdCB0aGUgY3VycmVudCBhY3Rpb24uXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlIGZvciB3aGljaCBwbHVnaW5zIHNob3VsZCBiZSBjYWxsZWQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBob29rIC0gVGhlIG5hbWUgb2YgdGhlIHBsdWdpbiBtZXRob2QgdG8gY2FsbCAoZS5nLiAnYmVmb3JlVXBkYXRlJykuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXSAtIEV4dHJhIGFyZ3VtZW50cyB0byBhcHBseSB0byB0aGUgaG9vayBjYWxsLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gZmFsc2UgaWYgYW55IG9mIHRoZSBwbHVnaW5zIHJldHVybiBmYWxzZSwgZWxzZSByZXR1cm5zIHRydWUuXG5cdCAqL1xuXHRub3RpZnk6IGZ1bmN0aW9uKGNoYXJ0LCBob29rLCBhcmdzKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3JzID0gdGhpcy5kZXNjcmlwdG9ycyhjaGFydCk7XG5cdFx0dmFyIGlsZW4gPSBkZXNjcmlwdG9ycy5sZW5ndGg7XG5cdFx0dmFyIGksIGRlc2NyaXB0b3IsIHBsdWdpbiwgcGFyYW1zLCBtZXRob2Q7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRkZXNjcmlwdG9yID0gZGVzY3JpcHRvcnNbaV07XG5cdFx0XHRwbHVnaW4gPSBkZXNjcmlwdG9yLnBsdWdpbjtcblx0XHRcdG1ldGhvZCA9IHBsdWdpbltob29rXTtcblx0XHRcdGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHBhcmFtcyA9IFtjaGFydF0uY29uY2F0KGFyZ3MgfHwgW10pO1xuXHRcdFx0XHRwYXJhbXMucHVzaChkZXNjcmlwdG9yLm9wdGlvbnMpO1xuXHRcdFx0XHRpZiAobWV0aG9kLmFwcGx5KHBsdWdpbiwgcGFyYW1zKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBkZXNjcmlwdG9ycyBvZiBlbmFibGVkIHBsdWdpbnMgZm9yIHRoZSBnaXZlbiBjaGFydC5cblx0ICogQHJldHVybnMge29iamVjdFtdfSBbeyBwbHVnaW4sIG9wdGlvbnMgfV1cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGRlc2NyaXB0b3JzOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBjYWNoZSA9IGNoYXJ0LiRwbHVnaW5zIHx8IChjaGFydC4kcGx1Z2lucyA9IHt9KTtcblx0XHRpZiAoY2FjaGUuaWQgPT09IHRoaXMuX2NhY2hlSWQpIHtcblx0XHRcdHJldHVybiBjYWNoZS5kZXNjcmlwdG9ycztcblx0XHR9XG5cblx0XHR2YXIgcGx1Z2lucyA9IFtdO1xuXHRcdHZhciBkZXNjcmlwdG9ycyA9IFtdO1xuXHRcdHZhciBjb25maWcgPSAoY2hhcnQgJiYgY2hhcnQuY29uZmlnKSB8fCB7fTtcblx0XHR2YXIgb3B0aW9ucyA9IChjb25maWcub3B0aW9ucyAmJiBjb25maWcub3B0aW9ucy5wbHVnaW5zKSB8fCB7fTtcblxuXHRcdHRoaXMuX3BsdWdpbnMuY29uY2F0KGNvbmZpZy5wbHVnaW5zIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuXHRcdFx0dmFyIGlkeCA9IHBsdWdpbnMuaW5kZXhPZihwbHVnaW4pO1xuXHRcdFx0aWYgKGlkeCAhPT0gLTEpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaWQgPSBwbHVnaW4uaWQ7XG5cdFx0XHR2YXIgb3B0cyA9IG9wdGlvbnNbaWRdO1xuXHRcdFx0aWYgKG9wdHMgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdHMgPT09IHRydWUpIHtcblx0XHRcdFx0b3B0cyA9IGhlbHBlcnMkMS5jbG9uZShjb3JlX2RlZmF1bHRzLmdsb2JhbC5wbHVnaW5zW2lkXSk7XG5cdFx0XHR9XG5cblx0XHRcdHBsdWdpbnMucHVzaChwbHVnaW4pO1xuXHRcdFx0ZGVzY3JpcHRvcnMucHVzaCh7XG5cdFx0XHRcdHBsdWdpbjogcGx1Z2luLFxuXHRcdFx0XHRvcHRpb25zOiBvcHRzIHx8IHt9XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdGNhY2hlLmRlc2NyaXB0b3JzID0gZGVzY3JpcHRvcnM7XG5cdFx0Y2FjaGUuaWQgPSB0aGlzLl9jYWNoZUlkO1xuXHRcdHJldHVybiBkZXNjcmlwdG9ycztcblx0fSxcblxuXHQvKipcblx0ICogSW52YWxpZGF0ZXMgY2FjaGUgZm9yIHRoZSBnaXZlbiBjaGFydDogZGVzY3JpcHRvcnMgaG9sZCBhIHJlZmVyZW5jZSBvbiBwbHVnaW4gb3B0aW9uLFxuXHQgKiBidXQgaW4gc29tZSBjYXNlcywgdGhpcyByZWZlcmVuY2UgY2FuIGJlIGNoYW5nZWQgYnkgdGhlIHVzZXIgd2hlbiB1cGRhdGluZyBvcHRpb25zLlxuXHQgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTExMSNpc3N1ZWNvbW1lbnQtMzU1OTM0MTY3XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfaW52YWxpZGF0ZTogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHRkZWxldGUgY2hhcnQuJHBsdWdpbnM7XG5cdH1cbn07XG5cbnZhciBjb3JlX3NjYWxlU2VydmljZSA9IHtcblx0Ly8gU2NhbGUgcmVnaXN0cmF0aW9uIG9iamVjdC4gRXh0ZW5zaW9ucyBjYW4gcmVnaXN0ZXIgbmV3IHNjYWxlIHR5cGVzIChzdWNoIGFzIGxvZyBvciBEQiBzY2FsZXMpIGFuZCB0aGVuXG5cdC8vIHVzZSB0aGUgbmV3IGNoYXJ0IG9wdGlvbnMgdG8gZ3JhYiB0aGUgY29ycmVjdCBzY2FsZVxuXHRjb25zdHJ1Y3RvcnM6IHt9LFxuXHQvLyBVc2UgYSByZWdpc3RyYXRpb24gZnVuY3Rpb24gc28gdGhhdCB3ZSBjYW4gbW92ZSB0byBhbiBFUzYgbWFwIHdoZW4gd2Ugbm8gbG9uZ2VyIG5lZWQgdG8gc3VwcG9ydFxuXHQvLyBvbGQgYnJvd3NlcnNcblxuXHQvLyBTY2FsZSBjb25maWcgZGVmYXVsdHNcblx0ZGVmYXVsdHM6IHt9LFxuXHRyZWdpc3RlclNjYWxlVHlwZTogZnVuY3Rpb24odHlwZSwgc2NhbGVDb25zdHJ1Y3Rvciwgc2NhbGVEZWZhdWx0cykge1xuXHRcdHRoaXMuY29uc3RydWN0b3JzW3R5cGVdID0gc2NhbGVDb25zdHJ1Y3Rvcjtcblx0XHR0aGlzLmRlZmF1bHRzW3R5cGVdID0gaGVscGVycyQxLmNsb25lKHNjYWxlRGVmYXVsdHMpO1xuXHR9LFxuXHRnZXRTY2FsZUNvbnN0cnVjdG9yOiBmdW5jdGlvbih0eXBlKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3JzLmhhc093blByb3BlcnR5KHR5cGUpID8gdGhpcy5jb25zdHJ1Y3RvcnNbdHlwZV0gOiB1bmRlZmluZWQ7XG5cdH0sXG5cdGdldFNjYWxlRGVmYXVsdHM6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHQvLyBSZXR1cm4gdGhlIHNjYWxlIGRlZmF1bHRzIG1lcmdlZCB3aXRoIHRoZSBnbG9iYWwgc2V0dGluZ3Mgc28gdGhhdCB3ZSBhbHdheXMgdXNlIHRoZSBsYXRlc3Qgb25lc1xuXHRcdHJldHVybiB0aGlzLmRlZmF1bHRzLmhhc093blByb3BlcnR5KHR5cGUpID8gaGVscGVycyQxLm1lcmdlKHt9LCBbY29yZV9kZWZhdWx0cy5zY2FsZSwgdGhpcy5kZWZhdWx0c1t0eXBlXV0pIDoge307XG5cdH0sXG5cdHVwZGF0ZVNjYWxlRGVmYXVsdHM6IGZ1bmN0aW9uKHR5cGUsIGFkZGl0aW9ucykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0aWYgKG1lLmRlZmF1bHRzLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG5cdFx0XHRtZS5kZWZhdWx0c1t0eXBlXSA9IGhlbHBlcnMkMS5leHRlbmQobWUuZGVmYXVsdHNbdHlwZV0sIGFkZGl0aW9ucyk7XG5cdFx0fVxuXHR9LFxuXHRhZGRTY2FsZXNUb0xheW91dDogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHQvLyBBZGRzIGVhY2ggc2NhbGUgdG8gdGhlIGNoYXJ0LmJveGVzIGFycmF5IHRvIGJlIHNpemVkIGFjY29yZGluZ2x5XG5cdFx0aGVscGVycyQxLmVhY2goY2hhcnQuc2NhbGVzLCBmdW5jdGlvbihzY2FsZSkge1xuXHRcdFx0Ly8gU2V0IElMYXlvdXRJdGVtIHBhcmFtZXRlcnMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRzY2FsZS5mdWxsV2lkdGggPSBzY2FsZS5vcHRpb25zLmZ1bGxXaWR0aDtcblx0XHRcdHNjYWxlLnBvc2l0aW9uID0gc2NhbGUub3B0aW9ucy5wb3NpdGlvbjtcblx0XHRcdHNjYWxlLndlaWdodCA9IHNjYWxlLm9wdGlvbnMud2VpZ2h0O1xuXHRcdFx0Y29yZV9sYXlvdXRzLmFkZEJveChjaGFydCwgc2NhbGUpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG52YXIgdmFsdWVPckRlZmF1bHQkOCA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcbnZhciBnZXRSdGxIZWxwZXIgPSBoZWxwZXJzJDEucnRsLmdldFJ0bEFkYXB0ZXI7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHR0b29sdGlwczoge1xuXHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0Y3VzdG9tOiBudWxsLFxuXHRcdG1vZGU6ICduZWFyZXN0Jyxcblx0XHRwb3NpdGlvbjogJ2F2ZXJhZ2UnLFxuXHRcdGludGVyc2VjdDogdHJ1ZSxcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknLFxuXHRcdHRpdGxlRm9udFN0eWxlOiAnYm9sZCcsXG5cdFx0dGl0bGVTcGFjaW5nOiAyLFxuXHRcdHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuXHRcdHRpdGxlRm9udENvbG9yOiAnI2ZmZicsXG5cdFx0dGl0bGVBbGlnbjogJ2xlZnQnLFxuXHRcdGJvZHlTcGFjaW5nOiAyLFxuXHRcdGJvZHlGb250Q29sb3I6ICcjZmZmJyxcblx0XHRib2R5QWxpZ246ICdsZWZ0Jyxcblx0XHRmb290ZXJGb250U3R5bGU6ICdib2xkJyxcblx0XHRmb290ZXJTcGFjaW5nOiAyLFxuXHRcdGZvb3Rlck1hcmdpblRvcDogNixcblx0XHRmb290ZXJGb250Q29sb3I6ICcjZmZmJyxcblx0XHRmb290ZXJBbGlnbjogJ2xlZnQnLFxuXHRcdHlQYWRkaW5nOiA2LFxuXHRcdHhQYWRkaW5nOiA2LFxuXHRcdGNhcmV0UGFkZGluZzogMixcblx0XHRjYXJldFNpemU6IDUsXG5cdFx0Y29ybmVyUmFkaXVzOiA2LFxuXHRcdG11bHRpS2V5QmFja2dyb3VuZDogJyNmZmYnLFxuXHRcdGRpc3BsYXlDb2xvcnM6IHRydWUsXG5cdFx0Ym9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcblx0XHRib3JkZXJXaWR0aDogMCxcblx0XHRjYWxsYmFja3M6IHtcblx0XHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW1zLCBkYXRhKVxuXHRcdFx0YmVmb3JlVGl0bGU6IGhlbHBlcnMkMS5ub29wLFxuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtcywgZGF0YSkge1xuXHRcdFx0XHR2YXIgdGl0bGUgPSAnJztcblx0XHRcdFx0dmFyIGxhYmVscyA9IGRhdGEubGFiZWxzO1xuXHRcdFx0XHR2YXIgbGFiZWxDb3VudCA9IGxhYmVscyA/IGxhYmVscy5sZW5ndGggOiAwO1xuXG5cdFx0XHRcdGlmICh0b29sdGlwSXRlbXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhciBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuXHRcdFx0XHRcdGlmIChpdGVtLmxhYmVsKSB7XG5cdFx0XHRcdFx0XHR0aXRsZSA9IGl0ZW0ubGFiZWw7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChpdGVtLnhMYWJlbCkge1xuXHRcdFx0XHRcdFx0dGl0bGUgPSBpdGVtLnhMYWJlbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGxhYmVsQ291bnQgPiAwICYmIGl0ZW0uaW5kZXggPCBsYWJlbENvdW50KSB7XG5cdFx0XHRcdFx0XHR0aXRsZSA9IGxhYmVsc1tpdGVtLmluZGV4XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdGl0bGU7XG5cdFx0XHR9LFxuXHRcdFx0YWZ0ZXJUaXRsZTogaGVscGVycyQxLm5vb3AsXG5cblx0XHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW1zLCBkYXRhKVxuXHRcdFx0YmVmb3JlQm9keTogaGVscGVycyQxLm5vb3AsXG5cblx0XHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdFx0XHRiZWZvcmVMYWJlbDogaGVscGVycyQxLm5vb3AsXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0dmFyIGxhYmVsID0gZGF0YS5kYXRhc2V0c1t0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXhdLmxhYmVsIHx8ICcnO1xuXG5cdFx0XHRcdGlmIChsYWJlbCkge1xuXHRcdFx0XHRcdGxhYmVsICs9ICc6ICc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZih0b29sdGlwSXRlbS52YWx1ZSkpIHtcblx0XHRcdFx0XHRsYWJlbCArPSB0b29sdGlwSXRlbS52YWx1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsYWJlbCArPSB0b29sdGlwSXRlbS55TGFiZWw7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGxhYmVsO1xuXHRcdFx0fSxcblx0XHRcdGxhYmVsQ29sb3I6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtLCBjaGFydCkge1xuXHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdHZhciBhY3RpdmVFbGVtZW50ID0gbWV0YS5kYXRhW3Rvb2x0aXBJdGVtLmluZGV4XTtcblx0XHRcdFx0dmFyIHZpZXcgPSBhY3RpdmVFbGVtZW50Ll92aWV3O1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGJvcmRlckNvbG9yOiB2aWV3LmJvcmRlckNvbG9yLFxuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogdmlldy5iYWNrZ3JvdW5kQ29sb3Jcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFx0XHRsYWJlbFRleHRDb2xvcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9vcHRpb25zLmJvZHlGb250Q29sb3I7XG5cdFx0XHR9LFxuXHRcdFx0YWZ0ZXJMYWJlbDogaGVscGVycyQxLm5vb3AsXG5cblx0XHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW1zLCBkYXRhKVxuXHRcdFx0YWZ0ZXJCb2R5OiBoZWxwZXJzJDEubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRiZWZvcmVGb290ZXI6IGhlbHBlcnMkMS5ub29wLFxuXHRcdFx0Zm9vdGVyOiBoZWxwZXJzJDEubm9vcCxcblx0XHRcdGFmdGVyRm9vdGVyOiBoZWxwZXJzJDEubm9vcFxuXHRcdH1cblx0fVxufSk7XG5cbnZhciBwb3NpdGlvbmVycyA9IHtcblx0LyoqXG5cdCAqIEF2ZXJhZ2UgbW9kZSBwbGFjZXMgdGhlIHRvb2x0aXAgYXQgdGhlIGF2ZXJhZ2UgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnRzIHNob3duXG5cdCAqIEBmdW5jdGlvbiBDaGFydC5Ub29sdGlwLnBvc2l0aW9uZXJzLmF2ZXJhZ2Vcblx0ICogQHBhcmFtIGVsZW1lbnRzIHtDaGFydEVsZW1lbnRbXX0gdGhlIGVsZW1lbnRzIGJlaW5nIGRpc3BsYXllZCBpbiB0aGUgdG9vbHRpcFxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSB0b29sdGlwIHBvc2l0aW9uXG5cdCAqL1xuXHRhdmVyYWdlOiBmdW5jdGlvbihlbGVtZW50cykge1xuXHRcdGlmICghZWxlbWVudHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dmFyIGksIGxlbjtcblx0XHR2YXIgeCA9IDA7XG5cdFx0dmFyIHkgPSAwO1xuXHRcdHZhciBjb3VudCA9IDA7XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuXHRcdFx0dmFyIGVsID0gZWxlbWVudHNbaV07XG5cdFx0XHRpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuXHRcdFx0XHR2YXIgcG9zID0gZWwudG9vbHRpcFBvc2l0aW9uKCk7XG5cdFx0XHRcdHggKz0gcG9zLng7XG5cdFx0XHRcdHkgKz0gcG9zLnk7XG5cdFx0XHRcdCsrY291bnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHggLyBjb3VudCxcblx0XHRcdHk6IHkgLyBjb3VudFxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHRvb2x0aXAgcG9zaXRpb24gbmVhcmVzdCBvZiB0aGUgaXRlbSBuZWFyZXN0IHRvIHRoZSBldmVudCBwb3NpdGlvblxuXHQgKiBAZnVuY3Rpb24gQ2hhcnQuVG9vbHRpcC5wb3NpdGlvbmVycy5uZWFyZXN0XG5cdCAqIEBwYXJhbSBlbGVtZW50cyB7Q2hhcnQuRWxlbWVudFtdfSB0aGUgdG9vbHRpcCBlbGVtZW50c1xuXHQgKiBAcGFyYW0gZXZlbnRQb3NpdGlvbiB7b2JqZWN0fSB0aGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IGluIGNhbnZhcyBjb29yZGluYXRlc1xuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgdG9vbHRpcCBwb3NpdGlvblxuXHQgKi9cblx0bmVhcmVzdDogZnVuY3Rpb24oZWxlbWVudHMsIGV2ZW50UG9zaXRpb24pIHtcblx0XHR2YXIgeCA9IGV2ZW50UG9zaXRpb24ueDtcblx0XHR2YXIgeSA9IGV2ZW50UG9zaXRpb24ueTtcblx0XHR2YXIgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cdFx0dmFyIGksIGxlbiwgbmVhcmVzdEVsZW1lbnQ7XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuXHRcdFx0dmFyIGVsID0gZWxlbWVudHNbaV07XG5cdFx0XHRpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuXHRcdFx0XHR2YXIgY2VudGVyID0gZWwuZ2V0Q2VudGVyUG9pbnQoKTtcblx0XHRcdFx0dmFyIGQgPSBoZWxwZXJzJDEuZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50UG9zaXRpb24sIGNlbnRlcik7XG5cblx0XHRcdFx0aWYgKGQgPCBtaW5EaXN0YW5jZSkge1xuXHRcdFx0XHRcdG1pbkRpc3RhbmNlID0gZDtcblx0XHRcdFx0XHRuZWFyZXN0RWxlbWVudCA9IGVsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG5lYXJlc3RFbGVtZW50KSB7XG5cdFx0XHR2YXIgdHAgPSBuZWFyZXN0RWxlbWVudC50b29sdGlwUG9zaXRpb24oKTtcblx0XHRcdHggPSB0cC54O1xuXHRcdFx0eSA9IHRwLnk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHgsXG5cdFx0XHR5OiB5XG5cdFx0fTtcblx0fVxufTtcblxuLy8gSGVscGVyIHRvIHB1c2ggb3IgY29uY2F0IGJhc2VkIG9uIGlmIHRoZSAybmQgcGFyYW1ldGVyIGlzIGFuIGFycmF5IG9yIG5vdFxuZnVuY3Rpb24gcHVzaE9yQ29uY2F0KGJhc2UsIHRvUHVzaCkge1xuXHRpZiAodG9QdXNoKSB7XG5cdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KHRvUHVzaCkpIHtcblx0XHRcdC8vIGJhc2UgPSBiYXNlLmNvbmNhdCh0b1B1c2gpO1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYmFzZSwgdG9QdXNoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YmFzZS5wdXNoKHRvUHVzaCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGJhc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBhcnJheSBvZiBzdHJpbmdzIHNwbGl0IGJ5IG5ld2xpbmVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzcGxpdCBieSBuZXdsaW5lLlxuICogQHJldHVybnMge3N0cmluZ1tdfSB2YWx1ZSBpZiBuZXdsaW5lIHByZXNlbnQgLSBSZXR1cm5lZCBmcm9tIFN0cmluZyBzcGxpdCgpIG1ldGhvZFxuICogQGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHNwbGl0TmV3bGluZXMoc3RyKSB7XG5cdGlmICgodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nKSAmJiBzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuXHRcdHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xuXHR9XG5cdHJldHVybiBzdHI7XG59XG5cblxuLyoqXG4gKiBQcml2YXRlIGhlbHBlciB0byBjcmVhdGUgYSB0b29sdGlwIGl0ZW0gbW9kZWxcbiAqIEBwYXJhbSBlbGVtZW50IC0gdGhlIGNoYXJ0IGVsZW1lbnQgKHBvaW50LCBhcmMsIGJhcikgdG8gY3JlYXRlIHRoZSB0b29sdGlwIGl0ZW0gZm9yXG4gKiBAcmV0dXJuIG5ldyB0b29sdGlwIGl0ZW1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcEl0ZW0oZWxlbWVudCkge1xuXHR2YXIgeFNjYWxlID0gZWxlbWVudC5feFNjYWxlO1xuXHR2YXIgeVNjYWxlID0gZWxlbWVudC5feVNjYWxlIHx8IGVsZW1lbnQuX3NjYWxlOyAvLyBoYW5kbGUgcmFkYXIgfHwgcG9sYXJBcmVhIGNoYXJ0c1xuXHR2YXIgaW5kZXggPSBlbGVtZW50Ll9pbmRleDtcblx0dmFyIGRhdGFzZXRJbmRleCA9IGVsZW1lbnQuX2RhdGFzZXRJbmRleDtcblx0dmFyIGNvbnRyb2xsZXIgPSBlbGVtZW50Ll9jaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG5cdHZhciBpbmRleFNjYWxlID0gY29udHJvbGxlci5fZ2V0SW5kZXhTY2FsZSgpO1xuXHR2YXIgdmFsdWVTY2FsZSA9IGNvbnRyb2xsZXIuX2dldFZhbHVlU2NhbGUoKTtcblxuXHRyZXR1cm4ge1xuXHRcdHhMYWJlbDogeFNjYWxlID8geFNjYWxlLmdldExhYmVsRm9ySW5kZXgoaW5kZXgsIGRhdGFzZXRJbmRleCkgOiAnJyxcblx0XHR5TGFiZWw6IHlTY2FsZSA/IHlTY2FsZS5nZXRMYWJlbEZvckluZGV4KGluZGV4LCBkYXRhc2V0SW5kZXgpIDogJycsXG5cdFx0bGFiZWw6IGluZGV4U2NhbGUgPyAnJyArIGluZGV4U2NhbGUuZ2V0TGFiZWxGb3JJbmRleChpbmRleCwgZGF0YXNldEluZGV4KSA6ICcnLFxuXHRcdHZhbHVlOiB2YWx1ZVNjYWxlID8gJycgKyB2YWx1ZVNjYWxlLmdldExhYmVsRm9ySW5kZXgoaW5kZXgsIGRhdGFzZXRJbmRleCkgOiAnJyxcblx0XHRpbmRleDogaW5kZXgsXG5cdFx0ZGF0YXNldEluZGV4OiBkYXRhc2V0SW5kZXgsXG5cdFx0eDogZWxlbWVudC5fbW9kZWwueCxcblx0XHR5OiBlbGVtZW50Ll9tb2RlbC55XG5cdH07XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCB0aGUgcmVzZXQgbW9kZWwgZm9yIHRoZSB0b29sdGlwXG4gKiBAcGFyYW0gdG9vbHRpcE9wdHMge29iamVjdH0gdGhlIHRvb2x0aXAgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBnZXRCYXNlTW9kZWwodG9vbHRpcE9wdHMpIHtcblx0dmFyIGdsb2JhbERlZmF1bHRzID0gY29yZV9kZWZhdWx0cy5nbG9iYWw7XG5cblx0cmV0dXJuIHtcblx0XHQvLyBQb3NpdGlvbmluZ1xuXHRcdHhQYWRkaW5nOiB0b29sdGlwT3B0cy54UGFkZGluZyxcblx0XHR5UGFkZGluZzogdG9vbHRpcE9wdHMueVBhZGRpbmcsXG5cdFx0eEFsaWduOiB0b29sdGlwT3B0cy54QWxpZ24sXG5cdFx0eUFsaWduOiB0b29sdGlwT3B0cy55QWxpZ24sXG5cblx0XHQvLyBEcmF3aW5nIGRpcmVjdGlvbiBhbmQgdGV4dCBkaXJlY3Rpb25cblx0XHRydGw6IHRvb2x0aXBPcHRzLnJ0bCxcblx0XHR0ZXh0RGlyZWN0aW9uOiB0b29sdGlwT3B0cy50ZXh0RGlyZWN0aW9uLFxuXG5cdFx0Ly8gQm9keVxuXHRcdGJvZHlGb250Q29sb3I6IHRvb2x0aXBPcHRzLmJvZHlGb250Q29sb3IsXG5cdFx0X2JvZHlGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmJvZHlGb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0X2JvZHlGb250U3R5bGU6IHZhbHVlT3JEZWZhdWx0JDgodG9vbHRpcE9wdHMuYm9keUZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0X2JvZHlBbGlnbjogdG9vbHRpcE9wdHMuYm9keUFsaWduLFxuXHRcdGJvZHlGb250U2l6ZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy5ib2R5Rm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSksXG5cdFx0Ym9keVNwYWNpbmc6IHRvb2x0aXBPcHRzLmJvZHlTcGFjaW5nLFxuXG5cdFx0Ly8gVGl0bGVcblx0XHR0aXRsZUZvbnRDb2xvcjogdG9vbHRpcE9wdHMudGl0bGVGb250Q29sb3IsXG5cdFx0X3RpdGxlRm9udEZhbWlseTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy50aXRsZUZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KSxcblx0XHRfdGl0bGVGb250U3R5bGU6IHZhbHVlT3JEZWZhdWx0JDgodG9vbHRpcE9wdHMudGl0bGVGb250U3R5bGUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U3R5bGUpLFxuXHRcdHRpdGxlRm9udFNpemU6IHZhbHVlT3JEZWZhdWx0JDgodG9vbHRpcE9wdHMudGl0bGVGb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKSxcblx0XHRfdGl0bGVBbGlnbjogdG9vbHRpcE9wdHMudGl0bGVBbGlnbixcblx0XHR0aXRsZVNwYWNpbmc6IHRvb2x0aXBPcHRzLnRpdGxlU3BhY2luZyxcblx0XHR0aXRsZU1hcmdpbkJvdHRvbTogdG9vbHRpcE9wdHMudGl0bGVNYXJnaW5Cb3R0b20sXG5cblx0XHQvLyBGb290ZXJcblx0XHRmb290ZXJGb250Q29sb3I6IHRvb2x0aXBPcHRzLmZvb3RlckZvbnRDb2xvcixcblx0XHRfZm9vdGVyRm9udEZhbWlseTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy5mb290ZXJGb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0X2Zvb3RlckZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy5mb290ZXJGb250U3R5bGUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U3R5bGUpLFxuXHRcdGZvb3RlckZvbnRTaXplOiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmZvb3RlckZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpLFxuXHRcdF9mb290ZXJBbGlnbjogdG9vbHRpcE9wdHMuZm9vdGVyQWxpZ24sXG5cdFx0Zm9vdGVyU3BhY2luZzogdG9vbHRpcE9wdHMuZm9vdGVyU3BhY2luZyxcblx0XHRmb290ZXJNYXJnaW5Ub3A6IHRvb2x0aXBPcHRzLmZvb3Rlck1hcmdpblRvcCxcblxuXHRcdC8vIEFwcGVhcmFuY2Vcblx0XHRjYXJldFNpemU6IHRvb2x0aXBPcHRzLmNhcmV0U2l6ZSxcblx0XHRjb3JuZXJSYWRpdXM6IHRvb2x0aXBPcHRzLmNvcm5lclJhZGl1cyxcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRvb2x0aXBPcHRzLmJhY2tncm91bmRDb2xvcixcblx0XHRvcGFjaXR5OiAwLFxuXHRcdGxlZ2VuZENvbG9yQmFja2dyb3VuZDogdG9vbHRpcE9wdHMubXVsdGlLZXlCYWNrZ3JvdW5kLFxuXHRcdGRpc3BsYXlDb2xvcnM6IHRvb2x0aXBPcHRzLmRpc3BsYXlDb2xvcnMsXG5cdFx0Ym9yZGVyQ29sb3I6IHRvb2x0aXBPcHRzLmJvcmRlckNvbG9yLFxuXHRcdGJvcmRlcldpZHRoOiB0b29sdGlwT3B0cy5ib3JkZXJXaWR0aFxuXHR9O1xufVxuXG4vKipcbiAqIEdldCB0aGUgc2l6ZSBvZiB0aGUgdG9vbHRpcFxuICovXG5mdW5jdGlvbiBnZXRUb29sdGlwU2l6ZSh0b29sdGlwLCBtb2RlbCkge1xuXHR2YXIgY3R4ID0gdG9vbHRpcC5fY2hhcnQuY3R4O1xuXG5cdHZhciBoZWlnaHQgPSBtb2RlbC55UGFkZGluZyAqIDI7IC8vIFRvb2x0aXAgUGFkZGluZ1xuXHR2YXIgd2lkdGggPSAwO1xuXG5cdC8vIENvdW50IG9mIGFsbCBsaW5lcyBpbiB0aGUgYm9keVxuXHR2YXIgYm9keSA9IG1vZGVsLmJvZHk7XG5cdHZhciBjb21iaW5lZEJvZHlMZW5ndGggPSBib2R5LnJlZHVjZShmdW5jdGlvbihjb3VudCwgYm9keUl0ZW0pIHtcblx0XHRyZXR1cm4gY291bnQgKyBib2R5SXRlbS5iZWZvcmUubGVuZ3RoICsgYm9keUl0ZW0ubGluZXMubGVuZ3RoICsgYm9keUl0ZW0uYWZ0ZXIubGVuZ3RoO1xuXHR9LCAwKTtcblx0Y29tYmluZWRCb2R5TGVuZ3RoICs9IG1vZGVsLmJlZm9yZUJvZHkubGVuZ3RoICsgbW9kZWwuYWZ0ZXJCb2R5Lmxlbmd0aDtcblxuXHR2YXIgdGl0bGVMaW5lQ291bnQgPSBtb2RlbC50aXRsZS5sZW5ndGg7XG5cdHZhciBmb290ZXJMaW5lQ291bnQgPSBtb2RlbC5mb290ZXIubGVuZ3RoO1xuXHR2YXIgdGl0bGVGb250U2l6ZSA9IG1vZGVsLnRpdGxlRm9udFNpemU7XG5cdHZhciBib2R5Rm9udFNpemUgPSBtb2RlbC5ib2R5Rm9udFNpemU7XG5cdHZhciBmb290ZXJGb250U2l6ZSA9IG1vZGVsLmZvb3RlckZvbnRTaXplO1xuXG5cdGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udFNpemU7IC8vIFRpdGxlIExpbmVzXG5cdGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCA/ICh0aXRsZUxpbmVDb3VudCAtIDEpICogbW9kZWwudGl0bGVTcGFjaW5nIDogMDsgLy8gVGl0bGUgTGluZSBTcGFjaW5nXG5cdGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCA/IG1vZGVsLnRpdGxlTWFyZ2luQm90dG9tIDogMDsgLy8gVGl0bGUncyBib3R0b20gTWFyZ2luXG5cdGhlaWdodCArPSBjb21iaW5lZEJvZHlMZW5ndGggKiBib2R5Rm9udFNpemU7IC8vIEJvZHkgTGluZXNcblx0aGVpZ2h0ICs9IGNvbWJpbmVkQm9keUxlbmd0aCA/IChjb21iaW5lZEJvZHlMZW5ndGggLSAxKSAqIG1vZGVsLmJvZHlTcGFjaW5nIDogMDsgLy8gQm9keSBMaW5lIFNwYWNpbmdcblx0aGVpZ2h0ICs9IGZvb3RlckxpbmVDb3VudCA/IG1vZGVsLmZvb3Rlck1hcmdpblRvcCA6IDA7IC8vIEZvb3RlciBNYXJnaW5cblx0aGVpZ2h0ICs9IGZvb3RlckxpbmVDb3VudCAqIChmb290ZXJGb250U2l6ZSk7IC8vIEZvb3RlciBMaW5lc1xuXHRoZWlnaHQgKz0gZm9vdGVyTGluZUNvdW50ID8gKGZvb3RlckxpbmVDb3VudCAtIDEpICogbW9kZWwuZm9vdGVyU3BhY2luZyA6IDA7IC8vIEZvb3RlciBMaW5lIFNwYWNpbmdcblxuXHQvLyBUaXRsZSB3aWR0aFxuXHR2YXIgd2lkdGhQYWRkaW5nID0gMDtcblx0dmFyIG1heExpbmVXaWR0aCA9IGZ1bmN0aW9uKGxpbmUpIHtcblx0XHR3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBjdHgubWVhc3VyZVRleHQobGluZSkud2lkdGggKyB3aWR0aFBhZGRpbmcpO1xuXHR9O1xuXG5cdGN0eC5mb250ID0gaGVscGVycyQxLmZvbnRTdHJpbmcodGl0bGVGb250U2l6ZSwgbW9kZWwuX3RpdGxlRm9udFN0eWxlLCBtb2RlbC5fdGl0bGVGb250RmFtaWx5KTtcblx0aGVscGVycyQxLmVhY2gobW9kZWwudGl0bGUsIG1heExpbmVXaWR0aCk7XG5cblx0Ly8gQm9keSB3aWR0aFxuXHRjdHguZm9udCA9IGhlbHBlcnMkMS5mb250U3RyaW5nKGJvZHlGb250U2l6ZSwgbW9kZWwuX2JvZHlGb250U3R5bGUsIG1vZGVsLl9ib2R5Rm9udEZhbWlseSk7XG5cdGhlbHBlcnMkMS5lYWNoKG1vZGVsLmJlZm9yZUJvZHkuY29uY2F0KG1vZGVsLmFmdGVyQm9keSksIG1heExpbmVXaWR0aCk7XG5cblx0Ly8gQm9keSBsaW5lcyBtYXkgaW5jbHVkZSBzb21lIGV4dHJhIHdpZHRoIGR1ZSB0byB0aGUgY29sb3IgYm94XG5cdHdpZHRoUGFkZGluZyA9IG1vZGVsLmRpc3BsYXlDb2xvcnMgPyAoYm9keUZvbnRTaXplICsgMikgOiAwO1xuXHRoZWxwZXJzJDEuZWFjaChib2R5LCBmdW5jdGlvbihib2R5SXRlbSkge1xuXHRcdGhlbHBlcnMkMS5lYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcblx0XHRoZWxwZXJzJDEuZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcblx0XHRoZWxwZXJzJDEuZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcblx0fSk7XG5cblx0Ly8gUmVzZXQgYmFjayB0byAwXG5cdHdpZHRoUGFkZGluZyA9IDA7XG5cblx0Ly8gRm9vdGVyIHdpZHRoXG5cdGN0eC5mb250ID0gaGVscGVycyQxLmZvbnRTdHJpbmcoZm9vdGVyRm9udFNpemUsIG1vZGVsLl9mb290ZXJGb250U3R5bGUsIG1vZGVsLl9mb290ZXJGb250RmFtaWx5KTtcblx0aGVscGVycyQxLmVhY2gobW9kZWwuZm9vdGVyLCBtYXhMaW5lV2lkdGgpO1xuXG5cdC8vIEFkZCBwYWRkaW5nXG5cdHdpZHRoICs9IDIgKiBtb2RlbC54UGFkZGluZztcblxuXHRyZXR1cm4ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodFxuXHR9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgdGhlIGFsaWdubWVudCBvZiBhIHRvb2x0aXAgZ2l2ZW4gdGhlIHNpemVcbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lQWxpZ25tZW50KHRvb2x0aXAsIHNpemUpIHtcblx0dmFyIG1vZGVsID0gdG9vbHRpcC5fbW9kZWw7XG5cdHZhciBjaGFydCA9IHRvb2x0aXAuX2NoYXJ0O1xuXHR2YXIgY2hhcnRBcmVhID0gdG9vbHRpcC5fY2hhcnQuY2hhcnRBcmVhO1xuXHR2YXIgeEFsaWduID0gJ2NlbnRlcic7XG5cdHZhciB5QWxpZ24gPSAnY2VudGVyJztcblxuXHRpZiAobW9kZWwueSA8IHNpemUuaGVpZ2h0KSB7XG5cdFx0eUFsaWduID0gJ3RvcCc7XG5cdH0gZWxzZSBpZiAobW9kZWwueSA+IChjaGFydC5oZWlnaHQgLSBzaXplLmhlaWdodCkpIHtcblx0XHR5QWxpZ24gPSAnYm90dG9tJztcblx0fVxuXG5cdHZhciBsZiwgcmY7IC8vIGZ1bmN0aW9ucyB0byBkZXRlcm1pbmUgbGVmdCwgcmlnaHQgYWxpZ25tZW50XG5cdHZhciBvbGYsIG9yZjsgLy8gZnVuY3Rpb25zIHRvIGRldGVybWluZSBpZiBsZWZ0L3JpZ2h0IGFsaWdubWVudCBjYXVzZXMgdG9vbHRpcCB0byBnbyBvdXRzaWRlIGNoYXJ0XG5cdHZhciB5ZjsgLy8gZnVuY3Rpb24gdG8gZ2V0IHRoZSB5IGFsaWdubWVudCBpZiB0aGUgdG9vbHRpcCBnb2VzIG91dHNpZGUgb2YgdGhlIGxlZnQgb3IgcmlnaHQgZWRnZXNcblx0dmFyIG1pZFggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMjtcblx0dmFyIG1pZFkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcblxuXHRpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuXHRcdGxmID0gZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIHggPD0gbWlkWDtcblx0XHR9O1xuXHRcdHJmID0gZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIHggPiBtaWRYO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0bGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA8PSAoc2l6ZS53aWR0aCAvIDIpO1xuXHRcdH07XG5cdFx0cmYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA+PSAoY2hhcnQud2lkdGggLSAoc2l6ZS53aWR0aCAvIDIpKTtcblx0XHR9O1xuXHR9XG5cblx0b2xmID0gZnVuY3Rpb24oeCkge1xuXHRcdHJldHVybiB4ICsgc2l6ZS53aWR0aCArIG1vZGVsLmNhcmV0U2l6ZSArIG1vZGVsLmNhcmV0UGFkZGluZyA+IGNoYXJ0LndpZHRoO1xuXHR9O1xuXHRvcmYgPSBmdW5jdGlvbih4KSB7XG5cdFx0cmV0dXJuIHggLSBzaXplLndpZHRoIC0gbW9kZWwuY2FyZXRTaXplIC0gbW9kZWwuY2FyZXRQYWRkaW5nIDwgMDtcblx0fTtcblx0eWYgPSBmdW5jdGlvbih5KSB7XG5cdFx0cmV0dXJuIHkgPD0gbWlkWSA/ICd0b3AnIDogJ2JvdHRvbSc7XG5cdH07XG5cblx0aWYgKGxmKG1vZGVsLngpKSB7XG5cdFx0eEFsaWduID0gJ2xlZnQnO1xuXG5cdFx0Ly8gSXMgdG9vbHRpcCB0b28gd2lkZSBhbmQgZ29lcyBvdmVyIHRoZSByaWdodCBzaWRlIG9mIHRoZSBjaGFydC4/XG5cdFx0aWYgKG9sZihtb2RlbC54KSkge1xuXHRcdFx0eEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHR5QWxpZ24gPSB5Zihtb2RlbC55KTtcblx0XHR9XG5cdH0gZWxzZSBpZiAocmYobW9kZWwueCkpIHtcblx0XHR4QWxpZ24gPSAncmlnaHQnO1xuXG5cdFx0Ly8gSXMgdG9vbHRpcCB0b28gd2lkZSBhbmQgZ29lcyBvdXRzaWRlIGxlZnQgZWRnZSBvZiBjYW52YXM/XG5cdFx0aWYgKG9yZihtb2RlbC54KSkge1xuXHRcdFx0eEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHR5QWxpZ24gPSB5Zihtb2RlbC55KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgb3B0cyA9IHRvb2x0aXAuX29wdGlvbnM7XG5cdHJldHVybiB7XG5cdFx0eEFsaWduOiBvcHRzLnhBbGlnbiA/IG9wdHMueEFsaWduIDogeEFsaWduLFxuXHRcdHlBbGlnbjogb3B0cy55QWxpZ24gPyBvcHRzLnlBbGlnbiA6IHlBbGlnblxuXHR9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgdGhlIGxvY2F0aW9uIGEgdG9vbHRpcCBuZWVkcyB0byBiZSBwbGFjZWQgYXQgZ2l2ZW4gdGhlIGluaXRpYWwgcG9zaXRpb24gKHZpYSB0aGUgdm0pIGFuZCB0aGUgc2l6ZSBhbmQgYWxpZ25tZW50XG4gKi9cbmZ1bmN0aW9uIGdldEJhY2tncm91bmRQb2ludCh2bSwgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuXHQvLyBCYWNrZ3JvdW5kIFBvc2l0aW9uXG5cdHZhciB4ID0gdm0ueDtcblx0dmFyIHkgPSB2bS55O1xuXG5cdHZhciBjYXJldFNpemUgPSB2bS5jYXJldFNpemU7XG5cdHZhciBjYXJldFBhZGRpbmcgPSB2bS5jYXJldFBhZGRpbmc7XG5cdHZhciBjb3JuZXJSYWRpdXMgPSB2bS5jb3JuZXJSYWRpdXM7XG5cdHZhciB4QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuXHR2YXIgeUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcblx0dmFyIHBhZGRpbmdBbmRTaXplID0gY2FyZXRTaXplICsgY2FyZXRQYWRkaW5nO1xuXHR2YXIgcmFkaXVzQW5kUGFkZGluZyA9IGNvcm5lclJhZGl1cyArIGNhcmV0UGFkZGluZztcblxuXHRpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0eCAtPSBzaXplLndpZHRoO1xuXHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHR4IC09IChzaXplLndpZHRoIC8gMik7XG5cdFx0aWYgKHggKyBzaXplLndpZHRoID4gY2hhcnQud2lkdGgpIHtcblx0XHRcdHggPSBjaGFydC53aWR0aCAtIHNpemUud2lkdGg7XG5cdFx0fVxuXHRcdGlmICh4IDwgMCkge1xuXHRcdFx0eCA9IDA7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcblx0XHR5ICs9IHBhZGRpbmdBbmRTaXplO1xuXHR9IGVsc2UgaWYgKHlBbGlnbiA9PT0gJ2JvdHRvbScpIHtcblx0XHR5IC09IHNpemUuaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG5cdH0gZWxzZSB7XG5cdFx0eSAtPSAoc2l6ZS5oZWlnaHQgLyAyKTtcblx0fVxuXG5cdGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0aWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0XHR4ICs9IHBhZGRpbmdBbmRTaXplO1xuXHRcdH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0XHR4IC09IHBhZGRpbmdBbmRTaXplO1xuXHRcdH1cblx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdHggLT0gcmFkaXVzQW5kUGFkZGluZztcblx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHR4ICs9IHJhZGl1c0FuZFBhZGRpbmc7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHg6IHgsXG5cdFx0eTogeVxuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXRBbGlnbmVkWCh2bSwgYWxpZ24pIHtcblx0cmV0dXJuIGFsaWduID09PSAnY2VudGVyJ1xuXHRcdD8gdm0ueCArIHZtLndpZHRoIC8gMlxuXHRcdDogYWxpZ24gPT09ICdyaWdodCdcblx0XHRcdD8gdm0ueCArIHZtLndpZHRoIC0gdm0ueFBhZGRpbmdcblx0XHRcdDogdm0ueCArIHZtLnhQYWRkaW5nO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBidWlsZCBiZWZvcmUgYW5kIGFmdGVyIGJvZHkgbGluZXNcbiAqL1xuZnVuY3Rpb24gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoY2FsbGJhY2spIHtcblx0cmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuXG52YXIgZXhwb3J0cyQ0ID0gY29yZV9lbGVtZW50LmV4dGVuZCh7XG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX21vZGVsID0gZ2V0QmFzZU1vZGVsKHRoaXMuX29wdGlvbnMpO1xuXHRcdHRoaXMuX2xhc3RBY3RpdmUgPSBbXTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIHRpdGxlXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldFRpdGxlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUuX29wdGlvbnM7XG5cdFx0dmFyIGNhbGxiYWNrcyA9IG9wdHMuY2FsbGJhY2tzO1xuXG5cdFx0dmFyIGJlZm9yZVRpdGxlID0gY2FsbGJhY2tzLmJlZm9yZVRpdGxlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciB0aXRsZSA9IGNhbGxiYWNrcy50aXRsZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHR2YXIgYWZ0ZXJUaXRsZSA9IGNhbGxiYWNrcy5hZnRlclRpdGxlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0dmFyIGxpbmVzID0gW107XG5cdFx0bGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlVGl0bGUpKTtcblx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyh0aXRsZSkpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyVGl0bGUpKTtcblxuXHRcdHJldHVybiBsaW5lcztcblx0fSxcblxuXHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRnZXRCZWZvcmVCb2R5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXModGhpcy5fb3B0aW9ucy5jYWxsYmFja3MuYmVmb3JlQm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fSxcblxuXHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRnZXRCb2R5OiBmdW5jdGlvbih0b29sdGlwSXRlbXMsIGRhdGEpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjYWxsYmFja3MgPSBtZS5fb3B0aW9ucy5jYWxsYmFja3M7XG5cdFx0dmFyIGJvZHlJdGVtcyA9IFtdO1xuXG5cdFx0aGVscGVycyQxLmVhY2godG9vbHRpcEl0ZW1zLCBmdW5jdGlvbih0b29sdGlwSXRlbSkge1xuXHRcdFx0dmFyIGJvZHlJdGVtID0ge1xuXHRcdFx0XHRiZWZvcmU6IFtdLFxuXHRcdFx0XHRsaW5lczogW10sXG5cdFx0XHRcdGFmdGVyOiBbXVxuXHRcdFx0fTtcblx0XHRcdHB1c2hPckNvbmNhdChib2R5SXRlbS5iZWZvcmUsIHNwbGl0TmV3bGluZXMoY2FsbGJhY2tzLmJlZm9yZUxhYmVsLmNhbGwobWUsIHRvb2x0aXBJdGVtLCBkYXRhKSkpO1xuXHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBjYWxsYmFja3MubGFiZWwuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIGRhdGEpKTtcblx0XHRcdHB1c2hPckNvbmNhdChib2R5SXRlbS5hZnRlciwgc3BsaXROZXdsaW5lcyhjYWxsYmFja3MuYWZ0ZXJMYWJlbC5jYWxsKG1lLCB0b29sdGlwSXRlbSwgZGF0YSkpKTtcblxuXHRcdFx0Ym9keUl0ZW1zLnB1c2goYm9keUl0ZW0pO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGJvZHlJdGVtcztcblx0fSxcblxuXHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRnZXRBZnRlckJvZHk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyh0aGlzLl9vcHRpb25zLmNhbGxiYWNrcy5hZnRlckJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBmb290ZXIgYW5kIGJlZm9yZUZvb3RlciBhbmQgYWZ0ZXJGb290ZXIgbGluZXNcblx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0Z2V0Rm9vdGVyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjYWxsYmFja3MgPSBtZS5fb3B0aW9ucy5jYWxsYmFja3M7XG5cblx0XHR2YXIgYmVmb3JlRm9vdGVyID0gY2FsbGJhY2tzLmJlZm9yZUZvb3Rlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHR2YXIgZm9vdGVyID0gY2FsbGJhY2tzLmZvb3Rlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHR2YXIgYWZ0ZXJGb290ZXIgPSBjYWxsYmFja3MuYWZ0ZXJGb290ZXIuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHR2YXIgbGluZXMgPSBbXTtcblx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVGb290ZXIpKTtcblx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcblx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlckZvb3RlcikpO1xuXG5cdFx0cmV0dXJuIGxpbmVzO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24oY2hhbmdlZCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5fb3B0aW9ucztcblxuXHRcdC8vIE5lZWQgdG8gcmVnZW5lcmF0ZSB0aGUgbW9kZWwgYmVjYXVzZSBpdHMgZmFzdGVyIHRoYW4gdXNpbmcgZXh0ZW5kIGFuZCBpdCBpcyBuZWNlc3NhcnkgZHVlIHRvIHRoZSBvcHRpbWl6YXRpb24gaW4gQ2hhcnQuRWxlbWVudC50cmFuc2l0aW9uXG5cdFx0Ly8gdGhhdCBkb2VzIF92aWV3ID0gX21vZGVsIGlmIGVhc2UgPT09IDEuIFRoaXMgY2F1c2VzIHRoZSAybmQgdG9vbHRpcCB1cGRhdGUgdG8gc2V0IHByb3BlcnRpZXMgaW4gYm90aCB0aGUgdmlldyBhbmQgbW9kZWwgYXQgdGhlIHNhbWUgdGltZVxuXHRcdC8vIHdoaWNoIGJyZWFrcyBhbnkgYW5pbWF0aW9ucy5cblx0XHR2YXIgZXhpc3RpbmdNb2RlbCA9IG1lLl9tb2RlbDtcblx0XHR2YXIgbW9kZWwgPSBtZS5fbW9kZWwgPSBnZXRCYXNlTW9kZWwob3B0cyk7XG5cdFx0dmFyIGFjdGl2ZSA9IG1lLl9hY3RpdmU7XG5cblx0XHR2YXIgZGF0YSA9IG1lLl9kYXRhO1xuXG5cdFx0Ly8gSW4gdGhlIGNhc2Ugd2hlcmUgYWN0aXZlLmxlbmd0aCA9PT0gMCB3ZSBuZWVkIHRvIGtlZXAgdGhlc2UgYXQgZXhpc3RpbmcgdmFsdWVzIGZvciBnb29kIGFuaW1hdGlvbnNcblx0XHR2YXIgYWxpZ25tZW50ID0ge1xuXHRcdFx0eEFsaWduOiBleGlzdGluZ01vZGVsLnhBbGlnbixcblx0XHRcdHlBbGlnbjogZXhpc3RpbmdNb2RlbC55QWxpZ25cblx0XHR9O1xuXHRcdHZhciBiYWNrZ3JvdW5kUG9pbnQgPSB7XG5cdFx0XHR4OiBleGlzdGluZ01vZGVsLngsXG5cdFx0XHR5OiBleGlzdGluZ01vZGVsLnlcblx0XHR9O1xuXHRcdHZhciB0b29sdGlwU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiBleGlzdGluZ01vZGVsLndpZHRoLFxuXHRcdFx0aGVpZ2h0OiBleGlzdGluZ01vZGVsLmhlaWdodFxuXHRcdH07XG5cdFx0dmFyIHRvb2x0aXBQb3NpdGlvbiA9IHtcblx0XHRcdHg6IGV4aXN0aW5nTW9kZWwuY2FyZXRYLFxuXHRcdFx0eTogZXhpc3RpbmdNb2RlbC5jYXJldFlcblx0XHR9O1xuXG5cdFx0dmFyIGksIGxlbjtcblxuXHRcdGlmIChhY3RpdmUubGVuZ3RoKSB7XG5cdFx0XHRtb2RlbC5vcGFjaXR5ID0gMTtcblxuXHRcdFx0dmFyIGxhYmVsQ29sb3JzID0gW107XG5cdFx0XHR2YXIgbGFiZWxUZXh0Q29sb3JzID0gW107XG5cdFx0XHR0b29sdGlwUG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRzLnBvc2l0aW9uXS5jYWxsKG1lLCBhY3RpdmUsIG1lLl9ldmVudFBvc2l0aW9uKTtcblxuXHRcdFx0dmFyIHRvb2x0aXBJdGVtcyA9IFtdO1xuXHRcdFx0Zm9yIChpID0gMCwgbGVuID0gYWN0aXZlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHRcdHRvb2x0aXBJdGVtcy5wdXNoKGNyZWF0ZVRvb2x0aXBJdGVtKGFjdGl2ZVtpXSkpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGUgdXNlciBwcm92aWRlZCBhIGZpbHRlciBmdW5jdGlvbiwgdXNlIGl0IHRvIG1vZGlmeSB0aGUgdG9vbHRpcCBpdGVtc1xuXHRcdFx0aWYgKG9wdHMuZmlsdGVyKSB7XG5cdFx0XHRcdHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5maWx0ZXIoZnVuY3Rpb24oYSkge1xuXHRcdFx0XHRcdHJldHVybiBvcHRzLmZpbHRlcihhLCBkYXRhKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZSB1c2VyIHByb3ZpZGVkIGEgc29ydGluZyBmdW5jdGlvbiwgdXNlIGl0IHRvIG1vZGlmeSB0aGUgdG9vbHRpcCBpdGVtc1xuXHRcdFx0aWYgKG9wdHMuaXRlbVNvcnQpIHtcblx0XHRcdFx0dG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0XHRcdHJldHVybiBvcHRzLml0ZW1Tb3J0KGEsIGIsIGRhdGEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGNvbG9ycyBmb3IgYm94ZXNcblx0XHRcdGhlbHBlcnMkMS5lYWNoKHRvb2x0aXBJdGVtcywgZnVuY3Rpb24odG9vbHRpcEl0ZW0pIHtcblx0XHRcdFx0bGFiZWxDb2xvcnMucHVzaChvcHRzLmNhbGxiYWNrcy5sYWJlbENvbG9yLmNhbGwobWUsIHRvb2x0aXBJdGVtLCBtZS5fY2hhcnQpKTtcblx0XHRcdFx0bGFiZWxUZXh0Q29sb3JzLnB1c2gob3B0cy5jYWxsYmFja3MubGFiZWxUZXh0Q29sb3IuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIG1lLl9jaGFydCkpO1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0Ly8gQnVpbGQgdGhlIFRleHQgTGluZXNcblx0XHRcdG1vZGVsLnRpdGxlID0gbWUuZ2V0VGl0bGUodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblx0XHRcdG1vZGVsLmJlZm9yZUJvZHkgPSBtZS5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgZGF0YSk7XG5cdFx0XHRtb2RlbC5ib2R5ID0gbWUuZ2V0Qm9keSh0b29sdGlwSXRlbXMsIGRhdGEpO1xuXHRcdFx0bW9kZWwuYWZ0ZXJCb2R5ID0gbWUuZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgZGF0YSk7XG5cdFx0XHRtb2RlbC5mb290ZXIgPSBtZS5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblxuXHRcdFx0Ly8gSW5pdGlhbCBwb3NpdGlvbmluZyBhbmQgY29sb3JzXG5cdFx0XHRtb2RlbC54ID0gdG9vbHRpcFBvc2l0aW9uLng7XG5cdFx0XHRtb2RlbC55ID0gdG9vbHRpcFBvc2l0aW9uLnk7XG5cdFx0XHRtb2RlbC5jYXJldFBhZGRpbmcgPSBvcHRzLmNhcmV0UGFkZGluZztcblx0XHRcdG1vZGVsLmxhYmVsQ29sb3JzID0gbGFiZWxDb2xvcnM7XG5cdFx0XHRtb2RlbC5sYWJlbFRleHRDb2xvcnMgPSBsYWJlbFRleHRDb2xvcnM7XG5cblx0XHRcdC8vIGRhdGEgcG9pbnRzXG5cdFx0XHRtb2RlbC5kYXRhUG9pbnRzID0gdG9vbHRpcEl0ZW1zO1xuXG5cdFx0XHQvLyBXZSBuZWVkIHRvIGRldGVybWluZSBhbGlnbm1lbnQgb2YgdGhlIHRvb2x0aXBcblx0XHRcdHRvb2x0aXBTaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgbW9kZWwpO1xuXHRcdFx0YWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KHRoaXMsIHRvb2x0aXBTaXplKTtcblx0XHRcdC8vIEZpbmFsIFNpemUgYW5kIFBvc2l0aW9uXG5cdFx0XHRiYWNrZ3JvdW5kUG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQobW9kZWwsIHRvb2x0aXBTaXplLCBhbGlnbm1lbnQsIG1lLl9jaGFydCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1vZGVsLm9wYWNpdHkgPSAwO1xuXHRcdH1cblxuXHRcdG1vZGVsLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG5cdFx0bW9kZWwueUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcblx0XHRtb2RlbC54ID0gYmFja2dyb3VuZFBvaW50Lng7XG5cdFx0bW9kZWwueSA9IGJhY2tncm91bmRQb2ludC55O1xuXHRcdG1vZGVsLndpZHRoID0gdG9vbHRpcFNpemUud2lkdGg7XG5cdFx0bW9kZWwuaGVpZ2h0ID0gdG9vbHRpcFNpemUuaGVpZ2h0O1xuXG5cdFx0Ly8gUG9pbnQgd2hlcmUgdGhlIGNhcmV0IG9uIHRoZSB0b29sdGlwIHBvaW50cyB0b1xuXHRcdG1vZGVsLmNhcmV0WCA9IHRvb2x0aXBQb3NpdGlvbi54O1xuXHRcdG1vZGVsLmNhcmV0WSA9IHRvb2x0aXBQb3NpdGlvbi55O1xuXG5cdFx0bWUuX21vZGVsID0gbW9kZWw7XG5cblx0XHRpZiAoY2hhbmdlZCAmJiBvcHRzLmN1c3RvbSkge1xuXHRcdFx0b3B0cy5jdXN0b20uY2FsbChtZSwgbW9kZWwpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHRkcmF3Q2FyZXQ6IGZ1bmN0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSkge1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgY2FyZXRQb3NpdGlvbiA9IHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIHZtKTtcblxuXHRcdGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG5cdFx0Y3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngyLCBjYXJldFBvc2l0aW9uLnkyKTtcblx0XHRjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDMsIGNhcmV0UG9zaXRpb24ueTMpO1xuXHR9LFxuXHRnZXRDYXJldFBvc2l0aW9uOiBmdW5jdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIHZtKSB7XG5cdFx0dmFyIHgxLCB4MiwgeDMsIHkxLCB5MiwgeTM7XG5cdFx0dmFyIGNhcmV0U2l6ZSA9IHZtLmNhcmV0U2l6ZTtcblx0XHR2YXIgY29ybmVyUmFkaXVzID0gdm0uY29ybmVyUmFkaXVzO1xuXHRcdHZhciB4QWxpZ24gPSB2bS54QWxpZ247XG5cdFx0dmFyIHlBbGlnbiA9IHZtLnlBbGlnbjtcblx0XHR2YXIgcHRYID0gdG9vbHRpcFBvaW50Lng7XG5cdFx0dmFyIHB0WSA9IHRvb2x0aXBQb2ludC55O1xuXHRcdHZhciB3aWR0aCA9IHNpemUud2lkdGg7XG5cdFx0dmFyIGhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG5cdFx0aWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHRcdHkyID0gcHRZICsgKGhlaWdodCAvIDIpO1xuXG5cdFx0XHRpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcblx0XHRcdFx0eDEgPSBwdFg7XG5cdFx0XHRcdHgyID0geDEgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDE7XG5cblx0XHRcdFx0eTEgPSB5MiArIGNhcmV0U2l6ZTtcblx0XHRcdFx0eTMgPSB5MiAtIGNhcmV0U2l6ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHgxID0gcHRYICsgd2lkdGg7XG5cdFx0XHRcdHgyID0geDEgKyBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDE7XG5cblx0XHRcdFx0eTEgPSB5MiAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eTMgPSB5MiArIGNhcmV0U2l6ZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0XHRcdHgyID0gcHRYICsgY29ybmVyUmFkaXVzICsgKGNhcmV0U2l6ZSk7XG5cdFx0XHRcdHgxID0geDIgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdFx0XHR4MiA9IHB0WCArIHdpZHRoIC0gY29ybmVyUmFkaXVzIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR4MSA9IHgyIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR4MyA9IHgyICsgY2FyZXRTaXplO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eDIgPSB2bS5jYXJldFg7XG5cdFx0XHRcdHgxID0geDIgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoeUFsaWduID09PSAndG9wJykge1xuXHRcdFx0XHR5MSA9IHB0WTtcblx0XHRcdFx0eTIgPSB5MSAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eTMgPSB5MTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHkxID0gcHRZICsgaGVpZ2h0O1xuXHRcdFx0XHR5MiA9IHkxICsgY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkxO1xuXHRcdFx0XHQvLyBpbnZlcnQgZHJhd2luZyBvcmRlclxuXHRcdFx0XHR2YXIgdG1wID0geDM7XG5cdFx0XHRcdHgzID0geDE7XG5cdFx0XHRcdHgxID0gdG1wO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4ge3gxOiB4MSwgeDI6IHgyLCB4MzogeDMsIHkxOiB5MSwgeTI6IHkyLCB5MzogeTN9O1xuXHR9LFxuXG5cdGRyYXdUaXRsZTogZnVuY3Rpb24ocHQsIHZtLCBjdHgpIHtcblx0XHR2YXIgdGl0bGUgPSB2bS50aXRsZTtcblx0XHR2YXIgbGVuZ3RoID0gdGl0bGUubGVuZ3RoO1xuXHRcdHZhciB0aXRsZUZvbnRTaXplLCB0aXRsZVNwYWNpbmcsIGk7XG5cblx0XHRpZiAobGVuZ3RoKSB7XG5cdFx0XHR2YXIgcnRsSGVscGVyID0gZ2V0UnRsSGVscGVyKHZtLnJ0bCwgdm0ueCwgdm0ud2lkdGgpO1xuXG5cdFx0XHRwdC54ID0gZ2V0QWxpZ25lZFgodm0sIHZtLl90aXRsZUFsaWduKTtcblxuXHRcdFx0Y3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24odm0uX3RpdGxlQWxpZ24pO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXG5cdFx0XHR0aXRsZUZvbnRTaXplID0gdm0udGl0bGVGb250U2l6ZTtcblx0XHRcdHRpdGxlU3BhY2luZyA9IHZtLnRpdGxlU3BhY2luZztcblxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLnRpdGxlRm9udENvbG9yO1xuXHRcdFx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyh0aXRsZUZvbnRTaXplLCB2bS5fdGl0bGVGb250U3R5bGUsIHZtLl90aXRsZUZvbnRGYW1pbHkpO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIHRpdGxlRm9udFNpemUgLyAyKTtcblx0XHRcdFx0cHQueSArPSB0aXRsZUZvbnRTaXplICsgdGl0bGVTcGFjaW5nOyAvLyBMaW5lIEhlaWdodCBhbmQgc3BhY2luZ1xuXG5cdFx0XHRcdGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG5cdFx0XHRcdFx0cHQueSArPSB2bS50aXRsZU1hcmdpbkJvdHRvbSAtIHRpdGxlU3BhY2luZzsgLy8gSWYgTGFzdCwgYWRkIG1hcmdpbiwgcmVtb3ZlIHNwYWNpbmdcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRkcmF3Qm9keTogZnVuY3Rpb24ocHQsIHZtLCBjdHgpIHtcblx0XHR2YXIgYm9keUZvbnRTaXplID0gdm0uYm9keUZvbnRTaXplO1xuXHRcdHZhciBib2R5U3BhY2luZyA9IHZtLmJvZHlTcGFjaW5nO1xuXHRcdHZhciBib2R5QWxpZ24gPSB2bS5fYm9keUFsaWduO1xuXHRcdHZhciBib2R5ID0gdm0uYm9keTtcblx0XHR2YXIgZHJhd0NvbG9yQm94ZXMgPSB2bS5kaXNwbGF5Q29sb3JzO1xuXHRcdHZhciB4TGluZVBhZGRpbmcgPSAwO1xuXHRcdHZhciBjb2xvclggPSBkcmF3Q29sb3JCb3hlcyA/IGdldEFsaWduZWRYKHZtLCAnbGVmdCcpIDogMDtcblxuXHRcdHZhciBydGxIZWxwZXIgPSBnZXRSdGxIZWxwZXIodm0ucnRsLCB2bS54LCB2bS53aWR0aCk7XG5cblx0XHR2YXIgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG5cdFx0XHRjdHguZmlsbFRleHQobGluZSwgcnRsSGVscGVyLngocHQueCArIHhMaW5lUGFkZGluZyksIHB0LnkgKyBib2R5Rm9udFNpemUgLyAyKTtcblx0XHRcdHB0LnkgKz0gYm9keUZvbnRTaXplICsgYm9keVNwYWNpbmc7XG5cdFx0fTtcblxuXHRcdHZhciBib2R5SXRlbSwgdGV4dENvbG9yLCBsYWJlbENvbG9ycywgbGluZXMsIGksIGosIGlsZW4sIGpsZW47XG5cdFx0dmFyIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uID0gcnRsSGVscGVyLnRleHRBbGlnbihib2R5QWxpZ24pO1xuXG5cdFx0Y3R4LnRleHRBbGlnbiA9IGJvZHlBbGlnbjtcblx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyhib2R5Rm9udFNpemUsIHZtLl9ib2R5Rm9udFN0eWxlLCB2bS5fYm9keUZvbnRGYW1pbHkpO1xuXG5cdFx0cHQueCA9IGdldEFsaWduZWRYKHZtLCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbik7XG5cblx0XHQvLyBCZWZvcmUgYm9keSBsaW5lc1xuXHRcdGN0eC5maWxsU3R5bGUgPSB2bS5ib2R5Rm9udENvbG9yO1xuXHRcdGhlbHBlcnMkMS5lYWNoKHZtLmJlZm9yZUJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcblxuXHRcdHhMaW5lUGFkZGluZyA9IGRyYXdDb2xvckJveGVzICYmIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uICE9PSAncmlnaHQnXG5cdFx0XHQ/IGJvZHlBbGlnbiA9PT0gJ2NlbnRlcicgPyAoYm9keUZvbnRTaXplIC8gMiArIDEpIDogKGJvZHlGb250U2l6ZSArIDIpXG5cdFx0XHQ6IDA7XG5cblx0XHQvLyBEcmF3IGJvZHkgbGluZXMgbm93XG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGJvZHkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRib2R5SXRlbSA9IGJvZHlbaV07XG5cdFx0XHR0ZXh0Q29sb3IgPSB2bS5sYWJlbFRleHRDb2xvcnNbaV07XG5cdFx0XHRsYWJlbENvbG9ycyA9IHZtLmxhYmVsQ29sb3JzW2ldO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xuXHRcdFx0aGVscGVycyQxLmVhY2goYm9keUl0ZW0uYmVmb3JlLCBmaWxsTGluZU9mVGV4dCk7XG5cblx0XHRcdGxpbmVzID0gYm9keUl0ZW0ubGluZXM7XG5cdFx0XHRmb3IgKGogPSAwLCBqbGVuID0gbGluZXMubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG5cdFx0XHRcdC8vIERyYXcgTGVnZW5kLWxpa2UgYm94ZXMgaWYgbmVlZGVkXG5cdFx0XHRcdGlmIChkcmF3Q29sb3JCb3hlcykge1xuXHRcdFx0XHRcdHZhciBydGxDb2xvclggPSBydGxIZWxwZXIueChjb2xvclgpO1xuXG5cdFx0XHRcdFx0Ly8gRmlsbCBhIHdoaXRlIHJlY3Qgc28gdGhhdCBjb2xvdXJzIG1lcmdlIG5pY2VseSBpZiB0aGUgb3BhY2l0eSBpcyA8IDFcblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdm0ubGVnZW5kQ29sb3JCYWNrZ3JvdW5kO1xuXHRcdFx0XHRcdGN0eC5maWxsUmVjdChydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJvZHlGb250U2l6ZSksIHB0LnksIGJvZHlGb250U2l6ZSwgYm9keUZvbnRTaXplKTtcblxuXHRcdFx0XHRcdC8vIEJvcmRlclxuXHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSAxO1xuXHRcdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3JzLmJvcmRlckNvbG9yO1xuXHRcdFx0XHRcdGN0eC5zdHJva2VSZWN0KHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm9keUZvbnRTaXplKSwgcHQueSwgYm9keUZvbnRTaXplLCBib2R5Rm9udFNpemUpO1xuXG5cdFx0XHRcdFx0Ly8gSW5uZXIgc3F1YXJlXG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3JzLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdFx0XHRjdHguZmlsbFJlY3QocnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLnhQbHVzKHJ0bENvbG9yWCwgMSksIGJvZHlGb250U2l6ZSAtIDIpLCBwdC55ICsgMSwgYm9keUZvbnRTaXplIC0gMiwgYm9keUZvbnRTaXplIC0gMik7XG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZpbGxMaW5lT2ZUZXh0KGxpbmVzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0aGVscGVycyQxLmVhY2goYm9keUl0ZW0uYWZ0ZXIsIGZpbGxMaW5lT2ZUZXh0KTtcblx0XHR9XG5cblx0XHQvLyBSZXNldCBiYWNrIHRvIDAgZm9yIGFmdGVyIGJvZHlcblx0XHR4TGluZVBhZGRpbmcgPSAwO1xuXG5cdFx0Ly8gQWZ0ZXIgYm9keSBsaW5lc1xuXHRcdGhlbHBlcnMkMS5lYWNoKHZtLmFmdGVyQm9keSwgZmlsbExpbmVPZlRleHQpO1xuXHRcdHB0LnkgLT0gYm9keVNwYWNpbmc7IC8vIFJlbW92ZSBsYXN0IGJvZHkgc3BhY2luZ1xuXHR9LFxuXG5cdGRyYXdGb290ZXI6IGZ1bmN0aW9uKHB0LCB2bSwgY3R4KSB7XG5cdFx0dmFyIGZvb3RlciA9IHZtLmZvb3Rlcjtcblx0XHR2YXIgbGVuZ3RoID0gZm9vdGVyLmxlbmd0aDtcblx0XHR2YXIgZm9vdGVyRm9udFNpemUsIGk7XG5cblx0XHRpZiAobGVuZ3RoKSB7XG5cdFx0XHR2YXIgcnRsSGVscGVyID0gZ2V0UnRsSGVscGVyKHZtLnJ0bCwgdm0ueCwgdm0ud2lkdGgpO1xuXG5cdFx0XHRwdC54ID0gZ2V0QWxpZ25lZFgodm0sIHZtLl9mb290ZXJBbGlnbik7XG5cdFx0XHRwdC55ICs9IHZtLmZvb3Rlck1hcmdpblRvcDtcblxuXHRcdFx0Y3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24odm0uX2Zvb3RlckFsaWduKTtcblx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuXHRcdFx0Zm9vdGVyRm9udFNpemUgPSB2bS5mb290ZXJGb250U2l6ZTtcblxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmZvb3RlckZvbnRDb2xvcjtcblx0XHRcdGN0eC5mb250ID0gaGVscGVycyQxLmZvbnRTdHJpbmcoZm9vdGVyRm9udFNpemUsIHZtLl9mb290ZXJGb250U3R5bGUsIHZtLl9mb290ZXJGb250RmFtaWx5KTtcblxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGN0eC5maWxsVGV4dChmb290ZXJbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgZm9vdGVyRm9udFNpemUgLyAyKTtcblx0XHRcdFx0cHQueSArPSBmb290ZXJGb250U2l6ZSArIHZtLmZvb3RlclNwYWNpbmc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGRyYXdCYWNrZ3JvdW5kOiBmdW5jdGlvbihwdCwgdm0sIGN0eCwgdG9vbHRpcFNpemUpIHtcblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYmFja2dyb3VuZENvbG9yO1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHZtLmJvcmRlckNvbG9yO1xuXHRcdGN0eC5saW5lV2lkdGggPSB2bS5ib3JkZXJXaWR0aDtcblx0XHR2YXIgeEFsaWduID0gdm0ueEFsaWduO1xuXHRcdHZhciB5QWxpZ24gPSB2bS55QWxpZ247XG5cdFx0dmFyIHggPSBwdC54O1xuXHRcdHZhciB5ID0gcHQueTtcblx0XHR2YXIgd2lkdGggPSB0b29sdGlwU2l6ZS53aWR0aDtcblx0XHR2YXIgaGVpZ2h0ID0gdG9vbHRpcFNpemUuaGVpZ2h0O1xuXHRcdHZhciByYWRpdXMgPSB2bS5jb3JuZXJSYWRpdXM7XG5cblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4Lm1vdmVUbyh4ICsgcmFkaXVzLCB5KTtcblx0XHRpZiAoeUFsaWduID09PSAndG9wJykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGggLSByYWRpdXMsIHkpO1xuXHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgcmFkaXVzKTtcblx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHRcdHRoaXMuZHJhd0NhcmV0KHB0LCB0b29sdGlwU2l6ZSk7XG5cdFx0fVxuXHRcdGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHJhZGl1cywgeSArIGhlaWdodCk7XG5cdFx0aWYgKHlBbGlnbiA9PT0gJ2JvdHRvbScpIHtcblx0XHRcdHRoaXMuZHJhd0NhcmV0KHB0LCB0b29sdGlwU2l6ZSk7XG5cdFx0fVxuXHRcdGN0eC5saW5lVG8oeCArIHJhZGl1cywgeSArIGhlaWdodCk7XG5cdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XG5cdFx0aWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAnbGVmdCcpIHtcblx0XHRcdHRoaXMuZHJhd0NhcmV0KHB0LCB0b29sdGlwU2l6ZSk7XG5cdFx0fVxuXHRcdGN0eC5saW5lVG8oeCwgeSArIHJhZGl1cyk7XG5cdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cywgeSk7XG5cdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXG5cdFx0Y3R4LmZpbGwoKTtcblxuXHRcdGlmICh2bS5ib3JkZXJXaWR0aCA+IDApIHtcblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXG5cdFx0aWYgKHZtLm9wYWNpdHkgPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgdG9vbHRpcFNpemUgPSB7XG5cdFx0XHR3aWR0aDogdm0ud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IHZtLmhlaWdodFxuXHRcdH07XG5cdFx0dmFyIHB0ID0ge1xuXHRcdFx0eDogdm0ueCxcblx0XHRcdHk6IHZtLnlcblx0XHR9O1xuXG5cdFx0Ly8gSUUxMS9FZGdlIGRvZXMgbm90IGxpa2UgdmVyeSBzbWFsbCBvcGFjaXRpZXMsIHNvIHNuYXAgdG8gMFxuXHRcdHZhciBvcGFjaXR5ID0gTWF0aC5hYnModm0ub3BhY2l0eSA8IDFlLTMpID8gMCA6IHZtLm9wYWNpdHk7XG5cblx0XHQvLyBUcnV0aHkvZmFsc2V5IHZhbHVlIGZvciBlbXB0eSB0b29sdGlwXG5cdFx0dmFyIGhhc1Rvb2x0aXBDb250ZW50ID0gdm0udGl0bGUubGVuZ3RoIHx8IHZtLmJlZm9yZUJvZHkubGVuZ3RoIHx8IHZtLmJvZHkubGVuZ3RoIHx8IHZtLmFmdGVyQm9keS5sZW5ndGggfHwgdm0uZm9vdGVyLmxlbmd0aDtcblxuXHRcdGlmICh0aGlzLl9vcHRpb25zLmVuYWJsZWQgJiYgaGFzVG9vbHRpcENvbnRlbnQpIHtcblx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRjdHguZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuXG5cdFx0XHQvLyBEcmF3IEJhY2tncm91bmRcblx0XHRcdHRoaXMuZHJhd0JhY2tncm91bmQocHQsIHZtLCBjdHgsIHRvb2x0aXBTaXplKTtcblxuXHRcdFx0Ly8gRHJhdyBUaXRsZSwgQm9keSwgYW5kIEZvb3RlclxuXHRcdFx0cHQueSArPSB2bS55UGFkZGluZztcblxuXHRcdFx0aGVscGVycyQxLnJ0bC5vdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCB2bS50ZXh0RGlyZWN0aW9uKTtcblxuXHRcdFx0Ly8gVGl0bGVzXG5cdFx0XHR0aGlzLmRyYXdUaXRsZShwdCwgdm0sIGN0eCk7XG5cblx0XHRcdC8vIEJvZHlcblx0XHRcdHRoaXMuZHJhd0JvZHkocHQsIHZtLCBjdHgpO1xuXG5cdFx0XHQvLyBGb290ZXJcblx0XHRcdHRoaXMuZHJhd0Zvb3RlcihwdCwgdm0sIGN0eCk7XG5cblx0XHRcdGhlbHBlcnMkMS5ydGwucmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCB2bS50ZXh0RGlyZWN0aW9uKTtcblxuXHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEhhbmRsZSBhbiBldmVudFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gaGFuZGxlXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSB0b29sdGlwIGNoYW5nZWRcblx0ICovXG5cdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLl9vcHRpb25zO1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRtZS5fbGFzdEFjdGl2ZSA9IG1lLl9sYXN0QWN0aXZlIHx8IFtdO1xuXG5cdFx0Ly8gRmluZCBBY3RpdmUgRWxlbWVudHMgZm9yIHRvb2x0aXBzXG5cdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuXHRcdFx0bWUuX2FjdGl2ZSA9IFtdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5fYWN0aXZlID0gbWUuX2NoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgb3B0aW9ucy5tb2RlLCBvcHRpb25zKTtcblx0XHRcdGlmIChvcHRpb25zLnJldmVyc2UpIHtcblx0XHRcdFx0bWUuX2FjdGl2ZS5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgTGFzdCBBY3RpdmVzXG5cdFx0Y2hhbmdlZCA9ICFoZWxwZXJzJDEuYXJyYXlFcXVhbHMobWUuX2FjdGl2ZSwgbWUuX2xhc3RBY3RpdmUpO1xuXG5cdFx0Ly8gT25seSBoYW5kbGUgdGFyZ2V0IGV2ZW50IG9uIHRvb2x0aXAgY2hhbmdlXG5cdFx0aWYgKGNoYW5nZWQpIHtcblx0XHRcdG1lLl9sYXN0QWN0aXZlID0gbWUuX2FjdGl2ZTtcblxuXHRcdFx0aWYgKG9wdGlvbnMuZW5hYmxlZCB8fCBvcHRpb25zLmN1c3RvbSkge1xuXHRcdFx0XHRtZS5fZXZlbnRQb3NpdGlvbiA9IHtcblx0XHRcdFx0XHR4OiBlLngsXG5cdFx0XHRcdFx0eTogZS55XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bWUudXBkYXRlKHRydWUpO1xuXHRcdFx0XHRtZS5waXZvdCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjaGFuZ2VkO1xuXHR9XG59KTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LlRvb2x0aXAucG9zaXRpb25lcnNcbiAqL1xudmFyIHBvc2l0aW9uZXJzXzEgPSBwb3NpdGlvbmVycztcblxudmFyIGNvcmVfdG9vbHRpcCA9IGV4cG9ydHMkNDtcbmNvcmVfdG9vbHRpcC5wb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzXzE7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQ5ID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZWxlbWVudHM6IHt9LFxuXHRldmVudHM6IFtcblx0XHQnbW91c2Vtb3ZlJyxcblx0XHQnbW91c2VvdXQnLFxuXHRcdCdjbGljaycsXG5cdFx0J3RvdWNoc3RhcnQnLFxuXHRcdCd0b3VjaG1vdmUnXG5cdF0sXG5cdGhvdmVyOiB7XG5cdFx0b25Ib3ZlcjogbnVsbCxcblx0XHRtb2RlOiAnbmVhcmVzdCcsXG5cdFx0aW50ZXJzZWN0OiB0cnVlLFxuXHRcdGFuaW1hdGlvbkR1cmF0aW9uOiA0MDBcblx0fSxcblx0b25DbGljazogbnVsbCxcblx0bWFpbnRhaW5Bc3BlY3RSYXRpbzogdHJ1ZSxcblx0cmVzcG9uc2l2ZTogdHJ1ZSxcblx0cmVzcG9uc2l2ZUFuaW1hdGlvbkR1cmF0aW9uOiAwXG59KTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSBtZXJnZSB0aGUgZ2l2ZW4gY29uZmlnIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBgc2NhbGVzYCBvcHRpb25cbiAqIGJ5IGluY29ycG9yYXRpbmcgc2NhbGUgZGVmYXVsdHMgaW4gYHhBeGVzYCBhbmQgYHlBeGVzYCBhcnJheSBpdGVtcywgdGhlblxuICogcmV0dXJucyBhIGRlZXAgY29weSBvZiB0aGUgcmVzdWx0LCB0aHVzIGRvZXNuJ3QgYWx0ZXIgaW5wdXRzLlxuICovXG5mdW5jdGlvbiBtZXJnZVNjYWxlQ29uZmlnKC8qIGNvbmZpZyBvYmplY3RzIC4uLiAqLykge1xuXHRyZXR1cm4gaGVscGVycyQxLm1lcmdlKHt9LCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyksIHtcblx0XHRtZXJnZXI6IGZ1bmN0aW9uKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHRcdGlmIChrZXkgPT09ICd4QXhlcycgfHwga2V5ID09PSAneUF4ZXMnKSB7XG5cdFx0XHRcdHZhciBzbGVuID0gc291cmNlW2tleV0ubGVuZ3RoO1xuXHRcdFx0XHR2YXIgaSwgdHlwZSwgc2NhbGU7XG5cblx0XHRcdFx0aWYgKCF0YXJnZXRba2V5XSkge1xuXHRcdFx0XHRcdHRhcmdldFtrZXldID0gW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgc2xlbjsgKytpKSB7XG5cdFx0XHRcdFx0c2NhbGUgPSBzb3VyY2Vba2V5XVtpXTtcblx0XHRcdFx0XHR0eXBlID0gdmFsdWVPckRlZmF1bHQkOShzY2FsZS50eXBlLCBrZXkgPT09ICd4QXhlcycgPyAnY2F0ZWdvcnknIDogJ2xpbmVhcicpO1xuXG5cdFx0XHRcdFx0aWYgKGkgPj0gdGFyZ2V0W2tleV0ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHR0YXJnZXRba2V5XS5wdXNoKHt9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIXRhcmdldFtrZXldW2ldLnR5cGUgfHwgKHNjYWxlLnR5cGUgJiYgc2NhbGUudHlwZSAhPT0gdGFyZ2V0W2tleV1baV0udHlwZSkpIHtcblx0XHRcdFx0XHRcdC8vIG5ldy91bnR5cGVkIHNjYWxlIG9yIHR5cGUgY2hhbmdlZDogbGV0J3MgYXBwbHkgdGhlIG5ldyBkZWZhdWx0c1xuXHRcdFx0XHRcdFx0Ly8gdGhlbiBtZXJnZSBzb3VyY2Ugc2NhbGUgdG8gY29ycmVjdGx5IG92ZXJ3cml0ZSB0aGUgZGVmYXVsdHMuXG5cdFx0XHRcdFx0XHRoZWxwZXJzJDEubWVyZ2UodGFyZ2V0W2tleV1baV0sIFtjb3JlX3NjYWxlU2VydmljZS5nZXRTY2FsZURlZmF1bHRzKHR5cGUpLCBzY2FsZV0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyBzY2FsZXMgdHlwZSBhcmUgdGhlIHNhbWVcblx0XHRcdFx0XHRcdGhlbHBlcnMkMS5tZXJnZSh0YXJnZXRba2V5XVtpXSwgc2NhbGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGVscGVycyQxLl9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBtZXJnZSB0aGUgZ2l2ZW4gY29uZmlnIG9iamVjdHMgYXMgdGhlIHJvb3Qgb3B0aW9ucyBieSBoYW5kbGluZ1xuICogZGVmYXVsdCBzY2FsZSBvcHRpb25zIGZvciB0aGUgYHNjYWxlc2AgYW5kIGBzY2FsZWAgcHJvcGVydGllcywgdGhlbiByZXR1cm5zXG4gKiBhIGRlZXAgY29weSBvZiB0aGUgcmVzdWx0LCB0aHVzIGRvZXNuJ3QgYWx0ZXIgaW5wdXRzLlxuICovXG5mdW5jdGlvbiBtZXJnZUNvbmZpZygvKiBjb25maWcgb2JqZWN0cyAuLi4gKi8pIHtcblx0cmV0dXJuIGhlbHBlcnMkMS5tZXJnZSh7fSwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpLCB7XG5cdFx0bWVyZ2VyOiBmdW5jdGlvbihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdFx0XHR2YXIgdHZhbCA9IHRhcmdldFtrZXldIHx8IHt9O1xuXHRcdFx0dmFyIHN2YWwgPSBzb3VyY2Vba2V5XTtcblxuXHRcdFx0aWYgKGtleSA9PT0gJ3NjYWxlcycpIHtcblx0XHRcdFx0Ly8gc2NhbGUgY29uZmlnIG1lcmdpbmcgaXMgY29tcGxleC4gQWRkIG91ciBvd24gZnVuY3Rpb24gaGVyZSBmb3IgdGhhdFxuXHRcdFx0XHR0YXJnZXRba2V5XSA9IG1lcmdlU2NhbGVDb25maWcodHZhbCwgc3ZhbCk7XG5cdFx0XHR9IGVsc2UgaWYgKGtleSA9PT0gJ3NjYWxlJykge1xuXHRcdFx0XHQvLyB1c2VkIGluIHBvbGFyIGFyZWEgJiByYWRhciBjaGFydHMgc2luY2UgdGhlcmUgaXMgb25seSBvbmUgc2NhbGVcblx0XHRcdFx0dGFyZ2V0W2tleV0gPSBoZWxwZXJzJDEubWVyZ2UodHZhbCwgW2NvcmVfc2NhbGVTZXJ2aWNlLmdldFNjYWxlRGVmYXVsdHMoc3ZhbC50eXBlKSwgc3ZhbF0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGVscGVycyQxLl9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcblx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXG5cdC8vIERvIE5PVCB1c2UgbWVyZ2VDb25maWcgZm9yIHRoZSBkYXRhIG9iamVjdCBiZWNhdXNlIHRoaXMgbWV0aG9kIG1lcmdlcyBhcnJheXNcblx0Ly8gYW5kIHNvIHdvdWxkIGNoYW5nZSByZWZlcmVuY2VzIHRvIGxhYmVscyBhbmQgZGF0YXNldHMsIHByZXZlbnRpbmcgZGF0YSB1cGRhdGVzLlxuXHR2YXIgZGF0YSA9IGNvbmZpZy5kYXRhID0gY29uZmlnLmRhdGEgfHwge307XG5cdGRhdGEuZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzIHx8IFtdO1xuXHRkYXRhLmxhYmVscyA9IGRhdGEubGFiZWxzIHx8IFtdO1xuXG5cdGNvbmZpZy5vcHRpb25zID0gbWVyZ2VDb25maWcoXG5cdFx0Y29yZV9kZWZhdWx0cy5nbG9iYWwsXG5cdFx0Y29yZV9kZWZhdWx0c1tjb25maWcudHlwZV0sXG5cdFx0Y29uZmlnLm9wdGlvbnMgfHwge30pO1xuXG5cdHJldHVybiBjb25maWc7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbmZpZyhjaGFydCkge1xuXHR2YXIgbmV3T3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnM7XG5cblx0aGVscGVycyQxLmVhY2goY2hhcnQuc2NhbGVzLCBmdW5jdGlvbihzY2FsZSkge1xuXHRcdGNvcmVfbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIHNjYWxlKTtcblx0fSk7XG5cblx0bmV3T3B0aW9ucyA9IG1lcmdlQ29uZmlnKFxuXHRcdGNvcmVfZGVmYXVsdHMuZ2xvYmFsLFxuXHRcdGNvcmVfZGVmYXVsdHNbY2hhcnQuY29uZmlnLnR5cGVdLFxuXHRcdG5ld09wdGlvbnMpO1xuXG5cdGNoYXJ0Lm9wdGlvbnMgPSBjaGFydC5jb25maWcub3B0aW9ucyA9IG5ld09wdGlvbnM7XG5cdGNoYXJ0LmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcblx0Y2hhcnQuYnVpbGRPclVwZGF0ZVNjYWxlcygpO1xuXG5cdC8vIFRvb2x0aXBcblx0Y2hhcnQudG9vbHRpcC5fb3B0aW9ucyA9IG5ld09wdGlvbnMudG9vbHRpcHM7XG5cdGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZSgpO1xufVxuXG5mdW5jdGlvbiBuZXh0QXZhaWxhYmxlU2NhbGVJZChheGVzT3B0cywgcHJlZml4LCBpbmRleCkge1xuXHR2YXIgaWQ7XG5cdHZhciBoYXNJZCA9IGZ1bmN0aW9uKG9iaikge1xuXHRcdHJldHVybiBvYmouaWQgPT09IGlkO1xuXHR9O1xuXG5cdGRvIHtcblx0XHRpZCA9IHByZWZpeCArIGluZGV4Kys7XG5cdH0gd2hpbGUgKGhlbHBlcnMkMS5maW5kSW5kZXgoYXhlc09wdHMsIGhhc0lkKSA+PSAwKTtcblxuXHRyZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uSXNIb3Jpem9udGFsKHBvc2l0aW9uKSB7XG5cdHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlMkxldmVsKGwxLCBsMikge1xuXHRyZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuXHRcdHJldHVybiBhW2wxXSA9PT0gYltsMV1cblx0XHRcdD8gYVtsMl0gLSBiW2wyXVxuXHRcdFx0OiBhW2wxXSAtIGJbbDFdO1xuXHR9O1xufVxuXG52YXIgQ2hhcnQgPSBmdW5jdGlvbihpdGVtLCBjb25maWcpIHtcblx0dGhpcy5jb25zdHJ1Y3QoaXRlbSwgY29uZmlnKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5oZWxwZXJzJDEuZXh0ZW5kKENoYXJ0LnByb3RvdHlwZSwgLyoqIEBsZW5kcyBDaGFydCAqLyB7XG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Y29uc3RydWN0OiBmdW5jdGlvbihpdGVtLCBjb25maWcpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0Y29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuXG5cdFx0dmFyIGNvbnRleHQgPSBwbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpdGVtLCBjb25maWcpO1xuXHRcdHZhciBjYW52YXMgPSBjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzO1xuXHRcdHZhciBoZWlnaHQgPSBjYW52YXMgJiYgY2FudmFzLmhlaWdodDtcblx0XHR2YXIgd2lkdGggPSBjYW52YXMgJiYgY2FudmFzLndpZHRoO1xuXG5cdFx0bWUuaWQgPSBoZWxwZXJzJDEudWlkKCk7XG5cdFx0bWUuY3R4ID0gY29udGV4dDtcblx0XHRtZS5jYW52YXMgPSBjYW52YXM7XG5cdFx0bWUuY29uZmlnID0gY29uZmlnO1xuXHRcdG1lLndpZHRoID0gd2lkdGg7XG5cdFx0bWUuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdG1lLmFzcGVjdFJhdGlvID0gaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBudWxsO1xuXHRcdG1lLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcblx0XHRtZS5fYnVmZmVyZWRSZW5kZXIgPSBmYWxzZTtcblx0XHRtZS5fbGF5ZXJzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgQ2hhcnQgYW5kIENoYXJ0LkNvbnRyb2xsZXIgaGF2ZSBiZWVuIG1lcmdlZCxcblx0XHQgKiB0aGUgXCJpbnN0YW5jZVwiIHN0aWxsIG5lZWQgdG8gYmUgZGVmaW5lZCBzaW5jZSBpdCBtaWdodCBiZSBjYWxsZWQgZnJvbSBwbHVnaW5zLlxuXHRcdCAqIEBwcm9wIENoYXJ0I2NoYXJ0XG5cdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuXHRcdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdG1lLmNoYXJ0ID0gbWU7XG5cdFx0bWUuY29udHJvbGxlciA9IG1lOyAvLyBjaGFydC5jaGFydC5jb250cm9sbGVyICNpbmNlcHRpb25cblxuXHRcdC8vIEFkZCB0aGUgY2hhcnQgaW5zdGFuY2UgdG8gdGhlIGdsb2JhbCBuYW1lc3BhY2Vcblx0XHRDaGFydC5pbnN0YW5jZXNbbWUuaWRdID0gbWU7XG5cblx0XHQvLyBEZWZpbmUgYWxpYXMgdG8gdGhlIGNvbmZpZyBkYXRhOiBgY2hhcnQuZGF0YSA9PT0gY2hhcnQuY29uZmlnLmRhdGFgXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1lLCAnZGF0YScsIHtcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtZS5jb25maWcuZGF0YTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdG1lLmNvbmZpZy5kYXRhID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAoIWNvbnRleHQgfHwgIWNhbnZhcykge1xuXHRcdFx0Ly8gVGhlIGdpdmVuIGl0ZW0gaXMgbm90IGEgY29tcGF0aWJsZSBjb250ZXh0MmQgZWxlbWVudCwgbGV0J3MgcmV0dXJuIGJlZm9yZSBmaW5hbGl6aW5nXG5cdFx0XHQvLyB0aGUgY2hhcnQgaW5pdGlhbGl6YXRpb24gYnV0IGFmdGVyIHNldHRpbmcgYmFzaWMgY2hhcnQgLyBjb250cm9sbGVyIHByb3BlcnRpZXMgdGhhdFxuXHRcdFx0Ly8gY2FuIGhlbHAgdG8gZmlndXJlIG91dCB0aGF0IHRoZSBjaGFydCBpcyBub3QgdmFsaWQgKGUuZyBjaGFydC5jYW52YXMgIT09IG51bGwpO1xuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI4MDdcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRtZS5pbml0aWFsaXplKCk7XG5cdFx0bWUudXBkYXRlKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0Ly8gQmVmb3JlIGluaXQgcGx1Z2luIG5vdGlmaWNhdGlvblxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVJbml0Jyk7XG5cblx0XHRoZWxwZXJzJDEucmV0aW5hU2NhbGUobWUsIG1lLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cblx0XHRtZS5iaW5kRXZlbnRzKCk7XG5cblx0XHRpZiAobWUub3B0aW9ucy5yZXNwb25zaXZlKSB7XG5cdFx0XHQvLyBJbml0aWFsIHJlc2l6ZSBiZWZvcmUgY2hhcnQgZHJhd3MgKG11c3QgYmUgc2lsZW50IHRvIHByZXNlcnZlIGluaXRpYWwgYW5pbWF0aW9ucykuXG5cdFx0XHRtZS5yZXNpemUodHJ1ZSk7XG5cdFx0fVxuXG5cdFx0bWUuaW5pdFRvb2xUaXAoKTtcblxuXHRcdC8vIEFmdGVyIGluaXQgcGx1Z2luIG5vdGlmaWNhdGlvblxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckluaXQnKTtcblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHRjbGVhcjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbnZhcy5jbGVhcih0aGlzKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbigpIHtcblx0XHQvLyBTdG9wcyBhbnkgY3VycmVudCBhbmltYXRpb24gbG9vcCBvY2N1cnJpbmdcblx0XHRjb3JlX2FuaW1hdGlvbnMuY2FuY2VsQW5pbWF0aW9uKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlc2l6ZTogZnVuY3Rpb24oc2lsZW50KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGNhbnZhcyA9IG1lLmNhbnZhcztcblx0XHR2YXIgYXNwZWN0UmF0aW8gPSAob3B0aW9ucy5tYWludGFpbkFzcGVjdFJhdGlvICYmIG1lLmFzcGVjdFJhdGlvKSB8fCBudWxsO1xuXG5cdFx0Ly8gdGhlIGNhbnZhcyByZW5kZXIgd2lkdGggYW5kIGhlaWdodCB3aWxsIGJlIGNhc3RlZCB0byBpbnRlZ2VycyBzbyBtYWtlIHN1cmUgdGhhdFxuXHRcdC8vIHRoZSBjYW52YXMgZGlzcGxheSBzdHlsZSB1c2VzIHRoZSBzYW1lIGludGVnZXIgdmFsdWVzIHRvIGF2b2lkIGJsdXJyaW5nIGVmZmVjdC5cblxuXHRcdC8vIFNldCB0byAwIGluc3RlYWQgb2YgY2FudmFzLnNpemUgYmVjYXVzZSB0aGUgc2l6ZSBkZWZhdWx0cyB0byAzMDB4MTUwIGlmIHRoZSBlbGVtZW50IGlzIGNvbGxhcHNlZFxuXHRcdHZhciBuZXdXaWR0aCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoaGVscGVycyQxLmdldE1heGltdW1XaWR0aChjYW52YXMpKSk7XG5cdFx0dmFyIG5ld0hlaWdodCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoYXNwZWN0UmF0aW8gPyBuZXdXaWR0aCAvIGFzcGVjdFJhdGlvIDogaGVscGVycyQxLmdldE1heGltdW1IZWlnaHQoY2FudmFzKSkpO1xuXG5cdFx0aWYgKG1lLndpZHRoID09PSBuZXdXaWR0aCAmJiBtZS5oZWlnaHQgPT09IG5ld0hlaWdodCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNhbnZhcy53aWR0aCA9IG1lLndpZHRoID0gbmV3V2lkdGg7XG5cdFx0Y2FudmFzLmhlaWdodCA9IG1lLmhlaWdodCA9IG5ld0hlaWdodDtcblx0XHRjYW52YXMuc3R5bGUud2lkdGggPSBuZXdXaWR0aCArICdweCc7XG5cdFx0Y2FudmFzLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7XG5cblx0XHRoZWxwZXJzJDEucmV0aW5hU2NhbGUobWUsIG9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cblx0XHRpZiAoIXNpbGVudCkge1xuXHRcdFx0Ly8gTm90aWZ5IGFueSBwbHVnaW5zIGFib3V0IHRoZSByZXNpemVcblx0XHRcdHZhciBuZXdTaXplID0ge3dpZHRoOiBuZXdXaWR0aCwgaGVpZ2h0OiBuZXdIZWlnaHR9O1xuXHRcdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ3Jlc2l6ZScsIFtuZXdTaXplXSk7XG5cblx0XHRcdC8vIE5vdGlmeSBvZiByZXNpemVcblx0XHRcdGlmIChvcHRpb25zLm9uUmVzaXplKSB7XG5cdFx0XHRcdG9wdGlvbnMub25SZXNpemUobWUsIG5ld1NpemUpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZS5zdG9wKCk7XG5cdFx0XHRtZS51cGRhdGUoe1xuXHRcdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5yZXNwb25zaXZlQW5pbWF0aW9uRHVyYXRpb25cblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRlbnN1cmVTY2FsZXNIYXZlSURzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblx0XHR2YXIgc2NhbGVzT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuXHRcdHZhciBzY2FsZU9wdGlvbnMgPSBvcHRpb25zLnNjYWxlO1xuXG5cdFx0aGVscGVycyQxLmVhY2goc2NhbGVzT3B0aW9ucy54QXhlcywgZnVuY3Rpb24oeEF4aXNPcHRpb25zLCBpbmRleCkge1xuXHRcdFx0aWYgKCF4QXhpc09wdGlvbnMuaWQpIHtcblx0XHRcdFx0eEF4aXNPcHRpb25zLmlkID0gbmV4dEF2YWlsYWJsZVNjYWxlSWQoc2NhbGVzT3B0aW9ucy54QXhlcywgJ3gtYXhpcy0nLCBpbmRleCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRoZWxwZXJzJDEuZWFjaChzY2FsZXNPcHRpb25zLnlBeGVzLCBmdW5jdGlvbih5QXhpc09wdGlvbnMsIGluZGV4KSB7XG5cdFx0XHRpZiAoIXlBeGlzT3B0aW9ucy5pZCkge1xuXHRcdFx0XHR5QXhpc09wdGlvbnMuaWQgPSBuZXh0QXZhaWxhYmxlU2NhbGVJZChzY2FsZXNPcHRpb25zLnlBeGVzLCAneS1heGlzLScsIGluZGV4KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmIChzY2FsZU9wdGlvbnMpIHtcblx0XHRcdHNjYWxlT3B0aW9ucy5pZCA9IHNjYWxlT3B0aW9ucy5pZCB8fCAnc2NhbGUnO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQnVpbGRzIGEgbWFwIG9mIHNjYWxlIElEIHRvIHNjYWxlIG9iamVjdCBmb3IgZnV0dXJlIGxvb2t1cC5cblx0ICovXG5cdGJ1aWxkT3JVcGRhdGVTY2FsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBzY2FsZXMgPSBtZS5zY2FsZXMgfHwge307XG5cdFx0dmFyIGl0ZW1zID0gW107XG5cdFx0dmFyIHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZShmdW5jdGlvbihvYmosIGlkKSB7XG5cdFx0XHRvYmpbaWRdID0gZmFsc2U7XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH0sIHt9KTtcblxuXHRcdGlmIChvcHRpb25zLnNjYWxlcykge1xuXHRcdFx0aXRlbXMgPSBpdGVtcy5jb25jYXQoXG5cdFx0XHRcdChvcHRpb25zLnNjYWxlcy54QXhlcyB8fCBbXSkubWFwKGZ1bmN0aW9uKHhBeGlzT3B0aW9ucykge1xuXHRcdFx0XHRcdHJldHVybiB7b3B0aW9uczogeEF4aXNPcHRpb25zLCBkdHlwZTogJ2NhdGVnb3J5JywgZHBvc2l0aW9uOiAnYm90dG9tJ307XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHQob3B0aW9ucy5zY2FsZXMueUF4ZXMgfHwgW10pLm1hcChmdW5jdGlvbih5QXhpc09wdGlvbnMpIHtcblx0XHRcdFx0XHRyZXR1cm4ge29wdGlvbnM6IHlBeGlzT3B0aW9ucywgZHR5cGU6ICdsaW5lYXInLCBkcG9zaXRpb246ICdsZWZ0J307XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLnNjYWxlKSB7XG5cdFx0XHRpdGVtcy5wdXNoKHtcblx0XHRcdFx0b3B0aW9uczogb3B0aW9ucy5zY2FsZSxcblx0XHRcdFx0ZHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuXHRcdFx0XHRpc0RlZmF1bHQ6IHRydWUsXG5cdFx0XHRcdGRwb3NpdGlvbjogJ2NoYXJ0QXJlYSdcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGhlbHBlcnMkMS5lYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHR2YXIgc2NhbGVPcHRpb25zID0gaXRlbS5vcHRpb25zO1xuXHRcdFx0dmFyIGlkID0gc2NhbGVPcHRpb25zLmlkO1xuXHRcdFx0dmFyIHNjYWxlVHlwZSA9IHZhbHVlT3JEZWZhdWx0JDkoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuXG5cdFx0XHRpZiAocG9zaXRpb25Jc0hvcml6b250YWwoc2NhbGVPcHRpb25zLnBvc2l0aW9uKSAhPT0gcG9zaXRpb25Jc0hvcml6b250YWwoaXRlbS5kcG9zaXRpb24pKSB7XG5cdFx0XHRcdHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9IGl0ZW0uZHBvc2l0aW9uO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGVkW2lkXSA9IHRydWU7XG5cdFx0XHR2YXIgc2NhbGUgPSBudWxsO1xuXHRcdFx0aWYgKGlkIGluIHNjYWxlcyAmJiBzY2FsZXNbaWRdLnR5cGUgPT09IHNjYWxlVHlwZSkge1xuXHRcdFx0XHRzY2FsZSA9IHNjYWxlc1tpZF07XG5cdFx0XHRcdHNjYWxlLm9wdGlvbnMgPSBzY2FsZU9wdGlvbnM7XG5cdFx0XHRcdHNjYWxlLmN0eCA9IG1lLmN0eDtcblx0XHRcdFx0c2NhbGUuY2hhcnQgPSBtZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBzY2FsZUNsYXNzID0gY29yZV9zY2FsZVNlcnZpY2UuZ2V0U2NhbGVDb25zdHJ1Y3RvcihzY2FsZVR5cGUpO1xuXHRcdFx0XHRpZiAoIXNjYWxlQ2xhc3MpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0c2NhbGUgPSBuZXcgc2NhbGVDbGFzcyh7XG5cdFx0XHRcdFx0aWQ6IGlkLFxuXHRcdFx0XHRcdHR5cGU6IHNjYWxlVHlwZSxcblx0XHRcdFx0XHRvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG5cdFx0XHRcdFx0Y3R4OiBtZS5jdHgsXG5cdFx0XHRcdFx0Y2hhcnQ6IG1lXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzY2FsZXNbc2NhbGUuaWRdID0gc2NhbGU7XG5cdFx0XHR9XG5cblx0XHRcdHNjYWxlLm1lcmdlVGlja3NPcHRpb25zKCk7XG5cblx0XHRcdC8vIFRPRE8oU0IpOiBJIHRoaW5rIHdlIHNob3VsZCBiZSBhYmxlIHRvIHJlbW92ZSB0aGlzIGN1c3RvbSBjYXNlIChvcHRpb25zLnNjYWxlKVxuXHRcdFx0Ly8gYW5kIGNvbnNpZGVyIGl0IGFzIGEgcmVndWxhciBzY2FsZSBwYXJ0IG9mIHRoZSBcInNjYWxlc1wiXCIgbWFwIG9ubHkhIFRoaXMgd291bGRcblx0XHRcdC8vIG1ha2UgdGhlIGxvZ2ljIGVhc2llciBhbmQgcmVtb3ZlIHNvbWUgdXNlbGVzcz8gY3VzdG9tIGNvZGUuXG5cdFx0XHRpZiAoaXRlbS5pc0RlZmF1bHQpIHtcblx0XHRcdFx0bWUuc2NhbGUgPSBzY2FsZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBjbGVhciB1cCBkaXNjYXJkZWQgc2NhbGVzXG5cdFx0aGVscGVycyQxLmVhY2godXBkYXRlZCwgZnVuY3Rpb24oaGFzVXBkYXRlZCwgaWQpIHtcblx0XHRcdGlmICghaGFzVXBkYXRlZCkge1xuXHRcdFx0XHRkZWxldGUgc2NhbGVzW2lkXTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG1lLnNjYWxlcyA9IHNjYWxlcztcblxuXHRcdGNvcmVfc2NhbGVTZXJ2aWNlLmFkZFNjYWxlc1RvTGF5b3V0KHRoaXMpO1xuXHR9LFxuXG5cdGJ1aWxkT3JVcGRhdGVDb250cm9sbGVyczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbmV3Q29udHJvbGxlcnMgPSBbXTtcblx0XHR2YXIgZGF0YXNldHMgPSBtZS5kYXRhLmRhdGFzZXRzO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBkYXRhc2V0c1tpXTtcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHR2YXIgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCBtZS5jb25maWcudHlwZTtcblxuXHRcdFx0aWYgKG1ldGEudHlwZSAmJiBtZXRhLnR5cGUgIT09IHR5cGUpIHtcblx0XHRcdFx0bWUuZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuXHRcdFx0XHRtZXRhID0gbWUuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHR9XG5cdFx0XHRtZXRhLnR5cGUgPSB0eXBlO1xuXHRcdFx0bWV0YS5vcmRlciA9IGRhdGFzZXQub3JkZXIgfHwgMDtcblx0XHRcdG1ldGEuaW5kZXggPSBpO1xuXG5cdFx0XHRpZiAobWV0YS5jb250cm9sbGVyKSB7XG5cdFx0XHRcdG1ldGEuY29udHJvbGxlci51cGRhdGVJbmRleChpKTtcblx0XHRcdFx0bWV0YS5jb250cm9sbGVyLmxpbmtTY2FsZXMoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBDb250cm9sbGVyQ2xhc3MgPSBjb250cm9sbGVyc1ttZXRhLnR5cGVdO1xuXHRcdFx0XHRpZiAoQ29udHJvbGxlckNsYXNzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIG1ldGEudHlwZSArICdcIiBpcyBub3QgYSBjaGFydCB0eXBlLicpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWV0YS5jb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXJDbGFzcyhtZSwgaSk7XG5cdFx0XHRcdG5ld0NvbnRyb2xsZXJzLnB1c2gobWV0YS5jb250cm9sbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3Q29udHJvbGxlcnM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJlc2V0IHRoZSBlbGVtZW50cyBvZiBhbGwgZGF0YXNldHNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHJlc2V0RWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0aGVscGVycyQxLmVhY2gobWUuZGF0YS5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRtZS5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIucmVzZXQoKTtcblx0XHR9LCBtZSk7XG5cdH0sXG5cblx0LyoqXG5cdCogUmVzZXRzIHRoZSBjaGFydCBiYWNrIHRvIGl0J3Mgc3RhdGUgYmVmb3JlIHRoZSBpbml0aWFsIGFuaW1hdGlvblxuXHQqL1xuXHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5yZXNldEVsZW1lbnRzKCk7XG5cdFx0dGhpcy50b29sdGlwLmluaXRpYWxpemUoKTtcblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uKGNvbmZpZykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRpZiAoIWNvbmZpZyB8fCB0eXBlb2YgY29uZmlnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGNvbmZpZyA9IHtcblx0XHRcdFx0ZHVyYXRpb246IGNvbmZpZyxcblx0XHRcdFx0bGF6eTogYXJndW1lbnRzWzFdXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHVwZGF0ZUNvbmZpZyhtZSk7XG5cblx0XHQvLyBwbHVnaW5zIG9wdGlvbnMgcmVmZXJlbmNlcyBtaWdodCBoYXZlIGNoYW5nZSwgbGV0J3MgaW52YWxpZGF0ZSB0aGUgY2FjaGVcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTExMSNpc3N1ZWNvbW1lbnQtMzU1OTM0MTY3XG5cdFx0Y29yZV9wbHVnaW5zLl9pbnZhbGlkYXRlKG1lKTtcblxuXHRcdGlmIChjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlVXBkYXRlJykgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSW4gY2FzZSB0aGUgZW50aXJlIGRhdGEgb2JqZWN0IGNoYW5nZWRcblx0XHRtZS50b29sdGlwLl9kYXRhID0gbWUuZGF0YTtcblxuXHRcdC8vIE1ha2Ugc3VyZSBkYXRhc2V0IGNvbnRyb2xsZXJzIGFyZSB1cGRhdGVkIGFuZCBuZXcgY29udHJvbGxlcnMgYXJlIHJlc2V0XG5cdFx0dmFyIG5ld0NvbnRyb2xsZXJzID0gbWUuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCk7XG5cblx0XHQvLyBNYWtlIHN1cmUgYWxsIGRhdGFzZXQgY29udHJvbGxlcnMgaGF2ZSBjb3JyZWN0IG1ldGEgZGF0YSBjb3VudHNcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gbWUuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdG1lLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKCk7XG5cdFx0fVxuXG5cdFx0bWUudXBkYXRlTGF5b3V0KCk7XG5cblx0XHQvLyBDYW4gb25seSByZXNldCB0aGUgbmV3IGNvbnRyb2xsZXJzIGFmdGVyIHRoZSBzY2FsZXMgaGF2ZSBiZWVuIHVwZGF0ZWRcblx0XHRpZiAobWUub3B0aW9ucy5hbmltYXRpb24gJiYgbWUub3B0aW9ucy5hbmltYXRpb24uZHVyYXRpb24pIHtcblx0XHRcdGhlbHBlcnMkMS5lYWNoKG5ld0NvbnRyb2xsZXJzLCBmdW5jdGlvbihjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnRyb2xsZXIucmVzZXQoKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdG1lLnVwZGF0ZURhdGFzZXRzKCk7XG5cblx0XHQvLyBOZWVkIHRvIHJlc2V0IHRvb2x0aXAgaW4gY2FzZSBpdCBpcyBkaXNwbGF5ZWQgd2l0aCBlbGVtZW50cyB0aGF0IGFyZSByZW1vdmVkXG5cdFx0Ly8gYWZ0ZXIgdXBkYXRlLlxuXHRcdG1lLnRvb2x0aXAuaW5pdGlhbGl6ZSgpO1xuXG5cdFx0Ly8gTGFzdCBhY3RpdmUgY29udGFpbnMgaXRlbXMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgaW4gdGhlIHRvb2x0aXAuXG5cdFx0Ly8gV2hlbiB3ZSByZXNldCB0aGUgdG9vbHRpcCwgd2UgbmVlZCB0byBjbGVhciBpdFxuXHRcdG1lLmxhc3RBY3RpdmUgPSBbXTtcblxuXHRcdC8vIERvIHRoaXMgYmVmb3JlIHJlbmRlciBzbyB0aGF0IGFueSBwbHVnaW5zIHRoYXQgbmVlZCBmaW5hbCBzY2FsZSB1cGRhdGVzIGNhbiB1c2UgaXRcblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJVcGRhdGUnKTtcblxuXHRcdG1lLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG5cblx0XHRpZiAobWUuX2J1ZmZlcmVkUmVuZGVyKSB7XG5cdFx0XHRtZS5fYnVmZmVyZWRSZXF1ZXN0ID0ge1xuXHRcdFx0XHRkdXJhdGlvbjogY29uZmlnLmR1cmF0aW9uLFxuXHRcdFx0XHRlYXNpbmc6IGNvbmZpZy5lYXNpbmcsXG5cdFx0XHRcdGxhenk6IGNvbmZpZy5sYXp5XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5yZW5kZXIoY29uZmlnKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGNoYXJ0IGxheW91dCB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlTGF5b3V0YFxuXHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJMYXlvdXRgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dXBkYXRlTGF5b3V0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVMYXlvdXQnKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb3JlX2xheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuXHRcdG1lLl9sYXllcnMgPSBbXTtcblx0XHRoZWxwZXJzJDEuZWFjaChtZS5ib3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHQvLyBfY29uZmlndXJlIGlzIGNhbGxlZCB0d2ljZSwgb25jZSBpbiBjb3JlLnNjYWxlLnVwZGF0ZSBhbmQgb25jZSBoZXJlLlxuXHRcdFx0Ly8gSGVyZSB0aGUgYm94ZXMgYXJlIGZ1bGx5IHVwZGF0ZWQgYW5kIGF0IHRoZWlyIGZpbmFsIHBvc2l0aW9ucy5cblx0XHRcdGlmIChib3guX2NvbmZpZ3VyZSkge1xuXHRcdFx0XHRib3guX2NvbmZpZ3VyZSgpO1xuXHRcdFx0fVxuXHRcdFx0bWUuX2xheWVycy5wdXNoLmFwcGx5KG1lLl9sYXllcnMsIGJveC5fbGF5ZXJzKCkpO1xuXHRcdH0sIG1lKTtcblxuXHRcdG1lLl9sYXllcnMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuXHRcdFx0aXRlbS5faWR4ID0gaW5kZXg7XG5cdFx0fSk7XG5cblx0XHQvKipcblx0XHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIGBhZnRlckxheW91dGAgaW5zdGVhZC5cblx0XHQgKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJTY2FsZVVwZGF0ZVxuXHRcdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi41LjBcblx0XHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJTY2FsZVVwZGF0ZScpO1xuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckxheW91dCcpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGFsbCBkYXRhc2V0cyB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlRGF0YXNldHNVcGRhdGVgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXRzVXBkYXRlYC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHVwZGF0ZURhdGFzZXRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0c1VwZGF0ZScpID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gbWUuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZURhdGFzZXQoaSk7XG5cdFx0fVxuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldHNVcGRhdGUnKTtcblx0fSxcblxuXHQvKipcblx0ICogVXBkYXRlcyBkYXRhc2V0IGF0IGluZGV4IHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0VXBkYXRlYFxuXHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJEYXRhc2V0VXBkYXRlYC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHVwZGF0ZURhdGFzZXQ6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldERhdGFzZXRNZXRhKGluZGV4KTtcblx0XHR2YXIgYXJncyA9IHtcblx0XHRcdG1ldGE6IG1ldGEsXG5cdFx0XHRpbmRleDogaW5kZXhcblx0XHR9O1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0VXBkYXRlJywgW2FyZ3NdKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRtZXRhLmNvbnRyb2xsZXIuX3VwZGF0ZSgpO1xuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldFVwZGF0ZScsIFthcmdzXSk7XG5cdH0sXG5cblx0cmVuZGVyOiBmdW5jdGlvbihjb25maWcpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0aWYgKCFjb25maWcgfHwgdHlwZW9mIGNvbmZpZyAhPT0gJ29iamVjdCcpIHtcblx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRjb25maWcgPSB7XG5cdFx0XHRcdGR1cmF0aW9uOiBjb25maWcsXG5cdFx0XHRcdGxhenk6IGFyZ3VtZW50c1sxXVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR2YXIgYW5pbWF0aW9uT3B0aW9ucyA9IG1lLm9wdGlvbnMuYW5pbWF0aW9uO1xuXHRcdHZhciBkdXJhdGlvbiA9IHZhbHVlT3JEZWZhdWx0JDkoY29uZmlnLmR1cmF0aW9uLCBhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMuZHVyYXRpb24pO1xuXHRcdHZhciBsYXp5ID0gY29uZmlnLmxhenk7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZVJlbmRlcicpID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvbkNvbXBsZXRlID0gZnVuY3Rpb24oYW5pbWF0aW9uKSB7XG5cdFx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJSZW5kZXInKTtcblx0XHRcdGhlbHBlcnMkMS5jYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Db21wbGV0ZSwgW2FuaW1hdGlvbl0sIG1lKTtcblx0XHR9O1xuXG5cdFx0aWYgKGFuaW1hdGlvbk9wdGlvbnMgJiYgZHVyYXRpb24pIHtcblx0XHRcdHZhciBhbmltYXRpb24gPSBuZXcgY29yZV9hbmltYXRpb24oe1xuXHRcdFx0XHRudW1TdGVwczogZHVyYXRpb24gLyAxNi42NiwgLy8gNjAgZnBzXG5cdFx0XHRcdGVhc2luZzogY29uZmlnLmVhc2luZyB8fCBhbmltYXRpb25PcHRpb25zLmVhc2luZyxcblxuXHRcdFx0XHRyZW5kZXI6IGZ1bmN0aW9uKGNoYXJ0LCBhbmltYXRpb25PYmplY3QpIHtcblx0XHRcdFx0XHR2YXIgZWFzaW5nRnVuY3Rpb24gPSBoZWxwZXJzJDEuZWFzaW5nLmVmZmVjdHNbYW5pbWF0aW9uT2JqZWN0LmVhc2luZ107XG5cdFx0XHRcdFx0dmFyIGN1cnJlbnRTdGVwID0gYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwO1xuXHRcdFx0XHRcdHZhciBzdGVwRGVjaW1hbCA9IGN1cnJlbnRTdGVwIC8gYW5pbWF0aW9uT2JqZWN0Lm51bVN0ZXBzO1xuXG5cdFx0XHRcdFx0Y2hhcnQuZHJhdyhlYXNpbmdGdW5jdGlvbihzdGVwRGVjaW1hbCksIHN0ZXBEZWNpbWFsLCBjdXJyZW50U3RlcCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0b25BbmltYXRpb25Qcm9ncmVzczogYW5pbWF0aW9uT3B0aW9ucy5vblByb2dyZXNzLFxuXHRcdFx0XHRvbkFuaW1hdGlvbkNvbXBsZXRlOiBvbkNvbXBsZXRlXG5cdFx0XHR9KTtcblxuXHRcdFx0Y29yZV9hbmltYXRpb25zLmFkZEFuaW1hdGlvbihtZSwgYW5pbWF0aW9uLCBkdXJhdGlvbiwgbGF6eSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLmRyYXcoKTtcblxuXHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zNzgxXG5cdFx0XHRvbkNvbXBsZXRlKG5ldyBjb3JlX2FuaW1hdGlvbih7bnVtU3RlcHM6IDAsIGNoYXJ0OiBtZX0pKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWU7XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBpLCBsYXllcnM7XG5cblx0XHRtZS5jbGVhcigpO1xuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKGVhc2luZ1ZhbHVlKSkge1xuXHRcdFx0ZWFzaW5nVmFsdWUgPSAxO1xuXHRcdH1cblxuXHRcdG1lLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXG5cdFx0aWYgKG1lLndpZHRoIDw9IDAgfHwgbWUuaGVpZ2h0IDw9IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURyYXcnLCBbZWFzaW5nVmFsdWVdKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBCZWNhdXNlIG9mIHBsdWdpbiBob29rcyAoYmVmb3JlL2FmdGVyRGF0YXNldHNEcmF3KSwgZGF0YXNldHMgY2FuJ3Rcblx0XHQvLyBjdXJyZW50bHkgYmUgcGFydCBvZiBsYXllcnMuIEluc3RlYWQsIHdlIGRyYXdcblx0XHQvLyBsYXllcnMgPD0gMCBiZWZvcmUoZGVmYXVsdCwgYmFja3dhcmQgY29tcGF0KSwgYW5kIHRoZSByZXN0IGFmdGVyXG5cdFx0bGF5ZXJzID0gbWUuX2xheWVycztcblx0XHRmb3IgKGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aCAmJiBsYXllcnNbaV0ueiA8PSAwOyArK2kpIHtcblx0XHRcdGxheWVyc1tpXS5kcmF3KG1lLmNoYXJ0QXJlYSk7XG5cdFx0fVxuXG5cdFx0bWUuZHJhd0RhdGFzZXRzKGVhc2luZ1ZhbHVlKTtcblxuXHRcdC8vIFJlc3Qgb2YgbGF5ZXJzXG5cdFx0Zm9yICg7IGkgPCBsYXllcnMubGVuZ3RoOyArK2kpIHtcblx0XHRcdGxheWVyc1tpXS5kcmF3KG1lLmNoYXJ0QXJlYSk7XG5cdFx0fVxuXG5cdFx0bWUuX2RyYXdUb29sdGlwKGVhc2luZ1ZhbHVlKTtcblxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckRyYXcnLCBbZWFzaW5nVmFsdWVdKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHRyYW5zaXRpb246IGZ1bmN0aW9uKGVhc2luZ1ZhbHVlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gKG1lLmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0aWYgKG1lLmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdFx0bWUuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlci50cmFuc2l0aW9uKGVhc2luZ1ZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS50b29sdGlwLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFNvcnRlZERhdGFzZXRNZXRhczogZnVuY3Rpb24oZmlsdGVyVmlzaWJsZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGRhdGFzZXRzID0gbWUuZGF0YS5kYXRhc2V0cyB8fCBbXTtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpZiAoIWZpbHRlclZpc2libGUgfHwgbWUuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRyZXN1bHQucHVzaChtZS5nZXREYXRhc2V0TWV0YShpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmVzdWx0LnNvcnQoY29tcGFyZTJMZXZlbCgnb3JkZXInLCAnaW5kZXgnKSk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXM6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9nZXRTb3J0ZWREYXRhc2V0TWV0YXModHJ1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIERyYXdzIGFsbCBkYXRhc2V0cyB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlRGF0YXNldHNEcmF3YFxuXHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJEYXRhc2V0c0RyYXdgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZHJhd0RhdGFzZXRzOiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGFzZXRzLCBpO1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0c0RyYXcnLCBbZWFzaW5nVmFsdWVdKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRtZXRhc2V0cyA9IG1lLl9nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG5cdFx0Zm9yIChpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHRcdG1lLmRyYXdEYXRhc2V0KG1ldGFzZXRzW2ldLCBlYXNpbmdWYWx1ZSk7XG5cdFx0fVxuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldHNEcmF3JywgW2Vhc2luZ1ZhbHVlXSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIERyYXdzIGRhdGFzZXQgYXQgaW5kZXggdW5sZXNzIGEgcGx1Z2luIHJldHVybnMgYGZhbHNlYCB0byB0aGUgYGJlZm9yZURhdGFzZXREcmF3YFxuXHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJEYXRhc2V0RHJhd2AuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRkcmF3RGF0YXNldDogZnVuY3Rpb24obWV0YSwgZWFzaW5nVmFsdWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBhcmdzID0ge1xuXHRcdFx0bWV0YTogbWV0YSxcblx0XHRcdGluZGV4OiBtZXRhLmluZGV4LFxuXHRcdFx0ZWFzaW5nVmFsdWU6IGVhc2luZ1ZhbHVlXG5cdFx0fTtcblxuXHRcdGlmIChjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlRGF0YXNldERyYXcnLCBbYXJnc10pID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1ldGEuY29udHJvbGxlci5kcmF3KGVhc2luZ1ZhbHVlKTtcblxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckRhdGFzZXREcmF3JywgW2FyZ3NdKTtcblx0fSxcblxuXHQvKipcblx0ICogRHJhd3MgdG9vbHRpcCB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlVG9vbHRpcERyYXdgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlclRvb2x0aXBEcmF3YC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kcmF3VG9vbHRpcDogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0b29sdGlwID0gbWUudG9vbHRpcDtcblx0XHR2YXIgYXJncyA9IHtcblx0XHRcdHRvb2x0aXA6IHRvb2x0aXAsXG5cdFx0XHRlYXNpbmdWYWx1ZTogZWFzaW5nVmFsdWVcblx0XHR9O1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVUb29sdGlwRHJhdycsIFthcmdzXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dG9vbHRpcC5kcmF3KCk7XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJUb29sdGlwRHJhdycsIFthcmdzXSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEdldCB0aGUgc2luZ2xlIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZCBvblxuXHQgKiBAcmV0dXJuIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBkYXRhc2V0IGluZGV4IGFuZCBlbGVtZW50IGluZGV4IG9mIHRoZSBtYXRjaGluZyBlbGVtZW50LiBBbHNvIGNvbnRhaW5zIHRoZSByZWN0YW5nbGUgdGhhdCB3YXMgZHJhd1xuXHQgKi9cblx0Z2V0RWxlbWVudEF0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHRyZXR1cm4gY29yZV9pbnRlcmFjdGlvbi5tb2Rlcy5zaW5nbGUodGhpcywgZSk7XG5cdH0sXG5cblx0Z2V0RWxlbWVudHNBdEV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0cmV0dXJuIGNvcmVfaW50ZXJhY3Rpb24ubW9kZXMubGFiZWwodGhpcywgZSwge2ludGVyc2VjdDogdHJ1ZX0pO1xuXHR9LFxuXG5cdGdldEVsZW1lbnRzQXRYQXhpczogZnVuY3Rpb24oZSkge1xuXHRcdHJldHVybiBjb3JlX2ludGVyYWN0aW9uLm1vZGVzWyd4LWF4aXMnXSh0aGlzLCBlLCB7aW50ZXJzZWN0OiB0cnVlfSk7XG5cdH0sXG5cblx0Z2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZTogZnVuY3Rpb24oZSwgbW9kZSwgb3B0aW9ucykge1xuXHRcdHZhciBtZXRob2QgPSBjb3JlX2ludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuXHRcdGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZXR1cm4gbWV0aG9kKHRoaXMsIGUsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBbXTtcblx0fSxcblxuXHRnZXREYXRhc2V0QXRFdmVudDogZnVuY3Rpb24oZSkge1xuXHRcdHJldHVybiBjb3JlX2ludGVyYWN0aW9uLm1vZGVzLmRhdGFzZXQodGhpcywgZSwge2ludGVyc2VjdDogdHJ1ZX0pO1xuXHR9LFxuXG5cdGdldERhdGFzZXRNZXRhOiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuXHRcdGlmICghZGF0YXNldC5fbWV0YSkge1xuXHRcdFx0ZGF0YXNldC5fbWV0YSA9IHt9O1xuXHRcdH1cblxuXHRcdHZhciBtZXRhID0gZGF0YXNldC5fbWV0YVttZS5pZF07XG5cdFx0aWYgKCFtZXRhKSB7XG5cdFx0XHRtZXRhID0gZGF0YXNldC5fbWV0YVttZS5pZF0gPSB7XG5cdFx0XHRcdHR5cGU6IG51bGwsXG5cdFx0XHRcdGRhdGE6IFtdLFxuXHRcdFx0XHRkYXRhc2V0OiBudWxsLFxuXHRcdFx0XHRjb250cm9sbGVyOiBudWxsLFxuXHRcdFx0XHRoaWRkZW46IG51bGwsXHRcdFx0Ly8gU2VlIGlzRGF0YXNldFZpc2libGUoKSBjb21tZW50XG5cdFx0XHRcdHhBeGlzSUQ6IG51bGwsXG5cdFx0XHRcdHlBeGlzSUQ6IG51bGwsXG5cdFx0XHRcdG9yZGVyOiBkYXRhc2V0Lm9yZGVyIHx8IDAsXG5cdFx0XHRcdGluZGV4OiBkYXRhc2V0SW5kZXhcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1ldGE7XG5cdH0sXG5cblx0Z2V0VmlzaWJsZURhdGFzZXRDb3VudDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvdW50ID0gMDtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmICh0aGlzLmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNvdW50O1xuXHR9LFxuXG5cdGlzRGF0YXNldFZpc2libGU6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuXG5cdFx0Ly8gbWV0YS5oaWRkZW4gaXMgYSBwZXIgY2hhcnQgZGF0YXNldCBoaWRkZW4gZmxhZyBvdmVycmlkZSB3aXRoIDMgc3RhdGVzOiBpZiB0cnVlIG9yIGZhbHNlLFxuXHRcdC8vIHRoZSBkYXRhc2V0LmhpZGRlbiB2YWx1ZSBpcyBpZ25vcmVkLCBlbHNlIGlmIG51bGwsIHRoZSBkYXRhc2V0IGhpZGRlbiBzdGF0ZSBpcyByZXR1cm5lZC5cblx0XHRyZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uaGlkZGVuO1xuXHR9LFxuXG5cdGdlbmVyYXRlTGVnZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmxlZ2VuZENhbGxiYWNrKHRoaXMpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZGVzdHJveURhdGFzZXRNZXRhOiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgaWQgPSB0aGlzLmlkO1xuXHRcdHZhciBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG5cdFx0dmFyIG1ldGEgPSBkYXRhc2V0Ll9tZXRhICYmIGRhdGFzZXQuX21ldGFbaWRdO1xuXG5cdFx0aWYgKG1ldGEpIHtcblx0XHRcdG1ldGEuY29udHJvbGxlci5kZXN0cm95KCk7XG5cdFx0XHRkZWxldGUgZGF0YXNldC5fbWV0YVtpZF07XG5cdFx0fVxuXHR9LFxuXG5cdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNhbnZhcyA9IG1lLmNhbnZhcztcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdG1lLnN0b3AoKTtcblxuXHRcdC8vIGRhdGFzZXQgY29udHJvbGxlcnMgbmVlZCB0byBjbGVhbnVwIGFzc29jaWF0ZWQgZGF0YVxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBtZS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0bWUuZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuXHRcdH1cblxuXHRcdGlmIChjYW52YXMpIHtcblx0XHRcdG1lLnVuYmluZEV2ZW50cygpO1xuXHRcdFx0aGVscGVycyQxLmNhbnZhcy5jbGVhcihtZSk7XG5cdFx0XHRwbGF0Zm9ybS5yZWxlYXNlQ29udGV4dChtZS5jdHgpO1xuXHRcdFx0bWUuY2FudmFzID0gbnVsbDtcblx0XHRcdG1lLmN0eCA9IG51bGw7XG5cdFx0fVxuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2Rlc3Ryb3knKTtcblxuXHRcdGRlbGV0ZSBDaGFydC5pbnN0YW5jZXNbbWUuaWRdO1xuXHR9LFxuXG5cdHRvQmFzZTY0SW1hZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNhbnZhcy50b0RhdGFVUkwuYXBwbHkodGhpcy5jYW52YXMsIGFyZ3VtZW50cyk7XG5cdH0sXG5cblx0aW5pdFRvb2xUaXA6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0bWUudG9vbHRpcCA9IG5ldyBjb3JlX3Rvb2x0aXAoe1xuXHRcdFx0X2NoYXJ0OiBtZSxcblx0XHRcdF9jaGFydEluc3RhbmNlOiBtZSwgLy8gZGVwcmVjYXRlZCwgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXHRcdFx0X2RhdGE6IG1lLmRhdGEsXG5cdFx0XHRfb3B0aW9uczogbWUub3B0aW9ucy50b29sdGlwc1xuXHRcdH0sIG1lKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGxpc3RlbmVycyA9IG1lLl9saXN0ZW5lcnMgPSB7fTtcblx0XHR2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdG1lLmV2ZW50SGFuZGxlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHR9O1xuXG5cdFx0aGVscGVycyQxLmVhY2gobWUub3B0aW9ucy5ldmVudHMsIGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIobWUsIHR5cGUsIGxpc3RlbmVyKTtcblx0XHRcdGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuXHRcdH0pO1xuXG5cdFx0Ly8gRWxlbWVudHMgdXNlZCB0byBkZXRlY3Qgc2l6ZSBjaGFuZ2Ugc2hvdWxkIG5vdCBiZSBpbmplY3RlZCBmb3Igbm9uIHJlc3BvbnNpdmUgY2hhcnRzLlxuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjIxMFxuXHRcdGlmIChtZS5vcHRpb25zLnJlc3BvbnNpdmUpIHtcblx0XHRcdGxpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1lLnJlc2l6ZSgpO1xuXHRcdFx0fTtcblxuXHRcdFx0cGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihtZSwgJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcblx0XHRcdGxpc3RlbmVycy5yZXNpemUgPSBsaXN0ZW5lcjtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHR1bmJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGxpc3RlbmVycyA9IG1lLl9saXN0ZW5lcnM7XG5cdFx0aWYgKCFsaXN0ZW5lcnMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkZWxldGUgbWUuX2xpc3RlbmVycztcblx0XHRoZWxwZXJzJDEuZWFjaChsaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyLCB0eXBlKSB7XG5cdFx0XHRwbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKG1lLCB0eXBlLCBsaXN0ZW5lcik7XG5cdFx0fSk7XG5cdH0sXG5cblx0dXBkYXRlSG92ZXJTdHlsZTogZnVuY3Rpb24oZWxlbWVudHMsIG1vZGUsIGVuYWJsZWQpIHtcblx0XHR2YXIgcHJlZml4ID0gZW5hYmxlZCA/ICdzZXQnIDogJ3JlbW92ZSc7XG5cdFx0dmFyIGVsZW1lbnQsIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRlbGVtZW50ID0gZWxlbWVudHNbaV07XG5cdFx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0XHR0aGlzLmdldERhdGFzZXRNZXRhKGVsZW1lbnQuX2RhdGFzZXRJbmRleCkuY29udHJvbGxlcltwcmVmaXggKyAnSG92ZXJTdHlsZSddKGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChtb2RlID09PSAnZGF0YXNldCcpIHtcblx0XHRcdHRoaXMuZ2V0RGF0YXNldE1ldGEoZWxlbWVudHNbMF0uX2RhdGFzZXRJbmRleCkuY29udHJvbGxlclsnXycgKyBwcmVmaXggKyAnRGF0YXNldEhvdmVyU3R5bGUnXSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGV2ZW50SGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRvb2x0aXAgPSBtZS50b29sdGlwO1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVFdmVudCcsIFtlXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQnVmZmVyIGFueSB1cGRhdGUgY2FsbHMgc28gdGhhdCByZW5kZXJzIGRvIG5vdCBvY2N1clxuXHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IHRydWU7XG5cdFx0bWUuX2J1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cblx0XHR2YXIgY2hhbmdlZCA9IG1lLmhhbmRsZUV2ZW50KGUpO1xuXHRcdC8vIGZvciBzbW9vdGggdG9vbHRpcCBhbmltYXRpb25zIGlzc3VlICM0OTg5XG5cdFx0Ly8gdGhlIHRvb2x0aXAgc2hvdWxkIGJlIHRoZSBzb3VyY2Ugb2YgY2hhbmdlXG5cdFx0Ly8gQW5pbWF0aW9uIGNoZWNrIHdvcmthcm91bmQ6XG5cdFx0Ly8gdG9vbHRpcC5fc3RhcnQgd2lsbCBiZSBudWxsIHdoZW4gdG9vbHRpcCBpc24ndCBhbmltYXRpbmdcblx0XHRpZiAodG9vbHRpcCkge1xuXHRcdFx0Y2hhbmdlZCA9IHRvb2x0aXAuX3N0YXJ0XG5cdFx0XHRcdD8gdG9vbHRpcC5oYW5kbGVFdmVudChlKVxuXHRcdFx0XHQ6IGNoYW5nZWQgfCB0b29sdGlwLmhhbmRsZUV2ZW50KGUpO1xuXHRcdH1cblxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckV2ZW50JywgW2VdKTtcblxuXHRcdHZhciBidWZmZXJlZFJlcXVlc3QgPSBtZS5fYnVmZmVyZWRSZXF1ZXN0O1xuXHRcdGlmIChidWZmZXJlZFJlcXVlc3QpIHtcblx0XHRcdC8vIElmIHdlIGhhdmUgYW4gdXBkYXRlIHRoYXQgd2FzIHRyaWdnZXJlZCwgd2UgbmVlZCB0byBkbyBhIG5vcm1hbCByZW5kZXJcblx0XHRcdG1lLnJlbmRlcihidWZmZXJlZFJlcXVlc3QpO1xuXHRcdH0gZWxzZSBpZiAoY2hhbmdlZCAmJiAhbWUuYW5pbWF0aW5nKSB7XG5cdFx0XHQvLyBJZiBlbnRlcmluZywgbGVhdmluZywgb3IgY2hhbmdpbmcgZWxlbWVudHMsIGFuaW1hdGUgdGhlIGNoYW5nZSB2aWEgcGl2b3Rcblx0XHRcdG1lLnN0b3AoKTtcblxuXHRcdFx0Ly8gV2Ugb25seSBuZWVkIHRvIHJlbmRlciBhdCB0aGlzIHBvaW50LiBVcGRhdGluZyB3aWxsIGNhdXNlIHNjYWxlcyB0byBiZVxuXHRcdFx0Ly8gcmVjb21wdXRlZCBnZW5lcmF0aW5nIGZsaWNrZXIgJiB1c2luZyBtb3JlIG1lbW9yeSB0aGFuIG5lY2Vzc2FyeS5cblx0XHRcdG1lLnJlbmRlcih7XG5cdFx0XHRcdGR1cmF0aW9uOiBtZS5vcHRpb25zLmhvdmVyLmFuaW1hdGlvbkR1cmF0aW9uLFxuXHRcdFx0XHRsYXp5OiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRtZS5fYnVmZmVyZWRSZW5kZXIgPSBmYWxzZTtcblx0XHRtZS5fYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHQvKipcblx0ICogSGFuZGxlIGFuIGV2ZW50XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7SUV2ZW50fSBldmVudCB0aGUgZXZlbnQgdG8gaGFuZGxlXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNoYXJ0IG5lZWRzIHRvIHJlLXJlbmRlclxuXHQgKi9cblx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucyB8fCB7fTtcblx0XHR2YXIgaG92ZXJPcHRpb25zID0gb3B0aW9ucy5ob3Zlcjtcblx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0bWUubGFzdEFjdGl2ZSA9IG1lLmxhc3RBY3RpdmUgfHwgW107XG5cblx0XHQvLyBGaW5kIEFjdGl2ZSBFbGVtZW50cyBmb3IgaG92ZXIgYW5kIHRvb2x0aXBzXG5cdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuXHRcdFx0bWUuYWN0aXZlID0gW107XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLmFjdGl2ZSA9IG1lLmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgaG92ZXJPcHRpb25zLm1vZGUsIGhvdmVyT3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Ly8gSW52b2tlIG9uSG92ZXIgaG9va1xuXHRcdC8vIE5lZWQgdG8gY2FsbCB3aXRoIG5hdGl2ZSBldmVudCBoZXJlIHRvIG5vdCBicmVhayBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayhvcHRpb25zLm9uSG92ZXIgfHwgb3B0aW9ucy5ob3Zlci5vbkhvdmVyLCBbZS5uYXRpdmUsIG1lLmFjdGl2ZV0sIG1lKTtcblxuXHRcdGlmIChlLnR5cGUgPT09ICdtb3VzZXVwJyB8fCBlLnR5cGUgPT09ICdjbGljaycpIHtcblx0XHRcdGlmIChvcHRpb25zLm9uQ2xpY2spIHtcblx0XHRcdFx0Ly8gVXNlIGUubmF0aXZlIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdG9wdGlvbnMub25DbGljay5jYWxsKG1lLCBlLm5hdGl2ZSwgbWUuYWN0aXZlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgc3R5bGluZyBmb3IgbGFzdCBhY3RpdmUgKGV2ZW4gaWYgaXQgbWF5IHN0aWxsIGJlIGFjdGl2ZSlcblx0XHRpZiAobWUubGFzdEFjdGl2ZS5sZW5ndGgpIHtcblx0XHRcdG1lLnVwZGF0ZUhvdmVyU3R5bGUobWUubGFzdEFjdGl2ZSwgaG92ZXJPcHRpb25zLm1vZGUsIGZhbHNlKTtcblx0XHR9XG5cblx0XHQvLyBCdWlsdCBpbiBob3ZlciBzdHlsaW5nXG5cdFx0aWYgKG1lLmFjdGl2ZS5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcblx0XHRcdG1lLnVwZGF0ZUhvdmVyU3R5bGUobWUuYWN0aXZlLCBob3Zlck9wdGlvbnMubW9kZSwgdHJ1ZSk7XG5cdFx0fVxuXG5cdFx0Y2hhbmdlZCA9ICFoZWxwZXJzJDEuYXJyYXlFcXVhbHMobWUuYWN0aXZlLCBtZS5sYXN0QWN0aXZlKTtcblxuXHRcdC8vIFJlbWVtYmVyIExhc3QgQWN0aXZlc1xuXHRcdG1lLmxhc3RBY3RpdmUgPSBtZS5hY3RpdmU7XG5cblx0XHRyZXR1cm4gY2hhbmdlZDtcblx0fVxufSk7XG5cbi8qKlxuICogTk9URShTQikgV2UgYWN0dWFsbHkgZG9uJ3QgdXNlIHRoaXMgY29udGFpbmVyIGFueW1vcmUgYnV0IHdlIG5lZWQgdG8ga2VlcCBpdFxuICogZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIFRob3VnaCwgaXQgY2FuIHN0aWxsIGJlIHVzZWZ1bCBmb3IgcGx1Z2lucyB0aGF0XG4gKiB3b3VsZCBuZWVkIHRvIHdvcmsgb24gbXVsdGlwbGUgY2hhcnRzPyFcbiAqL1xuQ2hhcnQuaW5zdGFuY2VzID0ge307XG5cbnZhciBjb3JlX2NvbnRyb2xsZXIgPSBDaGFydDtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydCBpbnN0ZWFkLlxuICogQGNsYXNzIENoYXJ0LkNvbnRyb2xsZXJcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42XG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFydC5Db250cm9sbGVyID0gQ2hhcnQ7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZS5cbiAqIEBuYW1lc3BhY2UgQ2hhcnRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44XG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFydC50eXBlcyA9IHt9O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmUuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnMuY29uZmlnTWVyZ2VcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMkMS5jb25maWdNZXJnZSA9IG1lcmdlQ29uZmlnO1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmUuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnMuc2NhbGVNZXJnZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycyQxLnNjYWxlTWVyZ2UgPSBtZXJnZVNjYWxlQ29uZmlnO1xuXG52YXIgY29yZV9oZWxwZXJzID0gZnVuY3Rpb24oKSB7XG5cblx0Ly8gLS0gQmFzaWMganMgdXRpbGl0eSBtZXRob2RzXG5cblx0aGVscGVycyQxLndoZXJlID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgZmlsdGVyQ2FsbGJhY2spIHtcblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkoY29sbGVjdGlvbikgJiYgQXJyYXkucHJvdG90eXBlLmZpbHRlcikge1xuXHRcdFx0cmV0dXJuIGNvbGxlY3Rpb24uZmlsdGVyKGZpbHRlckNhbGxiYWNrKTtcblx0XHR9XG5cdFx0dmFyIGZpbHRlcmVkID0gW107XG5cblx0XHRoZWxwZXJzJDEuZWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soaXRlbSkpIHtcblx0XHRcdFx0ZmlsdGVyZWQucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBmaWx0ZXJlZDtcblx0fTtcblx0aGVscGVycyQxLmZpbmRJbmRleCA9IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXggP1xuXHRcdGZ1bmN0aW9uKGFycmF5LCBjYWxsYmFjaywgc2NvcGUpIHtcblx0XHRcdHJldHVybiBhcnJheS5maW5kSW5kZXgoY2FsbGJhY2ssIHNjb3BlKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbihhcnJheSwgY2FsbGJhY2ssIHNjb3BlKSB7XG5cdFx0XHRzY29wZSA9IHNjb3BlID09PSB1bmRlZmluZWQgPyBhcnJheSA6IHNjb3BlO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0aWYgKGNhbGxiYWNrLmNhbGwoc2NvcGUsIGFycmF5W2ldLCBpLCBhcnJheSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH07XG5cdGhlbHBlcnMkMS5maW5kTmV4dFdoZXJlID0gZnVuY3Rpb24oYXJyYXlUb1NlYXJjaCwgZmlsdGVyQ2FsbGJhY2ssIHN0YXJ0SW5kZXgpIHtcblx0XHQvLyBEZWZhdWx0IHRvIHN0YXJ0IG9mIHRoZSBhcnJheVxuXHRcdGlmIChoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZihzdGFydEluZGV4KSkge1xuXHRcdFx0c3RhcnRJbmRleCA9IC0xO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gc3RhcnRJbmRleCArIDE7IGkgPCBhcnJheVRvU2VhcmNoLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgY3VycmVudEl0ZW0gPSBhcnJheVRvU2VhcmNoW2ldO1xuXHRcdFx0aWYgKGZpbHRlckNhbGxiYWNrKGN1cnJlbnRJdGVtKSkge1xuXHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRoZWxwZXJzJDEuZmluZFByZXZpb3VzV2hlcmUgPSBmdW5jdGlvbihhcnJheVRvU2VhcmNoLCBmaWx0ZXJDYWxsYmFjaywgc3RhcnRJbmRleCkge1xuXHRcdC8vIERlZmF1bHQgdG8gZW5kIG9mIHRoZSBhcnJheVxuXHRcdGlmIChoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZihzdGFydEluZGV4KSkge1xuXHRcdFx0c3RhcnRJbmRleCA9IGFycmF5VG9TZWFyY2gubGVuZ3RoO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gc3RhcnRJbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHR2YXIgY3VycmVudEl0ZW0gPSBhcnJheVRvU2VhcmNoW2ldO1xuXHRcdFx0aWYgKGZpbHRlckNhbGxiYWNrKGN1cnJlbnRJdGVtKSkge1xuXHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIC0tIE1hdGggbWV0aG9kc1xuXHRoZWxwZXJzJDEuaXNOdW1iZXIgPSBmdW5jdGlvbihuKSB7XG5cdFx0cmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcblx0fTtcblx0aGVscGVycyQxLmFsbW9zdEVxdWFscyA9IGZ1bmN0aW9uKHgsIHksIGVwc2lsb24pIHtcblx0XHRyZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcblx0fTtcblx0aGVscGVycyQxLmFsbW9zdFdob2xlID0gZnVuY3Rpb24oeCwgZXBzaWxvbikge1xuXHRcdHZhciByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcblx0XHRyZXR1cm4gKChyb3VuZGVkIC0gZXBzaWxvbikgPD0geCkgJiYgKChyb3VuZGVkICsgZXBzaWxvbikgPj0geCk7XG5cdH07XG5cdGhlbHBlcnMkMS5tYXggPSBmdW5jdGlvbihhcnJheSkge1xuXHRcdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24obWF4LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KG1heCwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1heDtcblx0XHR9LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuXHR9O1xuXHRoZWxwZXJzJDEubWluID0gZnVuY3Rpb24oYXJyYXkpIHtcblx0XHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKG1pbiwgdmFsdWUpIHtcblx0XHRcdGlmICghaXNOYU4odmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiBNYXRoLm1pbihtaW4sIHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtaW47XG5cdFx0fSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcblx0fTtcblx0aGVscGVycyQxLnNpZ24gPSBNYXRoLnNpZ24gP1xuXHRcdGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiBNYXRoLnNpZ24oeCk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oeCkge1xuXHRcdFx0eCA9ICt4OyAvLyBjb252ZXJ0IHRvIGEgbnVtYmVyXG5cdFx0XHRpZiAoeCA9PT0gMCB8fCBpc05hTih4KSkge1xuXHRcdFx0XHRyZXR1cm4geDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB4ID4gMCA/IDEgOiAtMTtcblx0XHR9O1xuXHRoZWxwZXJzJDEudG9SYWRpYW5zID0gZnVuY3Rpb24oZGVncmVlcykge1xuXHRcdHJldHVybiBkZWdyZWVzICogKE1hdGguUEkgLyAxODApO1xuXHR9O1xuXHRoZWxwZXJzJDEudG9EZWdyZWVzID0gZnVuY3Rpb24ocmFkaWFucykge1xuXHRcdHJldHVybiByYWRpYW5zICogKDE4MCAvIE1hdGguUEkpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcblx0ICogaS5lLiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBhZnRlciB0aGUgZGVjaW1hbCBwb2ludCwgb2YgdGhlIHZhbHVlIG9mIHRoaXMgTnVtYmVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIEEgbnVtYmVyLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0aGVscGVycyQxLl9kZWNpbWFsUGxhY2VzID0gZnVuY3Rpb24oeCkge1xuXHRcdGlmICghaGVscGVycyQxLmlzRmluaXRlKHgpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBlID0gMTtcblx0XHR2YXIgcCA9IDA7XG5cdFx0d2hpbGUgKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCkge1xuXHRcdFx0ZSAqPSAxMDtcblx0XHRcdHArKztcblx0XHR9XG5cdFx0cmV0dXJuIHA7XG5cdH07XG5cblx0Ly8gR2V0cyB0aGUgYW5nbGUgZnJvbSB2ZXJ0aWNhbCB1cHJpZ2h0IHRvIHRoZSBwb2ludCBhYm91dCBhIGNlbnRyZS5cblx0aGVscGVycyQxLmdldEFuZ2xlRnJvbVBvaW50ID0gZnVuY3Rpb24oY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcblx0XHR2YXIgZGlzdGFuY2VGcm9tWENlbnRlciA9IGFuZ2xlUG9pbnQueCAtIGNlbnRyZVBvaW50Lng7XG5cdFx0dmFyIGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuXHRcdHZhciByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG5cblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuXG5cdFx0aWYgKGFuZ2xlIDwgKC0wLjUgKiBNYXRoLlBJKSkge1xuXHRcdFx0YW5nbGUgKz0gMi4wICogTWF0aC5QSTsgLy8gbWFrZSBzdXJlIHRoZSByZXR1cm5lZCBhbmdsZSBpcyBpbiB0aGUgcmFuZ2Ugb2YgKC1QSS8yLCAzUEkvMl1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YW5nbGU6IGFuZ2xlLFxuXHRcdFx0ZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuXHRcdH07XG5cdH07XG5cdGhlbHBlcnMkMS5kaXN0YW5jZUJldHdlZW5Qb2ludHMgPSBmdW5jdGlvbihwdDEsIHB0Mikge1xuXHRcdHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocHQyLnggLSBwdDEueCwgMikgKyBNYXRoLnBvdyhwdDIueSAtIHB0MS55LCAyKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmVcblx0ICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuYWxpYXNQaXhlbFxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG5cdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0ICovXG5cdGhlbHBlcnMkMS5hbGlhc1BpeGVsID0gZnVuY3Rpb24ocGl4ZWxXaWR0aCkge1xuXHRcdHJldHVybiAocGl4ZWxXaWR0aCAlIDIgPT09IDApID8gMCA6IDAuNTtcblx0fTtcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYWxpZ25lZCBwaXhlbCB2YWx1ZSB0byBhdm9pZCBhbnRpLWFsaWFzaW5nIGJsdXJcblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbCAtIEEgcGl4ZWwgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudC5cblx0ICogQHJldHVybnMge251bWJlcn0gVGhlIGFsaWduZWQgcGl4ZWwgdmFsdWUuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRoZWxwZXJzJDEuX2FsaWduUGl4ZWwgPSBmdW5jdGlvbihjaGFydCwgcGl4ZWwsIHdpZHRoKSB7XG5cdFx0dmFyIGRldmljZVBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbztcblx0XHR2YXIgaGFsZldpZHRoID0gd2lkdGggLyAyO1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKChwaXhlbCAtIGhhbGZXaWR0aCkgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW8gKyBoYWxmV2lkdGg7XG5cdH07XG5cblx0aGVscGVycyQxLnNwbGluZUN1cnZlID0gZnVuY3Rpb24oZmlyc3RQb2ludCwgbWlkZGxlUG9pbnQsIGFmdGVyUG9pbnQsIHQpIHtcblx0XHQvLyBQcm9wcyB0byBSb2IgU3BlbmNlciBhdCBzY2FsZWQgaW5ub3ZhdGlvbiBmb3IgaGlzIHBvc3Qgb24gc3BsaW5pbmcgYmV0d2VlbiBwb2ludHNcblx0XHQvLyBodHRwOi8vc2NhbGVkaW5ub3ZhdGlvbi5jb20vYW5hbHl0aWNzL3NwbGluZXMvYWJvdXRTcGxpbmVzLmh0bWxcblxuXHRcdC8vIFRoaXMgZnVuY3Rpb24gbXVzdCBhbHNvIHJlc3BlY3QgXCJza2lwcGVkXCIgcG9pbnRzXG5cblx0XHR2YXIgcHJldmlvdXMgPSBmaXJzdFBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGZpcnN0UG9pbnQ7XG5cdFx0dmFyIGN1cnJlbnQgPSBtaWRkbGVQb2ludDtcblx0XHR2YXIgbmV4dCA9IGFmdGVyUG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogYWZ0ZXJQb2ludDtcblxuXHRcdHZhciBkMDEgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VycmVudC54IC0gcHJldmlvdXMueCwgMikgKyBNYXRoLnBvdyhjdXJyZW50LnkgLSBwcmV2aW91cy55LCAyKSk7XG5cdFx0dmFyIGQxMiA9IE1hdGguc3FydChNYXRoLnBvdyhuZXh0LnggLSBjdXJyZW50LngsIDIpICsgTWF0aC5wb3cobmV4dC55IC0gY3VycmVudC55LCAyKSk7XG5cblx0XHR2YXIgczAxID0gZDAxIC8gKGQwMSArIGQxMik7XG5cdFx0dmFyIHMxMiA9IGQxMiAvIChkMDEgKyBkMTIpO1xuXG5cdFx0Ly8gSWYgYWxsIHBvaW50cyBhcmUgdGhlIHNhbWUsIHMwMSAmIHMwMiB3aWxsIGJlIGluZlxuXHRcdHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuXHRcdHMxMiA9IGlzTmFOKHMxMikgPyAwIDogczEyO1xuXG5cdFx0dmFyIGZhID0gdCAqIHMwMTsgLy8gc2NhbGluZyBmYWN0b3IgZm9yIHRyaWFuZ2xlIFRhXG5cdFx0dmFyIGZiID0gdCAqIHMxMjtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRwcmV2aW91czoge1xuXHRcdFx0XHR4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcblx0XHRcdFx0eTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcblx0XHRcdH0sXG5cdFx0XHRuZXh0OiB7XG5cdFx0XHRcdHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuXHRcdFx0XHR5OiBjdXJyZW50LnkgKyBmYiAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGhlbHBlcnMkMS5FUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQ7XG5cdGhlbHBlcnMkMS5zcGxpbmVDdXJ2ZU1vbm90b25lID0gZnVuY3Rpb24ocG9pbnRzKSB7XG5cdFx0Ly8gVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIELDqXppZXIgY29udHJvbCBwb2ludHMgaW4gYSBzaW1pbGFyIHdheSB0aGFuIHxzcGxpbmVDdXJ2ZXwsXG5cdFx0Ly8gYnV0IHByZXNlcnZlcyBtb25vdG9uaWNpdHkgb2YgdGhlIHByb3ZpZGVkIGRhdGEgYW5kIGVuc3VyZXMgbm8gbG9jYWwgZXh0cmVtdW1zIGFyZSBhZGRlZFxuXHRcdC8vIGJldHdlZW4gdGhlIGRhdGFzZXQgZGlzY3JldGUgcG9pbnRzIGR1ZSB0byB0aGUgaW50ZXJwb2xhdGlvbi5cblx0XHQvLyBTZWUgOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb25vdG9uZV9jdWJpY19pbnRlcnBvbGF0aW9uXG5cblx0XHR2YXIgcG9pbnRzV2l0aFRhbmdlbnRzID0gKHBvaW50cyB8fCBbXSkubWFwKGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRtb2RlbDogcG9pbnQuX21vZGVsLFxuXHRcdFx0XHRkZWx0YUs6IDAsXG5cdFx0XHRcdG1LOiAwXG5cdFx0XHR9O1xuXHRcdH0pO1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHNsb3BlcyAoZGVsdGFLKSBhbmQgaW5pdGlhbGl6ZSB0YW5nZW50cyAobUspXG5cdFx0dmFyIHBvaW50c0xlbiA9IHBvaW50c1dpdGhUYW5nZW50cy5sZW5ndGg7XG5cdFx0dmFyIGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQsIHBvaW50QWZ0ZXI7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG5cdFx0XHRwb2ludEN1cnJlbnQgPSBwb2ludHNXaXRoVGFuZ2VudHNbaV07XG5cdFx0XHRpZiAocG9pbnRDdXJyZW50Lm1vZGVsLnNraXApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHBvaW50QmVmb3JlID0gaSA+IDAgPyBwb2ludHNXaXRoVGFuZ2VudHNbaSAtIDFdIDogbnVsbDtcblx0XHRcdHBvaW50QWZ0ZXIgPSBpIDwgcG9pbnRzTGVuIC0gMSA/IHBvaW50c1dpdGhUYW5nZW50c1tpICsgMV0gOiBudWxsO1xuXHRcdFx0aWYgKHBvaW50QWZ0ZXIgJiYgIXBvaW50QWZ0ZXIubW9kZWwuc2tpcCkge1xuXHRcdFx0XHR2YXIgc2xvcGVEZWx0YVggPSAocG9pbnRBZnRlci5tb2RlbC54IC0gcG9pbnRDdXJyZW50Lm1vZGVsLngpO1xuXG5cdFx0XHRcdC8vIEluIHRoZSBjYXNlIG9mIHR3byBwb2ludHMgdGhhdCBhcHBlYXIgYXQgdGhlIHNhbWUgeCBwaXhlbCwgc2xvcGVEZWx0YVggaXMgMFxuXHRcdFx0XHRwb2ludEN1cnJlbnQuZGVsdGFLID0gc2xvcGVEZWx0YVggIT09IDAgPyAocG9pbnRBZnRlci5tb2RlbC55IC0gcG9pbnRDdXJyZW50Lm1vZGVsLnkpIC8gc2xvcGVEZWx0YVggOiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXBvaW50QmVmb3JlIHx8IHBvaW50QmVmb3JlLm1vZGVsLnNraXApIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdH0gZWxzZSBpZiAoIXBvaW50QWZ0ZXIgfHwgcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tSyA9IHBvaW50QmVmb3JlLmRlbHRhSztcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5zaWduKHBvaW50QmVmb3JlLmRlbHRhSykgIT09IHRoaXMuc2lnbihwb2ludEN1cnJlbnQuZGVsdGFLKSkge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gKHBvaW50QmVmb3JlLmRlbHRhSyArIHBvaW50Q3VycmVudC5kZWx0YUspIC8gMjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGp1c3QgdGFuZ2VudHMgdG8gZW5zdXJlIG1vbm90b25pYyBwcm9wZXJ0aWVzXG5cdFx0dmFyIGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGU7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSkge1xuXHRcdFx0cG9pbnRDdXJyZW50ID0gcG9pbnRzV2l0aFRhbmdlbnRzW2ldO1xuXHRcdFx0cG9pbnRBZnRlciA9IHBvaW50c1dpdGhUYW5nZW50c1tpICsgMV07XG5cdFx0XHRpZiAocG9pbnRDdXJyZW50Lm1vZGVsLnNraXAgfHwgcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaGVscGVycyQxLmFsbW9zdEVxdWFscyhwb2ludEN1cnJlbnQuZGVsdGFLLCAwLCB0aGlzLkVQU0lMT04pKSB7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tSyA9IHBvaW50QWZ0ZXIubUsgPSAwO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0YWxwaGFLID0gcG9pbnRDdXJyZW50Lm1LIC8gcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdGJldGFLID0gcG9pbnRBZnRlci5tSyAvIHBvaW50Q3VycmVudC5kZWx0YUs7XG5cdFx0XHRzcXVhcmVkTWFnbml0dWRlID0gTWF0aC5wb3coYWxwaGFLLCAyKSArIE1hdGgucG93KGJldGFLLCAyKTtcblx0XHRcdGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuXHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gYWxwaGFLICogdGF1SyAqIHBvaW50Q3VycmVudC5kZWx0YUs7XG5cdFx0XHRwb2ludEFmdGVyLm1LID0gYmV0YUsgKiB0YXVLICogcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlIGNvbnRyb2wgcG9pbnRzXG5cdFx0dmFyIGRlbHRhWDtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcblx0XHRcdHBvaW50Q3VycmVudCA9IHBvaW50c1dpdGhUYW5nZW50c1tpXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0cG9pbnRCZWZvcmUgPSBpID4gMCA/IHBvaW50c1dpdGhUYW5nZW50c1tpIC0gMV0gOiBudWxsO1xuXHRcdFx0cG9pbnRBZnRlciA9IGkgPCBwb2ludHNMZW4gLSAxID8gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXSA6IG51bGw7XG5cdFx0XHRpZiAocG9pbnRCZWZvcmUgJiYgIXBvaW50QmVmb3JlLm1vZGVsLnNraXApIHtcblx0XHRcdFx0ZGVsdGFYID0gKHBvaW50Q3VycmVudC5tb2RlbC54IC0gcG9pbnRCZWZvcmUubW9kZWwueCkgLyAzO1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gcG9pbnRDdXJyZW50Lm1vZGVsLnggLSBkZWx0YVg7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBwb2ludEN1cnJlbnQubW9kZWwueSAtIGRlbHRhWCAqIHBvaW50Q3VycmVudC5tSztcblx0XHRcdH1cblx0XHRcdGlmIChwb2ludEFmdGVyICYmICFwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0ZGVsdGFYID0gKHBvaW50QWZ0ZXIubW9kZWwueCAtIHBvaW50Q3VycmVudC5tb2RlbC54KSAvIDM7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IHBvaW50Q3VycmVudC5tb2RlbC54ICsgZGVsdGFYO1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubW9kZWwuY29udHJvbFBvaW50TmV4dFkgPSBwb2ludEN1cnJlbnQubW9kZWwueSArIGRlbHRhWCAqIHBvaW50Q3VycmVudC5tSztcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGhlbHBlcnMkMS5uZXh0SXRlbSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGluZGV4LCBsb29wKSB7XG5cdFx0aWYgKGxvb3ApIHtcblx0XHRcdHJldHVybiBpbmRleCA+PSBjb2xsZWN0aW9uLmxlbmd0aCAtIDEgPyBjb2xsZWN0aW9uWzBdIDogY29sbGVjdGlvbltpbmRleCArIDFdO1xuXHRcdH1cblx0XHRyZXR1cm4gaW5kZXggPj0gY29sbGVjdGlvbi5sZW5ndGggLSAxID8gY29sbGVjdGlvbltjb2xsZWN0aW9uLmxlbmd0aCAtIDFdIDogY29sbGVjdGlvbltpbmRleCArIDFdO1xuXHR9O1xuXHRoZWxwZXJzJDEucHJldmlvdXNJdGVtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgaW5kZXgsIGxvb3ApIHtcblx0XHRpZiAobG9vcCkge1xuXHRcdFx0cmV0dXJuIGluZGV4IDw9IDAgPyBjb2xsZWN0aW9uW2NvbGxlY3Rpb24ubGVuZ3RoIC0gMV0gOiBjb2xsZWN0aW9uW2luZGV4IC0gMV07XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleCA8PSAwID8gY29sbGVjdGlvblswXSA6IGNvbGxlY3Rpb25baW5kZXggLSAxXTtcblx0fTtcblx0Ly8gSW1wbGVtZW50YXRpb24gb2YgdGhlIG5pY2UgbnVtYmVyIGFsZ29yaXRobSB1c2VkIGluIGRldGVybWluaW5nIHdoZXJlIGF4aXMgbGFiZWxzIHdpbGwgZ29cblx0aGVscGVycyQxLm5pY2VOdW0gPSBmdW5jdGlvbihyYW5nZSwgcm91bmQpIHtcblx0XHR2YXIgZXhwb25lbnQgPSBNYXRoLmZsb29yKGhlbHBlcnMkMS5sb2cxMChyYW5nZSkpO1xuXHRcdHZhciBmcmFjdGlvbiA9IHJhbmdlIC8gTWF0aC5wb3coMTAsIGV4cG9uZW50KTtcblx0XHR2YXIgbmljZUZyYWN0aW9uO1xuXG5cdFx0aWYgKHJvdW5kKSB7XG5cdFx0XHRpZiAoZnJhY3Rpb24gPCAxLjUpIHtcblx0XHRcdFx0bmljZUZyYWN0aW9uID0gMTtcblx0XHRcdH0gZWxzZSBpZiAoZnJhY3Rpb24gPCAzKSB7XG5cdFx0XHRcdG5pY2VGcmFjdGlvbiA9IDI7XG5cdFx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDwgNykge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSA1O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmljZUZyYWN0aW9uID0gMTA7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8PSAxLjApIHtcblx0XHRcdG5pY2VGcmFjdGlvbiA9IDE7XG5cdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8PSAyKSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSAyO1xuXHRcdH0gZWxzZSBpZiAoZnJhY3Rpb24gPD0gNSkge1xuXHRcdFx0bmljZUZyYWN0aW9uID0gNTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmljZUZyYWN0aW9uID0gMTA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5pY2VGcmFjdGlvbiAqIE1hdGgucG93KDEwLCBleHBvbmVudCk7XG5cdH07XG5cdC8vIFJlcXVlc3QgYW5pbWF0aW9uIHBvbHlmaWxsIC0gaHR0cHM6Ly93d3cucGF1bGlyaXNoLmNvbS8yMDExL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtYW5pbWF0aW5nL1xuXHRoZWxwZXJzJDEucmVxdWVzdEFuaW1GcmFtZSA9IChmdW5jdGlvbigpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0fTtcblx0XHR9XG5cdFx0cmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHR3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdHJldHVybiB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcblx0XHRcdH07XG5cdH0oKSk7XG5cdC8vIC0tIERPTSBtZXRob2RzXG5cdGhlbHBlcnMkMS5nZXRSZWxhdGl2ZVBvc2l0aW9uID0gZnVuY3Rpb24oZXZ0LCBjaGFydCkge1xuXHRcdHZhciBtb3VzZVgsIG1vdXNlWTtcblx0XHR2YXIgZSA9IGV2dC5vcmlnaW5hbEV2ZW50IHx8IGV2dDtcblx0XHR2YXIgY2FudmFzID0gZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudDtcblx0XHR2YXIgYm91bmRpbmdSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0dmFyIHRvdWNoZXMgPSBlLnRvdWNoZXM7XG5cdFx0aWYgKHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRtb3VzZVggPSB0b3VjaGVzWzBdLmNsaWVudFg7XG5cdFx0XHRtb3VzZVkgPSB0b3VjaGVzWzBdLmNsaWVudFk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0bW91c2VYID0gZS5jbGllbnRYO1xuXHRcdFx0bW91c2VZID0gZS5jbGllbnRZO1xuXHRcdH1cblxuXHRcdC8vIFNjYWxlIG1vdXNlIGNvb3JkaW5hdGVzIGludG8gY2FudmFzIGNvb3JkaW5hdGVzXG5cdFx0Ly8gYnkgZm9sbG93aW5nIHRoZSBwYXR0ZXJuIGxhaWQgb3V0IGJ5ICdqZXJyeWonIGluIHRoZSBjb21tZW50cyBvZlxuXHRcdC8vIGh0dHBzOi8vd3d3Lmh0bWw1Y2FudmFzdHV0b3JpYWxzLmNvbS9hZHZhbmNlZC9odG1sNS1jYW52YXMtbW91c2UtY29vcmRpbmF0ZXMvXG5cdFx0dmFyIHBhZGRpbmdMZWZ0ID0gcGFyc2VGbG9hdChoZWxwZXJzJDEuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy1sZWZ0JykpO1xuXHRcdHZhciBwYWRkaW5nVG9wID0gcGFyc2VGbG9hdChoZWxwZXJzJDEuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy10b3AnKSk7XG5cdFx0dmFyIHBhZGRpbmdSaWdodCA9IHBhcnNlRmxvYXQoaGVscGVycyQxLmdldFN0eWxlKGNhbnZhcywgJ3BhZGRpbmctcmlnaHQnKSk7XG5cdFx0dmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KGhlbHBlcnMkMS5nZXRTdHlsZShjYW52YXMsICdwYWRkaW5nLWJvdHRvbScpKTtcblx0XHR2YXIgd2lkdGggPSBib3VuZGluZ1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QubGVmdCAtIHBhZGRpbmdMZWZ0IC0gcGFkZGluZ1JpZ2h0O1xuXHRcdHZhciBoZWlnaHQgPSBib3VuZGluZ1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LnRvcCAtIHBhZGRpbmdUb3AgLSBwYWRkaW5nQm90dG9tO1xuXG5cdFx0Ly8gV2UgZGl2aWRlIGJ5IHRoZSBjdXJyZW50IGRldmljZSBwaXhlbCByYXRpbywgYmVjYXVzZSB0aGUgY2FudmFzIGlzIHNjYWxlZCB1cCBieSB0aGF0IGFtb3VudCBpbiBlYWNoIGRpcmVjdGlvbi4gSG93ZXZlclxuXHRcdC8vIHRoZSBiYWNrZW5kIG1vZGVsIGlzIGluIHVuc2NhbGVkIGNvb3JkaW5hdGVzLiBTaW5jZSB3ZSBhcmUgZ29pbmcgdG8gZGVhbCB3aXRoIG91ciBtb2RlbCBjb29yZGluYXRlcywgd2UgZ28gYmFjayBoZXJlXG5cdFx0bW91c2VYID0gTWF0aC5yb3VuZCgobW91c2VYIC0gYm91bmRpbmdSZWN0LmxlZnQgLSBwYWRkaW5nTGVmdCkgLyAod2lkdGgpICogY2FudmFzLndpZHRoIC8gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuXHRcdG1vdXNlWSA9IE1hdGgucm91bmQoKG1vdXNlWSAtIGJvdW5kaW5nUmVjdC50b3AgLSBwYWRkaW5nVG9wKSAvIChoZWlnaHQpICogY2FudmFzLmhlaWdodCAvIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBtb3VzZVgsXG5cdFx0XHR5OiBtb3VzZVlcblx0XHR9O1xuXG5cdH07XG5cblx0Ly8gUHJpdmF0ZSBoZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCBtYXgtd2lkdGgvbWF4LWhlaWdodCB2YWx1ZXMgdGhhdCBtYXkgYmUgcGVyY2VudGFnZXMgaW50byBhIG51bWJlclxuXHRmdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG5cdFx0dmFyIHZhbHVlSW5QaXhlbHM7XG5cdFx0aWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0dmFsdWVJblBpeGVscyA9IHBhcnNlSW50KHN0eWxlVmFsdWUsIDEwKTtcblxuXHRcdFx0aWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuXHRcdFx0XHQvLyBwZXJjZW50YWdlICogc2l6ZSBpbiBkaW1lbnNpb25cblx0XHRcdFx0dmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWVJblBpeGVscztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGlmIHRoZSBnaXZlbiB2YWx1ZSBjb250YWlucyBhbiBlZmZlY3RpdmUgY29uc3RyYWludC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGlzQ29uc3RyYWluZWRWYWx1ZSh2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSAnbm9uZSc7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbWF4IHdpZHRoIG9yIGhlaWdodCBvZiB0aGUgZ2l2ZW4gRE9NIG5vZGUgaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgZmFzaGlvblxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkb21Ob2RlIC0gdGhlIG5vZGUgdG8gY2hlY2sgdGhlIGNvbnN0cmFpbnQgb25cblx0ICogQHBhcmFtIHtzdHJpbmd9IG1heFN0eWxlIC0gdGhlIHN0eWxlIHRoYXQgZGVmaW5lcyB0aGUgbWF4aW11bSBmb3IgdGhlIGRpcmVjdGlvbiB3ZSBhcmUgdXNpbmcgKCdtYXgtd2lkdGgnIC8gJ21heC1oZWlnaHQnKVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGVyY2VudGFnZVByb3BlcnR5IC0gcHJvcGVydHkgb2YgcGFyZW50IHRvIHVzZSB3aGVuIGNhbGN1bGF0aW5nIHdpZHRoIGFzIGEgcGVyY2VudGFnZVxuXHQgKiBAc2VlIHtAbGluayBodHRwczovL3d3dy5uYXRoYW5hZWxqb25lcy5jb20vYmxvZy8yMDEzL3JlYWRpbmctbWF4LXdpZHRoLWNyb3NzLWJyb3dzZXJ9XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRDb25zdHJhaW50RGltZW5zaW9uKGRvbU5vZGUsIG1heFN0eWxlLCBwZXJjZW50YWdlUHJvcGVydHkpIHtcblx0XHR2YXIgdmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHZhciBwYXJlbnROb2RlID0gaGVscGVycyQxLl9nZXRQYXJlbnROb2RlKGRvbU5vZGUpO1xuXHRcdHZhciBjb25zdHJhaW5lZE5vZGUgPSB2aWV3LmdldENvbXB1dGVkU3R5bGUoZG9tTm9kZSlbbWF4U3R5bGVdO1xuXHRcdHZhciBjb25zdHJhaW5lZENvbnRhaW5lciA9IHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnROb2RlKVttYXhTdHlsZV07XG5cdFx0dmFyIGhhc0NOb2RlID0gaXNDb25zdHJhaW5lZFZhbHVlKGNvbnN0cmFpbmVkTm9kZSk7XG5cdFx0dmFyIGhhc0NDb250YWluZXIgPSBpc0NvbnN0cmFpbmVkVmFsdWUoY29uc3RyYWluZWRDb250YWluZXIpO1xuXHRcdHZhciBpbmZpbml0eSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblxuXHRcdGlmIChoYXNDTm9kZSB8fCBoYXNDQ29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5taW4oXG5cdFx0XHRcdGhhc0NOb2RlID8gcGFyc2VNYXhTdHlsZShjb25zdHJhaW5lZE5vZGUsIGRvbU5vZGUsIHBlcmNlbnRhZ2VQcm9wZXJ0eSkgOiBpbmZpbml0eSxcblx0XHRcdFx0aGFzQ0NvbnRhaW5lciA/IHBhcnNlTWF4U3R5bGUoY29uc3RyYWluZWRDb250YWluZXIsIHBhcmVudE5vZGUsIHBlcmNlbnRhZ2VQcm9wZXJ0eSkgOiBpbmZpbml0eSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICdub25lJztcblx0fVxuXHQvLyByZXR1cm5zIE51bWJlciBvciB1bmRlZmluZWQgaWYgbm8gY29uc3RyYWludFxuXHRoZWxwZXJzJDEuZ2V0Q29uc3RyYWludFdpZHRoID0gZnVuY3Rpb24oZG9tTm9kZSkge1xuXHRcdHJldHVybiBnZXRDb25zdHJhaW50RGltZW5zaW9uKGRvbU5vZGUsICdtYXgtd2lkdGgnLCAnY2xpZW50V2lkdGgnKTtcblx0fTtcblx0Ly8gcmV0dXJucyBOdW1iZXIgb3IgdW5kZWZpbmVkIGlmIG5vIGNvbnN0cmFpbnRcblx0aGVscGVycyQxLmdldENvbnN0cmFpbnRIZWlnaHQgPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0cmV0dXJuIGdldENvbnN0cmFpbnREaW1lbnNpb24oZG9tTm9kZSwgJ21heC1oZWlnaHQnLCAnY2xpZW50SGVpZ2h0Jyk7XG5cdH07XG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuIFx0ICovXG5cdGhlbHBlcnMkMS5fY2FsY3VsYXRlUGFkZGluZyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgcGFkZGluZywgcGFyZW50RGltZW5zaW9uKSB7XG5cdFx0cGFkZGluZyA9IGhlbHBlcnMkMS5nZXRTdHlsZShjb250YWluZXIsIHBhZGRpbmcpO1xuXG5cdFx0cmV0dXJuIHBhZGRpbmcuaW5kZXhPZignJScpID4gLTEgPyBwYXJlbnREaW1lbnNpb24gKiBwYXJzZUludChwYWRkaW5nLCAxMCkgLyAxMDAgOiBwYXJzZUludChwYWRkaW5nLCAxMCk7XG5cdH07XG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0aGVscGVycyQxLl9nZXRQYXJlbnROb2RlID0gZnVuY3Rpb24oZG9tTm9kZSkge1xuXHRcdHZhciBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG5cdFx0aWYgKHBhcmVudCAmJiBwYXJlbnQudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU2hhZG93Um9vdF0nKSB7XG5cdFx0XHRwYXJlbnQgPSBwYXJlbnQuaG9zdDtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcmVudDtcblx0fTtcblx0aGVscGVycyQxLmdldE1heGltdW1XaWR0aCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHR2YXIgY29udGFpbmVyID0gaGVscGVycyQxLl9nZXRQYXJlbnROb2RlKGRvbU5vZGUpO1xuXHRcdGlmICghY29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gZG9tTm9kZS5jbGllbnRXaWR0aDtcblx0XHR9XG5cblx0XHR2YXIgY2xpZW50V2lkdGggPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG5cdFx0dmFyIHBhZGRpbmdMZWZ0ID0gaGVscGVycyQxLl9jYWxjdWxhdGVQYWRkaW5nKGNvbnRhaW5lciwgJ3BhZGRpbmctbGVmdCcsIGNsaWVudFdpZHRoKTtcblx0XHR2YXIgcGFkZGluZ1JpZ2h0ID0gaGVscGVycyQxLl9jYWxjdWxhdGVQYWRkaW5nKGNvbnRhaW5lciwgJ3BhZGRpbmctcmlnaHQnLCBjbGllbnRXaWR0aCk7XG5cblx0XHR2YXIgdyA9IGNsaWVudFdpZHRoIC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHQ7XG5cdFx0dmFyIGN3ID0gaGVscGVycyQxLmdldENvbnN0cmFpbnRXaWR0aChkb21Ob2RlKTtcblx0XHRyZXR1cm4gaXNOYU4oY3cpID8gdyA6IE1hdGgubWluKHcsIGN3KTtcblx0fTtcblx0aGVscGVycyQxLmdldE1heGltdW1IZWlnaHQgPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0dmFyIGNvbnRhaW5lciA9IGhlbHBlcnMkMS5fZ2V0UGFyZW50Tm9kZShkb21Ob2RlKTtcblx0XHRpZiAoIWNvbnRhaW5lcikge1xuXHRcdFx0cmV0dXJuIGRvbU5vZGUuY2xpZW50SGVpZ2h0O1xuXHRcdH1cblxuXHRcdHZhciBjbGllbnRIZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuXHRcdHZhciBwYWRkaW5nVG9wID0gaGVscGVycyQxLl9jYWxjdWxhdGVQYWRkaW5nKGNvbnRhaW5lciwgJ3BhZGRpbmctdG9wJywgY2xpZW50SGVpZ2h0KTtcblx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IGhlbHBlcnMkMS5fY2FsY3VsYXRlUGFkZGluZyhjb250YWluZXIsICdwYWRkaW5nLWJvdHRvbScsIGNsaWVudEhlaWdodCk7XG5cblx0XHR2YXIgaCA9IGNsaWVudEhlaWdodCAtIHBhZGRpbmdUb3AgLSBwYWRkaW5nQm90dG9tO1xuXHRcdHZhciBjaCA9IGhlbHBlcnMkMS5nZXRDb25zdHJhaW50SGVpZ2h0KGRvbU5vZGUpO1xuXHRcdHJldHVybiBpc05hTihjaCkgPyBoIDogTWF0aC5taW4oaCwgY2gpO1xuXHR9O1xuXHRoZWxwZXJzJDEuZ2V0U3R5bGUgPSBmdW5jdGlvbihlbCwgcHJvcGVydHkpIHtcblx0XHRyZXR1cm4gZWwuY3VycmVudFN0eWxlID9cblx0XHRcdGVsLmN1cnJlbnRTdHlsZVtwcm9wZXJ0eV0gOlxuXHRcdFx0ZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cdH07XG5cdGhlbHBlcnMkMS5yZXRpbmFTY2FsZSA9IGZ1bmN0aW9uKGNoYXJ0LCBmb3JjZVJhdGlvKSB7XG5cdFx0dmFyIHBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB8fCAxO1xuXHRcdGlmIChwaXhlbFJhdGlvID09PSAxKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHR2YXIgaGVpZ2h0ID0gY2hhcnQuaGVpZ2h0O1xuXHRcdHZhciB3aWR0aCA9IGNoYXJ0LndpZHRoO1xuXG5cdFx0Y2FudmFzLmhlaWdodCA9IGhlaWdodCAqIHBpeGVsUmF0aW87XG5cdFx0Y2FudmFzLndpZHRoID0gd2lkdGggKiBwaXhlbFJhdGlvO1xuXHRcdGNoYXJ0LmN0eC5zY2FsZShwaXhlbFJhdGlvLCBwaXhlbFJhdGlvKTtcblxuXHRcdC8vIElmIG5vIHN0eWxlIGhhcyBiZWVuIHNldCBvbiB0aGUgY2FudmFzLCB0aGUgcmVuZGVyIHNpemUgaXMgdXNlZCBhcyBkaXNwbGF5IHNpemUsXG5cdFx0Ly8gbWFraW5nIHRoZSBjaGFydCB2aXN1YWxseSBiaWdnZXIsIHNvIGxldCdzIGVuZm9yY2UgaXQgdG8gdGhlIFwiY29ycmVjdFwiIHZhbHVlcy5cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM1NzVcblx0XHRpZiAoIWNhbnZhcy5zdHlsZS5oZWlnaHQgJiYgIWNhbnZhcy5zdHlsZS53aWR0aCkge1xuXHRcdFx0Y2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cdFx0XHRjYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG5cdFx0fVxuXHR9O1xuXHQvLyAtLSBDYW52YXMgbWV0aG9kc1xuXHRoZWxwZXJzJDEuZm9udFN0cmluZyA9IGZ1bmN0aW9uKHBpeGVsU2l6ZSwgZm9udFN0eWxlLCBmb250RmFtaWx5KSB7XG5cdFx0cmV0dXJuIGZvbnRTdHlsZSArICcgJyArIHBpeGVsU2l6ZSArICdweCAnICsgZm9udEZhbWlseTtcblx0fTtcblx0aGVscGVycyQxLmxvbmdlc3RUZXh0ID0gZnVuY3Rpb24oY3R4LCBmb250LCBhcnJheU9mVGhpbmdzLCBjYWNoZSkge1xuXHRcdGNhY2hlID0gY2FjaGUgfHwge307XG5cdFx0dmFyIGRhdGEgPSBjYWNoZS5kYXRhID0gY2FjaGUuZGF0YSB8fCB7fTtcblx0XHR2YXIgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0IHx8IFtdO1xuXG5cdFx0aWYgKGNhY2hlLmZvbnQgIT09IGZvbnQpIHtcblx0XHRcdGRhdGEgPSBjYWNoZS5kYXRhID0ge307XG5cdFx0XHRnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG5cdFx0XHRjYWNoZS5mb250ID0gZm9udDtcblx0XHR9XG5cblx0XHRjdHguZm9udCA9IGZvbnQ7XG5cdFx0dmFyIGxvbmdlc3QgPSAwO1xuXHRcdHZhciBpbGVuID0gYXJyYXlPZlRoaW5ncy5sZW5ndGg7XG5cdFx0dmFyIGksIGosIGpsZW4sIHRoaW5nLCBuZXN0ZWRUaGluZztcblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0XHR0aGluZyA9IGFycmF5T2ZUaGluZ3NbaV07XG5cblx0XHRcdC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuXHRcdFx0aWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgaGVscGVycyQxLmlzQXJyYXkodGhpbmcpICE9PSB0cnVlKSB7XG5cdFx0XHRcdGxvbmdlc3QgPSBoZWxwZXJzJDEubWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuXHRcdFx0fSBlbHNlIGlmIChoZWxwZXJzJDEuaXNBcnJheSh0aGluZykpIHtcblx0XHRcdFx0Ly8gaWYgaXQgaXMgYW4gYXJyYXkgbGV0cyBtZWFzdXJlIGVhY2ggZWxlbWVudFxuXHRcdFx0XHQvLyB0byBkbyBtYXliZSBzaW1wbGlmeSB0aGlzIGZ1bmN0aW9uIGEgYml0IHNvIHdlIGNhbiBkbyB0aGlzIG1vcmUgcmVjdXJzaXZlbHk/XG5cdFx0XHRcdGZvciAoaiA9IDAsIGpsZW4gPSB0aGluZy5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcblx0XHRcdFx0XHRuZXN0ZWRUaGluZyA9IHRoaW5nW2pdO1xuXHRcdFx0XHRcdC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuXHRcdFx0XHRcdGlmIChuZXN0ZWRUaGluZyAhPT0gdW5kZWZpbmVkICYmIG5lc3RlZFRoaW5nICE9PSBudWxsICYmICFoZWxwZXJzJDEuaXNBcnJheShuZXN0ZWRUaGluZykpIHtcblx0XHRcdFx0XHRcdGxvbmdlc3QgPSBoZWxwZXJzJDEubWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgbmVzdGVkVGhpbmcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG5cdFx0aWYgKGdjTGVuID4gYXJyYXlPZlRoaW5ncy5sZW5ndGgpIHtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBnY0xlbjsgaSsrKSB7XG5cdFx0XHRcdGRlbGV0ZSBkYXRhW2djW2ldXTtcblx0XHRcdH1cblx0XHRcdGdjLnNwbGljZSgwLCBnY0xlbik7XG5cdFx0fVxuXHRcdHJldHVybiBsb25nZXN0O1xuXHR9O1xuXHRoZWxwZXJzJDEubWVhc3VyZVRleHQgPSBmdW5jdGlvbihjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBzdHJpbmcpIHtcblx0XHR2YXIgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddO1xuXHRcdGlmICghdGV4dFdpZHRoKSB7XG5cdFx0XHR0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ10gPSBjdHgubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcblx0XHRcdGdjLnB1c2goc3RyaW5nKTtcblx0XHR9XG5cdFx0aWYgKHRleHRXaWR0aCA+IGxvbmdlc3QpIHtcblx0XHRcdGxvbmdlc3QgPSB0ZXh0V2lkdGg7XG5cdFx0fVxuXHRcdHJldHVybiBsb25nZXN0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVwcmVjYXRlZFxuXHQgKi9cblx0aGVscGVycyQxLm51bWJlck9mTGFiZWxMaW5lcyA9IGZ1bmN0aW9uKGFycmF5T2ZUaGluZ3MpIHtcblx0XHR2YXIgbnVtYmVyT2ZMaW5lcyA9IDE7XG5cdFx0aGVscGVycyQxLmVhY2goYXJyYXlPZlRoaW5ncywgZnVuY3Rpb24odGhpbmcpIHtcblx0XHRcdGlmIChoZWxwZXJzJDEuaXNBcnJheSh0aGluZykpIHtcblx0XHRcdFx0aWYgKHRoaW5nLmxlbmd0aCA+IG51bWJlck9mTGluZXMpIHtcblx0XHRcdFx0XHRudW1iZXJPZkxpbmVzID0gdGhpbmcubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG51bWJlck9mTGluZXM7XG5cdH07XG5cblx0aGVscGVycyQxLmNvbG9yID0gIWNoYXJ0anNDb2xvciA/XG5cdFx0ZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0NvbG9yLmpzIG5vdCBmb3VuZCEnKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0LyogZ2xvYmFsIENhbnZhc0dyYWRpZW50ICovXG5cdFx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBDYW52YXNHcmFkaWVudCkge1xuXHRcdFx0XHR2YWx1ZSA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNoYXJ0anNDb2xvcih2YWx1ZSk7XG5cdFx0fTtcblxuXHRoZWxwZXJzJDEuZ2V0SG92ZXJDb2xvciA9IGZ1bmN0aW9uKGNvbG9yVmFsdWUpIHtcblx0XHQvKiBnbG9iYWwgQ2FudmFzUGF0dGVybiAqL1xuXHRcdHJldHVybiAoY29sb3JWYWx1ZSBpbnN0YW5jZW9mIENhbnZhc1BhdHRlcm4gfHwgY29sb3JWYWx1ZSBpbnN0YW5jZW9mIENhbnZhc0dyYWRpZW50KSA/XG5cdFx0XHRjb2xvclZhbHVlIDpcblx0XHRcdGhlbHBlcnMkMS5jb2xvcihjb2xvclZhbHVlKS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLnJnYlN0cmluZygpO1xuXHR9O1xufTtcblxuZnVuY3Rpb24gYWJzdHJhY3QoKSB7XG5cdHRocm93IG5ldyBFcnJvcihcblx0XHQnVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBlaXRoZXIgbm8gYWRhcHRlciBjYW4gJyArXG5cdFx0J2JlIGZvdW5kIG9yIGFuIGluY29tcGxldGUgaW50ZWdyYXRpb24gd2FzIHByb3ZpZGVkLidcblx0KTtcbn1cblxuLyoqXG4gKiBEYXRlIGFkYXB0ZXIgKGN1cnJlbnQgdXNlZCBieSB0aGUgdGltZSBzY2FsZSlcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlXG4gKiBAbWVtYmVyb2YgQ2hhcnQuX2FkYXB0ZXJzXG4gKiBAcHJpdmF0ZVxuICovXG5cbi8qKlxuICogQ3VycmVudGx5IHN1cHBvcnRlZCB1bml0IHN0cmluZyB2YWx1ZXMuXG4gKiBAdHlwZWRlZiB7KCdtaWxsaXNlY29uZCd8J3NlY29uZCd8J21pbnV0ZSd8J2hvdXInfCdkYXknfCd3ZWVrJ3wnbW9udGgnfCdxdWFydGVyJ3wneWVhcicpfVxuICogQG1lbWJlcm9mIENoYXJ0Ll9hZGFwdGVycy5fZGF0ZVxuICogQG5hbWUgVW5pdFxuICovXG5cbi8qKlxuICogQGNsYXNzXG4gKi9cbmZ1bmN0aW9uIERhdGVBZGFwdGVyKG9wdGlvbnMpIHtcblx0dGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbn1cblxuaGVscGVycyQxLmV4dGVuZChEYXRlQWRhcHRlci5wcm90b3R5cGUsIC8qKiBAbGVuZHMgRGF0ZUFkYXB0ZXIgKi8ge1xuXHQvKipcblx0ICogUmV0dXJucyBhIG1hcCBvZiB0aW1lIGZvcm1hdHMgZm9yIHRoZSBzdXBwb3J0ZWQgZm9ybWF0dGluZyB1bml0cyBkZWZpbmVkXG5cdCAqIGluIFVuaXQgYXMgd2VsbCBhcyAnZGF0ZXRpbWUnIHJlcHJlc2VudGluZyBhIGRldGFpbGVkIGRhdGUvdGltZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHt7c3RyaW5nOiBzdHJpbmd9fVxuXHQgKi9cblx0Zm9ybWF0czogYWJzdHJhY3QsXG5cblx0LyoqXG5cdCAqIFBhcnNlcyB0aGUgZ2l2ZW4gYHZhbHVlYCBhbmQgcmV0dXJuIHRoZSBhc3NvY2lhdGVkIHRpbWVzdGFtcC5cblx0ICogQHBhcmFtIHthbnl9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIHBhcnNlICh1c3VhbGx5IGNvbWVzIGZyb20gdGhlIGRhdGEpXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbZm9ybWF0XSAtIHRoZSBleHBlY3RlZCBkYXRhIGZvcm1hdFxuXHQgKiBAcmV0dXJucyB7KG51bWJlcnxudWxsKX1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRwYXJzZTogYWJzdHJhY3QsXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZvcm1hdHRlZCBkYXRlIGluIHRoZSBzcGVjaWZpZWQgYGZvcm1hdGAgZm9yIGEgZ2l2ZW4gYHRpbWVzdGFtcGAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXAgLSB0aGUgdGltZXN0YW1wIHRvIGZvcm1hdFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gdGhlIGRhdGUvdGltZSB0b2tlblxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0Zm9ybWF0OiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogQWRkcyB0aGUgc3BlY2lmaWVkIGBhbW91bnRgIG9mIGB1bml0YCB0byB0aGUgZ2l2ZW4gYHRpbWVzdGFtcGAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXAgLSB0aGUgaW5wdXQgdGltZXN0YW1wXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IHRvIGFkZFxuXHQgKiBAcGFyYW0ge1VuaXR9IHVuaXQgLSB0aGUgdW5pdCBhcyBzdHJpbmdcblx0ICogQHJldHVybiB7bnVtYmVyfVxuXHQgKiBAZnVuY3Rpb25cblx0ICovXG5cdGFkZDogYWJzdHJhY3QsXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG51bWJlciBvZiBgdW5pdGAgYmV0d2VlbiB0aGUgZ2l2ZW4gdGltZXN0YW1wcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heCAtIHRoZSBpbnB1dCB0aW1lc3RhbXAgKHJlZmVyZW5jZSlcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIHRoZSB0aW1lc3RhbXAgdG8gc3Vic3RyYWN0XG5cdCAqIEBwYXJhbSB7VW5pdH0gdW5pdCAtIHRoZSB1bml0IGFzIHN0cmluZ1xuXHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0ZGlmZjogYWJzdHJhY3QsXG5cblx0LyoqXG5cdCAqIFJldHVybnMgc3RhcnQgb2YgYHVuaXRgIGZvciB0aGUgZ2l2ZW4gYHRpbWVzdGFtcGAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXAgLSB0aGUgaW5wdXQgdGltZXN0YW1wXG5cdCAqIEBwYXJhbSB7VW5pdH0gdW5pdCAtIHRoZSB1bml0IGFzIHN0cmluZ1xuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dlZWtkYXldIC0gdGhlIElTTyBkYXkgb2YgdGhlIHdlZWsgd2l0aCAxIGJlaW5nIE1vbmRheVxuXHQgKiBhbmQgNyBiZWluZyBTdW5kYXkgKG9ubHkgbmVlZGVkIGlmIHBhcmFtICp1bml0KiBpcyBgaXNvV2Vla2ApLlxuXHQgKiBAZnVuY3Rpb25cblx0ICovXG5cdHN0YXJ0T2Y6IGFic3RyYWN0LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGVuZCBvZiBgdW5pdGAgZm9yIHRoZSBnaXZlbiBgdGltZXN0YW1wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIHRoZSBpbnB1dCB0aW1lc3RhbXBcblx0ICogQHBhcmFtIHtVbml0fSB1bml0IC0gdGhlIHVuaXQgYXMgc3RyaW5nXG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0ZW5kT2Y6IGFic3RyYWN0LFxuXG5cdC8vIERFUFJFQ0FUSU9OU1xuXG5cdC8qKlxuXHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBmb3Igc2NhbGUuZ2V0VmFsdWVGb3JQaXhlbCgpLFxuXHQgKiB0aGlzIG1ldGhvZCBzaG91bGQgYmUgb3ZlcnJpZGRlbiBvbmx5IGJ5IHRoZSBtb21lbnQgYWRhcHRlci5cblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuXHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY3JlYXRlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxufSk7XG5cbkRhdGVBZGFwdGVyLm92ZXJyaWRlID0gZnVuY3Rpb24obWVtYmVycykge1xuXHRoZWxwZXJzJDEuZXh0ZW5kKERhdGVBZGFwdGVyLnByb3RvdHlwZSwgbWVtYmVycyk7XG59O1xuXG52YXIgX2RhdGUgPSBEYXRlQWRhcHRlcjtcblxudmFyIGNvcmVfYWRhcHRlcnMgPSB7XG5cdF9kYXRlOiBfZGF0ZVxufTtcblxuLyoqXG4gKiBOYW1lc3BhY2UgdG8gaG9sZCBzdGF0aWMgdGljayBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICogQG5hbWVzcGFjZSBDaGFydC5UaWNrc1xuICovXG52YXIgY29yZV90aWNrcyA9IHtcblx0LyoqXG5cdCAqIE5hbWVzcGFjZSB0byBob2xkIGZvcm1hdHRlcnMgZm9yIGRpZmZlcmVudCB0eXBlcyBvZiB0aWNrc1xuXHQgKiBAbmFtZXNwYWNlIENoYXJ0LlRpY2tzLmZvcm1hdHRlcnNcblx0ICovXG5cdGZvcm1hdHRlcnM6IHtcblx0XHQvKipcblx0XHQgKiBGb3JtYXR0ZXIgZm9yIHZhbHVlIGxhYmVsc1xuXHRcdCAqIEBtZXRob2QgQ2hhcnQuVGlja3MuZm9ybWF0dGVycy52YWx1ZXNcblx0XHQgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGRpc3BsYXlcblx0XHQgKiBAcmV0dXJuIHtzdHJpbmd8c3RyaW5nW119IHRoZSBsYWJlbCB0byBkaXNwbGF5XG5cdFx0ICovXG5cdFx0dmFsdWVzOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGhlbHBlcnMkMS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogJycgKyB2YWx1ZTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRm9ybWF0dGVyIGZvciBsaW5lYXIgbnVtZXJpYyB0aWNrc1xuXHRcdCAqIEBtZXRob2QgQ2hhcnQuVGlja3MuZm9ybWF0dGVycy5saW5lYXJcblx0XHQgKiBAcGFyYW0gdGlja1ZhbHVlIHtudW1iZXJ9IHRoZSB2YWx1ZSB0byBiZSBmb3JtYXR0ZWRcblx0XHQgKiBAcGFyYW0gaW5kZXgge251bWJlcn0gdGhlIHBvc2l0aW9uIG9mIHRoZSB0aWNrVmFsdWUgcGFyYW1ldGVyIGluIHRoZSB0aWNrcyBhcnJheVxuXHRcdCAqIEBwYXJhbSB0aWNrcyB7bnVtYmVyW119IHRoZSBsaXN0IG9mIHRpY2tzIGJlaW5nIGNvbnZlcnRlZFxuXHRcdCAqIEByZXR1cm4ge3N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aWNrVmFsdWUgcGFyYW1ldGVyXG5cdFx0ICovXG5cdFx0bGluZWFyOiBmdW5jdGlvbih0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBsb3RzIG9mIHRpY2tzLCBkb24ndCB1c2UgdGhlIG9uZXNcblx0XHRcdHZhciBkZWx0YSA9IHRpY2tzLmxlbmd0aCA+IDMgPyB0aWNrc1syXSAtIHRpY2tzWzFdIDogdGlja3NbMV0gLSB0aWNrc1swXTtcblxuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIG51bWJlciBsaWtlIDIuNSBhcyB0aGUgZGVsdGEsIGZpZ3VyZSBvdXQgaG93IG1hbnkgZGVjaW1hbCBwbGFjZXMgd2UgbmVlZFxuXHRcdFx0aWYgKE1hdGguYWJzKGRlbHRhKSA+IDEpIHtcblx0XHRcdFx0aWYgKHRpY2tWYWx1ZSAhPT0gTWF0aC5mbG9vcih0aWNrVmFsdWUpKSB7XG5cdFx0XHRcdFx0Ly8gbm90IGFuIGludGVnZXJcblx0XHRcdFx0XHRkZWx0YSA9IHRpY2tWYWx1ZSAtIE1hdGguZmxvb3IodGlja1ZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbG9nRGVsdGEgPSBoZWxwZXJzJDEubG9nMTAoTWF0aC5hYnMoZGVsdGEpKTtcblx0XHRcdHZhciB0aWNrU3RyaW5nID0gJyc7XG5cblx0XHRcdGlmICh0aWNrVmFsdWUgIT09IDApIHtcblx0XHRcdFx0dmFyIG1heFRpY2sgPSBNYXRoLm1heChNYXRoLmFicyh0aWNrc1swXSksIE1hdGguYWJzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdKSk7XG5cdFx0XHRcdGlmIChtYXhUaWNrIDwgMWUtNCkgeyAvLyBhbGwgdGlja3MgYXJlIHNtYWxsIG51bWJlcnM7IHVzZSBzY2llbnRpZmljIG5vdGF0aW9uXG5cdFx0XHRcdFx0dmFyIGxvZ1RpY2sgPSBoZWxwZXJzJDEubG9nMTAoTWF0aC5hYnModGlja1ZhbHVlKSk7XG5cdFx0XHRcdFx0dmFyIG51bUV4cG9uZW50aWFsID0gTWF0aC5mbG9vcihsb2dUaWNrKSAtIE1hdGguZmxvb3IobG9nRGVsdGEpO1xuXHRcdFx0XHRcdG51bUV4cG9uZW50aWFsID0gTWF0aC5tYXgoTWF0aC5taW4obnVtRXhwb25lbnRpYWwsIDIwKSwgMCk7XG5cdFx0XHRcdFx0dGlja1N0cmluZyA9IHRpY2tWYWx1ZS50b0V4cG9uZW50aWFsKG51bUV4cG9uZW50aWFsKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgbnVtRGVjaW1hbCA9IC0xICogTWF0aC5mbG9vcihsb2dEZWx0YSk7XG5cdFx0XHRcdFx0bnVtRGVjaW1hbCA9IE1hdGgubWF4KE1hdGgubWluKG51bURlY2ltYWwsIDIwKSwgMCk7IC8vIHRvRml4ZWQgaGFzIGEgbWF4IG9mIDIwIGRlY2ltYWwgcGxhY2VzXG5cdFx0XHRcdFx0dGlja1N0cmluZyA9IHRpY2tWYWx1ZS50b0ZpeGVkKG51bURlY2ltYWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aWNrU3RyaW5nID0gJzAnOyAvLyBuZXZlciBzaG93IGRlY2ltYWwgcGxhY2VzIGZvciAwXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aWNrU3RyaW5nO1xuXHRcdH0sXG5cblx0XHRsb2dhcml0aG1pYzogZnVuY3Rpb24odGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcblx0XHRcdHZhciByZW1haW4gPSB0aWNrVmFsdWUgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoaGVscGVycyQxLmxvZzEwKHRpY2tWYWx1ZSkpKSk7XG5cblx0XHRcdGlmICh0aWNrVmFsdWUgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuICcwJztcblx0XHRcdH0gZWxzZSBpZiAocmVtYWluID09PSAxIHx8IHJlbWFpbiA9PT0gMiB8fCByZW1haW4gPT09IDUgfHwgaW5kZXggPT09IDAgfHwgaW5kZXggPT09IHRpY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0cmV0dXJuIHRpY2tWYWx1ZS50b0V4cG9uZW50aWFsKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgaXNBcnJheSA9IGhlbHBlcnMkMS5pc0FycmF5O1xudmFyIGlzTnVsbE9yVW5kZWYgPSBoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZjtcbnZhciB2YWx1ZU9yRGVmYXVsdCRhID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xudmFyIHZhbHVlQXRJbmRleE9yRGVmYXVsdCA9IGhlbHBlcnMkMS52YWx1ZUF0SW5kZXhPckRlZmF1bHQ7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnc2NhbGUnLCB7XG5cdGRpc3BsYXk6IHRydWUsXG5cdHBvc2l0aW9uOiAnbGVmdCcsXG5cdG9mZnNldDogZmFsc2UsXG5cblx0Ly8gZ3JpZCBsaW5lIHNldHRpbmdzXG5cdGdyaWRMaW5lczoge1xuXHRcdGRpc3BsYXk6IHRydWUsXG5cdFx0Y29sb3I6ICdyZ2JhKDAsMCwwLDAuMSknLFxuXHRcdGxpbmVXaWR0aDogMSxcblx0XHRkcmF3Qm9yZGVyOiB0cnVlLFxuXHRcdGRyYXdPbkNoYXJ0QXJlYTogdHJ1ZSxcblx0XHRkcmF3VGlja3M6IHRydWUsXG5cdFx0dGlja01hcmtMZW5ndGg6IDEwLFxuXHRcdHplcm9MaW5lV2lkdGg6IDEsXG5cdFx0emVyb0xpbmVDb2xvcjogJ3JnYmEoMCwwLDAsMC4yNSknLFxuXHRcdHplcm9MaW5lQm9yZGVyRGFzaDogW10sXG5cdFx0emVyb0xpbmVCb3JkZXJEYXNoT2Zmc2V0OiAwLjAsXG5cdFx0b2Zmc2V0R3JpZExpbmVzOiBmYWxzZSxcblx0XHRib3JkZXJEYXNoOiBbXSxcblx0XHRib3JkZXJEYXNoT2Zmc2V0OiAwLjBcblx0fSxcblxuXHQvLyBzY2FsZSBsYWJlbFxuXHRzY2FsZUxhYmVsOiB7XG5cdFx0Ly8gZGlzcGxheSBwcm9wZXJ0eVxuXHRcdGRpc3BsYXk6IGZhbHNlLFxuXG5cdFx0Ly8gYWN0dWFsIGxhYmVsXG5cdFx0bGFiZWxTdHJpbmc6ICcnLFxuXG5cdFx0Ly8gdG9wL2JvdHRvbSBwYWRkaW5nXG5cdFx0cGFkZGluZzoge1xuXHRcdFx0dG9wOiA0LFxuXHRcdFx0Ym90dG9tOiA0XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGxhYmVsIHNldHRpbmdzXG5cdHRpY2tzOiB7XG5cdFx0YmVnaW5BdFplcm86IGZhbHNlLFxuXHRcdG1pblJvdGF0aW9uOiAwLFxuXHRcdG1heFJvdGF0aW9uOiA1MCxcblx0XHRtaXJyb3I6IGZhbHNlLFxuXHRcdHBhZGRpbmc6IDAsXG5cdFx0cmV2ZXJzZTogZmFsc2UsXG5cdFx0ZGlzcGxheTogdHJ1ZSxcblx0XHRhdXRvU2tpcDogdHJ1ZSxcblx0XHRhdXRvU2tpcFBhZGRpbmc6IDAsXG5cdFx0bGFiZWxPZmZzZXQ6IDAsXG5cdFx0Ly8gV2UgcGFzcyB0aHJvdWdoIGFycmF5cyB0byBiZSByZW5kZXJlZCBhcyBtdWx0aWxpbmUgbGFiZWxzLCB3ZSBjb252ZXJ0IE90aGVycyB0byBzdHJpbmdzIGhlcmUuXG5cdFx0Y2FsbGJhY2s6IGNvcmVfdGlja3MuZm9ybWF0dGVycy52YWx1ZXMsXG5cdFx0bWlub3I6IHt9LFxuXHRcdG1ham9yOiB7fVxuXHR9XG59KTtcblxuLyoqIFJldHVybnMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBudW1JdGVtcyBmcm9tIGFyciAqL1xuZnVuY3Rpb24gc2FtcGxlKGFyciwgbnVtSXRlbXMpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHR2YXIgaW5jcmVtZW50ID0gYXJyLmxlbmd0aCAvIG51bUl0ZW1zO1xuXHR2YXIgaSA9IDA7XG5cdHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuXG5cdGZvciAoOyBpIDwgbGVuOyBpICs9IGluY3JlbWVudCkge1xuXHRcdHJlc3VsdC5wdXNoKGFycltNYXRoLmZsb29yKGkpXSk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2V0UGl4ZWxGb3JHcmlkTGluZShzY2FsZSwgaW5kZXgsIG9mZnNldEdyaWRMaW5lcykge1xuXHR2YXIgbGVuZ3RoID0gc2NhbGUuZ2V0VGlja3MoKS5sZW5ndGg7XG5cdHZhciB2YWxpZEluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuXHR2YXIgbGluZVZhbHVlID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXgpO1xuXHR2YXIgc3RhcnQgPSBzY2FsZS5fc3RhcnRQaXhlbDtcblx0dmFyIGVuZCA9IHNjYWxlLl9lbmRQaXhlbDtcblx0dmFyIGVwc2lsb24gPSAxZS02OyAvLyAxZS02IGlzIG1hcmdpbiBpbiBwaXhlbHMgZm9yIGFjY3VtdWxhdGVkIGVycm9yLlxuXHR2YXIgb2Zmc2V0O1xuXG5cdGlmIChvZmZzZXRHcmlkTGluZXMpIHtcblx0XHRpZiAobGVuZ3RoID09PSAxKSB7XG5cdFx0XHRvZmZzZXQgPSBNYXRoLm1heChsaW5lVmFsdWUgLSBzdGFydCwgZW5kIC0gbGluZVZhbHVlKTtcblx0XHR9IGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XG5cdFx0XHRvZmZzZXQgPSAoc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gbGluZVZhbHVlKSAvIDI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IChsaW5lVmFsdWUgLSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCAtIDEpKSAvIDI7XG5cdFx0fVxuXHRcdGxpbmVWYWx1ZSArPSB2YWxpZEluZGV4IDwgaW5kZXggPyBvZmZzZXQgOiAtb2Zmc2V0O1xuXG5cdFx0Ly8gUmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgcGl4ZWwgaXMgb3V0IG9mIHRoZSByYW5nZVxuXHRcdGlmIChsaW5lVmFsdWUgPCBzdGFydCAtIGVwc2lsb24gfHwgbGluZVZhbHVlID4gZW5kICsgZXBzaWxvbikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbGluZVZhbHVlO1xufVxuXG5mdW5jdGlvbiBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCkge1xuXHRoZWxwZXJzJDEuZWFjaChjYWNoZXMsIGZ1bmN0aW9uKGNhY2hlKSB7XG5cdFx0dmFyIGdjID0gY2FjaGUuZ2M7XG5cdFx0dmFyIGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcblx0XHR2YXIgaTtcblx0XHRpZiAoZ2NMZW4gPiBsZW5ndGgpIHtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBnY0xlbjsgKytpKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZS5kYXRhW2djW2ldXTtcblx0XHRcdH1cblx0XHRcdGdjLnNwbGljZSgwLCBnY0xlbik7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHt3aWR0aCwgaGVpZ2h0LCBvZmZzZXR9IG9iamVjdHMgZm9yIHRoZSBmaXJzdCwgbGFzdCwgd2lkZXN0LCBoaWdoZXN0IHRpY2tcbiAqIGxhYmVscyB3aGVyZSBvZmZzZXQgaW5kaWNhdGVzIHRoZSBhbmNob3IgcG9pbnQgb2Zmc2V0IGZyb20gdGhlIHRvcCBpbiBwaXhlbHMuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVMYWJlbFNpemVzKGN0eCwgdGlja0ZvbnRzLCB0aWNrcywgY2FjaGVzKSB7XG5cdHZhciBsZW5ndGggPSB0aWNrcy5sZW5ndGg7XG5cdHZhciB3aWR0aHMgPSBbXTtcblx0dmFyIGhlaWdodHMgPSBbXTtcblx0dmFyIG9mZnNldHMgPSBbXTtcblx0dmFyIGksIGosIGpsZW4sIGxhYmVsLCB0aWNrRm9udCwgZm9udFN0cmluZywgY2FjaGUsIGxpbmVIZWlnaHQsIHdpZHRoLCBoZWlnaHQsIG5lc3RlZExhYmVsLCB3aWRlc3QsIGhpZ2hlc3Q7XG5cblx0Zm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0bGFiZWwgPSB0aWNrc1tpXS5sYWJlbDtcblx0XHR0aWNrRm9udCA9IHRpY2tzW2ldLm1ham9yID8gdGlja0ZvbnRzLm1ham9yIDogdGlja0ZvbnRzLm1pbm9yO1xuXHRcdGN0eC5mb250ID0gZm9udFN0cmluZyA9IHRpY2tGb250LnN0cmluZztcblx0XHRjYWNoZSA9IGNhY2hlc1tmb250U3RyaW5nXSA9IGNhY2hlc1tmb250U3RyaW5nXSB8fCB7ZGF0YToge30sIGdjOiBbXX07XG5cdFx0bGluZUhlaWdodCA9IHRpY2tGb250LmxpbmVIZWlnaHQ7XG5cdFx0d2lkdGggPSBoZWlnaHQgPSAwO1xuXHRcdC8vIFVuZGVmaW5lZCBsYWJlbHMgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0aWYgKCFpc051bGxPclVuZGVmKGxhYmVsKSAmJiAhaXNBcnJheShsYWJlbCkpIHtcblx0XHRcdHdpZHRoID0gaGVscGVycyQxLm1lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBsYWJlbCk7XG5cdFx0XHRoZWlnaHQgPSBsaW5lSGVpZ2h0O1xuXHRcdH0gZWxzZSBpZiAoaXNBcnJheShsYWJlbCkpIHtcblx0XHRcdC8vIGlmIGl0IGlzIGFuIGFycmF5IGxldCdzIG1lYXN1cmUgZWFjaCBlbGVtZW50XG5cdFx0XHRmb3IgKGogPSAwLCBqbGVuID0gbGFiZWwubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG5cdFx0XHRcdG5lc3RlZExhYmVsID0gbGFiZWxbal07XG5cdFx0XHRcdC8vIFVuZGVmaW5lZCBsYWJlbHMgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0XHRcdGlmICghaXNOdWxsT3JVbmRlZihuZXN0ZWRMYWJlbCkgJiYgIWlzQXJyYXkobmVzdGVkTGFiZWwpKSB7XG5cdFx0XHRcdFx0d2lkdGggPSBoZWxwZXJzJDEubWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIG5lc3RlZExhYmVsKTtcblx0XHRcdFx0XHRoZWlnaHQgKz0gbGluZUhlaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHR3aWR0aHMucHVzaCh3aWR0aCk7XG5cdFx0aGVpZ2h0cy5wdXNoKGhlaWdodCk7XG5cdFx0b2Zmc2V0cy5wdXNoKGxpbmVIZWlnaHQgLyAyKTtcblx0fVxuXHRnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCk7XG5cblx0d2lkZXN0ID0gd2lkdGhzLmluZGV4T2YoTWF0aC5tYXguYXBwbHkobnVsbCwgd2lkdGhzKSk7XG5cdGhpZ2hlc3QgPSBoZWlnaHRzLmluZGV4T2YoTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cykpO1xuXG5cdGZ1bmN0aW9uIHZhbHVlQXQoaWR4KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiB3aWR0aHNbaWR4XSB8fCAwLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHRzW2lkeF0gfHwgMCxcblx0XHRcdG9mZnNldDogb2Zmc2V0c1tpZHhdIHx8IDBcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRmaXJzdDogdmFsdWVBdCgwKSxcblx0XHRsYXN0OiB2YWx1ZUF0KGxlbmd0aCAtIDEpLFxuXHRcdHdpZGVzdDogdmFsdWVBdCh3aWRlc3QpLFxuXHRcdGhpZ2hlc3Q6IHZhbHVlQXQoaGlnaGVzdClcblx0fTtcbn1cblxuZnVuY3Rpb24gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucykge1xuXHRyZXR1cm4gb3B0aW9ucy5kcmF3VGlja3MgPyBvcHRpb25zLnRpY2tNYXJrTGVuZ3RoIDogMDtcbn1cblxuZnVuY3Rpb24gZ2V0U2NhbGVMYWJlbEhlaWdodChvcHRpb25zKSB7XG5cdHZhciBmb250LCBwYWRkaW5nO1xuXG5cdGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChvcHRpb25zKTtcblx0cGFkZGluZyA9IGhlbHBlcnMkMS5vcHRpb25zLnRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuXG5cdHJldHVybiBmb250LmxpbmVIZWlnaHQgKyBwYWRkaW5nLmhlaWdodDtcbn1cblxuZnVuY3Rpb24gcGFyc2VGb250T3B0aW9ucyhvcHRpb25zLCBuZXN0ZWRPcHRzKSB7XG5cdHJldHVybiBoZWxwZXJzJDEuZXh0ZW5kKGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQoe1xuXHRcdGZvbnRGYW1pbHk6IHZhbHVlT3JEZWZhdWx0JGEobmVzdGVkT3B0cy5mb250RmFtaWx5LCBvcHRpb25zLmZvbnRGYW1pbHkpLFxuXHRcdGZvbnRTaXplOiB2YWx1ZU9yRGVmYXVsdCRhKG5lc3RlZE9wdHMuZm9udFNpemUsIG9wdGlvbnMuZm9udFNpemUpLFxuXHRcdGZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQkYShuZXN0ZWRPcHRzLmZvbnRTdHlsZSwgb3B0aW9ucy5mb250U3R5bGUpLFxuXHRcdGxpbmVIZWlnaHQ6IHZhbHVlT3JEZWZhdWx0JGEobmVzdGVkT3B0cy5saW5lSGVpZ2h0LCBvcHRpb25zLmxpbmVIZWlnaHQpXG5cdH0pLCB7XG5cdFx0Y29sb3I6IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmUoW25lc3RlZE9wdHMuZm9udENvbG9yLCBvcHRpb25zLmZvbnRDb2xvciwgY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdEZvbnRDb2xvcl0pXG5cdH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpY2tGb250T3B0aW9ucyhvcHRpb25zKSB7XG5cdHZhciBtaW5vciA9IHBhcnNlRm9udE9wdGlvbnMob3B0aW9ucywgb3B0aW9ucy5taW5vcik7XG5cdHZhciBtYWpvciA9IG9wdGlvbnMubWFqb3IuZW5hYmxlZCA/IHBhcnNlRm9udE9wdGlvbnMob3B0aW9ucywgb3B0aW9ucy5tYWpvcikgOiBtaW5vcjtcblxuXHRyZXR1cm4ge21pbm9yOiBtaW5vciwgbWFqb3I6IG1ham9yfTtcbn1cblxuZnVuY3Rpb24gbm9uU2tpcHBlZCh0aWNrc1RvRmlsdGVyKSB7XG5cdHZhciBmaWx0ZXJlZCA9IFtdO1xuXHR2YXIgaXRlbSwgaW5kZXgsIGxlbjtcblx0Zm9yIChpbmRleCA9IDAsIGxlbiA9IHRpY2tzVG9GaWx0ZXIubGVuZ3RoOyBpbmRleCA8IGxlbjsgKytpbmRleCkge1xuXHRcdGl0ZW0gPSB0aWNrc1RvRmlsdGVyW2luZGV4XTtcblx0XHRpZiAodHlwZW9mIGl0ZW0uX2luZGV4ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0ZmlsdGVyZWQucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZpbHRlcmVkO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVuU3BhY2luZyhhcnIpIHtcblx0dmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cdHZhciBpLCBkaWZmO1xuXG5cdGlmIChsZW4gPCAyKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Zm9yIChkaWZmID0gYXJyWzBdLCBpID0gMTsgaSA8IGxlbjsgKytpKSB7XG5cdFx0aWYgKGFycltpXSAtIGFycltpIC0gMV0gIT09IGRpZmYpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRpZmY7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgYXhpc0xlbmd0aCwgdGlja3NMaW1pdCkge1xuXHR2YXIgZXZlbk1ham9yU3BhY2luZyA9IGdldEV2ZW5TcGFjaW5nKG1ham9ySW5kaWNlcyk7XG5cdHZhciBzcGFjaW5nID0gKHRpY2tzLmxlbmd0aCAtIDEpIC8gdGlja3NMaW1pdDtcblx0dmFyIGZhY3RvcnMsIGZhY3RvciwgaSwgaWxlbjtcblxuXHQvLyBJZiB0aGUgbWFqb3IgdGlja3MgYXJlIGV2ZW5seSBzcGFjZWQgYXBhcnQsIHBsYWNlIHRoZSBtaW5vciB0aWNrc1xuXHQvLyBzbyB0aGF0IHRoZXkgZGl2aWRlIHRoZSBtYWpvciB0aWNrcyBpbnRvIGV2ZW4gY2h1bmtzXG5cdGlmICghZXZlbk1ham9yU3BhY2luZykge1xuXHRcdHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcblx0fVxuXG5cdGZhY3RvcnMgPSBoZWxwZXJzJDEubWF0aC5fZmFjdG9yaXplKGV2ZW5NYWpvclNwYWNpbmcpO1xuXHRmb3IgKGkgPSAwLCBpbGVuID0gZmFjdG9ycy5sZW5ndGggLSAxOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0ZmFjdG9yID0gZmFjdG9yc1tpXTtcblx0XHRpZiAoZmFjdG9yID4gc3BhY2luZykge1xuXHRcdFx0cmV0dXJuIGZhY3Rvcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xufVxuXG5mdW5jdGlvbiBnZXRNYWpvckluZGljZXModGlja3MpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHR2YXIgaSwgaWxlbjtcblx0Zm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdGlmICh0aWNrc1tpXS5tYWpvcikge1xuXHRcdFx0cmVzdWx0LnB1c2goaSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHNraXBNYWpvcnModGlja3MsIG1ham9ySW5kaWNlcywgc3BhY2luZykge1xuXHR2YXIgY291bnQgPSAwO1xuXHR2YXIgbmV4dCA9IG1ham9ySW5kaWNlc1swXTtcblx0dmFyIGksIHRpY2s7XG5cblx0c3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcblx0Zm9yIChpID0gMDsgaSA8IHRpY2tzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dGljayA9IHRpY2tzW2ldO1xuXHRcdGlmIChpID09PSBuZXh0KSB7XG5cdFx0XHR0aWNrLl9pbmRleCA9IGk7XG5cdFx0XHRjb3VudCsrO1xuXHRcdFx0bmV4dCA9IG1ham9ySW5kaWNlc1tjb3VudCAqIHNwYWNpbmddO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWxldGUgdGljay5sYWJlbDtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2tpcCh0aWNrcywgc3BhY2luZywgbWFqb3JTdGFydCwgbWFqb3JFbmQpIHtcblx0dmFyIHN0YXJ0ID0gdmFsdWVPckRlZmF1bHQkYShtYWpvclN0YXJ0LCAwKTtcblx0dmFyIGVuZCA9IE1hdGgubWluKHZhbHVlT3JEZWZhdWx0JGEobWFqb3JFbmQsIHRpY2tzLmxlbmd0aCksIHRpY2tzLmxlbmd0aCk7XG5cdHZhciBjb3VudCA9IDA7XG5cdHZhciBsZW5ndGgsIGksIHRpY2ssIG5leHQ7XG5cblx0c3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcblx0aWYgKG1ham9yRW5kKSB7XG5cdFx0bGVuZ3RoID0gbWFqb3JFbmQgLSBtYWpvclN0YXJ0O1xuXHRcdHNwYWNpbmcgPSBsZW5ndGggLyBNYXRoLmZsb29yKGxlbmd0aCAvIHNwYWNpbmcpO1xuXHR9XG5cblx0bmV4dCA9IHN0YXJ0O1xuXG5cdHdoaWxlIChuZXh0IDwgMCkge1xuXHRcdGNvdW50Kys7XG5cdFx0bmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuXHR9XG5cblx0Zm9yIChpID0gTWF0aC5tYXgoc3RhcnQsIDApOyBpIDwgZW5kOyBpKyspIHtcblx0XHR0aWNrID0gdGlja3NbaV07XG5cdFx0aWYgKGkgPT09IG5leHQpIHtcblx0XHRcdHRpY2suX2luZGV4ID0gaTtcblx0XHRcdGNvdW50Kys7XG5cdFx0XHRuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSB0aWNrLmxhYmVsO1xuXHRcdH1cblx0fVxufVxuXG52YXIgU2NhbGUgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblxuXHR6ZXJvTGluZUluZGV4OiAwLFxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIHBhZGRpbmcgbmVlZGVkIGZvciB0aGUgc2NhbGVcblx0ICogQG1ldGhvZCBnZXRQYWRkaW5nXG5cdCAqIEBwcml2YXRlXG5cdCAqIEByZXR1cm5zIHtQYWRkaW5nfSB0aGUgbmVjZXNzYXJ5IHBhZGRpbmdcblx0ICovXG5cdGdldFBhZGRpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGxlZnQ6IG1lLnBhZGRpbmdMZWZ0IHx8IDAsXG5cdFx0XHR0b3A6IG1lLnBhZGRpbmdUb3AgfHwgMCxcblx0XHRcdHJpZ2h0OiBtZS5wYWRkaW5nUmlnaHQgfHwgMCxcblx0XHRcdGJvdHRvbTogbWUucGFkZGluZ0JvdHRvbSB8fCAwXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2NhbGUgdGljayBvYmplY3RzICh7bGFiZWwsIG1ham9yfSlcblx0ICogQHNpbmNlIDIuN1xuXHQgKi9cblx0Z2V0VGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl90aWNrcztcblx0fSxcblxuXHQvKipcblx0KiBAcHJpdmF0ZVxuXHQqL1xuXHRfZ2V0TGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGF0YSA9IHRoaXMuY2hhcnQuZGF0YTtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmxhYmVscyB8fCAodGhpcy5pc0hvcml6b250YWwoKSA/IGRhdGEueExhYmVscyA6IGRhdGEueUxhYmVscykgfHwgZGF0YS5sYWJlbHMgfHwgW107XG5cdH0sXG5cblx0Ly8gVGhlc2UgbWV0aG9kcyBhcmUgb3JkZXJlZCBieSBsaWZlY3lsZS4gVXRpbGl0aWVzIHRoZW4gZm9sbG93LlxuXHQvLyBBbnkgZnVuY3Rpb24gZGVmaW5lZCBoZXJlIGlzIGluaGVyaXRlZCBieSBhbGwgc2NhbGUgdHlwZXMuXG5cdC8vIEFueSBmdW5jdGlvbiBjYW4gYmUgZXh0ZW5kZWQgYnkgdGhlIHNjYWxlIHR5cGVcblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZVxuXHQgKiBAZnVuY3Rpb24gQ2hhcnQuU2NhbGUubWVyZ2VUaWNrc09wdGlvbnNcblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuXHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdCAqL1xuXHRtZXJnZVRpY2tzT3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0Ly8gbm9vcFxuXHR9LFxuXG5cdGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVVcGRhdGUsIFt0aGlzXSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtYXhXaWR0aCAtIHRoZSBtYXggd2lkdGggaW4gcGl4ZWxzXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtYXhIZWlnaHQgLSB0aGUgbWF4IGhlaWdodCBpbiBwaXhlbHNcblx0ICogQHBhcmFtIHtvYmplY3R9IG1hcmdpbnMgLSB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgZWRnZSBvZiB0aGUgb3RoZXIgc2NhbGVzIGFuZCBlZGdlIG9mIHRoZSBjaGFydFxuXHQgKiAgIFRoaXMgc3BhY2UgY29tZXMgZnJvbSB0d28gc291cmNlczpcblx0ICogICAgIC0gcGFkZGluZyAtIHNwYWNlIHRoYXQncyByZXF1aXJlZCB0byBzaG93IHRoZSBsYWJlbHMgYXQgdGhlIGVkZ2VzIG9mIHRoZSBzY2FsZVxuXHQgKiAgICAgLSB0aGlja25lc3Mgb2Ygc2NhbGVzIG9yIGxlZ2VuZHMgaW4gYW5vdGhlciBvcmllbnRhdGlvblxuXHQgKi9cblx0dXBkYXRlOiBmdW5jdGlvbihtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXHRcdHZhciBzYW1wbGVTaXplID0gdGlja09wdHMuc2FtcGxlU2l6ZTtcblx0XHR2YXIgaSwgaWxlbiwgbGFiZWxzLCB0aWNrcywgc2FtcGxpbmdFbmFibGVkO1xuXG5cdFx0Ly8gVXBkYXRlIExpZmVjeWNsZSAtIFByb2JhYmx5IGRvbid0IHdhbnQgdG8gZXZlciBleHRlbmQgb3Igb3ZlcndyaXRlIHRoaXMgZnVuY3Rpb24gOylcblx0XHRtZS5iZWZvcmVVcGRhdGUoKTtcblxuXHRcdC8vIEFic29yYiB0aGUgbWFzdGVyIG1lYXN1cmVtZW50c1xuXHRcdG1lLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0bWUubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuXHRcdG1lLm1hcmdpbnMgPSBoZWxwZXJzJDEuZXh0ZW5kKHtcblx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRyaWdodDogMCxcblx0XHRcdHRvcDogMCxcblx0XHRcdGJvdHRvbTogMFxuXHRcdH0sIG1hcmdpbnMpO1xuXG5cdFx0bWUuX3RpY2tzID0gbnVsbDtcblx0XHRtZS50aWNrcyA9IG51bGw7XG5cdFx0bWUuX2xhYmVsU2l6ZXMgPSBudWxsO1xuXHRcdG1lLl9tYXhMYWJlbExpbmVzID0gMDtcblx0XHRtZS5sb25nZXN0TGFiZWxXaWR0aCA9IDA7XG5cdFx0bWUubG9uZ2VzdFRleHRDYWNoZSA9IG1lLmxvbmdlc3RUZXh0Q2FjaGUgfHwge307XG5cdFx0bWUuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuXHRcdG1lLl9sYWJlbEl0ZW1zID0gbnVsbDtcblxuXHRcdC8vIERpbWVuc2lvbnNcblx0XHRtZS5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuc2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuXG5cdFx0Ly8gRGF0YSBtaW4vbWF4XG5cdFx0bWUuYmVmb3JlRGF0YUxpbWl0cygpO1xuXHRcdG1lLmRldGVybWluZURhdGFMaW1pdHMoKTtcblx0XHRtZS5hZnRlckRhdGFMaW1pdHMoKTtcblxuXHRcdC8vIFRpY2tzIC0gYHRoaXMudGlja3NgIGlzIG5vdyBERVBSRUNBVEVEIVxuXHRcdC8vIEludGVybmFsIHRpY2tzIGFyZSBub3cgc3RvcmVkIGFzIG9iamVjdHMgaW4gdGhlIFBSSVZBVEUgYHRoaXMuX3RpY2tzYCBtZW1iZXJcblx0XHQvLyBhbmQgbXVzdCBub3QgYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBvdXRzaWRlIHRoaXMgY2xhc3MuIGB0aGlzLnRpY2tzYCBiZWluZ1xuXHRcdC8vIGFyb3VuZCBmb3IgbG9uZyB0aW1lIGFuZCBub3QgbWFya2VkIGFzIHByaXZhdGUsIHdlIGNhbid0IGNoYW5nZSBpdHMgc3RydWN0dXJlXG5cdFx0Ly8gd2l0aG91dCB1bmV4cGVjdGVkIGJyZWFraW5nIGNoYW5nZXMuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2NhbGUgdGlja3MsXG5cdFx0Ly8gdXNlIHNjYWxlLmdldFRpY2tzKCkgaW5zdGVhZC5cblxuXHRcdG1lLmJlZm9yZUJ1aWxkVGlja3MoKTtcblxuXHRcdC8vIE5ldyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBvYmplY3RzIGJ1dCBmb3IgQkFDS1dBUkQgQ09NUEFULFxuXHRcdC8vIHdlIHN0aWxsIHN1cHBvcnQgbm8gcmV0dXJuIChgdGhpcy50aWNrc2AgaW50ZXJuYWxseSBzZXQgYnkgY2FsbGluZyB0aGlzIG1ldGhvZCkuXG5cdFx0dGlja3MgPSBtZS5idWlsZFRpY2tzKCkgfHwgW107XG5cblx0XHQvLyBBbGxvdyBtb2RpZmljYXRpb24gb2YgdGlja3MgaW4gY2FsbGJhY2suXG5cdFx0dGlja3MgPSBtZS5hZnRlckJ1aWxkVGlja3ModGlja3MpIHx8IHRpY2tzO1xuXG5cdFx0Ly8gRW5zdXJlIHRpY2tzIGNvbnRhaW5zIHRpY2tzIGluIG5ldyB0aWNrIGZvcm1hdFxuXHRcdGlmICgoIXRpY2tzIHx8ICF0aWNrcy5sZW5ndGgpICYmIG1lLnRpY2tzKSB7XG5cdFx0XHR0aWNrcyA9IFtdO1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IG1lLnRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHR0aWNrcy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWUudGlja3NbaV0sXG5cdFx0XHRcdFx0bWFqb3I6IGZhbHNlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1lLl90aWNrcyA9IHRpY2tzO1xuXG5cdFx0Ly8gQ29tcHV0ZSB0aWNrIHJvdGF0aW9uIGFuZCBmaXQgdXNpbmcgYSBzYW1wbGVkIHN1YnNldCBvZiBsYWJlbHNcblx0XHQvLyBXZSBnZW5lcmFsbHkgZG9uJ3QgbmVlZCB0byBjb21wdXRlIHRoZSBzaXplIG9mIGV2ZXJ5IHNpbmdsZSBsYWJlbCBmb3IgZGV0ZXJtaW5pbmcgc2NhbGUgc2l6ZVxuXHRcdHNhbXBsaW5nRW5hYmxlZCA9IHNhbXBsZVNpemUgPCB0aWNrcy5sZW5ndGg7XG5cdFx0bGFiZWxzID0gbWUuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHNhbXBsaW5nRW5hYmxlZCA/IHNhbXBsZSh0aWNrcywgc2FtcGxlU2l6ZSkgOiB0aWNrcyk7XG5cblx0XHQvLyBfY29uZmlndXJlIGlzIGNhbGxlZCB0d2ljZSwgb25jZSBoZXJlLCBvbmNlIGZyb20gY29yZS5jb250cm9sbGVyLnVwZGF0ZUxheW91dC5cblx0XHQvLyBIZXJlIHdlIGhhdmVuJ3QgYmVlbiBwb3NpdGlvbmVkIHlldCwgYnV0IGRpbWVuc2lvbnMgYXJlIGNvcnJlY3QuXG5cdFx0Ly8gVmFyaWFibGVzIHNldCBpbiBfY29uZmlndXJlIGFyZSBuZWVkZWQgZm9yIGNhbGN1bGF0ZVRpY2tSb3RhdGlvbiwgYW5kXG5cdFx0Ly8gaXQncyBvayB0aGF0IGNvb3JkaW5hdGVzIGFyZSBub3QgY29ycmVjdCB0aGVyZSwgb25seSBkaW1lbnNpb25zIG1hdHRlci5cblx0XHRtZS5fY29uZmlndXJlKCk7XG5cblx0XHQvLyBUaWNrIFJvdGF0aW9uXG5cdFx0bWUuYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uKCk7XG5cdFx0bWUuY2FsY3VsYXRlVGlja1JvdGF0aW9uKCk7XG5cdFx0bWUuYWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblxuXHRcdG1lLmJlZm9yZUZpdCgpO1xuXHRcdG1lLmZpdCgpO1xuXHRcdG1lLmFmdGVyRml0KCk7XG5cblx0XHQvLyBBdXRvLXNraXBcblx0XHRtZS5fdGlja3NUb0RyYXcgPSB0aWNrT3B0cy5kaXNwbGF5ICYmICh0aWNrT3B0cy5hdXRvU2tpcCB8fCB0aWNrT3B0cy5zb3VyY2UgPT09ICdhdXRvJykgPyBtZS5fYXV0b1NraXAodGlja3MpIDogdGlja3M7XG5cblx0XHRpZiAoc2FtcGxpbmdFbmFibGVkKSB7XG5cdFx0XHQvLyBHZW5lcmF0ZSBsYWJlbHMgdXNpbmcgYWxsIG5vbi1za2lwcGVkIHRpY2tzXG5cdFx0XHRsYWJlbHMgPSBtZS5fY29udmVydFRpY2tzVG9MYWJlbHMobWUuX3RpY2tzVG9EcmF3KTtcblx0XHR9XG5cblx0XHRtZS50aWNrcyA9IGxhYmVsczsgICAvLyBCQUNLV0FSRCBDT01QQVRJQklMSVRZXG5cblx0XHQvLyBJTVBPUlRBTlQ6IGFmdGVyIHRoaXMgcG9pbnQsIHdlIGNvbnNpZGVyIHRoYXQgYHRoaXMudGlja3NgIHdpbGwgTkVWRVIgY2hhbmdlIVxuXG5cdFx0bWUuYWZ0ZXJVcGRhdGUoKTtcblxuXHRcdC8vIFRPRE8odjMpOiByZW1vdmUgbWluU2l6ZSBhcyBhIHB1YmxpYyBwcm9wZXJ0eSBhbmQgcmV0dXJuIHZhbHVlIGZyb20gYWxsIGxheW91dCBib3hlcy4gSXQgaXMgdW51c2VkXG5cdFx0Ly8gbWFrZSBtYXhXaWR0aCBhbmQgbWF4SGVpZ2h0IHByaXZhdGVcblx0XHRyZXR1cm4gbWUubWluU2l6ZTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHJldmVyc2VQaXhlbHMgPSBtZS5vcHRpb25zLnRpY2tzLnJldmVyc2U7XG5cdFx0dmFyIHN0YXJ0UGl4ZWwsIGVuZFBpeGVsO1xuXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRzdGFydFBpeGVsID0gbWUubGVmdDtcblx0XHRcdGVuZFBpeGVsID0gbWUucmlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0YXJ0UGl4ZWwgPSBtZS50b3A7XG5cdFx0XHRlbmRQaXhlbCA9IG1lLmJvdHRvbTtcblx0XHRcdC8vIGJ5IGRlZmF1bHQgdmVydGljYWwgc2NhbGVzIGFyZSBmcm9tIGJvdHRvbSB0byB0b3AsIHNvIHBpeGVscyBhcmUgcmV2ZXJzZWRcblx0XHRcdHJldmVyc2VQaXhlbHMgPSAhcmV2ZXJzZVBpeGVscztcblx0XHR9XG5cdFx0bWUuX3N0YXJ0UGl4ZWwgPSBzdGFydFBpeGVsO1xuXHRcdG1lLl9lbmRQaXhlbCA9IGVuZFBpeGVsO1xuXHRcdG1lLl9yZXZlcnNlUGl4ZWxzID0gcmV2ZXJzZVBpeGVscztcblx0XHRtZS5fbGVuZ3RoID0gZW5kUGl4ZWwgLSBzdGFydFBpeGVsO1xuXHR9LFxuXG5cdGFmdGVyVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbdGhpc10pO1xuXHR9LFxuXG5cdC8vXG5cblx0YmVmb3JlU2V0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuXHR9LFxuXHRzZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdC8vIFNldCB0aGUgdW5jb25zdHJhaW5lZCBkaW1lbnNpb24gYmVmb3JlIGxhYmVsIHJvdGF0aW9uXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0XHRtZS5sZWZ0ID0gMDtcblx0XHRcdG1lLnJpZ2h0ID0gbWUud2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblxuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS50b3AgPSAwO1xuXHRcdFx0bWUuYm90dG9tID0gbWUuaGVpZ2h0O1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IHBhZGRpbmdcblx0XHRtZS5wYWRkaW5nTGVmdCA9IDA7XG5cdFx0bWUucGFkZGluZ1RvcCA9IDA7XG5cdFx0bWUucGFkZGluZ1JpZ2h0ID0gMDtcblx0XHRtZS5wYWRkaW5nQm90dG9tID0gMDtcblx0fSxcblx0YWZ0ZXJTZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcblx0fSxcblxuXHQvLyBEYXRhIGxpbWl0c1xuXHRiZWZvcmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZURhdGFMaW1pdHMsIFt0aGlzXSk7XG5cdH0sXG5cdGRldGVybWluZURhdGFMaW1pdHM6IGhlbHBlcnMkMS5ub29wLFxuXHRhZnRlckRhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJEYXRhTGltaXRzLCBbdGhpc10pO1xuXHR9LFxuXG5cdC8vXG5cdGJlZm9yZUJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQnVpbGRUaWNrcywgW3RoaXNdKTtcblx0fSxcblx0YnVpbGRUaWNrczogaGVscGVycyQxLm5vb3AsXG5cdGFmdGVyQnVpbGRUaWNrczogZnVuY3Rpb24odGlja3MpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdC8vIHRpY2tzIGlzIGVtcHR5IGZvciBvbGQgYXhpcyBpbXBsZW1lbnRhdGlvbnMgaGVyZVxuXHRcdGlmIChpc0FycmF5KHRpY2tzKSAmJiB0aWNrcy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBoZWxwZXJzJDEuY2FsbGJhY2sobWUub3B0aW9ucy5hZnRlckJ1aWxkVGlja3MsIFttZSwgdGlja3NdKTtcblx0XHR9XG5cdFx0Ly8gU3VwcG9ydCBvbGQgaW1wbGVtZW50YXRpb25zICh0aGF0IG1vZGlmaWVkIGB0aGlzLnRpY2tzYCBkaXJlY3RseSBpbiBidWlsZFRpY2tzKVxuXHRcdG1lLnRpY2tzID0gaGVscGVycyQxLmNhbGxiYWNrKG1lLm9wdGlvbnMuYWZ0ZXJCdWlsZFRpY2tzLCBbbWUsIG1lLnRpY2tzXSkgfHwgbWUudGlja3M7XG5cdFx0cmV0dXJuIHRpY2tzO1xuXHR9LFxuXG5cdGJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24sIFt0aGlzXSk7XG5cdH0sXG5cdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdC8vIENvbnZlcnQgdGlja3MgdG8gc3RyaW5nc1xuXHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0bWUudGlja3MgPSBtZS50aWNrcy5tYXAodGlja09wdHMudXNlckNhbGxiYWNrIHx8IHRpY2tPcHRzLmNhbGxiYWNrLCB0aGlzKTtcblx0fSxcblx0YWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb246IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24sIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblxuXHRiZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uLCBbdGhpc10pO1xuXHR9LFxuXHRjYWxjdWxhdGVUaWNrUm90YXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG5cdFx0dmFyIG51bVRpY2tzID0gbWUuZ2V0VGlja3MoKS5sZW5ndGg7XG5cdFx0dmFyIG1pblJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcblx0XHR2YXIgbWF4Um90YXRpb24gPSB0aWNrT3B0cy5tYXhSb3RhdGlvbjtcblx0XHR2YXIgbGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuXHRcdHZhciBsYWJlbFNpemVzLCBtYXhMYWJlbFdpZHRoLCBtYXhMYWJlbEhlaWdodCwgbWF4V2lkdGgsIHRpY2tXaWR0aCwgbWF4SGVpZ2h0LCBtYXhMYWJlbERpYWdvbmFsO1xuXG5cdFx0aWYgKCFtZS5faXNWaXNpYmxlKCkgfHwgIXRpY2tPcHRzLmRpc3BsYXkgfHwgbWluUm90YXRpb24gPj0gbWF4Um90YXRpb24gfHwgbnVtVGlja3MgPD0gMSB8fCAhbWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdG1lLmxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRsYWJlbFNpemVzID0gbWUuX2dldExhYmVsU2l6ZXMoKTtcblx0XHRtYXhMYWJlbFdpZHRoID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG5cdFx0bWF4TGFiZWxIZWlnaHQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC0gbGFiZWxTaXplcy5oaWdoZXN0Lm9mZnNldDtcblxuXHRcdC8vIEVzdGltYXRlIHRoZSB3aWR0aCBvZiBlYWNoIGdyaWQgYmFzZWQgb24gdGhlIGNhbnZhcyB3aWR0aCwgdGhlIG1heGltdW1cblx0XHQvLyBsYWJlbCB3aWR0aCBhbmQgdGhlIG51bWJlciBvZiB0aWNrIGludGVydmFsc1xuXHRcdG1heFdpZHRoID0gTWF0aC5taW4obWUubWF4V2lkdGgsIG1lLmNoYXJ0LndpZHRoIC0gbWF4TGFiZWxXaWR0aCk7XG5cdFx0dGlja1dpZHRoID0gb3B0aW9ucy5vZmZzZXQgPyBtZS5tYXhXaWR0aCAvIG51bVRpY2tzIDogbWF4V2lkdGggLyAobnVtVGlja3MgLSAxKTtcblxuXHRcdC8vIEFsbG93IDMgcGl4ZWxzIHgyIHBhZGRpbmcgZWl0aGVyIHNpZGUgZm9yIGxhYmVsIHJlYWRhYmlsaXR5XG5cdFx0aWYgKG1heExhYmVsV2lkdGggKyA2ID4gdGlja1dpZHRoKSB7XG5cdFx0XHR0aWNrV2lkdGggPSBtYXhXaWR0aCAvIChudW1UaWNrcyAtIChvcHRpb25zLm9mZnNldCA/IDAuNSA6IDEpKTtcblx0XHRcdG1heEhlaWdodCA9IG1lLm1heEhlaWdodCAtIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZExpbmVzKVxuXHRcdFx0XHQtIHRpY2tPcHRzLnBhZGRpbmcgLSBnZXRTY2FsZUxhYmVsSGVpZ2h0KG9wdGlvbnMuc2NhbGVMYWJlbCk7XG5cdFx0XHRtYXhMYWJlbERpYWdvbmFsID0gTWF0aC5zcXJ0KG1heExhYmVsV2lkdGggKiBtYXhMYWJlbFdpZHRoICsgbWF4TGFiZWxIZWlnaHQgKiBtYXhMYWJlbEhlaWdodCk7XG5cdFx0XHRsYWJlbFJvdGF0aW9uID0gaGVscGVycyQxLnRvRGVncmVlcyhNYXRoLm1pbihcblx0XHRcdFx0TWF0aC5hc2luKE1hdGgubWluKChsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgNikgLyB0aWNrV2lkdGgsIDEpKSxcblx0XHRcdFx0TWF0aC5hc2luKE1hdGgubWluKG1heEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIDEpKSAtIE1hdGguYXNpbihtYXhMYWJlbEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwpXG5cdFx0XHQpKTtcblx0XHRcdGxhYmVsUm90YXRpb24gPSBNYXRoLm1heChtaW5Sb3RhdGlvbiwgTWF0aC5taW4obWF4Um90YXRpb24sIGxhYmVsUm90YXRpb24pKTtcblx0XHR9XG5cblx0XHRtZS5sYWJlbFJvdGF0aW9uID0gbGFiZWxSb3RhdGlvbjtcblx0fSxcblx0YWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb24sIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblxuXHRiZWZvcmVGaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRml0LCBbdGhpc10pO1xuXHR9LFxuXHRmaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gUmVzZXRcblx0XHR2YXIgbWluU2l6ZSA9IG1lLm1pblNpemUgPSB7XG5cdFx0XHR3aWR0aDogMCxcblx0XHRcdGhlaWdodDogMFxuXHRcdH07XG5cblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpY2tPcHRzID0gb3B0cy50aWNrcztcblx0XHR2YXIgc2NhbGVMYWJlbE9wdHMgPSBvcHRzLnNjYWxlTGFiZWw7XG5cdFx0dmFyIGdyaWRMaW5lT3B0cyA9IG9wdHMuZ3JpZExpbmVzO1xuXHRcdHZhciBkaXNwbGF5ID0gbWUuX2lzVmlzaWJsZSgpO1xuXHRcdHZhciBpc0JvdHRvbSA9IG9wdHMucG9zaXRpb24gPT09ICdib3R0b20nO1xuXHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblxuXHRcdC8vIFdpZHRoXG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IG1lLm1heFdpZHRoO1xuXHRcdH0gZWxzZSBpZiAoZGlzcGxheSkge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRMaW5lT3B0cykgKyBnZXRTY2FsZUxhYmVsSGVpZ2h0KHNjYWxlTGFiZWxPcHRzKTtcblx0XHR9XG5cblx0XHQvLyBoZWlnaHRcblx0XHRpZiAoIWlzSG9yaXpvbnRhbCkge1xuXHRcdFx0bWluU2l6ZS5oZWlnaHQgPSBtZS5tYXhIZWlnaHQ7IC8vIGZpbGwgYWxsIHRoZSBoZWlnaHRcblx0XHR9IGVsc2UgaWYgKGRpc3BsYXkpIHtcblx0XHRcdG1pblNpemUuaGVpZ2h0ID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZExpbmVPcHRzKSArIGdldFNjYWxlTGFiZWxIZWlnaHQoc2NhbGVMYWJlbE9wdHMpO1xuXHRcdH1cblxuXHRcdC8vIERvbid0IGJvdGhlciBmaXR0aW5nIHRoZSB0aWNrcyBpZiB3ZSBhcmUgbm90IHNob3dpbmcgdGhlIGxhYmVsc1xuXHRcdGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIGRpc3BsYXkpIHtcblx0XHRcdHZhciB0aWNrRm9udHMgPSBwYXJzZVRpY2tGb250T3B0aW9ucyh0aWNrT3B0cyk7XG5cdFx0XHR2YXIgbGFiZWxTaXplcyA9IG1lLl9nZXRMYWJlbFNpemVzKCk7XG5cdFx0XHR2YXIgZmlyc3RMYWJlbFNpemUgPSBsYWJlbFNpemVzLmZpcnN0O1xuXHRcdFx0dmFyIGxhc3RMYWJlbFNpemUgPSBsYWJlbFNpemVzLmxhc3Q7XG5cdFx0XHR2YXIgd2lkZXN0TGFiZWxTaXplID0gbGFiZWxTaXplcy53aWRlc3Q7XG5cdFx0XHR2YXIgaGlnaGVzdExhYmVsU2l6ZSA9IGxhYmVsU2l6ZXMuaGlnaGVzdDtcblx0XHRcdHZhciBsaW5lU3BhY2UgPSB0aWNrRm9udHMubWlub3IubGluZUhlaWdodCAqIDAuNDtcblx0XHRcdHZhciB0aWNrUGFkZGluZyA9IHRpY2tPcHRzLnBhZGRpbmc7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0Ly8gQSBob3Jpem9udGFsIGF4aXMgaXMgbW9yZSBjb25zdHJhaW5lZCBieSB0aGUgaGVpZ2h0LlxuXHRcdFx0XHR2YXIgaXNSb3RhdGVkID0gbWUubGFiZWxSb3RhdGlvbiAhPT0gMDtcblx0XHRcdFx0dmFyIGFuZ2xlUmFkaWFucyA9IGhlbHBlcnMkMS50b1JhZGlhbnMobWUubGFiZWxSb3RhdGlvbik7XG5cdFx0XHRcdHZhciBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlUmFkaWFucyk7XG5cdFx0XHRcdHZhciBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKGFuZ2xlUmFkaWFucyk7XG5cblx0XHRcdFx0dmFyIGxhYmVsSGVpZ2h0ID0gc2luUm90YXRpb24gKiB3aWRlc3RMYWJlbFNpemUud2lkdGhcblx0XHRcdFx0XHQrIGNvc1JvdGF0aW9uICogKGhpZ2hlc3RMYWJlbFNpemUuaGVpZ2h0IC0gKGlzUm90YXRlZCA/IGhpZ2hlc3RMYWJlbFNpemUub2Zmc2V0IDogMCkpXG5cdFx0XHRcdFx0KyAoaXNSb3RhdGVkID8gMCA6IGxpbmVTcGFjZSk7IC8vIHBhZGRpbmdcblxuXHRcdFx0XHRtaW5TaXplLmhlaWdodCA9IE1hdGgubWluKG1lLm1heEhlaWdodCwgbWluU2l6ZS5oZWlnaHQgKyBsYWJlbEhlaWdodCArIHRpY2tQYWRkaW5nKTtcblxuXHRcdFx0XHR2YXIgb2Zmc2V0TGVmdCA9IG1lLmdldFBpeGVsRm9yVGljaygwKSAtIG1lLmxlZnQ7XG5cdFx0XHRcdHZhciBvZmZzZXRSaWdodCA9IG1lLnJpZ2h0IC0gbWUuZ2V0UGl4ZWxGb3JUaWNrKG1lLmdldFRpY2tzKCkubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdHZhciBwYWRkaW5nTGVmdCwgcGFkZGluZ1JpZ2h0O1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGF0IG91ciB0aWNrcyBhcmUgYWx3YXlzIGluc2lkZSB0aGUgY2FudmFzLiBXaGVuIHJvdGF0ZWQsIHRpY2tzIGFyZSByaWdodCBhbGlnbmVkXG5cdFx0XHRcdC8vIHdoaWNoIG1lYW5zIHRoYXQgdGhlIHJpZ2h0IHBhZGRpbmcgaXMgZG9taW5hdGVkIGJ5IHRoZSBmb250IGhlaWdodFxuXHRcdFx0XHRpZiAoaXNSb3RhdGVkKSB7XG5cdFx0XHRcdFx0cGFkZGluZ0xlZnQgPSBpc0JvdHRvbSA/XG5cdFx0XHRcdFx0XHRjb3NSb3RhdGlvbiAqIGZpcnN0TGFiZWxTaXplLndpZHRoICsgc2luUm90YXRpb24gKiBmaXJzdExhYmVsU2l6ZS5vZmZzZXQgOlxuXHRcdFx0XHRcdFx0c2luUm90YXRpb24gKiAoZmlyc3RMYWJlbFNpemUuaGVpZ2h0IC0gZmlyc3RMYWJlbFNpemUub2Zmc2V0KTtcblx0XHRcdFx0XHRwYWRkaW5nUmlnaHQgPSBpc0JvdHRvbSA/XG5cdFx0XHRcdFx0XHRzaW5Sb3RhdGlvbiAqIChsYXN0TGFiZWxTaXplLmhlaWdodCAtIGxhc3RMYWJlbFNpemUub2Zmc2V0KSA6XG5cdFx0XHRcdFx0XHRjb3NSb3RhdGlvbiAqIGxhc3RMYWJlbFNpemUud2lkdGggKyBzaW5Sb3RhdGlvbiAqIGxhc3RMYWJlbFNpemUub2Zmc2V0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBhZGRpbmdMZWZ0ID0gZmlyc3RMYWJlbFNpemUud2lkdGggLyAyO1xuXHRcdFx0XHRcdHBhZGRpbmdSaWdodCA9IGxhc3RMYWJlbFNpemUud2lkdGggLyAyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRqdXN0IHBhZGRpbmcgdGFraW5nIGludG8gYWNjb3VudCBjaGFuZ2VzIGluIG9mZnNldHNcblx0XHRcdFx0Ly8gYW5kIGFkZCAzIHB4IHRvIG1vdmUgYXdheSBmcm9tIGNhbnZhcyBlZGdlc1xuXHRcdFx0XHRtZS5wYWRkaW5nTGVmdCA9IE1hdGgubWF4KChwYWRkaW5nTGVmdCAtIG9mZnNldExlZnQpICogbWUud2lkdGggLyAobWUud2lkdGggLSBvZmZzZXRMZWZ0KSwgMCkgKyAzO1xuXHRcdFx0XHRtZS5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heCgocGFkZGluZ1JpZ2h0IC0gb2Zmc2V0UmlnaHQpICogbWUud2lkdGggLyAobWUud2lkdGggLSBvZmZzZXRSaWdodCksIDApICsgMztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEEgdmVydGljYWwgYXhpcyBpcyBtb3JlIGNvbnN0cmFpbmVkIGJ5IHRoZSB3aWR0aC4gTGFiZWxzIGFyZSB0aGVcblx0XHRcdFx0Ly8gZG9taW5hbnQgZmFjdG9yIGhlcmUsIHNvIGdldCB0aGF0IGxlbmd0aCBmaXJzdCBhbmQgYWNjb3VudCBmb3IgcGFkZGluZ1xuXHRcdFx0XHR2YXIgbGFiZWxXaWR0aCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOlxuXHRcdFx0XHRcdC8vIHVzZSBsaW5lU3BhY2UgZm9yIGNvbnNpc3RlbmN5IHdpdGggaG9yaXpvbnRhbCBheGlzXG5cdFx0XHRcdFx0Ly8gdGlja1BhZGRpbmcgaXMgbm90IGltcGxlbWVudGVkIGZvciBob3Jpem9udGFsXG5cdFx0XHRcdFx0d2lkZXN0TGFiZWxTaXplLndpZHRoICsgdGlja1BhZGRpbmcgKyBsaW5lU3BhY2U7XG5cblx0XHRcdFx0bWluU2l6ZS53aWR0aCA9IE1hdGgubWluKG1lLm1heFdpZHRoLCBtaW5TaXplLndpZHRoICsgbGFiZWxXaWR0aCk7XG5cblx0XHRcdFx0bWUucGFkZGluZ1RvcCA9IGZpcnN0TGFiZWxTaXplLmhlaWdodCAvIDI7XG5cdFx0XHRcdG1lLnBhZGRpbmdCb3R0b20gPSBsYXN0TGFiZWxTaXplLmhlaWdodCAvIDI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWUuaGFuZGxlTWFyZ2lucygpO1xuXG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0bWUud2lkdGggPSBtZS5fbGVuZ3RoID0gY2hhcnQud2lkdGggLSBtZS5tYXJnaW5zLmxlZnQgLSBtZS5tYXJnaW5zLnJpZ2h0O1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aDtcblx0XHRcdG1lLmhlaWdodCA9IG1lLl9sZW5ndGggPSBjaGFydC5oZWlnaHQgLSBtZS5tYXJnaW5zLnRvcCAtIG1lLm1hcmdpbnMuYm90dG9tO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGFuZGxlIG1hcmdpbnMgYW5kIHBhZGRpbmcgaW50ZXJhY3Rpb25zXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRoYW5kbGVNYXJnaW5zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGlmIChtZS5tYXJnaW5zKSB7XG5cdFx0XHRtZS5tYXJnaW5zLmxlZnQgPSBNYXRoLm1heChtZS5wYWRkaW5nTGVmdCwgbWUubWFyZ2lucy5sZWZ0KTtcblx0XHRcdG1lLm1hcmdpbnMudG9wID0gTWF0aC5tYXgobWUucGFkZGluZ1RvcCwgbWUubWFyZ2lucy50b3ApO1xuXHRcdFx0bWUubWFyZ2lucy5yaWdodCA9IE1hdGgubWF4KG1lLnBhZGRpbmdSaWdodCwgbWUubWFyZ2lucy5yaWdodCk7XG5cdFx0XHRtZS5tYXJnaW5zLmJvdHRvbSA9IE1hdGgubWF4KG1lLnBhZGRpbmdCb3R0b20sIG1lLm1hcmdpbnMuYm90dG9tKTtcblx0XHR9XG5cdH0sXG5cblx0YWZ0ZXJGaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJGaXQsIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly8gU2hhcmVkIE1ldGhvZHNcblx0aXNIb3Jpem9udGFsOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9zID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuXHRcdHJldHVybiBwb3MgPT09ICd0b3AnIHx8IHBvcyA9PT0gJ2JvdHRvbSc7XG5cdH0sXG5cdGlzRnVsbFdpZHRoOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmZ1bGxXaWR0aDtcblx0fSxcblxuXHQvLyBHZXQgdGhlIGNvcnJlY3QgdmFsdWUuIE5hTiBiYWQgaW5wdXRzLCBJZiB0aGUgdmFsdWUgdHlwZSBpcyBvYmplY3QgZ2V0IHRoZSB4IG9yIHkgYmFzZWQgb24gd2hldGhlciB3ZSBhcmUgaG9yaXpvbnRhbCBvciBub3Rcblx0Z2V0UmlnaHRWYWx1ZTogZnVuY3Rpb24ocmF3VmFsdWUpIHtcblx0XHQvLyBOdWxsIGFuZCB1bmRlZmluZWQgdmFsdWVzIGZpcnN0XG5cdFx0aWYgKGlzTnVsbE9yVW5kZWYocmF3VmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gTmFOO1xuXHRcdH1cblx0XHQvLyBpc05hTihvYmplY3QpIHJldHVybnMgdHJ1ZSwgc28gbWFrZSBzdXJlIE5hTiBpcyBjaGVja2luZyBmb3IgYSBudW1iZXI7IERpc2NhcmQgSW5maW5pdGUgdmFsdWVzXG5cdFx0aWYgKCh0eXBlb2YgcmF3VmFsdWUgPT09ICdudW1iZXInIHx8IHJhd1ZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSAmJiAhaXNGaW5pdGUocmF3VmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gTmFOO1xuXHRcdH1cblxuXHRcdC8vIElmIGl0IGlzIGluIGZhY3QgYW4gb2JqZWN0LCBkaXZlIGluIG9uZSBtb3JlIGxldmVsXG5cdFx0aWYgKHJhd1ZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHRpZiAocmF3VmFsdWUueCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZS54KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChyYXdWYWx1ZS55ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZS55KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBWYWx1ZSBpcyBnb29kLCByZXR1cm4gaXRcblx0XHRyZXR1cm4gcmF3VmFsdWU7XG5cdH0sXG5cblx0X2NvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbih0aWNrcykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGxhYmVscywgaSwgaWxlbjtcblxuXHRcdG1lLnRpY2tzID0gdGlja3MubWFwKGZ1bmN0aW9uKHRpY2spIHtcblx0XHRcdHJldHVybiB0aWNrLnZhbHVlO1xuXHRcdH0pO1xuXG5cdFx0bWUuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG5cblx0XHQvLyBOZXcgaW1wbGVtZW50YXRpb25zIHNob3VsZCByZXR1cm4gdGhlIGZvcm1hdHRlZCB0aWNrIGxhYmVscyBidXQgZm9yIEJBQ0tXQVJEXG5cdFx0Ly8gQ09NUEFULCB3ZSBzdGlsbCBzdXBwb3J0IG5vIHJldHVybiAoYHRoaXMudGlja3NgIGludGVybmFsbHkgY2hhbmdlZCBieSBjYWxsaW5nXG5cdFx0Ly8gdGhpcyBtZXRob2QgYW5kIHN1cHBvc2VkIHRvIGNvbnRhaW4gb25seSBzdHJpbmcgdmFsdWVzKS5cblx0XHRsYWJlbHMgPSBtZS5jb252ZXJ0VGlja3NUb0xhYmVscyh0aWNrcykgfHwgbWUudGlja3M7XG5cblx0XHRtZS5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuXG5cdFx0Ly8gQkFDS1dBUkQgQ09NUEFUOiBzeW5jaHJvbml6ZSBgX3RpY2tzYCB3aXRoIGxhYmVscyAoc28gcG90ZW50aWFsbHkgYHRoaXMudGlja3NgKVxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHRpY2tzW2ldLmxhYmVsID0gbGFiZWxzW2ldO1xuXHRcdH1cblxuXHRcdHJldHVybiBsYWJlbHM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0TGFiZWxTaXplczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGFiZWxTaXplcyA9IG1lLl9sYWJlbFNpemVzO1xuXG5cdFx0aWYgKCFsYWJlbFNpemVzKSB7XG5cdFx0XHRtZS5fbGFiZWxTaXplcyA9IGxhYmVsU2l6ZXMgPSBjb21wdXRlTGFiZWxTaXplcyhtZS5jdHgsIHBhcnNlVGlja0ZvbnRPcHRpb25zKG1lLm9wdGlvbnMudGlja3MpLCBtZS5nZXRUaWNrcygpLCBtZS5sb25nZXN0VGV4dENhY2hlKTtcblx0XHRcdG1lLmxvbmdlc3RMYWJlbFdpZHRoID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxhYmVsU2l6ZXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcGFyc2VWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgc3RhcnQsIGVuZCwgbWluLCBtYXg7XG5cblx0XHRpZiAoaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdHN0YXJ0ID0gK3RoaXMuZ2V0UmlnaHRWYWx1ZSh2YWx1ZVswXSk7XG5cdFx0XHRlbmQgPSArdGhpcy5nZXRSaWdodFZhbHVlKHZhbHVlWzFdKTtcblx0XHRcdG1pbiA9IE1hdGgubWluKHN0YXJ0LCBlbmQpO1xuXHRcdFx0bWF4ID0gTWF0aC5tYXgoc3RhcnQsIGVuZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhbHVlID0gK3RoaXMuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cdFx0XHRzdGFydCA9IHVuZGVmaW5lZDtcblx0XHRcdGVuZCA9IHZhbHVlO1xuXHRcdFx0bWluID0gdmFsdWU7XG5cdFx0XHRtYXggPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bWluOiBtaW4sXG5cdFx0XHRtYXg6IG1heCxcblx0XHRcdHN0YXJ0OiBzdGFydCxcblx0XHRcdGVuZDogZW5kXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0KiBAcHJpdmF0ZVxuXHQqL1xuXHRfZ2V0U2NhbGVMYWJlbDogZnVuY3Rpb24ocmF3VmFsdWUpIHtcblx0XHR2YXIgdiA9IHRoaXMuX3BhcnNlVmFsdWUocmF3VmFsdWUpO1xuXHRcdGlmICh2LnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnWycgKyB2LnN0YXJ0ICsgJywgJyArIHYuZW5kICsgJ10nO1xuXHRcdH1cblxuXHRcdHJldHVybiArdGhpcy5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlKTtcblx0fSxcblxuXHQvKipcblx0ICogVXNlZCB0byBnZXQgdGhlIHZhbHVlIHRvIGRpc3BsYXkgaW4gdGhlIHRvb2x0aXAgZm9yIHRoZSBkYXRhIGF0IHRoZSBnaXZlbiBpbmRleFxuXHQgKiBAcGFyYW0gaW5kZXhcblx0ICogQHBhcmFtIGRhdGFzZXRJbmRleFxuXHQgKi9cblx0Z2V0TGFiZWxGb3JJbmRleDogaGVscGVycyQxLm5vb3AsXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxvY2F0aW9uIG9mIHRoZSBnaXZlbiBkYXRhIHBvaW50LiBWYWx1ZSBjYW4gZWl0aGVyIGJlIGFuIGluZGV4IG9yIGEgbnVtZXJpY2FsIHZhbHVlXG5cdCAqIFRoZSBjb29yZGluYXRlICgwLCAwKSBpcyBhdCB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhc1xuXHQgKiBAcGFyYW0gdmFsdWVcblx0ICogQHBhcmFtIGluZGV4XG5cdCAqIEBwYXJhbSBkYXRhc2V0SW5kZXhcblx0ICovXG5cdGdldFBpeGVsRm9yVmFsdWU6IGhlbHBlcnMkMS5ub29wLFxuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGdldCB0aGUgZGF0YSB2YWx1ZSBmcm9tIGEgZ2l2ZW4gcGl4ZWwuIFRoaXMgaXMgdGhlIGludmVyc2Ugb2YgZ2V0UGl4ZWxGb3JWYWx1ZVxuXHQgKiBUaGUgY29vcmRpbmF0ZSAoMCwgMCkgaXMgYXQgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBjYW52YXNcblx0ICogQHBhcmFtIHBpeGVsXG5cdCAqL1xuXHRnZXRWYWx1ZUZvclBpeGVsOiBoZWxwZXJzJDEubm9vcCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbG9jYXRpb24gb2YgdGhlIHRpY2sgYXQgdGhlIGdpdmVuIGluZGV4XG5cdCAqIFRoZSBjb29yZGluYXRlICgwLCAwKSBpcyBhdCB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhc1xuXHQgKi9cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9mZnNldCA9IG1lLm9wdGlvbnMub2Zmc2V0O1xuXHRcdHZhciBudW1UaWNrcyA9IG1lLl90aWNrcy5sZW5ndGg7XG5cdFx0dmFyIHRpY2tXaWR0aCA9IDEgLyBNYXRoLm1heChudW1UaWNrcyAtIChvZmZzZXQgPyAwIDogMSksIDEpO1xuXG5cdFx0cmV0dXJuIGluZGV4IDwgMCB8fCBpbmRleCA+IG51bVRpY2tzIC0gMVxuXHRcdFx0PyBudWxsXG5cdFx0XHQ6IG1lLmdldFBpeGVsRm9yRGVjaW1hbChpbmRleCAqIHRpY2tXaWR0aCArIChvZmZzZXQgPyB0aWNrV2lkdGggLyAyIDogMCkpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVdGlsaXR5IGZvciBnZXR0aW5nIHRoZSBwaXhlbCBsb2NhdGlvbiBvZiBhIHBlcmNlbnRhZ2Ugb2Ygc2NhbGVcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqL1xuXHRnZXRQaXhlbEZvckRlY2ltYWw6IGZ1bmN0aW9uKGRlY2ltYWwpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0aWYgKG1lLl9yZXZlcnNlUGl4ZWxzKSB7XG5cdFx0XHRkZWNpbWFsID0gMSAtIGRlY2ltYWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1lLl9zdGFydFBpeGVsICsgZGVjaW1hbCAqIG1lLl9sZW5ndGg7XG5cdH0sXG5cblx0Z2V0RGVjaW1hbEZvclBpeGVsOiBmdW5jdGlvbihwaXhlbCkge1xuXHRcdHZhciBkZWNpbWFsID0gKHBpeGVsIC0gdGhpcy5fc3RhcnRQaXhlbCkgLyB0aGlzLl9sZW5ndGg7XG5cdFx0cmV0dXJuIHRoaXMuX3JldmVyc2VQaXhlbHMgPyAxIC0gZGVjaW1hbCA6IGRlY2ltYWw7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHBpeGVsIGZvciB0aGUgbWluaW11bSBjaGFydCB2YWx1ZVxuXHQgKiBUaGUgY29vcmRpbmF0ZSAoMCwgMCkgaXMgYXQgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBjYW52YXNcblx0ICovXG5cdGdldEJhc2VQaXhlbDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldEJhc2VWYWx1ZSgpKTtcblx0fSxcblxuXHRnZXRCYXNlVmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1pbiA9IG1lLm1pbjtcblx0XHR2YXIgbWF4ID0gbWUubWF4O1xuXG5cdFx0cmV0dXJuIG1lLmJlZ2luQXRaZXJvID8gMCA6XG5cdFx0XHRtaW4gPCAwICYmIG1heCA8IDAgPyBtYXggOlxuXHRcdFx0bWluID4gMCAmJiBtYXggPiAwID8gbWluIDpcblx0XHRcdDA7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBzdWJzZXQgb2YgdGlja3MgdG8gYmUgcGxvdHRlZCB0byBhdm9pZCBvdmVybGFwcGluZyBsYWJlbHMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfYXV0b1NraXA6IGZ1bmN0aW9uKHRpY2tzKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXHRcdHZhciBheGlzTGVuZ3RoID0gbWUuX2xlbmd0aDtcblx0XHR2YXIgdGlja3NMaW1pdCA9IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgfHwgYXhpc0xlbmd0aCAvIG1lLl90aWNrU2l6ZSgpICsgMTtcblx0XHR2YXIgbWFqb3JJbmRpY2VzID0gdGlja09wdHMubWFqb3IuZW5hYmxlZCA/IGdldE1ham9ySW5kaWNlcyh0aWNrcykgOiBbXTtcblx0XHR2YXIgbnVtTWFqb3JJbmRpY2VzID0gbWFqb3JJbmRpY2VzLmxlbmd0aDtcblx0XHR2YXIgZmlyc3QgPSBtYWpvckluZGljZXNbMF07XG5cdFx0dmFyIGxhc3QgPSBtYWpvckluZGljZXNbbnVtTWFqb3JJbmRpY2VzIC0gMV07XG5cdFx0dmFyIGksIGlsZW4sIHNwYWNpbmcsIGF2Z01ham9yU3BhY2luZztcblxuXHRcdC8vIElmIHRoZXJlIGFyZSB0b28gbWFueSBtYWpvciB0aWNrcyB0byBkaXNwbGF5IHRoZW0gYWxsXG5cdFx0aWYgKG51bU1ham9ySW5kaWNlcyA+IHRpY2tzTGltaXQpIHtcblx0XHRcdHNraXBNYWpvcnModGlja3MsIG1ham9ySW5kaWNlcywgbnVtTWFqb3JJbmRpY2VzIC8gdGlja3NMaW1pdCk7XG5cdFx0XHRyZXR1cm4gbm9uU2tpcHBlZCh0aWNrcyk7XG5cdFx0fVxuXG5cdFx0c3BhY2luZyA9IGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgYXhpc0xlbmd0aCwgdGlja3NMaW1pdCk7XG5cblx0XHRpZiAobnVtTWFqb3JJbmRpY2VzID4gMCkge1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IG51bU1ham9ySW5kaWNlcyAtIDE7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdFx0c2tpcCh0aWNrcywgc3BhY2luZywgbWFqb3JJbmRpY2VzW2ldLCBtYWpvckluZGljZXNbaSArIDFdKTtcblx0XHRcdH1cblx0XHRcdGF2Z01ham9yU3BhY2luZyA9IG51bU1ham9ySW5kaWNlcyA+IDEgPyAobGFzdCAtIGZpcnN0KSAvIChudW1NYWpvckluZGljZXMgLSAxKSA6IG51bGw7XG5cdFx0XHRza2lwKHRpY2tzLCBzcGFjaW5nLCBoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gMCA6IGZpcnN0IC0gYXZnTWFqb3JTcGFjaW5nLCBmaXJzdCk7XG5cdFx0XHRza2lwKHRpY2tzLCBzcGFjaW5nLCBsYXN0LCBoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gdGlja3MubGVuZ3RoIDogbGFzdCArIGF2Z01ham9yU3BhY2luZyk7XG5cdFx0XHRyZXR1cm4gbm9uU2tpcHBlZCh0aWNrcyk7XG5cdFx0fVxuXHRcdHNraXAodGlja3MsIHNwYWNpbmcpO1xuXHRcdHJldHVybiBub25Ta2lwcGVkKHRpY2tzKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF90aWNrU2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9uVGlja3MgPSBtZS5vcHRpb25zLnRpY2tzO1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHNwYWNlIG5lZWRlZCBieSBsYWJlbCBpbiBheGlzIGRpcmVjdGlvbi5cblx0XHR2YXIgcm90ID0gaGVscGVycyQxLnRvUmFkaWFucyhtZS5sYWJlbFJvdGF0aW9uKTtcblx0XHR2YXIgY29zID0gTWF0aC5hYnMoTWF0aC5jb3Mocm90KSk7XG5cdFx0dmFyIHNpbiA9IE1hdGguYWJzKE1hdGguc2luKHJvdCkpO1xuXG5cdFx0dmFyIGxhYmVsU2l6ZXMgPSBtZS5fZ2V0TGFiZWxTaXplcygpO1xuXHRcdHZhciBwYWRkaW5nID0gb3B0aW9uVGlja3MuYXV0b1NraXBQYWRkaW5nIHx8IDA7XG5cdFx0dmFyIHcgPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy53aWRlc3Qud2lkdGggKyBwYWRkaW5nIDogMDtcblx0XHR2YXIgaCA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgcGFkZGluZyA6IDA7XG5cblx0XHQvLyBDYWxjdWxhdGUgc3BhY2UgbmVlZGVkIGZvciAxIHRpY2sgaW4gYXhpcyBkaXJlY3Rpb24uXG5cdFx0cmV0dXJuIG1lLmlzSG9yaXpvbnRhbCgpXG5cdFx0XHQ/IGggKiBjb3MgPiB3ICogc2luID8gdyAvIGNvcyA6IGggLyBzaW5cblx0XHRcdDogaCAqIHNpbiA8IHcgKiBjb3MgPyBoIC8gY29zIDogdyAvIHNpbjtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9pc1Zpc2libGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGRpc3BsYXkgPSBtZS5vcHRpb25zLmRpc3BsYXk7XG5cdFx0dmFyIGksIGlsZW4sIG1ldGE7XG5cblx0XHRpZiAoZGlzcGxheSAhPT0gJ2F1dG8nKSB7XG5cdFx0XHRyZXR1cm4gISFkaXNwbGF5O1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gJ2F1dG8nLCB0aGUgc2NhbGUgaXMgdmlzaWJsZSBpZiBhdCBsZWFzdCBvbmUgYXNzb2NpYXRlZCBkYXRhc2V0IGlzIHZpc2libGUuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdGlmIChtZXRhLnhBeGlzSUQgPT09IG1lLmlkIHx8IG1ldGEueUF4aXNJRCA9PT0gbWUuaWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jb21wdXRlR3JpZExpbmVJdGVtczogZnVuY3Rpb24oY2hhcnRBcmVhKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGdyaWRMaW5lcyA9IG9wdGlvbnMuZ3JpZExpbmVzO1xuXHRcdHZhciBwb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XG5cdFx0dmFyIG9mZnNldEdyaWRMaW5lcyA9IGdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXM7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdHZhciB0aWNrcyA9IG1lLl90aWNrc1RvRHJhdztcblx0XHR2YXIgdGlja3NMZW5ndGggPSB0aWNrcy5sZW5ndGggKyAob2Zmc2V0R3JpZExpbmVzID8gMSA6IDApO1xuXG5cdFx0dmFyIHRsID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZExpbmVzKTtcblx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHR2YXIgYXhpc1dpZHRoID0gZ3JpZExpbmVzLmRyYXdCb3JkZXIgPyB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmxpbmVXaWR0aCwgMCwgMCkgOiAwO1xuXHRcdHZhciBheGlzSGFsZldpZHRoID0gYXhpc1dpZHRoIC8gMjtcblx0XHR2YXIgYWxpZ25QaXhlbCA9IGhlbHBlcnMkMS5fYWxpZ25QaXhlbDtcblx0XHR2YXIgYWxpZ25Cb3JkZXJWYWx1ZSA9IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0XHRyZXR1cm4gYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIGF4aXNXaWR0aCk7XG5cdFx0fTtcblx0XHR2YXIgYm9yZGVyVmFsdWUsIGksIHRpY2ssIGxpbmVWYWx1ZSwgYWxpZ25lZExpbmVWYWx1ZTtcblx0XHR2YXIgdHgxLCB0eTEsIHR4MiwgdHkyLCB4MSwgeTEsIHgyLCB5MiwgbGluZVdpZHRoLCBsaW5lQ29sb3IsIGJvcmRlckRhc2gsIGJvcmRlckRhc2hPZmZzZXQ7XG5cblx0XHRpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG5cdFx0XHRib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUobWUuYm90dG9tKTtcblx0XHRcdHR5MSA9IG1lLmJvdHRvbSAtIHRsO1xuXHRcdFx0dHkyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuXHRcdFx0eTEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS50b3ApICsgYXhpc0hhbGZXaWR0aDtcblx0XHRcdHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcblx0XHR9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuXHRcdFx0Ym9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKG1lLnRvcCk7XG5cdFx0XHR5MSA9IGNoYXJ0QXJlYS50b3A7XG5cdFx0XHR5MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmJvdHRvbSkgLSBheGlzSGFsZldpZHRoO1xuXHRcdFx0dHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuXHRcdFx0dHkyID0gbWUudG9wICsgdGw7XG5cdFx0fSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG5cdFx0XHRib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUobWUucmlnaHQpO1xuXHRcdFx0dHgxID0gbWUucmlnaHQgLSB0bDtcblx0XHRcdHR4MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcblx0XHRcdHgxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEubGVmdCkgKyBheGlzSGFsZldpZHRoO1xuXHRcdFx0eDIgPSBjaGFydEFyZWEucmlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZShtZS5sZWZ0KTtcblx0XHRcdHgxID0gY2hhcnRBcmVhLmxlZnQ7XG5cdFx0XHR4MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnJpZ2h0KSAtIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR0eDEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR0eDIgPSBtZS5sZWZ0ICsgdGw7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHRpY2tzTGVuZ3RoOyArK2kpIHtcblx0XHRcdHRpY2sgPSB0aWNrc1tpXSB8fCB7fTtcblxuXHRcdFx0Ly8gYXV0b3NraXBwZXIgc2tpcHBlZCB0aGlzIHRpY2sgKCM0NjM1KVxuXHRcdFx0aWYgKGlzTnVsbE9yVW5kZWYodGljay5sYWJlbCkgJiYgaSA8IHRpY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGkgPT09IG1lLnplcm9MaW5lSW5kZXggJiYgb3B0aW9ucy5vZmZzZXQgPT09IG9mZnNldEdyaWRMaW5lcykge1xuXHRcdFx0XHQvLyBEcmF3IHRoZSBmaXJzdCBpbmRleCBzcGVjaWFsbHlcblx0XHRcdFx0bGluZVdpZHRoID0gZ3JpZExpbmVzLnplcm9MaW5lV2lkdGg7XG5cdFx0XHRcdGxpbmVDb2xvciA9IGdyaWRMaW5lcy56ZXJvTGluZUNvbG9yO1xuXHRcdFx0XHRib3JkZXJEYXNoID0gZ3JpZExpbmVzLnplcm9MaW5lQm9yZGVyRGFzaCB8fCBbXTtcblx0XHRcdFx0Ym9yZGVyRGFzaE9mZnNldCA9IGdyaWRMaW5lcy56ZXJvTGluZUJvcmRlckRhc2hPZmZzZXQgfHwgMC4wO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGluZVdpZHRoID0gdmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5saW5lV2lkdGgsIGksIDEpO1xuXHRcdFx0XHRsaW5lQ29sb3IgPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmNvbG9yLCBpLCAncmdiYSgwLDAsMCwwLjEpJyk7XG5cdFx0XHRcdGJvcmRlckRhc2ggPSBncmlkTGluZXMuYm9yZGVyRGFzaCB8fCBbXTtcblx0XHRcdFx0Ym9yZGVyRGFzaE9mZnNldCA9IGdyaWRMaW5lcy5ib3JkZXJEYXNoT2Zmc2V0IHx8IDAuMDtcblx0XHRcdH1cblxuXHRcdFx0bGluZVZhbHVlID0gZ2V0UGl4ZWxGb3JHcmlkTGluZShtZSwgdGljay5faW5kZXggfHwgaSwgb2Zmc2V0R3JpZExpbmVzKTtcblxuXHRcdFx0Ly8gU2tpcCBpZiB0aGUgcGl4ZWwgaXMgb3V0IG9mIHRoZSByYW5nZVxuXHRcdFx0aWYgKGxpbmVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRhbGlnbmVkTGluZVZhbHVlID0gYWxpZ25QaXhlbChjaGFydCwgbGluZVZhbHVlLCBsaW5lV2lkdGgpO1xuXG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdHR4MSA9IHR4MiA9IHgxID0geDIgPSBhbGlnbmVkTGluZVZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHkxID0gdHkyID0geTEgPSB5MiA9IGFsaWduZWRMaW5lVmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdGl0ZW1zLnB1c2goe1xuXHRcdFx0XHR0eDE6IHR4MSxcblx0XHRcdFx0dHkxOiB0eTEsXG5cdFx0XHRcdHR4MjogdHgyLFxuXHRcdFx0XHR0eTI6IHR5Mixcblx0XHRcdFx0eDE6IHgxLFxuXHRcdFx0XHR5MTogeTEsXG5cdFx0XHRcdHgyOiB4Mixcblx0XHRcdFx0eTI6IHkyLFxuXHRcdFx0XHR3aWR0aDogbGluZVdpZHRoLFxuXHRcdFx0XHRjb2xvcjogbGluZUNvbG9yLFxuXHRcdFx0XHRib3JkZXJEYXNoOiBib3JkZXJEYXNoLFxuXHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0OiBib3JkZXJEYXNoT2Zmc2V0LFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aXRlbXMudGlja3NMZW5ndGggPSB0aWNrc0xlbmd0aDtcblx0XHRpdGVtcy5ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuXG5cdFx0cmV0dXJuIGl0ZW1zO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NvbXB1dGVMYWJlbEl0ZW1zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgb3B0aW9uVGlja3MgPSBvcHRpb25zLnRpY2tzO1xuXHRcdHZhciBwb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XG5cdFx0dmFyIGlzTWlycm9yZWQgPSBvcHRpb25UaWNrcy5taXJyb3I7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdHZhciB0aWNrcyA9IG1lLl90aWNrc1RvRHJhdztcblx0XHR2YXIgZm9udHMgPSBwYXJzZVRpY2tGb250T3B0aW9ucyhvcHRpb25UaWNrcyk7XG5cdFx0dmFyIHRpY2tQYWRkaW5nID0gb3B0aW9uVGlja3MucGFkZGluZztcblx0XHR2YXIgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWRMaW5lcyk7XG5cdFx0dmFyIHJvdGF0aW9uID0gLWhlbHBlcnMkMS50b1JhZGlhbnMobWUubGFiZWxSb3RhdGlvbik7XG5cdFx0dmFyIGl0ZW1zID0gW107XG5cdFx0dmFyIGksIGlsZW4sIHRpY2ssIGxhYmVsLCB4LCB5LCB0ZXh0QWxpZ24sIHBpeGVsLCBmb250LCBsaW5lSGVpZ2h0LCBsaW5lQ291bnQsIHRleHRPZmZzZXQ7XG5cblx0XHRpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG5cdFx0XHR5ID0gbWUuYm90dG9tIC0gdGwgLSB0aWNrUGFkZGluZztcblx0XHRcdHRleHRBbGlnbiA9ICFyb3RhdGlvbiA/ICdjZW50ZXInIDogJ2xlZnQnO1xuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG5cdFx0XHR5ID0gbWUudG9wICsgdGwgKyB0aWNrUGFkZGluZztcblx0XHRcdHRleHRBbGlnbiA9ICFyb3RhdGlvbiA/ICdjZW50ZXInIDogJ3JpZ2h0Jztcblx0XHR9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcblx0XHRcdHggPSBtZS5yaWdodCAtIChpc01pcnJvcmVkID8gMCA6IHRsKSAtIHRpY2tQYWRkaW5nO1xuXHRcdFx0dGV4dEFsaWduID0gaXNNaXJyb3JlZCA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHggPSBtZS5sZWZ0ICsgKGlzTWlycm9yZWQgPyAwIDogdGwpICsgdGlja1BhZGRpbmc7XG5cdFx0XHR0ZXh0QWxpZ24gPSBpc01pcnJvcmVkID8gJ3JpZ2h0JyA6ICdsZWZ0Jztcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHR0aWNrID0gdGlja3NbaV07XG5cdFx0XHRsYWJlbCA9IHRpY2subGFiZWw7XG5cblx0XHRcdC8vIGF1dG9za2lwcGVyIHNraXBwZWQgdGhpcyB0aWNrICgjNDYzNSlcblx0XHRcdGlmIChpc051bGxPclVuZGVmKGxhYmVsKSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0cGl4ZWwgPSBtZS5nZXRQaXhlbEZvclRpY2sodGljay5faW5kZXggfHwgaSkgKyBvcHRpb25UaWNrcy5sYWJlbE9mZnNldDtcblx0XHRcdGZvbnQgPSB0aWNrLm1ham9yID8gZm9udHMubWFqb3IgOiBmb250cy5taW5vcjtcblx0XHRcdGxpbmVIZWlnaHQgPSBmb250LmxpbmVIZWlnaHQ7XG5cdFx0XHRsaW5lQ291bnQgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsLmxlbmd0aCA6IDE7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0eCA9IHBpeGVsO1xuXHRcdFx0XHR0ZXh0T2Zmc2V0ID0gcG9zaXRpb24gPT09ICd0b3AnXG5cdFx0XHRcdFx0PyAoKCFyb3RhdGlvbiA/IDAuNSA6IDEpIC0gbGluZUNvdW50KSAqIGxpbmVIZWlnaHRcblx0XHRcdFx0XHQ6ICghcm90YXRpb24gPyAwLjUgOiAwKSAqIGxpbmVIZWlnaHQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR5ID0gcGl4ZWw7XG5cdFx0XHRcdHRleHRPZmZzZXQgPSAoMSAtIGxpbmVDb3VudCkgKiBsaW5lSGVpZ2h0IC8gMjtcblx0XHRcdH1cblxuXHRcdFx0aXRlbXMucHVzaCh7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHksXG5cdFx0XHRcdHJvdGF0aW9uOiByb3RhdGlvbixcblx0XHRcdFx0bGFiZWw6IGxhYmVsLFxuXHRcdFx0XHRmb250OiBmb250LFxuXHRcdFx0XHR0ZXh0T2Zmc2V0OiB0ZXh0T2Zmc2V0LFxuXHRcdFx0XHR0ZXh0QWxpZ246IHRleHRBbGlnblxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZW1zO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdHcmlkOiBmdW5jdGlvbihjaGFydEFyZWEpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBncmlkTGluZXMgPSBtZS5vcHRpb25zLmdyaWRMaW5lcztcblxuXHRcdGlmICghZ3JpZExpbmVzLmRpc3BsYXkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgY3R4ID0gbWUuY3R4O1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBhbGlnblBpeGVsID0gaGVscGVycyQxLl9hbGlnblBpeGVsO1xuXHRcdHZhciBheGlzV2lkdGggPSBncmlkTGluZXMuZHJhd0JvcmRlciA/IHZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZXMubGluZVdpZHRoLCAwLCAwKSA6IDA7XG5cdFx0dmFyIGl0ZW1zID0gbWUuX2dyaWRMaW5lSXRlbXMgfHwgKG1lLl9ncmlkTGluZUl0ZW1zID0gbWUuX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkpO1xuXHRcdHZhciB3aWR0aCwgY29sb3IsIGksIGlsZW4sIGl0ZW07XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpdGVtID0gaXRlbXNbaV07XG5cdFx0XHR3aWR0aCA9IGl0ZW0ud2lkdGg7XG5cdFx0XHRjb2xvciA9IGl0ZW0uY29sb3I7XG5cblx0XHRcdGlmICh3aWR0aCAmJiBjb2xvcikge1xuXHRcdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0XHRjdHgubGluZVdpZHRoID0gd2lkdGg7XG5cdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuXHRcdFx0XHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKGl0ZW0uYm9yZGVyRGFzaCk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gaXRlbS5ib3JkZXJEYXNoT2Zmc2V0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdFx0XHRcdGlmIChncmlkTGluZXMuZHJhd1RpY2tzKSB7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyhpdGVtLnR4MSwgaXRlbS50eTEpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oaXRlbS50eDIsIGl0ZW0udHkyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChncmlkTGluZXMuZHJhd09uQ2hhcnRBcmVhKSB7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyhpdGVtLngxLCBpdGVtLnkxKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKGl0ZW0ueDIsIGl0ZW0ueTIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChheGlzV2lkdGgpIHtcblx0XHRcdC8vIERyYXcgdGhlIGxpbmUgYXQgdGhlIGVkZ2Ugb2YgdGhlIGF4aXNcblx0XHRcdHZhciBmaXJzdExpbmVXaWR0aCA9IGF4aXNXaWR0aDtcblx0XHRcdHZhciBsYXN0TGluZVdpZHRoID0gdmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5saW5lV2lkdGgsIGl0ZW1zLnRpY2tzTGVuZ3RoIC0gMSwgMSk7XG5cdFx0XHR2YXIgYm9yZGVyVmFsdWUgPSBpdGVtcy5ib3JkZXJWYWx1ZTtcblx0XHRcdHZhciB4MSwgeDIsIHkxLCB5MjtcblxuXHRcdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdHgxID0gYWxpZ25QaXhlbChjaGFydCwgbWUubGVmdCwgZmlyc3RMaW5lV2lkdGgpIC0gZmlyc3RMaW5lV2lkdGggLyAyO1xuXHRcdFx0XHR4MiA9IGFsaWduUGl4ZWwoY2hhcnQsIG1lLnJpZ2h0LCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuXHRcdFx0XHR5MSA9IHkyID0gYm9yZGVyVmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR5MSA9IGFsaWduUGl4ZWwoY2hhcnQsIG1lLnRvcCwgZmlyc3RMaW5lV2lkdGgpIC0gZmlyc3RMaW5lV2lkdGggLyAyO1xuXHRcdFx0XHR5MiA9IGFsaWduUGl4ZWwoY2hhcnQsIG1lLmJvdHRvbSwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcblx0XHRcdFx0eDEgPSB4MiA9IGJvcmRlclZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjdHgubGluZVdpZHRoID0gYXhpc1dpZHRoO1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5jb2xvciwgMCk7XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHgubW92ZVRvKHgxLCB5MSk7XG5cdFx0XHRjdHgubGluZVRvKHgyLCB5Mik7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdMYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvblRpY2tzID0gbWUub3B0aW9ucy50aWNrcztcblxuXHRcdGlmICghb3B0aW9uVGlja3MuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIGl0ZW1zID0gbWUuX2xhYmVsSXRlbXMgfHwgKG1lLl9sYWJlbEl0ZW1zID0gbWUuX2NvbXB1dGVMYWJlbEl0ZW1zKCkpO1xuXHRcdHZhciBpLCBqLCBpbGVuLCBqbGVuLCBpdGVtLCB0aWNrRm9udCwgbGFiZWwsIHk7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpdGVtID0gaXRlbXNbaV07XG5cdFx0XHR0aWNrRm9udCA9IGl0ZW0uZm9udDtcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIGRyYXcgdGV4dCBpbiB0aGUgY29ycmVjdCBjb2xvciBhbmQgZm9udFxuXHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdGN0eC50cmFuc2xhdGUoaXRlbS54LCBpdGVtLnkpO1xuXHRcdFx0Y3R4LnJvdGF0ZShpdGVtLnJvdGF0aW9uKTtcblx0XHRcdGN0eC5mb250ID0gdGlja0ZvbnQuc3RyaW5nO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRpY2tGb250LmNvbG9yO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdFx0Y3R4LnRleHRBbGlnbiA9IGl0ZW0udGV4dEFsaWduO1xuXG5cdFx0XHRsYWJlbCA9IGl0ZW0ubGFiZWw7XG5cdFx0XHR5ID0gaXRlbS50ZXh0T2Zmc2V0O1xuXHRcdFx0aWYgKGlzQXJyYXkobGFiZWwpKSB7XG5cdFx0XHRcdGZvciAoaiA9IDAsIGpsZW4gPSBsYWJlbC5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0XHQvLyBXZSBqdXN0IG1ha2Ugc3VyZSB0aGUgbXVsdGlsaW5lIGVsZW1lbnQgaXMgYSBzdHJpbmcgaGVyZS4uXG5cdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KCcnICsgbGFiZWxbal0sIDAsIHkpO1xuXHRcdFx0XHRcdHkgKz0gdGlja0ZvbnQubGluZUhlaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsLCAwLCB5KTtcblx0XHRcdH1cblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdUaXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY3R4ID0gbWUuY3R4O1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgc2NhbGVMYWJlbCA9IG9wdGlvbnMuc2NhbGVMYWJlbDtcblxuXHRcdGlmICghc2NhbGVMYWJlbC5kaXNwbGF5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIHNjYWxlTGFiZWxGb250Q29sb3IgPSB2YWx1ZU9yRGVmYXVsdCRhKHNjYWxlTGFiZWwuZm9udENvbG9yLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHR2YXIgc2NhbGVMYWJlbEZvbnQgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KHNjYWxlTGFiZWwpO1xuXHRcdHZhciBzY2FsZUxhYmVsUGFkZGluZyA9IGhlbHBlcnMkMS5vcHRpb25zLnRvUGFkZGluZyhzY2FsZUxhYmVsLnBhZGRpbmcpO1xuXHRcdHZhciBoYWxmTGluZUhlaWdodCA9IHNjYWxlTGFiZWxGb250LmxpbmVIZWlnaHQgLyAyO1xuXHRcdHZhciBwb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XG5cdFx0dmFyIHJvdGF0aW9uID0gMDtcblx0XHR2YXIgc2NhbGVMYWJlbFgsIHNjYWxlTGFiZWxZO1xuXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRzY2FsZUxhYmVsWCA9IG1lLmxlZnQgKyBtZS53aWR0aCAvIDI7IC8vIG1pZHBvaW50IG9mIHRoZSB3aWR0aFxuXHRcdFx0c2NhbGVMYWJlbFkgPSBwb3NpdGlvbiA9PT0gJ2JvdHRvbSdcblx0XHRcdFx0PyBtZS5ib3R0b20gLSBoYWxmTGluZUhlaWdodCAtIHNjYWxlTGFiZWxQYWRkaW5nLmJvdHRvbVxuXHRcdFx0XHQ6IG1lLnRvcCArIGhhbGZMaW5lSGVpZ2h0ICsgc2NhbGVMYWJlbFBhZGRpbmcudG9wO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgaXNMZWZ0ID0gcG9zaXRpb24gPT09ICdsZWZ0Jztcblx0XHRcdHNjYWxlTGFiZWxYID0gaXNMZWZ0XG5cdFx0XHRcdD8gbWUubGVmdCArIGhhbGZMaW5lSGVpZ2h0ICsgc2NhbGVMYWJlbFBhZGRpbmcudG9wXG5cdFx0XHRcdDogbWUucmlnaHQgLSBoYWxmTGluZUhlaWdodCAtIHNjYWxlTGFiZWxQYWRkaW5nLnRvcDtcblx0XHRcdHNjYWxlTGFiZWxZID0gbWUudG9wICsgbWUuaGVpZ2h0IC8gMjtcblx0XHRcdHJvdGF0aW9uID0gaXNMZWZ0ID8gLTAuNSAqIE1hdGguUEkgOiAwLjUgKiBNYXRoLlBJO1xuXHRcdH1cblxuXHRcdGN0eC5zYXZlKCk7XG5cdFx0Y3R4LnRyYW5zbGF0ZShzY2FsZUxhYmVsWCwgc2NhbGVMYWJlbFkpO1xuXHRcdGN0eC5yb3RhdGUocm90YXRpb24pO1xuXHRcdGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHNjYWxlTGFiZWxGb250Q29sb3I7IC8vIHJlbmRlciBpbiBjb3JyZWN0IGNvbG91clxuXHRcdGN0eC5mb250ID0gc2NhbGVMYWJlbEZvbnQuc3RyaW5nO1xuXHRcdGN0eC5maWxsVGV4dChzY2FsZUxhYmVsLmxhYmVsU3RyaW5nLCAwLCAwKTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdGRyYXc6IGZ1bmN0aW9uKGNoYXJ0QXJlYSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoIW1lLl9pc1Zpc2libGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1lLl9kcmF3R3JpZChjaGFydEFyZWEpO1xuXHRcdG1lLl9kcmF3VGl0bGUoKTtcblx0XHRtZS5fZHJhd0xhYmVscygpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2xheWVyczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHR6ID0gb3B0cy50aWNrcyAmJiBvcHRzLnRpY2tzLnogfHwgMDtcblx0XHR2YXIgZ3ogPSBvcHRzLmdyaWRMaW5lcyAmJiBvcHRzLmdyaWRMaW5lcy56IHx8IDA7XG5cblx0XHRpZiAoIW1lLl9pc1Zpc2libGUoKSB8fCB0eiA9PT0gZ3ogfHwgbWUuZHJhdyAhPT0gbWUuX2RyYXcpIHtcblx0XHRcdC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IGRyYXcgaGFzIGJlZW4gb3ZlcnJpZGRlbiBieSBjdXN0b20gc2NhbGVcblx0XHRcdHJldHVybiBbe1xuXHRcdFx0XHR6OiB0eixcblx0XHRcdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bWUuZHJhdy5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdFx0fVxuXHRcdFx0fV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFt7XG5cdFx0XHR6OiBneixcblx0XHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZS5fZHJhd0dyaWQuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdG1lLl9kcmF3VGl0bGUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0ejogdHosXG5cdFx0XHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWUuX2RyYXdMYWJlbHMuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cdFx0fV07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXM6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRyZXR1cm4gbWUuY2hhcnQuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKVxuXHRcdFx0LmZpbHRlcihmdW5jdGlvbihtZXRhKSB7XG5cdFx0XHRcdHJldHVybiAoIXR5cGUgfHwgbWV0YS50eXBlID09PSB0eXBlKVxuXHRcdFx0XHRcdCYmIChpc0hvcml6b250YWwgPyBtZXRhLnhBeGlzSUQgPT09IG1lLmlkIDogbWV0YS55QXhpc0lEID09PSBtZS5pZCk7XG5cdFx0XHR9KTtcblx0fVxufSk7XG5cblNjYWxlLnByb3RvdHlwZS5fZHJhdyA9IFNjYWxlLnByb3RvdHlwZS5kcmF3O1xuXG52YXIgY29yZV9zY2FsZSA9IFNjYWxlO1xuXG52YXIgaXNOdWxsT3JVbmRlZiQxID0gaGVscGVycyQxLmlzTnVsbE9yVW5kZWY7XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuXHRwb3NpdGlvbjogJ2JvdHRvbSdcbn07XG5cbnZhciBzY2FsZV9jYXRlZ29yeSA9IGNvcmVfc2NhbGUuZXh0ZW5kKHtcblx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGFiZWxzID0gbWUuX2dldExhYmVscygpO1xuXHRcdHZhciB0aWNrc09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXHRcdHZhciBtaW4gPSB0aWNrc09wdHMubWluO1xuXHRcdHZhciBtYXggPSB0aWNrc09wdHMubWF4O1xuXHRcdHZhciBtaW5JbmRleCA9IDA7XG5cdFx0dmFyIG1heEluZGV4ID0gbGFiZWxzLmxlbmd0aCAtIDE7XG5cdFx0dmFyIGZpbmRJbmRleDtcblxuXHRcdGlmIChtaW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly8gdXNlciBzcGVjaWZpZWQgbWluIHZhbHVlXG5cdFx0XHRmaW5kSW5kZXggPSBsYWJlbHMuaW5kZXhPZihtaW4pO1xuXHRcdFx0aWYgKGZpbmRJbmRleCA+PSAwKSB7XG5cdFx0XHRcdG1pbkluZGV4ID0gZmluZEluZGV4O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChtYXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly8gdXNlciBzcGVjaWZpZWQgbWF4IHZhbHVlXG5cdFx0XHRmaW5kSW5kZXggPSBsYWJlbHMuaW5kZXhPZihtYXgpO1xuXHRcdFx0aWYgKGZpbmRJbmRleCA+PSAwKSB7XG5cdFx0XHRcdG1heEluZGV4ID0gZmluZEluZGV4O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1lLm1pbkluZGV4ID0gbWluSW5kZXg7XG5cdFx0bWUubWF4SW5kZXggPSBtYXhJbmRleDtcblx0XHRtZS5taW4gPSBsYWJlbHNbbWluSW5kZXhdO1xuXHRcdG1lLm1heCA9IGxhYmVsc1ttYXhJbmRleF07XG5cdH0sXG5cblx0YnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGFiZWxzID0gbWUuX2dldExhYmVscygpO1xuXHRcdHZhciBtaW5JbmRleCA9IG1lLm1pbkluZGV4O1xuXHRcdHZhciBtYXhJbmRleCA9IG1lLm1heEluZGV4O1xuXG5cdFx0Ly8gSWYgd2UgYXJlIHZpZXdpbmcgc29tZSBzdWJzZXQgb2YgbGFiZWxzLCBzbGljZSB0aGUgb3JpZ2luYWwgYXJyYXlcblx0XHRtZS50aWNrcyA9IChtaW5JbmRleCA9PT0gMCAmJiBtYXhJbmRleCA9PT0gbGFiZWxzLmxlbmd0aCAtIDEpID8gbGFiZWxzIDogbGFiZWxzLnNsaWNlKG1pbkluZGV4LCBtYXhJbmRleCArIDEpO1xuXHR9LFxuXG5cdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXG5cdFx0aWYgKGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlci5fZ2V0VmFsdWVTY2FsZUlkKCkgPT09IG1lLmlkKSB7XG5cdFx0XHRyZXR1cm4gbWUuZ2V0UmlnaHRWYWx1ZShjaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZS5fZ2V0TGFiZWxzKClbaW5kZXhdO1xuXHR9LFxuXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9mZnNldCA9IG1lLm9wdGlvbnMub2Zmc2V0O1xuXHRcdHZhciB0aWNrcyA9IG1lLnRpY2tzO1xuXG5cdFx0Y29yZV9zY2FsZS5wcm90b3R5cGUuX2NvbmZpZ3VyZS5jYWxsKG1lKTtcblxuXHRcdGlmICghbWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdC8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB2ZXJ0aWNhbCBjYXRlZ29yeSBzY2FsZSByZXZlcnNlIGlzIGludmVydGVkLlxuXHRcdFx0bWUuX3JldmVyc2VQaXhlbHMgPSAhbWUuX3JldmVyc2VQaXhlbHM7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aWNrcykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1lLl9zdGFydFZhbHVlID0gbWUubWluSW5kZXggLSAob2Zmc2V0ID8gMC41IDogMCk7XG5cdFx0bWUuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heCh0aWNrcy5sZW5ndGggLSAob2Zmc2V0ID8gMCA6IDEpLCAxKTtcblx0fSxcblxuXHQvLyBVc2VkIHRvIGdldCBkYXRhIHZhbHVlIGxvY2F0aW9ucy4gIFZhbHVlIGNhbiBlaXRoZXIgYmUgYW4gaW5kZXggb3IgYSBudW1lcmljYWwgdmFsdWVcblx0Z2V0UGl4ZWxGb3JWYWx1ZTogZnVuY3Rpb24odmFsdWUsIGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB2YWx1ZUNhdGVnb3J5LCBsYWJlbHMsIGlkeDtcblxuXHRcdGlmICghaXNOdWxsT3JVbmRlZiQxKGluZGV4KSAmJiAhaXNOdWxsT3JVbmRlZiQxKGRhdGFzZXRJbmRleCkpIHtcblx0XHRcdHZhbHVlID0gbWUuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdO1xuXHRcdH1cblxuXHRcdC8vIElmIHZhbHVlIGlzIGEgZGF0YSBvYmplY3QsIHRoZW4gaW5kZXggaXMgdGhlIGluZGV4IGluIHRoZSBkYXRhIGFycmF5LFxuXHRcdC8vIG5vdCB0aGUgaW5kZXggb2YgdGhlIHNjYWxlLiBXZSBuZWVkIHRvIGNoYW5nZSB0aGF0LlxuXHRcdGlmICghaXNOdWxsT3JVbmRlZiQxKHZhbHVlKSkge1xuXHRcdFx0dmFsdWVDYXRlZ29yeSA9IG1lLmlzSG9yaXpvbnRhbCgpID8gdmFsdWUueCA6IHZhbHVlLnk7XG5cdFx0fVxuXHRcdGlmICh2YWx1ZUNhdGVnb3J5ICE9PSB1bmRlZmluZWQgfHwgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgaXNOYU4oaW5kZXgpKSkge1xuXHRcdFx0bGFiZWxzID0gbWUuX2dldExhYmVscygpO1xuXHRcdFx0dmFsdWUgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQodmFsdWVDYXRlZ29yeSwgdmFsdWUpO1xuXHRcdFx0aWR4ID0gbGFiZWxzLmluZGV4T2YodmFsdWUpO1xuXHRcdFx0aW5kZXggPSBpZHggIT09IC0xID8gaWR4IDogaW5kZXg7XG5cdFx0XHRpZiAoaXNOYU4oaW5kZXgpKSB7XG5cdFx0XHRcdGluZGV4ID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtZS5nZXRQaXhlbEZvckRlY2ltYWwoKGluZGV4IC0gbWUuX3N0YXJ0VmFsdWUpIC8gbWUuX3ZhbHVlUmFuZ2UpO1xuXHR9LFxuXG5cdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgdGlja3MgPSB0aGlzLnRpY2tzO1xuXHRcdHJldHVybiBpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxXG5cdFx0XHQ/IG51bGxcblx0XHRcdDogdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XSwgaW5kZXggKyB0aGlzLm1pbkluZGV4KTtcblx0fSxcblxuXHRnZXRWYWx1ZUZvclBpeGVsOiBmdW5jdGlvbihwaXhlbCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHZhbHVlID0gTWF0aC5yb3VuZChtZS5fc3RhcnRWYWx1ZSArIG1lLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiBtZS5fdmFsdWVSYW5nZSk7XG5cdFx0cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCAwKSwgbWUudGlja3MubGVuZ3RoIC0gMSk7XG5cdH0sXG5cblx0Z2V0QmFzZVBpeGVsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5ib3R0b207XG5cdH1cbn0pO1xuXG4vLyBJTlRFUk5BTDogc3RhdGljIGRlZmF1bHQgb3B0aW9ucywgcmVnaXN0ZXJlZCBpbiBzcmMvaW5kZXguanNcbnZhciBfZGVmYXVsdHMgPSBkZWZhdWx0Q29uZmlnO1xuc2NhbGVfY2F0ZWdvcnkuX2RlZmF1bHRzID0gX2RlZmF1bHRzO1xuXG52YXIgbm9vcCA9IGhlbHBlcnMkMS5ub29wO1xudmFyIGlzTnVsbE9yVW5kZWYkMiA9IGhlbHBlcnMkMS5pc051bGxPclVuZGVmO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc2V0IG9mIGxpbmVhciB0aWNrc1xuICogQHBhcmFtIGdlbmVyYXRpb25PcHRpb25zIHRoZSBvcHRpb25zIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHRpY2tzXG4gKiBAcGFyYW0gZGF0YVJhbmdlIHRoZSByYW5nZSBvZiB0aGUgZGF0YVxuICogQHJldHVybnMge251bWJlcltdfSBhcnJheSBvZiB0aWNrIHZhbHVlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcblx0dmFyIHRpY2tzID0gW107XG5cdC8vIFRvIGdldCBhIFwibmljZVwiIHZhbHVlIGZvciB0aGUgdGljayBzcGFjaW5nLCB3ZSB3aWxsIHVzZSB0aGUgYXBwcm9wcmlhdGVseSBuYW1lZFxuXHQvLyBcIm5pY2UgbnVtYmVyXCIgYWxnb3JpdGhtLiBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODUwNjg4MS9uaWNlLWxhYmVsLWFsZ29yaXRobS1mb3ItY2hhcnRzLXdpdGgtbWluaW11bS10aWNrc1xuXHQvLyBmb3IgZGV0YWlscy5cblxuXHR2YXIgTUlOX1NQQUNJTkcgPSAxZS0xNDtcblx0dmFyIHN0ZXBTaXplID0gZ2VuZXJhdGlvbk9wdGlvbnMuc3RlcFNpemU7XG5cdHZhciB1bml0ID0gc3RlcFNpemUgfHwgMTtcblx0dmFyIG1heE51bVNwYWNlcyA9IGdlbmVyYXRpb25PcHRpb25zLm1heFRpY2tzIC0gMTtcblx0dmFyIG1pbiA9IGdlbmVyYXRpb25PcHRpb25zLm1pbjtcblx0dmFyIG1heCA9IGdlbmVyYXRpb25PcHRpb25zLm1heDtcblx0dmFyIHByZWNpc2lvbiA9IGdlbmVyYXRpb25PcHRpb25zLnByZWNpc2lvbjtcblx0dmFyIHJtaW4gPSBkYXRhUmFuZ2UubWluO1xuXHR2YXIgcm1heCA9IGRhdGFSYW5nZS5tYXg7XG5cdHZhciBzcGFjaW5nID0gaGVscGVycyQxLm5pY2VOdW0oKHJtYXggLSBybWluKSAvIG1heE51bVNwYWNlcyAvIHVuaXQpICogdW5pdDtcblx0dmFyIGZhY3RvciwgbmljZU1pbiwgbmljZU1heCwgbnVtU3BhY2VzO1xuXG5cdC8vIEJleW9uZCBNSU5fU1BBQ0lORyBmbG9hdGluZyBwb2ludCBudW1iZXJzIGJlaW5nIHRvIGxvc2UgcHJlY2lzaW9uXG5cdC8vIHN1Y2ggdGhhdCB3ZSBjYW4ndCBkbyB0aGUgbWF0aCBuZWNlc3NhcnkgdG8gZ2VuZXJhdGUgdGlja3Ncblx0aWYgKHNwYWNpbmcgPCBNSU5fU1BBQ0lORyAmJiBpc051bGxPclVuZGVmJDIobWluKSAmJiBpc051bGxPclVuZGVmJDIobWF4KSkge1xuXHRcdHJldHVybiBbcm1pbiwgcm1heF07XG5cdH1cblxuXHRudW1TcGFjZXMgPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpIC0gTWF0aC5mbG9vcihybWluIC8gc3BhY2luZyk7XG5cdGlmIChudW1TcGFjZXMgPiBtYXhOdW1TcGFjZXMpIHtcblx0XHQvLyBJZiB0aGUgY2FsY3VsYXRlZCBudW0gb2Ygc3BhY2VzIGV4Y2VlZHMgbWF4TnVtU3BhY2VzLCByZWNhbGN1bGF0ZSBpdFxuXHRcdHNwYWNpbmcgPSBoZWxwZXJzJDEubmljZU51bShudW1TcGFjZXMgKiBzcGFjaW5nIC8gbWF4TnVtU3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuXHR9XG5cblx0aWYgKHN0ZXBTaXplIHx8IGlzTnVsbE9yVW5kZWYkMihwcmVjaXNpb24pKSB7XG5cdFx0Ly8gSWYgYSBwcmVjaXNpb24gaXMgbm90IHNwZWNpZmllZCwgY2FsY3VsYXRlIGZhY3RvciBiYXNlZCBvbiBzcGFjaW5nXG5cdFx0ZmFjdG9yID0gTWF0aC5wb3coMTAsIGhlbHBlcnMkMS5fZGVjaW1hbFBsYWNlcyhzcGFjaW5nKSk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gSWYgdGhlIHVzZXIgc3BlY2lmaWVkIGEgcHJlY2lzaW9uLCByb3VuZCB0byB0aGF0IG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuXHRcdGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuXHRcdHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG5cdH1cblxuXHRuaWNlTWluID0gTWF0aC5mbG9vcihybWluIC8gc3BhY2luZykgKiBzcGFjaW5nO1xuXHRuaWNlTWF4ID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG5cblx0Ly8gSWYgbWluLCBtYXggYW5kIHN0ZXBTaXplIGlzIHNldCBhbmQgdGhleSBtYWtlIGFuIGV2ZW5seSBzcGFjZWQgc2NhbGUgdXNlIGl0LlxuXHRpZiAoc3RlcFNpemUpIHtcblx0XHQvLyBJZiB2ZXJ5IGNsb3NlIHRvIG91ciB3aG9sZSBudW1iZXIsIHVzZSBpdC5cblx0XHRpZiAoIWlzTnVsbE9yVW5kZWYkMihtaW4pICYmIGhlbHBlcnMkMS5hbG1vc3RXaG9sZShtaW4gLyBzcGFjaW5nLCBzcGFjaW5nIC8gMTAwMCkpIHtcblx0XHRcdG5pY2VNaW4gPSBtaW47XG5cdFx0fVxuXHRcdGlmICghaXNOdWxsT3JVbmRlZiQyKG1heCkgJiYgaGVscGVycyQxLmFsbW9zdFdob2xlKG1heCAvIHNwYWNpbmcsIHNwYWNpbmcgLyAxMDAwKSkge1xuXHRcdFx0bmljZU1heCA9IG1heDtcblx0XHR9XG5cdH1cblxuXHRudW1TcGFjZXMgPSAobmljZU1heCAtIG5pY2VNaW4pIC8gc3BhY2luZztcblx0Ly8gSWYgdmVyeSBjbG9zZSB0byBvdXIgcm91bmRlZCB2YWx1ZSwgdXNlIGl0LlxuXHRpZiAoaGVscGVycyQxLmFsbW9zdEVxdWFscyhudW1TcGFjZXMsIE1hdGgucm91bmQobnVtU3BhY2VzKSwgc3BhY2luZyAvIDEwMDApKSB7XG5cdFx0bnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuXHR9IGVsc2Uge1xuXHRcdG51bVNwYWNlcyA9IE1hdGguY2VpbChudW1TcGFjZXMpO1xuXHR9XG5cblx0bmljZU1pbiA9IE1hdGgucm91bmQobmljZU1pbiAqIGZhY3RvcikgLyBmYWN0b3I7XG5cdG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBmYWN0b3IpIC8gZmFjdG9yO1xuXHR0aWNrcy5wdXNoKGlzTnVsbE9yVW5kZWYkMihtaW4pID8gbmljZU1pbiA6IG1pbik7XG5cdGZvciAodmFyIGogPSAxOyBqIDwgbnVtU3BhY2VzOyArK2opIHtcblx0XHR0aWNrcy5wdXNoKE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yKTtcblx0fVxuXHR0aWNrcy5wdXNoKGlzTnVsbE9yVW5kZWYkMihtYXgpID8gbmljZU1heCA6IG1heCk7XG5cblx0cmV0dXJuIHRpY2tzO1xufVxuXG52YXIgc2NhbGVfbGluZWFyYmFzZSA9IGNvcmVfc2NhbGUuZXh0ZW5kKHtcblx0Z2V0UmlnaHRWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuICt2YWx1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGNvcmVfc2NhbGUucHJvdG90eXBlLmdldFJpZ2h0VmFsdWUuY2FsbCh0aGlzLCB2YWx1ZSk7XG5cdH0sXG5cblx0aGFuZGxlVGlja1JhbmdlT3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpY2tPcHRzID0gb3B0cy50aWNrcztcblxuXHRcdC8vIElmIHdlIGFyZSBmb3JjaW5nIGl0IHRvIGJlZ2luIGF0IDAsIGJ1dCAwIHdpbGwgYWxyZWFkeSBiZSByZW5kZXJlZCBvbiB0aGUgY2hhcnQsXG5cdFx0Ly8gZG8gbm90aGluZyBzaW5jZSB0aGF0IHdvdWxkIG1ha2UgdGhlIGNoYXJ0IHdlaXJkLiBJZiB0aGUgdXNlciByZWFsbHkgd2FudHMgYSB3ZWlyZCBjaGFydFxuXHRcdC8vIGF4aXMsIHRoZXkgY2FuIG1hbnVhbGx5IG92ZXJyaWRlIGl0XG5cdFx0aWYgKHRpY2tPcHRzLmJlZ2luQXRaZXJvKSB7XG5cdFx0XHR2YXIgbWluU2lnbiA9IGhlbHBlcnMkMS5zaWduKG1lLm1pbik7XG5cdFx0XHR2YXIgbWF4U2lnbiA9IGhlbHBlcnMkMS5zaWduKG1lLm1heCk7XG5cblx0XHRcdGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuXHRcdFx0XHQvLyBtb3ZlIHRoZSB0b3AgdXAgdG8gMFxuXHRcdFx0XHRtZS5tYXggPSAwO1xuXHRcdFx0fSBlbHNlIGlmIChtaW5TaWduID4gMCAmJiBtYXhTaWduID4gMCkge1xuXHRcdFx0XHQvLyBtb3ZlIHRoZSBib3R0b20gZG93biB0byAwXG5cdFx0XHRcdG1lLm1pbiA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIHNldE1pbiA9IHRpY2tPcHRzLm1pbiAhPT0gdW5kZWZpbmVkIHx8IHRpY2tPcHRzLnN1Z2dlc3RlZE1pbiAhPT0gdW5kZWZpbmVkO1xuXHRcdHZhciBzZXRNYXggPSB0aWNrT3B0cy5tYXggIT09IHVuZGVmaW5lZCB8fCB0aWNrT3B0cy5zdWdnZXN0ZWRNYXggIT09IHVuZGVmaW5lZDtcblxuXHRcdGlmICh0aWNrT3B0cy5taW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0bWUubWluID0gdGlja09wdHMubWluO1xuXHRcdH0gZWxzZSBpZiAodGlja09wdHMuc3VnZ2VzdGVkTWluICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGlmIChtZS5taW4gPT09IG51bGwpIHtcblx0XHRcdFx0bWUubWluID0gdGlja09wdHMuc3VnZ2VzdGVkTWluO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUubWluID0gTWF0aC5taW4obWUubWluLCB0aWNrT3B0cy5zdWdnZXN0ZWRNaW4pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aWNrT3B0cy5tYXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0bWUubWF4ID0gdGlja09wdHMubWF4O1xuXHRcdH0gZWxzZSBpZiAodGlja09wdHMuc3VnZ2VzdGVkTWF4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGlmIChtZS5tYXggPT09IG51bGwpIHtcblx0XHRcdFx0bWUubWF4ID0gdGlja09wdHMuc3VnZ2VzdGVkTWF4O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUubWF4ID0gTWF0aC5tYXgobWUubWF4LCB0aWNrT3B0cy5zdWdnZXN0ZWRNYXgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChzZXRNaW4gIT09IHNldE1heCkge1xuXHRcdFx0Ly8gV2Ugc2V0IHRoZSBtaW4gb3IgdGhlIG1heCBidXQgbm90IGJvdGguXG5cdFx0XHQvLyBTbyBlbnN1cmUgdGhhdCBvdXIgcmFuZ2UgaXMgZ29vZFxuXHRcdFx0Ly8gSW52ZXJ0ZWQgb3IgMCBsZW5ndGggcmFuZ2UgY2FuIGhhcHBlbiB3aGVuXG5cdFx0XHQvLyB0aWNrcy5taW4gaXMgc2V0LCBhbmQgbm8gZGF0YXNldHMgYXJlIHZpc2libGVcblx0XHRcdGlmIChtZS5taW4gPj0gbWUubWF4KSB7XG5cdFx0XHRcdGlmIChzZXRNaW4pIHtcblx0XHRcdFx0XHRtZS5tYXggPSBtZS5taW4gKyAxO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1lLm1pbiA9IG1lLm1heCAtIDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobWUubWluID09PSBtZS5tYXgpIHtcblx0XHRcdG1lLm1heCsrO1xuXG5cdFx0XHRpZiAoIXRpY2tPcHRzLmJlZ2luQXRaZXJvKSB7XG5cdFx0XHRcdG1lLm1pbi0tO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRnZXRUaWNrTGltaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHR2YXIgc3RlcFNpemUgPSB0aWNrT3B0cy5zdGVwU2l6ZTtcblx0XHR2YXIgbWF4VGlja3NMaW1pdCA9IHRpY2tPcHRzLm1heFRpY2tzTGltaXQ7XG5cdFx0dmFyIG1heFRpY2tzO1xuXG5cdFx0aWYgKHN0ZXBTaXplKSB7XG5cdFx0XHRtYXhUaWNrcyA9IE1hdGguY2VpbChtZS5tYXggLyBzdGVwU2l6ZSkgLSBNYXRoLmZsb29yKG1lLm1pbiAvIHN0ZXBTaXplKSArIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1heFRpY2tzID0gbWUuX2NvbXB1dGVUaWNrTGltaXQoKTtcblx0XHRcdG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuXHRcdH1cblxuXHRcdGlmIChtYXhUaWNrc0xpbWl0KSB7XG5cdFx0XHRtYXhUaWNrcyA9IE1hdGgubWluKG1heFRpY2tzTGltaXQsIG1heFRpY2tzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWF4VGlja3M7XG5cdH0sXG5cblx0X2NvbXB1dGVUaWNrTGltaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cdH0sXG5cblx0aGFuZGxlRGlyZWN0aW9uYWxDaGFuZ2VzOiBub29wLFxuXG5cdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cblx0XHQvLyBGaWd1cmUgb3V0IHdoYXQgdGhlIG1heCBudW1iZXIgb2YgdGlja3Mgd2UgY2FuIHN1cHBvcnQgaXQgaXMgYmFzZWQgb24gdGhlIHNpemUgb2Zcblx0XHQvLyB0aGUgYXhpcyBhcmVhLiBGb3Igbm93LCB3ZSBzYXkgdGhhdCB0aGUgbWluaW11bSB0aWNrIHNwYWNpbmcgaW4gcGl4ZWxzIG11c3QgYmUgNDBcblx0XHQvLyBXZSBhbHNvIGxpbWl0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aWNrcyB0byAxMSB3aGljaCBnaXZlcyBhIG5pY2UgMTAgc3F1YXJlcyBvblxuXHRcdC8vIHRoZSBncmFwaC4gTWFrZSBzdXJlIHdlIGFsd2F5cyBoYXZlIGF0IGxlYXN0IDIgdGlja3Ncblx0XHR2YXIgbWF4VGlja3MgPSBtZS5nZXRUaWNrTGltaXQoKTtcblx0XHRtYXhUaWNrcyA9IE1hdGgubWF4KDIsIG1heFRpY2tzKTtcblxuXHRcdHZhciBudW1lcmljR2VuZXJhdG9yT3B0aW9ucyA9IHtcblx0XHRcdG1heFRpY2tzOiBtYXhUaWNrcyxcblx0XHRcdG1pbjogdGlja09wdHMubWluLFxuXHRcdFx0bWF4OiB0aWNrT3B0cy5tYXgsXG5cdFx0XHRwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcblx0XHRcdHN0ZXBTaXplOiBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQodGlja09wdHMuZml4ZWRTdGVwU2l6ZSwgdGlja09wdHMuc3RlcFNpemUpXG5cdFx0fTtcblx0XHR2YXIgdGlja3MgPSBtZS50aWNrcyA9IGdlbmVyYXRlVGlja3MobnVtZXJpY0dlbmVyYXRvck9wdGlvbnMsIG1lKTtcblxuXHRcdG1lLmhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlcygpO1xuXG5cdFx0Ly8gQXQgdGhpcyBwb2ludCwgd2UgbmVlZCB0byB1cGRhdGUgb3VyIG1heCBhbmQgbWluIGdpdmVuIHRoZSB0aWNrIHZhbHVlcyBzaW5jZSB3ZSBoYXZlIGV4cGFuZGVkIHRoZVxuXHRcdC8vIHJhbmdlIG9mIHRoZSBzY2FsZVxuXHRcdG1lLm1heCA9IGhlbHBlcnMkMS5tYXgodGlja3MpO1xuXHRcdG1lLm1pbiA9IGhlbHBlcnMkMS5taW4odGlja3MpO1xuXG5cdFx0aWYgKHRpY2tPcHRzLnJldmVyc2UpIHtcblx0XHRcdHRpY2tzLnJldmVyc2UoKTtcblxuXHRcdFx0bWUuc3RhcnQgPSBtZS5tYXg7XG5cdFx0XHRtZS5lbmQgPSBtZS5taW47XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLnN0YXJ0ID0gbWUubWluO1xuXHRcdFx0bWUuZW5kID0gbWUubWF4O1xuXHRcdH1cblx0fSxcblxuXHRjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRtZS50aWNrc0FzTnVtYmVycyA9IG1lLnRpY2tzLnNsaWNlKCk7XG5cdFx0bWUuemVyb0xpbmVJbmRleCA9IG1lLnRpY2tzLmluZGV4T2YoMCk7XG5cblx0XHRjb3JlX3NjYWxlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKG1lKTtcblx0fSxcblxuXHRfY29uZmlndXJlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aWNrcyA9IG1lLmdldFRpY2tzKCk7XG5cdFx0dmFyIHN0YXJ0ID0gbWUubWluO1xuXHRcdHZhciBlbmQgPSBtZS5tYXg7XG5cdFx0dmFyIG9mZnNldDtcblxuXHRcdGNvcmVfc2NhbGUucHJvdG90eXBlLl9jb25maWd1cmUuY2FsbChtZSk7XG5cblx0XHRpZiAobWUub3B0aW9ucy5vZmZzZXQgJiYgdGlja3MubGVuZ3RoKSB7XG5cdFx0XHRvZmZzZXQgPSAoZW5kIC0gc3RhcnQpIC8gTWF0aC5tYXgodGlja3MubGVuZ3RoIC0gMSwgMSkgLyAyO1xuXHRcdFx0c3RhcnQgLT0gb2Zmc2V0O1xuXHRcdFx0ZW5kICs9IG9mZnNldDtcblx0XHR9XG5cdFx0bWUuX3N0YXJ0VmFsdWUgPSBzdGFydDtcblx0XHRtZS5fZW5kVmFsdWUgPSBlbmQ7XG5cdFx0bWUuX3ZhbHVlUmFuZ2UgPSBlbmQgLSBzdGFydDtcblx0fVxufSk7XG5cbnZhciBkZWZhdWx0Q29uZmlnJDEgPSB7XG5cdHBvc2l0aW9uOiAnbGVmdCcsXG5cdHRpY2tzOiB7XG5cdFx0Y2FsbGJhY2s6IGNvcmVfdGlja3MuZm9ybWF0dGVycy5saW5lYXJcblx0fVxufTtcblxudmFyIERFRkFVTFRfTUlOID0gMDtcbnZhciBERUZBVUxUX01BWCA9IDE7XG5cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBzdGFja2VkLCBtZXRhKSB7XG5cdHZhciBrZXkgPSBbXG5cdFx0bWV0YS50eXBlLFxuXHRcdC8vIHdlIGhhdmUgYSBzZXBhcmF0ZSBzdGFjayBmb3Igc3RhY2s9dW5kZWZpbmVkIGRhdGFzZXRzIHdoZW4gdGhlIG9wdHMuc3RhY2tlZCBpcyB1bmRlZmluZWRcblx0XHRzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkID8gbWV0YS5pbmRleCA6ICcnLFxuXHRcdG1ldGEuc3RhY2tcblx0XS5qb2luKCcuJyk7XG5cblx0aWYgKHN0YWNrc1trZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRzdGFja3Nba2V5XSA9IHtcblx0XHRcdHBvczogW10sXG5cdFx0XHRuZWc6IFtdXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBzdGFja3Nba2V5XTtcbn1cblxuZnVuY3Rpb24gc3RhY2tEYXRhKHNjYWxlLCBzdGFja3MsIG1ldGEsIGRhdGEpIHtcblx0dmFyIG9wdHMgPSBzY2FsZS5vcHRpb25zO1xuXHR2YXIgc3RhY2tlZCA9IG9wdHMuc3RhY2tlZDtcblx0dmFyIHN0YWNrID0gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrZWQsIG1ldGEpO1xuXHR2YXIgcG9zID0gc3RhY2sucG9zO1xuXHR2YXIgbmVnID0gc3RhY2submVnO1xuXHR2YXIgaWxlbiA9IGRhdGEubGVuZ3RoO1xuXHR2YXIgaSwgdmFsdWU7XG5cblx0Zm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuXHRcdHZhbHVlID0gc2NhbGUuX3BhcnNlVmFsdWUoZGF0YVtpXSk7XG5cdFx0aWYgKGlzTmFOKHZhbHVlLm1pbikgfHwgaXNOYU4odmFsdWUubWF4KSB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRwb3NbaV0gPSBwb3NbaV0gfHwgMDtcblx0XHRuZWdbaV0gPSBuZWdbaV0gfHwgMDtcblxuXHRcdGlmIChvcHRzLnJlbGF0aXZlUG9pbnRzKSB7XG5cdFx0XHRwb3NbaV0gPSAxMDA7XG5cdFx0fSBlbHNlIGlmICh2YWx1ZS5taW4gPCAwIHx8IHZhbHVlLm1heCA8IDApIHtcblx0XHRcdG5lZ1tpXSArPSB2YWx1ZS5taW47XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBvc1tpXSArPSB2YWx1ZS5tYXg7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU1pbk1heChzY2FsZSwgbWV0YSwgZGF0YSkge1xuXHR2YXIgaWxlbiA9IGRhdGEubGVuZ3RoO1xuXHR2YXIgaSwgdmFsdWU7XG5cblx0Zm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuXHRcdHZhbHVlID0gc2NhbGUuX3BhcnNlVmFsdWUoZGF0YVtpXSk7XG5cdFx0aWYgKGlzTmFOKHZhbHVlLm1pbikgfHwgaXNOYU4odmFsdWUubWF4KSB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRzY2FsZS5taW4gPSBNYXRoLm1pbihzY2FsZS5taW4sIHZhbHVlLm1pbik7XG5cdFx0c2NhbGUubWF4ID0gTWF0aC5tYXgoc2NhbGUubWF4LCB2YWx1ZS5tYXgpO1xuXHR9XG59XG5cbnZhciBzY2FsZV9saW5lYXIgPSBzY2FsZV9saW5lYXJiYXNlLmV4dGVuZCh7XG5cdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIG1ldGFzZXRzID0gbWUuX2dldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG5cdFx0dmFyIGhhc1N0YWNrcyA9IG9wdHMuc3RhY2tlZDtcblx0XHR2YXIgc3RhY2tzID0ge307XG5cdFx0dmFyIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7XG5cdFx0dmFyIGksIG1ldGEsIGRhdGEsIHZhbHVlcztcblxuXHRcdG1lLm1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHRtZS5tYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cblx0XHRpZiAoaGFzU3RhY2tzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGZvciAoaSA9IDA7ICFoYXNTdGFja3MgJiYgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhID0gbWV0YXNldHNbaV07XG5cdFx0XHRcdGhhc1N0YWNrcyA9IG1ldGEuc3RhY2sgIT09IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZXRhID0gbWV0YXNldHNbaV07XG5cdFx0XHRkYXRhID0gZGF0YXNldHNbbWV0YS5pbmRleF0uZGF0YTtcblx0XHRcdGlmIChoYXNTdGFja3MpIHtcblx0XHRcdFx0c3RhY2tEYXRhKG1lLCBzdGFja3MsIG1ldGEsIGRhdGEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dXBkYXRlTWluTWF4KG1lLCBtZXRhLCBkYXRhKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoZWxwZXJzJDEuZWFjaChzdGFja3MsIGZ1bmN0aW9uKHN0YWNrVmFsdWVzKSB7XG5cdFx0XHR2YWx1ZXMgPSBzdGFja1ZhbHVlcy5wb3MuY29uY2F0KHN0YWNrVmFsdWVzLm5lZyk7XG5cdFx0XHRtZS5taW4gPSBNYXRoLm1pbihtZS5taW4sIGhlbHBlcnMkMS5taW4odmFsdWVzKSk7XG5cdFx0XHRtZS5tYXggPSBNYXRoLm1heChtZS5tYXgsIGhlbHBlcnMkMS5tYXgodmFsdWVzKSk7XG5cdFx0fSk7XG5cblx0XHRtZS5taW4gPSBoZWxwZXJzJDEuaXNGaW5pdGUobWUubWluKSAmJiAhaXNOYU4obWUubWluKSA/IG1lLm1pbiA6IERFRkFVTFRfTUlOO1xuXHRcdG1lLm1heCA9IGhlbHBlcnMkMS5pc0Zpbml0ZShtZS5tYXgpICYmICFpc05hTihtZS5tYXgpID8gbWUubWF4IDogREVGQVVMVF9NQVg7XG5cblx0XHQvLyBDb21tb24gYmFzZSBpbXBsZW1lbnRhdGlvbiB0byBoYW5kbGUgdGlja3MubWluLCB0aWNrcy5tYXgsIHRpY2tzLmJlZ2luQXRaZXJvXG5cdFx0bWUuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuXHR9LFxuXG5cdC8vIFJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRpY2tzIGJhc2VkIG9uIHRoZSBzY2FsZSBkaW1lbnNpb25cblx0X2NvbXB1dGVUaWNrTGltaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tGb250O1xuXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5jZWlsKG1lLndpZHRoIC8gNDApO1xuXHRcdH1cblx0XHR0aWNrRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQobWUub3B0aW9ucy50aWNrcyk7XG5cdFx0cmV0dXJuIE1hdGguY2VpbChtZS5oZWlnaHQgLyB0aWNrRm9udC5saW5lSGVpZ2h0KTtcblx0fSxcblxuXHQvLyBDYWxsZWQgYWZ0ZXIgdGhlIHRpY2tzIGFyZSBidWlsdC4gV2UgbmVlZFxuXHRoYW5kbGVEaXJlY3Rpb25hbENoYW5nZXM6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0Ly8gV2UgYXJlIGluIGEgdmVydGljYWwgb3JpZW50YXRpb24uIFRoZSB0b3AgdmFsdWUgaXMgdGhlIGhpZ2hlc3QuIFNvIHJldmVyc2UgdGhlIGFycmF5XG5cdFx0XHR0aGlzLnRpY2tzLnJldmVyc2UoKTtcblx0XHR9XG5cdH0sXG5cblx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHJldHVybiB0aGlzLl9nZXRTY2FsZUxhYmVsKHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdKTtcblx0fSxcblxuXHQvLyBVdGlsc1xuXHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0cmV0dXJuIG1lLmdldFBpeGVsRm9yRGVjaW1hbCgoK21lLmdldFJpZ2h0VmFsdWUodmFsdWUpIC0gbWUuX3N0YXJ0VmFsdWUpIC8gbWUuX3ZhbHVlUmFuZ2UpO1xuXHR9LFxuXG5cdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlO1xuXHR9LFxuXG5cdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgdGlja3MgPSB0aGlzLnRpY2tzQXNOdW1iZXJzO1xuXHRcdGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0pO1xuXHR9XG59KTtcblxuLy8gSU5URVJOQUw6IHN0YXRpYyBkZWZhdWx0IG9wdGlvbnMsIHJlZ2lzdGVyZWQgaW4gc3JjL2luZGV4LmpzXG52YXIgX2RlZmF1bHRzJDEgPSBkZWZhdWx0Q29uZmlnJDE7XG5zY2FsZV9saW5lYXIuX2RlZmF1bHRzID0gX2RlZmF1bHRzJDE7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCRiID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xudmFyIGxvZzEwID0gaGVscGVycyQxLm1hdGgubG9nMTA7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzZXQgb2YgbG9nYXJpdGhtaWMgdGlja3NcbiAqIEBwYXJhbSBnZW5lcmF0aW9uT3B0aW9ucyB0aGUgb3B0aW9ucyB1c2VkIHRvIGdlbmVyYXRlIHRoZSB0aWNrc1xuICogQHBhcmFtIGRhdGFSYW5nZSB0aGUgcmFuZ2Ugb2YgdGhlIGRhdGFcbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gYXJyYXkgb2YgdGljayB2YWx1ZXNcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVUaWNrcyQxKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcblx0dmFyIHRpY2tzID0gW107XG5cblx0dmFyIHRpY2tWYWwgPSB2YWx1ZU9yRGVmYXVsdCRiKGdlbmVyYXRpb25PcHRpb25zLm1pbiwgTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAoZGF0YVJhbmdlLm1pbikpKSk7XG5cblx0dmFyIGVuZEV4cCA9IE1hdGguZmxvb3IobG9nMTAoZGF0YVJhbmdlLm1heCkpO1xuXHR2YXIgZW5kU2lnbmlmaWNhbmQgPSBNYXRoLmNlaWwoZGF0YVJhbmdlLm1heCAvIE1hdGgucG93KDEwLCBlbmRFeHApKTtcblx0dmFyIGV4cCwgc2lnbmlmaWNhbmQ7XG5cblx0aWYgKHRpY2tWYWwgPT09IDApIHtcblx0XHRleHAgPSBNYXRoLmZsb29yKGxvZzEwKGRhdGFSYW5nZS5taW5Ob3RaZXJvKSk7XG5cdFx0c2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKGRhdGFSYW5nZS5taW5Ob3RaZXJvIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuXG5cdFx0dGlja3MucHVzaCh0aWNrVmFsKTtcblx0XHR0aWNrVmFsID0gc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKTtcblx0fSBlbHNlIHtcblx0XHRleHAgPSBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWwpKTtcblx0XHRzaWduaWZpY2FuZCA9IE1hdGguZmxvb3IodGlja1ZhbCAvIE1hdGgucG93KDEwLCBleHApKTtcblx0fVxuXHR2YXIgcHJlY2lzaW9uID0gZXhwIDwgMCA/IE1hdGgucG93KDEwLCBNYXRoLmFicyhleHApKSA6IDE7XG5cblx0ZG8ge1xuXHRcdHRpY2tzLnB1c2godGlja1ZhbCk7XG5cblx0XHQrK3NpZ25pZmljYW5kO1xuXHRcdGlmIChzaWduaWZpY2FuZCA9PT0gMTApIHtcblx0XHRcdHNpZ25pZmljYW5kID0gMTtcblx0XHRcdCsrZXhwO1xuXHRcdFx0cHJlY2lzaW9uID0gZXhwID49IDAgPyAxIDogcHJlY2lzaW9uO1xuXHRcdH1cblxuXHRcdHRpY2tWYWwgPSBNYXRoLnJvdW5kKHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuXHR9IHdoaWxlIChleHAgPCBlbmRFeHAgfHwgKGV4cCA9PT0gZW5kRXhwICYmIHNpZ25pZmljYW5kIDwgZW5kU2lnbmlmaWNhbmQpKTtcblxuXHR2YXIgbGFzdFRpY2sgPSB2YWx1ZU9yRGVmYXVsdCRiKGdlbmVyYXRpb25PcHRpb25zLm1heCwgdGlja1ZhbCk7XG5cdHRpY2tzLnB1c2gobGFzdFRpY2spO1xuXG5cdHJldHVybiB0aWNrcztcbn1cblxudmFyIGRlZmF1bHRDb25maWckMiA9IHtcblx0cG9zaXRpb246ICdsZWZ0JyxcblxuXHQvLyBsYWJlbCBzZXR0aW5nc1xuXHR0aWNrczoge1xuXHRcdGNhbGxiYWNrOiBjb3JlX3RpY2tzLmZvcm1hdHRlcnMubG9nYXJpdGhtaWNcblx0fVxufTtcblxuLy8gVE9ETyh2Myk6IGNoYW5nZSB0aGlzIHRvIHBvc2l0aXZlT3JEZWZhdWx0XG5mdW5jdGlvbiBub25OZWdhdGl2ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG5cdHJldHVybiBoZWxwZXJzJDEuaXNGaW5pdGUodmFsdWUpICYmIHZhbHVlID49IDAgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxudmFyIHNjYWxlX2xvZ2FyaXRobWljID0gY29yZV9zY2FsZS5leHRlbmQoe1xuXHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgZGF0YXNldHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzO1xuXHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRmdW5jdGlvbiBJRE1hdGNoZXMobWV0YSkge1xuXHRcdFx0cmV0dXJuIGlzSG9yaXpvbnRhbCA/IG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgOiBtZXRhLnlBeGlzSUQgPT09IG1lLmlkO1xuXHRcdH1cblx0XHR2YXIgZGF0YXNldEluZGV4LCBtZXRhLCB2YWx1ZSwgZGF0YSwgaSwgaWxlbjtcblxuXHRcdC8vIENhbGN1bGF0ZSBSYW5nZVxuXHRcdG1lLm1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHRtZS5tYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cdFx0bWUubWluTm90WmVybyA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblxuXHRcdHZhciBoYXNTdGFja3MgPSBvcHRzLnN0YWNrZWQ7XG5cdFx0aWYgKGhhc1N0YWNrcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRmb3IgKGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IGRhdGFzZXRzLmxlbmd0aDsgZGF0YXNldEluZGV4KyspIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkgJiYgSURNYXRjaGVzKG1ldGEpICYmXG5cdFx0XHRcdFx0bWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0aGFzU3RhY2tzID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChvcHRzLnN0YWNrZWQgfHwgaGFzU3RhY2tzKSB7XG5cdFx0XHR2YXIgdmFsdWVzUGVyU3RhY2sgPSB7fTtcblxuXHRcdFx0Zm9yIChkYXRhc2V0SW5kZXggPSAwOyBkYXRhc2V0SW5kZXggPCBkYXRhc2V0cy5sZW5ndGg7IGRhdGFzZXRJbmRleCsrKSB7XG5cdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuXHRcdFx0XHR2YXIga2V5ID0gW1xuXHRcdFx0XHRcdG1ldGEudHlwZSxcblx0XHRcdFx0XHQvLyB3ZSBoYXZlIGEgc2VwYXJhdGUgc3RhY2sgZm9yIHN0YWNrPXVuZGVmaW5lZCBkYXRhc2V0cyB3aGVuIHRoZSBvcHRzLnN0YWNrZWQgaXMgdW5kZWZpbmVkXG5cdFx0XHRcdFx0KChvcHRzLnN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrID09PSB1bmRlZmluZWQpID8gZGF0YXNldEluZGV4IDogJycpLFxuXHRcdFx0XHRcdG1ldGEuc3RhY2tcblx0XHRcdFx0XS5qb2luKCcuJyk7XG5cblx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSAmJiBJRE1hdGNoZXMobWV0YSkpIHtcblx0XHRcdFx0XHRpZiAodmFsdWVzUGVyU3RhY2tba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZXNQZXJTdGFja1trZXldID0gW107XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdFx0XHRcdHZhciB2YWx1ZXMgPSB2YWx1ZXNQZXJTdGFja1trZXldO1xuXHRcdFx0XHRcdFx0dmFsdWUgPSBtZS5fcGFyc2VWYWx1ZShkYXRhW2ldKTtcblx0XHRcdFx0XHRcdC8vIGludmFsaWQsIGhpZGRlbiBhbmQgbmVnYXRpdmUgdmFsdWVzIGFyZSBpZ25vcmVkXG5cdFx0XHRcdFx0XHRpZiAoaXNOYU4odmFsdWUubWluKSB8fCBpc05hTih2YWx1ZS5tYXgpIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4gfHwgdmFsdWUubWluIDwgMCB8fCB2YWx1ZS5tYXggPCAwKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dmFsdWVzW2ldID0gdmFsdWVzW2ldIHx8IDA7XG5cdFx0XHRcdFx0XHR2YWx1ZXNbaV0gKz0gdmFsdWUubWF4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzJDEuZWFjaCh2YWx1ZXNQZXJTdGFjaywgZnVuY3Rpb24odmFsdWVzRm9yVHlwZSkge1xuXHRcdFx0XHRpZiAodmFsdWVzRm9yVHlwZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0dmFyIG1pblZhbCA9IGhlbHBlcnMkMS5taW4odmFsdWVzRm9yVHlwZSk7XG5cdFx0XHRcdFx0dmFyIG1heFZhbCA9IGhlbHBlcnMkMS5tYXgodmFsdWVzRm9yVHlwZSk7XG5cdFx0XHRcdFx0bWUubWluID0gTWF0aC5taW4obWUubWluLCBtaW5WYWwpO1xuXHRcdFx0XHRcdG1lLm1heCA9IE1hdGgubWF4KG1lLm1heCwgbWF4VmFsKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChkYXRhc2V0SW5kZXggPSAwOyBkYXRhc2V0SW5kZXggPCBkYXRhc2V0cy5sZW5ndGg7IGRhdGFzZXRJbmRleCsrKSB7XG5cdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuXHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdGRhdGEgPSBkYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGE7XG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IG1lLl9wYXJzZVZhbHVlKGRhdGFbaV0pO1xuXHRcdFx0XHRcdFx0Ly8gaW52YWxpZCwgaGlkZGVuIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGlnbm9yZWRcblx0XHRcdFx0XHRcdGlmIChpc05hTih2YWx1ZS5taW4pIHx8IGlzTmFOKHZhbHVlLm1heCkgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbiB8fCB2YWx1ZS5taW4gPCAwIHx8IHZhbHVlLm1heCA8IDApIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1lLm1pbiA9IE1hdGgubWluKHZhbHVlLm1pbiwgbWUubWluKTtcblx0XHRcdFx0XHRcdG1lLm1heCA9IE1hdGgubWF4KHZhbHVlLm1heCwgbWUubWF4KTtcblxuXHRcdFx0XHRcdFx0aWYgKHZhbHVlLm1pbiAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gTWF0aC5taW4odmFsdWUubWluLCBtZS5taW5Ob3RaZXJvKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5taW4gPSBoZWxwZXJzJDEuaXNGaW5pdGUobWUubWluKSA/IG1lLm1pbiA6IG51bGw7XG5cdFx0bWUubWF4ID0gaGVscGVycyQxLmlzRmluaXRlKG1lLm1heCkgPyBtZS5tYXggOiBudWxsO1xuXHRcdG1lLm1pbk5vdFplcm8gPSBoZWxwZXJzJDEuaXNGaW5pdGUobWUubWluTm90WmVybykgPyBtZS5taW5Ob3RaZXJvIDogbnVsbDtcblxuXHRcdC8vIENvbW1vbiBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSB0aWNrcy5taW4sIHRpY2tzLm1heFxuXHRcdHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuXHR9LFxuXG5cdGhhbmRsZVRpY2tSYW5nZU9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHR2YXIgREVGQVVMVF9NSU4gPSAxO1xuXHRcdHZhciBERUZBVUxUX01BWCA9IDEwO1xuXG5cdFx0bWUubWluID0gbm9uTmVnYXRpdmVPckRlZmF1bHQodGlja09wdHMubWluLCBtZS5taW4pO1xuXHRcdG1lLm1heCA9IG5vbk5lZ2F0aXZlT3JEZWZhdWx0KHRpY2tPcHRzLm1heCwgbWUubWF4KTtcblxuXHRcdGlmIChtZS5taW4gPT09IG1lLm1heCkge1xuXHRcdFx0aWYgKG1lLm1pbiAhPT0gMCAmJiBtZS5taW4gIT09IG51bGwpIHtcblx0XHRcdFx0bWUubWluID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAobWUubWluKSkgLSAxKTtcblx0XHRcdFx0bWUubWF4ID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAobWUubWF4KSkgKyAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lLm1pbiA9IERFRkFVTFRfTUlOO1xuXHRcdFx0XHRtZS5tYXggPSBERUZBVUxUX01BWDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKG1lLm1pbiA9PT0gbnVsbCkge1xuXHRcdFx0bWUubWluID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAobWUubWF4KSkgLSAxKTtcblx0XHR9XG5cdFx0aWYgKG1lLm1heCA9PT0gbnVsbCkge1xuXHRcdFx0bWUubWF4ID0gbWUubWluICE9PSAwXG5cdFx0XHRcdD8gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAobWUubWluKSkgKyAxKVxuXHRcdFx0XHQ6IERFRkFVTFRfTUFYO1xuXHRcdH1cblx0XHRpZiAobWUubWluTm90WmVybyA9PT0gbnVsbCkge1xuXHRcdFx0aWYgKG1lLm1pbiA+IDApIHtcblx0XHRcdFx0bWUubWluTm90WmVybyA9IG1lLm1pbjtcblx0XHRcdH0gZWxzZSBpZiAobWUubWF4IDwgMSkge1xuXHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAobWUubWF4KSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUubWluTm90WmVybyA9IERFRkFVTFRfTUlOO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRidWlsZFRpY2tzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHJldmVyc2UgPSAhbWUuaXNIb3Jpem9udGFsKCk7XG5cblx0XHR2YXIgZ2VuZXJhdGlvbk9wdGlvbnMgPSB7XG5cdFx0XHRtaW46IG5vbk5lZ2F0aXZlT3JEZWZhdWx0KHRpY2tPcHRzLm1pbiksXG5cdFx0XHRtYXg6IG5vbk5lZ2F0aXZlT3JEZWZhdWx0KHRpY2tPcHRzLm1heClcblx0XHR9O1xuXHRcdHZhciB0aWNrcyA9IG1lLnRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKGdlbmVyYXRpb25PcHRpb25zLCBtZSk7XG5cblx0XHQvLyBBdCB0aGlzIHBvaW50LCB3ZSBuZWVkIHRvIHVwZGF0ZSBvdXIgbWF4IGFuZCBtaW4gZ2l2ZW4gdGhlIHRpY2sgdmFsdWVzIHNpbmNlIHdlIGhhdmUgZXhwYW5kZWQgdGhlXG5cdFx0Ly8gcmFuZ2Ugb2YgdGhlIHNjYWxlXG5cdFx0bWUubWF4ID0gaGVscGVycyQxLm1heCh0aWNrcyk7XG5cdFx0bWUubWluID0gaGVscGVycyQxLm1pbih0aWNrcyk7XG5cblx0XHRpZiAodGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0cmV2ZXJzZSA9ICFyZXZlcnNlO1xuXHRcdFx0bWUuc3RhcnQgPSBtZS5tYXg7XG5cdFx0XHRtZS5lbmQgPSBtZS5taW47XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLnN0YXJ0ID0gbWUubWluO1xuXHRcdFx0bWUuZW5kID0gbWUubWF4O1xuXHRcdH1cblx0XHRpZiAocmV2ZXJzZSkge1xuXHRcdFx0dGlja3MucmV2ZXJzZSgpO1xuXHRcdH1cblx0fSxcblxuXHRjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy50aWNrVmFsdWVzID0gdGhpcy50aWNrcy5zbGljZSgpO1xuXG5cdFx0Y29yZV9zY2FsZS5wcm90b3R5cGUuY29udmVydFRpY2tzVG9MYWJlbHMuY2FsbCh0aGlzKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIGNvcnJlY3QgdG9vbHRpcCBsYWJlbFxuXHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFNjYWxlTGFiZWwodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHR9LFxuXG5cdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgdGlja3MgPSB0aGlzLnRpY2tWYWx1ZXM7XG5cdFx0aWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCB0aWNrLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgbWluaW11bSBub3QgemVybyB2YWx1ZS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgZmlyc3QgdGljayB2YWx1ZS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRGaXJzdFRpY2tWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgZXhwID0gTWF0aC5mbG9vcihsb2cxMCh2YWx1ZSkpO1xuXHRcdHZhciBzaWduaWZpY2FuZCA9IE1hdGguZmxvb3IodmFsdWUgLyBNYXRoLnBvdygxMCwgZXhwKSk7XG5cblx0XHRyZXR1cm4gc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKTtcblx0fSxcblxuXHRfY29uZmlndXJlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBzdGFydCA9IG1lLm1pbjtcblx0XHR2YXIgb2Zmc2V0ID0gMDtcblxuXHRcdGNvcmVfc2NhbGUucHJvdG90eXBlLl9jb25maWd1cmUuY2FsbChtZSk7XG5cblx0XHRpZiAoc3RhcnQgPT09IDApIHtcblx0XHRcdHN0YXJ0ID0gbWUuX2dldEZpcnN0VGlja1ZhbHVlKG1lLm1pbk5vdFplcm8pO1xuXHRcdFx0b2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQkYihtZS5vcHRpb25zLnRpY2tzLmZvbnRTaXplLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpIC8gbWUuX2xlbmd0aDtcblx0XHR9XG5cblx0XHRtZS5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcblx0XHRtZS5fdmFsdWVPZmZzZXQgPSBvZmZzZXQ7XG5cdFx0bWUuX3ZhbHVlUmFuZ2UgPSAobG9nMTAobWUubWF4KSAtIGxvZzEwKHN0YXJ0KSkgLyAoMSAtIG9mZnNldCk7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBkZWNpbWFsID0gMDtcblxuXHRcdHZhbHVlID0gK21lLmdldFJpZ2h0VmFsdWUodmFsdWUpO1xuXG5cdFx0aWYgKHZhbHVlID4gbWUubWluICYmIHZhbHVlID4gMCkge1xuXHRcdFx0ZGVjaW1hbCA9IChsb2cxMCh2YWx1ZSkgLSBtZS5fc3RhcnRWYWx1ZSkgLyBtZS5fdmFsdWVSYW5nZSArIG1lLl92YWx1ZU9mZnNldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lLmdldFBpeGVsRm9yRGVjaW1hbChkZWNpbWFsKTtcblx0fSxcblxuXHRnZXRWYWx1ZUZvclBpeGVsOiBmdW5jdGlvbihwaXhlbCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGRlY2ltYWwgPSBtZS5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpO1xuXHRcdHJldHVybiBkZWNpbWFsID09PSAwICYmIG1lLm1pbiA9PT0gMFxuXHRcdFx0PyAwXG5cdFx0XHQ6IE1hdGgucG93KDEwLCBtZS5fc3RhcnRWYWx1ZSArIChkZWNpbWFsIC0gbWUuX3ZhbHVlT2Zmc2V0KSAqIG1lLl92YWx1ZVJhbmdlKTtcblx0fVxufSk7XG5cbi8vIElOVEVSTkFMOiBzdGF0aWMgZGVmYXVsdCBvcHRpb25zLCByZWdpc3RlcmVkIGluIHNyYy9pbmRleC5qc1xudmFyIF9kZWZhdWx0cyQyID0gZGVmYXVsdENvbmZpZyQyO1xuc2NhbGVfbG9nYXJpdGhtaWMuX2RlZmF1bHRzID0gX2RlZmF1bHRzJDI7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCRjID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xudmFyIHZhbHVlQXRJbmRleE9yRGVmYXVsdCQxID0gaGVscGVycyQxLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcbnZhciByZXNvbHZlJDQgPSBoZWxwZXJzJDEub3B0aW9ucy5yZXNvbHZlO1xuXG52YXIgZGVmYXVsdENvbmZpZyQzID0ge1xuXHRkaXNwbGF5OiB0cnVlLFxuXG5cdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRvIGFuaW1hdGUgc2NhbGluZyB0aGUgY2hhcnQgZnJvbSB0aGUgY2VudHJlXG5cdGFuaW1hdGU6IHRydWUsXG5cdHBvc2l0aW9uOiAnY2hhcnRBcmVhJyxcblxuXHRhbmdsZUxpbmVzOiB7XG5cdFx0ZGlzcGxheTogdHJ1ZSxcblx0XHRjb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG5cdFx0bGluZVdpZHRoOiAxLFxuXHRcdGJvcmRlckRhc2g6IFtdLFxuXHRcdGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuXHR9LFxuXG5cdGdyaWRMaW5lczoge1xuXHRcdGNpcmN1bGFyOiBmYWxzZVxuXHR9LFxuXG5cdC8vIGxhYmVsIHNldHRpbmdzXG5cdHRpY2tzOiB7XG5cdFx0Ly8gQm9vbGVhbiAtIFNob3cgYSBiYWNrZHJvcCB0byB0aGUgc2NhbGUgbGFiZWxcblx0XHRzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcblxuXHRcdC8vIFN0cmluZyAtIFRoZSBjb2xvdXIgb2YgdGhlIGxhYmVsIGJhY2tkcm9wXG5cdFx0YmFja2Ryb3BDb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMC43NSknLFxuXG5cdFx0Ly8gTnVtYmVyIC0gVGhlIGJhY2tkcm9wIHBhZGRpbmcgYWJvdmUgJiBiZWxvdyB0aGUgbGFiZWwgaW4gcGl4ZWxzXG5cdFx0YmFja2Ryb3BQYWRkaW5nWTogMixcblxuXHRcdC8vIE51bWJlciAtIFRoZSBiYWNrZHJvcCBwYWRkaW5nIHRvIHRoZSBzaWRlIG9mIHRoZSBsYWJlbCBpbiBwaXhlbHNcblx0XHRiYWNrZHJvcFBhZGRpbmdYOiAyLFxuXG5cdFx0Y2FsbGJhY2s6IGNvcmVfdGlja3MuZm9ybWF0dGVycy5saW5lYXJcblx0fSxcblxuXHRwb2ludExhYmVsczoge1xuXHRcdC8vIEJvb2xlYW4gLSBpZiB0cnVlLCBzaG93IHBvaW50IGxhYmVsc1xuXHRcdGRpc3BsYXk6IHRydWUsXG5cblx0XHQvLyBOdW1iZXIgLSBQb2ludCBsYWJlbCBmb250IHNpemUgaW4gcGl4ZWxzXG5cdFx0Zm9udFNpemU6IDEwLFxuXG5cdFx0Ly8gRnVuY3Rpb24gLSBVc2VkIHRvIGNvbnZlcnQgcG9pbnQgbGFiZWxzXG5cdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0fVxuXHR9XG59O1xuXG5mdW5jdGlvbiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykge1xuXHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXG5cdGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIG9wdHMuZGlzcGxheSkge1xuXHRcdHJldHVybiB2YWx1ZU9yRGVmYXVsdCRjKHRpY2tPcHRzLmZvbnRTaXplLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpICsgdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWSAqIDI7XG5cdH1cblx0cmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIG1lYXN1cmVMYWJlbFNpemUoY3R4LCBsaW5lSGVpZ2h0LCBsYWJlbCkge1xuXHRpZiAoaGVscGVycyQxLmlzQXJyYXkobGFiZWwpKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHc6IGhlbHBlcnMkMS5sb25nZXN0VGV4dChjdHgsIGN0eC5mb250LCBsYWJlbCksXG5cdFx0XHRoOiBsYWJlbC5sZW5ndGggKiBsaW5lSGVpZ2h0XG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0dzogY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aCxcblx0XHRoOiBsaW5lSGVpZ2h0XG5cdH07XG59XG5cbmZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuXHRpZiAoYW5nbGUgPT09IG1pbiB8fCBhbmdsZSA9PT0gbWF4KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXJ0OiBwb3MgLSAoc2l6ZSAvIDIpLFxuXHRcdFx0ZW5kOiBwb3MgKyAoc2l6ZSAvIDIpXG5cdFx0fTtcblx0fSBlbHNlIGlmIChhbmdsZSA8IG1pbiB8fCBhbmdsZSA+IG1heCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzdGFydDogcG9zIC0gc2l6ZSxcblx0XHRcdGVuZDogcG9zXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c3RhcnQ6IHBvcyxcblx0XHRlbmQ6IHBvcyArIHNpemVcblx0fTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZml0IGEgcmFkaWFsIGxpbmVhciBzY2FsZSB3aXRoIHBvaW50IGxhYmVsc1xuICovXG5mdW5jdGlvbiBmaXRXaXRoUG9pbnRMYWJlbHMoc2NhbGUpIHtcblxuXHQvLyBSaWdodCwgdGhpcyBpcyByZWFsbHkgY29uZnVzaW5nIGFuZCB0aGVyZSBpcyBhIGxvdCBvZiBtYXRocyBnb2luZyBvbiBoZXJlXG5cdC8vIFRoZSBnaXN0IG9mIHRoZSBwcm9ibGVtIGlzIGhlcmU6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL25ubmljay82OTZjYzljNTVmNGIwYmViOGZlOVxuXHQvL1xuXHQvLyBSZWFjdGlvbjogaHR0cHM6Ly9kbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tL3UvMzQ2MDEzNjMvdG9vbXVjaHNjaWVuY2UuZ2lmXG5cdC8vXG5cdC8vIFNvbHV0aW9uOlxuXHQvL1xuXHQvLyBXZSBhc3N1bWUgdGhlIHJhZGl1cyBvZiB0aGUgcG9seWdvbiBpcyBoYWxmIHRoZSBzaXplIG9mIHRoZSBjYW52YXMgYXQgZmlyc3Rcblx0Ly8gYXQgZWFjaCBpbmRleCB3ZSBjaGVjayBpZiB0aGUgdGV4dCBvdmVybGFwcy5cblx0Ly9cblx0Ly8gV2hlcmUgaXQgZG9lcywgd2Ugc3RvcmUgdGhhdCBhbmdsZSBhbmQgdGhhdCBpbmRleC5cblx0Ly9cblx0Ly8gQWZ0ZXIgZmluZGluZyB0aGUgbGFyZ2VzdCBpbmRleCBhbmQgYW5nbGUgd2UgY2FsY3VsYXRlIGhvdyBtdWNoIHdlIG5lZWQgdG8gcmVtb3ZlXG5cdC8vIGZyb20gdGhlIHNoYXBlIHJhZGl1cyB0byBtb3ZlIHRoZSBwb2ludCBpbndhcmRzIGJ5IHRoYXQgeC5cblx0Ly9cblx0Ly8gV2UgYXZlcmFnZSB0aGUgbGVmdCBhbmQgcmlnaHQgZGlzdGFuY2VzIHRvIGdldCB0aGUgbWF4aW11bSBzaGFwZSByYWRpdXMgdGhhdCBjYW4gZml0IGluIHRoZSBib3hcblx0Ly8gYWxvbmcgd2l0aCBsYWJlbHMuXG5cdC8vXG5cdC8vIE9uY2Ugd2UgaGF2ZSB0aGF0LCB3ZSBjYW4gZmluZCB0aGUgY2VudHJlIHBvaW50IGZvciB0aGUgY2hhcnQsIGJ5IHRha2luZyB0aGUgeCB0ZXh0IHByb3RydXNpb25cblx0Ly8gb24gZWFjaCBzaWRlLCByZW1vdmluZyB0aGF0IGZyb20gdGhlIHNpemUsIGhhbHZpbmcgaXQgYW5kIGFkZGluZyB0aGUgbGVmdCB4IHByb3RydXNpb24gd2lkdGguXG5cdC8vXG5cdC8vIFRoaXMgd2lsbCBtZWFuIHdlIGhhdmUgYSBzaGFwZSBmaXR0ZWQgdG8gdGhlIGNhbnZhcywgYXMgbGFyZ2UgYXMgaXQgY2FuIGJlIHdpdGggdGhlIGxhYmVsc1xuXHQvLyBhbmQgcG9zaXRpb24gaXQgaW4gdGhlIG1vc3Qgc3BhY2UgZWZmaWNpZW50IG1hbm5lclxuXHQvL1xuXHQvLyBodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8zNDYwMTM2My95ZWFoc2NpZW5jZS5naWZcblxuXHR2YXIgcGxGb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChzY2FsZS5vcHRpb25zLnBvaW50TGFiZWxzKTtcblxuXHQvLyBHZXQgbWF4aW11bSByYWRpdXMgb2YgdGhlIHBvbHlnb24uIEVpdGhlciBoYWxmIHRoZSBoZWlnaHQgKG1pbnVzIHRoZSB0ZXh0IHdpZHRoKSBvciBoYWxmIHRoZSB3aWR0aC5cblx0Ly8gVXNlIHRoaXMgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXQgKyBjaGFuZ2UuIC0gTWFrZSBzdXJlIEwvUiBwcm90cnVzaW9uIGlzIGF0IGxlYXN0IDAgdG8gc3RvcCBpc3N1ZXMgd2l0aCBjZW50cmUgcG9pbnRzXG5cdHZhciBmdXJ0aGVzdExpbWl0cyA9IHtcblx0XHRsOiAwLFxuXHRcdHI6IHNjYWxlLndpZHRoLFxuXHRcdHQ6IDAsXG5cdFx0Yjogc2NhbGUuaGVpZ2h0IC0gc2NhbGUucGFkZGluZ1RvcFxuXHR9O1xuXHR2YXIgZnVydGhlc3RBbmdsZXMgPSB7fTtcblx0dmFyIGksIHRleHRTaXplLCBwb2ludFBvc2l0aW9uO1xuXG5cdHNjYWxlLmN0eC5mb250ID0gcGxGb250LnN0cmluZztcblx0c2NhbGUuX3BvaW50TGFiZWxTaXplcyA9IFtdO1xuXG5cdHZhciB2YWx1ZUNvdW50ID0gc2NhbGUuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoO1xuXHRmb3IgKGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG5cdFx0cG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgc2NhbGUuZHJhd2luZ0FyZWEgKyA1KTtcblx0XHR0ZXh0U2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoc2NhbGUuY3R4LCBwbEZvbnQubGluZUhlaWdodCwgc2NhbGUucG9pbnRMYWJlbHNbaV0pO1xuXHRcdHNjYWxlLl9wb2ludExhYmVsU2l6ZXNbaV0gPSB0ZXh0U2l6ZTtcblxuXHRcdC8vIEFkZCBxdWFydGVyIGNpcmNsZSB0byBtYWtlIGRlZ3JlZSAwIG1lYW4gdG9wIG9mIGNpcmNsZVxuXHRcdHZhciBhbmdsZVJhZGlhbnMgPSBzY2FsZS5nZXRJbmRleEFuZ2xlKGkpO1xuXHRcdHZhciBhbmdsZSA9IGhlbHBlcnMkMS50b0RlZ3JlZXMoYW5nbGVSYWRpYW5zKSAlIDM2MDtcblx0XHR2YXIgaExpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi54LCB0ZXh0U2l6ZS53LCAwLCAxODApO1xuXHRcdHZhciB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuXG5cdFx0aWYgKGhMaW1pdHMuc3RhcnQgPCBmdXJ0aGVzdExpbWl0cy5sKSB7XG5cdFx0XHRmdXJ0aGVzdExpbWl0cy5sID0gaExpbWl0cy5zdGFydDtcblx0XHRcdGZ1cnRoZXN0QW5nbGVzLmwgPSBhbmdsZVJhZGlhbnM7XG5cdFx0fVxuXG5cdFx0aWYgKGhMaW1pdHMuZW5kID4gZnVydGhlc3RMaW1pdHMucikge1xuXHRcdFx0ZnVydGhlc3RMaW1pdHMuciA9IGhMaW1pdHMuZW5kO1xuXHRcdFx0ZnVydGhlc3RBbmdsZXMuciA9IGFuZ2xlUmFkaWFucztcblx0XHR9XG5cblx0XHRpZiAodkxpbWl0cy5zdGFydCA8IGZ1cnRoZXN0TGltaXRzLnQpIHtcblx0XHRcdGZ1cnRoZXN0TGltaXRzLnQgPSB2TGltaXRzLnN0YXJ0O1xuXHRcdFx0ZnVydGhlc3RBbmdsZXMudCA9IGFuZ2xlUmFkaWFucztcblx0XHR9XG5cblx0XHRpZiAodkxpbWl0cy5lbmQgPiBmdXJ0aGVzdExpbWl0cy5iKSB7XG5cdFx0XHRmdXJ0aGVzdExpbWl0cy5iID0gdkxpbWl0cy5lbmQ7XG5cdFx0XHRmdXJ0aGVzdEFuZ2xlcy5iID0gYW5nbGVSYWRpYW5zO1xuXHRcdH1cblx0fVxuXG5cdHNjYWxlLnNldFJlZHVjdGlvbnMoc2NhbGUuZHJhd2luZ0FyZWEsIGZ1cnRoZXN0TGltaXRzLCBmdXJ0aGVzdEFuZ2xlcyk7XG59XG5cbmZ1bmN0aW9uIGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKSB7XG5cdGlmIChhbmdsZSA9PT0gMCB8fCBhbmdsZSA9PT0gMTgwKSB7XG5cdFx0cmV0dXJuICdjZW50ZXInO1xuXHR9IGVsc2UgaWYgKGFuZ2xlIDwgMTgwKSB7XG5cdFx0cmV0dXJuICdsZWZ0Jztcblx0fVxuXG5cdHJldHVybiAncmlnaHQnO1xufVxuXG5mdW5jdGlvbiBmaWxsVGV4dChjdHgsIHRleHQsIHBvc2l0aW9uLCBsaW5lSGVpZ2h0KSB7XG5cdHZhciB5ID0gcG9zaXRpb24ueSArIGxpbmVIZWlnaHQgLyAyO1xuXHR2YXIgaSwgaWxlbjtcblxuXHRpZiAoaGVscGVycyQxLmlzQXJyYXkodGV4dCkpIHtcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGV4dC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGN0eC5maWxsVGV4dCh0ZXh0W2ldLCBwb3NpdGlvbi54LCB5KTtcblx0XHRcdHkgKz0gbGluZUhlaWdodDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Y3R4LmZpbGxUZXh0KHRleHQsIHBvc2l0aW9uLngsIHkpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGFkanVzdFBvaW50UG9zaXRpb25Gb3JMYWJlbEhlaWdodChhbmdsZSwgdGV4dFNpemUsIHBvc2l0aW9uKSB7XG5cdGlmIChhbmdsZSA9PT0gOTAgfHwgYW5nbGUgPT09IDI3MCkge1xuXHRcdHBvc2l0aW9uLnkgLT0gKHRleHRTaXplLmggLyAyKTtcblx0fSBlbHNlIGlmIChhbmdsZSA+IDI3MCB8fCBhbmdsZSA8IDkwKSB7XG5cdFx0cG9zaXRpb24ueSAtPSB0ZXh0U2l6ZS5oO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVscyhzY2FsZSkge1xuXHR2YXIgY3R4ID0gc2NhbGUuY3R4O1xuXHR2YXIgb3B0cyA9IHNjYWxlLm9wdGlvbnM7XG5cdHZhciBwb2ludExhYmVsT3B0cyA9IG9wdHMucG9pbnRMYWJlbHM7XG5cdHZhciB0aWNrQmFja2Ryb3BIZWlnaHQgPSBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cyk7XG5cdHZhciBvdXRlckRpc3RhbmNlID0gc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUob3B0cy50aWNrcy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4KTtcblx0dmFyIHBsRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQocG9pbnRMYWJlbE9wdHMpO1xuXG5cdGN0eC5zYXZlKCk7XG5cblx0Y3R4LmZvbnQgPSBwbEZvbnQuc3RyaW5nO1xuXHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0Zm9yICh2YXIgaSA9IHNjYWxlLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0Ly8gRXh0cmEgcGl4ZWxzIG91dCBmb3Igc29tZSBsYWJlbCBzcGFjaW5nXG5cdFx0dmFyIGV4dHJhID0gKGkgPT09IDAgPyB0aWNrQmFja2Ryb3BIZWlnaHQgLyAyIDogMCk7XG5cdFx0dmFyIHBvaW50TGFiZWxQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgb3V0ZXJEaXN0YW5jZSArIGV4dHJhICsgNSk7XG5cblx0XHQvLyBLZWVwIHRoaXMgaW4gbG9vcCBzaW5jZSB3ZSBtYXkgc3VwcG9ydCBhcnJheSBwcm9wZXJ0aWVzIGhlcmVcblx0XHR2YXIgcG9pbnRMYWJlbEZvbnRDb2xvciA9IHZhbHVlQXRJbmRleE9yRGVmYXVsdCQxKHBvaW50TGFiZWxPcHRzLmZvbnRDb2xvciwgaSwgY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdEZvbnRDb2xvcik7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHBvaW50TGFiZWxGb250Q29sb3I7XG5cblx0XHR2YXIgYW5nbGVSYWRpYW5zID0gc2NhbGUuZ2V0SW5kZXhBbmdsZShpKTtcblx0XHR2YXIgYW5nbGUgPSBoZWxwZXJzJDEudG9EZWdyZWVzKGFuZ2xlUmFkaWFucyk7XG5cdFx0Y3R4LnRleHRBbGlnbiA9IGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKTtcblx0XHRhZGp1c3RQb2ludFBvc2l0aW9uRm9yTGFiZWxIZWlnaHQoYW5nbGUsIHNjYWxlLl9wb2ludExhYmVsU2l6ZXNbaV0sIHBvaW50TGFiZWxQb3NpdGlvbik7XG5cdFx0ZmlsbFRleHQoY3R4LCBzY2FsZS5wb2ludExhYmVsc1tpXSwgcG9pbnRMYWJlbFBvc2l0aW9uLCBwbEZvbnQubGluZUhlaWdodCk7XG5cdH1cblx0Y3R4LnJlc3RvcmUoKTtcbn1cblxuZnVuY3Rpb24gZHJhd1JhZGl1c0xpbmUoc2NhbGUsIGdyaWRMaW5lT3B0cywgcmFkaXVzLCBpbmRleCkge1xuXHR2YXIgY3R4ID0gc2NhbGUuY3R4O1xuXHR2YXIgY2lyY3VsYXIgPSBncmlkTGluZU9wdHMuY2lyY3VsYXI7XG5cdHZhciB2YWx1ZUNvdW50ID0gc2NhbGUuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoO1xuXHR2YXIgbGluZUNvbG9yID0gdmFsdWVBdEluZGV4T3JEZWZhdWx0JDEoZ3JpZExpbmVPcHRzLmNvbG9yLCBpbmRleCAtIDEpO1xuXHR2YXIgbGluZVdpZHRoID0gdmFsdWVBdEluZGV4T3JEZWZhdWx0JDEoZ3JpZExpbmVPcHRzLmxpbmVXaWR0aCwgaW5kZXggLSAxKTtcblx0dmFyIHBvaW50UG9zaXRpb247XG5cblx0aWYgKCghY2lyY3VsYXIgJiYgIXZhbHVlQ291bnQpIHx8ICFsaW5lQ29sb3IgfHwgIWxpbmVXaWR0aCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGN0eC5zYXZlKCk7XG5cdGN0eC5zdHJva2VTdHlsZSA9IGxpbmVDb2xvcjtcblx0Y3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcblx0aWYgKGN0eC5zZXRMaW5lRGFzaCkge1xuXHRcdGN0eC5zZXRMaW5lRGFzaChncmlkTGluZU9wdHMuYm9yZGVyRGFzaCB8fCBbXSk7XG5cdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gZ3JpZExpbmVPcHRzLmJvcmRlckRhc2hPZmZzZXQgfHwgMC4wO1xuXHR9XG5cblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRpZiAoY2lyY3VsYXIpIHtcblx0XHQvLyBEcmF3IGNpcmN1bGFyIGFyY3MgYmV0d2VlbiB0aGUgcG9pbnRzXG5cdFx0Y3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcblx0fSBlbHNlIHtcblx0XHQvLyBEcmF3IHN0cmFpZ2h0IGxpbmVzIGNvbm5lY3RpbmcgZWFjaCBpbmRleFxuXHRcdHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG5cdFx0Y3R4Lm1vdmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuXHRcdFx0cG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgcmFkaXVzKTtcblx0XHRcdGN0eC5saW5lVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuXHRcdH1cblx0fVxuXHRjdHguY2xvc2VQYXRoKCk7XG5cdGN0eC5zdHJva2UoKTtcblx0Y3R4LnJlc3RvcmUoKTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyT3JaZXJvKHBhcmFtKSB7XG5cdHJldHVybiBoZWxwZXJzJDEuaXNOdW1iZXIocGFyYW0pID8gcGFyYW0gOiAwO1xufVxuXG52YXIgc2NhbGVfcmFkaWFsTGluZWFyID0gc2NhbGVfbGluZWFyYmFzZS5leHRlbmQoe1xuXHRzZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0Ly8gU2V0IHRoZSB1bmNvbnN0cmFpbmVkIGRpbWVuc2lvbiBiZWZvcmUgbGFiZWwgcm90YXRpb25cblx0XHRtZS53aWR0aCA9IG1lLm1heFdpZHRoO1xuXHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblx0XHRtZS5wYWRkaW5nVG9wID0gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG1lLm9wdGlvbnMpIC8gMjtcblx0XHRtZS54Q2VudGVyID0gTWF0aC5mbG9vcihtZS53aWR0aCAvIDIpO1xuXHRcdG1lLnlDZW50ZXIgPSBNYXRoLmZsb29yKChtZS5oZWlnaHQgLSBtZS5wYWRkaW5nVG9wKSAvIDIpO1xuXHRcdG1lLmRyYXdpbmdBcmVhID0gTWF0aC5taW4obWUuaGVpZ2h0IC0gbWUucGFkZGluZ1RvcCwgbWUud2lkdGgpIC8gMjtcblx0fSxcblxuXHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cdFx0dmFyIG1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblxuXHRcdGhlbHBlcnMkMS5lYWNoKGNoYXJ0LmRhdGEuZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSkge1xuXHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cblx0XHRcdFx0aGVscGVycyQxLmVhY2goZGF0YXNldC5kYXRhLCBmdW5jdGlvbihyYXdWYWx1ZSwgaW5kZXgpIHtcblx0XHRcdFx0XHR2YXIgdmFsdWUgPSArbWUuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZSk7XG5cdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1pbiA9IE1hdGgubWluKHZhbHVlLCBtaW4pO1xuXHRcdFx0XHRcdG1heCA9IE1hdGgubWF4KHZhbHVlLCBtYXgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG1lLm1pbiA9IChtaW4gPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA/IDAgOiBtaW4pO1xuXHRcdG1lLm1heCA9IChtYXggPT09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA/IDAgOiBtYXgpO1xuXG5cdFx0Ly8gQ29tbW9uIGJhc2UgaW1wbGVtZW50YXRpb24gdG8gaGFuZGxlIHRpY2tzLm1pbiwgdGlja3MubWF4LCB0aWNrcy5iZWdpbkF0WmVyb1xuXHRcdG1lLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcblx0fSxcblxuXHQvLyBSZXR1cm5zIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aWNrcyBiYXNlZCBvbiB0aGUgc2NhbGUgZGltZW5zaW9uXG5cdF9jb21wdXRlVGlja0xpbWl0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gTWF0aC5jZWlsKHRoaXMuZHJhd2luZ0FyZWEgLyBnZXRUaWNrQmFja2Ryb3BIZWlnaHQodGhpcy5vcHRpb25zKSk7XG5cdH0sXG5cblx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRzY2FsZV9saW5lYXJiYXNlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKG1lKTtcblxuXHRcdC8vIFBvaW50IGxhYmVsc1xuXHRcdG1lLnBvaW50TGFiZWxzID0gbWUuY2hhcnQuZGF0YS5sYWJlbHMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGxhYmVsID0gaGVscGVycyQxLmNhbGxiYWNrKG1lLm9wdGlvbnMucG9pbnRMYWJlbHMuY2FsbGJhY2ssIGFyZ3VtZW50cywgbWUpO1xuXHRcdFx0cmV0dXJuIGxhYmVsIHx8IGxhYmVsID09PSAwID8gbGFiZWwgOiAnJztcblx0XHR9KTtcblx0fSxcblxuXHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0cmV0dXJuICt0aGlzLmdldFJpZ2h0VmFsdWUodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHR9LFxuXG5cdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cblx0XHRpZiAob3B0cy5kaXNwbGF5ICYmIG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuXHRcdFx0Zml0V2l0aFBvaW50TGFiZWxzKG1lKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgcmFkaXVzIHJlZHVjdGlvbnMgYW5kIGRldGVybWluZSBuZXcgcmFkaXVzIGFuZCBjZW50ZXIgcG9pbnRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHNldFJlZHVjdGlvbnM6IGZ1bmN0aW9uKGxhcmdlc3RQb3NzaWJsZVJhZGl1cywgZnVydGhlc3RMaW1pdHMsIGZ1cnRoZXN0QW5nbGVzKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uTGVmdCA9IGZ1cnRoZXN0TGltaXRzLmwgLyBNYXRoLnNpbihmdXJ0aGVzdEFuZ2xlcy5sKTtcblx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uUmlnaHQgPSBNYXRoLm1heChmdXJ0aGVzdExpbWl0cy5yIC0gbWUud2lkdGgsIDApIC8gTWF0aC5zaW4oZnVydGhlc3RBbmdsZXMucik7XG5cdFx0dmFyIHJhZGl1c1JlZHVjdGlvblRvcCA9IC1mdXJ0aGVzdExpbWl0cy50IC8gTWF0aC5jb3MoZnVydGhlc3RBbmdsZXMudCk7XG5cdFx0dmFyIHJhZGl1c1JlZHVjdGlvbkJvdHRvbSA9IC1NYXRoLm1heChmdXJ0aGVzdExpbWl0cy5iIC0gKG1lLmhlaWdodCAtIG1lLnBhZGRpbmdUb3ApLCAwKSAvIE1hdGguY29zKGZ1cnRoZXN0QW5nbGVzLmIpO1xuXG5cdFx0cmFkaXVzUmVkdWN0aW9uTGVmdCA9IG51bWJlck9yWmVybyhyYWRpdXNSZWR1Y3Rpb25MZWZ0KTtcblx0XHRyYWRpdXNSZWR1Y3Rpb25SaWdodCA9IG51bWJlck9yWmVybyhyYWRpdXNSZWR1Y3Rpb25SaWdodCk7XG5cdFx0cmFkaXVzUmVkdWN0aW9uVG9wID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvblRvcCk7XG5cdFx0cmFkaXVzUmVkdWN0aW9uQm90dG9tID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvbkJvdHRvbSk7XG5cblx0XHRtZS5kcmF3aW5nQXJlYSA9IE1hdGgubWluKFxuXHRcdFx0TWF0aC5mbG9vcihsYXJnZXN0UG9zc2libGVSYWRpdXMgLSAocmFkaXVzUmVkdWN0aW9uTGVmdCArIHJhZGl1c1JlZHVjdGlvblJpZ2h0KSAvIDIpLFxuXHRcdFx0TWF0aC5mbG9vcihsYXJnZXN0UG9zc2libGVSYWRpdXMgLSAocmFkaXVzUmVkdWN0aW9uVG9wICsgcmFkaXVzUmVkdWN0aW9uQm90dG9tKSAvIDIpKTtcblx0XHRtZS5zZXRDZW50ZXJQb2ludChyYWRpdXNSZWR1Y3Rpb25MZWZ0LCByYWRpdXNSZWR1Y3Rpb25SaWdodCwgcmFkaXVzUmVkdWN0aW9uVG9wLCByYWRpdXNSZWR1Y3Rpb25Cb3R0b20pO1xuXHR9LFxuXG5cdHNldENlbnRlclBvaW50OiBmdW5jdGlvbihsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1heFJpZ2h0ID0gbWUud2lkdGggLSByaWdodE1vdmVtZW50IC0gbWUuZHJhd2luZ0FyZWE7XG5cdFx0dmFyIG1heExlZnQgPSBsZWZ0TW92ZW1lbnQgKyBtZS5kcmF3aW5nQXJlYTtcblx0XHR2YXIgbWF4VG9wID0gdG9wTW92ZW1lbnQgKyBtZS5kcmF3aW5nQXJlYTtcblx0XHR2YXIgbWF4Qm90dG9tID0gKG1lLmhlaWdodCAtIG1lLnBhZGRpbmdUb3ApIC0gYm90dG9tTW92ZW1lbnQgLSBtZS5kcmF3aW5nQXJlYTtcblxuXHRcdG1lLnhDZW50ZXIgPSBNYXRoLmZsb29yKCgobWF4TGVmdCArIG1heFJpZ2h0KSAvIDIpICsgbWUubGVmdCk7XG5cdFx0bWUueUNlbnRlciA9IE1hdGguZmxvb3IoKChtYXhUb3AgKyBtYXhCb3R0b20pIC8gMikgKyBtZS50b3AgKyBtZS5wYWRkaW5nVG9wKTtcblx0fSxcblxuXHRnZXRJbmRleEFuZ2xlOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBjaGFydCA9IHRoaXMuY2hhcnQ7XG5cdFx0dmFyIGFuZ2xlTXVsdGlwbGllciA9IDM2MCAvIGNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aDtcblx0XHR2YXIgb3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMgfHwge307XG5cdFx0dmFyIHN0YXJ0QW5nbGUgPSBvcHRpb25zLnN0YXJ0QW5nbGUgfHwgMDtcblxuXHRcdC8vIFN0YXJ0IGZyb20gdGhlIHRvcCBpbnN0ZWFkIG9mIHJpZ2h0LCBzbyByZW1vdmUgYSBxdWFydGVyIG9mIHRoZSBjaXJjbGVcblx0XHR2YXIgYW5nbGUgPSAoaW5kZXggKiBhbmdsZU11bHRpcGxpZXIgKyBzdGFydEFuZ2xlKSAlIDM2MDtcblxuXHRcdHJldHVybiAoYW5nbGUgPCAwID8gYW5nbGUgKyAzNjAgOiBhbmdsZSkgKiBNYXRoLlBJICogMiAvIDM2MDtcblx0fSxcblxuXHRnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIE5hTjtcblx0XHR9XG5cblx0XHQvLyBUYWtlIGludG8gYWNjb3VudCBoYWxmIGZvbnQgc2l6ZSArIHRoZSB5UGFkZGluZyBvZiB0aGUgdG9wIHZhbHVlXG5cdFx0dmFyIHNjYWxpbmdGYWN0b3IgPSBtZS5kcmF3aW5nQXJlYSAvIChtZS5tYXggLSBtZS5taW4pO1xuXHRcdGlmIChtZS5vcHRpb25zLnRpY2tzLnJldmVyc2UpIHtcblx0XHRcdHJldHVybiAobWUubWF4IC0gdmFsdWUpICogc2NhbGluZ0ZhY3Rvcjtcblx0XHR9XG5cdFx0cmV0dXJuICh2YWx1ZSAtIG1lLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuXHR9LFxuXG5cdGdldFBvaW50UG9zaXRpb246IGZ1bmN0aW9uKGluZGV4LCBkaXN0YW5jZUZyb21DZW50ZXIpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aGlzQW5nbGUgPSBtZS5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIChNYXRoLlBJIC8gMik7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IE1hdGguY29zKHRoaXNBbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyBtZS54Q2VudGVyLFxuXHRcdFx0eTogTWF0aC5zaW4odGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIG1lLnlDZW50ZXJcblx0XHR9O1xuXHR9LFxuXG5cdGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZTogZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSkpO1xuXHR9LFxuXG5cdGdldEJhc2VQb3NpdGlvbjogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtaW4gPSBtZS5taW47XG5cdFx0dmFyIG1heCA9IG1lLm1heDtcblxuXHRcdHJldHVybiBtZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXggfHwgMCxcblx0XHRcdG1lLmJlZ2luQXRaZXJvID8gMCA6XG5cdFx0XHRtaW4gPCAwICYmIG1heCA8IDAgPyBtYXggOlxuXHRcdFx0bWluID4gMCAmJiBtYXggPiAwID8gbWluIDpcblx0XHRcdDApO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdHcmlkOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBncmlkTGluZU9wdHMgPSBvcHRzLmdyaWRMaW5lcztcblx0XHR2YXIgYW5nbGVMaW5lT3B0cyA9IG9wdHMuYW5nbGVMaW5lcztcblx0XHR2YXIgbGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQkYyhhbmdsZUxpbmVPcHRzLmxpbmVXaWR0aCwgZ3JpZExpbmVPcHRzLmxpbmVXaWR0aCk7XG5cdFx0dmFyIGxpbmVDb2xvciA9IHZhbHVlT3JEZWZhdWx0JGMoYW5nbGVMaW5lT3B0cy5jb2xvciwgZ3JpZExpbmVPcHRzLmNvbG9yKTtcblx0XHR2YXIgaSwgb2Zmc2V0LCBwb3NpdGlvbjtcblxuXHRcdGlmIChvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcblx0XHRcdGRyYXdQb2ludExhYmVscyhtZSk7XG5cdFx0fVxuXG5cdFx0aWYgKGdyaWRMaW5lT3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRoZWxwZXJzJDEuZWFjaChtZS50aWNrcywgZnVuY3Rpb24obGFiZWwsIGluZGV4KSB7XG5cdFx0XHRcdGlmIChpbmRleCAhPT0gMCkge1xuXHRcdFx0XHRcdG9mZnNldCA9IG1lLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG1lLnRpY2tzQXNOdW1iZXJzW2luZGV4XSk7XG5cdFx0XHRcdFx0ZHJhd1JhZGl1c0xpbmUobWUsIGdyaWRMaW5lT3B0cywgb2Zmc2V0LCBpbmRleCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChhbmdsZUxpbmVPcHRzLmRpc3BsYXkgJiYgbGluZVdpZHRoICYmIGxpbmVDb2xvcikge1xuXHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBsaW5lQ29sb3I7XG5cdFx0XHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0XHRcdGN0eC5zZXRMaW5lRGFzaChyZXNvbHZlJDQoW2FuZ2xlTGluZU9wdHMuYm9yZGVyRGFzaCwgZ3JpZExpbmVPcHRzLmJvcmRlckRhc2gsIFtdXSkpO1xuXHRcdFx0XHRjdHgubGluZURhc2hPZmZzZXQgPSByZXNvbHZlJDQoW2FuZ2xlTGluZU9wdHMuYm9yZGVyRGFzaE9mZnNldCwgZ3JpZExpbmVPcHRzLmJvcmRlckRhc2hPZmZzZXQsIDAuMF0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGkgPSBtZS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRvZmZzZXQgPSBtZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyBtZS5taW4gOiBtZS5tYXgpO1xuXHRcdFx0XHRwb3NpdGlvbiA9IG1lLmdldFBvaW50UG9zaXRpb24oaSwgb2Zmc2V0KTtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKG1lLnhDZW50ZXIsIG1lLnlDZW50ZXIpO1xuXHRcdFx0XHRjdHgubGluZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdMYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpY2tPcHRzID0gb3B0cy50aWNrcztcblxuXHRcdGlmICghdGlja09wdHMuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBzdGFydEFuZ2xlID0gbWUuZ2V0SW5kZXhBbmdsZSgwKTtcblx0XHR2YXIgdGlja0ZvbnQgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KHRpY2tPcHRzKTtcblx0XHR2YXIgdGlja0ZvbnRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JGModGlja09wdHMuZm9udENvbG9yLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHR2YXIgb2Zmc2V0LCB3aWR0aDtcblxuXHRcdGN0eC5zYXZlKCk7XG5cdFx0Y3R4LmZvbnQgPSB0aWNrRm9udC5zdHJpbmc7XG5cdFx0Y3R4LnRyYW5zbGF0ZShtZS54Q2VudGVyLCBtZS55Q2VudGVyKTtcblx0XHRjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuXHRcdGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0XHRoZWxwZXJzJDEuZWFjaChtZS50aWNrcywgZnVuY3Rpb24obGFiZWwsIGluZGV4KSB7XG5cdFx0XHRpZiAoaW5kZXggPT09IDAgJiYgIXRpY2tPcHRzLnJldmVyc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRvZmZzZXQgPSBtZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShtZS50aWNrc0FzTnVtYmVyc1tpbmRleF0pO1xuXG5cdFx0XHRpZiAodGlja09wdHMuc2hvd0xhYmVsQmFja2Ryb3ApIHtcblx0XHRcdFx0d2lkdGggPSBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGlja09wdHMuYmFja2Ryb3BDb2xvcjtcblxuXHRcdFx0XHRjdHguZmlsbFJlY3QoXG5cdFx0XHRcdFx0LXdpZHRoIC8gMiAtIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1gsXG5cdFx0XHRcdFx0LW9mZnNldCAtIHRpY2tGb250LnNpemUgLyAyIC0gdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWSxcblx0XHRcdFx0XHR3aWR0aCArIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1ggKiAyLFxuXHRcdFx0XHRcdHRpY2tGb250LnNpemUgKyB0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmdZICogMlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdGlja0ZvbnRDb2xvcjtcblx0XHRcdGN0eC5maWxsVGV4dChsYWJlbCwgMCwgLW9mZnNldCk7XG5cdFx0fSk7XG5cblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdUaXRsZTogaGVscGVycyQxLm5vb3Bcbn0pO1xuXG4vLyBJTlRFUk5BTDogc3RhdGljIGRlZmF1bHQgb3B0aW9ucywgcmVnaXN0ZXJlZCBpbiBzcmMvaW5kZXguanNcbnZhciBfZGVmYXVsdHMkMyA9IGRlZmF1bHRDb25maWckMztcbnNjYWxlX3JhZGlhbExpbmVhci5fZGVmYXVsdHMgPSBfZGVmYXVsdHMkMztcblxudmFyIGRlcHJlY2F0ZWQkMSA9IGhlbHBlcnMkMS5fZGVwcmVjYXRlZDtcbnZhciByZXNvbHZlJDUgPSBoZWxwZXJzJDEub3B0aW9ucy5yZXNvbHZlO1xudmFyIHZhbHVlT3JEZWZhdWx0JGQgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbi8vIEludGVnZXIgY29uc3RhbnRzIGFyZSBmcm9tIHRoZSBFUzYgc3BlYy5cbnZhciBNSU5fSU5URUdFUiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSIHx8IC05MDA3MTk5MjU0NzQwOTkxO1xudmFyIE1BWF9JTlRFR0VSID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgOTAwNzE5OTI1NDc0MDk5MTtcblxudmFyIElOVEVSVkFMUyA9IHtcblx0bWlsbGlzZWNvbmQ6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogMSxcblx0XHRzdGVwczogMTAwMFxuXHR9LFxuXHRzZWNvbmQ6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogMTAwMCxcblx0XHRzdGVwczogNjBcblx0fSxcblx0bWludXRlOiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDYwMDAwLFxuXHRcdHN0ZXBzOiA2MFxuXHR9LFxuXHRob3VyOiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDM2MDAwMDAsXG5cdFx0c3RlcHM6IDI0XG5cdH0sXG5cdGRheToge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiA4NjQwMDAwMCxcblx0XHRzdGVwczogMzBcblx0fSxcblx0d2Vlazoge1xuXHRcdGNvbW1vbjogZmFsc2UsXG5cdFx0c2l6ZTogNjA0ODAwMDAwLFxuXHRcdHN0ZXBzOiA0XG5cdH0sXG5cdG1vbnRoOiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDIuNjI4ZTksXG5cdFx0c3RlcHM6IDEyXG5cdH0sXG5cdHF1YXJ0ZXI6IHtcblx0XHRjb21tb246IGZhbHNlLFxuXHRcdHNpemU6IDcuODg0ZTksXG5cdFx0c3RlcHM6IDRcblx0fSxcblx0eWVhcjoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAzLjE1NGUxMFxuXHR9XG59O1xuXG52YXIgVU5JVFMgPSBPYmplY3Qua2V5cyhJTlRFUlZBTFMpO1xuXG5mdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuXHRyZXR1cm4gYSAtIGI7XG59XG5cbmZ1bmN0aW9uIGFycmF5VW5pcXVlKGl0ZW1zKSB7XG5cdHZhciBoYXNoID0ge307XG5cdHZhciBvdXQgPSBbXTtcblx0dmFyIGksIGlsZW4sIGl0ZW07XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRpZiAoIWhhc2hbaXRlbV0pIHtcblx0XHRcdGhhc2hbaXRlbV0gPSB0cnVlO1xuXHRcdFx0b3V0LnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gZ2V0TWluKG9wdGlvbnMpIHtcblx0cmV0dXJuIGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpbWUubWluLCBvcHRpb25zLnRpY2tzLm1pbik7XG59XG5cbmZ1bmN0aW9uIGdldE1heChvcHRpb25zKSB7XG5cdHJldHVybiBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQob3B0aW9ucy50aW1lLm1heCwgb3B0aW9ucy50aWNrcy5tYXgpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2Yge3RpbWUsIHBvc30gb2JqZWN0cyB1c2VkIHRvIGludGVycG9sYXRlIGEgc3BlY2lmaWMgYHRpbWVgIG9yIHBvc2l0aW9uXG4gKiAoYHBvc2ApIG9uIHRoZSBzY2FsZSwgYnkgc2VhcmNoaW5nIGVudHJpZXMgYmVmb3JlIGFuZCBhZnRlciB0aGUgcmVxdWVzdGVkIHZhbHVlLiBgcG9zYCBpc1xuICogYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMTogMCBiZWluZyB0aGUgc3RhcnQgb2YgdGhlIHNjYWxlIChsZWZ0IG9yIHRvcCkgYW5kIDEgdGhlIG90aGVyXG4gKiBleHRyZW1pdHkgKGxlZnQgKyB3aWR0aCBvciB0b3AgKyBoZWlnaHQpLiBOb3RlIHRoYXQgaXQgd291bGQgYmUgbW9yZSBvcHRpbWl6ZWQgdG8gZGlyZWN0bHlcbiAqIHN0b3JlIHByZS1jb21wdXRlZCBwaXhlbHMsIGJ1dCB0aGUgc2NhbGUgZGltZW5zaW9ucyBhcmUgbm90IGd1YXJhbnRlZWQgYXQgdGhlIHRpbWUgd2UgbmVlZFxuICogdG8gY3JlYXRlIHRoZSBsb29rdXAgdGFibGUuIFRoZSB0YWJsZSBBTFdBWVMgY29udGFpbnMgYXQgbGVhc3QgdHdvIGl0ZW1zOiBtaW4gYW5kIG1heC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcltdfSB0aW1lc3RhbXBzIC0gdGltZXN0YW1wcyBzb3J0ZWQgZnJvbSBsb3dlc3QgdG8gaGlnaGVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXN0cmlidXRpb24gLSBJZiAnbGluZWFyJywgdGltZXN0YW1wcyB3aWxsIGJlIHNwcmVhZCBsaW5lYXJseSBhbG9uZyB0aGUgbWluXG4gKiBhbmQgbWF4IHJhbmdlLCBzbyBiYXNpY2FsbHksIHRoZSB0YWJsZSB3aWxsIGNvbnRhaW5zIG9ubHkgdHdvIGl0ZW1zOiB7bWluLCAwfSBhbmQge21heCwgMX0uXG4gKiBJZiAnc2VyaWVzJywgdGltZXN0YW1wcyB3aWxsIGJlIHBvc2l0aW9uZWQgYXQgdGhlIHNhbWUgZGlzdGFuY2UgZnJvbSBlYWNoIG90aGVyLiBJbiB0aGlzXG4gKiBjYXNlLCBvbmx5IHRpbWVzdGFtcHMgdGhhdCBicmVhayB0aGUgdGltZSBsaW5lYXJpdHkgYXJlIHJlZ2lzdGVyZWQsIG1lYW5pbmcgdGhhdCBpbiB0aGVcbiAqIGJlc3QgY2FzZSwgYWxsIHRpbWVzdGFtcHMgYXJlIGxpbmVhciwgdGhlIHRhYmxlIGNvbnRhaW5zIG9ubHkgbWluIGFuZCBtYXguXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcywgbWluLCBtYXgsIGRpc3RyaWJ1dGlvbikge1xuXHRpZiAoZGlzdHJpYnV0aW9uID09PSAnbGluZWFyJyB8fCAhdGltZXN0YW1wcy5sZW5ndGgpIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0e3RpbWU6IG1pbiwgcG9zOiAwfSxcblx0XHRcdHt0aW1lOiBtYXgsIHBvczogMX1cblx0XHRdO1xuXHR9XG5cblx0dmFyIHRhYmxlID0gW107XG5cdHZhciBpdGVtcyA9IFttaW5dO1xuXHR2YXIgaSwgaWxlbiwgcHJldiwgY3VyciwgbmV4dDtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRjdXJyID0gdGltZXN0YW1wc1tpXTtcblx0XHRpZiAoY3VyciA+IG1pbiAmJiBjdXJyIDwgbWF4KSB7XG5cdFx0XHRpdGVtcy5wdXNoKGN1cnIpO1xuXHRcdH1cblx0fVxuXG5cdGl0ZW1zLnB1c2gobWF4KTtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bmV4dCA9IGl0ZW1zW2kgKyAxXTtcblx0XHRwcmV2ID0gaXRlbXNbaSAtIDFdO1xuXHRcdGN1cnIgPSBpdGVtc1tpXTtcblxuXHRcdC8vIG9ubHkgYWRkIHBvaW50cyB0aGF0IGJyZWFrcyB0aGUgc2NhbGUgbGluZWFyaXR5XG5cdFx0aWYgKHByZXYgPT09IHVuZGVmaW5lZCB8fCBuZXh0ID09PSB1bmRlZmluZWQgfHwgTWF0aC5yb3VuZCgobmV4dCArIHByZXYpIC8gMikgIT09IGN1cnIpIHtcblx0XHRcdHRhYmxlLnB1c2goe3RpbWU6IGN1cnIsIHBvczogaSAvIChpbGVuIC0gMSl9KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdGFibGU7XG59XG5cbi8vIEBzZWUgYWRhcHRlZCBmcm9tIGh0dHBzOi8vd3d3LmFudWpnYWtoYXIuY29tLzIwMTQvMDMvMDEvYmluYXJ5LXNlYXJjaC1pbi1qYXZhc2NyaXB0L1xuZnVuY3Rpb24gbG9va3VwKHRhYmxlLCBrZXksIHZhbHVlKSB7XG5cdHZhciBsbyA9IDA7XG5cdHZhciBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG5cdHZhciBtaWQsIGkwLCBpMTtcblxuXHR3aGlsZSAobG8gPj0gMCAmJiBsbyA8PSBoaSkge1xuXHRcdG1pZCA9IChsbyArIGhpKSA+PiAxO1xuXHRcdGkwID0gdGFibGVbbWlkIC0gMV0gfHwgbnVsbDtcblx0XHRpMSA9IHRhYmxlW21pZF07XG5cblx0XHRpZiAoIWkwKSB7XG5cdFx0XHQvLyBnaXZlbiB2YWx1ZSBpcyBvdXRzaWRlIHRhYmxlIChiZWZvcmUgZmlyc3QgaXRlbSlcblx0XHRcdHJldHVybiB7bG86IG51bGwsIGhpOiBpMX07XG5cdFx0fSBlbHNlIGlmIChpMVtrZXldIDwgdmFsdWUpIHtcblx0XHRcdGxvID0gbWlkICsgMTtcblx0XHR9IGVsc2UgaWYgKGkwW2tleV0gPiB2YWx1ZSkge1xuXHRcdFx0aGkgPSBtaWQgLSAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4ge2xvOiBpMCwgaGk6IGkxfTtcblx0XHR9XG5cdH1cblxuXHQvLyBnaXZlbiB2YWx1ZSBpcyBvdXRzaWRlIHRhYmxlIChhZnRlciBsYXN0IGl0ZW0pXG5cdHJldHVybiB7bG86IGkxLCBoaTogbnVsbH07XG59XG5cbi8qKlxuICogTGluZWFybHkgaW50ZXJwb2xhdGVzIHRoZSBnaXZlbiBzb3VyY2UgYHZhbHVlYCB1c2luZyB0aGUgdGFibGUgaXRlbXMgYHNrZXlgIHZhbHVlcyBhbmRcbiAqIHJldHVybnMgdGhlIGFzc29jaWF0ZWQgYHRrZXlgIHZhbHVlLiBGb3IgZXhhbXBsZSwgaW50ZXJwb2xhdGUodGFibGUsICd0aW1lJywgNDIsICdwb3MnKVxuICogcmV0dXJucyB0aGUgcG9zaXRpb24gZm9yIGEgdGltZXN0YW1wIGVxdWFsIHRvIDQyLiBJZiB2YWx1ZSBpcyBvdXQgb2YgYm91bmRzLCB2YWx1ZXMgYXRcbiAqIGluZGV4IFswLCAxXSBvciBbbiAtIDEsIG5dIGFyZSB1c2VkIGZvciB0aGUgaW50ZXJwb2xhdGlvbi5cbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUkMSh0YWJsZSwgc2tleSwgc3ZhbCwgdGtleSkge1xuXHR2YXIgcmFuZ2UgPSBsb29rdXAodGFibGUsIHNrZXksIHN2YWwpO1xuXG5cdC8vIE5vdGU6IHRoZSBsb29rdXAgdGFibGUgQUxXQVlTIGNvbnRhaW5zIGF0IGxlYXN0IDIgaXRlbXMgKG1pbiBhbmQgbWF4KVxuXHR2YXIgcHJldiA9ICFyYW5nZS5sbyA/IHRhYmxlWzBdIDogIXJhbmdlLmhpID8gdGFibGVbdGFibGUubGVuZ3RoIC0gMl0gOiByYW5nZS5sbztcblx0dmFyIG5leHQgPSAhcmFuZ2UubG8gPyB0YWJsZVsxXSA6ICFyYW5nZS5oaSA/IHRhYmxlW3RhYmxlLmxlbmd0aCAtIDFdIDogcmFuZ2UuaGk7XG5cblx0dmFyIHNwYW4gPSBuZXh0W3NrZXldIC0gcHJldltza2V5XTtcblx0dmFyIHJhdGlvID0gc3BhbiA/IChzdmFsIC0gcHJldltza2V5XSkgLyBzcGFuIDogMDtcblx0dmFyIG9mZnNldCA9IChuZXh0W3RrZXldIC0gcHJldlt0a2V5XSkgKiByYXRpbztcblxuXHRyZXR1cm4gcHJldlt0a2V5XSArIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gdG9UaW1lc3RhbXAoc2NhbGUsIGlucHV0KSB7XG5cdHZhciBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG5cdHZhciBvcHRpb25zID0gc2NhbGUub3B0aW9ucy50aW1lO1xuXHR2YXIgcGFyc2VyID0gb3B0aW9ucy5wYXJzZXI7XG5cdHZhciBmb3JtYXQgPSBwYXJzZXIgfHwgb3B0aW9ucy5mb3JtYXQ7XG5cdHZhciB2YWx1ZSA9IGlucHV0O1xuXG5cdGlmICh0eXBlb2YgcGFyc2VyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFsdWUgPSBwYXJzZXIodmFsdWUpO1xuXHR9XG5cblx0Ly8gT25seSBwYXJzZSBpZiBpdHMgbm90IGEgdGltZXN0YW1wIGFscmVhZHlcblx0aWYgKCFoZWxwZXJzJDEuaXNGaW5pdGUodmFsdWUpKSB7XG5cdFx0dmFsdWUgPSB0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJ1xuXHRcdFx0PyBhZGFwdGVyLnBhcnNlKHZhbHVlLCBmb3JtYXQpXG5cdFx0XHQ6IGFkYXB0ZXIucGFyc2UodmFsdWUpO1xuXHR9XG5cblx0aWYgKHZhbHVlICE9PSBudWxsKSB7XG5cdFx0cmV0dXJuICt2YWx1ZTtcblx0fVxuXG5cdC8vIExhYmVscyBhcmUgaW4gYW4gaW5jb21wYXRpYmxlIGZvcm1hdCBhbmQgbm8gYHBhcnNlcmAgaGFzIGJlZW4gcHJvdmlkZWQuXG5cdC8vIFRoZSB1c2VyIG1pZ2h0IHN0aWxsIHVzZSB0aGUgZGVwcmVjYXRlZCBgZm9ybWF0YCBvcHRpb24gZm9yIHBhcnNpbmcuXG5cdGlmICghcGFyc2VyICYmIHR5cGVvZiBmb3JtYXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YWx1ZSA9IGZvcm1hdChpbnB1dCk7XG5cblx0XHQvLyBgZm9ybWF0YCBjb3VsZCByZXR1cm4gc29tZXRoaW5nIGVsc2UgdGhhbiBhIHRpbWVzdGFtcCwgaWYgc28sIHBhcnNlIGl0XG5cdFx0aWYgKCFoZWxwZXJzJDEuaXNGaW5pdGUodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZSA9IGFkYXB0ZXIucGFyc2UodmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2Uoc2NhbGUsIGlucHV0KSB7XG5cdGlmIChoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHZhciBvcHRpb25zID0gc2NhbGUub3B0aW9ucy50aW1lO1xuXHR2YXIgdmFsdWUgPSB0b1RpbWVzdGFtcChzY2FsZSwgc2NhbGUuZ2V0UmlnaHRWYWx1ZShpbnB1dCkpO1xuXHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRpZiAob3B0aW9ucy5yb3VuZCkge1xuXHRcdHZhbHVlID0gK3NjYWxlLl9hZGFwdGVyLnN0YXJ0T2YodmFsdWUsIG9wdGlvbnMucm91bmQpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IHdoYXQgdW5pdCByZXN1bHRzIGluIGFuIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhdXRvLWdlbmVyYXRlZCB0aWNrc1xuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKG1pblVuaXQsIG1pbiwgbWF4LCBjYXBhY2l0eSkge1xuXHR2YXIgaWxlbiA9IFVOSVRTLmxlbmd0aDtcblx0dmFyIGksIGludGVydmFsLCBmYWN0b3I7XG5cblx0Zm9yIChpID0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaSA8IGlsZW4gLSAxOyArK2kpIHtcblx0XHRpbnRlcnZhbCA9IElOVEVSVkFMU1tVTklUU1tpXV07XG5cdFx0ZmFjdG9yID0gaW50ZXJ2YWwuc3RlcHMgPyBpbnRlcnZhbC5zdGVwcyA6IE1BWF9JTlRFR0VSO1xuXG5cdFx0aWYgKGludGVydmFsLmNvbW1vbiAmJiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoZmFjdG9yICogaW50ZXJ2YWwuc2l6ZSkpIDw9IGNhcGFjaXR5KSB7XG5cdFx0XHRyZXR1cm4gVU5JVFNbaV07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFVOSVRTW2lsZW4gLSAxXTtcbn1cblxuLyoqXG4gKiBGaWd1cmVzIG91dCB3aGF0IHVuaXQgdG8gZm9ybWF0IGEgc2V0IG9mIHRpY2tzIHdpdGhcbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcoc2NhbGUsIG51bVRpY2tzLCBtaW5Vbml0LCBtaW4sIG1heCkge1xuXHR2YXIgaSwgdW5pdDtcblxuXHRmb3IgKGkgPSBVTklUUy5sZW5ndGggLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSkge1xuXHRcdHVuaXQgPSBVTklUU1tpXTtcblx0XHRpZiAoSU5URVJWQUxTW3VuaXRdLmNvbW1vbiAmJiBzY2FsZS5fYWRhcHRlci5kaWZmKG1heCwgbWluLCB1bml0KSA+PSBudW1UaWNrcyAtIDEpIHtcblx0XHRcdHJldHVybiB1bml0O1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVNYWpvclVuaXQodW5pdCkge1xuXHRmb3IgKHZhciBpID0gVU5JVFMuaW5kZXhPZih1bml0KSArIDEsIGlsZW4gPSBVTklUUy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRpZiAoSU5URVJWQUxTW1VOSVRTW2ldXS5jb21tb24pIHtcblx0XHRcdHJldHVybiBVTklUU1tpXTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXhpbXVtIG9mIGBjYXBhY2l0eWAgdGltZXN0YW1wcyBiZXR3ZWVuIG1pbiBhbmQgbWF4LCByb3VuZGVkIHRvIHRoZVxuICogYG1pbm9yYCB1bml0IHVzaW5nIHRoZSBnaXZlbiBzY2FsZSB0aW1lIGBvcHRpb25zYC5cbiAqIEltcG9ydGFudDogdGhpcyBtZXRob2QgY2FuIHJldHVybiB0aWNrcyBvdXRzaWRlIHRoZSBtaW4gYW5kIG1heCByYW5nZSwgaXQncyB0aGVcbiAqIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBjYWxsaW5nIGNvZGUgdG8gY2xhbXAgdmFsdWVzIGlmIG5lZWRlZC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUoc2NhbGUsIG1pbiwgbWF4LCBjYXBhY2l0eSkge1xuXHR2YXIgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuXHR2YXIgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG5cdHZhciB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcblx0dmFyIG1pbm9yID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1pbiwgbWF4LCBjYXBhY2l0eSk7XG5cdHZhciBzdGVwU2l6ZSA9IHJlc29sdmUkNShbdGltZU9wdHMuc3RlcFNpemUsIHRpbWVPcHRzLnVuaXRTdGVwU2l6ZSwgMV0pO1xuXHR2YXIgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG5cdHZhciBmaXJzdCA9IG1pbjtcblx0dmFyIHRpY2tzID0gW107XG5cdHZhciB0aW1lO1xuXG5cdC8vIEZvciAnd2VlaycgdW5pdCwgaGFuZGxlIHRoZSBmaXJzdCBkYXkgb2Ygd2VlayBvcHRpb25cblx0aWYgKHdlZWtkYXkpIHtcblx0XHRmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsICdpc29XZWVrJywgd2Vla2RheSk7XG5cdH1cblxuXHQvLyBBbGlnbiBmaXJzdCB0aWNrcyBvbiB1bml0XG5cdGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgd2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuXG5cdC8vIFByZXZlbnQgYnJvd3NlciBmcm9tIGZyZWV6aW5nIGluIGNhc2UgdXNlciBvcHRpb25zIHJlcXVlc3QgbWlsbGlvbnMgb2YgbWlsbGlzZWNvbmRzXG5cdGlmIChhZGFwdGVyLmRpZmYobWF4LCBtaW4sIG1pbm9yKSA+IDEwMDAwMCAqIHN0ZXBTaXplKSB7XG5cdFx0dGhyb3cgbWluICsgJyBhbmQgJyArIG1heCArICcgYXJlIHRvbyBmYXIgYXBhcnQgd2l0aCBzdGVwU2l6ZSBvZiAnICsgc3RlcFNpemUgKyAnICcgKyBtaW5vcjtcblx0fVxuXG5cdGZvciAodGltZSA9IGZpcnN0OyB0aW1lIDwgbWF4OyB0aW1lID0gK2FkYXB0ZXIuYWRkKHRpbWUsIHN0ZXBTaXplLCBtaW5vcikpIHtcblx0XHR0aWNrcy5wdXNoKHRpbWUpO1xuXHR9XG5cblx0aWYgKHRpbWUgPT09IG1heCB8fCBvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuXHRcdHRpY2tzLnB1c2godGltZSk7XG5cdH1cblxuXHRyZXR1cm4gdGlja3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3RhcnQgYW5kIGVuZCBvZmZzZXRzIGZyb20gZWRnZXMgaW4gdGhlIGZvcm0gb2Yge3N0YXJ0LCBlbmR9XG4gKiB3aGVyZSBlYWNoIHZhbHVlIGlzIGEgcmVsYXRpdmUgd2lkdGggdG8gdGhlIHNjYWxlIGFuZCByYW5nZXMgYmV0d2VlbiAwIGFuZCAxLlxuICogVGhleSBhZGQgZXh0cmEgbWFyZ2lucyBvbiB0aGUgYm90aCBzaWRlcyBieSBzY2FsaW5nIGRvd24gdGhlIG9yaWdpbmFsIHNjYWxlLlxuICogT2Zmc2V0cyBhcmUgYWRkZWQgd2hlbiB0aGUgYG9mZnNldGAgb3B0aW9uIGlzIHRydWUuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRzKHRhYmxlLCB0aWNrcywgbWluLCBtYXgsIG9wdGlvbnMpIHtcblx0dmFyIHN0YXJ0ID0gMDtcblx0dmFyIGVuZCA9IDA7XG5cdHZhciBmaXJzdCwgbGFzdDtcblxuXHRpZiAob3B0aW9ucy5vZmZzZXQgJiYgdGlja3MubGVuZ3RoKSB7XG5cdFx0Zmlyc3QgPSBpbnRlcnBvbGF0ZSQxKHRhYmxlLCAndGltZScsIHRpY2tzWzBdLCAncG9zJyk7XG5cdFx0aWYgKHRpY2tzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0c3RhcnQgPSAxIC0gZmlyc3Q7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0YXJ0ID0gKGludGVycG9sYXRlJDEodGFibGUsICd0aW1lJywgdGlja3NbMV0sICdwb3MnKSAtIGZpcnN0KSAvIDI7XG5cdFx0fVxuXHRcdGxhc3QgPSBpbnRlcnBvbGF0ZSQxKHRhYmxlLCAndGltZScsIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLCAncG9zJyk7XG5cdFx0aWYgKHRpY2tzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0ZW5kID0gbGFzdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZW5kID0gKGxhc3QgLSBpbnRlcnBvbGF0ZSQxKHRhYmxlLCAndGltZScsIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDJdLCAncG9zJykpIC8gMjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge3N0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIGZhY3RvcjogMSAvIChzdGFydCArIDEgKyBlbmQpfTtcbn1cblxuZnVuY3Rpb24gc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KSB7XG5cdHZhciBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG5cdHZhciBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YodGlja3NbMF0udmFsdWUsIG1ham9yVW5pdCk7XG5cdHZhciBsYXN0ID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWU7XG5cdHZhciBtYWpvciwgaW5kZXg7XG5cblx0Zm9yIChtYWpvciA9IGZpcnN0OyBtYWpvciA8PSBsYXN0OyBtYWpvciA9ICthZGFwdGVyLmFkZChtYWpvciwgMSwgbWFqb3JVbml0KSkge1xuXHRcdGluZGV4ID0gbWFwW21ham9yXTtcblx0XHRpZiAoaW5kZXggPj0gMCkge1xuXHRcdFx0dGlja3NbaW5kZXhdLm1ham9yID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRpY2tzO1xufVxuXG5mdW5jdGlvbiB0aWNrc0Zyb21UaW1lc3RhbXBzKHNjYWxlLCB2YWx1ZXMsIG1ham9yVW5pdCkge1xuXHR2YXIgdGlja3MgPSBbXTtcblx0dmFyIG1hcCA9IHt9O1xuXHR2YXIgaWxlbiA9IHZhbHVlcy5sZW5ndGg7XG5cdHZhciBpLCB2YWx1ZTtcblxuXHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0dmFsdWUgPSB2YWx1ZXNbaV07XG5cdFx0bWFwW3ZhbHVlXSA9IGk7XG5cblx0XHR0aWNrcy5wdXNoKHtcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdG1ham9yOiBmYWxzZVxuXHRcdH0pO1xuXHR9XG5cblx0Ly8gV2Ugc2V0IHRoZSBtYWpvciB0aWNrcyBzZXBhcmF0ZWx5IGZyb20gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSBjYWxsaW5nIHN0YXJ0T2YgZm9yIGV2ZXJ5IHRpY2tcblx0Ly8gaXMgZXhwZW5zaXZlIHdoZW4gdGhlcmUgaXMgYSBsYXJnZSBudW1iZXIgb2YgdGlja3Ncblx0cmV0dXJuIChpbGVuID09PSAwIHx8ICFtYWpvclVuaXQpID8gdGlja3MgOiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpO1xufVxuXG52YXIgZGVmYXVsdENvbmZpZyQ0ID0ge1xuXHRwb3NpdGlvbjogJ2JvdHRvbScsXG5cblx0LyoqXG5cdCAqIERhdGEgZGlzdHJpYnV0aW9uIGFsb25nIHRoZSBzY2FsZTpcblx0ICogLSAnbGluZWFyJzogZGF0YSBhcmUgc3ByZWFkIGFjY29yZGluZyB0byB0aGVpciB0aW1lIChkaXN0YW5jZXMgY2FuIHZhcnkpLFxuXHQgKiAtICdzZXJpZXMnOiBkYXRhIGFyZSBzcHJlYWQgYXQgdGhlIHNhbWUgZGlzdGFuY2UgZnJvbSBlYWNoIG90aGVyLlxuXHQgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvNDUwN1xuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdGRpc3RyaWJ1dGlvbjogJ2xpbmVhcicsXG5cblx0LyoqXG5cdCAqIFNjYWxlIGJvdW5kYXJ5IHN0cmF0ZWd5IChieXBhc3NlZCBieSBtaW4vbWF4IHRpbWUgb3B0aW9ucylcblx0ICogLSBgZGF0YWA6IG1ha2Ugc3VyZSBkYXRhIGFyZSBmdWxseSB2aXNpYmxlLCB0aWNrcyBvdXRzaWRlIGFyZSByZW1vdmVkXG5cdCAqIC0gYHRpY2tzYDogbWFrZSBzdXJlIHRpY2tzIGFyZSBmdWxseSB2aXNpYmxlLCBkYXRhIG91dHNpZGUgYXJlIHRydW5jYXRlZFxuXHQgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvNDU1NlxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdGJvdW5kczogJ2RhdGEnLFxuXG5cdGFkYXB0ZXJzOiB7fSxcblx0dGltZToge1xuXHRcdHBhcnNlcjogZmFsc2UsIC8vIGZhbHNlID09IGEgcGF0dGVybiBzdHJpbmcgZnJvbSBodHRwczovL21vbWVudGpzLmNvbS9kb2NzLyMvcGFyc2luZy9zdHJpbmctZm9ybWF0LyBvciBhIGN1c3RvbSBjYWxsYmFjayB0aGF0IGNvbnZlcnRzIGl0cyBhcmd1bWVudCB0byBhIG1vbWVudFxuXHRcdHVuaXQ6IGZhbHNlLCAvLyBmYWxzZSA9PSBhdXRvbWF0aWMgb3Igb3ZlcnJpZGUgd2l0aCB3ZWVrLCBtb250aCwgeWVhciwgZXRjLlxuXHRcdHJvdW5kOiBmYWxzZSwgLy8gbm9uZSwgb3Igb3ZlcnJpZGUgd2l0aCB3ZWVrLCBtb250aCwgeWVhciwgZXRjLlxuXHRcdGRpc3BsYXlGb3JtYXQ6IGZhbHNlLCAvLyBERVBSRUNBVEVEXG5cdFx0aXNvV2Vla2RheTogZmFsc2UsIC8vIG92ZXJyaWRlIHdlZWsgc3RhcnQgZGF5IC0gc2VlIGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIy9nZXQtc2V0L2lzby13ZWVrZGF5L1xuXHRcdG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG5cdFx0ZGlzcGxheUZvcm1hdHM6IHt9XG5cdH0sXG5cdHRpY2tzOiB7XG5cdFx0YXV0b1NraXA6IGZhbHNlLFxuXG5cdFx0LyoqXG5cdFx0ICogVGlja3MgZ2VuZXJhdGlvbiBpbnB1dCB2YWx1ZXM6XG5cdFx0ICogLSAnYXV0byc6IGdlbmVyYXRlcyBcIm9wdGltYWxcIiB0aWNrcyBiYXNlZCBvbiBzY2FsZSBzaXplIGFuZCB0aW1lIG9wdGlvbnMuXG5cdFx0ICogLSAnZGF0YSc6IGdlbmVyYXRlcyB0aWNrcyBmcm9tIGRhdGEgKGluY2x1ZGluZyBsYWJlbHMgZnJvbSBkYXRhIHt0fHh8eX0gb2JqZWN0cykuXG5cdFx0ICogLSAnbGFiZWxzJzogZ2VuZXJhdGVzIHRpY2tzIGZyb20gdXNlciBnaXZlbiBgZGF0YS5sYWJlbHNgIHZhbHVlcyBPTkxZLlxuXHRcdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTA3XG5cdFx0ICogQHNpbmNlIDIuNy4wXG5cdFx0ICovXG5cdFx0c291cmNlOiAnYXV0bycsXG5cblx0XHRtYWpvcjoge1xuXHRcdFx0ZW5hYmxlZDogZmFsc2Vcblx0XHR9XG5cdH1cbn07XG5cbnZhciBzY2FsZV90aW1lID0gY29yZV9zY2FsZS5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm1lcmdlVGlja3NPcHRpb25zKCk7XG5cdFx0Y29yZV9zY2FsZS5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpbWUgPSBvcHRpb25zLnRpbWUgfHwgKG9wdGlvbnMudGltZSA9IHt9KTtcblx0XHR2YXIgYWRhcHRlciA9IG1lLl9hZGFwdGVyID0gbmV3IGNvcmVfYWRhcHRlcnMuX2RhdGUob3B0aW9ucy5hZGFwdGVycy5kYXRlKTtcblxuXHRcdC8vIERFUFJFQ0FUSU9OUzogb3V0cHV0IGEgbWVzc2FnZSBvbmx5IG9uZSB0aW1lIHBlciB1cGRhdGVcblx0XHRkZXByZWNhdGVkJDEoJ3RpbWUgc2NhbGUnLCB0aW1lLmZvcm1hdCwgJ3RpbWUuZm9ybWF0JywgJ3RpbWUucGFyc2VyJyk7XG5cdFx0ZGVwcmVjYXRlZCQxKCd0aW1lIHNjYWxlJywgdGltZS5taW4sICd0aW1lLm1pbicsICd0aWNrcy5taW4nKTtcblx0XHRkZXByZWNhdGVkJDEoJ3RpbWUgc2NhbGUnLCB0aW1lLm1heCwgJ3RpbWUubWF4JywgJ3RpY2tzLm1heCcpO1xuXG5cdFx0Ly8gQmFja3dhcmQgY29tcGF0aWJpbGl0eTogYmVmb3JlIGludHJvZHVjaW5nIGFkYXB0ZXIsIGBkaXNwbGF5Rm9ybWF0c2Agd2FzXG5cdFx0Ly8gc3VwcG9zZWQgdG8gY29udGFpbiAqYWxsKiB1bml0L3N0cmluZyBwYWlycyBidXQgdGhpcyBjYW4ndCBiZSByZXNvbHZlZFxuXHRcdC8vIHdoZW4gbG9hZGluZyB0aGUgc2NhbGUgKGFkYXB0ZXJzIGFyZSBsb2FkZWQgYWZ0ZXJ3YXJkKSwgc28gbGV0J3MgcG9wdWxhdGVcblx0XHQvLyBtaXNzaW5nIGZvcm1hdHMgb24gdXBkYXRlXG5cdFx0aGVscGVycyQxLm1lcmdlSWYodGltZS5kaXNwbGF5Rm9ybWF0cywgYWRhcHRlci5mb3JtYXRzKCkpO1xuXG5cdFx0cmV0dXJuIGNvcmVfc2NhbGUucHJvdG90eXBlLnVwZGF0ZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0fSxcblxuXHQvKipcblx0ICogQWxsb3dzIGRhdGEgdG8gYmUgcmVmZXJlbmNlZCB2aWEgJ3QnIGF0dHJpYnV0ZVxuXHQgKi9cblx0Z2V0UmlnaHRWYWx1ZTogZnVuY3Rpb24ocmF3VmFsdWUpIHtcblx0XHRpZiAocmF3VmFsdWUgJiYgcmF3VmFsdWUudCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyYXdWYWx1ZSA9IHJhd1ZhbHVlLnQ7XG5cdFx0fVxuXHRcdHJldHVybiBjb3JlX3NjYWxlLnByb3RvdHlwZS5nZXRSaWdodFZhbHVlLmNhbGwodGhpcywgcmF3VmFsdWUpO1xuXHR9LFxuXG5cdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGFkYXB0ZXIgPSBtZS5fYWRhcHRlcjtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5Jztcblx0XHR2YXIgbWluID0gTUFYX0lOVEVHRVI7XG5cdFx0dmFyIG1heCA9IE1JTl9JTlRFR0VSO1xuXHRcdHZhciB0aW1lc3RhbXBzID0gW107XG5cdFx0dmFyIGRhdGFzZXRzID0gW107XG5cdFx0dmFyIGxhYmVscyA9IFtdO1xuXHRcdHZhciBpLCBqLCBpbGVuLCBqbGVuLCBkYXRhLCB0aW1lc3RhbXAsIGxhYmVsc0FkZGVkO1xuXHRcdHZhciBkYXRhTGFiZWxzID0gbWUuX2dldExhYmVscygpO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFMYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRsYWJlbHMucHVzaChwYXJzZShtZSwgZGF0YUxhYmVsc1tpXSkpO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRkYXRhID0gY2hhcnQuZGF0YS5kYXRhc2V0c1tpXS5kYXRhO1xuXG5cdFx0XHRcdC8vIExldCdzIGNvbnNpZGVyIHRoYXQgYWxsIGRhdGEgaGF2ZSB0aGUgc2FtZSBmb3JtYXQuXG5cdFx0XHRcdGlmIChoZWxwZXJzJDEuaXNPYmplY3QoZGF0YVswXSkpIHtcblx0XHRcdFx0XHRkYXRhc2V0c1tpXSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yIChqID0gMCwgamxlbiA9IGRhdGEubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG5cdFx0XHRcdFx0XHR0aW1lc3RhbXAgPSBwYXJzZShtZSwgZGF0YVtqXSk7XG5cdFx0XHRcdFx0XHR0aW1lc3RhbXBzLnB1c2godGltZXN0YW1wKTtcblx0XHRcdFx0XHRcdGRhdGFzZXRzW2ldW2pdID0gdGltZXN0YW1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhc2V0c1tpXSA9IGxhYmVscy5zbGljZSgwKTtcblx0XHRcdFx0XHRpZiAoIWxhYmVsc0FkZGVkKSB7XG5cdFx0XHRcdFx0XHR0aW1lc3RhbXBzID0gdGltZXN0YW1wcy5jb25jYXQobGFiZWxzKTtcblx0XHRcdFx0XHRcdGxhYmVsc0FkZGVkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFzZXRzW2ldID0gW107XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGxhYmVscy5sZW5ndGgpIHtcblx0XHRcdG1pbiA9IE1hdGgubWluKG1pbiwgbGFiZWxzWzBdKTtcblx0XHRcdG1heCA9IE1hdGgubWF4KG1heCwgbGFiZWxzW2xhYmVscy5sZW5ndGggLSAxXSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG5cdFx0XHR0aW1lc3RhbXBzID0gaWxlbiA+IDEgPyBhcnJheVVuaXF1ZSh0aW1lc3RhbXBzKS5zb3J0KHNvcnRlcikgOiB0aW1lc3RhbXBzLnNvcnQoc29ydGVyKTtcblx0XHRcdG1pbiA9IE1hdGgubWluKG1pbiwgdGltZXN0YW1wc1swXSk7XG5cdFx0XHRtYXggPSBNYXRoLm1heChtYXgsIHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXSk7XG5cdFx0fVxuXG5cdFx0bWluID0gcGFyc2UobWUsIGdldE1pbihvcHRpb25zKSkgfHwgbWluO1xuXHRcdG1heCA9IHBhcnNlKG1lLCBnZXRNYXgob3B0aW9ucykpIHx8IG1heDtcblxuXHRcdC8vIEluIGNhc2UgdGhlcmUgaXMgbm8gdmFsaWQgbWluL21heCwgc2V0IGxpbWl0cyBiYXNlZCBvbiB1bml0IHRpbWUgb3B0aW9uXG5cdFx0bWluID0gbWluID09PSBNQVhfSU5URUdFUiA/ICthZGFwdGVyLnN0YXJ0T2YoRGF0ZS5ub3coKSwgdW5pdCkgOiBtaW47XG5cdFx0bWF4ID0gbWF4ID09PSBNSU5fSU5URUdFUiA/ICthZGFwdGVyLmVuZE9mKERhdGUubm93KCksIHVuaXQpICsgMSA6IG1heDtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG1heCBpcyBzdHJpY3RseSBoaWdoZXIgdGhhbiBtaW4gKHJlcXVpcmVkIGJ5IHRoZSBsb29rdXAgdGFibGUpXG5cdFx0bWUubWluID0gTWF0aC5taW4obWluLCBtYXgpO1xuXHRcdG1lLm1heCA9IE1hdGgubWF4KG1pbiArIDEsIG1heCk7XG5cblx0XHQvLyBQUklWQVRFXG5cdFx0bWUuX3RhYmxlID0gW107XG5cdFx0bWUuX3RpbWVzdGFtcHMgPSB7XG5cdFx0XHRkYXRhOiB0aW1lc3RhbXBzLFxuXHRcdFx0ZGF0YXNldHM6IGRhdGFzZXRzLFxuXHRcdFx0bGFiZWxzOiBsYWJlbHNcblx0XHR9O1xuXHR9LFxuXG5cdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1pbiA9IG1lLm1pbjtcblx0XHR2YXIgbWF4ID0gbWUubWF4O1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuXHRcdHZhciB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcblx0XHR2YXIgdGltZXN0YW1wcyA9IG1lLl90aW1lc3RhbXBzO1xuXHRcdHZhciB0aWNrcyA9IFtdO1xuXHRcdHZhciBjYXBhY2l0eSA9IG1lLmdldExhYmVsQ2FwYWNpdHkobWluKTtcblx0XHR2YXIgc291cmNlID0gdGlja09wdHMuc291cmNlO1xuXHRcdHZhciBkaXN0cmlidXRpb24gPSBvcHRpb25zLmRpc3RyaWJ1dGlvbjtcblx0XHR2YXIgaSwgaWxlbiwgdGltZXN0YW1wO1xuXG5cdFx0aWYgKHNvdXJjZSA9PT0gJ2RhdGEnIHx8IChzb3VyY2UgPT09ICdhdXRvJyAmJiBkaXN0cmlidXRpb24gPT09ICdzZXJpZXMnKSkge1xuXHRcdFx0dGltZXN0YW1wcyA9IHRpbWVzdGFtcHMuZGF0YTtcblx0XHR9IGVsc2UgaWYgKHNvdXJjZSA9PT0gJ2xhYmVscycpIHtcblx0XHRcdHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmxhYmVscztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGltZXN0YW1wcyA9IGdlbmVyYXRlKG1lLCBtaW4sIG1heCwgY2FwYWNpdHkpO1xuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuXHRcdFx0bWluID0gdGltZXN0YW1wc1swXTtcblx0XHRcdG1heCA9IHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXTtcblx0XHR9XG5cblx0XHQvLyBFbmZvcmNlIGxpbWl0cyB3aXRoIHVzZXIgbWluL21heCBvcHRpb25zXG5cdFx0bWluID0gcGFyc2UobWUsIGdldE1pbihvcHRpb25zKSkgfHwgbWluO1xuXHRcdG1heCA9IHBhcnNlKG1lLCBnZXRNYXgob3B0aW9ucykpIHx8IG1heDtcblxuXHRcdC8vIFJlbW92ZSB0aWNrcyBvdXRzaWRlIHRoZSBtaW4vbWF4IHJhbmdlXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHR0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2ldO1xuXHRcdFx0aWYgKHRpbWVzdGFtcCA+PSBtaW4gJiYgdGltZXN0YW1wIDw9IG1heCkge1xuXHRcdFx0XHR0aWNrcy5wdXNoKHRpbWVzdGFtcCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWUubWluID0gbWluO1xuXHRcdG1lLm1heCA9IG1heDtcblxuXHRcdC8vIFBSSVZBVEVcblx0XHQvLyBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyByZWxpZXMgb24gdGhlIG51bWJlciBvZiB0aWNrcyBzbyB3ZSBkb24ndCB1c2UgaXQgd2hlblxuXHRcdC8vIGF1dG9Ta2lwIGlzIGVuYWJsZWQgYmVjYXVzZSB3ZSBkb24ndCB5ZXQga25vdyB3aGF0IHRoZSBmaW5hbCBudW1iZXIgb2YgdGlja3Mgd2lsbCBiZVxuXHRcdG1lLl91bml0ID0gdGltZU9wdHMudW5pdCB8fCAodGlja09wdHMuYXV0b1NraXBcblx0XHRcdD8gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtZS5taW4sIG1lLm1heCwgY2FwYWNpdHkpXG5cdFx0XHQ6IGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKG1lLCB0aWNrcy5sZW5ndGgsIHRpbWVPcHRzLm1pblVuaXQsIG1lLm1pbiwgbWUubWF4KSk7XG5cdFx0bWUuX21ham9yVW5pdCA9ICF0aWNrT3B0cy5tYWpvci5lbmFibGVkIHx8IG1lLl91bml0ID09PSAneWVhcicgPyB1bmRlZmluZWRcblx0XHRcdDogZGV0ZXJtaW5lTWFqb3JVbml0KG1lLl91bml0KTtcblx0XHRtZS5fdGFibGUgPSBidWlsZExvb2t1cFRhYmxlKG1lLl90aW1lc3RhbXBzLmRhdGEsIG1pbiwgbWF4LCBkaXN0cmlidXRpb24pO1xuXHRcdG1lLl9vZmZzZXRzID0gY29tcHV0ZU9mZnNldHMobWUuX3RhYmxlLCB0aWNrcywgbWluLCBtYXgsIG9wdGlvbnMpO1xuXG5cdFx0aWYgKHRpY2tPcHRzLnJldmVyc2UpIHtcblx0XHRcdHRpY2tzLnJldmVyc2UoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGlja3NGcm9tVGltZXN0YW1wcyhtZSwgdGlja3MsIG1lLl9tYWpvclVuaXQpO1xuXHR9LFxuXG5cdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBhZGFwdGVyID0gbWUuX2FkYXB0ZXI7XG5cdFx0dmFyIGRhdGEgPSBtZS5jaGFydC5kYXRhO1xuXHRcdHZhciB0aW1lT3B0cyA9IG1lLm9wdGlvbnMudGltZTtcblx0XHR2YXIgbGFiZWwgPSBkYXRhLmxhYmVscyAmJiBpbmRleCA8IGRhdGEubGFiZWxzLmxlbmd0aCA/IGRhdGEubGFiZWxzW2luZGV4XSA6ICcnO1xuXHRcdHZhciB2YWx1ZSA9IGRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XTtcblxuXHRcdGlmIChoZWxwZXJzJDEuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0XHRsYWJlbCA9IG1lLmdldFJpZ2h0VmFsdWUodmFsdWUpO1xuXHRcdH1cblx0XHRpZiAodGltZU9wdHMudG9vbHRpcEZvcm1hdCkge1xuXHRcdFx0cmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHRvVGltZXN0YW1wKG1lLCBsYWJlbCksIHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIGxhYmVsID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIGxhYmVsO1xuXHRcdH1cblx0XHRyZXR1cm4gYWRhcHRlci5mb3JtYXQodG9UaW1lc3RhbXAobWUsIGxhYmVsKSwgdGltZU9wdHMuZGlzcGxheUZvcm1hdHMuZGF0ZXRpbWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBGdW5jdGlvbiB0byBmb3JtYXQgYW4gaW5kaXZpZHVhbCB0aWNrIG1hcmtcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHRpY2tGb3JtYXRGdW5jdGlvbjogZnVuY3Rpb24odGltZSwgaW5kZXgsIHRpY2tzLCBmb3JtYXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBhZGFwdGVyID0gbWUuX2FkYXB0ZXI7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuXHRcdHZhciBtaW5vckZvcm1hdCA9IGZvcm1hdHNbbWUuX3VuaXRdO1xuXHRcdHZhciBtYWpvclVuaXQgPSBtZS5fbWFqb3JVbml0O1xuXHRcdHZhciBtYWpvckZvcm1hdCA9IGZvcm1hdHNbbWFqb3JVbml0XTtcblx0XHR2YXIgdGljayA9IHRpY2tzW2luZGV4XTtcblx0XHR2YXIgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuXHRcdHZhciBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG5cdFx0dmFyIGxhYmVsID0gYWRhcHRlci5mb3JtYXQodGltZSwgZm9ybWF0ID8gZm9ybWF0IDogbWFqb3IgPyBtYWpvckZvcm1hdCA6IG1pbm9yRm9ybWF0KTtcblx0XHR2YXIgbmVzdGVkVGlja09wdHMgPSBtYWpvciA/IHRpY2tPcHRzLm1ham9yIDogdGlja09wdHMubWlub3I7XG5cdFx0dmFyIGZvcm1hdHRlciA9IHJlc29sdmUkNShbXG5cdFx0XHRuZXN0ZWRUaWNrT3B0cy5jYWxsYmFjayxcblx0XHRcdG5lc3RlZFRpY2tPcHRzLnVzZXJDYWxsYmFjayxcblx0XHRcdHRpY2tPcHRzLmNhbGxiYWNrLFxuXHRcdFx0dGlja09wdHMudXNlckNhbGxiYWNrXG5cdFx0XSk7XG5cblx0XHRyZXR1cm4gZm9ybWF0dGVyID8gZm9ybWF0dGVyKGxhYmVsLCBpbmRleCwgdGlja3MpIDogbGFiZWw7XG5cdH0sXG5cblx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKHRpY2tzKSB7XG5cdFx0dmFyIGxhYmVscyA9IFtdO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0bGFiZWxzLnB1c2godGhpcy50aWNrRm9ybWF0RnVuY3Rpb24odGlja3NbaV0udmFsdWUsIGksIHRpY2tzKSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxhYmVscztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGdldFBpeGVsRm9yT2Zmc2V0OiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb2Zmc2V0cyA9IG1lLl9vZmZzZXRzO1xuXHRcdHZhciBwb3MgPSBpbnRlcnBvbGF0ZSQxKG1lLl90YWJsZSwgJ3RpbWUnLCB0aW1lLCAncG9zJyk7XG5cdFx0cmV0dXJuIG1lLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JWYWx1ZTogZnVuY3Rpb24odmFsdWUsIGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aW1lID0gbnVsbDtcblxuXHRcdGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGRhdGFzZXRJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aW1lID0gbWUuX3RpbWVzdGFtcHMuZGF0YXNldHNbZGF0YXNldEluZGV4XVtpbmRleF07XG5cdFx0fVxuXG5cdFx0aWYgKHRpbWUgPT09IG51bGwpIHtcblx0XHRcdHRpbWUgPSBwYXJzZShtZSwgdmFsdWUpO1xuXHRcdH1cblxuXHRcdGlmICh0aW1lICE9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JPZmZzZXQodGltZSk7XG5cdFx0fVxuXHR9LFxuXG5cdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgdGlja3MgPSB0aGlzLmdldFRpY2tzKCk7XG5cdFx0cmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCB0aWNrcy5sZW5ndGggP1xuXHRcdFx0dGhpcy5nZXRQaXhlbEZvck9mZnNldCh0aWNrc1tpbmRleF0udmFsdWUpIDpcblx0XHRcdG51bGw7XG5cdH0sXG5cblx0Z2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvZmZzZXRzID0gbWUuX29mZnNldHM7XG5cdFx0dmFyIHBvcyA9IG1lLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuXHRcdHZhciB0aW1lID0gaW50ZXJwb2xhdGUkMShtZS5fdGFibGUsICdwb3MnLCBwb3MsICd0aW1lJyk7XG5cblx0XHQvLyBERVBSRUNBVElPTiwgd2Ugc2hvdWxkIHJldHVybiB0aW1lIGRpcmVjdGx5XG5cdFx0cmV0dXJuIG1lLl9hZGFwdGVyLl9jcmVhdGUodGltZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0TGFiZWxTaXplOiBmdW5jdGlvbihsYWJlbCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tzT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHRpY2tMYWJlbFdpZHRoID0gbWUuY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aDtcblx0XHR2YXIgYW5nbGUgPSBoZWxwZXJzJDEudG9SYWRpYW5zKG1lLmlzSG9yaXpvbnRhbCgpID8gdGlja3NPcHRzLm1heFJvdGF0aW9uIDogdGlja3NPcHRzLm1pblJvdGF0aW9uKTtcblx0XHR2YXIgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0dmFyIHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuXHRcdHZhciB0aWNrRm9udFNpemUgPSB2YWx1ZU9yRGVmYXVsdCRkKHRpY2tzT3B0cy5mb250U2l6ZSwgY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdEZvbnRTaXplKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR3OiAodGlja0xhYmVsV2lkdGggKiBjb3NSb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogc2luUm90YXRpb24pLFxuXHRcdFx0aDogKHRpY2tMYWJlbFdpZHRoICogc2luUm90YXRpb24pICsgKHRpY2tGb250U2l6ZSAqIGNvc1JvdGF0aW9uKVxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIENydWRlIGFwcHJveGltYXRpb24gb2Ygd2hhdCB0aGUgbGFiZWwgd2lkdGggbWlnaHQgYmVcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGdldExhYmVsV2lkdGg6IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldExhYmVsU2l6ZShsYWJlbCkudztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGdldExhYmVsQ2FwYWNpdHk6IGZ1bmN0aW9uKGV4YW1wbGVUaW1lKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGltZU9wdHMgPSBtZS5vcHRpb25zLnRpbWU7XG5cdFx0dmFyIGRpc3BsYXlGb3JtYXRzID0gdGltZU9wdHMuZGlzcGxheUZvcm1hdHM7XG5cblx0XHQvLyBwaWNrIHRoZSBsb25nZXN0IGZvcm1hdCAobWlsbGlzZWNvbmRzKSBmb3IgZ3Vlc3RpbWF0aW9uXG5cdFx0dmFyIGZvcm1hdCA9IGRpc3BsYXlGb3JtYXRzW3RpbWVPcHRzLnVuaXRdIHx8IGRpc3BsYXlGb3JtYXRzLm1pbGxpc2Vjb25kO1xuXHRcdHZhciBleGFtcGxlTGFiZWwgPSBtZS50aWNrRm9ybWF0RnVuY3Rpb24oZXhhbXBsZVRpbWUsIDAsIHRpY2tzRnJvbVRpbWVzdGFtcHMobWUsIFtleGFtcGxlVGltZV0sIG1lLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuXHRcdHZhciBzaXplID0gbWUuX2dldExhYmVsU2l6ZShleGFtcGxlTGFiZWwpO1xuXHRcdHZhciBjYXBhY2l0eSA9IE1hdGguZmxvb3IobWUuaXNIb3Jpem9udGFsKCkgPyBtZS53aWR0aCAvIHNpemUudyA6IG1lLmhlaWdodCAvIHNpemUuaCk7XG5cblx0XHRpZiAobWUub3B0aW9ucy5vZmZzZXQpIHtcblx0XHRcdGNhcGFjaXR5LS07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhcGFjaXR5ID4gMCA/IGNhcGFjaXR5IDogMTtcblx0fVxufSk7XG5cbi8vIElOVEVSTkFMOiBzdGF0aWMgZGVmYXVsdCBvcHRpb25zLCByZWdpc3RlcmVkIGluIHNyYy9pbmRleC5qc1xudmFyIF9kZWZhdWx0cyQ0ID0gZGVmYXVsdENvbmZpZyQ0O1xuc2NhbGVfdGltZS5fZGVmYXVsdHMgPSBfZGVmYXVsdHMkNDtcblxudmFyIHNjYWxlcyA9IHtcblx0Y2F0ZWdvcnk6IHNjYWxlX2NhdGVnb3J5LFxuXHRsaW5lYXI6IHNjYWxlX2xpbmVhcixcblx0bG9nYXJpdGhtaWM6IHNjYWxlX2xvZ2FyaXRobWljLFxuXHRyYWRpYWxMaW5lYXI6IHNjYWxlX3JhZGlhbExpbmVhcixcblx0dGltZTogc2NhbGVfdGltZVxufTtcblxudmFyIEZPUk1BVFMgPSB7XG5cdGRhdGV0aW1lOiAnTU1NIEQsIFlZWVksIGg6bW06c3MgYScsXG5cdG1pbGxpc2Vjb25kOiAnaDptbTpzcy5TU1MgYScsXG5cdHNlY29uZDogJ2g6bW06c3MgYScsXG5cdG1pbnV0ZTogJ2g6bW0gYScsXG5cdGhvdXI6ICdoQScsXG5cdGRheTogJ01NTSBEJyxcblx0d2VlazogJ2xsJyxcblx0bW9udGg6ICdNTU0gWVlZWScsXG5cdHF1YXJ0ZXI6ICdbUV1RIC0gWVlZWScsXG5cdHllYXI6ICdZWVlZJ1xufTtcblxuY29yZV9hZGFwdGVycy5fZGF0ZS5vdmVycmlkZSh0eXBlb2YgbW9tZW50ID09PSAnZnVuY3Rpb24nID8ge1xuXHRfaWQ6ICdtb21lbnQnLCAvLyBERUJVRyBPTkxZXG5cblx0Zm9ybWF0czogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIEZPUk1BVFM7XG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uKHZhbHVlLCBmb3JtYXQpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJykge1xuXHRcdFx0dmFsdWUgPSBtb21lbnQodmFsdWUsIGZvcm1hdCk7XG5cdFx0fSBlbHNlIGlmICghKHZhbHVlIGluc3RhbmNlb2YgbW9tZW50KSkge1xuXHRcdFx0dmFsdWUgPSBtb21lbnQodmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWUuaXNWYWxpZCgpID8gdmFsdWUudmFsdWVPZigpIDogbnVsbDtcblx0fSxcblxuXHRmb3JtYXQ6IGZ1bmN0aW9uKHRpbWUsIGZvcm1hdCkge1xuXHRcdHJldHVybiBtb21lbnQodGltZSkuZm9ybWF0KGZvcm1hdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbih0aW1lLCBhbW91bnQsIHVuaXQpIHtcblx0XHRyZXR1cm4gbW9tZW50KHRpbWUpLmFkZChhbW91bnQsIHVuaXQpLnZhbHVlT2YoKTtcblx0fSxcblxuXHRkaWZmOiBmdW5jdGlvbihtYXgsIG1pbiwgdW5pdCkge1xuXHRcdHJldHVybiBtb21lbnQobWF4KS5kaWZmKG1vbWVudChtaW4pLCB1bml0KTtcblx0fSxcblxuXHRzdGFydE9mOiBmdW5jdGlvbih0aW1lLCB1bml0LCB3ZWVrZGF5KSB7XG5cdFx0dGltZSA9IG1vbWVudCh0aW1lKTtcblx0XHRpZiAodW5pdCA9PT0gJ2lzb1dlZWsnKSB7XG5cdFx0XHRyZXR1cm4gdGltZS5pc29XZWVrZGF5KHdlZWtkYXkpLnZhbHVlT2YoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRpbWUuc3RhcnRPZih1bml0KS52YWx1ZU9mKCk7XG5cdH0sXG5cblx0ZW5kT2Y6IGZ1bmN0aW9uKHRpbWUsIHVuaXQpIHtcblx0XHRyZXR1cm4gbW9tZW50KHRpbWUpLmVuZE9mKHVuaXQpLnZhbHVlT2YoKTtcblx0fSxcblxuXHQvLyBERVBSRUNBVElPTlNcblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBzY2FsZS5nZXRWYWx1ZUZvclBpeGVsKCkuXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcblx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NyZWF0ZTogZnVuY3Rpb24odGltZSkge1xuXHRcdHJldHVybiBtb21lbnQodGltZSk7XG5cdH0sXG59IDoge30pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0cGx1Z2luczoge1xuXHRcdGZpbGxlcjoge1xuXHRcdFx0cHJvcGFnYXRlOiB0cnVlXG5cdFx0fVxuXHR9XG59KTtcblxudmFyIG1hcHBlcnMgPSB7XG5cdGRhdGFzZXQ6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5maWxsO1xuXHRcdHZhciBjaGFydCA9IHNvdXJjZS5jaGFydDtcblx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGluZGV4KTtcblx0XHR2YXIgdmlzaWJsZSA9IG1ldGEgJiYgY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpbmRleCk7XG5cdFx0dmFyIHBvaW50cyA9ICh2aXNpYmxlICYmIG1ldGEuZGF0YXNldC5fY2hpbGRyZW4pIHx8IFtdO1xuXHRcdHZhciBsZW5ndGggPSBwb2ludHMubGVuZ3RoIHx8IDA7XG5cblx0XHRyZXR1cm4gIWxlbmd0aCA/IG51bGwgOiBmdW5jdGlvbihwb2ludCwgaSkge1xuXHRcdFx0cmV0dXJuIChpIDwgbGVuZ3RoICYmIHBvaW50c1tpXS5fdmlldykgfHwgbnVsbDtcblx0XHR9O1xuXHR9LFxuXG5cdGJvdW5kYXJ5OiBmdW5jdGlvbihzb3VyY2UpIHtcblx0XHR2YXIgYm91bmRhcnkgPSBzb3VyY2UuYm91bmRhcnk7XG5cdFx0dmFyIHggPSBib3VuZGFyeSA/IGJvdW5kYXJ5LnggOiBudWxsO1xuXHRcdHZhciB5ID0gYm91bmRhcnkgPyBib3VuZGFyeS55IDogbnVsbDtcblxuXHRcdGlmIChoZWxwZXJzJDEuaXNBcnJheShib3VuZGFyeSkpIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbihwb2ludCwgaSkge1xuXHRcdFx0XHRyZXR1cm4gYm91bmRhcnlbaV07XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbihwb2ludCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eDogeCA9PT0gbnVsbCA/IHBvaW50LnggOiB4LFxuXHRcdFx0XHR5OiB5ID09PSBudWxsID8gcG9pbnQueSA6IHksXG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cbn07XG5cbi8vIEB0b2RvIGlmIChmaWxsWzBdID09PSAnIycpXG5mdW5jdGlvbiBkZWNvZGVGaWxsKGVsLCBpbmRleCwgY291bnQpIHtcblx0dmFyIG1vZGVsID0gZWwuX21vZGVsIHx8IHt9O1xuXHR2YXIgZmlsbCA9IG1vZGVsLmZpbGw7XG5cdHZhciB0YXJnZXQ7XG5cblx0aWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuXHRcdGZpbGwgPSAhIW1vZGVsLmJhY2tncm91bmRDb2xvcjtcblx0fVxuXG5cdGlmIChmaWxsID09PSBmYWxzZSB8fCBmaWxsID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKGZpbGwgPT09IHRydWUpIHtcblx0XHRyZXR1cm4gJ29yaWdpbic7XG5cdH1cblxuXHR0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwsIDEwKTtcblx0aWYgKGlzRmluaXRlKHRhcmdldCkgJiYgTWF0aC5mbG9vcih0YXJnZXQpID09PSB0YXJnZXQpIHtcblx0XHRpZiAoZmlsbFswXSA9PT0gJy0nIHx8IGZpbGxbMF0gPT09ICcrJykge1xuXHRcdFx0dGFyZ2V0ID0gaW5kZXggKyB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0aWYgKHRhcmdldCA9PT0gaW5kZXggfHwgdGFyZ2V0IDwgMCB8fCB0YXJnZXQgPj0gY291bnQpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblx0c3dpdGNoIChmaWxsKSB7XG5cdC8vIGNvbXBhdGliaWxpdHlcblx0Y2FzZSAnYm90dG9tJzpcblx0XHRyZXR1cm4gJ3N0YXJ0Jztcblx0Y2FzZSAndG9wJzpcblx0XHRyZXR1cm4gJ2VuZCc7XG5cdGNhc2UgJ3plcm8nOlxuXHRcdHJldHVybiAnb3JpZ2luJztcblx0Ly8gc3VwcG9ydGVkIGJvdW5kYXJpZXNcblx0Y2FzZSAnb3JpZ2luJzpcblx0Y2FzZSAnc3RhcnQnOlxuXHRjYXNlICdlbmQnOlxuXHRcdHJldHVybiBmaWxsO1xuXHQvLyBpbnZhbGlkIGZpbGwgdmFsdWVzXG5cdGRlZmF1bHQ6XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpIHtcblx0dmFyIG1vZGVsID0gc291cmNlLmVsLl9tb2RlbCB8fCB7fTtcblx0dmFyIHNjYWxlID0gc291cmNlLmVsLl9zY2FsZSB8fCB7fTtcblx0dmFyIGZpbGwgPSBzb3VyY2UuZmlsbDtcblx0dmFyIHRhcmdldCA9IG51bGw7XG5cdHZhciBob3Jpem9udGFsO1xuXG5cdGlmIChpc0Zpbml0ZShmaWxsKSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gQmFja3dhcmQgY29tcGF0aWJpbGl0eTogdW50aWwgdjMsIHdlIHN0aWxsIG5lZWQgdG8gc3VwcG9ydCBib3VuZGFyeSB2YWx1ZXMgc2V0IG9uXG5cdC8vIHRoZSBtb2RlbCAoc2NhbGVUb3AsIHNjYWxlQm90dG9tIGFuZCBzY2FsZVplcm8pIGJlY2F1c2Ugc29tZSBleHRlcm5hbCBwbHVnaW5zIGFuZFxuXHQvLyBjb250cm9sbGVycyBtaWdodCBzdGlsbCB1c2UgaXQgKGUuZy4gdGhlIFNtaXRoIGNoYXJ0KS5cblxuXHRpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuXHRcdHRhcmdldCA9IG1vZGVsLnNjYWxlQm90dG9tID09PSB1bmRlZmluZWQgPyBzY2FsZS5ib3R0b20gOiBtb2RlbC5zY2FsZUJvdHRvbTtcblx0fSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuXHRcdHRhcmdldCA9IG1vZGVsLnNjYWxlVG9wID09PSB1bmRlZmluZWQgPyBzY2FsZS50b3AgOiBtb2RlbC5zY2FsZVRvcDtcblx0fSBlbHNlIGlmIChtb2RlbC5zY2FsZVplcm8gIT09IHVuZGVmaW5lZCkge1xuXHRcdHRhcmdldCA9IG1vZGVsLnNjYWxlWmVybztcblx0fSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcblx0XHR0YXJnZXQgPSBzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcblx0fVxuXG5cdGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQgIT09IG51bGwpIHtcblx0XHRpZiAodGFyZ2V0LnggIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQueSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdGlmIChoZWxwZXJzJDEuaXNGaW5pdGUodGFyZ2V0KSkge1xuXHRcdFx0aG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eDogaG9yaXpvbnRhbCA/IHRhcmdldCA6IG51bGwsXG5cdFx0XHRcdHk6IGhvcml6b250YWwgPyBudWxsIDogdGFyZ2V0XG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpIHtcblx0dmFyIHNjYWxlID0gc291cmNlLmVsLl9zY2FsZTtcblx0dmFyIG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zO1xuXHR2YXIgbGVuZ3RoID0gc2NhbGUuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoO1xuXHR2YXIgZmlsbCA9IHNvdXJjZS5maWxsO1xuXHR2YXIgdGFyZ2V0ID0gW107XG5cdHZhciBzdGFydCwgZW5kLCBjZW50ZXIsIGksIHBvaW50O1xuXG5cdGlmICghbGVuZ3RoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRzdGFydCA9IG9wdGlvbnMudGlja3MucmV2ZXJzZSA/IHNjYWxlLm1heCA6IHNjYWxlLm1pbjtcblx0ZW5kID0gb3B0aW9ucy50aWNrcy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4O1xuXHRjZW50ZXIgPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCwgc3RhcnQpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRwb2ludCA9IGZpbGwgPT09ICdzdGFydCcgfHwgZmlsbCA9PT0gJ2VuZCdcblx0XHRcdD8gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIGZpbGwgPT09ICdzdGFydCcgPyBzdGFydCA6IGVuZClcblx0XHRcdDogc2NhbGUuZ2V0QmFzZVBvc2l0aW9uKGkpO1xuXHRcdGlmIChvcHRpb25zLmdyaWRMaW5lcy5jaXJjdWxhcikge1xuXHRcdFx0cG9pbnQuY3ggPSBjZW50ZXIueDtcblx0XHRcdHBvaW50LmN5ID0gY2VudGVyLnk7XG5cdFx0XHRwb2ludC5hbmdsZSA9IHNjYWxlLmdldEluZGV4QW5nbGUoaSkgLSBNYXRoLlBJIC8gMjtcblx0XHR9XG5cdFx0dGFyZ2V0LnB1c2gocG9pbnQpO1xuXHR9XG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpIHtcblx0dmFyIHNjYWxlID0gc291cmNlLmVsLl9zY2FsZSB8fCB7fTtcblxuXHRpZiAoc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKSB7XG5cdFx0cmV0dXJuIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSk7XG5cdH1cblx0cmV0dXJuIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGluZGV4LCBwcm9wYWdhdGUpIHtcblx0dmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuXHR2YXIgZmlsbCA9IHNvdXJjZS5maWxsO1xuXHR2YXIgdmlzaXRlZCA9IFtpbmRleF07XG5cdHZhciB0YXJnZXQ7XG5cblx0aWYgKCFwcm9wYWdhdGUpIHtcblx0XHRyZXR1cm4gZmlsbDtcblx0fVxuXG5cdHdoaWxlIChmaWxsICE9PSBmYWxzZSAmJiB2aXNpdGVkLmluZGV4T2YoZmlsbCkgPT09IC0xKSB7XG5cdFx0aWYgKCFpc0Zpbml0ZShmaWxsKSkge1xuXHRcdFx0cmV0dXJuIGZpbGw7XG5cdFx0fVxuXG5cdFx0dGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcblx0XHRpZiAoIXRhcmdldCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICh0YXJnZXQudmlzaWJsZSkge1xuXHRcdFx0cmV0dXJuIGZpbGw7XG5cdFx0fVxuXG5cdFx0dmlzaXRlZC5wdXNoKGZpbGwpO1xuXHRcdGZpbGwgPSB0YXJnZXQuZmlsbDtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwcGVyKHNvdXJjZSkge1xuXHR2YXIgZmlsbCA9IHNvdXJjZS5maWxsO1xuXHR2YXIgdHlwZSA9ICdkYXRhc2V0JztcblxuXHRpZiAoZmlsbCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGlmICghaXNGaW5pdGUoZmlsbCkpIHtcblx0XHR0eXBlID0gJ2JvdW5kYXJ5Jztcblx0fVxuXG5cdHJldHVybiBtYXBwZXJzW3R5cGVdKHNvdXJjZSk7XG59XG5cbmZ1bmN0aW9uIGlzRHJhd2FibGUocG9pbnQpIHtcblx0cmV0dXJuIHBvaW50ICYmICFwb2ludC5za2lwO1xufVxuXG5mdW5jdGlvbiBkcmF3QXJlYShjdHgsIGN1cnZlMCwgY3VydmUxLCBsZW4wLCBsZW4xKSB7XG5cdHZhciBpLCBjeCwgY3ksIHI7XG5cblx0aWYgKCFsZW4wIHx8ICFsZW4xKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gYnVpbGRpbmcgZmlyc3QgYXJlYSBjdXJ2ZSAobm9ybWFsKVxuXHRjdHgubW92ZVRvKGN1cnZlMFswXS54LCBjdXJ2ZTBbMF0ueSk7XG5cdGZvciAoaSA9IDE7IGkgPCBsZW4wOyArK2kpIHtcblx0XHRoZWxwZXJzJDEuY2FudmFzLmxpbmVUbyhjdHgsIGN1cnZlMFtpIC0gMV0sIGN1cnZlMFtpXSk7XG5cdH1cblxuXHRpZiAoY3VydmUxWzBdLmFuZ2xlICE9PSB1bmRlZmluZWQpIHtcblx0XHRjeCA9IGN1cnZlMVswXS5jeDtcblx0XHRjeSA9IGN1cnZlMVswXS5jeTtcblx0XHRyID0gTWF0aC5zcXJ0KE1hdGgucG93KGN1cnZlMVswXS54IC0gY3gsIDIpICsgTWF0aC5wb3coY3VydmUxWzBdLnkgLSBjeSwgMikpO1xuXHRcdGZvciAoaSA9IGxlbjEgLSAxOyBpID4gMDsgLS1pKSB7XG5cdFx0XHRjdHguYXJjKGN4LCBjeSwgciwgY3VydmUxW2ldLmFuZ2xlLCBjdXJ2ZTFbaSAtIDFdLmFuZ2xlLCB0cnVlKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gam9pbmluZyB0aGUgdHdvIGFyZWEgY3VydmVzXG5cdGN0eC5saW5lVG8oY3VydmUxW2xlbjEgLSAxXS54LCBjdXJ2ZTFbbGVuMSAtIDFdLnkpO1xuXG5cdC8vIGJ1aWxkaW5nIG9wcG9zaXRlIGFyZWEgY3VydmUgKHJldmVyc2UpXG5cdGZvciAoaSA9IGxlbjEgLSAxOyBpID4gMDsgLS1pKSB7XG5cdFx0aGVscGVycyQxLmNhbnZhcy5saW5lVG8oY3R4LCBjdXJ2ZTFbaV0sIGN1cnZlMVtpIC0gMV0sIHRydWUpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvRmlsbChjdHgsIHBvaW50cywgbWFwcGVyLCB2aWV3LCBjb2xvciwgbG9vcCkge1xuXHR2YXIgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuXHR2YXIgc3BhbiA9IHZpZXcuc3BhbkdhcHM7XG5cdHZhciBjdXJ2ZTAgPSBbXTtcblx0dmFyIGN1cnZlMSA9IFtdO1xuXHR2YXIgbGVuMCA9IDA7XG5cdHZhciBsZW4xID0gMDtcblx0dmFyIGksIGlsZW4sIGluZGV4LCBwMCwgcDEsIGQwLCBkMSwgbG9vcE9mZnNldDtcblxuXHRjdHguYmVnaW5QYXRoKCk7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0aW5kZXggPSBpICUgY291bnQ7XG5cdFx0cDAgPSBwb2ludHNbaW5kZXhdLl92aWV3O1xuXHRcdHAxID0gbWFwcGVyKHAwLCBpbmRleCwgdmlldyk7XG5cdFx0ZDAgPSBpc0RyYXdhYmxlKHAwKTtcblx0XHRkMSA9IGlzRHJhd2FibGUocDEpO1xuXG5cdFx0aWYgKGxvb3AgJiYgbG9vcE9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGQwKSB7XG5cdFx0XHRsb29wT2Zmc2V0ID0gaSArIDE7XG5cdFx0XHRpbGVuID0gY291bnQgKyBsb29wT2Zmc2V0O1xuXHRcdH1cblxuXHRcdGlmIChkMCAmJiBkMSkge1xuXHRcdFx0bGVuMCA9IGN1cnZlMC5wdXNoKHAwKTtcblx0XHRcdGxlbjEgPSBjdXJ2ZTEucHVzaChwMSk7XG5cdFx0fSBlbHNlIGlmIChsZW4wICYmIGxlbjEpIHtcblx0XHRcdGlmICghc3Bhbikge1xuXHRcdFx0XHRkcmF3QXJlYShjdHgsIGN1cnZlMCwgY3VydmUxLCBsZW4wLCBsZW4xKTtcblx0XHRcdFx0bGVuMCA9IGxlbjEgPSAwO1xuXHRcdFx0XHRjdXJ2ZTAgPSBbXTtcblx0XHRcdFx0Y3VydmUxID0gW107XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoZDApIHtcblx0XHRcdFx0XHRjdXJ2ZTAucHVzaChwMCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGQxKSB7XG5cdFx0XHRcdFx0Y3VydmUxLnB1c2gocDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZHJhd0FyZWEoY3R4LCBjdXJ2ZTAsIGN1cnZlMSwgbGVuMCwgbGVuMSk7XG5cblx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRjdHguZmlsbFN0eWxlID0gY29sb3I7XG5cdGN0eC5maWxsKCk7XG59XG5cbnZhciBwbHVnaW5fZmlsbGVyID0ge1xuXHRpZDogJ2ZpbGxlcicsXG5cblx0YWZ0ZXJEYXRhc2V0c1VwZGF0ZTogZnVuY3Rpb24oY2hhcnQsIG9wdGlvbnMpIHtcblx0XHR2YXIgY291bnQgPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoO1xuXHRcdHZhciBwcm9wYWdhdGUgPSBvcHRpb25zLnByb3BhZ2F0ZTtcblx0XHR2YXIgc291cmNlcyA9IFtdO1xuXHRcdHZhciBtZXRhLCBpLCBlbCwgc291cmNlO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcblx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdGVsID0gbWV0YS5kYXRhc2V0O1xuXHRcdFx0c291cmNlID0gbnVsbDtcblxuXHRcdFx0aWYgKGVsICYmIGVsLl9tb2RlbCAmJiBlbCBpbnN0YW5jZW9mIGVsZW1lbnRzLkxpbmUpIHtcblx0XHRcdFx0c291cmNlID0ge1xuXHRcdFx0XHRcdHZpc2libGU6IGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSksXG5cdFx0XHRcdFx0ZmlsbDogZGVjb2RlRmlsbChlbCwgaSwgY291bnQpLFxuXHRcdFx0XHRcdGNoYXJ0OiBjaGFydCxcblx0XHRcdFx0XHRlbDogZWxcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0bWV0YS4kZmlsbGVyID0gc291cmNlO1xuXHRcdFx0c291cmNlcy5wdXNoKHNvdXJjZSk7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcblx0XHRcdHNvdXJjZSA9IHNvdXJjZXNbaV07XG5cdFx0XHRpZiAoIXNvdXJjZSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c291cmNlLmZpbGwgPSByZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGksIHByb3BhZ2F0ZSk7XG5cdFx0XHRzb3VyY2UuYm91bmRhcnkgPSBjb21wdXRlQm91bmRhcnkoc291cmNlKTtcblx0XHRcdHNvdXJjZS5tYXBwZXIgPSBjcmVhdGVNYXBwZXIoc291cmNlKTtcblx0XHR9XG5cdH0sXG5cblx0YmVmb3JlRGF0YXNldHNEcmF3OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBtZXRhc2V0cyA9IGNoYXJ0Ll9nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG5cdFx0dmFyIGN0eCA9IGNoYXJ0LmN0eDtcblx0XHR2YXIgbWV0YSwgaSwgZWwsIHZpZXcsIHBvaW50cywgbWFwcGVyLCBjb2xvcjtcblxuXHRcdGZvciAoaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdFx0XHRtZXRhID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcblxuXHRcdFx0aWYgKCFtZXRhIHx8ICFtZXRhLnZpc2libGUpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGVsID0gbWV0YS5lbDtcblx0XHRcdHZpZXcgPSBlbC5fdmlldztcblx0XHRcdHBvaW50cyA9IGVsLl9jaGlsZHJlbiB8fCBbXTtcblx0XHRcdG1hcHBlciA9IG1ldGEubWFwcGVyO1xuXHRcdFx0Y29sb3IgPSB2aWV3LmJhY2tncm91bmRDb2xvciB8fCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3I7XG5cblx0XHRcdGlmIChtYXBwZXIgJiYgY29sb3IgJiYgcG9pbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRoZWxwZXJzJDEuY2FudmFzLmNsaXBBcmVhKGN0eCwgY2hhcnQuY2hhcnRBcmVhKTtcblx0XHRcdFx0ZG9GaWxsKGN0eCwgcG9pbnRzLCBtYXBwZXIsIHZpZXcsIGNvbG9yLCBlbC5fbG9vcCk7XG5cdFx0XHRcdGhlbHBlcnMkMS5jYW52YXMudW5jbGlwQXJlYShjdHgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxudmFyIGdldFJ0bEhlbHBlciQxID0gaGVscGVycyQxLnJ0bC5nZXRSdGxBZGFwdGVyO1xudmFyIG5vb3AkMSA9IGhlbHBlcnMkMS5ub29wO1xudmFyIHZhbHVlT3JEZWZhdWx0JGUgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRsZWdlbmQ6IHtcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdHBvc2l0aW9uOiAndG9wJyxcblx0XHRhbGlnbjogJ2NlbnRlcicsXG5cdFx0ZnVsbFdpZHRoOiB0cnVlLFxuXHRcdHJldmVyc2U6IGZhbHNlLFxuXHRcdHdlaWdodDogMTAwMCxcblxuXHRcdC8vIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGhhbmRsZVxuXHRcdG9uQ2xpY2s6IGZ1bmN0aW9uKGUsIGxlZ2VuZEl0ZW0pIHtcblx0XHRcdHZhciBpbmRleCA9IGxlZ2VuZEl0ZW0uZGF0YXNldEluZGV4O1xuXHRcdFx0dmFyIGNpID0gdGhpcy5jaGFydDtcblx0XHRcdHZhciBtZXRhID0gY2kuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuXG5cdFx0XHQvLyBTZWUgY29udHJvbGxlci5pc0RhdGFzZXRWaXNpYmxlIGNvbW1lbnRcblx0XHRcdG1ldGEuaGlkZGVuID0gbWV0YS5oaWRkZW4gPT09IG51bGwgPyAhY2kuZGF0YS5kYXRhc2V0c1tpbmRleF0uaGlkZGVuIDogbnVsbDtcblxuXHRcdFx0Ly8gV2UgaGlkIGEgZGF0YXNldCAuLi4gcmVyZW5kZXIgdGhlIGNoYXJ0XG5cdFx0XHRjaS51cGRhdGUoKTtcblx0XHR9LFxuXG5cdFx0b25Ib3ZlcjogbnVsbCxcblx0XHRvbkxlYXZlOiBudWxsLFxuXG5cdFx0bGFiZWxzOiB7XG5cdFx0XHRib3hXaWR0aDogNDAsXG5cdFx0XHRwYWRkaW5nOiAxMCxcblx0XHRcdC8vIEdlbmVyYXRlcyBsYWJlbHMgc2hvd24gaW4gdGhlIGxlZ2VuZFxuXHRcdFx0Ly8gVmFsaWQgcHJvcGVydGllcyB0byByZXR1cm46XG5cdFx0XHQvLyB0ZXh0IDogdGV4dCB0byBkaXNwbGF5XG5cdFx0XHQvLyBmaWxsU3R5bGUgOiBmaWxsIG9mIGNvbG91cmVkIGJveFxuXHRcdFx0Ly8gc3Ryb2tlU3R5bGU6IHN0cm9rZSBvZiBjb2xvdXJlZCBib3hcblx0XHRcdC8vIGhpZGRlbiA6IGlmIHRoaXMgbGVnZW5kIGl0ZW0gcmVmZXJzIHRvIGEgaGlkZGVuIGl0ZW1cblx0XHRcdC8vIGxpbmVDYXAgOiBjYXAgc3R5bGUgZm9yIGxpbmVcblx0XHRcdC8vIGxpbmVEYXNoXG5cdFx0XHQvLyBsaW5lRGFzaE9mZnNldCA6XG5cdFx0XHQvLyBsaW5lSm9pbiA6XG5cdFx0XHQvLyBsaW5lV2lkdGggOlxuXHRcdFx0Z2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cdFx0XHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucy5sZWdlbmQgfHwge307XG5cdFx0XHRcdHZhciB1c2VQb2ludFN0eWxlID0gb3B0aW9ucy5sYWJlbHMgJiYgb3B0aW9ucy5sYWJlbHMudXNlUG9pbnRTdHlsZTtcblxuXHRcdFx0XHRyZXR1cm4gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcygpLm1hcChmdW5jdGlvbihtZXRhKSB7XG5cdFx0XHRcdFx0dmFyIHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0ZXh0OiBkYXRhc2V0c1ttZXRhLmluZGV4XS5sYWJlbCxcblx0XHRcdFx0XHRcdGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0XHRcdFx0aGlkZGVuOiAhY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShtZXRhLmluZGV4KSxcblx0XHRcdFx0XHRcdGxpbmVDYXA6IHN0eWxlLmJvcmRlckNhcFN0eWxlLFxuXHRcdFx0XHRcdFx0bGluZURhc2g6IHN0eWxlLmJvcmRlckRhc2gsXG5cdFx0XHRcdFx0XHRsaW5lRGFzaE9mZnNldDogc3R5bGUuYm9yZGVyRGFzaE9mZnNldCxcblx0XHRcdFx0XHRcdGxpbmVKb2luOiBzdHlsZS5ib3JkZXJKb2luU3R5bGUsXG5cdFx0XHRcdFx0XHRsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuXHRcdFx0XHRcdFx0c3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRcdFx0cG9pbnRTdHlsZTogc3R5bGUucG9pbnRTdHlsZSxcblx0XHRcdFx0XHRcdHJvdGF0aW9uOiBzdHlsZS5yb3RhdGlvbixcblxuXHRcdFx0XHRcdFx0Ly8gQmVsb3cgaXMgZXh0cmEgZGF0YSB1c2VkIGZvciB0b2dnbGluZyB0aGUgZGF0YXNldHNcblx0XHRcdFx0XHRcdGRhdGFzZXRJbmRleDogbWV0YS5pbmRleFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0sIHRoaXMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRsZWdlbmRDYWxsYmFjazogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG5cdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgaSwgaWxlbiwgbGlzdEl0ZW0sIGxpc3RJdGVtU3BhbjtcblxuXHRcdGxpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsIGNoYXJ0LmlkICsgJy1sZWdlbmQnKTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdGxpc3RJdGVtID0gbGlzdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpKTtcblx0XHRcdGxpc3RJdGVtU3BhbiA9IGxpc3RJdGVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSk7XG5cdFx0XHRsaXN0SXRlbVNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldHNbaV0uYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0aWYgKGRhdGFzZXRzW2ldLmxhYmVsKSB7XG5cdFx0XHRcdGxpc3RJdGVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGFzZXRzW2ldLmxhYmVsKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Qub3V0ZXJIVE1MO1xuXHR9XG59KTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBib3ggd2lkdGggYmFzZWQgb24gdGhlIHVzZVBvaW50U3R5bGUgb3B0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gbGFiZWxvcHRzIC0gdGhlIGxhYmVsIG9wdGlvbnMgb24gdGhlIGxlZ2VuZFxuICogQHBhcmFtIHtudW1iZXJ9IGZvbnRTaXplIC0gdGhlIGxhYmVsIGZvbnQgc2l6ZVxuICogQHJldHVybiB7bnVtYmVyfSB3aWR0aCBvZiB0aGUgY29sb3IgYm94IGFyZWFcbiAqL1xuZnVuY3Rpb24gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSkge1xuXHRyZXR1cm4gbGFiZWxPcHRzLnVzZVBvaW50U3R5bGUgJiYgbGFiZWxPcHRzLmJveFdpZHRoID4gZm9udFNpemUgP1xuXHRcdGZvbnRTaXplIDpcblx0XHRsYWJlbE9wdHMuYm94V2lkdGg7XG59XG5cbi8qKlxuICogSU1QT1JUQU5UOiB0aGlzIGNsYXNzIGlzIGV4cG9zZWQgcHVibGljbHkgYXMgQ2hhcnQuTGVnZW5kLCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHJlcXVpcmVkIVxuICovXG52YXIgTGVnZW5kID0gY29yZV9lbGVtZW50LmV4dGVuZCh7XG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRoZWxwZXJzJDEuZXh0ZW5kKG1lLCBjb25maWcpO1xuXG5cdFx0Ly8gQ29udGFpbnMgaGl0IGJveGVzIGZvciBlYWNoIGRhdGFzZXQgKGluIGRhdGFzZXQgb3JkZXIpXG5cdFx0bWUubGVnZW5kSGl0Qm94ZXMgPSBbXTtcblxuXHRcdC8qKlxuIFx0XHQgKiBAcHJpdmF0ZVxuIFx0XHQgKi9cblx0XHRtZS5faG92ZXJlZEl0ZW0gPSBudWxsO1xuXG5cdFx0Ly8gQXJlIHdlIGluIGRvdWdobnV0IG1vZGUgd2hpY2ggaGFzIGEgZGlmZmVyZW50IGRhdGEgdHlwZVxuXHRcdG1lLmRvdWdobnV0TW9kZSA9IGZhbHNlO1xuXHR9LFxuXG5cdC8vIFRoZXNlIG1ldGhvZHMgYXJlIG9yZGVyZWQgYnkgbGlmZWN5Y2xlLiBVdGlsaXRpZXMgdGhlbiBmb2xsb3cuXG5cdC8vIEFueSBmdW5jdGlvbiBkZWZpbmVkIGhlcmUgaXMgaW5oZXJpdGVkIGJ5IGFsbCBsZWdlbmQgdHlwZXMuXG5cdC8vIEFueSBmdW5jdGlvbiBjYW4gYmUgZXh0ZW5kZWQgYnkgdGhlIGxlZ2VuZCB0eXBlXG5cblx0YmVmb3JlVXBkYXRlOiBub29wJDEsXG5cdHVwZGF0ZTogZnVuY3Rpb24obWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0bWUubWFyZ2lucyA9IG1hcmdpbnM7XG5cblx0XHQvLyBEaW1lbnNpb25zXG5cdFx0bWUuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLnNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5hZnRlclNldERpbWVuc2lvbnMoKTtcblx0XHQvLyBMYWJlbHNcblx0XHRtZS5iZWZvcmVCdWlsZExhYmVscygpO1xuXHRcdG1lLmJ1aWxkTGFiZWxzKCk7XG5cdFx0bWUuYWZ0ZXJCdWlsZExhYmVscygpO1xuXG5cdFx0Ly8gRml0XG5cdFx0bWUuYmVmb3JlRml0KCk7XG5cdFx0bWUuZml0KCk7XG5cdFx0bWUuYWZ0ZXJGaXQoKTtcblx0XHQvL1xuXHRcdG1lLmFmdGVyVXBkYXRlKCk7XG5cblx0XHRyZXR1cm4gbWUubWluU2l6ZTtcblx0fSxcblx0YWZ0ZXJVcGRhdGU6IG5vb3AkMSxcblxuXHQvL1xuXG5cdGJlZm9yZVNldERpbWVuc2lvbnM6IG5vb3AkMSxcblx0c2V0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS53aWR0aCA9IG1lLm1heFdpZHRoO1xuXHRcdFx0bWUubGVmdCA9IDA7XG5cdFx0XHRtZS5yaWdodCA9IG1lLndpZHRoO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5oZWlnaHQgPSBtZS5tYXhIZWlnaHQ7XG5cblx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0bWUudG9wID0gMDtcblx0XHRcdG1lLmJvdHRvbSA9IG1lLmhlaWdodDtcblx0XHR9XG5cblx0XHQvLyBSZXNldCBwYWRkaW5nXG5cdFx0bWUucGFkZGluZ0xlZnQgPSAwO1xuXHRcdG1lLnBhZGRpbmdUb3AgPSAwO1xuXHRcdG1lLnBhZGRpbmdSaWdodCA9IDA7XG5cdFx0bWUucGFkZGluZ0JvdHRvbSA9IDA7XG5cblx0XHQvLyBSZXNldCBtaW5TaXplXG5cdFx0bWUubWluU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiAwLFxuXHRcdFx0aGVpZ2h0OiAwXG5cdFx0fTtcblx0fSxcblx0YWZ0ZXJTZXREaW1lbnNpb25zOiBub29wJDEsXG5cblx0Ly9cblxuXHRiZWZvcmVCdWlsZExhYmVsczogbm9vcCQxLFxuXHRidWlsZExhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGFiZWxPcHRzID0gbWUub3B0aW9ucy5sYWJlbHMgfHwge307XG5cdFx0dmFyIGxlZ2VuZEl0ZW1zID0gaGVscGVycyQxLmNhbGxiYWNrKGxhYmVsT3B0cy5nZW5lcmF0ZUxhYmVscywgW21lLmNoYXJ0XSwgbWUpIHx8IFtdO1xuXG5cdFx0aWYgKGxhYmVsT3B0cy5maWx0ZXIpIHtcblx0XHRcdGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdFx0cmV0dXJuIGxhYmVsT3B0cy5maWx0ZXIoaXRlbSwgbWUuY2hhcnQuZGF0YSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAobWUub3B0aW9ucy5yZXZlcnNlKSB7XG5cdFx0XHRsZWdlbmRJdGVtcy5yZXZlcnNlKCk7XG5cdFx0fVxuXG5cdFx0bWUubGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcztcblx0fSxcblx0YWZ0ZXJCdWlsZExhYmVsczogbm9vcCQxLFxuXG5cdC8vXG5cblx0YmVmb3JlRml0OiBub29wJDEsXG5cdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGxhYmVsT3B0cyA9IG9wdHMubGFiZWxzO1xuXHRcdHZhciBkaXNwbGF5ID0gb3B0cy5kaXNwbGF5O1xuXG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblxuXHRcdHZhciBsYWJlbEZvbnQgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KGxhYmVsT3B0cyk7XG5cdFx0dmFyIGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG5cblx0XHQvLyBSZXNldCBoaXQgYm94ZXNcblx0XHR2YXIgaGl0Ym94ZXMgPSBtZS5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuXG5cdFx0dmFyIG1pblNpemUgPSBtZS5taW5TaXplO1xuXHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblxuXHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdG1pblNpemUud2lkdGggPSBtZS5tYXhXaWR0aDsgLy8gZmlsbCBhbGwgdGhlIHdpZHRoXG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IGRpc3BsYXkgPyAxMCA6IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1pblNpemUud2lkdGggPSBkaXNwbGF5ID8gMTAgOiAwO1xuXHRcdFx0bWluU2l6ZS5oZWlnaHQgPSBtZS5tYXhIZWlnaHQ7IC8vIGZpbGwgYWxsIHRoZSBoZWlnaHRcblx0XHR9XG5cblx0XHQvLyBJbmNyZWFzZSBzaXplcyBoZXJlXG5cdFx0aWYgKCFkaXNwbGF5KSB7XG5cdFx0XHRtZS53aWR0aCA9IG1pblNpemUud2lkdGggPSBtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodCA9IDA7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcblxuXHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdC8vIExhYmVsc1xuXG5cdFx0XHQvLyBXaWR0aCBvZiBlYWNoIGxpbmUgb2YgbGVnZW5kIGJveGVzLiBMYWJlbHMgd3JhcCBvbnRvIG11bHRpcGxlIGxpbmVzIHdoZW4gdGhlcmUgYXJlIHRvbyBtYW55IHRvIGZpdCBvbiBvbmVcblx0XHRcdHZhciBsaW5lV2lkdGhzID0gbWUubGluZVdpZHRocyA9IFswXTtcblx0XHRcdHZhciB0b3RhbEhlaWdodCA9IDA7XG5cblx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0XHRcdGhlbHBlcnMkMS5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHRcdHZhciBib3hXaWR0aCA9IGdldEJveFdpZHRoKGxhYmVsT3B0cywgZm9udFNpemUpO1xuXHRcdFx0XHR2YXIgd2lkdGggPSBib3hXaWR0aCArIChmb250U2l6ZSAvIDIpICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG5cblx0XHRcdFx0aWYgKGkgPT09IDAgfHwgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICsgd2lkdGggKyAyICogbGFiZWxPcHRzLnBhZGRpbmcgPiBtaW5TaXplLndpZHRoKSB7XG5cdFx0XHRcdFx0dG90YWxIZWlnaHQgKz0gZm9udFNpemUgKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0XHRsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gKGkgPiAwID8gMCA6IDEpXSA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdG9yZSB0aGUgaGl0Ym94IHdpZHRoIGFuZCBoZWlnaHQgaGVyZS4gRmluYWwgcG9zaXRpb24gd2lsbCBiZSB1cGRhdGVkIGluIGBkcmF3YFxuXHRcdFx0XHRoaXRib3hlc1tpXSA9IHtcblx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiBmb250U2l6ZVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArPSB3aWR0aCArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0fSk7XG5cblx0XHRcdG1pblNpemUuaGVpZ2h0ICs9IHRvdGFsSGVpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB2UGFkZGluZyA9IGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0dmFyIGNvbHVtbldpZHRocyA9IG1lLmNvbHVtbldpZHRocyA9IFtdO1xuXHRcdFx0dmFyIGNvbHVtbkhlaWdodHMgPSBtZS5jb2x1bW5IZWlnaHRzID0gW107XG5cdFx0XHR2YXIgdG90YWxXaWR0aCA9IGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0dmFyIGN1cnJlbnRDb2xXaWR0aCA9IDA7XG5cdFx0XHR2YXIgY3VycmVudENvbEhlaWdodCA9IDA7XG5cblx0XHRcdGhlbHBlcnMkMS5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHRcdHZhciBib3hXaWR0aCA9IGdldEJveFdpZHRoKGxhYmVsT3B0cywgZm9udFNpemUpO1xuXHRcdFx0XHR2YXIgaXRlbVdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuXG5cdFx0XHRcdC8vIElmIHRvbyB0YWxsLCBnbyB0byBuZXcgY29sdW1uXG5cdFx0XHRcdGlmIChpID4gMCAmJiBjdXJyZW50Q29sSGVpZ2h0ICsgZm9udFNpemUgKyAyICogdlBhZGRpbmcgPiBtaW5TaXplLmhlaWdodCkge1xuXHRcdFx0XHRcdHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHRcdFx0Y29sdW1uV2lkdGhzLnB1c2goY3VycmVudENvbFdpZHRoKTsgLy8gcHJldmlvdXMgY29sdW1uIHdpZHRoXG5cdFx0XHRcdFx0Y29sdW1uSGVpZ2h0cy5wdXNoKGN1cnJlbnRDb2xIZWlnaHQpO1xuXHRcdFx0XHRcdGN1cnJlbnRDb2xXaWR0aCA9IDA7XG5cdFx0XHRcdFx0Y3VycmVudENvbEhlaWdodCA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgbWF4IHdpZHRoXG5cdFx0XHRcdGN1cnJlbnRDb2xXaWR0aCA9IE1hdGgubWF4KGN1cnJlbnRDb2xXaWR0aCwgaXRlbVdpZHRoKTtcblx0XHRcdFx0Y3VycmVudENvbEhlaWdodCArPSBmb250U2l6ZSArIHZQYWRkaW5nO1xuXG5cdFx0XHRcdC8vIFN0b3JlIHRoZSBoaXRib3ggd2lkdGggYW5kIGhlaWdodCBoZXJlLiBGaW5hbCBwb3NpdGlvbiB3aWxsIGJlIHVwZGF0ZWQgaW4gYGRyYXdgXG5cdFx0XHRcdGhpdGJveGVzW2ldID0ge1xuXHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdHdpZHRoOiBpdGVtV2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiBmb250U2l6ZVxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cblx0XHRcdHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoO1xuXHRcdFx0Y29sdW1uV2lkdGhzLnB1c2goY3VycmVudENvbFdpZHRoKTtcblx0XHRcdGNvbHVtbkhlaWdodHMucHVzaChjdXJyZW50Q29sSGVpZ2h0KTtcblx0XHRcdG1pblNpemUud2lkdGggKz0gdG90YWxXaWR0aDtcblx0XHR9XG5cblx0XHRtZS53aWR0aCA9IG1pblNpemUud2lkdGg7XG5cdFx0bWUuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG5cdH0sXG5cdGFmdGVyRml0OiBub29wJDEsXG5cblx0Ly8gU2hhcmVkIE1ldGhvZHNcblx0aXNIb3Jpem9udGFsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAndG9wJyB8fCB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nO1xuXHR9LFxuXG5cdC8vIEFjdHVhbGx5IGRyYXcgdGhlIGxlZ2VuZCBvbiB0aGUgY2FudmFzXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBsYWJlbE9wdHMgPSBvcHRzLmxhYmVscztcblx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblx0XHR2YXIgZGVmYXVsdENvbG9yID0gZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdENvbG9yO1xuXHRcdHZhciBsaW5lRGVmYXVsdCA9IGdsb2JhbERlZmF1bHRzLmVsZW1lbnRzLmxpbmU7XG5cdFx0dmFyIGxlZ2VuZEhlaWdodCA9IG1lLmhlaWdodDtcblx0XHR2YXIgY29sdW1uSGVpZ2h0cyA9IG1lLmNvbHVtbkhlaWdodHM7XG5cdFx0dmFyIGxlZ2VuZFdpZHRoID0gbWUud2lkdGg7XG5cdFx0dmFyIGxpbmVXaWR0aHMgPSBtZS5saW5lV2lkdGhzO1xuXG5cdFx0aWYgKCFvcHRzLmRpc3BsYXkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgcnRsSGVscGVyID0gZ2V0UnRsSGVscGVyJDEob3B0cy5ydGwsIG1lLmxlZnQsIG1lLm1pblNpemUud2lkdGgpO1xuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIGZvbnRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JGUobGFiZWxPcHRzLmZvbnRDb2xvciwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRDb2xvcik7XG5cdFx0dmFyIGxhYmVsRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQobGFiZWxPcHRzKTtcblx0XHR2YXIgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcblx0XHR2YXIgY3Vyc29yO1xuXG5cdFx0Ly8gQ2FudmFzIHNldHVwXG5cdFx0Y3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oJ2xlZnQnKTtcblx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IDAuNTtcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSBmb250Q29sb3I7IC8vIGZvciBzdHJpa2V0aHJvdWdoIGVmZmVjdFxuXHRcdGN0eC5maWxsU3R5bGUgPSBmb250Q29sb3I7IC8vIHJlbmRlciBpbiBjb3JyZWN0IGNvbG91clxuXHRcdGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcblxuXHRcdHZhciBib3hXaWR0aCA9IGdldEJveFdpZHRoKGxhYmVsT3B0cywgZm9udFNpemUpO1xuXHRcdHZhciBoaXRib3hlcyA9IG1lLmxlZ2VuZEhpdEJveGVzO1xuXG5cdFx0Ly8gY3VycmVudCBwb3NpdGlvblxuXHRcdHZhciBkcmF3TGVnZW5kQm94ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0aWYgKGlzTmFOKGJveFdpZHRoKSB8fCBib3hXaWR0aCA8PSAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBjdHggZm9yIHRoZSBib3hcblx0XHRcdGN0eC5zYXZlKCk7XG5cblx0XHRcdHZhciBsaW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0ubGluZVdpZHRoLCBsaW5lRGVmYXVsdC5ib3JkZXJXaWR0aCk7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdmFsdWVPckRlZmF1bHQkZShsZWdlbmRJdGVtLmZpbGxTdHlsZSwgZGVmYXVsdENvbG9yKTtcblx0XHRcdGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQkZShsZWdlbmRJdGVtLmxpbmVDYXAsIGxpbmVEZWZhdWx0LmJvcmRlckNhcFN0eWxlKTtcblx0XHRcdGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0JGUobGVnZW5kSXRlbS5saW5lRGFzaE9mZnNldCwgbGluZURlZmF1bHQuYm9yZGVyRGFzaE9mZnNldCk7XG5cdFx0XHRjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0ubGluZUpvaW4sIGxpbmVEZWZhdWx0LmJvcmRlckpvaW5TdHlsZSk7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdmFsdWVPckRlZmF1bHQkZShsZWdlbmRJdGVtLnN0cm9rZVN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuXG5cdFx0XHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0XHRcdC8vIElFIDkgYW5kIDEwIGRvIG5vdCBzdXBwb3J0IGxpbmUgZGFzaFxuXHRcdFx0XHRjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQkZShsZWdlbmRJdGVtLmxpbmVEYXNoLCBsaW5lRGVmYXVsdC5ib3JkZXJEYXNoKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChsYWJlbE9wdHMgJiYgbGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcblx0XHRcdFx0Ly8gUmVjYWxjdWxhdGUgeCBhbmQgeSBmb3IgZHJhd1BvaW50KCkgYmVjYXVzZSBpdHMgZXhwZWN0aW5nXG5cdFx0XHRcdC8vIHggYW5kIHkgdG8gYmUgY2VudGVyIG9mIGZpZ3VyZSAoaW5zdGVhZCBvZiB0b3AgbGVmdClcblx0XHRcdFx0dmFyIHJhZGl1cyA9IGJveFdpZHRoICogTWF0aC5TUVJUMiAvIDI7XG5cdFx0XHRcdHZhciBjZW50ZXJYID0gcnRsSGVscGVyLnhQbHVzKHgsIGJveFdpZHRoIC8gMik7XG5cdFx0XHRcdHZhciBjZW50ZXJZID0geSArIGZvbnRTaXplIC8gMjtcblxuXHRcdFx0XHQvLyBEcmF3IHBvaW50U3R5bGUgYXMgbGVnZW5kIHN5bWJvbFxuXHRcdFx0XHRoZWxwZXJzJDEuY2FudmFzLmRyYXdQb2ludChjdHgsIGxlZ2VuZEl0ZW0ucG9pbnRTdHlsZSwgcmFkaXVzLCBjZW50ZXJYLCBjZW50ZXJZLCBsZWdlbmRJdGVtLnJvdGF0aW9uKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIERyYXcgYm94IGFzIGxlZ2VuZCBzeW1ib2xcblx0XHRcdFx0Y3R4LmZpbGxSZWN0KHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHgsIGJveFdpZHRoKSwgeSwgYm94V2lkdGgsIGZvbnRTaXplKTtcblx0XHRcdFx0aWYgKGxpbmVXaWR0aCAhPT0gMCkge1xuXHRcdFx0XHRcdGN0eC5zdHJva2VSZWN0KHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHgsIGJveFdpZHRoKSwgeSwgYm94V2lkdGgsIGZvbnRTaXplKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdH07XG5cblx0XHR2YXIgZmlsbFRleHQgPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtLCB0ZXh0V2lkdGgpIHtcblx0XHRcdHZhciBoYWxmRm9udFNpemUgPSBmb250U2l6ZSAvIDI7XG5cdFx0XHR2YXIgeExlZnQgPSBydGxIZWxwZXIueFBsdXMoeCwgYm94V2lkdGggKyBoYWxmRm9udFNpemUpO1xuXHRcdFx0dmFyIHlNaWRkbGUgPSB5ICsgaGFsZkZvbnRTaXplO1xuXG5cdFx0XHRjdHguZmlsbFRleHQobGVnZW5kSXRlbS50ZXh0LCB4TGVmdCwgeU1pZGRsZSk7XG5cblx0XHRcdGlmIChsZWdlbmRJdGVtLmhpZGRlbikge1xuXHRcdFx0XHQvLyBTdHJpa2V0aHJvdWdoIHRoZSB0ZXh0IGlmIGhpZGRlblxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSAyO1xuXHRcdFx0XHRjdHgubW92ZVRvKHhMZWZ0LCB5TWlkZGxlKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhydGxIZWxwZXIueFBsdXMoeExlZnQsIHRleHRXaWR0aCksIHlNaWRkbGUpO1xuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBhbGlnbm1lbnRPZmZzZXQgPSBmdW5jdGlvbihkaW1lbnNpb24sIGJsb2NrU2l6ZSkge1xuXHRcdFx0c3dpdGNoIChvcHRzLmFsaWduKSB7XG5cdFx0XHRjYXNlICdzdGFydCc6XG5cdFx0XHRcdHJldHVybiBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdGNhc2UgJ2VuZCc6XG5cdFx0XHRcdHJldHVybiBkaW1lbnNpb24gLSBibG9ja1NpemU7XG5cdFx0XHRkZWZhdWx0OiAvLyBjZW50ZXJcblx0XHRcdFx0cmV0dXJuIChkaW1lbnNpb24gLSBibG9ja1NpemUgKyBsYWJlbE9wdHMucGFkZGluZykgLyAyO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBIb3Jpem9udGFsXG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdGN1cnNvciA9IHtcblx0XHRcdFx0eDogbWUubGVmdCArIGFsaWdubWVudE9mZnNldChsZWdlbmRXaWR0aCwgbGluZVdpZHRoc1swXSksXG5cdFx0XHRcdHk6IG1lLnRvcCArIGxhYmVsT3B0cy5wYWRkaW5nLFxuXHRcdFx0XHRsaW5lOiAwXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJzb3IgPSB7XG5cdFx0XHRcdHg6IG1lLmxlZnQgKyBsYWJlbE9wdHMucGFkZGluZyxcblx0XHRcdFx0eTogbWUudG9wICsgYWxpZ25tZW50T2Zmc2V0KGxlZ2VuZEhlaWdodCwgY29sdW1uSGVpZ2h0c1swXSksXG5cdFx0XHRcdGxpbmU6IDBcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aGVscGVycyQxLnJ0bC5vdmVycmlkZVRleHREaXJlY3Rpb24obWUuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuXG5cdFx0dmFyIGl0ZW1IZWlnaHQgPSBmb250U2l6ZSArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdGhlbHBlcnMkMS5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHR2YXIgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG5cdFx0XHR2YXIgd2lkdGggPSBib3hXaWR0aCArIChmb250U2l6ZSAvIDIpICsgdGV4dFdpZHRoO1xuXHRcdFx0dmFyIHggPSBjdXJzb3IueDtcblx0XHRcdHZhciB5ID0gY3Vyc29yLnk7XG5cblx0XHRcdHJ0bEhlbHBlci5zZXRXaWR0aChtZS5taW5TaXplLndpZHRoKTtcblxuXHRcdFx0Ly8gVXNlIChtZS5sZWZ0ICsgbWUubWluU2l6ZS53aWR0aCkgYW5kIChtZS50b3AgKyBtZS5taW5TaXplLmhlaWdodClcblx0XHRcdC8vIGluc3RlYWQgb2YgbWUucmlnaHQgYW5kIG1lLmJvdHRvbSBiZWNhdXNlIG1lLndpZHRoIGFuZCBtZS5oZWlnaHRcblx0XHRcdC8vIG1heSBoYXZlIGJlZW4gY2hhbmdlZCBzaW5jZSBtZS5taW5TaXplIHdhcyBjYWxjdWxhdGVkXG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdGlmIChpID4gMCAmJiB4ICsgd2lkdGggKyBsYWJlbE9wdHMucGFkZGluZyA+IG1lLmxlZnQgKyBtZS5taW5TaXplLndpZHRoKSB7XG5cdFx0XHRcdFx0eSA9IGN1cnNvci55ICs9IGl0ZW1IZWlnaHQ7XG5cdFx0XHRcdFx0Y3Vyc29yLmxpbmUrKztcblx0XHRcdFx0XHR4ID0gY3Vyc29yLnggPSBtZS5sZWZ0ICsgYWxpZ25tZW50T2Zmc2V0KGxlZ2VuZFdpZHRoLCBsaW5lV2lkdGhzW2N1cnNvci5saW5lXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoaSA+IDAgJiYgeSArIGl0ZW1IZWlnaHQgPiBtZS50b3AgKyBtZS5taW5TaXplLmhlaWdodCkge1xuXHRcdFx0XHR4ID0gY3Vyc29yLnggPSB4ICsgbWUuY29sdW1uV2lkdGhzW2N1cnNvci5saW5lXSArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0XHRjdXJzb3IubGluZSsrO1xuXHRcdFx0XHR5ID0gY3Vyc29yLnkgPSBtZS50b3AgKyBhbGlnbm1lbnRPZmZzZXQobGVnZW5kSGVpZ2h0LCBjb2x1bW5IZWlnaHRzW2N1cnNvci5saW5lXSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciByZWFsWCA9IHJ0bEhlbHBlci54KHgpO1xuXG5cdFx0XHRkcmF3TGVnZW5kQm94KHJlYWxYLCB5LCBsZWdlbmRJdGVtKTtcblxuXHRcdFx0aGl0Ym94ZXNbaV0ubGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJlYWxYLCBoaXRib3hlc1tpXS53aWR0aCk7XG5cdFx0XHRoaXRib3hlc1tpXS50b3AgPSB5O1xuXG5cdFx0XHQvLyBGaWxsIHRoZSBhY3R1YWwgbGFiZWxcblx0XHRcdGZpbGxUZXh0KHJlYWxYLCB5LCBsZWdlbmRJdGVtLCB0ZXh0V2lkdGgpO1xuXG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdGN1cnNvci54ICs9IHdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJzb3IueSArPSBpdGVtSGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aGVscGVycyQxLnJ0bC5yZXN0b3JlVGV4dERpcmVjdGlvbihtZS5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0TGVnZW5kSXRlbUF0OiBmdW5jdGlvbih4LCB5KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgaSwgaGl0Qm94LCBsaDtcblxuXHRcdGlmICh4ID49IG1lLmxlZnQgJiYgeCA8PSBtZS5yaWdodCAmJiB5ID49IG1lLnRvcCAmJiB5IDw9IG1lLmJvdHRvbSkge1xuXHRcdFx0Ly8gU2VlIGlmIHdlIGFyZSB0b3VjaGluZyBvbmUgb2YgdGhlIGRhdGFzZXQgYm94ZXNcblx0XHRcdGxoID0gbWUubGVnZW5kSGl0Qm94ZXM7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGgubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0aGl0Qm94ID0gbGhbaV07XG5cblx0XHRcdFx0aWYgKHggPj0gaGl0Qm94LmxlZnQgJiYgeCA8PSBoaXRCb3gubGVmdCArIGhpdEJveC53aWR0aCAmJiB5ID49IGhpdEJveC50b3AgJiYgeSA8PSBoaXRCb3gudG9wICsgaGl0Qm94LmhlaWdodCkge1xuXHRcdFx0XHRcdC8vIFRvdWNoaW5nIGFuIGVsZW1lbnRcblx0XHRcdFx0XHRyZXR1cm4gbWUubGVnZW5kSXRlbXNbaV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHQvKipcblx0ICogSGFuZGxlIGFuIGV2ZW50XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7SUV2ZW50fSBldmVudCAtIFRoZSBldmVudCB0byBoYW5kbGVcblx0ICovXG5cdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHR5cGUgPSBlLnR5cGUgPT09ICdtb3VzZXVwJyA/ICdjbGljaycgOiBlLnR5cGU7XG5cdFx0dmFyIGhvdmVyZWRJdGVtO1xuXG5cdFx0aWYgKHR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG5cdFx0XHRpZiAoIW9wdHMub25Ib3ZlciAmJiAhb3B0cy5vbkxlYXZlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdjbGljaycpIHtcblx0XHRcdGlmICghb3B0cy5vbkNsaWNrKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENoYXJ0IGV2ZW50IGFscmVhZHkgaGFzIHJlbGF0aXZlIHBvc2l0aW9uIGluIGl0XG5cdFx0aG92ZXJlZEl0ZW0gPSBtZS5fZ2V0TGVnZW5kSXRlbUF0KGUueCwgZS55KTtcblxuXHRcdGlmICh0eXBlID09PSAnY2xpY2snKSB7XG5cdFx0XHRpZiAoaG92ZXJlZEl0ZW0gJiYgb3B0cy5vbkNsaWNrKSB7XG5cdFx0XHRcdC8vIHVzZSBlLm5hdGl2ZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0b3B0cy5vbkNsaWNrLmNhbGwobWUsIGUubmF0aXZlLCBob3ZlcmVkSXRlbSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChvcHRzLm9uTGVhdmUgJiYgaG92ZXJlZEl0ZW0gIT09IG1lLl9ob3ZlcmVkSXRlbSkge1xuXHRcdFx0XHRpZiAobWUuX2hvdmVyZWRJdGVtKSB7XG5cdFx0XHRcdFx0b3B0cy5vbkxlYXZlLmNhbGwobWUsIGUubmF0aXZlLCBtZS5faG92ZXJlZEl0ZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1lLl9ob3ZlcmVkSXRlbSA9IGhvdmVyZWRJdGVtO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0cy5vbkhvdmVyICYmIGhvdmVyZWRJdGVtKSB7XG5cdFx0XHRcdC8vIHVzZSBlLm5hdGl2ZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0b3B0cy5vbkhvdmVyLmNhbGwobWUsIGUubmF0aXZlLCBob3ZlcmVkSXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKSB7XG5cdHZhciBsZWdlbmQgPSBuZXcgTGVnZW5kKHtcblx0XHRjdHg6IGNoYXJ0LmN0eCxcblx0XHRvcHRpb25zOiBsZWdlbmRPcHRzLFxuXHRcdGNoYXJ0OiBjaGFydFxuXHR9KTtcblxuXHRjb3JlX2xheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIGxlZ2VuZE9wdHMpO1xuXHRjb3JlX2xheW91dHMuYWRkQm94KGNoYXJ0LCBsZWdlbmQpO1xuXHRjaGFydC5sZWdlbmQgPSBsZWdlbmQ7XG59XG5cbnZhciBwbHVnaW5fbGVnZW5kID0ge1xuXHRpZDogJ2xlZ2VuZCcsXG5cblx0LyoqXG5cdCAqIEJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IHNpbmNlIDIuMS41LCB0aGUgbGVnZW5kIGlzIHJlZ2lzdGVyZWQgYXMgYSBwbHVnaW4sIG1ha2luZ1xuXHQgKiBDaGFydC5MZWdlbmQgb2Jzb2xldGUuIFRvIGF2b2lkIGEgYnJlYWtpbmcgY2hhbmdlLCB3ZSBleHBvcnQgdGhlIExlZ2VuZCBhcyBwYXJ0IG9mXG5cdCAqIHRoZSBwbHVnaW4sIHdoaWNoIG9uZSB3aWxsIGJlIHJlLWV4cG9zZWQgaW4gdGhlIGNoYXJ0LmpzIGZpbGUuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvMjY0MFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2VsZW1lbnQ6IExlZ2VuZCxcblxuXHRiZWZvcmVJbml0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsZWdlbmRPcHRzID0gY2hhcnQub3B0aW9ucy5sZWdlbmQ7XG5cblx0XHRpZiAobGVnZW5kT3B0cykge1xuXHRcdFx0Y3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKTtcblx0XHR9XG5cdH0sXG5cblx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsZWdlbmRPcHRzID0gY2hhcnQub3B0aW9ucy5sZWdlbmQ7XG5cdFx0dmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcblxuXHRcdGlmIChsZWdlbmRPcHRzKSB7XG5cdFx0XHRoZWxwZXJzJDEubWVyZ2VJZihsZWdlbmRPcHRzLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5sZWdlbmQpO1xuXG5cdFx0XHRpZiAobGVnZW5kKSB7XG5cdFx0XHRcdGNvcmVfbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgbGVnZW5kT3B0cyk7XG5cdFx0XHRcdGxlZ2VuZC5vcHRpb25zID0gbGVnZW5kT3B0cztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZU5ld0xlZ2VuZEFuZEF0dGFjaChjaGFydCwgbGVnZW5kT3B0cyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChsZWdlbmQpIHtcblx0XHRcdGNvcmVfbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIGxlZ2VuZCk7XG5cdFx0XHRkZWxldGUgY2hhcnQubGVnZW5kO1xuXHRcdH1cblx0fSxcblxuXHRhZnRlckV2ZW50OiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdHZhciBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG5cdFx0aWYgKGxlZ2VuZCkge1xuXHRcdFx0bGVnZW5kLmhhbmRsZUV2ZW50KGUpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIG5vb3AkMiA9IGhlbHBlcnMkMS5ub29wO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0dGl0bGU6IHtcblx0XHRkaXNwbGF5OiBmYWxzZSxcblx0XHRmb250U3R5bGU6ICdib2xkJyxcblx0XHRmdWxsV2lkdGg6IHRydWUsXG5cdFx0cGFkZGluZzogMTAsXG5cdFx0cG9zaXRpb246ICd0b3AnLFxuXHRcdHRleHQ6ICcnLFxuXHRcdHdlaWdodDogMjAwMCAgICAgICAgIC8vIGJ5IGRlZmF1bHQgZ3JlYXRlciB0aGFuIGxlZ2VuZCAoMTAwMCkgdG8gYmUgYWJvdmVcblx0fVxufSk7XG5cbi8qKlxuICogSU1QT1JUQU5UOiB0aGlzIGNsYXNzIGlzIGV4cG9zZWQgcHVibGljbHkgYXMgQ2hhcnQuTGVnZW5kLCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHJlcXVpcmVkIVxuICovXG52YXIgVGl0bGUgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRoZWxwZXJzJDEuZXh0ZW5kKG1lLCBjb25maWcpO1xuXG5cdFx0Ly8gQ29udGFpbnMgaGl0IGJveGVzIGZvciBlYWNoIGRhdGFzZXQgKGluIGRhdGFzZXQgb3JkZXIpXG5cdFx0bWUubGVnZW5kSGl0Qm94ZXMgPSBbXTtcblx0fSxcblxuXHQvLyBUaGVzZSBtZXRob2RzIGFyZSBvcmRlcmVkIGJ5IGxpZmVjeWNsZS4gVXRpbGl0aWVzIHRoZW4gZm9sbG93LlxuXG5cdGJlZm9yZVVwZGF0ZTogbm9vcCQyLFxuXHR1cGRhdGU6IGZ1bmN0aW9uKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0Ly8gVXBkYXRlIExpZmVjeWNsZSAtIFByb2JhYmx5IGRvbid0IHdhbnQgdG8gZXZlciBleHRlbmQgb3Igb3ZlcndyaXRlIHRoaXMgZnVuY3Rpb24gOylcblx0XHRtZS5iZWZvcmVVcGRhdGUoKTtcblxuXHRcdC8vIEFic29yYiB0aGUgbWFzdGVyIG1lYXN1cmVtZW50c1xuXHRcdG1lLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0bWUubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuXHRcdG1lLm1hcmdpbnMgPSBtYXJnaW5zO1xuXG5cdFx0Ly8gRGltZW5zaW9uc1xuXHRcdG1lLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5zZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG5cdFx0Ly8gTGFiZWxzXG5cdFx0bWUuYmVmb3JlQnVpbGRMYWJlbHMoKTtcblx0XHRtZS5idWlsZExhYmVscygpO1xuXHRcdG1lLmFmdGVyQnVpbGRMYWJlbHMoKTtcblxuXHRcdC8vIEZpdFxuXHRcdG1lLmJlZm9yZUZpdCgpO1xuXHRcdG1lLmZpdCgpO1xuXHRcdG1lLmFmdGVyRml0KCk7XG5cdFx0Ly9cblx0XHRtZS5hZnRlclVwZGF0ZSgpO1xuXG5cdFx0cmV0dXJuIG1lLm1pblNpemU7XG5cblx0fSxcblx0YWZ0ZXJVcGRhdGU6IG5vb3AkMixcblxuXHQvL1xuXG5cdGJlZm9yZVNldERpbWVuc2lvbnM6IG5vb3AkMixcblx0c2V0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS53aWR0aCA9IG1lLm1heFdpZHRoO1xuXHRcdFx0bWUubGVmdCA9IDA7XG5cdFx0XHRtZS5yaWdodCA9IG1lLndpZHRoO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5oZWlnaHQgPSBtZS5tYXhIZWlnaHQ7XG5cblx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0bWUudG9wID0gMDtcblx0XHRcdG1lLmJvdHRvbSA9IG1lLmhlaWdodDtcblx0XHR9XG5cblx0XHQvLyBSZXNldCBwYWRkaW5nXG5cdFx0bWUucGFkZGluZ0xlZnQgPSAwO1xuXHRcdG1lLnBhZGRpbmdUb3AgPSAwO1xuXHRcdG1lLnBhZGRpbmdSaWdodCA9IDA7XG5cdFx0bWUucGFkZGluZ0JvdHRvbSA9IDA7XG5cblx0XHQvLyBSZXNldCBtaW5TaXplXG5cdFx0bWUubWluU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiAwLFxuXHRcdFx0aGVpZ2h0OiAwXG5cdFx0fTtcblx0fSxcblx0YWZ0ZXJTZXREaW1lbnNpb25zOiBub29wJDIsXG5cblx0Ly9cblxuXHRiZWZvcmVCdWlsZExhYmVsczogbm9vcCQyLFxuXHRidWlsZExhYmVsczogbm9vcCQyLFxuXHRhZnRlckJ1aWxkTGFiZWxzOiBub29wJDIsXG5cblx0Ly9cblxuXHRiZWZvcmVGaXQ6IG5vb3AkMixcblx0Zml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgbWluU2l6ZSA9IG1lLm1pblNpemUgPSB7fTtcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIGxpbmVDb3VudCwgdGV4dFNpemU7XG5cblx0XHRpZiAoIW9wdHMuZGlzcGxheSkge1xuXHRcdFx0bWUud2lkdGggPSBtaW5TaXplLndpZHRoID0gbWUuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQgPSAwO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGxpbmVDb3VudCA9IGhlbHBlcnMkMS5pc0FycmF5KG9wdHMudGV4dCkgPyBvcHRzLnRleHQubGVuZ3RoIDogMTtcblx0XHR0ZXh0U2l6ZSA9IGxpbmVDb3VudCAqIGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQob3B0cykubGluZUhlaWdodCArIG9wdHMucGFkZGluZyAqIDI7XG5cblx0XHRtZS53aWR0aCA9IG1pblNpemUud2lkdGggPSBpc0hvcml6b250YWwgPyBtZS5tYXhXaWR0aCA6IHRleHRTaXplO1xuXHRcdG1lLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0ID0gaXNIb3Jpem9udGFsID8gdGV4dFNpemUgOiBtZS5tYXhIZWlnaHQ7XG5cdH0sXG5cdGFmdGVyRml0OiBub29wJDIsXG5cblx0Ly8gU2hhcmVkIE1ldGhvZHNcblx0aXNIb3Jpem9udGFsOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9zID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuXHRcdHJldHVybiBwb3MgPT09ICd0b3AnIHx8IHBvcyA9PT0gJ2JvdHRvbSc7XG5cdH0sXG5cblx0Ly8gQWN0dWFsbHkgZHJhdyB0aGUgdGl0bGUgYmxvY2sgb24gdGhlIGNhbnZhc1xuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXG5cdFx0aWYgKCFvcHRzLmRpc3BsYXkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZm9udE9wdHMgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KG9wdHMpO1xuXHRcdHZhciBsaW5lSGVpZ2h0ID0gZm9udE9wdHMubGluZUhlaWdodDtcblx0XHR2YXIgb2Zmc2V0ID0gbGluZUhlaWdodCAvIDIgKyBvcHRzLnBhZGRpbmc7XG5cdFx0dmFyIHJvdGF0aW9uID0gMDtcblx0XHR2YXIgdG9wID0gbWUudG9wO1xuXHRcdHZhciBsZWZ0ID0gbWUubGVmdDtcblx0XHR2YXIgYm90dG9tID0gbWUuYm90dG9tO1xuXHRcdHZhciByaWdodCA9IG1lLnJpZ2h0O1xuXHRcdHZhciBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG5cblx0XHRjdHguZmlsbFN0eWxlID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0KG9wdHMuZm9udENvbG9yLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udENvbG9yKTsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0Y3R4LmZvbnQgPSBmb250T3B0cy5zdHJpbmc7XG5cblx0XHQvLyBIb3Jpem9udGFsXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHR0aXRsZVggPSBsZWZ0ICsgKChyaWdodCAtIGxlZnQpIC8gMik7IC8vIG1pZHBvaW50IG9mIHRoZSB3aWR0aFxuXHRcdFx0dGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuXHRcdFx0bWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRpdGxlWCA9IG9wdHMucG9zaXRpb24gPT09ICdsZWZ0JyA/IGxlZnQgKyBvZmZzZXQgOiByaWdodCAtIG9mZnNldDtcblx0XHRcdHRpdGxlWSA9IHRvcCArICgoYm90dG9tIC0gdG9wKSAvIDIpO1xuXHRcdFx0bWF4V2lkdGggPSBib3R0b20gLSB0b3A7XG5cdFx0XHRyb3RhdGlvbiA9IE1hdGguUEkgKiAob3B0cy5wb3NpdGlvbiA9PT0gJ2xlZnQnID8gLTAuNSA6IDAuNSk7XG5cdFx0fVxuXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHgudHJhbnNsYXRlKHRpdGxlWCwgdGl0bGVZKTtcblx0XHRjdHgucm90YXRlKHJvdGF0aW9uKTtcblx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXG5cdFx0dmFyIHRleHQgPSBvcHRzLnRleHQ7XG5cdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KHRleHQpKSB7XG5cdFx0XHR2YXIgeSA9IDA7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRleHRbaV0sIDAsIHksIG1heFdpZHRoKTtcblx0XHRcdFx0eSArPSBsaW5lSGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdHguZmlsbFRleHQodGV4dCwgMCwgMCwgbWF4V2lkdGgpO1xuXHRcdH1cblxuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdUaXRsZUJsb2NrQW5kQXR0YWNoKGNoYXJ0LCB0aXRsZU9wdHMpIHtcblx0dmFyIHRpdGxlID0gbmV3IFRpdGxlKHtcblx0XHRjdHg6IGNoYXJ0LmN0eCxcblx0XHRvcHRpb25zOiB0aXRsZU9wdHMsXG5cdFx0Y2hhcnQ6IGNoYXJ0XG5cdH0pO1xuXG5cdGNvcmVfbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCB0aXRsZU9wdHMpO1xuXHRjb3JlX2xheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG5cdGNoYXJ0LnRpdGxlQmxvY2sgPSB0aXRsZTtcbn1cblxudmFyIHBsdWdpbl90aXRsZSA9IHtcblx0aWQ6ICd0aXRsZScsXG5cblx0LyoqXG5cdCAqIEJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IHNpbmNlIDIuMS41LCB0aGUgdGl0bGUgaXMgcmVnaXN0ZXJlZCBhcyBhIHBsdWdpbiwgbWFraW5nXG5cdCAqIENoYXJ0LlRpdGxlIG9ic29sZXRlLiBUbyBhdm9pZCBhIGJyZWFraW5nIGNoYW5nZSwgd2UgZXhwb3J0IHRoZSBUaXRsZSBhcyBwYXJ0IG9mXG5cdCAqIHRoZSBwbHVnaW4sIHdoaWNoIG9uZSB3aWxsIGJlIHJlLWV4cG9zZWQgaW4gdGhlIGNoYXJ0LmpzIGZpbGUuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvMjY0MFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2VsZW1lbnQ6IFRpdGxlLFxuXG5cdGJlZm9yZUluaXQ6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIHRpdGxlT3B0cyA9IGNoYXJ0Lm9wdGlvbnMudGl0bGU7XG5cblx0XHRpZiAodGl0bGVPcHRzKSB7XG5cdFx0XHRjcmVhdGVOZXdUaXRsZUJsb2NrQW5kQXR0YWNoKGNoYXJ0LCB0aXRsZU9wdHMpO1xuXHRcdH1cblx0fSxcblxuXHRiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIHRpdGxlT3B0cyA9IGNoYXJ0Lm9wdGlvbnMudGl0bGU7XG5cdFx0dmFyIHRpdGxlQmxvY2sgPSBjaGFydC50aXRsZUJsb2NrO1xuXG5cdFx0aWYgKHRpdGxlT3B0cykge1xuXHRcdFx0aGVscGVycyQxLm1lcmdlSWYodGl0bGVPcHRzLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC50aXRsZSk7XG5cblx0XHRcdGlmICh0aXRsZUJsb2NrKSB7XG5cdFx0XHRcdGNvcmVfbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlQmxvY2ssIHRpdGxlT3B0cyk7XG5cdFx0XHRcdHRpdGxlQmxvY2sub3B0aW9ucyA9IHRpdGxlT3B0cztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0aXRsZUJsb2NrKSB7XG5cdFx0XHRjb3JlX2xheW91dHMucmVtb3ZlQm94KGNoYXJ0LCB0aXRsZUJsb2NrKTtcblx0XHRcdGRlbGV0ZSBjaGFydC50aXRsZUJsb2NrO1xuXHRcdH1cblx0fVxufTtcblxudmFyIHBsdWdpbnMgPSB7fTtcbnZhciBmaWxsZXIgPSBwbHVnaW5fZmlsbGVyO1xudmFyIGxlZ2VuZCA9IHBsdWdpbl9sZWdlbmQ7XG52YXIgdGl0bGUgPSBwbHVnaW5fdGl0bGU7XG5wbHVnaW5zLmZpbGxlciA9IGZpbGxlcjtcbnBsdWdpbnMubGVnZW5kID0gbGVnZW5kO1xucGx1Z2lucy50aXRsZSA9IHRpdGxlO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnRcbiAqL1xuXG5cbmNvcmVfY29udHJvbGxlci5oZWxwZXJzID0gaGVscGVycyQxO1xuXG4vLyBAdG9kbyBkaXNwYXRjaCB0aGVzZSBoZWxwZXJzIGludG8gYXBwcm9wcmlhdGVkIGhlbHBlcnMvaGVscGVycy4qIGZpbGUgYW5kIHdyaXRlIHVuaXQgdGVzdHMhXG5jb3JlX2hlbHBlcnMoKTtcblxuY29yZV9jb250cm9sbGVyLl9hZGFwdGVycyA9IGNvcmVfYWRhcHRlcnM7XG5jb3JlX2NvbnRyb2xsZXIuQW5pbWF0aW9uID0gY29yZV9hbmltYXRpb247XG5jb3JlX2NvbnRyb2xsZXIuYW5pbWF0aW9uU2VydmljZSA9IGNvcmVfYW5pbWF0aW9ucztcbmNvcmVfY29udHJvbGxlci5jb250cm9sbGVycyA9IGNvbnRyb2xsZXJzO1xuY29yZV9jb250cm9sbGVyLkRhdGFzZXRDb250cm9sbGVyID0gY29yZV9kYXRhc2V0Q29udHJvbGxlcjtcbmNvcmVfY29udHJvbGxlci5kZWZhdWx0cyA9IGNvcmVfZGVmYXVsdHM7XG5jb3JlX2NvbnRyb2xsZXIuRWxlbWVudCA9IGNvcmVfZWxlbWVudDtcbmNvcmVfY29udHJvbGxlci5lbGVtZW50cyA9IGVsZW1lbnRzO1xuY29yZV9jb250cm9sbGVyLkludGVyYWN0aW9uID0gY29yZV9pbnRlcmFjdGlvbjtcbmNvcmVfY29udHJvbGxlci5sYXlvdXRzID0gY29yZV9sYXlvdXRzO1xuY29yZV9jb250cm9sbGVyLnBsYXRmb3JtID0gcGxhdGZvcm07XG5jb3JlX2NvbnRyb2xsZXIucGx1Z2lucyA9IGNvcmVfcGx1Z2lucztcbmNvcmVfY29udHJvbGxlci5TY2FsZSA9IGNvcmVfc2NhbGU7XG5jb3JlX2NvbnRyb2xsZXIuc2NhbGVTZXJ2aWNlID0gY29yZV9zY2FsZVNlcnZpY2U7XG5jb3JlX2NvbnRyb2xsZXIuVGlja3MgPSBjb3JlX3RpY2tzO1xuY29yZV9jb250cm9sbGVyLlRvb2x0aXAgPSBjb3JlX3Rvb2x0aXA7XG5cbi8vIFJlZ2lzdGVyIGJ1aWx0LWluIHNjYWxlc1xuXG5jb3JlX2NvbnRyb2xsZXIuaGVscGVycy5lYWNoKHNjYWxlcywgZnVuY3Rpb24oc2NhbGUsIHR5cGUpIHtcblx0Y29yZV9jb250cm9sbGVyLnNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZSh0eXBlLCBzY2FsZSwgc2NhbGUuX2RlZmF1bHRzKTtcbn0pO1xuXG4vLyBMb2FkIHRvIHJlZ2lzdGVyIGJ1aWx0LWluIGFkYXB0ZXJzIChhcyBzaWRlIGVmZmVjdHMpXG5cblxuLy8gTG9hZGluZyBidWlsdC1pbiBwbHVnaW5zXG5cbmZvciAodmFyIGsgaW4gcGx1Z2lucykge1xuXHRpZiAocGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShrKSkge1xuXHRcdGNvcmVfY29udHJvbGxlci5wbHVnaW5zLnJlZ2lzdGVyKHBsdWdpbnNba10pO1xuXHR9XG59XG5cbmNvcmVfY29udHJvbGxlci5wbGF0Zm9ybS5pbml0aWFsaXplKCk7XG5cbnZhciBzcmMgPSBjb3JlX2NvbnRyb2xsZXI7XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0d2luZG93LkNoYXJ0ID0gY29yZV9jb250cm9sbGVyO1xufVxuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlXG4gKiBAbmFtZXNwYWNlIENoYXJ0LkNoYXJ0XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuQ2hhcnQgPSBjb3JlX2NvbnRyb2xsZXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZVxuICogQG5hbWVzcGFjZSBDaGFydC5MZWdlbmRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi4xLjVcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmNvcmVfY29udHJvbGxlci5MZWdlbmQgPSBwbHVnaW5zLmxlZ2VuZC5fZWxlbWVudDtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlXG4gKiBAbmFtZXNwYWNlIENoYXJ0LlRpdGxlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuMS41XG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuVGl0bGUgPSBwbHVnaW5zLnRpdGxlLl9lbGVtZW50O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQucGx1Z2lucyBpbnN0ZWFkXG4gKiBAbmFtZXNwYWNlIENoYXJ0LnBsdWdpblNlcnZpY2VcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi4xLjVcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmNvcmVfY29udHJvbGxlci5wbHVnaW5TZXJ2aWNlID0gY29yZV9jb250cm9sbGVyLnBsdWdpbnM7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGluaGVyaXRpbmcgZnJvbSBDaGFydC5QbHVnaW5nQmFzZSBoYXMgbm9cbiAqIGVmZmVjdCwgaW5zdGVhZCBzaW1wbHkgY3JlYXRlL3JlZ2lzdGVyIHBsdWdpbnMgdmlhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqIEBpbnRlcmZhY2UgQ2hhcnQuUGx1Z2luQmFzZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjUuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLlBsdWdpbkJhc2UgPSBjb3JlX2NvbnRyb2xsZXIuRWxlbWVudC5leHRlbmQoe30pO1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5jYW52YXMgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuY2FudmFzSGVscGVyc1xuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLmNhbnZhc0hlbHBlcnMgPSBjb3JlX2NvbnRyb2xsZXIuaGVscGVycy5jYW52YXM7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5sYXlvdXRzIGluc3RlYWQuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmxheW91dFNlcnZpY2VcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjNcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmNvcmVfY29udHJvbGxlci5sYXlvdXRTZXJ2aWNlID0gY29yZV9jb250cm9sbGVyLmxheW91dHM7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZS5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuTGluZWFyU2NhbGVCYXNlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLkxpbmVhclNjYWxlQmFzZSA9IHNjYWxlX2xpbmVhcmJhc2U7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGluc3RlYWQgd2Ugc2hvdWxkIGNyZWF0ZSBhIG5ldyBDaGFydFxuICogYnkgc2V0dGluZyB0aGUgdHlwZSBpbiB0aGUgY29uZmlnIChgbmV3IENoYXJ0KGlkLCB7dHlwZTogJ3tjaGFydC10eXBlfSd9YCkuXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKi9cbmNvcmVfY29udHJvbGxlci5oZWxwZXJzLmVhY2goXG5cdFtcblx0XHQnQmFyJyxcblx0XHQnQnViYmxlJyxcblx0XHQnRG91Z2hudXQnLFxuXHRcdCdMaW5lJyxcblx0XHQnUG9sYXJBcmVhJyxcblx0XHQnUmFkYXInLFxuXHRcdCdTY2F0dGVyJ1xuXHRdLFxuXHRmdW5jdGlvbihrbGFzcykge1xuXHRcdGNvcmVfY29udHJvbGxlcltrbGFzc10gPSBmdW5jdGlvbihjdHgsIGNmZykge1xuXHRcdFx0cmV0dXJuIG5ldyBjb3JlX2NvbnRyb2xsZXIoY3R4LCBjb3JlX2NvbnRyb2xsZXIuaGVscGVycy5tZXJnZShjZmcgfHwge30sIHtcblx0XHRcdFx0dHlwZToga2xhc3MuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBrbGFzcy5zbGljZSgxKVxuXHRcdFx0fSkpO1xuXHRcdH07XG5cdH1cbik7XG5cbnJldHVybiBzcmM7XG5cbn0pKSk7XG4iLCIvKiFcbiAqIEdsaWRlLmpzIHYzLjQuMVxuICogKGMpIDIwMTMtMjAxOSBKxJlkcnplaiBDaGHFgnViZWsgPGplZHJ6ZWouY2hhbHViZWtAZ21haWwuY29tPiAoaHR0cDovL2plZHJ6ZWpjaGFsdWJlay5jb20vKVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbC5HbGlkZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgLyoqXG4gICAgICogVHlwZSBvZiB0aGUgbW92ZW1lbnQuXG4gICAgICpcbiAgICAgKiBBdmFpbGFibGUgdHlwZXM6XG4gICAgICogYHNsaWRlcmAgLSBSZXdpbmRzIHNsaWRlciB0byB0aGUgc3RhcnQvZW5kIHdoZW4gaXQgcmVhY2hlcyB0aGUgZmlyc3Qgb3IgbGFzdCBzbGlkZS5cbiAgICAgKiBgY2Fyb3VzZWxgIC0gQ2hhbmdlcyBzbGlkZXMgd2l0aG91dCBzdGFydGluZyBvdmVyIHdoZW4gaXQgcmVhY2hlcyB0aGUgZmlyc3Qgb3IgbGFzdCBzbGlkZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogJ3NsaWRlcicsXG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBhdCBzcGVjaWZpYyBzbGlkZSBudW1iZXIgZGVmaW5lZCB3aXRoIHplcm8tYmFzZWQgaW5kZXguXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHN0YXJ0QXQ6IDAsXG5cbiAgICAvKipcbiAgICAgKiBBIG51bWJlciBvZiBzbGlkZXMgdmlzaWJsZSBvbiB0aGUgc2luZ2xlIHZpZXdwb3J0LlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBwZXJWaWV3OiAxLFxuXG4gICAgLyoqXG4gICAgICogRm9jdXMgY3VycmVudGx5IGFjdGl2ZSBzbGlkZSBhdCBhIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgdHJhY2suXG4gICAgICpcbiAgICAgKiBBdmFpbGFibGUgaW5wdXRzOlxuICAgICAqIGBjZW50ZXJgIC0gQ3VycmVudCBzbGlkZSB3aWxsIGJlIGFsd2F5cyBmb2N1c2VkIGF0IHRoZSBjZW50ZXIgb2YgYSB0cmFjay5cbiAgICAgKiBgMCwxLDIsMy4uLmAgLSBDdXJyZW50IHNsaWRlIHdpbGwgYmUgZm9jdXNlZCBvbiB0aGUgc3BlY2lmaWVkIHplcm8tYmFzZWQgaW5kZXguXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RyaW5nfE51bWJlcn1cbiAgICAgKi9cbiAgICBmb2N1c0F0OiAwLFxuXG4gICAgLyoqXG4gICAgICogQSBzaXplIG9mIHRoZSBnYXAgYWRkZWQgYmV0d2VlbiBzbGlkZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdhcDogMTAsXG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2Ugc2xpZGVzIGFmdGVyIGEgc3BlY2lmaWVkIGludGVydmFsLiBVc2UgYGZhbHNlYCBmb3IgdHVybmluZyBvZmYgYXV0b3BsYXkuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfEJvb2xlYW59XG4gICAgICovXG4gICAgYXV0b3BsYXk6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogU3RvcCBhdXRvcGxheSBvbiBtb3VzZW92ZXIgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBob3ZlcnBhdXNlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogQWxsb3cgZm9yIGNoYW5naW5nIHNsaWRlcyB3aXRoIGxlZnQgYW5kIHJpZ2h0IGtleWJvYXJkIGFycm93cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIGtleWJvYXJkOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogU3RvcCBydW5uaW5nIGBwZXJWaWV3YCBudW1iZXIgb2Ygc2xpZGVzIGZyb20gdGhlIGVuZC4gVXNlIHRoaXNcbiAgICAgKiBvcHRpb24gaWYgeW91IGRvbid0IHdhbnQgdG8gaGF2ZSBhbiBlbXB0eSBzcGFjZSBhZnRlclxuICAgICAqIGEgc2xpZGVyLiBXb3JrcyBvbmx5IHdpdGggYHNsaWRlcmAgdHlwZSBhbmQgYVxuICAgICAqIG5vbi1jZW50ZXJlZCBgZm9jdXNBdGAgc2V0dGluZy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIGJvdW5kOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIE1pbmltYWwgc3dpcGUgZGlzdGFuY2UgbmVlZGVkIHRvIGNoYW5nZSB0aGUgc2xpZGUuIFVzZSBgZmFsc2VgIGZvciB0dXJuaW5nIG9mZiBhIHN3aXBpbmcuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfEJvb2xlYW59XG4gICAgICovXG4gICAgc3dpcGVUaHJlc2hvbGQ6IDgwLFxuXG4gICAgLyoqXG4gICAgICogTWluaW1hbCBtb3VzZSBkcmFnIGRpc3RhbmNlIG5lZWRlZCB0byBjaGFuZ2UgdGhlIHNsaWRlLiBVc2UgYGZhbHNlYCBmb3IgdHVybmluZyBvZmYgYSBkcmFnZ2luZy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ8Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBkcmFnVGhyZXNob2xkOiAxMjAsXG5cbiAgICAvKipcbiAgICAgKiBBIG1heGltdW0gbnVtYmVyIG9mIHNsaWRlcyB0byB3aGljaCBtb3ZlbWVudCB3aWxsIGJlIG1hZGUgb24gc3dpcGluZyBvciBkcmFnZ2luZy4gVXNlIGBmYWxzZWAgZm9yIHVubGltaXRlZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ8Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBwZXJUb3VjaDogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBNb3ZpbmcgZGlzdGFuY2UgcmF0aW8gb2YgdGhlIHNsaWRlcyBvbiBhIHN3aXBpbmcgYW5kIGRyYWdnaW5nLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0b3VjaFJhdGlvOiAwLjUsXG5cbiAgICAvKipcbiAgICAgKiBBbmdsZSByZXF1aXJlZCB0byBhY3RpdmF0ZSBzbGlkZXMgbW92aW5nIG9uIHN3aXBpbmcgb3IgZHJhZ2dpbmcuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRvdWNoQW5nbGU6IDQ1LFxuXG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpbiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiA0MDAsXG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgbG9vcGluZyB0aGUgYHNsaWRlcmAgdHlwZS4gU2xpZGVyIHdpbGwgcmV3aW5kIHRvIHRoZSBmaXJzdC9sYXN0IHNsaWRlIHdoZW4gaXQncyBhdCB0aGUgc3RhcnQvZW5kLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAgcmV3aW5kOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gb2YgdGhlIHJld2luZGluZyBhbmltYXRpb24gb2YgdGhlIGBzbGlkZXJgIHR5cGUgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICByZXdpbmREdXJhdGlvbjogODAwLFxuXG4gICAgLyoqXG4gICAgICogRWFzaW5nIGZ1bmN0aW9uIGZvciB0aGUgYW5pbWF0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBhbmltYXRpb25UaW1pbmdGdW5jOiAnY3ViaWMtYmV6aWVyKC4xNjUsIC44NDAsIC40NDAsIDEpJyxcblxuICAgIC8qKlxuICAgICAqIFRocm90dGxlIGNvc3RseSBldmVudHMgYXQgbW9zdCBvbmNlIHBlciBldmVyeSB3YWl0IG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhyb3R0bGU6IDEwLFxuXG4gICAgLyoqXG4gICAgICogTW92aW5nIGRpcmVjdGlvbiBtb2RlLlxuICAgICAqXG4gICAgICogQXZhaWxhYmxlIGlucHV0czpcbiAgICAgKiAtICdsdHInIC0gbGVmdCB0byByaWdodCBtb3ZlbWVudCxcbiAgICAgKiAtICdydGwnIC0gcmlnaHQgdG8gbGVmdCBtb3ZlbWVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcblxuICAgIC8qKlxuICAgICAqIFRoZSBkaXN0YW5jZSB2YWx1ZSBvZiB0aGUgbmV4dCBhbmQgcHJldmlvdXMgdmlld3BvcnRzIHdoaWNoXG4gICAgICogaGF2ZSB0byBwZWVrIGluIHRoZSBjdXJyZW50IHZpZXcuIEFjY2VwdHMgbnVtYmVyIGFuZFxuICAgICAqIHBpeGVscyBhcyBhIHN0cmluZy4gTGVmdCBhbmQgcmlnaHQgcGVla2luZyBjYW4gYmVcbiAgICAgKiBzZXQgdXAgc2VwYXJhdGVseSB3aXRoIGEgZGlyZWN0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZTpcbiAgICAgKiBgMTAwYCAtIFBlZWsgMTAwcHggb24gdGhlIGJvdGggc2lkZXMuXG4gICAgICogeyBiZWZvcmU6IDEwMCwgYWZ0ZXI6IDUwIH1gIC0gUGVlayAxMDBweCBvbiB0aGUgbGVmdCBzaWRlIGFuZCA1MHB4IG9uIHRoZSByaWdodCBzaWRlLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcnxTdHJpbmd8T2JqZWN0fVxuICAgICAqL1xuICAgIHBlZWs6IDAsXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIG9wdGlvbnMgYXBwbGllZCBhdCBzcGVjaWZpZWQgbWVkaWEgYnJlYWtwb2ludHMuXG4gICAgICogRm9yIGV4YW1wbGU6IGRpc3BsYXkgdHdvIHNsaWRlcyBwZXIgdmlldyB1bmRlciA4MDBweC5cbiAgICAgKiBge1xuICAgICAqICAgJzgwMHB4Jzoge1xuICAgICAqICAgICBwZXJWaWV3OiAyXG4gICAgICogICB9XG4gICAgICogfWBcbiAgICAgKi9cbiAgICBicmVha3BvaW50czoge30sXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIGludGVybmFsbHkgdXNlZCBIVE1MIGNsYXNzZXMuXG4gICAgICpcbiAgICAgKiBAdG9kbyBSZWZhY3RvciBgc2xpZGVyYCBhbmQgYGNhcm91c2VsYCBwcm9wZXJ0aWVzIHRvIHNpbmdsZSBgdHlwZTogeyBzbGlkZXI6ICcnLCBjYXJvdXNlbDogJycgfWAgb2JqZWN0XG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBjbGFzc2VzOiB7XG4gICAgICBkaXJlY3Rpb246IHtcbiAgICAgICAgbHRyOiAnZ2xpZGUtLWx0cicsXG4gICAgICAgIHJ0bDogJ2dsaWRlLS1ydGwnXG4gICAgICB9LFxuICAgICAgc2xpZGVyOiAnZ2xpZGUtLXNsaWRlcicsXG4gICAgICBjYXJvdXNlbDogJ2dsaWRlLS1jYXJvdXNlbCcsXG4gICAgICBzd2lwZWFibGU6ICdnbGlkZS0tc3dpcGVhYmxlJyxcbiAgICAgIGRyYWdnaW5nOiAnZ2xpZGUtLWRyYWdnaW5nJyxcbiAgICAgIGNsb25lU2xpZGU6ICdnbGlkZV9fc2xpZGUtLWNsb25lJyxcbiAgICAgIGFjdGl2ZU5hdjogJ2dsaWRlX19idWxsZXQtLWFjdGl2ZScsXG4gICAgICBhY3RpdmVTbGlkZTogJ2dsaWRlX19zbGlkZS0tYWN0aXZlJyxcbiAgICAgIGRpc2FibGVkQXJyb3c6ICdnbGlkZV9fYXJyb3ctLWRpc2FibGVkJ1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogT3V0cHV0cyB3YXJuaW5nIG1lc3NhZ2UgdG8gdGhlIGJvd3NlciBjb25zb2xlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IG1zZ1xuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiW0dsaWRlIHdhcm5dOiBcIiArIG1zZyk7XG4gIH1cblxuICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9O1xuXG4gIHZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgdmFyIGdldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7XG5cbiAgICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH07XG5cbiAgdmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB2YWx1ZSBlbnRlcmVkIGFzIG51bWJlclxuICAgKiBvciBzdHJpbmcgdG8gaW50ZWdlciB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiB0b0ludCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdmFsdWUgZW50ZXJlZCBhcyBudW1iZXJcbiAgICogb3Igc3RyaW5nIHRvIGZsYXQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gIHsqfSAgIHZhbHVlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZVxuICAgKi9cbiAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpO1xuXG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISF2YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1taXhlZC1vcGVyYXRvcnNcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0gIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSAgeyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHBhcmFtICB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBhcnJheS5cbiAgICpcbiAgICogQHBhcmFtICB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIHNwZWNpZmllZCBjb2xsZWN0aW9uIG9mIGV4dGVuc2lvbnMuXG4gICAqIEVhY2ggZXh0ZW5zaW9uIHJlY2VpdmVzIGFjY2VzcyB0byBpbnN0YW5jZSBvZiBnbGlkZSBhbmQgcmVzdCBvZiBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZ2xpZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnNcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIG1vdW50KGdsaWRlLCBleHRlbnNpb25zLCBldmVudHMpIHtcbiAgICB2YXIgY29tcG9uZW50cyA9IHt9O1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBleHRlbnNpb25zKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihleHRlbnNpb25zW25hbWVdKSkge1xuICAgICAgICBjb21wb25lbnRzW25hbWVdID0gZXh0ZW5zaW9uc1tuYW1lXShnbGlkZSwgY29tcG9uZW50cywgZXZlbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oJ0V4dGVuc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbmFtZSBpbiBjb21wb25lbnRzKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihjb21wb25lbnRzW19uYW1lXS5tb3VudCkpIHtcbiAgICAgICAgY29tcG9uZW50c1tfbmFtZV0ubW91bnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9uZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGdldHRlciBhbmQgc2V0dGVyIHByb3BlcnR5IG9uIHRoZSBzcGVjaWZpZWQgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAgICAgICAgIE9iamVjdCB3aGVyZSBwcm9wZXJ0eSBoYXMgdG8gYmUgZGVmaW5lZC5cbiAgICogQHBhcmFtICB7U3RyaW5nfSBwcm9wICAgICAgICBOYW1lIG9mIHRoZSBkZWZpbmVkIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRlZmluaXRpb24gIEdldCBhbmQgc2V0IGRlZmluaXRpb25zIGZvciB0aGUgcHJvcGVydHkuXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBwcm9wLCBkZWZpbml0aW9uKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgZGVmaW5pdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogU29ydHMgYXBoYWJldGljYWxseSBvYmplY3Qga2V5cy5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBvYmpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gc29ydEtleXMob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuc29ydCgpLnJlZHVjZShmdW5jdGlvbiAociwgaykge1xuICAgICAgcltrXSA9IG9ialtrXTtcblxuICAgICAgcmV0dXJuIHJba10sIHI7XG4gICAgfSwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlcyBwYXNzZWQgc2V0dGluZ3Mgb2JqZWN0IHdpdGggZGVmYXVsdCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRlZmF1bHRzXG4gICAqIEBwYXJhbSAge09iamVjdH0gc2V0dGluZ3NcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKGRlZmF1bHRzLCBzZXR0aW5ncykge1xuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBzZXR0aW5ncyk7XG5cbiAgICAvLyBgT2JqZWN0LmFzc2lnbmAgZG8gbm90IGRlZXBseSBtZXJnZSBvYmplY3RzLCBzbyB3ZVxuICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkgZm9yIGV2ZXJ5IG5lc3RlZCBvYmplY3RcbiAgICAvLyBpbiBvcHRpb25zLiBBbHRob3VnaCBpdCBkb2VzIG5vdCBsb29rIHNtYXJ0LFxuICAgIC8vIGl0J3Mgc21hbGxlciBhbmQgZmFzdGVyIHRoYW4gc29tZSBmYW5jeVxuICAgIC8vIG1lcmdpbmcgZGVlcC1tZXJnZSBhbGdvcml0aG0gc2NyaXB0LlxuICAgIGlmIChzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eSgnY2xhc3NlcycpKSB7XG4gICAgICBvcHRpb25zLmNsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdHMuY2xhc3Nlcywgc2V0dGluZ3MuY2xhc3Nlcyk7XG5cbiAgICAgIGlmIChzZXR0aW5ncy5jbGFzc2VzLmhhc093blByb3BlcnR5KCdkaXJlY3Rpb24nKSkge1xuICAgICAgICBvcHRpb25zLmNsYXNzZXMuZGlyZWN0aW9uID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLmNsYXNzZXMuZGlyZWN0aW9uLCBzZXR0aW5ncy5jbGFzc2VzLmRpcmVjdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KCdicmVha3BvaW50cycpKSB7XG4gICAgICBvcHRpb25zLmJyZWFrcG9pbnRzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLmJyZWFrcG9pbnRzLCBzZXR0aW5ncy5icmVha3BvaW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICB2YXIgRXZlbnRzQnVzID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIEV2ZW50QnVzIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIEV2ZW50c0J1cygpIHtcbiAgICAgIHZhciBldmVudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRzQnVzKTtcblxuICAgICAgdGhpcy5ldmVudHMgPSBldmVudHM7XG4gICAgICB0aGlzLmhvcCA9IGV2ZW50cy5oYXNPd25Qcm9wZXJ0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGxpc3RlbmVyIHRvIHRoZSBzcGVjaWZlZCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBldmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICAgKi9cblxuXG4gICAgY3JlYXRlQ2xhc3MoRXZlbnRzQnVzLCBbe1xuICAgICAga2V5OiAnb24nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChpc0FycmF5KGV2ZW50KSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMub24oZXZlbnRbaV0sIGhhbmRsZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgZXZlbnQncyBvYmplY3QgaWYgbm90IHlldCBjcmVhdGVkXG4gICAgICAgIGlmICghdGhpcy5ob3AuY2FsbCh0aGlzLmV2ZW50cywgZXZlbnQpKSB7XG4gICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIGhhbmRsZXIgdG8gcXVldWVcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5ldmVudHNbZXZlbnRdLnB1c2goaGFuZGxlcikgLSAxO1xuXG4gICAgICAgIC8vIFByb3ZpZGUgaGFuZGxlIGJhY2sgZm9yIHJlbW92YWwgb2YgZXZlbnRcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50c1tldmVudF1baW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSdW5zIHJlZ2lzdGVyZWQgaGFuZGxlcnMgZm9yIHNwZWNpZmllZCBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZXZlbnRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dFxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdlbWl0JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0KGV2ZW50LCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChpc0FycmF5KGV2ZW50KSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChldmVudFtpXSwgY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGRvZXNuJ3QgZXhpc3QsIG9yIHRoZXJlJ3Mgbm8gaGFuZGxlcnMgaW4gcXVldWUsIGp1c3QgbGVhdmVcbiAgICAgICAgaWYgKCF0aGlzLmhvcC5jYWxsKHRoaXMuZXZlbnRzLCBldmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDeWNsZSB0aHJvdWdoIGV2ZW50cyBxdWV1ZSwgZmlyZSFcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpdGVtKGNvbnRleHQgfHwge30pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIEV2ZW50c0J1cztcbiAgfSgpO1xuXG4gIHZhciBHbGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBnbGlkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHNlbGVjdG9yXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEdsaWRlKHNlbGVjdG9yKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBHbGlkZSk7XG5cbiAgICAgIHRoaXMuX2MgPSB7fTtcbiAgICAgIHRoaXMuX3QgPSBbXTtcbiAgICAgIHRoaXMuX2UgPSBuZXcgRXZlbnRzQnVzKCk7XG5cbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgIHRoaXMuc2V0dGluZ3MgPSBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5pbmRleCA9IHRoaXMuc2V0dGluZ3Muc3RhcnRBdDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIGdsaWRlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBleHRlbnNpb25zIENvbGxlY3Rpb24gb2YgZXh0ZW5zaW9ucyB0byBpbml0aWFsaXplLlxyXG4gICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgKi9cblxuXG4gICAgY3JlYXRlQ2xhc3MoR2xpZGUsIFt7XG4gICAgICBrZXk6ICdtb3VudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnQkJDEoKSB7XG4gICAgICAgIHZhciBleHRlbnNpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICB0aGlzLl9lLmVtaXQoJ21vdW50LmJlZm9yZScpO1xuXG4gICAgICAgIGlmIChpc09iamVjdChleHRlbnNpb25zKSkge1xuICAgICAgICAgIHRoaXMuX2MgPSBtb3VudCh0aGlzLCBleHRlbnNpb25zLCB0aGlzLl9lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKCdZb3UgbmVlZCB0byBwcm92aWRlIGEgb2JqZWN0IG9uIGBtb3VudCgpYCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZS5lbWl0KCdtb3VudC5hZnRlcicpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogQ29sbGVjdHMgYW4gaW5zdGFuY2UgYHRyYW5zbGF0ZWAgdHJhbnNmb3JtZXJzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtBcnJheX0gdHJhbnNmb3JtZXJzIENvbGxlY3Rpb24gb2YgdHJhbnNmb3JtZXJzLlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ211dGF0ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbXV0YXRlKCkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblxuICAgICAgICBpZiAoaXNBcnJheSh0cmFuc2Zvcm1lcnMpKSB7XG4gICAgICAgICAgdGhpcy5fdCA9IHRyYW5zZm9ybWVycztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKCdZb3UgbmVlZCB0byBwcm92aWRlIGEgYXJyYXkgb24gYG11dGF0ZSgpYCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBVcGRhdGVzIGdsaWRlIHdpdGggc3BlY2lmaWVkIHNldHRpbmdzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3NcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAndXBkYXRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IG1lcmdlT3B0aW9ucyh0aGlzLnNldHRpbmdzLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KCdzdGFydEF0JykpIHtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gc2V0dGluZ3Muc3RhcnRBdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2UuZW1pdCgndXBkYXRlJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBDaGFuZ2Ugc2xpZGUgd2l0aCBzcGVjaWZpZWQgcGF0dGVybi4gQSBwYXR0ZXJuIG11c3QgYmUgaW4gdGhlIHNwZWNpYWwgZm9ybWF0OlxyXG4gICAgICAgKiBgPmAgLSBNb3ZlIG9uZSBmb3J3YXJkXHJcbiAgICAgICAqIGA8YCAtIE1vdmUgb25lIGJhY2t3YXJkXHJcbiAgICAgICAqIGA9e2l9YCAtIEdvIHRvIHtpfSB6ZXJvLWJhc2VkIHNsaWRlIChlcS4gJz0xJywgd2lsbCBnbyB0byBzZWNvbmQgc2xpZGUpXHJcbiAgICAgICAqIGA+PmAgLSBSZXdpbmRzIHRvIGVuZCAobGFzdCBzbGlkZSlcclxuICAgICAgICogYDw8YCAtIFJld2luZHMgdG8gc3RhcnQgKGZpcnN0IHNsaWRlKVxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVyblxyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdnbycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ28ocGF0dGVybikge1xuICAgICAgICB0aGlzLl9jLlJ1bi5tYWtlKHBhdHRlcm4pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogTW92ZSB0cmFjayBieSBzcGVjaWZpZWQgZGlzdGFuY2UuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkaXN0YW5jZVxyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdtb3ZlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlKGRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuX2MuVHJhbnNpdGlvbi5kaXNhYmxlKCk7XG4gICAgICAgIHRoaXMuX2MuTW92ZS5tYWtlKGRpc3RhbmNlKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIERlc3Ryb3kgaW5zdGFuY2UgYW5kIHJldmVydCBhbGwgY2hhbmdlcyBkb25lIGJ5IHRoaXMuX2MuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2UuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogU3RhcnQgaW5zdGFuY2UgYXV0b3BsYXlpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Qm9vbGVhbnxOdW1iZXJ9IGludGVydmFsIFJ1biBhdXRvcGxheWluZyB3aXRoIHBhc3NlZCBpbnRlcnZhbCByZWdhcmRsZXNzIG9mIGBhdXRvcGxheWAgc2V0dGluZ3NcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAncGxheScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgICAgdmFyIGludGVydmFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgICBpZiAoaW50ZXJ2YWwpIHtcbiAgICAgICAgICB0aGlzLnNldHRpbmdzLmF1dG9wbGF5ID0gaW50ZXJ2YWw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lLmVtaXQoJ3BsYXknKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIFN0b3AgaW5zdGFuY2UgYXV0b3BsYXlpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ3BhdXNlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5fZS5lbWl0KCdwYXVzZScpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogU2V0cyBnbGlkZSBpbnRvIGEgaWRsZSBzdGF0dXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Rpc2FibGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogU2V0cyBnbGlkZSBpbnRvIGEgYWN0aXZlIHN0YXR1cy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZW5hYmxlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIEFkZHMgY3V1dG9tIGV2ZW50IGxpc3RlbmVyIHdpdGggaGFuZGxlci5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtICB7U3RyaW5nfEFycmF5fSBldmVudFxyXG4gICAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gaGFuZGxlclxyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fZS5vbihldmVudCwgaGFuZGxlcik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBDaGVja3MgaWYgZ2xpZGUgaXMgYSBwcmVjaXNlZCB0eXBlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWVcclxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdpc1R5cGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzVHlwZShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnR5cGUgPT09IG5hbWU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBjb3JlIG9wdGlvbnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdzZXR0aW5ncycsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX287XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIHZhbHVlIG9mIHRoZSBjb3JlIG9wdGlvbnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge09iamVjdH0gb1xyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cbiAgICAgICxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKG8pIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KG8pKSB7XG4gICAgICAgICAgdGhpcy5fbyA9IG87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybignT3B0aW9ucyBtdXN0IGJlIGFuIGBvYmplY3RgIGluc3RhbmNlLicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIGN1cnJlbnQgaW5kZXggb2YgdGhlIHNsaWRlci5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2luZGV4JyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faTtcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgY3VycmVudCBpbmRleCBhIHNsaWRlci5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICAgKi9cbiAgICAgICxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKGkpIHtcbiAgICAgICAgdGhpcy5faSA9IHRvSW50KGkpO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyB0eXBlIG5hbWUgb2YgdGhlIHNsaWRlci5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7U3RyaW5nfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ3R5cGUnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnR5cGU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBpZGxlIHN0YXR1cy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdkaXNhYmxlZCcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Q7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIHZhbHVlIG9mIHRoZSBpZGxlIHN0YXR1cy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAgICovXG4gICAgICAsXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShzdGF0dXMpIHtcbiAgICAgICAgdGhpcy5fZCA9ICEhc3RhdHVzO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gR2xpZGU7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBSdW4gKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICB2YXIgUnVuID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBJbml0aWFsaXplcyBhdXRvcnVubmluZyBvZiB0aGUgZ2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICB0aGlzLl9vID0gZmFsc2U7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogTWFrZXMgZ2xpZGVzIHJ1bm5pbmcgYmFzZWQgb24gdGhlIHBhc3NlZCBtb3Zpbmcgc2NoZW1hLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtb3ZlXG4gICAgICAgKi9cbiAgICAgIG1ha2U6IGZ1bmN0aW9uIG1ha2UobW92ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICghR2xpZGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICBHbGlkZS5kaXNhYmxlKCk7XG5cbiAgICAgICAgICB0aGlzLm1vdmUgPSBtb3ZlO1xuXG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3J1bi5iZWZvcmUnLCB0aGlzLm1vdmUpO1xuXG4gICAgICAgICAgdGhpcy5jYWxjdWxhdGUoKTtcblxuICAgICAgICAgIEV2ZW50cy5lbWl0KCdydW4nLCB0aGlzLm1vdmUpO1xuXG4gICAgICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc1N0YXJ0KCkpIHtcbiAgICAgICAgICAgICAgRXZlbnRzLmVtaXQoJ3J1bi5zdGFydCcsIF90aGlzLm1vdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNFbmQoKSkge1xuICAgICAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLmVuZCcsIF90aGlzLm1vdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNPZmZzZXQoJzwnKSB8fCBfdGhpcy5pc09mZnNldCgnPicpKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9vID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgRXZlbnRzLmVtaXQoJ3J1bi5vZmZzZXQnLCBfdGhpcy5tb3ZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRXZlbnRzLmVtaXQoJ3J1bi5hZnRlcicsIF90aGlzLm1vdmUpO1xuXG4gICAgICAgICAgICBHbGlkZS5lbmFibGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGN1bGF0ZXMgY3VycmVudCBpbmRleCBiYXNlZCBvbiBkZWZpbmVkIG1vdmUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgY2FsY3VsYXRlOiBmdW5jdGlvbiBjYWxjdWxhdGUoKSB7XG4gICAgICAgIHZhciBtb3ZlID0gdGhpcy5tb3ZlLFxuICAgICAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIHZhciBzdGVwcyA9IG1vdmUuc3RlcHMsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBtb3ZlLmRpcmVjdGlvbjtcblxuXG4gICAgICAgIHZhciBjb3VudGFibGVTdGVwcyA9IGlzTnVtYmVyKHRvSW50KHN0ZXBzKSkgJiYgdG9JbnQoc3RlcHMpICE9PSAwO1xuXG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICBpZiAoc3RlcHMgPT09ICc+Jykge1xuICAgICAgICAgICAgICBHbGlkZS5pbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0VuZCgpKSB7XG4gICAgICAgICAgICAgIGlmICghKEdsaWRlLmlzVHlwZSgnc2xpZGVyJykgJiYgIUdsaWRlLnNldHRpbmdzLnJld2luZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudGFibGVTdGVwcykge1xuICAgICAgICAgICAgICBHbGlkZS5pbmRleCArPSBNYXRoLm1pbihsZW5ndGggLSBHbGlkZS5pbmRleCwgLXRvSW50KHN0ZXBzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBHbGlkZS5pbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICAgIGlmIChzdGVwcyA9PT0gJzwnKSB7XG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1N0YXJ0KCkpIHtcbiAgICAgICAgICAgICAgaWYgKCEoR2xpZGUuaXNUeXBlKCdzbGlkZXInKSAmJiAhR2xpZGUuc2V0dGluZ3MucmV3aW5kKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX28gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgR2xpZGUuaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRhYmxlU3RlcHMpIHtcbiAgICAgICAgICAgICAgR2xpZGUuaW5kZXggLT0gTWF0aC5taW4oR2xpZGUuaW5kZXgsIHRvSW50KHN0ZXBzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBHbGlkZS5pbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gc3RlcHM7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB3YXJuKCdJbnZhbGlkIGRpcmVjdGlvbiBwYXR0ZXJuIFsnICsgZGlyZWN0aW9uICsgc3RlcHMgKyAnXSBoYXMgYmVlbiB1c2VkJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrcyBpZiB3ZSBhcmUgb24gdGhlIGZpcnN0IHNsaWRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIGlzU3RhcnQ6IGZ1bmN0aW9uIGlzU3RhcnQoKSB7XG4gICAgICAgIHJldHVybiBHbGlkZS5pbmRleCA9PT0gMDtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVja3MgaWYgd2UgYXJlIG9uIHRoZSBsYXN0IHNsaWRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIGlzRW5kOiBmdW5jdGlvbiBpc0VuZCgpIHtcbiAgICAgICAgcmV0dXJuIEdsaWRlLmluZGV4ID09PSB0aGlzLmxlbmd0aDtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVja3MgaWYgd2UgYXJlIG1ha2luZyBhIG9mZnNldCBydW4uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvblxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgaXNPZmZzZXQ6IGZ1bmN0aW9uIGlzT2Zmc2V0KGRpcmVjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbyAmJiB0aGlzLm1vdmUuZGlyZWN0aW9uID09PSBkaXJlY3Rpb247XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShSdW4sICdtb3ZlJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBtb3ZlIHNjaGVtYS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX207XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgbW92ZSBzY2hlbWEuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSB2YWx1ZS5zdWJzdHIoMSk7XG5cbiAgICAgICAgdGhpcy5fbSA9IHtcbiAgICAgICAgICBkaXJlY3Rpb246IHZhbHVlLnN1YnN0cigwLCAxKSxcbiAgICAgICAgICBzdGVwczogc3RlcCA/IHRvSW50KHN0ZXApID8gdG9JbnQoc3RlcCkgOiBzdGVwIDogMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKFJ1biwgJ2xlbmd0aCcsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgcnVubmluZyBkaXN0YW5jZSBiYXNlZFxuICAgICAgICogb24gemVyby1pbmRleGluZyBudW1iZXIgb2Ygc2xpZGVzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuICAgICAgICB2YXIgbGVuZ3RoID0gQ29tcG9uZW50cy5IdG1sLnNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gSWYgdGhlIGBib3VuZGAgb3B0aW9uIGlzIGFjaXR2ZSwgYSBtYXhpbXVtIHJ1bm5pbmcgZGlzdGFuY2Ugc2hvdWxkIGJlXG4gICAgICAgIC8vIHJlZHVjZWQgYnkgYHBlclZpZXdgIGFuZCBgZm9jdXNBdGAgc2V0dGluZ3MuIFJ1bm5pbmcgZGlzdGFuY2VcbiAgICAgICAgLy8gc2hvdWxkIGVuZCBiZWZvcmUgY3JlYXRpbmcgYW4gZW1wdHkgc3BhY2UgYWZ0ZXIgaW5zdGFuY2UuXG5cbiAgICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnc2xpZGVyJykgJiYgc2V0dGluZ3MuZm9jdXNBdCAhPT0gJ2NlbnRlcicgJiYgc2V0dGluZ3MuYm91bmQpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoIC0gMSAtICh0b0ludChzZXR0aW5ncy5wZXJWaWV3KSAtIDEpICsgdG9JbnQoc2V0dGluZ3MuZm9jdXNBdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZShSdW4sICdvZmZzZXQnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgc3RhdHVzIG9mIHRoZSBvZmZzZXR0aW5nIGZsYWcuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJ1bjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY3VycmVudCB0aW1lLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAqIGF0IG1vc3Qgb25jZSBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xuICAgKiBAcGFyYW0ge051bWJlcn0gd2FpdFxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlXG4gICAqL1xuICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB2b2lkIDAsXG4gICAgICAgIGNvbnRleHQgPSB2b2lkIDAsXG4gICAgICAgIGFyZ3MgPSB2b2lkIDAsXG4gICAgICAgIHJlc3VsdCA9IHZvaWQgMDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogbm93KCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIHRocm90dGxlZCA9IGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICAgIHZhciBhdCA9IG5vdygpO1xuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IGF0O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAoYXQgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91cyA9IGF0O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB0aHJvdHRsZWQuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgcHJldmlvdXMgPSAwO1xuICAgICAgdGltZW91dCA9IGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRocm90dGxlZDtcbiAgfVxuXG4gIHZhciBNQVJHSU5fVFlQRSA9IHtcbiAgICBsdHI6IFsnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddLFxuICAgIHJ0bDogWydtYXJnaW5SaWdodCcsICdtYXJnaW5MZWZ0J11cbiAgfTtcblxuICBmdW5jdGlvbiBHYXBzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgdmFyIEdhcHMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEFwcGxpZXMgZ2FwcyBiZXR3ZWVuIHNsaWRlcy4gRmlyc3QgYW5kIGxhc3RcbiAgICAgICAqIHNsaWRlcyBkbyBub3QgcmVjZWl2ZSBpdCdzIGVkZ2UgbWFyZ2lucy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxDb2xsZWN0aW9ufSBzbGlkZXNcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseShzbGlkZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBzdHlsZSA9IHNsaWRlc1tpXS5zdHlsZTtcbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gQ29tcG9uZW50cy5EaXJlY3Rpb24udmFsdWU7XG5cbiAgICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgICAgc3R5bGVbTUFSR0lOX1RZUEVbZGlyZWN0aW9uXVswXV0gPSB0aGlzLnZhbHVlIC8gMiArICdweCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlW01BUkdJTl9UWVBFW2RpcmVjdGlvbl1bMF1dID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGkgIT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBzdHlsZVtNQVJHSU5fVFlQRVtkaXJlY3Rpb25dWzFdXSA9IHRoaXMudmFsdWUgLyAyICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVbTUFSR0lOX1RZUEVbZGlyZWN0aW9uXVsxXV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGdhcHMgZnJvbSB0aGUgc2xpZGVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTENvbGxlY3Rpb259IHNsaWRlc1xuICAgICAgICogQHJldHVybnMge1ZvaWR9XG4gICAgICAqL1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoc2xpZGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzbGlkZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgc3R5bGUgPSBzbGlkZXNbaV0uc3R5bGU7XG5cbiAgICAgICAgICBzdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XG4gICAgICAgICAgc3R5bGUubWFyZ2luUmlnaHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoR2FwcywgJ3ZhbHVlJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBnYXAuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0b0ludChHbGlkZS5zZXR0aW5ncy5nYXApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKEdhcHMsICdncm93Jywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIGFkZGl0aW9uYWwgZGltZW50aW9ucyB2YWx1ZSBjYXVzZWQgYnkgZ2Fwcy5cbiAgICAgICAqIFVzZWQgdG8gaW5jcmVhc2Ugd2lkdGggb2YgdGhlIHNsaWRlcyB3cmFwcGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gR2Fwcy52YWx1ZSAqIChDb21wb25lbnRzLlNpemVzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKEdhcHMsICdyZWR1Y3RvcicsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyByZWR1Y3Rpb24gdmFsdWUgY2F1c2VkIGJ5IGdhcHMuXG4gICAgICAgKiBVc2VkIHRvIHN1YnRyYWN0IHdpZHRoIG9mIHRoZSBzbGlkZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBwZXJWaWV3ID0gR2xpZGUuc2V0dGluZ3MucGVyVmlldztcblxuICAgICAgICByZXR1cm4gR2Fwcy52YWx1ZSAqIChwZXJWaWV3IC0gMSkgLyBwZXJWaWV3O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQXBwbHkgY2FsY3VsYXRlZCBnYXBzOlxuICAgICAqIC0gYWZ0ZXIgYnVpbGRpbmcsIHNvIHNsaWRlcyAoaW5jbHVkaW5nIGNsb25lcykgd2lsbCByZWNlaXZlIHByb3BlciBtYXJnaW5zXG4gICAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJLCB0byByZWNhbGN1bGF0ZSBnYXBzIHdpdGggbmV3IG9wdGlvbnNcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydidWlsZC5hZnRlcicsICd1cGRhdGUnXSwgdGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgR2Fwcy5hcHBseShDb21wb25lbnRzLkh0bWwud3JhcHBlci5jaGlsZHJlbik7XG4gICAgfSwgMzApKTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBnYXBzOlxuICAgICAqIC0gb24gZGVzdHJveWluZyB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRhbCBzdGF0ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIEdhcHMucmVtb3ZlKENvbXBvbmVudHMuSHRtbC53cmFwcGVyLmNoaWxkcmVuKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBHYXBzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHNpYmxpbmdzIG5vZGVzIG9mIHRoZSBwYXNzZWQgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtICB7RWxlbWVudH0gbm9kZVxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIGZ1bmN0aW9uIHNpYmxpbmdzKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIHZhciBuID0gbm9kZS5wYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XG4gICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuXG4gICAgICBmb3IgKDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgaWYgKG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gbm9kZSkge1xuICAgICAgICAgIG1hdGNoZWQucHVzaChuKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHBhc3NlZCBub2RlIGV4aXN0IGFuZCBpcyBhIHZhbGlkIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSAge0VsZW1lbnR9IG5vZGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGV4aXN0KG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlIGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgVFJBQ0tfU0VMRUNUT1IgPSAnW2RhdGEtZ2xpZGUtZWw9XCJ0cmFja1wiXSc7XG5cbiAgZnVuY3Rpb24gSHRtbCAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgICB2YXIgSHRtbCA9IHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0dXAgc2xpZGVyIEhUTUwgbm9kZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtHbGlkZX0gZ2xpZGVcbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICB0aGlzLnJvb3QgPSBHbGlkZS5zZWxlY3RvcjtcbiAgICAgICAgdGhpcy50cmFjayA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKFRSQUNLX1NFTEVDVE9SKTtcbiAgICAgICAgdGhpcy5zbGlkZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLndyYXBwZXIuY2hpbGRyZW4pLmZpbHRlcihmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgICByZXR1cm4gIXNsaWRlLmNsYXNzTGlzdC5jb250YWlucyhHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmNsb25lU2xpZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lKEh0bWwsICdyb290Jywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIG5vZGUgb2YgdGhlIGdsaWRlIG1haW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gSHRtbC5fcjtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIG5vZGUgb2YgdGhlIGdsaWRlIG1haW4gZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHIpIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHIpKSB7XG4gICAgICAgICAgciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iocik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhpc3QocikpIHtcbiAgICAgICAgICBIdG1sLl9yID0gcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKCdSb290IGVsZW1lbnQgbXVzdCBiZSBhIGV4aXN0aW5nIEh0bWwgbm9kZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoSHRtbCwgJ3RyYWNrJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIG5vZGUgb2YgdGhlIGdsaWRlIHRyYWNrIHdpdGggc2xpZGVzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBIdG1sLl90O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgbm9kZSBvZiB0aGUgZ2xpZGUgdHJhY2sgd2l0aCBzbGlkZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0KSB7XG4gICAgICAgIGlmIChleGlzdCh0KSkge1xuICAgICAgICAgIEh0bWwuX3QgPSB0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oJ0NvdWxkIG5vdCBmaW5kIHRyYWNrIGVsZW1lbnQuIFBsZWFzZSB1c2UgJyArIFRSQUNLX1NFTEVDVE9SICsgJyBhdHRyaWJ1dGUuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZShIdG1sLCAnd3JhcHBlcicsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBub2RlIG9mIHRoZSBzbGlkZXMgd3JhcHBlci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gSHRtbC50cmFjay5jaGlsZHJlblswXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBIdG1sO1xuICB9XG5cbiAgZnVuY3Rpb24gUGVlayAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIHZhciBQZWVrID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXR1cHMgaG93IG11Y2ggdG8gcGVlayBiYXNlZCBvbiBzZXR0aW5ncy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBHbGlkZS5zZXR0aW5ncy5wZWVrO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoUGVlaywgJ3ZhbHVlJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBwZWVrLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ8T2JqZWN0fVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFBlZWsuX3Y7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgcGVlay5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IHZhbHVlXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUuYmVmb3JlID0gdG9JbnQodmFsdWUuYmVmb3JlKTtcbiAgICAgICAgICB2YWx1ZS5hZnRlciA9IHRvSW50KHZhbHVlLmFmdGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFBlZWsuX3YgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZShQZWVrLCAncmVkdWN0b3InLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgcmVkdWN0aW9uIHZhbHVlIGNhdXNlZCBieSBwZWVrLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBQZWVrLnZhbHVlO1xuICAgICAgICB2YXIgcGVyVmlldyA9IEdsaWRlLnNldHRpbmdzLnBlclZpZXc7XG5cbiAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5iZWZvcmUgLyBwZXJWaWV3ICsgdmFsdWUuYWZ0ZXIgLyBwZXJWaWV3O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlICogMiAvIHBlclZpZXc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWNhbGN1bGF0ZSBwZWVraW5nIHNpemVzIG9uOlxuICAgICAqIC0gd2hlbiByZXNpemluZyB3aW5kb3cgdG8gdXBkYXRlIHRvIHByb3BlciBwZXJjZW50c1xuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ3Jlc2l6ZScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgUGVlay5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFBlZWs7XG4gIH1cblxuICBmdW5jdGlvbiBNb3ZlIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgdmFyIE1vdmUgPSB7XG4gICAgICAvKipcbiAgICAgICAqIENvbnN0cnVjdHMgbW92ZSBjb21wb25lbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5fbyA9IDA7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsY3VsYXRlcyBhIG1vdmVtZW50IHZhbHVlIGJhc2VkIG9uIHBhc3NlZCBvZmZzZXQgYW5kIGN1cnJlbnRseSBhY3RpdmUgaW5kZXguXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBvZmZzZXRcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIG1ha2U6IGZ1bmN0aW9uIG1ha2UoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcblxuICAgICAgICBFdmVudHMuZW1pdCgnbW92ZScsIHtcbiAgICAgICAgICBtb3ZlbWVudDogdGhpcy52YWx1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIEV2ZW50cy5lbWl0KCdtb3ZlLmFmdGVyJywge1xuICAgICAgICAgICAgbW92ZW1lbnQ6IF90aGlzLnZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoTW92ZSwgJ29mZnNldCcsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBhbiBvZmZzZXQgdmFsdWUgdXNlZCB0byBtb2RpZnkgY3VycmVudCB0cmFuc2xhdGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE1vdmUuX287XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyBhbiBvZmZzZXQgdmFsdWUgdXNlZCB0byBtb2RpZnkgY3VycmVudCB0cmFuc2xhdGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBNb3ZlLl9vID0gIWlzVW5kZWZpbmVkKHZhbHVlKSA/IHRvSW50KHZhbHVlKSA6IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoTW92ZSwgJ3RyYW5zbGF0ZScsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBhIHJhdyBtb3ZlbWVudCB2YWx1ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gQ29tcG9uZW50cy5TaXplcy5zbGlkZVdpZHRoICogR2xpZGUuaW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoTW92ZSwgJ3ZhbHVlJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIGFuIGFjdHVhbCBtb3ZlbWVudCB2YWx1ZSBjb3JyZWN0ZWQgYnkgb2Zmc2V0LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlO1xuXG4gICAgICAgIGlmIChDb21wb25lbnRzLkRpcmVjdGlvbi5pcygncnRsJykpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlICsgb2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSAtIG9mZnNldDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIE1ha2UgbW92ZW1lbnQgdG8gcHJvcGVyIHNsaWRlIG9uOlxuICAgICAqIC0gYmVmb3JlIGJ1aWxkLCBzbyBnbGlkZSB3aWxsIHN0YXJ0IGF0IGBzdGFydEF0YCBpbmRleFxuICAgICAqIC0gb24gZWFjaCBzdGFuZGFyZCBydW4gdG8gbW92ZSB0byBuZXdseSBjYWxjdWxhdGVkIGluZGV4XG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3J1biddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBNb3ZlLm1ha2UoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBNb3ZlO1xuICB9XG5cbiAgZnVuY3Rpb24gU2l6ZXMgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICB2YXIgU2l6ZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFNldHVwcyBkaW1lbnRpb25zIG9mIHNsaWRlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzZXR1cFNsaWRlczogZnVuY3Rpb24gc2V0dXBTbGlkZXMoKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMuc2xpZGVXaWR0aCArICdweCc7XG4gICAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXR1cHMgZGltZW50aW9ucyBvZiBzbGlkZXMgd3JhcHBlci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzZXR1cFdyYXBwZXI6IGZ1bmN0aW9uIHNldHVwV3JhcHBlcihkaW1lbnRpb24pIHtcbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIuc3R5bGUud2lkdGggPSB0aGlzLndyYXBwZXJTaXplICsgJ3B4JztcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGFwcGxpZWQgc3R5bGVzIGZyb20gSFRNTCBlbGVtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoU2l6ZXMsICdsZW5ndGgnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgY291bnQgbnVtYmVyIG9mIHRoZSBzbGlkZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudHMuSHRtbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKFNpemVzLCAnd2lkdGgnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgd2lkdGggdmFsdWUgb2YgdGhlIGdsaWRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBDb21wb25lbnRzLkh0bWwucm9vdC5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZShTaXplcywgJ3dyYXBwZXJTaXplJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHNpemUgb2YgdGhlIHNsaWRlcyB3cmFwcGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBTaXplcy5zbGlkZVdpZHRoICogU2l6ZXMubGVuZ3RoICsgQ29tcG9uZW50cy5HYXBzLmdyb3cgKyBDb21wb25lbnRzLkNsb25lcy5ncm93O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKFNpemVzLCAnc2xpZGVXaWR0aCcsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB3aWR0aCB2YWx1ZSBvZiB0aGUgc2luZ2xlIHNsaWRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBTaXplcy53aWR0aCAvIEdsaWRlLnNldHRpbmdzLnBlclZpZXcgLSBDb21wb25lbnRzLlBlZWsucmVkdWN0b3IgLSBDb21wb25lbnRzLkdhcHMucmVkdWN0b3I7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBjYWxjdWxhdGVkIGdsaWRlJ3MgZGltZW5zaW9uczpcbiAgICAgKiAtIGJlZm9yZSBidWlsZGluZywgc28gb3RoZXIgZGltZW50aW9ucyAoZS5nLiB0cmFuc2xhdGUpIHdpbGwgYmUgY2FsY3VsYXRlZCBwcm9wZXJ0bHlcbiAgICAgKiAtIHdoZW4gcmVzaXppbmcgd2luZG93IHRvIHJlY2FsY3VsYXRlIHNpbGRlcyBkaW1lbnNpb25zXG4gICAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJLCB0byBjYWxjdWxhdGUgZGltZW5zaW9ucyBiYXNlZCBvbiBuZXcgb3B0aW9uc1xuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ2J1aWxkLmJlZm9yZScsICdyZXNpemUnLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIFNpemVzLnNldHVwU2xpZGVzKCk7XG4gICAgICBTaXplcy5zZXR1cFdyYXBwZXIoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjYWxjdWxhdGVkIGdsaWRlJ3MgZGltZW5zaW9uczpcbiAgICAgKiAtIG9uIGRlc3RvdGluZyB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRhbCBzdGF0ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFNpemVzLnJlbW92ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFNpemVzO1xuICB9XG5cbiAgZnVuY3Rpb24gQnVpbGQgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICB2YXIgQnVpbGQgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEluaXQgZ2xpZGUgYnVpbGRpbmcuIEFkZHMgY2xhc3Nlcywgc2V0c1xuICAgICAgICogZGltZW5zaW9ucyBhbmQgc2V0dXBzIGluaXRpYWwgc3RhdGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICBFdmVudHMuZW1pdCgnYnVpbGQuYmVmb3JlJyk7XG5cbiAgICAgICAgdGhpcy50eXBlQ2xhc3MoKTtcbiAgICAgICAgdGhpcy5hY3RpdmVDbGFzcygpO1xuXG4gICAgICAgIEV2ZW50cy5lbWl0KCdidWlsZC5hZnRlcicpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZHMgYHR5cGVgIGNsYXNzIHRvIHRoZSBnbGlkZSBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHR5cGVDbGFzczogZnVuY3Rpb24gdHlwZUNsYXNzKCkge1xuICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QuYWRkKEdsaWRlLnNldHRpbmdzLmNsYXNzZXNbR2xpZGUuc2V0dGluZ3MudHlwZV0pO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgc2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYWN0aXZlQ2xhc3M6IGZ1bmN0aW9uIGFjdGl2ZUNsYXNzKCkge1xuICAgICAgICB2YXIgY2xhc3NlcyA9IEdsaWRlLnNldHRpbmdzLmNsYXNzZXM7XG4gICAgICAgIHZhciBzbGlkZSA9IENvbXBvbmVudHMuSHRtbC5zbGlkZXNbR2xpZGUuaW5kZXhdO1xuXG4gICAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICAgIHNsaWRlLmNsYXNzTGlzdC5hZGQoY2xhc3Nlcy5hY3RpdmVTbGlkZSk7XG5cbiAgICAgICAgICBzaWJsaW5ncyhzbGlkZSkuZm9yRWFjaChmdW5jdGlvbiAoc2libGluZykge1xuICAgICAgICAgICAgc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXMuYWN0aXZlU2xpZGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBIVE1MIGNsYXNzZXMgYXBwbGllZCBhdCBidWlsZGluZy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICByZW1vdmVDbGFzc2VzOiBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICAgICAgICB2YXIgY2xhc3NlcyA9IEdsaWRlLnNldHRpbmdzLmNsYXNzZXM7XG5cbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShjbGFzc2VzW0dsaWRlLnNldHRpbmdzLnR5cGVdKTtcblxuICAgICAgICBDb21wb25lbnRzLkh0bWwuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpYmxpbmcpIHtcbiAgICAgICAgICBzaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3Nlcy5hY3RpdmVTbGlkZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBidWlsZGluZyBjbGFzc2VzOlxuICAgICAqIC0gb24gZGVzdHJveWluZyB0byBicmluZyBIVE1MIHRvIGl0cyBpbml0aWFsIHN0YXRlXG4gICAgICogLSBvbiB1cGRhdGluZyB0byByZW1vdmUgY2xhc3NlcyBiZWZvcmUgcmVtb3VudGluZyBjb21wb25lbnRcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydkZXN0cm95JywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBCdWlsZC5yZW1vdmVDbGFzc2VzKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdW50IGNvbXBvbmVudDpcbiAgICAgKiAtIG9uIHJlc2l6aW5nIG9mIHRoZSB3aW5kb3cgdG8gY2FsY3VsYXRlIG5ldyBkaW1lbnRpb25zXG4gICAgICogLSBvbiB1cGRhdGluZyBzZXR0aW5ncyB2aWEgQVBJXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsncmVzaXplJywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBCdWlsZC5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3dhcCBhY3RpdmUgY2xhc3Mgb2YgY3VycmVudCBzbGlkZTpcbiAgICAgKiAtIGFmdGVyIGVhY2ggbW92ZSB0byB0aGUgbmV3IGluZGV4XG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdtb3ZlLmFmdGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgQnVpbGQuYWN0aXZlQ2xhc3MoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBCdWlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENsb25lcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIHZhciBDbG9uZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBwYXR0ZXJuIG1hcCBhbmQgY29sbGVjdCBzbGlkZXMgdG8gYmUgY2xvbmVkLlxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcblxuICAgICAgICBpZiAoR2xpZGUuaXNUeXBlKCdjYXJvdXNlbCcpKSB7XG4gICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuY29sbGVjdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQ29sbGVjdCBjbG9uZXMgd2l0aCBwYXR0ZXJuLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGNvbGxlY3Q6IGZ1bmN0aW9uIGNvbGxlY3QoKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xuICAgICAgICB2YXIgX0dsaWRlJHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3MsXG4gICAgICAgICAgICBwZXJWaWV3ID0gX0dsaWRlJHNldHRpbmdzLnBlclZpZXcsXG4gICAgICAgICAgICBjbGFzc2VzID0gX0dsaWRlJHNldHRpbmdzLmNsYXNzZXM7XG5cblxuICAgICAgICB2YXIgcGVla0luY3JlbWVudGVyID0gKyEhR2xpZGUuc2V0dGluZ3MucGVlaztcbiAgICAgICAgdmFyIHBhcnQgPSBwZXJWaWV3ICsgcGVla0luY3JlbWVudGVyO1xuICAgICAgICB2YXIgc3RhcnQgPSBzbGlkZXMuc2xpY2UoMCwgcGFydCk7XG4gICAgICAgIHZhciBlbmQgPSBzbGlkZXMuc2xpY2UoLXBhcnQpO1xuXG4gICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihwZXJWaWV3IC8gc2xpZGVzLmxlbmd0aCkpOyByKyspIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmUgPSBzdGFydFtpXS5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgICAgIGNsb25lLmNsYXNzTGlzdC5hZGQoY2xhc3Nlcy5jbG9uZVNsaWRlKTtcblxuICAgICAgICAgICAgaXRlbXMucHVzaChjbG9uZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGVuZC5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBfY2xvbmUgPSBlbmRbX2ldLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgX2Nsb25lLmNsYXNzTGlzdC5hZGQoY2xhc3Nlcy5jbG9uZVNsaWRlKTtcblxuICAgICAgICAgICAgaXRlbXMudW5zaGlmdChfY2xvbmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBBcHBlbmQgY2xvbmVkIHNsaWRlcyB3aXRoIGdlbmVyYXRlZCBwYXR0ZXJuLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xuICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgICAgICB2YXIgX0NvbXBvbmVudHMkSHRtbCA9IENvbXBvbmVudHMuSHRtbCxcbiAgICAgICAgICAgIHdyYXBwZXIgPSBfQ29tcG9uZW50cyRIdG1sLndyYXBwZXIsXG4gICAgICAgICAgICBzbGlkZXMgPSBfQ29tcG9uZW50cyRIdG1sLnNsaWRlcztcblxuXG4gICAgICAgIHZhciBoYWxmID0gTWF0aC5mbG9vcihpdGVtcy5sZW5ndGggLyAyKTtcbiAgICAgICAgdmFyIHByZXBlbmQgPSBpdGVtcy5zbGljZSgwLCBoYWxmKS5yZXZlcnNlKCk7XG4gICAgICAgIHZhciBhcHBlbmQgPSBpdGVtcy5zbGljZShoYWxmLCBpdGVtcy5sZW5ndGgpO1xuICAgICAgICB2YXIgd2lkdGggPSBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGggKyAncHgnO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXBwZW5kLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChhcHBlbmRbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgcHJlcGVuZC5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgd3JhcHBlci5pbnNlcnRCZWZvcmUocHJlcGVuZFtfaTJdLCBzbGlkZXNbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgaXRlbXMubGVuZ3RoOyBfaTMrKykge1xuICAgICAgICAgIGl0ZW1zW19pM10uc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSBhbGwgY2xvbmVkIHNsaWRlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcztcblxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5yZW1vdmVDaGlsZChpdGVtc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lKENsb25lcywgJ2dyb3cnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgYWRkaXRpb25hbCBkaW1lbnRpb25zIHZhbHVlIGNhdXNlZCBieSBjbG9uZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIChDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGggKyBDb21wb25lbnRzLkdhcHMudmFsdWUpICogQ2xvbmVzLml0ZW1zLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBhZGRpdGlvbmFsIHNsaWRlJ3MgY2xvbmVzOlxuICAgICAqIC0gd2hpbGUgZ2xpZGUncyB0eXBlIGlzIGBjYXJvdXNlbGBcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIENsb25lcy5yZW1vdmUoKTtcbiAgICAgIENsb25lcy5tb3VudCgpO1xuICAgICAgQ2xvbmVzLmFwcGVuZCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kIGFkZGl0aW9uYWwgc2xpZGUncyBjbG9uZXM6XG4gICAgICogLSB3aGlsZSBnbGlkZSdzIHR5cGUgaXMgYGNhcm91c2VsYFxuICAgICAqL1xuICAgIEV2ZW50cy5vbignYnVpbGQuYmVmb3JlJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSkge1xuICAgICAgICBDbG9uZXMuYXBwZW5kKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgY2xvbmVzIEhUTUxFbGVtZW50czpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIGJyaW5nIEhUTUwgdG8gaXRzIGluaXRpYWwgc3RhdGVcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBDbG9uZXMucmVtb3ZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQ2xvbmVzO1xuICB9XG5cbiAgdmFyIEV2ZW50c0JpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBFdmVudHNCaW5kZXIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gRXZlbnRzQmluZGVyKCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBFdmVudHNCaW5kZXIpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50cyBsaXN0ZW5lcnMgdG8gYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXl9IGV2ZW50c1xuICAgICAqIEBwYXJhbSAge0VsZW1lbnR8V2luZG93fERvY3VtZW50fSBlbFxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjbG9zdXJlXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbnxPYmplY3R9IGNhcHR1cmVcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuXG5cbiAgICBjcmVhdGVDbGFzcyhFdmVudHNCaW5kZXIsIFt7XG4gICAgICBrZXk6ICdvbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnRzLCBlbCwgY2xvc3VyZSkge1xuICAgICAgICB2YXIgY2FwdHVyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50cykpIHtcbiAgICAgICAgICBldmVudHMgPSBbZXZlbnRzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRzW2ldXSA9IGNsb3N1cmU7XG5cbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50c1tpXSwgdGhpcy5saXN0ZW5lcnNbZXZlbnRzW2ldXSwgY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBmcm9tIGFycm93cyBIVE1MIGVsZW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge1N0cmluZ3xBcnJheX0gZXZlbnRzXG4gICAgICAgKiBAcGFyYW0gIHtFbGVtZW50fFdpbmRvd3xEb2N1bWVudH0gZWxcbiAgICAgICAqIEBwYXJhbSAge0Jvb2xlYW58T2JqZWN0fSBjYXB0dXJlXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvZmYnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudHMsIGVsKSB7XG4gICAgICAgIHZhciBjYXB0dXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICAgICAgICBpZiAoaXNTdHJpbmcoZXZlbnRzKSkge1xuICAgICAgICAgIGV2ZW50cyA9IFtldmVudHNdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50c1tpXSwgdGhpcy5saXN0ZW5lcnNbZXZlbnRzW2ldXSwgY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBEZXN0cm95IGNvbGxlY3RlZCBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge1ZvaWR9XG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVycztcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIEV2ZW50c0JpbmRlcjtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFJlc2l6ZSAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgICAqL1xuICAgIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XG5cbiAgICB2YXIgUmVzaXplID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBJbml0aWFsaXplcyB3aW5kb3cgYmluZGluZ3MuXG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQmluZHMgYHJlenNpemVgIGxpc3RlbmVyIHRvIHRoZSB3aW5kb3cuXG4gICAgICAgKiBJdCdzIGEgY29zdGx5IGV2ZW50LCBzbyB3ZSBhcmUgZGVib3VuY2luZyBpdC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgICBCaW5kZXIub24oJ3Jlc2l6ZScsIHdpbmRvdywgdGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIEV2ZW50cy5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgfSwgR2xpZGUuc2V0dGluZ3MudGhyb3R0bGUpKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBVbmJpbmRzIGxpc3RlbmVycyBmcm9tIHRoZSB3aW5kb3cuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICAgIEJpbmRlci5vZmYoJ3Jlc2l6ZScsIHdpbmRvdyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBiaW5kaW5ncyBmcm9tIHdpbmRvdzpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIHJlbW92ZSBhZGRlZCBFdmVudExpc3RlbmVyXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgUmVzaXplLnVuYmluZCgpO1xuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBSZXNpemU7XG4gIH1cblxuICB2YXIgVkFMSURfRElSRUNUSU9OUyA9IFsnbHRyJywgJ3J0bCddO1xuICB2YXIgRkxJUEVEX01PVkVNRU5UUyA9IHtcbiAgICAnPic6ICc8JyxcbiAgICAnPCc6ICc+JyxcbiAgICAnPSc6ICc9J1xuICB9O1xuXG4gIGZ1bmN0aW9uIERpcmVjdGlvbiAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIHZhciBEaXJlY3Rpb24gPSB7XG4gICAgICAvKipcbiAgICAgICAqIFNldHVwcyBnYXAgdmFsdWUgYmFzZWQgb24gc2V0dGluZ3MuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gR2xpZGUuc2V0dGluZ3MuZGlyZWN0aW9uO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlc29sdmVzIHBhdHRlcm4gYmFzZWQgb24gZGlyZWN0aW9uIHZhbHVlXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdHRlcm5cbiAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUocGF0dGVybikge1xuICAgICAgICB2YXIgdG9rZW4gPSBwYXR0ZXJuLnNsaWNlKDAsIDEpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzKCdydGwnKSkge1xuICAgICAgICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KHRva2VuKS5qb2luKEZMSVBFRF9NT1ZFTUVOVFNbdG9rZW5dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrcyB2YWx1ZSBvZiBkaXJlY3Rpb24gbW9kZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uXG4gICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgaXM6IGZ1bmN0aW9uIGlzKGRpcmVjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gZGlyZWN0aW9uO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEFwcGxpZXMgZGlyZWN0aW9uIGNsYXNzIHRvIHRoZSByb290IEhUTUwgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3MoKSB7XG4gICAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5hZGQoR2xpZGUuc2V0dGluZ3MuY2xhc3Nlcy5kaXJlY3Rpb25bdGhpcy52YWx1ZV0pO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgZGlyZWN0aW9uIGNsYXNzIGZyb20gdGhlIHJvb3QgSFRNTCBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcygpIHtcbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmRpcmVjdGlvblt0aGlzLnZhbHVlXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShEaXJlY3Rpb24sICd2YWx1ZScsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGlyZWN0aW9uLl92O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdGhlIGRpcmVjdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChWQUxJRF9ESVJFQ1RJT05TLmluZGV4T2YodmFsdWUpID4gLTEpIHtcbiAgICAgICAgICBEaXJlY3Rpb24uX3YgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKCdEaXJlY3Rpb24gdmFsdWUgbXVzdCBiZSBgbHRyYCBvciBgcnRsYCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBkaXJlY3Rpb24gY2xhc3M6XG4gICAgICogLSBvbiBkZXN0cm95IHRvIGJyaW5nIEhUTUwgdG8gaXRzIGluaXRpYWwgc3RhdGVcbiAgICAgKiAtIG9uIHVwZGF0ZSB0byByZW1vdmUgY2xhc3MgYmVmb3JlIHJlYXBwbGluZyBiZWxsb3dcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydkZXN0cm95JywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBEaXJlY3Rpb24ucmVtb3ZlQ2xhc3MoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW91bnQgY29tcG9uZW50OlxuICAgICAqIC0gb24gdXBkYXRlIHRvIHJlZmxlY3QgY2hhbmdlcyBpbiBkaXJlY3Rpb24gdmFsdWVcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIERpcmVjdGlvbi5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQXBwbHkgZGlyZWN0aW9uIGNsYXNzOlxuICAgICAqIC0gYmVmb3JlIGJ1aWxkaW5nIHRvIGFwcGx5IGNsYXNzIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAqIC0gb24gdXBkYXRpbmcgdG8gcmVhcHBseSBkaXJlY3Rpb24gY2xhc3MgdGhhdCBtYXkgY2hhbmdlZFxuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ2J1aWxkLmJlZm9yZScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgRGlyZWN0aW9uLmFkZENsYXNzKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gRGlyZWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZmxlY3RzIHZhbHVlIG9mIGdsaWRlIG1vdmVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IEdsaWRlXG4gICAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBSdGwgKEdsaWRlLCBDb21wb25lbnRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogTmVnYXRlcyB0aGUgcGFzc2VkIHRyYW5zbGF0ZSBpZiBnbGlkZSBpcyBpbiBSVEwgb3B0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIG1vZGlmeTogZnVuY3Rpb24gbW9kaWZ5KHRyYW5zbGF0ZSkge1xuICAgICAgICBpZiAoQ29tcG9uZW50cy5EaXJlY3Rpb24uaXMoJ3J0bCcpKSB7XG4gICAgICAgICAgcmV0dXJuIC10cmFuc2xhdGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBnbGlkZSBtb3ZlbWVudCB3aXRoIGEgYGdhcGAgc2V0dGluZ3MuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIEdhcCAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBNb2RpZmllcyBwYXNzZWQgdHJhbnNsYXRlIHZhbHVlIHdpdGggbnVtYmVyIGluIHRoZSBgZ2FwYCBzZXR0aW5ncy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBtb2RpZnk6IGZ1bmN0aW9uIG1vZGlmeSh0cmFuc2xhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSArIENvbXBvbmVudHMuR2Fwcy52YWx1ZSAqIEdsaWRlLmluZGV4O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBnbGlkZSBtb3ZlbWVudCB3aXRoIHdpZHRoIG9mIGFkZGl0aW9uYWwgY2xvbmVzIHdpZHRoLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IEdsaWRlXG4gICAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBHcm93IChHbGlkZSwgQ29tcG9uZW50cykge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIEFkZHMgdG8gdGhlIHBhc3NlZCB0cmFuc2xhdGUgd2lkdGggb2YgdGhlIGhhbGYgb2YgY2xvbmVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIG1vZGlmeTogZnVuY3Rpb24gbW9kaWZ5KHRyYW5zbGF0ZSkge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRlICsgQ29tcG9uZW50cy5DbG9uZXMuZ3JvdyAvIDI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGdsaWRlIG1vdmVtZW50IHdpdGggYSBgcGVla2Agc2V0dGluZ3MuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIFBlZWtpbmcgKEdsaWRlLCBDb21wb25lbnRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogTW9kaWZpZXMgcGFzc2VkIHRyYW5zbGF0ZSB2YWx1ZSB3aXRoIGEgYHBlZWtgIHNldHRpbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7TnVtYmVyfSB0cmFuc2xhdGVcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgbW9kaWZ5OiBmdW5jdGlvbiBtb2RpZnkodHJhbnNsYXRlKSB7XG4gICAgICAgIGlmIChHbGlkZS5zZXR0aW5ncy5mb2N1c0F0ID49IDApIHtcbiAgICAgICAgICB2YXIgcGVlayA9IENvbXBvbmVudHMuUGVlay52YWx1ZTtcblxuICAgICAgICAgIGlmIChpc09iamVjdChwZWVrKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSAtIHBlZWsuYmVmb3JlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUgLSBwZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgZ2xpZGUgbW92ZW1lbnQgd2l0aCBhIGBmb2N1c0F0YCBzZXR0aW5ncy5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBHbGlkZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gRm9jdXNpbmcgKEdsaWRlLCBDb21wb25lbnRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogTW9kaWZpZXMgcGFzc2VkIHRyYW5zbGF0ZSB2YWx1ZSB3aXRoIGluZGV4IGluIHRoZSBgZm9jdXNBdGAgc2V0dGluZy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBtb2RpZnk6IGZ1bmN0aW9uIG1vZGlmeSh0cmFuc2xhdGUpIHtcbiAgICAgICAgdmFyIGdhcCA9IENvbXBvbmVudHMuR2Fwcy52YWx1ZTtcbiAgICAgICAgdmFyIHdpZHRoID0gQ29tcG9uZW50cy5TaXplcy53aWR0aDtcbiAgICAgICAgdmFyIGZvY3VzQXQgPSBHbGlkZS5zZXR0aW5ncy5mb2N1c0F0O1xuICAgICAgICB2YXIgc2xpZGVXaWR0aCA9IENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aDtcblxuICAgICAgICBpZiAoZm9jdXNBdCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlIC0gKHdpZHRoIC8gMiAtIHNsaWRlV2lkdGggLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGUgLSBzbGlkZVdpZHRoICogZm9jdXNBdCAtIGdhcCAqIGZvY3VzQXQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGRpZmZyZW50IHRyYW5zZm9ybWVycyBvbiB0cmFuc2xhdGUgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIG11dGF0b3IgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICAvKipcbiAgICAgKiBNZXJnZSBpbnN0YW5jZSB0cmFuc2Zvcm1lcnMgd2l0aCBjb2xsZWN0aW9uIG9mIGRlZmF1bHQgdHJhbnNmb3JtZXJzLlxuICAgICAqIEl0J3MgaW1wb3J0YW50IHRoYXQgdGhlIFJ0bCBjb21wb25lbnQgYmUgbGFzdCBvbiB0aGUgbGlzdCxcbiAgICAgKiBzbyBpdCByZWZsZWN0cyBhbGwgcHJldmlvdXMgdHJhbnNmb3JtYXRpb25zLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHZhciBUUkFOU0ZPUk1FUlMgPSBbR2FwLCBHcm93LCBQZWVraW5nLCBGb2N1c2luZ10uY29uY2F0KEdsaWRlLl90LCBbUnRsXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBQaXBsaW5lcyB0cmFuc2xhdGUgdmFsdWUgd2l0aCByZWdpc3RlcmVkIHRyYW5zZm9ybWVycy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBtdXRhdGU6IGZ1bmN0aW9uIG11dGF0ZSh0cmFuc2xhdGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUUkFOU0ZPUk1FUlMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSBUUkFOU0ZPUk1FUlNbaV07XG5cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0cmFuc2Zvcm1lcikgJiYgaXNGdW5jdGlvbih0cmFuc2Zvcm1lcigpLm1vZGlmeSkpIHtcbiAgICAgICAgICAgIHRyYW5zbGF0ZSA9IHRyYW5zZm9ybWVyKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpLm1vZGlmeSh0cmFuc2xhdGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YXJuKCdUcmFuc2Zvcm1lciBzaG91bGQgYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggYG1vZGlmeSgpYCBtZXRob2QnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBUcmFuc2xhdGUgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICB2YXIgVHJhbnNsYXRlID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIHZhbHVlIG9mIHRyYW5zbGF0ZSBvbiBIVE1MIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gbXV0YXRvcihHbGlkZSwgQ29tcG9uZW50cykubXV0YXRlKHZhbHVlKTtcblxuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIC0xICogdHJhbnNmb3JtICsgJ3B4LCAwcHgsIDBweCknO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgdmFsdWUgb2YgdHJhbnNsYXRlIGZyb20gSFRNTCBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IG5ldyB0cmFuc2xhdGUgdmFsdWU6XG4gICAgICogLSBvbiBtb3ZlIHRvIHJlZmxlY3QgaW5kZXggY2hhbmdlXG4gICAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJIHRvIHJlZmxlY3QgcG9zc2libGUgY2hhbmdlcyBpbiBvcHRpb25zXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdtb3ZlJywgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHZhciBnYXAgPSBDb21wb25lbnRzLkdhcHMudmFsdWU7XG4gICAgICB2YXIgbGVuZ3RoID0gQ29tcG9uZW50cy5TaXplcy5sZW5ndGg7XG4gICAgICB2YXIgd2lkdGggPSBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGg7XG5cbiAgICAgIGlmIChHbGlkZS5pc1R5cGUoJ2Nhcm91c2VsJykgJiYgQ29tcG9uZW50cy5SdW4uaXNPZmZzZXQoJzwnKSkge1xuICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIEV2ZW50cy5lbWl0KCd0cmFuc2xhdGUuanVtcCcpO1xuXG4gICAgICAgICAgVHJhbnNsYXRlLnNldCh3aWR0aCAqIChsZW5ndGggLSAxKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBUcmFuc2xhdGUuc2V0KC13aWR0aCAtIGdhcCAqIGxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChHbGlkZS5pc1R5cGUoJ2Nhcm91c2VsJykgJiYgQ29tcG9uZW50cy5SdW4uaXNPZmZzZXQoJz4nKSkge1xuICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIEV2ZW50cy5lbWl0KCd0cmFuc2xhdGUuanVtcCcpO1xuXG4gICAgICAgICAgVHJhbnNsYXRlLnNldCgwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFRyYW5zbGF0ZS5zZXQod2lkdGggKiBsZW5ndGggKyBnYXAgKiBsZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gVHJhbnNsYXRlLnNldChjb250ZXh0Lm1vdmVtZW50KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0cmFuc2xhdGU6XG4gICAgICogLSBvbiBkZXN0cm95aW5nIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGFsIHN0YXRlXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgVHJhbnNsYXRlLnJlbW92ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24gKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICAvKipcbiAgICAgKiBIb2xkcyBpbmFjdGl2aXR5IHN0YXR1cyBvZiB0cmFuc2l0aW9uLlxuICAgICAqIFdoZW4gdHJ1ZSB0cmFuc2l0aW9uIGlzIG5vdCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAgdmFyIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICB2YXIgVHJhbnNpdGlvbiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQ29tcG9zZXMgc3RyaW5nIG9mIHRoZSBDU1MgdHJhbnNpdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgICAqL1xuICAgICAgY29tcG9zZTogZnVuY3Rpb24gY29tcG9zZShwcm9wZXJ0eSkge1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcblxuICAgICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BlcnR5ICsgJyAnICsgdGhpcy5kdXJhdGlvbiArICdtcyAnICsgc2V0dGluZ3MuYW5pbWF0aW9uVGltaW5nRnVuYztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eSArICcgMG1zICcgKyBzZXR0aW5ncy5hbmltYXRpb25UaW1pbmdGdW5jO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdHJhbnNpdGlvbiBvbiBIVE1MIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTdHJpbmc9fSBwcm9wZXJ0eVxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3RyYW5zZm9ybSc7XG5cbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIuc3R5bGUudHJhbnNpdGlvbiA9IHRoaXMuY29tcG9zZShwcm9wZXJ0eSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyB2YWx1ZSBvZiB0cmFuc2l0aW9uIGZyb20gSFRNTCBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUnVucyBjYWxsYmFjayBhZnRlciBhbmltYXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBhZnRlcjogZnVuY3Rpb24gYWZ0ZXIoY2FsbGJhY2spIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSwgdGhpcy5kdXJhdGlvbik7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogRW5hYmxlIHRyYW5zaXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zZXQoKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBEaXNhYmxlIHRyYW5zaXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuc2V0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShUcmFuc2l0aW9uLCAnZHVyYXRpb24nLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24gYmFzZWRcbiAgICAgICAqIG9uIGN1cnJlbnRseSBydW5uaW5nIGFuaW1hdGlvbiB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuXG4gICAgICAgIGlmIChHbGlkZS5pc1R5cGUoJ3NsaWRlcicpICYmIENvbXBvbmVudHMuUnVuLm9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5yZXdpbmREdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXR0aW5ncy5hbmltYXRpb25EdXJhdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNldCB0cmFuc2l0aW9uIGBzdHlsZWAgdmFsdWU6XG4gICAgICogLSBvbiBlYWNoIG1vdmluZywgYmVjYXVzZSBpdCBtYXkgYmUgY2xlYXJlZCBieSBvZmZzZXQgbW92ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignbW92ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFRyYW5zaXRpb24uc2V0KCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHRyYW5zaXRpb246XG4gICAgICogLSBiZWZvcmUgaW5pdGlhbCBidWlsZCB0byBhdm9pZCB0cmFuc2l0aW9uaW5nIGZyb20gYDBgIHRvIGBzdGFydEF0YCBpbmRleFxuICAgICAqIC0gd2hpbGUgcmVzaXppbmcgd2luZG93IGFuZCByZWNhbGN1bGF0aW5nIGRpbWVudGlvbnNcbiAgICAgKiAtIG9uIGp1bXBpbmcgZnJvbSBvZmZzZXQgdHJhbnNpdGlvbiBhdCBzdGFydCBhbmQgZW5kIGVkZ2VzIGluIGBjYXJvdXNlbGAgdHlwZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ2J1aWxkLmJlZm9yZScsICdyZXNpemUnLCAndHJhbnNsYXRlLmp1bXAnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgVHJhbnNpdGlvbi5kaXNhYmxlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdHJhbnNpdGlvbjpcbiAgICAgKiAtIG9uIGVhY2ggcnVubmluZywgYmVjYXVzZSBpdCBtYXkgYmUgZGlzYWJsZWQgYnkgb2Zmc2V0IG1vdmVcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ3J1bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFRyYW5zaXRpb24uZW5hYmxlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdHJhbnNpdGlvbjpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0YWwgc3RhdGVcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBUcmFuc2l0aW9uLnJlbW92ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFRyYW5zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogVGVzdCB2aWEgYSBnZXR0ZXIgaW4gdGhlIG9wdGlvbnMgb2JqZWN0IHRvIHNlZVxuICAgKiBpZiB0aGUgcGFzc2l2ZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9FdmVudExpc3RlbmVyT3B0aW9ucy9ibG9iL2doLXBhZ2VzL2V4cGxhaW5lci5tZCNmZWF0dXJlLWRldGVjdGlvblxuICAgKi9cblxuICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciBzdXBwb3J0c1Bhc3NpdmUkMSA9IHN1cHBvcnRzUGFzc2l2ZTtcblxuICB2YXIgU1RBUlRfRVZFTlRTID0gWyd0b3VjaHN0YXJ0JywgJ21vdXNlZG93biddO1xuICB2YXIgTU9WRV9FVkVOVFMgPSBbJ3RvdWNobW92ZScsICdtb3VzZW1vdmUnXTtcbiAgdmFyIEVORF9FVkVOVFMgPSBbJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJywgJ21vdXNldXAnLCAnbW91c2VsZWF2ZSddO1xuICB2YXIgTU9VU0VfRVZFTlRTID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnLCAnbW91c2VsZWF2ZSddO1xuXG4gIGZ1bmN0aW9uIFN3aXBlIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAgICovXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAgIHZhciBzd2lwZVNpbiA9IDA7XG4gICAgdmFyIHN3aXBlU3RhcnRYID0gMDtcbiAgICB2YXIgc3dpcGVTdGFydFkgPSAwO1xuICAgIHZhciBkaXNhYmxlZCA9IGZhbHNlO1xuICAgIHZhciBjYXB0dXJlID0gc3VwcG9ydHNQYXNzaXZlJDEgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuXG4gICAgdmFyIFN3aXBlID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBJbml0aWFsaXplcyBzd2lwZSBiaW5kaW5ncy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMuYmluZFN3aXBlU3RhcnQoKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGVyIGZvciBgc3dpcGVzdGFydGAgZXZlbnQuIENhbGN1bGF0ZXMgZW50cnkgcG9pbnRzIG9mIHRoZSB1c2VyJ3MgdGFwLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KGV2ZW50KSB7XG4gICAgICAgIGlmICghZGlzYWJsZWQgJiYgIUdsaWRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG5cbiAgICAgICAgICB2YXIgc3dpcGUgPSB0aGlzLnRvdWNoZXMoZXZlbnQpO1xuXG4gICAgICAgICAgc3dpcGVTaW4gPSBudWxsO1xuICAgICAgICAgIHN3aXBlU3RhcnRYID0gdG9JbnQoc3dpcGUucGFnZVgpO1xuICAgICAgICAgIHN3aXBlU3RhcnRZID0gdG9JbnQoc3dpcGUucGFnZVkpO1xuXG4gICAgICAgICAgdGhpcy5iaW5kU3dpcGVNb3ZlKCk7XG4gICAgICAgICAgdGhpcy5iaW5kU3dpcGVFbmQoKTtcblxuICAgICAgICAgIEV2ZW50cy5lbWl0KCdzd2lwZS5zdGFydCcpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogSGFuZGxlciBmb3IgYHN3aXBlbW92ZWAgZXZlbnQuIENhbGN1bGF0ZXMgdXNlcidzIHRhcCBhbmdsZSBhbmQgZGlzdGFuY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgKi9cbiAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFHbGlkZS5kaXNhYmxlZCkge1xuICAgICAgICAgIHZhciBfR2xpZGUkc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncyxcbiAgICAgICAgICAgICAgdG91Y2hBbmdsZSA9IF9HbGlkZSRzZXR0aW5ncy50b3VjaEFuZ2xlLFxuICAgICAgICAgICAgICB0b3VjaFJhdGlvID0gX0dsaWRlJHNldHRpbmdzLnRvdWNoUmF0aW8sXG4gICAgICAgICAgICAgIGNsYXNzZXMgPSBfR2xpZGUkc2V0dGluZ3MuY2xhc3NlcztcblxuXG4gICAgICAgICAgdmFyIHN3aXBlID0gdGhpcy50b3VjaGVzKGV2ZW50KTtcblxuICAgICAgICAgIHZhciBzdWJFeFN4ID0gdG9JbnQoc3dpcGUucGFnZVgpIC0gc3dpcGVTdGFydFg7XG4gICAgICAgICAgdmFyIHN1YkV5U3kgPSB0b0ludChzd2lwZS5wYWdlWSkgLSBzd2lwZVN0YXJ0WTtcbiAgICAgICAgICB2YXIgcG93RVggPSBNYXRoLmFicyhzdWJFeFN4IDw8IDIpO1xuICAgICAgICAgIHZhciBwb3dFWSA9IE1hdGguYWJzKHN1YkV5U3kgPDwgMik7XG4gICAgICAgICAgdmFyIHN3aXBlSHlwb3RlbnVzZSA9IE1hdGguc3FydChwb3dFWCArIHBvd0VZKTtcbiAgICAgICAgICB2YXIgc3dpcGVDYXRoZXR1cyA9IE1hdGguc3FydChwb3dFWSk7XG5cbiAgICAgICAgICBzd2lwZVNpbiA9IE1hdGguYXNpbihzd2lwZUNhdGhldHVzIC8gc3dpcGVIeXBvdGVudXNlKTtcblxuICAgICAgICAgIGlmIChzd2lwZVNpbiAqIDE4MCAvIE1hdGguUEkgPCB0b3VjaEFuZ2xlKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgQ29tcG9uZW50cy5Nb3ZlLm1ha2Uoc3ViRXhTeCAqIHRvRmxvYXQodG91Y2hSYXRpbykpO1xuXG4gICAgICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QuYWRkKGNsYXNzZXMuZHJhZ2dpbmcpO1xuXG4gICAgICAgICAgICBFdmVudHMuZW1pdCgnc3dpcGUubW92ZScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogSGFuZGxlciBmb3IgYHN3aXBlZW5kYCBldmVudC4gRmluaXRpYWxpemVzIHVzZXIncyB0YXAgYW5kIGRlY2lkZXMgYWJvdXQgZ2xpZGUgbW92ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGVuZDogZnVuY3Rpb24gZW5kKGV2ZW50KSB7XG4gICAgICAgIGlmICghR2xpZGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcblxuICAgICAgICAgIHZhciBzd2lwZSA9IHRoaXMudG91Y2hlcyhldmVudCk7XG4gICAgICAgICAgdmFyIHRocmVzaG9sZCA9IHRoaXMudGhyZXNob2xkKGV2ZW50KTtcblxuICAgICAgICAgIHZhciBzd2lwZURpc3RhbmNlID0gc3dpcGUucGFnZVggLSBzd2lwZVN0YXJ0WDtcbiAgICAgICAgICB2YXIgc3dpcGVEZWcgPSBzd2lwZVNpbiAqIDE4MCAvIE1hdGguUEk7XG4gICAgICAgICAgdmFyIHN0ZXBzID0gTWF0aC5yb3VuZChzd2lwZURpc3RhbmNlIC8gQ29tcG9uZW50cy5TaXplcy5zbGlkZVdpZHRoKTtcblxuICAgICAgICAgIHRoaXMuZW5hYmxlKCk7XG5cbiAgICAgICAgICBpZiAoc3dpcGVEaXN0YW5jZSA+IHRocmVzaG9sZCAmJiBzd2lwZURlZyA8IHNldHRpbmdzLnRvdWNoQW5nbGUpIHtcbiAgICAgICAgICAgIC8vIFdoaWxlIHN3aXBlIGlzIHBvc2l0aXZlIGFuZCBncmVhdGVyIHRoYW4gdGhyZXNob2xkIG1vdmUgYmFja3dhcmQuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MucGVyVG91Y2gpIHtcbiAgICAgICAgICAgICAgc3RlcHMgPSBNYXRoLm1pbihzdGVwcywgdG9JbnQoc2V0dGluZ3MucGVyVG91Y2gpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKENvbXBvbmVudHMuRGlyZWN0aW9uLmlzKCdydGwnKSkge1xuICAgICAgICAgICAgICBzdGVwcyA9IC1zdGVwcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZShDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlKCc8JyArIHN0ZXBzKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzd2lwZURpc3RhbmNlIDwgLXRocmVzaG9sZCAmJiBzd2lwZURlZyA8IHNldHRpbmdzLnRvdWNoQW5nbGUpIHtcbiAgICAgICAgICAgIC8vIFdoaWxlIHN3aXBlIGlzIG5lZ2F0aXZlIGFuZCBsb3dlciB0aGFuIG5lZ2F0aXZlIHRocmVzaG9sZCBtb3ZlIGZvcndhcmQuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MucGVyVG91Y2gpIHtcbiAgICAgICAgICAgICAgc3RlcHMgPSBNYXRoLm1heChzdGVwcywgLXRvSW50KHNldHRpbmdzLnBlclRvdWNoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChDb21wb25lbnRzLkRpcmVjdGlvbi5pcygncnRsJykpIHtcbiAgICAgICAgICAgICAgc3RlcHMgPSAtc3RlcHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZSgnPicgKyBzdGVwcykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXaGlsZSBzd2lwZSBkb24ndCByZWFjaCBkaXN0YW5jZSBhcHBseSBwcmV2aW91cyB0cmFuc2Zvcm0uXG4gICAgICAgICAgICBDb21wb25lbnRzLk1vdmUubWFrZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5yZW1vdmUoc2V0dGluZ3MuY2xhc3Nlcy5kcmFnZ2luZyk7XG5cbiAgICAgICAgICB0aGlzLnVuYmluZFN3aXBlTW92ZSgpO1xuICAgICAgICAgIHRoaXMudW5iaW5kU3dpcGVFbmQoKTtcblxuICAgICAgICAgIEV2ZW50cy5lbWl0KCdzd2lwZS5lbmQnKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEJpbmRzIHN3aXBlJ3Mgc3RhcnRpbmcgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYmluZFN3aXBlU3RhcnQ6IGZ1bmN0aW9uIGJpbmRTd2lwZVN0YXJ0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5zd2lwZVRocmVzaG9sZCkge1xuICAgICAgICAgIEJpbmRlci5vbihTVEFSVF9FVkVOVFNbMF0sIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICB9LCBjYXB0dXJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5kcmFnVGhyZXNob2xkKSB7XG4gICAgICAgICAgQmluZGVyLm9uKFNUQVJUX0VWRU5UU1sxXSwgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnQoZXZlbnQpO1xuICAgICAgICAgIH0sIGNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogVW5iaW5kcyBzd2lwZSdzIHN0YXJ0aW5nIGV2ZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHVuYmluZFN3aXBlU3RhcnQ6IGZ1bmN0aW9uIHVuYmluZFN3aXBlU3RhcnQoKSB7XG4gICAgICAgIEJpbmRlci5vZmYoU1RBUlRfRVZFTlRTWzBdLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgY2FwdHVyZSk7XG4gICAgICAgIEJpbmRlci5vZmYoU1RBUlRfRVZFTlRTWzFdLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgY2FwdHVyZSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQmluZHMgc3dpcGUncyBtb3ZpbmcgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYmluZFN3aXBlTW92ZTogZnVuY3Rpb24gYmluZFN3aXBlTW92ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgQmluZGVyLm9uKE1PVkVfRVZFTlRTLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgdGhyb3R0bGUoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgX3RoaXMyLm1vdmUoZXZlbnQpO1xuICAgICAgICB9LCBHbGlkZS5zZXR0aW5ncy50aHJvdHRsZSksIGNhcHR1cmUpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFVuYmluZHMgc3dpcGUncyBtb3ZpbmcgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgdW5iaW5kU3dpcGVNb3ZlOiBmdW5jdGlvbiB1bmJpbmRTd2lwZU1vdmUoKSB7XG4gICAgICAgIEJpbmRlci5vZmYoTU9WRV9FVkVOVFMsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBjYXB0dXJlKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBCaW5kcyBzd2lwZSdzIGVuZGluZyBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kU3dpcGVFbmQ6IGZ1bmN0aW9uIGJpbmRTd2lwZUVuZCgpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgQmluZGVyLm9uKEVORF9FVkVOVFMsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBfdGhpczMuZW5kKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogVW5iaW5kcyBzd2lwZSdzIGVuZGluZyBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICB1bmJpbmRTd2lwZUVuZDogZnVuY3Rpb24gdW5iaW5kU3dpcGVFbmQoKSB7XG4gICAgICAgIEJpbmRlci5vZmYoRU5EX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIE5vcm1hbGl6ZXMgZXZlbnQgdG91Y2hlcyBwb2ludHMgYWNjb3J0aW5nIHRvIGRpZmZlcmVudCB0eXBlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAqL1xuICAgICAgdG91Y2hlczogZnVuY3Rpb24gdG91Y2hlcyhldmVudCkge1xuICAgICAgICBpZiAoTU9VU0VfRVZFTlRTLmluZGV4T2YoZXZlbnQudHlwZSkgPiAtMSkge1xuICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBldmVudC50b3VjaGVzWzBdIHx8IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgbWluaW11bSBzd2lwZSBkaXN0YW5jZSBzZXR0aW5ncyBiYXNlZCBvbiBldmVudCB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgdGhyZXNob2xkOiBmdW5jdGlvbiB0aHJlc2hvbGQoZXZlbnQpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG5cbiAgICAgICAgaWYgKE1PVVNFX0VWRU5UUy5pbmRleE9mKGV2ZW50LnR5cGUpID4gLTEpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGluZ3MuZHJhZ1RocmVzaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXR0aW5ncy5zd2lwZVRocmVzaG9sZDtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBFbmFibGVzIHN3aXBlIGV2ZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3NlbGZ9XG4gICAgICAgKi9cbiAgICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgIENvbXBvbmVudHMuVHJhbnNpdGlvbi5lbmFibGUoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBEaXNhYmxlcyBzd2lwZSBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzZWxmfVxuICAgICAgICovXG4gICAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgICBkaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmRpc2FibGUoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkIGNvbXBvbmVudCBjbGFzczpcbiAgICAgKiAtIGFmdGVyIGluaXRpYWwgYnVpbGRpbmdcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2J1aWxkLmFmdGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LmFkZChHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLnN3aXBlYWJsZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgc3dpcGluZyBiaW5kaW5nczpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIHJlbW92ZSBhZGRlZCBFdmVudExpc3RlbmVyc1xuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFN3aXBlLnVuYmluZFN3aXBlU3RhcnQoKTtcbiAgICAgIFN3aXBlLnVuYmluZFN3aXBlTW92ZSgpO1xuICAgICAgU3dpcGUudW5iaW5kU3dpcGVFbmQoKTtcbiAgICAgIEJpbmRlci5kZXN0cm95KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gU3dpcGU7XG4gIH1cblxuICBmdW5jdGlvbiBJbWFnZXMgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxuICAgICAqXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cbiAgICAgKi9cbiAgICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gICAgdmFyIEltYWdlcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQmluZHMgbGlzdGVuZXIgdG8gZ2xpZGUgd3JhcHBlci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEJpbmRzIGBkcmFnc3RhcnRgIGV2ZW50IG9uIHdyYXBwZXIgdG8gcHJldmVudCBkcmFnZ2luZyBpbWFnZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgICAgQmluZGVyLm9uKCdkcmFnc3RhcnQnLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgdGhpcy5kcmFnc3RhcnQpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFVuYmluZHMgYGRyYWdzdGFydGAgZXZlbnQgb24gd3JhcHBlci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgICAgQmluZGVyLm9mZignZHJhZ3N0YXJ0JywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEV2ZW50IGhhbmRsZXIuIFByZXZlbnRzIGRyYWdnaW5nLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGRyYWdzdGFydDogZnVuY3Rpb24gZHJhZ3N0YXJ0KGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBiaW5kaW5ncyBmcm9tIGltYWdlczpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIHJlbW92ZSBhZGRlZCBFdmVudExpc3RlbmVyc1xuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIEltYWdlcy51bmJpbmQoKTtcbiAgICAgIEJpbmRlci5kZXN0cm95KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gSW1hZ2VzO1xuICB9XG5cbiAgZnVuY3Rpb24gQW5jaG9ycyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgICAqL1xuICAgIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyBkZXRhY2hpbmcgc3RhdHVzIG9mIGFuY2hvcnMuXG4gICAgICogUHJldmVudHMgZGV0YWNoaW5nIG9mIGFscmVhZHkgZGV0YWNoZWQgYW5jaG9ycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAgdmFyIGRldGFjaGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyBwcmV2ZW50aW5nIHN0YXR1cyBvZiBhbmNob3JzLlxuICAgICAqIElmIGB0cnVlYCByZWRpcmVjdGlvbiBhZnRlciBjbGljayB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB2YXIgcHJldmVudGVkID0gZmFsc2U7XG5cbiAgICB2YXIgQW5jaG9ycyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0dXBzIGEgaW5pdGlhbCBzdGF0ZSBvZiBhbmNob3JzIGNvbXBvbmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSG9sZHMgY29sbGVjdGlvbiBvZiBhbmNob3JzIGVsZW1lbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAdHlwZSB7SFRNTENvbGxlY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9hID0gQ29tcG9uZW50cy5IdG1sLndyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnYScpO1xuXG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEJpbmRzIGV2ZW50cyB0byBhbmNob3JzIGluc2lkZSBhIHRyYWNrLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICAgIEJpbmRlci5vbignY2xpY2snLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgdGhpcy5jbGljayk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogVW5iaW5kcyBldmVudHMgYXR0YWNoZWQgdG8gYW5jaG9ycyBpbnNpZGUgYSB0cmFjay5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgICAgQmluZGVyLm9mZignY2xpY2snLCBDb21wb25lbnRzLkh0bWwud3JhcHBlcik7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogSGFuZGxlciBmb3IgY2xpY2sgZXZlbnQuIFByZXZlbnRzIGNsaWNrcyB3aGVuIGdsaWRlIGlzIGluIGBwcmV2ZW50YCBzdGF0dXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBldmVudFxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGlmIChwcmV2ZW50ZWQpIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0YWNoZXMgYW5jaG9ycyBjbGljayBldmVudCBpbnNpZGUgZ2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7c2VsZn1cbiAgICAgICAqL1xuICAgICAgZGV0YWNoOiBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgICAgIHByZXZlbnRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKCFkZXRhY2hlZCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5kcmFnZ2FibGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicsIHRoaXMuaXRlbXNbaV0uZ2V0QXR0cmlidXRlKCdocmVmJykpO1xuXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLnJlbW92ZUF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRldGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEF0dGFjaGVzIGFuY2hvcnMgY2xpY2sgZXZlbnRzIGluc2lkZSBnbGlkZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzZWxmfVxuICAgICAgICovXG4gICAgICBhdHRhY2g6IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAgICAgcHJldmVudGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGRldGFjaGVkKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLmRyYWdnYWJsZSA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0uc2V0QXR0cmlidXRlKCdocmVmJywgdGhpcy5pdGVtc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZXRhY2hlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShBbmNob3JzLCAnaXRlbXMnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgY29sbGVjdGlvbiBvZiB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7SFRNTEVsZW1lbnRbXX1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBBbmNob3JzLl9hO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogRGV0YWNoIGFuY2hvcnMgaW5zaWRlIHNsaWRlczpcbiAgICAgKiAtIG9uIHN3aXBpbmcsIHNvIHRoZXkgd29uJ3QgcmVkaXJlY3QgdG8gaXRzIGBocmVmYCBhdHRyaWJ1dGVzXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdzd2lwZS5tb3ZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgQW5jaG9ycy5kZXRhY2goKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhbmNob3JzIGluc2lkZSBzbGlkZXM6XG4gICAgICogLSBhZnRlciBzd2lwaW5nIGFuZCB0cmFuc2l0aW9ucyBlbmRzLCBzbyB0aGV5IGNhbiByZWRpcmVjdCBhZnRlciBjbGljayBhZ2FpblxuICAgICAqL1xuICAgIEV2ZW50cy5vbignc3dpcGUuZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQW5jaG9ycy5hdHRhY2goKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVW5iaW5kIGFuY2hvcnMgaW5zaWRlIHNsaWRlczpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIGJyaW5nIGFuY2hvcnMgdG8gaXRzIGluaXRpYWwgc3RhdGVcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBBbmNob3JzLmF0dGFjaCgpO1xuICAgICAgQW5jaG9ycy51bmJpbmQoKTtcbiAgICAgIEJpbmRlci5kZXN0cm95KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQW5jaG9ycztcbiAgfVxuXG4gIHZhciBOQVZfU0VMRUNUT1IgPSAnW2RhdGEtZ2xpZGUtZWw9XCJjb250cm9sc1tuYXZdXCJdJztcbiAgdmFyIENPTlRST0xTX1NFTEVDVE9SID0gJ1tkYXRhLWdsaWRlLWVsXj1cImNvbnRyb2xzXCJdJztcblxuICBmdW5jdGlvbiBDb250cm9scyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgICAqL1xuICAgIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XG5cbiAgICB2YXIgY2FwdHVyZSA9IHN1cHBvcnRzUGFzc2l2ZSQxID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcblxuICAgIHZhciBDb250cm9scyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogSW5pdHMgYXJyb3dzLiBCaW5kcyBldmVudHMgbGlzdGVuZXJzXG4gICAgICAgKiB0byB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiBuYXZpZ2F0aW9uIEhUTUwgZWxlbWVudHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEB0eXBlIHtIVE1MQ29sbGVjdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX24gPSBDb21wb25lbnRzLkh0bWwucm9vdC5xdWVyeVNlbGVjdG9yQWxsKE5BVl9TRUxFQ1RPUik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgY29udHJvbHMgSFRNTCBlbGVtZW50cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHR5cGUge0hUTUxDb2xsZWN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYyA9IENvbXBvbmVudHMuSHRtbC5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoQ09OVFJPTFNfU0VMRUNUT1IpO1xuXG4gICAgICAgIHRoaXMuYWRkQmluZGluZ3MoKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIGFjdGl2ZSBjbGFzcyB0byBjdXJyZW50IHNsaWRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHNldEFjdGl2ZTogZnVuY3Rpb24gc2V0QWN0aXZlKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmFkZENsYXNzKHRoaXMuX25baV0uY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBhY3RpdmUgY2xhc3MgdG8gY3VycmVudCBzbGlkZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICByZW1vdmVBY3RpdmU6IGZ1bmN0aW9uIHJlbW92ZUFjdGl2ZSgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyh0aGlzLl9uW2ldLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFRvZ2dsZXMgYWN0aXZlIGNsYXNzIG9uIGl0ZW1zIGluc2lkZSBuYXZpZ2F0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBjb250cm9sc1xuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIGFkZENsYXNzKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuICAgICAgICB2YXIgaXRlbSA9IGNvbnRyb2xzW0dsaWRlLmluZGV4XTtcblxuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChzZXR0aW5ncy5jbGFzc2VzLmFjdGl2ZU5hdik7XG5cbiAgICAgICAgICBzaWJsaW5ncyhpdGVtKS5mb3JFYWNoKGZ1bmN0aW9uIChzaWJsaW5nKSB7XG4gICAgICAgICAgICBzaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoc2V0dGluZ3MuY2xhc3Nlcy5hY3RpdmVOYXYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBhY3RpdmUgY2xhc3MgZnJvbSBhY3RpdmUgY29udHJvbC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gY29udHJvbHNcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcyhjb250cm9scykge1xuICAgICAgICB2YXIgaXRlbSA9IGNvbnRyb2xzW0dsaWRlLmluZGV4XTtcblxuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmFjdGl2ZU5hdik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRzIGhhbmRsZXMgdG8gdGhlIGVhY2ggZ3JvdXAgb2YgY29udHJvbHMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYWRkQmluZGluZ3M6IGZ1bmN0aW9uIGFkZEJpbmRpbmdzKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmJpbmQodGhpcy5fY1tpXS5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGhhbmRsZXMgZnJvbSB0aGUgZWFjaCBncm91cCBvZiBjb250cm9scy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICByZW1vdmVCaW5kaW5nczogZnVuY3Rpb24gcmVtb3ZlQmluZGluZ3MoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fYy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMudW5iaW5kKHRoaXMuX2NbaV0uY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQmluZHMgZXZlbnRzIHRvIGFycm93cyBIVE1MIGVsZW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTENvbGxlY3Rpb259IGVsZW1lbnRzXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKGVsZW1lbnRzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBCaW5kZXIub24oJ2NsaWNrJywgZWxlbWVudHNbaV0sIHRoaXMuY2xpY2spO1xuICAgICAgICAgIEJpbmRlci5vbigndG91Y2hzdGFydCcsIGVsZW1lbnRzW2ldLCB0aGlzLmNsaWNrLCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFVuYmluZHMgZXZlbnRzIGJpbmRlZCB0byB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MQ29sbGVjdGlvbn0gZWxlbWVudHNcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKGVsZW1lbnRzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBCaW5kZXIub2ZmKFsnY2xpY2snLCAndG91Y2hzdGFydCddLCBlbGVtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGVzIGBjbGlja2AgZXZlbnQgb24gdGhlIGFycm93cyBIVE1MIGVsZW1lbnRzLlxuICAgICAgICogTW92ZXMgc2xpZGVyIGluIGRyaWVjdGlvbiBwcmVjaXNlZCBpblxuICAgICAgICogYGRhdGEtZ2xpZGUtZGlyYCBhdHRyaWJ1dGUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBDb21wb25lbnRzLlJ1bi5tYWtlKENvbXBvbmVudHMuRGlyZWN0aW9uLnJlc29sdmUoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZ2xpZGUtZGlyJykpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lKENvbnRyb2xzLCAnaXRlbXMnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgY29sbGVjdGlvbiBvZiB0aGUgY29udHJvbHMgSFRNTCBlbGVtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudFtdfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIENvbnRyb2xzLl9jO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3dhcCBhY3RpdmUgY2xhc3Mgb2YgY3VycmVudCBuYXZpZ2F0aW9uIGl0ZW06XG4gICAgICogLSBhZnRlciBtb3VudGluZyB0byBzZXQgaXQgdG8gaW5pdGlhbCBpbmRleFxuICAgICAqIC0gYWZ0ZXIgZWFjaCBtb3ZlIHRvIHRoZSBuZXcgaW5kZXhcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydtb3VudC5hZnRlcicsICdtb3ZlLmFmdGVyJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIENvbnRyb2xzLnNldEFjdGl2ZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGJpbmRpbmdzIGFuZCBIVE1MIENsYXNzZXM6XG4gICAgICogLSBvbiBkZXN0cm95aW5nLCB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRpYWwgc3RhdGVcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBDb250cm9scy5yZW1vdmVCaW5kaW5ncygpO1xuICAgICAgQ29udHJvbHMucmVtb3ZlQWN0aXZlKCk7XG4gICAgICBCaW5kZXIuZGVzdHJveSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIENvbnRyb2xzO1xuICB9XG5cbiAgZnVuY3Rpb24gS2V5Ym9hcmQgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxuICAgICAqXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cbiAgICAgKi9cbiAgICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gICAgdmFyIEtleWJvYXJkID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBCaW5kcyBrZXlib2FyZCBldmVudHMgb24gY29tcG9uZW50IG1vdW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgaWYgKEdsaWRlLnNldHRpbmdzLmtleWJvYXJkKSB7XG4gICAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRzIGtleWJvYXJkIHByZXNzIGV2ZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgICBCaW5kZXIub24oJ2tleXVwJywgZG9jdW1lbnQsIHRoaXMucHJlc3MpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMga2V5Ym9hcmQgcHJlc3MgZXZlbnRzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgICBCaW5kZXIub2ZmKCdrZXl1cCcsIGRvY3VtZW50KTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGVzIGtleWJvYXJkJ3MgYXJyb3dzIHByZXNzIGFuZCBtb3ZpbmcgZ2xpZGUgZm93YXJkIGFuZCBiYWNrd2FyZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGV2ZW50XG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBwcmVzczogZnVuY3Rpb24gcHJlc3MoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5KSB7XG4gICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZShDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlKCc+JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3KSB7XG4gICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZShDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlKCc8JykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBiaW5kaW5ncyBmcm9tIGtleWJvYXJkOlxuICAgICAqIC0gb24gZGVzdHJveWluZyB0byByZW1vdmUgYWRkZWQgZXZlbnRzXG4gICAgICogLSBvbiB1cGRhdGluZyB0byByZW1vdmUgZXZlbnRzIGJlZm9yZSByZW1vdW50aW5nXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsnZGVzdHJveScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgS2V5Ym9hcmQudW5iaW5kKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdW50IGNvbXBvbmVudFxuICAgICAqIC0gb24gdXBkYXRpbmcgdG8gcmVmbGVjdCBwb3RlbnRpYWwgY2hhbmdlcyBpbiBzZXR0aW5nc1xuICAgICAqL1xuICAgIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgS2V5Ym9hcmQubW91bnQoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYmluZGVyOlxuICAgICAqIC0gb24gZGVzdHJveWluZyB0byByZW1vdmUgbGlzdGVuZXJzXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBLZXlib2FyZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEF1dG9wbGF5IChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAgICovXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAgIHZhciBBdXRvcGxheSA9IHtcbiAgICAgIC8qKlxuICAgICAgICogSW5pdGlhbGl6ZXMgYXV0b3BsYXlpbmcgYW5kIGV2ZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcblxuICAgICAgICBpZiAoR2xpZGUuc2V0dGluZ3MuaG92ZXJwYXVzZSkge1xuICAgICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU3RhcnRzIGF1dG9wbGF5aW5nIGluIGNvbmZpZ3VyZWQgaW50ZXJ2YWwuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gZm9yY2UgUnVuIGF1dG9wbGF5aW5nIHdpdGggcGFzc2VkIGludGVydmFsIHJlZ2FyZGxlc3Mgb2YgYGF1dG9wbGF5YCBzZXR0aW5nc1xuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmIChHbGlkZS5zZXR0aW5ncy5hdXRvcGxheSkge1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGlzLl9pKSkge1xuICAgICAgICAgICAgdGhpcy5faSA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc3RvcCgpO1xuXG4gICAgICAgICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoJz4nKTtcblxuICAgICAgICAgICAgICBfdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgfSwgdGhpcy50aW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTdG9wcyBhdXRvcnVubmluZyBvZiB0aGUgZ2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgdGhpcy5faSA9IGNsZWFySW50ZXJ2YWwodGhpcy5faSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU3RvcHMgYXV0b3BsYXlpbmcgd2hpbGUgbW91c2UgaXMgb3ZlciBnbGlkZSdzIGFyZWEuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgQmluZGVyLm9uKCdtb3VzZW92ZXInLCBDb21wb25lbnRzLkh0bWwucm9vdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5zdG9wKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIEJpbmRlci5vbignbW91c2VvdXQnLCBDb21wb25lbnRzLkh0bWwucm9vdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5zdGFydCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBVbmJpbmQgbW91c2VvdmVyIGV2ZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICAgIEJpbmRlci5vZmYoWydtb3VzZW92ZXInLCAnbW91c2VvdXQnXSwgQ29tcG9uZW50cy5IdG1sLnJvb3QpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoQXV0b3BsYXksICd0aW1lJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHRpbWUgcGVyaW9kIHZhbHVlIGZvciB0aGUgYXV0b3BsYXkgaW50ZXJ2YWwuIFByaW9yaXRpemVzXG4gICAgICAgKiB0aW1lcyBpbiBgZGF0YS1nbGlkZS1hdXRvcGxheWAgYXR0cnVidXRlcyBvdmVyIG9wdGlvbnMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIGF1dG9wbGF5ID0gQ29tcG9uZW50cy5IdG1sLnNsaWRlc1tHbGlkZS5pbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLWdsaWRlLWF1dG9wbGF5Jyk7XG5cbiAgICAgICAgaWYgKGF1dG9wbGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHRvSW50KGF1dG9wbGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b0ludChHbGlkZS5zZXR0aW5ncy5hdXRvcGxheSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIGF1dG9wbGF5aW5nIGFuZCB1bmJpbmQgZXZlbnRzOlxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gY2xlYXIgZGVmaW5lZCBpbnRlcnZhbFxuICAgICAqIC0gb24gdXBkYXRpbmcgdmlhIEFQSSB0byByZXNldCBpbnRlcnZhbCB0aGF0IG1heSBjaGFuZ2VkXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsnZGVzdHJveScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgQXV0b3BsYXkudW5iaW5kKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIGF1dG9wbGF5aW5nOlxuICAgICAqIC0gYmVmb3JlIGVhY2ggcnVuLCB0byByZXN0YXJ0IGF1dG9wbGF5aW5nXG4gICAgICogLSBvbiBwYXVzaW5nIHZpYSBBUElcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIGNsZWFyIGRlZmluZWQgaW50ZXJ2YWxcbiAgICAgKiAtIHdoaWxlIHN0YXJ0aW5nIGEgc3dpcGVcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEkgdG8gcmVzZXQgaW50ZXJ2YWwgdGhhdCBtYXkgY2hhbmdlZFxuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ3J1bi5iZWZvcmUnLCAncGF1c2UnLCAnZGVzdHJveScsICdzd2lwZS5zdGFydCcsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgQXV0b3BsYXkuc3RvcCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3RhcnQgYXV0b3BsYXlpbmc6XG4gICAgICogLSBhZnRlciBlYWNoIHJ1biwgdG8gcmVzdGFydCBhdXRvcGxheWluZ1xuICAgICAqIC0gb24gcGxheWluZyB2aWEgQVBJXG4gICAgICogLSB3aGlsZSBlbmRpbmcgYSBzd2lwZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ3J1bi5hZnRlcicsICdwbGF5JywgJ3N3aXBlLmVuZCddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBBdXRvcGxheS5zdGFydCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3VudCBhdXRvcGxheWluZzpcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEkgdG8gcmVzZXQgaW50ZXJ2YWwgdGhhdCBtYXkgY2hhbmdlZFxuICAgICAqL1xuICAgIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgQXV0b3BsYXkubW91bnQoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYSBiaW5kZXI6XG4gICAgICogLSBvbiBkZXN0cm95aW5nIGdsaWRlIGluc3RhbmNlIHRvIGNsZWFydXAgbGlzdGVuZXJzXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBBdXRvcGxheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0cyBrZXlzIG9mIGJyZWFrcG9pbnQgb2JqZWN0IHNvIHRoZXkgd2lsbCBiZSBvcmRlcmVkIGZyb20gbG93ZXIgdG8gYmlnZ2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRzXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBzb3J0QnJlYWtwb2ludHMocG9pbnRzKSB7XG4gICAgaWYgKGlzT2JqZWN0KHBvaW50cykpIHtcbiAgICAgIHJldHVybiBzb3J0S2V5cyhwb2ludHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKCdCcmVha3BvaW50cyBvcHRpb24gbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge307XG4gIH1cblxuICBmdW5jdGlvbiBCcmVha3BvaW50cyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgICAqL1xuICAgIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyByZWZlcmVuY2UgdG8gc2V0dGluZ3MuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuXG4gICAgLyoqXG4gICAgICogSG9sZHMgcmVmZXJlbmNlIHRvIGJyZWFrcG9pbnRzIG9iamVjdCBpbiBzZXR0aW5ncy4gU29ydHMgYnJlYWtwb2ludHNcbiAgICAgKiBmcm9tIHNtYWxsZXIgdG8gbGFyZ2VyLiBJdCBpcyByZXF1aXJlZCBpbiBvcmRlciB0byBwcm9wZXJcbiAgICAgKiBtYXRjaGluZyBjdXJyZW50bHkgYWN0aXZlIGJyZWFrcG9pbnQgc2V0dGluZ3MuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHZhciBwb2ludHMgPSBzb3J0QnJlYWtwb2ludHMoc2V0dGluZ3MuYnJlYWtwb2ludHMpO1xuXG4gICAgLyoqXG4gICAgICogQ2FjaGUgaW5pdGlhbCBzZXR0aW5ncyBiZWZvcmUgb3ZlcndyaXR0aW5nLlxuICAgICAqXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBfZXh0ZW5kcyh7fSwgc2V0dGluZ3MpO1xuXG4gICAgdmFyIEJyZWFrcG9pbnRzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBNYXRjaGVzIHNldHRpbmdzIGZvciBjdXJyZWN0bHkgbWF0Y2hpbmcgbWVkaWEgYnJlYWtwb2ludC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRzXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBtYXRjaDogZnVuY3Rpb24gbWF0Y2gocG9pbnRzKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lm1hdGNoTWVkaWEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZm9yICh2YXIgcG9pbnQgaW4gcG9pbnRzKSB7XG4gICAgICAgICAgICBpZiAocG9pbnRzLmhhc093blByb3BlcnR5KHBvaW50KSkge1xuICAgICAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6ICcgKyBwb2ludCArICdweCknKS5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50c1twb2ludF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE92ZXJ3cml0ZSBpbnN0YW5jZSBzZXR0aW5ncyB3aXRoIGN1cnJlbnRseSBtYXRjaGluZyBicmVha3BvaW50IHNldHRpbmdzLlxuICAgICAqIFRoaXMgaGFwcGVucyByaWdodCBhZnRlciBjb21wb25lbnQgaW5pdGlhbGl6YXRpb24uXG4gICAgICovXG4gICAgX2V4dGVuZHMoc2V0dGluZ3MsIEJyZWFrcG9pbnRzLm1hdGNoKHBvaW50cykpO1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGdsaWRlIHdpdGggc2V0dGluZ3Mgb2YgbWF0Y2hlZCBicmVrcG9pbnQ6XG4gICAgICogLSB3aW5kb3cgcmVzaXplIHRvIHVwZGF0ZSBzbGlkZXJcbiAgICAgKi9cbiAgICBCaW5kZXIub24oJ3Jlc2l6ZScsIHdpbmRvdywgdGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgR2xpZGUuc2V0dGluZ3MgPSBtZXJnZU9wdGlvbnMoc2V0dGluZ3MsIEJyZWFrcG9pbnRzLm1hdGNoKHBvaW50cykpO1xuICAgIH0sIEdsaWRlLnNldHRpbmdzLnRocm90dGxlKSk7XG5cbiAgICAvKipcbiAgICAgKiBSZXNvcnQgYW5kIHVwZGF0ZSBkZWZhdWx0IHNldHRpbmdzOlxuICAgICAqIC0gb24gcmVpbml0IHZpYSBBUEksIHNvIGJyZWFrcG9pbnQgbWF0Y2hpbmcgd2lsbCBiZSBwZXJmb3JtZWQgd2l0aCBvcHRpb25zXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBwb2ludHMgPSBzb3J0QnJlYWtwb2ludHMocG9pbnRzKTtcblxuICAgICAgZGVmYXVsdHMgPSBfZXh0ZW5kcyh7fSwgc2V0dGluZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVW5iaW5kIHJlc2l6ZSBsaXN0ZW5lcjpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIEJpbmRlci5vZmYoJ3Jlc2l6ZScsIHdpbmRvdyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQnJlYWtwb2ludHM7XG4gIH1cblxuICB2YXIgQ09NUE9ORU5UUyA9IHtcbiAgICAvLyBSZXF1aXJlZFxuICAgIEh0bWw6IEh0bWwsXG4gICAgVHJhbnNsYXRlOiBUcmFuc2xhdGUsXG4gICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgICBEaXJlY3Rpb246IERpcmVjdGlvbixcbiAgICBQZWVrOiBQZWVrLFxuICAgIFNpemVzOiBTaXplcyxcbiAgICBHYXBzOiBHYXBzLFxuICAgIE1vdmU6IE1vdmUsXG4gICAgQ2xvbmVzOiBDbG9uZXMsXG4gICAgUmVzaXplOiBSZXNpemUsXG4gICAgQnVpbGQ6IEJ1aWxkLFxuICAgIFJ1bjogUnVuLFxuXG4gICAgLy8gT3B0aW9uYWxcbiAgICBTd2lwZTogU3dpcGUsXG4gICAgSW1hZ2VzOiBJbWFnZXMsXG4gICAgQW5jaG9yczogQW5jaG9ycyxcbiAgICBDb250cm9sczogQ29udHJvbHMsXG4gICAgS2V5Ym9hcmQ6IEtleWJvYXJkLFxuICAgIEF1dG9wbGF5OiBBdXRvcGxheSxcbiAgICBCcmVha3BvaW50czogQnJlYWtwb2ludHNcbiAgfTtcblxuICB2YXIgR2xpZGUkMSA9IGZ1bmN0aW9uIChfQ29yZSkge1xuICAgIGluaGVyaXRzKEdsaWRlJCQxLCBfQ29yZSk7XG5cbiAgICBmdW5jdGlvbiBHbGlkZSQkMSgpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsaWRlJCQxKTtcbiAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChHbGlkZSQkMS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEdsaWRlJCQxKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoR2xpZGUkJDEsIFt7XG4gICAgICBrZXk6ICdtb3VudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHZhciBleHRlbnNpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICByZXR1cm4gZ2V0KEdsaWRlJCQxLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEdsaWRlJCQxLnByb3RvdHlwZSksICdtb3VudCcsIHRoaXMpLmNhbGwodGhpcywgX2V4dGVuZHMoe30sIENPTVBPTkVOVFMsIGV4dGVuc2lvbnMpKTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIEdsaWRlJCQxO1xuICB9KEdsaWRlKTtcblxuICByZXR1cm4gR2xpZGUkMTtcblxufSkpKTtcbiIsIi8vIFRpbWUgdG8gcmVmcmVzaCB0aGUgY2hhcnRzIHdpdGggbmV3IGRhdGEgKDEwIG1pbnMpXG52YXIgcmVmcmVzaFRpbWUgPSA2MCAqIDEwICogMTAwMDtcblxuLy8gSG93IG1hbnkgZGF5cyB0byBzaG93IHRoZSByZXBvcnQgb3ZlclxudmFyIHJlcG9ydERheXNEaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRheXMnKTtcbnZhciByZXBvcnREYXlzID0gcmVwb3J0RGF5c0Rpc3BsYXkudmFsdWU7XG5cbi8qXG4qIGdldERhdGFcbipcbiogRnVuY3Rpb24gdG8gZ2V0IHRoZSBkYXRhIGZyb20gdGhlIEFQSVxuKi9cbmZ1bmN0aW9uIGdldERhdGEoc2hlZXROYW1lLCBkYXRlUmFuZ2UsIGNhbGxiYWNrKSB7XG5cbiAgICAvLyBTZXQgb3VyIEhUVFAgcmVxdWVzdFxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIFNldHVwIGxpc3RlbmVyIHRvIHByb2Nlc3MgY29tcGxldGVkIHJlcXVlc3RzXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAvLyBQcm9jZXNzIHJldHVybiBkYXRhXG4gICAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XG5cbiAgICAgICAgICAgIHZhciB2YWxzID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpLnZhbHVlcztcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICAgICAgZGF0YXNldFRpdGxlOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRhc2V0czoge1xuICAgICAgICAgICAgICAgICAgICAwOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgMTogW10sXG4gICAgICAgICAgICAgICAgICAgIDI6IFtdLFxuICAgICAgICAgICAgICAgICAgICAzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgNDogW10sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aXRsZTogdmFsc1sxXVswXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gU3RhcnQgYXQgMSBhcyB3ZSBkb24ndCBuZWVkIHRoZSBmaXJzdCBhcnJheSAoY29udGFpbnMgbGFiZWxzKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gZGF0ZVJhbmdlKjI0OyBpKyspIHtcblxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldFRpdGxlLnB1c2godmFsc1tpXVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldFRpdGxlLnB1c2godmFsc1tpXVsyXSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldFRpdGxlLnB1c2godmFsc1tpXVszXSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldFRpdGxlLnB1c2godmFsc1tpXVs0XSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldFRpdGxlLnB1c2godmFsc1tpXVs4XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsc1tpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbMF0ucHVzaCh2YWxzW2ldWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbMV0ucHVzaCh2YWxzW2ldWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbMl0ucHVzaCh2YWxzW2ldWzNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbM10ucHVzaCh2YWxzW2ldWzRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbNF0ucHVzaCh2YWxzW2ldWzhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGFiZWxzLnB1c2godmFsc1tpXVs2XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBkYXRhXG4gICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1RoZSByZXF1ZXN0IGZhaWxlZCEnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgeGhyLm9wZW4oJ0dFVCcsICdodHRwczovL3NoZWV0cy5nb29nbGVhcGlzLmNvbS92NC9zcHJlYWRzaGVldHMvMVNTSWtSdDBXZ1NEZ0Q2WHZRaVdzWEJPVUFwVEUxUkZaLXpGZnRLeWFHNlEvdmFsdWVzLycgKyBzaGVldE5hbWUgKyAnP2tleT1BSXphU3lEeHV6VmFGODBUeDRuTjN4cWZTSGVZem5IVENUQTAxTGsnKTtcbiAgICB4aHIuc2VuZCgpO1xufVxuXG4vKlxuKiBhZGRDaGFydFxuKlxuKiBGdW5jdGlvbiB0byBhZGQgYSBjaGFydFxuKi9cbmZ1bmN0aW9uIGFkZENoYXJ0KGNoYXJ0LCB0aXRsZSwgZGF0YSwgY2FsbGJhY2spIHtcblxuICAgIC8vIEdldCB0aGUgY2hhcnQgZWxlbWVudFxuICAgIHZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjaGFydCkuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIC8vIFNldCB0aGUgY2hhcnRcbiAgICB2YXIgY2hhcnRPYmplY3QgPSBuZXcgQ2hhcnQoY3R4LCB7XG4gICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbGFiZWxzOiBkYXRhLmxhYmVscyxcbiAgICAgICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGF0YS5kYXRhc2V0VGl0bGVbMF0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEuZGF0YXNldHNbMF0sXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3JnYmEoNTQsIDE2MiwgMjM1LCAxKSdcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDU0LCAxNjIsIDIzNSwgMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSg1NCwgMTYyLCAyMzUsIDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLmRhdGFzZXRUaXRsZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YS5kYXRhc2V0c1sxXSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAncmdiYSgyNTUsIDk5LCAxMzIsIDEpJyxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwgOTksIDEzMiwgMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDk5LCAxMzIsIDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLmRhdGFzZXRUaXRsZVsyXSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YS5kYXRhc2V0c1syXSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAncmdiKDY1LCAyNTUsIDk5KScsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAncmdiYSg2NSwgMjU1LCA5OSwgMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSg2NSwgMjU1LCA5OSwgMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEuZGF0YXNldFRpdGxlWzNdLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGFzZXRzWzNdLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZ2IoMjU1LCAxNDAsIDI2KScsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsIDE0MCwgMjYsIDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAxNDAsIDI2LCAxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAxLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGF0YS5kYXRhc2V0VGl0bGVbNF0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEuZGF0YXNldHNbNF0sXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3JnYigyNTUsMjQ3LDU1KScsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsMjQ3LDU1LCAxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwyNDcsNTUsIDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogJyM2ZTZlNmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRNaW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRNYXg6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjMjYyNjI2XCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICB4QXhlczogW3tcbiAgICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogJyM2ZTZlNmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjMjYyNjI2XCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdzb21ldGhpbmcnLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6ICcjNmU2ZTZlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dDogdGl0bGUsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDE4LFxuICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogJ3doaXRlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2VcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2V0IGhlaWdodCBvZiBjaGFydFxuICAgIGNoYXJ0T2JqZWN0LmNhbnZhcy5wYXJlbnROb2RlLnN0eWxlLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodC8yLjc1ICsgJ3B4JztcblxuICAgIC8vIFJldHVybiB0aGUgY2hhcnQgb2JqZWN0XG4gICAgY2FsbGJhY2soY2hhcnRPYmplY3QpO1xuXG59XG5cbi8qXG4qIHVwZGF0ZUNoYXJ0XG4qXG4qIEZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgY2hhcnQgd2l0aCBuZXcgZGF0YVxuKi9cbmZ1bmN0aW9uIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKSB7XG5cbiAgICAvLyBTZXQgdGhlIG5ldyBsYWJlbHNcbiAgICBjaGFydC5kYXRhLmxhYmVscyA9IGRhdGEubGFiZWxzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgLy8gUHVzaCB0aGUgbmV3IGRhdGEgdG8gdGhlIGNoYXJ0XG4gICAgICAgIGNoYXJ0LmRhdGEuZGF0YXNldHNbaV0uZGF0YSA9IGRhdGEuZGF0YXNldHNbaV07XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRoZSBjaGFydFxuICAgIGNoYXJ0LnVwZGF0ZSgpO1xufVxuXG52YXIgY2hhcnRPYmplY3Q7XG52YXIgY2hhcnRPYmplY3QxO1xudmFyIGNoYXJ0T2JqZWN0MjtcbnZhciBjaGFydE9iamVjdDM7XG52YXIgY2hhcnRPYmplY3Q0O1xudmFyIGNoYXJ0T2JqZWN0NTtcbnZhciBjaGFydE9iamVjdDY7XG52YXIgY2hhcnRPYmplY3Q3O1xudmFyIGNoYXJ0T2JqZWN0ODtcbnZhciBjaGFydE9iamVjdDk7XG5cbmdldERhdGEoJ0hvbWUnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGFkZENoYXJ0KCdtZXRyaWNDaGFydCcsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0ID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnSG9tZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnQsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHJlZnJlc2hUaW1lKTtcbiAgICB9KTtcbn0pO1xuXG5nZXREYXRhKCdDYXIgSW5zdXJhbmNlJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQxJywgZGF0YS50aXRsZSwgZGF0YSwgZnVuY3Rpb24gKGNoYXJ0KSB7XG5cbiAgICAgICAgY2hhcnRPYmplY3QxID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnQ2FyIEluc3VyYW5jZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnQsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHJlZnJlc2hUaW1lKTtcbiAgICB9KTtcbn0pO1xuXG5nZXREYXRhKCdNdWx0aSBDYXInLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGFkZENoYXJ0KCdtZXRyaWNDaGFydDInLCBkYXRhLnRpdGxlLCBkYXRhLCBmdW5jdGlvbiAoY2hhcnQpIHtcblxuICAgICAgICBjaGFydE9iamVjdDIgPSBjaGFydDtcblxuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnZXREYXRhKCdNdWx0aSBDYXInLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnQ2xhaW1zJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQzJywgZGF0YS50aXRsZSwgZGF0YSwgZnVuY3Rpb24gKGNoYXJ0KSB7XG5cbiAgICAgICAgY2hhcnRPYmplY3QzID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnQ2xhaW1zJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDaGFydChjaGFydCwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcmVmcmVzaFRpbWUpO1xuICAgIH0pO1xufSk7XG5cbmdldERhdGEoJ0hvbWUgSW5zdXJhbmNlJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQ0JywgZGF0YS50aXRsZSwgZGF0YSwgZnVuY3Rpb24gKGNoYXJ0KSB7XG5cbiAgICAgICAgY2hhcnRPYmplY3Q0ID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnSG9tZSBJbnN1cmFuY2UnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnU21hcnRtaWxlcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYWRkQ2hhcnQoJ21ldHJpY0NoYXJ0NScsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0NSA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ1NtYXJ0bWlsZXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnSGVscCcsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYWRkQ2hhcnQoJ21ldHJpY0NoYXJ0NicsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0NiA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ0hlbHAnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnQWJvdXQgVXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGFkZENoYXJ0KCdtZXRyaWNDaGFydDcnLCBkYXRhLnRpdGxlLCBkYXRhLCBmdW5jdGlvbiAoY2hhcnQpIHtcblxuICAgICAgICBjaGFydE9iamVjdDcgPSBjaGFydDtcblxuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnZXREYXRhKCdBYm91dCBVcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnQsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHJlZnJlc2hUaW1lKTtcbiAgICB9KTtcbn0pO1xuXG5nZXREYXRhKCdDb250YWN0IFVzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQ4JywgZGF0YS50aXRsZSwgZGF0YSwgZnVuY3Rpb24gKGNoYXJ0KSB7XG5cbiAgICAgICAgY2hhcnRPYmplY3Q4ID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnQ29udGFjdCBVcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnQsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHJlZnJlc2hUaW1lKTtcbiAgICB9KTtcbn0pO1xuXG5nZXREYXRhKCdDb3JvbmF2aXJ1cyBGQVFzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQ5JywgZGF0YS50aXRsZSwgZGF0YSwgZnVuY3Rpb24gKGNoYXJ0KSB7XG5cbiAgICAgICAgY2hhcnRPYmplY3Q5ID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnQ29yb25hdmlydXMgRkFRcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnQsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHJlZnJlc2hUaW1lKTtcbiAgICB9KTtcbn0pO1xuXG5yZXBvcnREYXlzRGlzcGxheS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgcmVwb3J0RGF5cyA9IGUudGFyZ2V0LnZhbHVlO1xuXG4gICAgZ2V0RGF0YSgnSG9tZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0LCBkYXRhKTtcbiAgICB9KTtcblxuICAgIGdldERhdGEoJ0NhciBJbnN1cmFuY2UnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB1cGRhdGVDaGFydChjaGFydE9iamVjdDEsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgZ2V0RGF0YSgnTXVsdGkgQ2FyJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnRPYmplY3QyLCBkYXRhKTtcbiAgICB9KTtcblxuICAgIGdldERhdGEoJ0NsYWltcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0MywgZGF0YSk7XG4gICAgfSk7XG5cbiAgICBnZXREYXRhKCdIb21lIEluc3VyYW5jZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0NCwgZGF0YSk7XG4gICAgfSk7XG5cbiAgICBnZXREYXRhKCdTbWFydG1pbGVzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnRPYmplY3Q1LCBkYXRhKTtcbiAgICB9KTtcblxuICAgIGdldERhdGEoJ0hlbHAnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB1cGRhdGVDaGFydChjaGFydE9iamVjdDYsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgZ2V0RGF0YSgnQWJvdXQgVXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB1cGRhdGVDaGFydChjaGFydE9iamVjdDcsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgZ2V0RGF0YSgnQ29udGFjdCBVcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0OCwgZGF0YSk7XG4gICAgfSk7XG5cbiAgICBnZXREYXRhKCdDb3JvbmF2aXJ1cyBGQVFzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnRPYmplY3Q5LCBkYXRhKTtcbiAgICB9KTtcbn0pO1xuXG52YXIgZ2xpZGUgPSBuZXcgR2xpZGUoJy5nbGlkZScsIHtcbiAgICBhdXRvcGxheTogMzAwMDAsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDEwMDAsXG4gICAgaG92ZXJwYXVzZTogdHJ1ZVxufSk7XG4vLyBJbml0IHRoZSBzbGlkZXJcbmdsaWRlLm1vdW50KCk7Il19
