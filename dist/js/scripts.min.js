!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(function(){try{return require("moment")}catch(t){}}()):"function"==typeof define&&define.amd?define(["require"],function(t){return e(function(){try{return t("moment")}catch(t){}}())}):(t=t||self).Chart=e(t.moment)}(this,function(i){"use strict";i=i&&i.hasOwnProperty("default")?i.default:i;var t,c={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},u=(function(t){var u={};for(var e in c)c.hasOwnProperty(e)&&(u[c[e]]=e);var o=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var n in o)if(o.hasOwnProperty(n)){if(!("channels"in o[n]))throw new Error("missing channels property: "+n);if(!("labels"in o[n]))throw new Error("missing channel labels property: "+n);if(o[n].labels.length!==o[n].channels)throw new Error("channel and label counts mismatch: "+n);var i=o[n].channels,r=o[n].labels;delete o[n].channels,delete o[n].labels,Object.defineProperty(o[n],"channels",{value:i}),Object.defineProperty(o[n],"labels",{value:r})}o.rgb.hsl=function(t){var e,n,i=t[0]/255,r=t[1]/255,a=t[2]/255,o=Math.min(i,r,a),s=Math.max(i,r,a),l=s-o;return s===o?e=0:i===s?e=(r-a)/l:r===s?e=2+(a-i)/l:a===s&&(e=4+(i-r)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(o+s)/2,[e,100*(s===o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]},o.rgb.hsv=function(t){function e(t){return(c-t)/6/d+.5}var n,i,r,a,o,s=t[0]/255,l=t[1]/255,u=t[2]/255,c=Math.max(s,l,u),d=c-Math.min(s,l,u);return 0==d?a=o=0:(o=d/c,n=e(s),i=e(l),r=e(u),s===c?a=r-i:l===c?a=1/3+n-r:u===c&&(a=2/3+i-n),a<0?a+=1:1<a&&--a),[360*a,100*o,100*c]},o.rgb.hwb=function(t){var e=t[0],n=t[1],i=t[2];return[o.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(n,i))),100*(i=1-1/255*Math.max(e,Math.max(n,i)))]},o.rgb.cmyk=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-i,1-r)))/(1-e)||0),100*((1-i-e)/(1-e)||0),100*((1-r-e)/(1-e)||0),100*e]},o.rgb.keyword=function(t){var e=u[t];if(e)return e;var n,i,r,a=1/0;for(var o in c)if(c.hasOwnProperty(o)){var s=c[o],l=(i=t,r=s,Math.pow(i[0]-r[0],2)+Math.pow(i[1]-r[1],2)+Math.pow(i[2]-r[2],2));l<a&&(a=l,n=o)}return n},o.keyword.rgb=function(t){return c[t]},o.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;return[100*(.4124*(e=.04045<e?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=.04045<n?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(i=.04045<i?Math.pow((i+.055)/1.055,2.4):i/12.92)),100*(.2126*e+.7152*n+.0722*i),100*(.0193*e+.1192*n+.9505*i)]},o.rgb.lab=function(t){var e=o.rgb.xyz(t),n=e[0],i=e[1],r=e[2];return i/=100,r/=108.883,n=.008856<(n/=95.047)?Math.pow(n,1/3):7.787*n+16/116,[116*(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116)-16,500*(n-i),200*(i-(r=.008856<r?Math.pow(r,1/3):7.787*r+16/116))]},o.hsl.rgb=function(t){var e,n,i,r,a,o=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return[a=255*l,a,a];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),r=[0,0,0];for(var u=0;u<3;u++)(i=o+1/3*-(u-1))<0&&i++,1<i&&i--,a=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,r[u]=255*a;return r},o.hsl.hsv=function(t){var e=t[0],n=t[1]/100,i=t[2]/100,r=n,a=Math.max(i,.01);return n*=(i*=2)<=1?i:2-i,r*=a<=1?a:2-a,[e,100*(0===i?2*r/(a+r):2*n/(i+n)),100*((i+n)/2)]},o.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,r=Math.floor(e)%6,a=e-Math.floor(e),o=255*i*(1-n),s=255*i*(1-n*a),l=255*i*(1-n*(1-a));switch(i*=255,r){case 0:return[i,l,o];case 1:return[s,i,o];case 2:return[o,i,l];case 3:return[o,s,i];case 4:return[l,o,i];case 5:return[i,o,s]}},o.hsv.hsl=function(t){var e,n,i,r=t[0],a=t[1]/100,o=t[2]/100,s=Math.max(o,.01);return i=(2-a)*o,n=a*s,[r,100*(n=(n/=(e=(2-a)*s)<=1?e:2-e)||0),100*(i/=2)]},o.hwb.rgb=function(t){var e,n,i,r,a,o,s,l=t[0]/360,u=t[1]/100,c=t[2]/100,d=u+c;switch(1<d&&(u/=d,c/=d),i=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(i=1-i),r=u+i*((n=1-c)-u),e){default:case 6:case 0:a=n,o=r,s=u;break;case 1:a=r,o=n,s=u;break;case 2:a=u,o=n,s=r;break;case 3:a=u,o=r,s=n;break;case 4:a=r,o=u,s=n;break;case 5:a=n,o=u,s=r}return[255*a,255*o,255*s]},o.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,i=t[2]/100,r=t[3]/100;return[255*(1-Math.min(1,e*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,i*(1-r)+r))]},o.xyz.rgb=function(t){var e,n,i,r=t[0]/100,a=t[1]/100,o=t[2]/100;return n=-.9689*r+1.8758*a+.0415*o,i=.0557*r+-.204*a+1.057*o,e=.0031308<(e=3.2406*r+-1.5372*a+-.4986*o)?1.055*Math.pow(e,1/2.4)-.055:12.92*e,n=.0031308<n?1.055*Math.pow(n,1/2.4)-.055:12.92*n,i=.0031308<i?1.055*Math.pow(i,1/2.4)-.055:12.92*i,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(i=Math.min(Math.max(0,i),1))]},o.xyz.lab=function(t){var e=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,e=.008856<(e/=95.047)?Math.pow(e,1/3):7.787*e+16/116,[116*(n=.008856<n?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116))]},o.lab.xyz=function(t){var e,n,i,r=t[0];e=t[1]/500+(n=(r+16)/116),i=n-t[2]/200;var a=Math.pow(n,3),o=Math.pow(e,3),s=Math.pow(i,3);return n=.008856<a?a:(n-16/116)/7.787,e=.008856<o?o:(e-16/116)/7.787,i=.008856<s?s:(i-16/116)/7.787,[e*=95.047,n*=100,i*=108.883]},o.lab.lch=function(t){var e,n=t[0],i=t[1],r=t[2];return(e=360*Math.atan2(r,i)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(i*i+r*r),e]},o.lch.lab=function(t){var e,n=t[0],i=t[1];return e=t[2]/360*2*Math.PI,[n,i*Math.cos(e),i*Math.sin(e)]},o.rgb.ansi16=function(t){var e=t[0],n=t[1],i=t[2],r=1 in arguments?arguments[1]:o.rgb.hsv(t)[2];if(0===(r=Math.round(r/50)))return 30;var a=30+(Math.round(i/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===r&&(a+=60),a},o.hsv.ansi16=function(t){return o.rgb.ansi16(o.hsv.rgb(t),t[2])},o.rgb.ansi256=function(t){var e=t[0],n=t[1],i=t[2];return e===n&&n===i?e<8?16:248<e?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},o.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return 50<t&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(50<t));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},o.ansi256.rgb=function(t){if(232<=t){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},o.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},o.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split("").map(function(t){return t+t}).join(""));var i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},o.rgb.hcg=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255,a=Math.max(Math.max(n,i),r),o=Math.min(Math.min(n,i),r),s=a-o;return e=s<=0?0:a===n?(i-r)/s%6:a===i?2+(r-n)/s:4+(n-i)/s+4,e/=6,[360*(e%=1),100*s,100*(s<1?o/(1-s):0)]},o.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=1,r=0;return(i=n<.5?2*e*n:2*e*(1-n))<1&&(r=(n-.5*i)/(1-i)),[t[0],100*i,100*r]},o.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=e*n,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},o.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,i=t[2]/100;if(0==n)return[255*i,255*i,255*i];var r,a=[0,0,0],o=e%1*6,s=o%1,l=1-s;switch(Math.floor(o)){case 0:a[0]=1,a[1]=s,a[2]=0;break;case 1:a[0]=l,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=s;break;case 3:a[0]=0,a[1]=l,a[2]=1;break;case 4:a[0]=s,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=l}return r=(1-n)*i,[255*(n*a[0]+r),255*(n*a[1]+r),255*(n*a[2]+r)]},o.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),i=0;return 0<n&&(i=e/n),[t[0],100*i,100*n]},o.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,i=0;return 0<n&&n<.5?i=e/(2*n):.5<=n&&n<1&&(i=e/(2*(1-n))),[t[0],100*i,100*n]},o.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},o.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,i=n-e,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},o.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},o.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},o.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},o.gray.hsl=o.gray.hsv=function(t){return[0,0,t[0]]},o.gray.hwb=function(t){return[0,100,t[0]]},o.gray.cmyk=function(t){return[0,0,0,t[0]]},o.gray.lab=function(t){return[t[0],0,0]},o.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(n.length)+n},o.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}}(t={exports:{}},t.exports),t.exports);u.rgb,u.hsl,u.hsv,u.hwb,u.cmyk,u.xyz,u.lab,u.lch,u.hex,u.keyword,u.ansi16,u.ansi256,u.hcg,u.apple,u.gray;function s(t){var e=function(){for(var t={},e=Object.keys(u),n=e.length,i=0;i<n;i++)t[e[i]]={distance:-1,parent:null};return t}(),n=[t];for(e[t].distance=0;n.length;)for(var i=n.pop(),r=Object.keys(u[i]),a=r.length,o=0;o<a;o++){var s=r[o],l=e[s];-1===l.distance&&(l.distance=e[i].distance+1,l.parent=i,n.unshift(s))}return e}function a(e,n){return function(t){return n(e(t))}}function l(t,e){for(var n=[e[t].parent,t],i=u[e[t].parent][t],r=e[t].parent;e[r].parent;)n.unshift(e[r].parent),i=a(u[e[r].parent][r],i),r=e[r].parent;return i.conversion=n,i}var r={};function o(e){function t(t){return null==t?t:(1<arguments.length&&(t=Array.prototype.slice.call(arguments)),e(t))}return"conversion"in e&&(t.conversion=e.conversion),t}function d(r){function t(t){if(null==t)return t;1<arguments.length&&(t=Array.prototype.slice.call(arguments));var e=r(t);if("object"==typeof e)for(var n=e.length,i=0;i<n;i++)e[i]=Math.round(e[i]);return e}return"conversion"in r&&(t.conversion=r.conversion),t}Object.keys(u).forEach(function(n){r[n]={},Object.defineProperty(r[n],"channels",{value:u[n].channels}),Object.defineProperty(r[n],"labels",{value:u[n].labels});var i=function(t){for(var e=s(t),n={},i=Object.keys(e),r=i.length,a=0;a<r;a++){var o=i[a];null!==e[o].parent&&(n[o]=l(o,e))}return n}(n);Object.keys(i).forEach(function(t){var e=i[t];r[n][t]=d(e),r[n][t].raw=o(e)})});var h=r,f={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n={getRgba:g,getHsla:p,getRgb:function(t){var e=g(t);return e&&e.slice(0,3)},getHsl:function(t){var e=p(t);return e&&e.slice(0,3)},getHwb:m,getAlpha:function(t){var e=g(t);{if(e)return e[3];if(e=p(t))return e[3];if(e=m(t))return e[3]}},hexString:function(t,e){e=void 0!==e&&3===t.length?e:t[3];return"#"+_(t[0])+_(t[1])+_(t[2])+(0<=e&&e<1?_(Math.round(255*e)):"")},rgbString:function(t,e){if(e<1||t[3]&&t[3]<1)return v(t,e);return"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:v,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return b(t,e);var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),r=Math.round(t[2]/255*100);return"rgb("+n+"%, "+i+"%, "+r+"%)"},percentaString:b,hslString:function(t,e){if(e<1||t[3]&&t[3]<1)return y(t,e);return"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:y,hwbString:function(t,e){void 0===e&&(e=void 0!==t[3]?t[3]:1);return"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return e[t.slice(0,3)]}};function g(t){if(t){var e=[0,0,0],n=1,i=t.match(/^#([a-fA-F0-9]{3,4})$/i),r="";if(i){r=(i=i[1])[3];for(var a=0;a<e.length;a++)e[a]=parseInt(i[a]+i[a],16);r&&(n=Math.round(parseInt(r+r,16)/255*100)/100)}else if(i=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){r=i[2],i=i[1];for(a=0;a<e.length;a++)e[a]=parseInt(i.slice(2*a,2*a+2),16);r&&(n=Math.round(parseInt(r,16)/255*100)/100)}else if(i=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=parseInt(i[a+1]);n=parseFloat(i[4])}else if(i=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=Math.round(2.55*parseFloat(i[a+1]));n=parseFloat(i[4])}else if(i=t.match(/(\w+)/)){if("transparent"==i[1])return[0,0,0,0];if(!(e=f[i[1]]))return}for(a=0;a<e.length;a++)e[a]=x(e[a],0,255);return n=n||0==n?x(n,0,1):1,e[3]=n,e}}function p(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[x(parseInt(e[1]),0,360),x(parseFloat(e[2]),0,100),x(parseFloat(e[3]),0,100),x(isNaN(n)?1:n,0,1)]}}}function m(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[x(parseInt(e[1]),0,360),x(parseFloat(e[2]),0,100),x(parseFloat(e[3]),0,100),x(isNaN(n)?1:n,0,1)]}}}function v(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function b(t,e){return"rgba("+Math.round(t[0]/255*100)+"%, "+Math.round(t[1]/255*100)+"%, "+Math.round(t[2]/255*100)+"%, "+(e||t[3]||1)+")"}function y(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function x(t,e,n){return Math.min(Math.max(e,t),n)}function _(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var e={};for(var w in f)e[f[w]]=w;var k=function(t){return t instanceof k?t:this instanceof k?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(e=n.getRgba(t))?this.setValues("rgb",e):(e=n.getHsla(t))?this.setValues("hsl",e):(e=n.getHwb(t))&&this.setValues("hwb",e):"object"==typeof t&&(void 0!==(e=t).r||void 0!==e.red?this.setValues("rgb",e):void 0!==e.l||void 0!==e.lightness?this.setValues("hsl",e):void 0!==e.v||void 0!==e.value?this.setValues("hsv",e):void 0!==e.w||void 0!==e.whiteness?this.setValues("hwb",e):void 0===e.c&&void 0===e.cyan||this.setValues("cmyk",e)))):new k(t);var e};k.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t=t&&((t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return n.hexString(this.values.rgb)},rgbString:function(){return n.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return n.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return n.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return n.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return n.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return n.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return n.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((.055+i)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return n<e?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return 7.1<=e?"AAA":4.5<=e?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=this,i=t,r=void 0===e?.5:e,a=2*r-1,o=n.alpha()-i.alpha(),s=(1+(a*o==-1?a:(a+o)/(1+a*o)))/2,l=1-s;return this.rgb(s*n.red()+l*i.red(),s*n.green()+l*i.green(),s*n.blue()+l*i.blue()).alpha(n.alpha()*r+i.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new k,i=this.values,r=n.values;for(var a in i)i.hasOwnProperty(a)&&(t=i[a],"[object Array]"===(e={}.toString.call(t))?r[a]=t.slice(0):"[object Number]"===e?r[a]=t:console.error("unexpected color value:",t));return n}},k.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},k.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},k.prototype.getValues=function(t){for(var e=this.values,n={},i=0;i<t.length;i++)n[t.charAt(i)]=e[t][i];return 1!==e.alpha&&(n.a=e.alpha),n},k.prototype.setValues=function(t,e){var n,i,r=this.values,a=this.spaces,o=this.maxes,s=1;if(this.valid=!0,"alpha"===t)s=e;else if(e.length)r[t]=e.slice(0,t.length),s=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)r[t][n]=e[t.charAt(n)];s=e.a}else if(void 0!==e[a[t][0]]){var l=a[t];for(n=0;n<t.length;n++)r[t][n]=e[l[n]];s=e.alpha}if(r.alpha=Math.max(0,Math.min(1,void 0===s?r.alpha:s)),"alpha"===t)return!1;for(n=0;n<t.length;n++)i=Math.max(0,Math.min(o[t][n],r[t][n])),r[t][n]=Math.round(i);for(var u in a)u!==t&&(r[u]=h[t][u](r[t]));return!0},k.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},k.prototype.setChannel=function(t,e,n){var i=this.values[t];return void 0===n?i[e]:(n===i[e]||(i[e]=n,this.setValues(t,i)),this)},"undefined"!=typeof window&&(window.Color=k);var M,C=k,S={noop:function(){},uid:(M=0,function(){return M++}),isNullOrUndef:function(t){return null==t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},isFinite:function(t){return("number"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return S.valueOrDefault(S.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,i){var r,a,o;if(S.isArray(t))if(a=t.length,i)for(r=a-1;0<=r;r--)e.call(n,t[r],r);else for(r=0;r<a;r++)e.call(n,t[r],r);else if(S.isObject(t))for(a=(o=Object.keys(t)).length,r=0;r<a;r++)e.call(n,t[o[r]],o[r])},arrayEquals:function(t,e){var n,i,r,a;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],a=e[n],r instanceof Array&&a instanceof Array){if(!S.arrayEquals(r,a))return!1}else if(r!==a)return!1;return!0},clone:function(t){if(S.isArray(t))return t.map(S.clone);if(S.isObject(t)){for(var e={},n=Object.keys(t),i=n.length,r=0;r<i;++r)e[n[r]]=S.clone(t[n[r]]);return e}return t},_merger:function(t,e,n,i){var r=e[t],a=n[t];S.isObject(r)&&S.isObject(a)?S.merge(r,a,i):e[t]=S.clone(a)},_mergerIf:function(t,e,n){var i=e[t],r=n[t];S.isObject(i)&&S.isObject(r)?S.mergeIf(i,r):e.hasOwnProperty(t)||(e[t]=S.clone(r))},merge:function(t,e,n){var i,r,a,o,s,l=S.isArray(e)?e:[e],u=l.length;if(!S.isObject(t))return t;for(i=(n=n||{}).merger||S._merger,r=0;r<u;++r)if(e=l[r],S.isObject(e))for(s=0,o=(a=Object.keys(e)).length;s<o;++s)i(a[s],t,e,n);return t},mergeIf:function(t,e){return S.merge(t,e,{merger:S._mergerIf})},extend:Object.assign||function(t){return S.merge(t,[].slice.call(arguments,1),{merger:function(t,e,n){e[t]=n[t]}})},inherits:function(t){function e(){this.constructor=i}var n=this,i=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return n.apply(this,arguments)};return e.prototype=n.prototype,i.prototype=new e,i.extend=S.inherits,t&&S.extend(i.prototype,t),i.__super__=n.prototype,i},_deprecated:function(t,e,n,i){void 0!==e&&console.warn(t+': "'+n+'" is deprecated. Please use "'+i+'" instead')}},D=S;S.callCallback=S.callback,S.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},S.getValueOrDefault=S.valueOrDefault,S.getValueAtIndexOrDefault=S.valueAtIndexOrDefault;var A={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-(--t*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return--t*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return 1<=t?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1- --t*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),-(i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2==(t/=.5)?1:(n=n||.45,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),t<1?i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*-.5:i*Math.pow(2,-10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){return t*t*(2.70158*t-1.70158)},easeOutBack:function(t){return--t*t*(2.70158*t+1.70158)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-A.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*A.easeInBounce(2*t):.5*A.easeOutBounce(2*t-1)+.5}},T={effects:A};D.easingEffects=A;var P=Math.PI,O=P/180,I=2*P,F=P/2,L=P/4,R=2*P/3,z={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,i,r,a){if(a){var o=Math.min(a,r/2,i/2),s=e+o,l=n+o,u=e+i-o,c=n+r-o;t.moveTo(e,l),s<u&&l<c?(t.arc(s,l,o,-P,-F),t.arc(u,l,o,-F,0),t.arc(u,c,o,0,F),t.arc(s,c,o,F,P)):s<u?(t.moveTo(s,n),t.arc(u,l,o,-F,F),t.arc(s,l,o,F,P+F)):l<c?(t.arc(s,l,o,-P,0),t.arc(s,c,o,0,P)):t.arc(s,l,o,-P,P),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,i,r)},drawPoint:function(t,e,n,i,r,a){var o,s,l,u,c,d=(a||0)*O;if(e&&"object"==typeof e&&("[object HTMLImageElement]"===(o=e.toString())||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,r),t.rotate(d),t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),void t.restore();if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(i,r,n,0,I),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(d)*n,r-Math.cos(d)*n),d+=R,t.lineTo(i+Math.sin(d)*n,r-Math.cos(d)*n),d+=R,t.lineTo(i+Math.sin(d)*n,r-Math.cos(d)*n),t.closePath();break;case"rectRounded":u=n-(c=.516*n),s=Math.cos(d+L)*u,l=Math.sin(d+L)*u,t.arc(i-s,r-l,c,d-P,d-F),t.arc(i+l,r-s,c,d-F,d),t.arc(i+s,r+l,c,d,d+F),t.arc(i-l,r+s,c,d+F,d+P),t.closePath();break;case"rect":if(!a){u=Math.SQRT1_2*n,t.rect(i-u,r-u,2*u,2*u);break}d+=L;case"rectRot":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(i-s,r-l),t.lineTo(i+l,r-s),t.lineTo(i+s,r+l),t.lineTo(i-l,r+s),t.closePath();break;case"crossRot":d+=L;case"cross":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"star":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s),d+=L,s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"line":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l);break;case"dash":t.moveTo(i,r),t.lineTo(i+Math.cos(d)*n,r+Math.sin(d)*n)}t.fill(),t.stroke()}},_isPointInArea:function(t,e){return t.x>e.left-1e-6&&t.x<e.right+1e-6&&t.y>e.top-1e-6&&t.y<e.bottom+1e-6},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,i){var r=n.steppedLine;if(r){if("middle"===r){var a=(e.x+n.x)/2;t.lineTo(a,i?n.y:e.y),t.lineTo(a,i?e.y:n.y)}else"after"===r&&!i||"after"!==r&&i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}else n.tension?t.bezierCurveTo(i?e.controlPointPreviousX:e.controlPointNextX,i?e.controlPointPreviousY:e.controlPointNextY,i?n.controlPointNextX:n.controlPointPreviousX,i?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}},N=z;D.clear=z.clear,D.drawRoundedRectangle=function(t){t.beginPath(),z.roundedRect.apply(z,arguments)};var B={_set:function(t,e){return D.merge(this[t]||(this[t]={}),e)}};B._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var E=B,W=D.valueOrDefault;var H={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,i,r;return D.isObject(t)?(e=+t.top||0,n=+t.right||0,i=+t.bottom||0,r=+t.left||0):e=n=i=r=+t||0,{top:e,right:n,bottom:i,left:r,height:e+i,width:r+n}},_parseFont:function(t){var e,n=E.global,i=W(t.fontSize,n.defaultFontSize),r={family:W(t.fontFamily,n.defaultFontFamily),lineHeight:D.options.toLineHeight(W(t.lineHeight,n.defaultLineHeight),i),size:i,style:W(t.fontStyle,n.defaultFontStyle),weight:null,string:""};return r.string=!(e=r)||D.isNullOrUndef(e.size)||D.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family,r},resolve:function(t,e,n,i){var r,a,o,s=!0;for(r=0,a=t.length;r<a;++r)if(void 0!==(o=t[r])&&(void 0!==e&&"function"==typeof o&&(o=o(e),s=!1),void 0!==n&&D.isArray(o)&&(o=o[n],s=!1),void 0!==o))return i&&!s&&(i.cacheable=!1),o}},V={_factorize:function(t){var e,n=[],i=Math.sqrt(t);for(e=1;e<i;e++)t%e==0&&(n.push(e),n.push(t/e));return i===(0|i)&&n.push(i),n.sort(function(t,e){return t-e}).pop(),n},log10:Math.log10||function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e}},j=V;D.log10=V.log10;var q=D,U=T,Y=N,G=H,X=j,K={getRtlAdapter:function(t,e,n){return t?(i=e,r=n,{x:function(t){return i+i+r-t},setWidth:function(t){r=t},textAlign:function(t){return"center"===t?t:"right"===t?"left":"right"},xPlus:function(t,e){return t-e},leftForLtr:function(t,e){return t-e}}):{x:function(t){return t},setWidth:function(t){},textAlign:function(t){return t},xPlus:function(t,e){return t+e},leftForLtr:function(t,e){return t}};var i,r},overrideTextDirection:function(t,e){var n,i;"ltr"!==e&&"rtl"!==e||(i=[(n=t.canvas.style).getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)},restoreTextDirection:function(t){var e=t.prevTextDirection;void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}};q.easing=U,q.canvas=Y,q.options=G,q.math=X,q.rtl=K;function Z(t){q.extend(this,t),this.initialize.apply(this,arguments)}q.extend(Z.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=q.extend({},t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,i=e._start,r=e._view;return n&&1!==t?(r=r||(e._view={}),function(t,e,n,i){var r,a,o,s,l,u,c,d,h,f=Object.keys(n);for(r=0,a=f.length;r<a;++r)if(u=n[o=f[r]],e.hasOwnProperty(o)||(e[o]=u),(s=e[o])!==u&&"_"!==o[0]){if(t.hasOwnProperty(o)||(t[o]=s),(c=typeof u)==typeof(l=t[o]))if("string"==c){if((d=C(l)).valid&&(h=C(u)).valid){e[o]=h.mix(d,i).rgbString();continue}}else if(q.isFinite(l)&&q.isFinite(u)){e[o]=l+(u-l)*i;continue}e[o]=u}}(i=i||(e._start={}),r,n,t)):(e._view=q.extend({},n),e._start=null),e},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return q.isNumber(this._model.x)&&q.isNumber(this._model.y)}}),Z.extend=q.inherits;var $=Z,Q=$.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),J=Q;Object.defineProperty(Q.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(Q.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}}),E._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:q.noop,onComplete:q.noop}});var tt={animations:[],request:null,addAnimation:function(t,e,n,i){var r,a,o=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,i||(t.animating=!0),r=0,a=o.length;r<a;++r)if(o[r].chart===t)return void(o[r]=e);o.push(e),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=q.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=q.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){this.advance(),0<this.animations.length&&this.requestAnimationFrame()},advance:function(){for(var t,e,n,i,r=this.animations,a=0;a<r.length;)e=(t=r[a]).chart,n=t.numSteps,i=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(i,n),q.callback(t.render,[e,t],e),q.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(q.callback(t.onAnimationComplete,[t],e),e.animating=!1,r.splice(a,1)):++a}},et=q.options.resolve,nt=["push","pop","shift","splice","unshift"];function it(e,t){var n=e._chartjs;if(n){var i=n.listeners,r=i.indexOf(t);-1!==r&&i.splice(r,1),0<i.length||(nt.forEach(function(t){delete e[t]}),delete e._chartjs)}}function rt(t,e){this.initialize(t,e)}q.extend(rt.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(t,e){var n=this;n.chart=t,n.index=e,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(t){this.index=t},linkScales:function(){var t=this.getMeta(),e=this.chart,n=e.scales,i=this.getDataset(),r=e.options.scales;null!==t.xAxisID&&t.xAxisID in n&&!i.xAxisID||(t.xAxisID=i.xAxisID||r.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in n&&!i.yAxisID||(t.yAxisID=i.yAxisID||r.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&it(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),i=this.getDataset().data||[],r=n.data;for(t=0,e=i.length;t<e;++t)r[t]=r[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var r,t,e=this,n=e.getDataset(),i=n.data||(n.data=[]);e._data!==i&&(e._data&&it(e._data,e),i&&Object.isExtensible(i)&&(t=e,(r=i)._chartjs?r._chartjs.listeners.push(t):(Object.defineProperty(r,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),nt.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),i=r[t];Object.defineProperty(r,t,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),t=i.apply(this,e);return q.each(r._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),t}})}))),e._data=i),e.resyncElements()},_configure:function(){this._config=q.merge({},[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(t,e,n){"_meta"!==t&&"data"!==t&&q._merger(t,e,n)}})},_update:function(t){this._configure(),this._cachedDataOpts=null,this.update(t)},update:q.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],i=n.length,r=0;r<i;++r)n[r].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,i=0;for(t.dataset&&t.dataset.draw();i<n;++i)e[i].draw()},getStyle:function(t){var e,n=this.getMeta(),i=n.dataset;return this._configure(),!1!==(e=i&&void 0===t?this._resolveDatasetElementOptions(i||{}):(t=t||0,this._resolveDataElementOptions(n.data[t]||{},t))).fill&&null!==e.fill||(e.backgroundColor=e.borderColor),e},_resolveDatasetElementOptions:function(t,e){var n,i,r,a,o=this,s=o.chart,l=o._config,u=t.custom||{},c=s.options.elements[o.datasetElementType.prototype._type]||{},d=o._datasetElementOptions,h={},f={chart:s,dataset:o.getDataset(),datasetIndex:o.index,hover:e};for(n=0,i=d.length;n<i;++n)r=d[n],a=e?"hover"+r.charAt(0).toUpperCase()+r.slice(1):r,h[r]=et([u[a],l[a],c[a]],f);return h},_resolveDataElementOptions:function(t,e){var n=this,i=t&&t.custom,r=n._cachedDataOpts;if(r&&!i)return r;var a,o,s,l,u=n.chart,c=n._config,d=u.options.elements[n.dataElementType.prototype._type]||{},h=n._dataElementOptions,f={},g={chart:u,dataIndex:e,dataset:n.getDataset(),datasetIndex:n.index},p={cacheable:!i};if(i=i||{},q.isArray(h))for(o=0,s=h.length;o<s;++o)f[l=h[o]]=et([i[l],c[l],d[l]],g,e,p);else for(o=0,s=(a=Object.keys(h)).length;o<s;++o)f[l=a[o]]=et([i[l],c[h[l]],c[l],d[l]],g,e,p);return p.cacheable&&(n._cachedDataOpts=Object.freeze(f)),f},removeHoverStyle:function(t){q.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,i=t.custom||{},r=t._model,a=q.getHoverColor;t.$previousStyle={backgroundColor:r.backgroundColor,borderColor:r.borderColor,borderWidth:r.borderWidth},r.backgroundColor=et([i.hoverBackgroundColor,e.hoverBackgroundColor,a(r.backgroundColor)],void 0,n),r.borderColor=et([i.hoverBorderColor,e.hoverBorderColor,a(r.borderColor)],void 0,n),r.borderWidth=et([i.hoverBorderWidth,e.hoverBorderWidth,r.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var t=this.getMeta().dataset;t&&this.removeHoverStyle(t)},_setDatasetHoverStyle:function(){var t,e,n,i,r,a,o=this.getMeta().dataset,s={};if(o){for(a=o._model,r=this._resolveDatasetElementOptions(o,!0),t=0,e=(i=Object.keys(r)).length;t<e;++t)s[n=i[t]]=a[n],a[n]=r[n];o.$previousStyle=s}},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,i=e.length;i<n?t.data.splice(i,n-i):n<i&&this.insertElements(n,i-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),rt.extend=q.inherits;var at=rt,ot=2*Math.PI;function st(t,e){var n=e.startAngle,i=e.endAngle,r=e.pixelMargin,a=r/e.outerRadius,o=e.x,s=e.y;t.beginPath(),t.arc(o,s,e.outerRadius,n-a,i+a),e.innerRadius>r?(a=r/e.innerRadius,t.arc(o,s,e.innerRadius-r,i+a,n-a,!0)):t.arc(o,s,r,i+Math.PI/2,n-Math.PI/2),t.closePath(),t.clip()}function lt(t,e,n){var i="inner"===e.borderAlign;i?(t.lineWidth=2*e.borderWidth,t.lineJoin="round"):(t.lineWidth=e.borderWidth,t.lineJoin="bevel"),n.fullCircles&&function(t,e,n,i){var r,a=n.endAngle;for(i&&(n.endAngle=n.startAngle+ot,st(t,n),n.endAngle=a,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=ot,n.fullCircles--)),t.beginPath(),t.arc(n.x,n.y,n.innerRadius,n.startAngle+ot,n.startAngle,!0),r=0;r<n.fullCircles;++r)t.stroke();for(t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.startAngle+ot),r=0;r<n.fullCircles;++r)t.stroke()}(t,e,n,i),i&&st(t,n),t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.endAngle),t.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),t.closePath(),t.stroke()}E._set("global",{elements:{arc:{backgroundColor:E.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var ut=$.extend({_type:"arc",inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var i=q.getAngleFromPoint(n,{x:t,y:e}),r=i.angle,a=i.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=ot;for(;s<r;)r-=ot;for(;r<o;)r+=ot;var l=o<=r&&r<=s,u=a>=n.innerRadius&&a<=n.outerRadius;return l&&u}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,i="inner"===n.borderAlign?.33:0,r={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-i,0),pixelMargin:i,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/ot)};if(e.save(),e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,r.fullCircles){for(r.endAngle=r.startAngle+ot,e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),t=0;t<r.fullCircles;++t)e.fill();r.endAngle=r.startAngle+n.circumference%ot}e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),e.fill(),n.borderWidth&&lt(e,n,r),e.restore()}}),ct=q.valueOrDefault,dt=E.global.defaultColor;E._set("global",{elements:{line:{tension:.4,backgroundColor:dt,borderWidth:3,borderColor:dt,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var ht=$.extend({_type:"line",draw:function(){var t,e,n,i=this,r=i._view,a=i._chart.ctx,o=r.spanGaps,s=i._children.slice(),l=E.global,u=l.elements.line,c=-1,d=i._loop;if(s.length){if(i._loop){for(t=0;t<s.length;++t)if(e=q.previousItem(s,t),!s[t]._view.skip&&e._view.skip){s=s.slice(t).concat(s.slice(0,t)),d=o;break}d&&s.push(s[0])}for(a.save(),a.lineCap=r.borderCapStyle||u.borderCapStyle,a.setLineDash&&a.setLineDash(r.borderDash||u.borderDash),a.lineDashOffset=ct(r.borderDashOffset,u.borderDashOffset),a.lineJoin=r.borderJoinStyle||u.borderJoinStyle,a.lineWidth=ct(r.borderWidth,u.borderWidth),a.strokeStyle=r.borderColor||l.defaultColor,a.beginPath(),(n=s[0]._view).skip||(a.moveTo(n.x,n.y),c=0),t=1;t<s.length;++t)n=s[t]._view,e=-1===c?q.previousItem(s,t):s[c],n.skip||(c!==t-1&&!o||-1===c?a.moveTo(n.x,n.y):q.canvas.lineTo(a,e._view,n),c=t);d&&a.closePath(),a.stroke(),a.restore()}}}),ft=q.valueOrDefault,gt=E.global.defaultColor;function pt(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}E._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:gt,borderColor:gt,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var mt=$.extend({_type:"point",inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:pt,inXRange:pt,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,i=e.pointStyle,r=e.rotation,a=e.radius,o=e.x,s=e.y,l=E.global,u=l.defaultColor;e.skip||void 0!==t&&!q.canvas._isPointInArea(e,t)||(n.strokeStyle=e.borderColor||u,n.lineWidth=ft(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||u,q.canvas.drawPoint(n,i,a,o,s,r))}}),vt=E.global.defaultColor;function bt(t){return t&&void 0!==t.width}function yt(t){var e,n,i,r,a;return r=bt(t)?(a=t.width/2,e=t.x-a,n=t.x+a,i=Math.min(t.y,t.base),Math.max(t.y,t.base)):(a=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),i=t.y-a,t.y+a),{left:e,top:i,right:n,bottom:r}}function xt(t,e,n){return t===e?n:t===n?e:t}function _t(t,e,n){var i,r,a,o,s,l,u,c=t.borderWidth,d=(r=(i=t).borderSkipped,a={},r&&(i.horizontal?i.base>i.x&&(r=xt(r,"left","right")):i.base<i.y&&(r=xt(r,"bottom","top")),a[r]=!0),a);return q.isObject(c)?(o=+c.top||0,s=+c.right||0,l=+c.bottom||0,u=+c.left||0):o=s=l=u=+c||0,{t:d.top||o<0?0:n<o?n:o,r:d.right||s<0?0:e<s?e:s,b:d.bottom||l<0?0:n<l?n:l,l:d.left||u<0?0:e<u?e:u}}function wt(t,e,n){var i=null===e,r=null===n,a=!(!t||i&&r)&&yt(t);return a&&(i||e>=a.left&&e<=a.right)&&(r||n>=a.top&&n<=a.bottom)}E._set("global",{elements:{rectangle:{backgroundColor:vt,borderColor:vt,borderSkipped:"bottom",borderWidth:0}}});var kt=$.extend({_type:"rectangle",draw:function(){var t,e,n,i,r,a=this._chart.ctx,o=this._view,s=(e=yt(t=o),n=e.right-e.left,i=e.bottom-e.top,r=_t(t,n/2,i/2),{outer:{x:e.left,y:e.top,w:n,h:i},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b}}),l=s.outer,u=s.inner;a.fillStyle=o.backgroundColor,a.fillRect(l.x,l.y,l.w,l.h),l.w===u.w&&l.h===u.h||(a.save(),a.beginPath(),a.rect(l.x,l.y,l.w,l.h),a.clip(),a.fillStyle=o.borderColor,a.rect(u.x,u.y,u.w,u.h),a.fill("evenodd"),a.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return wt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return bt(n)?wt(n,t,null):wt(n,null,e)},inXRange:function(t){return wt(this._view,t,null)},inYRange:function(t){return wt(this._view,null,t)},getCenterPoint:function(){var t,e,n=this._view;return e=bt(n)?(t=n.x,(n.y+n.base)/2):(t=(n.x+n.base)/2,n.y),{x:t,y:e}},getArea:function(){var t=this._view;return bt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),Mt={},Ct=ut,St=ht,Dt=mt,At=kt;Mt.Arc=Ct,Mt.Line=St,Mt.Point=Dt,Mt.Rectangle=At;var Tt=q._deprecated,Pt=q.valueOrDefault;function Ot(t,e,n){var i,r,a=n.barThickness,o=e.stackCount,s=e.pixels[t],l=q.isNullOrUndef(a)?function(t,e){var n,i,r,a,o=t._length;for(r=1,a=e.length;r<a;++r)o=Math.min(o,Math.abs(e[r]-e[r-1]));for(r=0,a=t.getTicks().length;r<a;++r)i=t.getPixelForTick(r),o=0<r?Math.min(o,Math.abs(i-n)):o,n=i;return o}(e.scale,e.pixels):-1;return r=q.isNullOrUndef(a)?(i=l*n.categoryPercentage,n.barPercentage):(i=a*o,1),{chunk:i/o,ratio:r,start:s-i/2}}E._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),E._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var It=at.extend({dataElementType:Mt.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var t,e,n=this;at.prototype.initialize.apply(n,arguments),(t=n.getMeta()).stack=n.getDataset().stack,t.bar=!0,e=n._getIndexScale().options,Tt("bar chart",e.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),Tt("bar chart",e.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),Tt("bar chart",e.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),Tt("bar chart",n._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),Tt("bar chart",e.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(t){var e,n,i=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=i.length;e<n;++e)this.updateElement(i[e],e,t)},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=i.getDataset(),o=i._resolveDataElementOptions(t,e);t._xScale=i.getScaleForId(r.xAxisID),t._yScale=i.getScaleForId(r.yAxisID),t._datasetIndex=i.index,t._index=e,t._model={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderSkipped:o.borderSkipped,borderWidth:o.borderWidth,datasetLabel:a.label,label:i.chart.data.labels[e]},q.isArray(a.data[e])&&(t._model.borderSkipped=null),i._updateElementGeometry(t,e,n,o),t.pivot()},_updateElementGeometry:function(t,e,n,i){var r=this,a=t._model,o=r._getValueScale(),s=o.getBasePixel(),l=o.isHorizontal(),u=r._ruler||r.getRuler(),c=r.calculateBarValuePixels(r.index,e,i),d=r.calculateBarIndexPixels(r.index,e,u,i);a.horizontal=l,a.base=n?s:c.base,a.x=l?n?s:c.head:d.center,a.y=l?d.center:n?s:c.head,a.height=l?d.size:void 0,a.width=l?void 0:d.size},_getStacks:function(t){var e,n,i=this._getIndexScale(),r=i._getMatchingVisibleMetas(this._type),a=i.options.stacked,o=r.length,s=[];for(e=0;e<o&&(n=r[e],(!1===a||-1===s.indexOf(n.stack)||void 0===a&&void 0===n.stack)&&s.push(n.stack),n.index!==t);++e);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),i=void 0!==e?n.indexOf(e):-1;return-1===i?n.length-1:i},getRuler:function(){var t,e,n=this._getIndexScale(),i=[];for(t=0,e=this.getMeta().data.length;t<e;++t)i.push(n.getPixelForValue(null,t,this.index));return{pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this.getStackCount(),scale:n}},calculateBarValuePixels:function(t,e,n){var i,r,a,o,s,l,u,c=this.chart,d=this._getValueScale(),h=d.isHorizontal(),f=c.data.datasets,g=d._getMatchingVisibleMetas(this._type),p=d._parseValue(f[t].data[e]),m=n.minBarLength,v=d.options.stacked,b=this.getMeta().stack,y=void 0===p.start?0:0<=p.max&&0<=p.min?p.min:p.max,x=void 0===p.start?p.end:0<=p.max&&0<=p.min?p.max-p.min:p.min-p.max,_=g.length;if(v||void 0===v&&void 0!==b)for(i=0;i<_&&(r=g[i]).index!==t;++i)r.stack===b&&(a=void 0===(u=d._parseValue(f[r.index].data[e])).start?u.end:0<=u.min&&0<=u.max?u.max:u.min,(p.min<0&&a<0||0<=p.max&&0<a)&&(y+=a));return o=d.getPixelForValue(y),l=(s=d.getPixelForValue(y+x))-o,void 0!==m&&Math.abs(l)<m&&(l=m,s=0<=x&&!h||x<0&&h?o-m:o+m),{size:l,base:o,head:s,center:s+l/2}},calculateBarIndexPixels:function(t,e,n,i){var r,a,o,s,l,u,c,d,h,f="flex"===i.barThickness?(r=e,o=i,l=(a=n).pixels,u=l[r],c=0<r?l[r-1]:null,d=r<l.length-1?l[r+1]:null,h=o.categoryPercentage,null===c&&(c=u-(null===d?a.end-a.start:d-u)),null===d&&(d=u+u-c),s=u-(u-Math.min(c,d))/2*h,{chunk:Math.abs(d-c)/2*h/a.stackCount,ratio:o.barPercentage,start:s}):Ot(e,n,i),g=this.getStackIndex(t,this.getMeta().stack),p=f.start+f.chunk*g+f.chunk/2,m=Math.min(Pt(i.maxBarThickness,1/0),f.chunk*f.ratio);return{base:p-m/2,head:p+m/2,center:p,size:m}},draw:function(){var t=this.chart,e=this._getValueScale(),n=this.getMeta().data,i=this.getDataset(),r=n.length,a=0;for(q.canvas.clipArea(t.ctx,t.chartArea);a<r;++a){var o=e._parseValue(i.data[a]);isNaN(o.min)||isNaN(o.max)||n[a].draw()}q.canvas.unclipArea(t.ctx)},_resolveDataElementOptions:function(){var t=q.extend({},at.prototype._resolveDataElementOptions.apply(this,arguments)),e=this._getIndexScale().options,n=this._getValueScale().options;return t.barPercentage=Pt(e.barPercentage,t.barPercentage),t.barThickness=Pt(e.barThickness,t.barThickness),t.categoryPercentage=Pt(e.categoryPercentage,t.categoryPercentage),t.maxBarThickness=Pt(e.maxBarThickness,t.maxBarThickness),t.minBarLength=Pt(n.minBarLength,t.minBarLength),t}}),Ft=q.valueOrDefault,Lt=q.options.resolve;E._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",i=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+i.r+")"}}}});var Rt=at.extend({dataElementType:Mt.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(n){var i=this,t=i.getMeta().data;q.each(t,function(t,e){i.updateElement(t,e,n)})},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=t.custom||{},o=i.getScaleForId(r.xAxisID),s=i.getScaleForId(r.yAxisID),l=i._resolveDataElementOptions(t,e),u=i.getDataset().data[e],c=i.index,d=n?o.getPixelForDecimal(.5):o.getPixelForValue("object"==typeof u?u:NaN,e,c),h=n?s.getBasePixel():s.getPixelForValue(u,e,c);t._xScale=o,t._yScale=s,t._options=l,t._datasetIndex=c,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:a.skip||isNaN(d)||isNaN(h),x:d,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Ft(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Ft(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Ft(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(t,e){var n=this,i=n.chart,r=n.getDataset(),a=t.custom||{},o=r.data[e]||{},s=at.prototype._resolveDataElementOptions.apply(n,arguments),l={chart:i,dataIndex:e,dataset:r,datasetIndex:n.index};return n._cachedDataOpts===s&&(s=q.extend({},s)),s.radius=Lt([a.radius,o.r,n._config.radius,i.options.elements.point.radius],l,e),s}}),zt=q.valueOrDefault,Nt=Math.PI,Bt=2*Nt,Et=Nt/2;E._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){var n,i,r,a=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(r=o.getDatasetMeta(n)).data[a]&&(r.data[a].hidden=!r.data[a].hidden);o.update()}},cutoutPercentage:50,rotation:-Et,circumference:Bt,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],i=": "+e.datasets[t.datasetIndex].data[t.index];return q.isArray(n)?(n=n.slice())[0]+=i:n+=i,n}}}});var Wt=at.extend({dataElementType:Mt.Arc,linkScales:q.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,i,r,a=this,o=a.chart,s=o.chartArea,l=o.options,u=1,c=1,d=0,h=0,f=a.getMeta(),g=f.data,p=l.cutoutPercentage/100||0,m=l.circumference,v=a._getRingWeight(a.index);if(m<Bt){var b=l.rotation%Bt,y=(b+=Nt<=b?-Bt:b<-Nt?Bt:0)+m,x=Math.cos(b),_=Math.sin(b),w=Math.cos(y),k=Math.sin(y),M=b<=0&&0<=y||Bt<=y,C=b<=Et&&Et<=y||Bt+Et<=y,S=b<=-Et&&-Et<=y||Nt+Et<=y,D=b===-Nt||Nt<=y?-1:Math.min(x,x*p,w,w*p),A=S?-1:Math.min(_,_*p,k,k*p),T=M?1:Math.max(x,x*p,w,w*p),P=C?1:Math.max(_,_*p,k,k*p);u=(T-D)/2,c=(P-A)/2,d=-(T+D)/2,h=-(P+A)/2}for(i=0,r=g.length;i<r;++i)g[i]._options=a._resolveDataElementOptions(g[i],i);for(o.borderWidth=a.getMaxBorderWidth(),e=(s.right-s.left-o.borderWidth)/u,n=(s.bottom-s.top-o.borderWidth)/c,o.outerRadius=Math.max(Math.min(e,n)/2,0),o.innerRadius=Math.max(o.outerRadius*p,0),o.radiusLength=(o.outerRadius-o.innerRadius)/(a._getVisibleDatasetWeightTotal()||1),o.offsetX=d*o.outerRadius,o.offsetY=h*o.outerRadius,f.total=a.calculateTotal(),a.outerRadius=o.outerRadius-o.radiusLength*a._getRingWeightOffset(a.index),a.innerRadius=Math.max(a.outerRadius-o.radiusLength*v,0),i=0,r=g.length;i<r;++i)a.updateElement(g[i],i,t)},updateElement:function(t,e,n){var i=this,r=i.chart,a=r.chartArea,o=r.options,s=o.animation,l=(a.left+a.right)/2,u=(a.top+a.bottom)/2,c=o.rotation,d=o.rotation,h=i.getDataset(),f=n&&s.animateRotate||t.hidden?0:i.calculateCircumference(h.data[e])*(o.circumference/Bt),g=n&&s.animateScale?0:i.innerRadius,p=n&&s.animateScale?0:i.outerRadius,m=t._options||{};q.extend(t,{_datasetIndex:i.index,_index:e,_model:{backgroundColor:m.backgroundColor,borderColor:m.borderColor,borderWidth:m.borderWidth,borderAlign:m.borderAlign,x:l+r.offsetX,y:u+r.offsetY,startAngle:c,endAngle:d,circumference:f,outerRadius:p,innerRadius:g,label:q.valueAtIndexOrDefault(h.label,e,r.data.labels[e])}});var v=t._model;n&&s.animateRotate||(v.startAngle=0===e?o.rotation:i.getMeta().data[e-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),t.pivot()},calculateTotal:function(){var n,i=this.getDataset(),t=this.getMeta(),r=0;return q.each(t.data,function(t,e){n=i.data[e],isNaN(n)||t.hidden||(r+=Math.abs(n))}),r},calculateCircumference:function(t){var e=this.getMeta().total;return 0<e&&!isNaN(t)?Bt*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,i,r,a,o,s,l,u=0,c=this.chart;if(!t)for(e=0,n=c.data.datasets.length;e<n;++e)if(c.isDatasetVisible(e)){t=(i=c.getDatasetMeta(e)).data,e!==this.index&&(a=i.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)r=t[e],"inner"!==(o=a?(a._configure(),a._resolveDataElementOptions(r,e)):r._options).borderAlign&&(u=(u=u<(s=o.borderWidth)?s:u)<(l=o.hoverBorderWidth)?l:u);return u},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=zt(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(zt(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});E._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),E._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var Ht=It.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Vt=q.valueOrDefault,jt=q.options.resolve,qt=q.canvas._isPointInArea;function Ut(t,e){var n=t&&t.options.ticks||{},i=n.reverse,r=void 0===n.min?e:0,a=void 0===n.max?e:0;return{start:i?a:r,end:i?r:a}}E._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Yt=at.extend({datasetElementType:Mt.Line,dataElementType:Mt.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.options,l=i._config,u=i._showLine=Vt(l.showLine,s.showLines);for(i._xScale=i.getScaleForId(r.xAxisID),i._yScale=i.getScaleForId(r.yAxisID),u&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=i._yScale,a._datasetIndex=i.index,a._children=o,a._model=i._resolveDatasetElementOptions(a),a.pivot()),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(u&&0!==a._model.tension&&i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i,r,a=this,o=a.getMeta(),s=t.custom||{},l=a.getDataset(),u=a.index,c=l.data[e],d=a._xScale,h=a._yScale,f=o.dataset._model,g=a._resolveDataElementOptions(t,e);i=d.getPixelForValue("object"==typeof c?c:NaN,e,u),r=n?h.getBasePixel():a.calculatePointY(c,e,u),t._xScale=d,t._yScale=h,t._options=g,t._datasetIndex=u,t._index=e,t._model={x:i,y:r,skip:s.skip||isNaN(i)||isNaN(r),radius:g.radius,pointStyle:g.pointStyle,rotation:g.rotation,backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,tension:Vt(s.tension,f?f.tension:0),steppedLine:!!f&&f.steppedLine,hitRadius:g.hitRadius}},_resolveDatasetElementOptions:function(t){var e,n,i,r,a,o,s,l,u,c,d,h=this,f=h._config,g=t.custom||{},p=h.chart.options,m=p.elements.line,v=at.prototype._resolveDatasetElementOptions.apply(h,arguments);return v.spanGaps=Vt(f.spanGaps,p.spanGaps),v.tension=Vt(f.lineTension,m.tension),v.steppedLine=jt([g.steppedLine,f.steppedLine,m.stepped]),v.clip=(e=Vt(f.clip,(o=h._xScale,s=h._yScale,l=v.borderWidth,c=Ut(o,u=l/2),{top:(d=Ut(s,u)).end,right:c.end,bottom:d.start,left:c.start})),q.isObject(e)?(n=e.top,i=e.right,r=e.bottom,a=e.left):n=i=r=a=e,{top:n,right:i,bottom:r,left:a}),v},calculatePointY:function(t,e,n){var i,r,a,o,s,l,u,c=this.chart,d=this._yScale,h=0,f=0;if(d.options.stacked){for(s=+d.getRightValue(t),u=(l=c._getSortedVisibleDatasetMetas()).length,i=0;i<u&&(a=l[i]).index!==n;++i)r=c.data.datasets[a.index],"line"===a.type&&a.yAxisID===d.id&&((o=+d.getRightValue(r.data[e]))<0?f+=o||0:h+=o||0);return s<0?d.getPixelForValue(f+s):d.getPixelForValue(h+s)}return d.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,i,r=this.chart,a=this.getMeta(),o=a.dataset._model,s=r.chartArea,l=a.data||[];function u(t,e,n){return Math.max(Math.min(t,n),e)}if(o.spanGaps&&(l=l.filter(function(t){return!t._model.skip})),"monotone"===o.cubicInterpolationMode)q.splineCurveMonotone(l);else for(t=0,e=l.length;t<e;++t)n=l[t]._model,i=q.splineCurve(q.previousItem(l,t)._model,n,q.nextItem(l,t)._model,o.tension),n.controlPointPreviousX=i.previous.x,n.controlPointPreviousY=i.previous.y,n.controlPointNextX=i.next.x,n.controlPointNextY=i.next.y;if(r.options.elements.line.capBezierPoints)for(t=0,e=l.length;t<e;++t)n=l[t]._model,qt(n,s)&&(0<t&&qt(l[t-1]._model,s)&&(n.controlPointPreviousX=u(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=u(n.controlPointPreviousY,s.top,s.bottom)),t<l.length-1&&qt(l[t+1]._model,s)&&(n.controlPointNextX=u(n.controlPointNextX,s.left,s.right),n.controlPointNextY=u(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var t,e=this.chart,n=this.getMeta(),i=n.data||[],r=e.chartArea,a=e.canvas,o=0,s=i.length;for(this._showLine&&(t=n.dataset._model.clip,q.canvas.clipArea(e.ctx,{left:!1===t.left?0:r.left-t.left,right:!1===t.right?a.width:r.right+t.right,top:!1===t.top?0:r.top-t.top,bottom:!1===t.bottom?a.height:r.bottom+t.bottom}),n.dataset.draw(),q.canvas.unclipArea(e.ctx));o<s;++o)i[o].draw(r)},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Vt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Vt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Vt(n.hoverBorderWidth,n.borderWidth),e.radius=Vt(n.hoverRadius,n.radius)}}),Gt=q.options.resolve;E._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){var n,i,r,a=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(r=o.getDatasetMeta(n)).data[a].hidden=!r.data[a].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});var Xt=at.extend({dataElementType:Mt.Arc,linkScales:q.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i,r=this,a=r.getDataset(),o=r.getMeta(),s=r.chart.options.startAngle||0,l=r._starts=[],u=r._angles=[],c=o.data;for(r._updateRadius(),o.count=r.countVisibleElements(),e=0,n=a.data.length;e<n;e++)l[e]=s,i=r._computeAngle(e),s+=u[e]=i;for(e=0,n=c.length;e<n;++e)c[e]._options=r._resolveDataElementOptions(c[e],e),r.updateElement(c[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,i=e.options,r=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(r/2,0),e.innerRadius=Math.max(i.cutoutPercentage?e.outerRadius/100*i.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var i=this,r=i.chart,a=i.getDataset(),o=r.options,s=o.animation,l=r.scale,u=r.data.labels,c=l.xCenter,d=l.yCenter,h=o.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(a.data[e]),g=i._starts[e],p=g+(t.hidden?0:i._angles[e]),m=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[e]),v=t._options||{};q.extend(t,{_datasetIndex:i.index,_index:e,_scale:l,_model:{backgroundColor:v.backgroundColor,borderColor:v.borderColor,borderWidth:v.borderWidth,borderAlign:v.borderAlign,x:c,y:d,innerRadius:0,outerRadius:n?m:f,startAngle:n&&s.animateRotate?h:g,endAngle:n&&s.animateRotate?h:p,label:q.valueAtIndexOrDefault(u,e,u[e])}}),t.pivot()},countVisibleElements:function(){var n=this.getDataset(),t=this.getMeta(),i=0;return q.each(t.data,function(t,e){isNaN(n.data[e])||t.hidden||i++}),i},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor,r=q.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=r(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=r(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=r(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(t){var e=this,n=this.getMeta().count,i=e.getDataset(),r=e.getMeta();if(isNaN(i.data[t])||r.data[t].hidden)return 0;var a={chart:e.chart,dataIndex:t,dataset:i,datasetIndex:e.index};return Gt([e.chart.options.elements.arc.angle,2*Math.PI/n],a,t)}});E._set("pie",q.clone(E.doughnut)),E._set("pie",{cutoutPercentage:0});var Kt=Wt,Zt=q.valueOrDefault;E._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var $t=at.extend({datasetElementType:Mt.Line,dataElementType:Mt.Point,linkScales:q.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.scale,l=i._config;for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=s,a._datasetIndex=i.index,a._children=o,a._loop=!0,a._model=i._resolveDatasetElementOptions(a),a.pivot(),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i=this,r=t.custom||{},a=i.getDataset(),o=i.chart.scale,s=o.getPointPositionForValue(e,a.data[e]),l=i._resolveDataElementOptions(t,e),u=i.getMeta().dataset._model,c=n?o.xCenter:s.x,d=n?o.yCenter:s.y;t._scale=o,t._options=l,t._datasetIndex=i.index,t._index=e,t._model={x:c,y:d,skip:r.skip||isNaN(c)||isNaN(d),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:Zt(r.tension,u?u.tension:0),hitRadius:l.hitRadius}},_resolveDatasetElementOptions:function(){var t=this._config,e=this.chart.options,n=at.prototype._resolveDatasetElementOptions.apply(this,arguments);return n.spanGaps=Zt(t.spanGaps,e.spanGaps),n.tension=Zt(t.lineTension,e.elements.line.tension),n},updateBezierControlPoints:function(){var t,e,n,i,r=this.getMeta(),a=this.chart.chartArea,o=r.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}for(r.dataset._model.spanGaps&&(o=o.filter(function(t){return!t._model.skip})),t=0,e=o.length;t<e;++t)n=o[t]._model,i=q.splineCurve(q.previousItem(o,t,!0)._model,n,q.nextItem(o,t,!0)._model,n.tension),n.controlPointPreviousX=s(i.previous.x,a.left,a.right),n.controlPointPreviousY=s(i.previous.y,a.top,a.bottom),n.controlPointNextX=s(i.next.x,a.left,a.right),n.controlPointNextY=s(i.next.y,a.top,a.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Zt(n.hoverBorderWidth,n.borderWidth),e.radius=Zt(n.hoverRadius,n.radius)}});E._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}}),E._set("global",{datasets:{scatter:{showLine:!1}}});var Qt={bar:It,bubble:Rt,doughnut:Wt,horizontalBar:Ht,line:Yt,polarArea:Xt,pie:Kt,radar:$t,scatter:Yt};function Jt(t,e){return t.native?{x:t.x,y:t.y}:q.getRelativePosition(t,e)}function te(t,e){var n,i,r,a,o,s,l=t._getSortedVisibleDatasetMetas();for(i=0,a=l.length;i<a;++i)for(r=0,o=(n=l[i].data).length;r<o;++r)(s=n[r])._view.skip||e(s)}function ee(t,e){var n=[];return te(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function ne(t,i,r,a){var o=Number.POSITIVE_INFINITY,s=[];return te(t,function(t){if(!r||t.inRange(i.x,i.y)){var e=t.getCenterPoint(),n=a(i,e);n<o?(s=[t],o=n):n===o&&s.push(t)}}),s}function ie(t){var r=-1!==t.indexOf("x"),a=-1!==t.indexOf("y");return function(t,e){var n=r?Math.abs(t.x-e.x):0,i=a?Math.abs(t.y-e.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(i,2))}}function re(t,e,n){var i=Jt(e,t);n.axis=n.axis||"x";var r=ie(n.axis),a=n.intersect?ee(t,i):ne(t,i,!1,r),o=[];return a.length?(t._getSortedVisibleDatasetMetas().forEach(function(t){var e=t.data[a[0]._index];e&&!e._view.skip&&o.push(e)}),o):[]}var ae={modes:{single:function(t,e){var n=Jt(e,t),i=[];return te(t,function(t){return t.inRange(n.x,n.y)&&(i.push(t),i)}),i.slice(0,1)},label:re,index:re,dataset:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||"xy";var r=ie(n.axis),a=n.intersect?ee(t,i):ne(t,i,!1,r);return 0<a.length&&(a=t.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(t,e){return re(t,e,{intersect:!1})},point:function(t,e){return ee(t,Jt(e,t))},nearest:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||"xy";var r=ie(n.axis);return ne(t,i,n.intersect,r)},x:function(t,e,n){var i=Jt(e,t),r=[],a=!1;return te(t,function(t){t.inXRange(i.x)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r},y:function(t,e,n){var i=Jt(e,t),r=[],a=!1;return te(t,function(t){t.inYRange(i.y)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r}}},oe=q.extend;function se(t,e){return q.where(t,function(t){return t.pos===e})}function le(t,r){return t.sort(function(t,e){var n=r?e:t,i=r?t:e;return n.weight===i.weight?n.index-i.index:n.weight-i.weight})}function ue(t){var e=function(t){var e,n,i,r=[];for(e=0,n=(t||[]).length;e<n;++e)i=t[e],r.push({index:e,box:i,pos:i.position,horizontal:i.isHorizontal(),weight:i.weight});return r}(t),n=le(se(e,"left"),!0),i=le(se(e,"right")),r=le(se(e,"top"),!0),a=le(se(e,"bottom"));return{leftAndTop:n.concat(r),rightAndBottom:i.concat(a),chartArea:se(e,"chartArea"),vertical:n.concat(i),horizontal:r.concat(a)}}function ce(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function de(t,e,n){var i,r,a=n.box,o=t.maxPadding;if(n.size&&(t[n.pos]-=n.size),n.size=n.horizontal?a.height:a.width,t[n.pos]+=n.size,a.getPadding){var s=a.getPadding();o.top=Math.max(o.top,s.top),o.left=Math.max(o.left,s.left),o.bottom=Math.max(o.bottom,s.bottom),o.right=Math.max(o.right,s.right)}return i=e.outerWidth-ce(o,t,"left","right"),r=e.outerHeight-ce(o,t,"top","bottom"),i!==t.w||r!==t.h?(t.w=i,t.h=r,n.horizontal?i!==t.w:r!==t.h):void 0}function he(t,n){var i=n.maxPadding;function e(t){var e={left:0,top:0,right:0,bottom:0};return t.forEach(function(t){e[t]=Math.max(n[t],i[t])}),e}return e(t?["left","right"]:["top","bottom"])}function fe(t,e,n){var i,r,a,o,s,l,u=[];for(i=0,r=t.length;i<r;++i)(o=(a=t[i]).box).update(a.width||e.w,a.height||e.h,he(a.horizontal,e)),de(e,n,a)&&(l=!0,u.length&&(s=!0)),o.fullWidth||u.push(a);return s&&fe(u,e,n)||l}function ge(t,e,n){var i,r,a,o,s=n.padding,l=e.x,u=e.y;for(i=0,r=t.length;i<r;++i)o=(a=t[i]).box,a.horizontal?(o.left=o.fullWidth?s.left:e.left,o.right=o.fullWidth?n.outerWidth-s.right:e.left+e.w,o.top=u,o.bottom=u+o.height,o.width=o.right-o.left,u=o.bottom):(o.left=l,o.right=l+o.width,o.top=e.top,o.bottom=e.top+e.h,o.height=o.bottom-o.top,l=o.right);e.x=l,e.y=u}E._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var pe,me={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw:function(){e.draw.apply(e,arguments)}}]},t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var i,r=["fullWidth","position","weight"],a=r.length,o=0;o<a;++o)i=r[o],n.hasOwnProperty(i)&&(e[i]=n[i])},update:function(n,t,e){if(n){var i,r,a=n.options.layout||{},o=q.options.toPadding(a.padding),s=t-o.width,l=e-o.height,u=ue(n.boxes),c=u.vertical,d=u.horizontal,h=Object.freeze({outerWidth:t,outerHeight:e,padding:o,availableWidth:s,vBoxMaxWidth:s/2/c.length,hBoxMaxHeight:l/2}),f=oe({maxPadding:oe({},o),w:s,h:l,x:o.left,y:o.top},o);!function(t,e){var n,i,r;for(n=0,i=t.length;n<i;++n)(r=t[n]).width=r.horizontal?r.box.fullWidth&&e.availableWidth:e.vBoxMaxWidth,r.height=r.horizontal&&e.hBoxMaxHeight}(c.concat(d),h),fe(c,f,h),fe(d,f,h)&&fe(c,f,h),r=(i=f).maxPadding,i.y+=g("top"),i.x+=g("left"),g("right"),g("bottom"),ge(u.leftAndTop,f,h),f.x+=f.w,f.y+=f.h,ge(u.rightAndBottom,f,h),n.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h},q.each(u.chartArea,function(t){var e=t.box;oe(e,n.chartArea),e.update(f.w,f.h)})}function g(t){var e=Math.max(r[t]-i[t],0);return i[t]+=e,e}}},ve=(pe=Object.freeze({__proto__:null,default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&pe.default||pe,be="$chartjs",ye="chartjs-",xe=ye+"size-monitor",_e=ye+"render-monitor",we=ye+"render-animation",ke=["animationstart","webkitAnimationStart"],Me={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function Ce(t,e){var n=q.getStyle(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?Number(i[1]):void 0}var Se=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function De(t,e,n){t.addEventListener(e,n,Se)}function Ae(t,e,n){t.removeEventListener(e,n,Se)}function Te(t,e,n,i,r){return{type:t,chart:e,native:r||null,x:void 0!==n?n:null,y:void 0!==i?i:null}}function Pe(t){var e=document.createElement("div");return e.className=t||"",e}function Oe(n,i,r){var t,e,a,o,s,l,u,c,d,h,f,g,p=n[be]||(n[be]={}),m=p.resizer=(u=!(s=function(){if(p.resizer){var t=r.options.maintainAspectRatio&&n.parentNode,e=t?t.clientWidth:0;i(Te("resize",r)),t&&t.clientWidth<e&&r.canvas&&i(Te("resize",r))}}),c=[],t=function(){c=Array.prototype.slice.call(arguments),l=l||this,u||(u=!0,q.requestAnimFrame.call(window,function(){u=!1,s.apply(l,c)}))},e=Pe(xe),a=Pe(xe+"-expand"),o=Pe(xe+"-shrink"),a.appendChild(Pe()),o.appendChild(Pe()),e.appendChild(a),e.appendChild(o),e._reset=function(){a.scrollLeft=1e6,a.scrollTop=1e6,o.scrollLeft=1e6,o.scrollTop=1e6},De(a,"scroll",v.bind(a,"expand")),De(o,"scroll",v.bind(o,"shrink")),e);function v(){e._reset(),t()}h=function(){if(p.resizer){var t=n.parentNode;t&&t!==m.parentNode&&t.insertBefore(m,t.firstChild),m._reset()}},f=(d=n)[be]||(d[be]={}),g=f.renderProxy=function(t){t.animationName===we&&h()},q.each(ke,function(t){De(d,t,g)}),f.reflow=!!d.offsetParent,d.classList.add(_e)}function Ie(t){var e,n,i,r=t[be]||{},a=r.resizer;delete r.resizer,n=(e=t)[be]||{},(i=n.renderProxy)&&(q.each(ke,function(t){Ae(e,t,i)}),delete n.renderProxy),e.classList.remove(_e),a&&a.parentNode&&a.parentNode.removeChild(a)}var Fe={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(t){if(!this.disableCSSInjection){var e=t.getRootNode?t.getRootNode():document;!function(t,e){var n=t[be]||(t[be]={});if(!n.containsStyles){n.containsStyles=!0,e="/* Chart.js */\n"+e;var i=document.createElement("style");i.setAttribute("type","text/css"),i.appendChild(document.createTextNode(e)),t.appendChild(i)}}(e.host?e:document.head,ve)}},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(this._ensureLoaded(t),function(t,e){var n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t[be]={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===r||""===r){var a=Ce(t,"width");void 0!==a&&(t.width=a)}if(null===i||""===i)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var o=Ce(t,"height");void 0!==a&&(t.height=o)}}(t,e),n):null},releaseContext:function(t){var n=t.canvas;if(n[be]){var i=n[be].initial;["height","width"].forEach(function(t){var e=i[t];q.isNullOrUndef(e)?n.removeAttribute(t):n.setAttribute(t,e)}),q.each(i.style||{},function(t,e){n.style[e]=t}),n.width=n.width,delete n[be]}},addEventListener:function(a,t,o){var e=a.canvas;if("resize"!==t){var n=o[be]||(o[be]={});De(e,t,(n.proxies||(n.proxies={}))[a.id+"_"+t]=function(t){var e,n,i,r;o((n=a,i=Me[(e=t).type]||e.type,r=q.getRelativePosition(e,n),Te(i,n,r.x,r.y,e)))})}else Oe(e,o,a)},removeEventListener:function(t,e,n){var i=t.canvas;if("resize"!==e){var r=((n[be]||{}).proxies||{})[t.id+"_"+e];r&&Ae(i,e,r)}else Ie(i)}};q.addEvent=De,q.removeEvent=Ae;var Le=Fe._enabled?Fe:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},Re=q.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Le);E._set("global",{plugins:{}});var ze={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),this._cacheId++},unregister:function(t){var n=this._plugins;[].concat(t).forEach(function(t){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var i,r,a,o,s,l=this.descriptors(t),u=l.length;for(i=0;i<u;++i)if("function"==typeof(s=(a=(r=l[i]).plugin)[e])&&((o=[t].concat(n||[])).push(r.options),!1===s.apply(a,o)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var i=[],r=[],n=t&&t.config||{},a=n.options&&n.options.plugins||{};return this._plugins.concat(n.plugins||[]).forEach(function(t){if(-1===i.indexOf(t)){var e=t.id,n=a[e];!1!==n&&(!0===n&&(n=q.clone(E.global.plugins[e])),i.push(t),r.push({plugin:t,options:n||{}}))}}),e.descriptors=r,e.id=this._cacheId,r},_invalidate:function(t){delete t.$plugins}},Ne={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=q.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?q.merge({},[E.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=q.extend(this.defaults[t],e))},addScalesToLayout:function(e){q.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,me.addBox(e,t)})}},Be=q.valueOrDefault,Ee=q.rtl.getRtlAdapter;E._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:q.noop,title:function(t,e){var n="",i=e.labels,r=i?i.length:0;if(0<t.length){var a=t[0];a.label?n=a.label:a.xLabel?n=a.xLabel:0<r&&a.index<r&&(n=i[a.index])}return n},afterTitle:q.noop,beforeBody:q.noop,beforeLabel:q.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),q.isNullOrUndef(t.value)?n+=t.yLabel:n+=t.value,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:q.noop,afterBody:q.noop,beforeFooter:q.noop,footer:q.noop,afterFooter:q.noop}}});var We={average:function(t){if(!t.length)return!1;var e,n,i=0,r=0,a=0;for(e=0,n=t.length;e<n;++e){var o=t[e];if(o&&o.hasValue()){var s=o.tooltipPosition();i+=s.x,r+=s.y,++a}}return{x:i/a,y:r/a}},nearest:function(t,e){var n,i,r,a=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){var l=t[n];if(l&&l.hasValue()){var u=l.getCenterPoint(),c=q.distanceBetweenPoints(e,u);c<s&&(s=c,r=l)}}if(r){var d=r.tooltipPosition();a=d.x,o=d.y}return{x:a,y:o}}};function He(t,e){return e&&(q.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ve(t){return("string"==typeof t||t instanceof String)&&-1<t.indexOf("\n")?t.split("\n"):t}function je(t){var e=E.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,rtl:t.rtl,textDirection:t.textDirection,bodyFontColor:t.bodyFontColor,_bodyFontFamily:Be(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:Be(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:Be(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:Be(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:Be(t.titleFontStyle,e.defaultFontStyle),titleFontSize:Be(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:Be(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:Be(t.footerFontStyle,e.defaultFontStyle),footerFontSize:Be(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function qe(t,e){var n=t._chart.ctx,i=2*e.yPadding,r=0,a=e.body,o=a.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);o+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,u=e.titleFontSize,c=e.bodyFontSize,d=e.footerFontSize;i+=s*u,i+=s?(s-1)*e.titleSpacing:0,i+=s?e.titleMarginBottom:0,i+=o*c,i+=o?(o-1)*e.bodySpacing:0,i+=l?e.footerMarginTop:0,i+=l*d,i+=l?(l-1)*e.footerSpacing:0;function h(t){r=Math.max(r,n.measureText(t).width+f)}var f=0;return n.font=q.fontString(u,e._titleFontStyle,e._titleFontFamily),q.each(e.title,h),n.font=q.fontString(c,e._bodyFontStyle,e._bodyFontFamily),q.each(e.beforeBody.concat(e.afterBody),h),f=e.displayColors?c+2:0,q.each(a,function(t){q.each(t.before,h),q.each(t.lines,h),q.each(t.after,h)}),f=0,n.font=q.fontString(d,e._footerFontStyle,e._footerFontFamily),q.each(e.footer,h),{width:r+=2*e.xPadding,height:i}}function Ue(t,e){return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function Ye(t){return He([],Ve(t))}var Ge=$.extend({initialize:function(){this._model=je(this._options),this._lastActive=[]},getTitle:function(){var t=this._options.callbacks,e=t.beforeTitle.apply(this,arguments),n=t.title.apply(this,arguments),i=t.afterTitle.apply(this,arguments),r=[];return r=He(r,Ve(e)),r=He(r,Ve(n)),r=He(r,Ve(i))},getBeforeBody:function(){return Ye(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,n){var i=this,r=i._options.callbacks,a=[];return q.each(t,function(t){var e={before:[],lines:[],after:[]};He(e.before,Ve(r.beforeLabel.call(i,t,n))),He(e.lines,r.label.call(i,t,n)),He(e.after,Ve(r.afterLabel.call(i,t,n))),a.push(e)}),a},getAfterBody:function(){return Ye(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this._options.callbacks,e=t.beforeFooter.apply(this,arguments),n=t.footer.apply(this,arguments),i=t.afterFooter.apply(this,arguments),r=[];return r=He(r,Ve(e)),r=He(r,Ve(n)),r=He(r,Ve(i))},update:function(t){var e,n,i,r,a,o,s,l,u,c,d,h,f,g,p,m,v,b,y,x,_,w,k,M=this,C=M._options,S=M._model,D=M._model=je(C),A=M._active,T=M._data,P={xAlign:S.xAlign,yAlign:S.yAlign},O={x:S.x,y:S.y},I={width:S.width,height:S.height},F={x:S.caretX,y:S.caretY};if(A.length){D.opacity=1;var L=[],R=[];F=We[C.position].call(M,A,M._eventPosition);var z=[];for(e=0,n=A.length;e<n;++e)z.push((m=A[e],k=w=_=b=v=void 0,v=m._xScale,b=m._yScale||m._scale,y=m._index,x=m._datasetIndex,_=m._chart.getDatasetMeta(x).controller,w=_._getIndexScale(),k=_._getValueScale(),{xLabel:v?v.getLabelForIndex(y,x):"",yLabel:b?b.getLabelForIndex(y,x):"",label:w?""+w.getLabelForIndex(y,x):"",value:k?""+k.getLabelForIndex(y,x):"",index:y,datasetIndex:x,x:m._model.x,y:m._model.y}));C.filter&&(z=z.filter(function(t){return C.filter(t,T)})),C.itemSort&&(z=z.sort(function(t,e){return C.itemSort(t,e,T)})),q.each(z,function(t){L.push(C.callbacks.labelColor.call(M,t,M._chart)),R.push(C.callbacks.labelTextColor.call(M,t,M._chart))}),D.title=M.getTitle(z,T),D.beforeBody=M.getBeforeBody(z,T),D.body=M.getBody(z,T),D.afterBody=M.getAfterBody(z,T),D.footer=M.getFooter(z,T),D.x=F.x,D.y=F.y,D.caretPadding=C.caretPadding,D.labelColors=L,D.labelTextColors=R,D.dataPoints=z,P=function(t,e){var n,i,r,a,o,s=t._model,l=t._chart,u=t._chart.chartArea,c="center",d="center";s.y<e.height?d="top":s.y>l.height-e.height&&(d="bottom");var h=(u.left+u.right)/2,f=(u.top+u.bottom)/2;i="center"===d?(n=function(t){return t<=h},function(t){return h<t}):(n=function(t){return t<=e.width/2},function(t){return t>=l.width-e.width/2}),r=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},a=function(t){return t-e.width-s.caretSize-s.caretPadding<0},o=function(t){return t<=f?"top":"bottom"},n(s.x)?(c="left",r(s.x)&&(c="center",d=o(s.y))):i(s.x)&&(c="right",a(s.x)&&(c="center",d=o(s.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:c,yAlign:g.yAlign?g.yAlign:d}}(this,I=qe(this,D)),i=D,r=I,a=P,o=M._chart,s=i.x,l=i.y,u=i.caretSize,c=i.caretPadding,d=i.cornerRadius,h=a.xAlign,f=a.yAlign,g=u+c,p=d+c,"right"===h?s-=r.width:"center"===h&&((s-=r.width/2)+r.width>o.width&&(s=o.width-r.width),s<0&&(s=0)),"top"===f?l+=g:l-="bottom"===f?r.height+g:r.height/2,"center"===f?"left"===h?s+=g:"right"===h&&(s-=g):"left"===h?s-=p:"right"===h&&(s+=p),O={x:s,y:l}}else D.opacity=0;return D.xAlign=P.xAlign,D.yAlign=P.yAlign,D.x=O.x,D.y=O.y,D.width=I.width,D.height=I.height,D.caretX=F.x,D.caretY=F.y,M._model=D,t&&C.custom&&C.custom.call(M,D),M},drawCaret:function(t,e){var n=this._chart.ctx,i=this._view,r=this.getCaretPosition(t,e,i);n.lineTo(r.x1,r.y1),n.lineTo(r.x2,r.y2),n.lineTo(r.x3,r.y3)},getCaretPosition:function(t,e,n){var i,r,a,o,s,l,u=n.caretSize,c=n.cornerRadius,d=n.xAlign,h=n.yAlign,f=t.x,g=t.y,p=e.width,m=e.height;if("center"===h)s=g+m/2,l="left"===d?(r=(i=f)-u,a=i,o=s+u,s-u):(r=(i=f+p)+u,a=i,o=s-u,s+u);else if(a=(i="left"===d?(r=f+c+u)-u:"right"===d?(r=f+p-c-u)-u:(r=n.caretX)-u,r+u),"top"===h)s=(o=g)-u,l=o;else{s=(o=g+m)+u,l=o;var v=a;a=i,i=v}return{x1:i,x2:r,x3:a,y1:o,y2:s,y3:l}},drawTitle:function(t,e,n){var i,r,a,o=e.title,s=o.length;if(s){var l=Ee(e.rtl,e.x,e.width);for(t.x=Ue(e,e._titleAlign),n.textAlign=l.textAlign(e._titleAlign),n.textBaseline="middle",i=e.titleFontSize,r=e.titleSpacing,n.fillStyle=e.titleFontColor,n.font=q.fontString(i,e._titleFontStyle,e._titleFontFamily),a=0;a<s;++a)n.fillText(o[a],l.x(t.x),t.y+i/2),t.y+=i+r,a+1===s&&(t.y+=e.titleMarginBottom-r)}},drawBody:function(e,t,n){function i(t){n.fillText(t,y.x(e.x+v),e.y+h/2),e.y+=h+f}var r,a,o,s,l,u,c,d,h=t.bodyFontSize,f=t.bodySpacing,g=t._bodyAlign,p=t.body,m=t.displayColors,v=0,b=m?Ue(t,"left"):0,y=Ee(t.rtl,t.x,t.width),x=y.textAlign(g);for(n.textAlign=g,n.textBaseline="middle",n.font=q.fontString(h,t._bodyFontStyle,t._bodyFontFamily),e.x=Ue(t,x),n.fillStyle=t.bodyFontColor,q.each(t.beforeBody,i),v=m&&"right"!==x?"center"===g?h/2+1:h+2:0,l=0,c=p.length;l<c;++l){for(r=p[l],a=t.labelTextColors[l],o=t.labelColors[l],n.fillStyle=a,q.each(r.before,i),u=0,d=(s=r.lines).length;u<d;++u){if(m){var _=y.x(b);n.fillStyle=t.legendColorBackground,n.fillRect(y.leftForLtr(_,h),e.y,h,h),n.lineWidth=1,n.strokeStyle=o.borderColor,n.strokeRect(y.leftForLtr(_,h),e.y,h,h),n.fillStyle=o.backgroundColor,n.fillRect(y.leftForLtr(y.xPlus(_,1),h-2),e.y+1,h-2,h-2),n.fillStyle=a}i(s[u])}q.each(r.after,i)}v=0,q.each(t.afterBody,i),e.y-=f},drawFooter:function(t,e,n){var i,r,a=e.footer,o=a.length;if(o){var s=Ee(e.rtl,e.x,e.width);for(t.x=Ue(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=s.textAlign(e._footerAlign),n.textBaseline="middle",i=e.footerFontSize,n.fillStyle=e.footerFontColor,n.font=q.fontString(i,e._footerFontStyle,e._footerFontFamily),r=0;r<o;++r)n.fillText(a[r],s.x(t.x),t.y+i/2),t.y+=i+e.footerSpacing}},drawBackground:function(t,e,n,i){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var r=e.xAlign,a=e.yAlign,o=t.x,s=t.y,l=i.width,u=i.height,c=e.cornerRadius;n.beginPath(),n.moveTo(o+c,s),"top"===a&&this.drawCaret(t,i),n.lineTo(o+l-c,s),n.quadraticCurveTo(o+l,s,o+l,s+c),"center"===a&&"right"===r&&this.drawCaret(t,i),n.lineTo(o+l,s+u-c),n.quadraticCurveTo(o+l,s+u,o+l-c,s+u),"bottom"===a&&this.drawCaret(t,i),n.lineTo(o+c,s+u),n.quadraticCurveTo(o,s+u,o,s+u-c),"center"===a&&"left"===r&&this.drawCaret(t,i),n.lineTo(o,s+c),n.quadraticCurveTo(o,s,o+c,s),n.closePath(),n.fill(),0<e.borderWidth&&n.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},i={x:e.x,y:e.y},r=Math.abs(e.opacity<.001)?0:e.opacity,a=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&a&&(t.save(),t.globalAlpha=r,this.drawBackground(i,e,t,n),i.y+=e.yPadding,q.rtl.overrideTextDirection(t,e.textDirection),this.drawTitle(i,e,t),this.drawBody(i,e,t),this.drawFooter(i,e,t),q.rtl.restoreTextDirection(t,e.textDirection),t.restore())}},handleEvent:function(t){var e,n=this,i=n._options;return n._lastActive=n._lastActive||[],"mouseout"===t.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(t,i.mode,i),i.reverse&&n._active.reverse()),(e=!q.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(i.enabled||i.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}}),Xe=We,Ke=Ge;Ke.positioners=Xe;var Ze=q.valueOrDefault;function $e(){return q.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){if("xAxes"===t||"yAxes"===t){var r,a,o,s=n[t].length;for(e[t]||(e[t]=[]),r=0;r<s;++r)o=n[t][r],a=Ze(o.type,"xAxes"===t?"category":"linear"),r>=e[t].length&&e[t].push({}),!e[t][r].type||o.type&&o.type!==e[t][r].type?q.merge(e[t][r],[Ne.getScaleDefaults(a),o]):q.merge(e[t][r],o)}else q._merger(t,e,n,i)}})}function Qe(){return q.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){var r=e[t]||{},a=n[t];"scales"===t?e[t]=$e(r,a):"scale"===t?e[t]=q.merge(r,[Ne.getScaleDefaults(a.type),a]):q._merger(t,e,n,i)}})}function Je(t,e,n){for(var i,r=function(t){return t.id===i};i=e+n++,0<=q.findIndex(t,r););return i}function tn(t){return"top"===t||"bottom"===t}function en(n,i){return function(t,e){return t[n]===e[n]?t[i]-e[i]:t[n]-e[n]}}E._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});function nn(t,e){return this.construct(t,e),this}q.extend(nn.prototype,{construct:function(t,e){var n,i,r=this;(i=(n=(n=e)||{}).data=n.data||{}).datasets=i.datasets||[],i.labels=i.labels||[],n.options=Qe(E.global,E[n.type],n.options||{}),e=n;var a=Re.acquireContext(t,e),o=a&&a.canvas,s=o&&o.height,l=o&&o.width;r.id=q.uid(),r.ctx=a,r.canvas=o,r.config=e,r.width=l,r.height=s,r.aspectRatio=s?l/s:null,r.options=e.options,r._bufferedRender=!1,r._layers=[],(r.chart=r).controller=r,nn.instances[r.id]=r,Object.defineProperty(r,"data",{get:function(){return r.config.data},set:function(t){r.config.data=t}}),a&&o?(r.initialize(),r.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return ze.notify(t,"beforeInit"),q.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.initToolTip(),ze.notify(t,"afterInit"),t},clear:function(){return q.canvas.clear(this),this},stop:function(){return tt.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,i=e.canvas,r=n.maintainAspectRatio&&e.aspectRatio||null,a=Math.max(0,Math.floor(q.getMaximumWidth(i))),o=Math.max(0,Math.floor(r?a/r:q.getMaximumHeight(i)));if((e.width!==a||e.height!==o)&&(i.width=e.width=a,i.height=e.height=o,i.style.width=a+"px",i.style.height=o+"px",q.retinaScale(e,n.devicePixelRatio),!t)){var s={width:a,height:o};ze.notify(e,"resize",[s]),n.onResize&&n.onResize(e,s),e.stop(),e.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,n=t.scales||{},e=t.scale;q.each(n.xAxes,function(t,e){t.id||(t.id=Je(n.xAxes,"x-axis-",e))}),q.each(n.yAxes,function(t,e){t.id||(t.id=Je(n.yAxes,"y-axis-",e))}),e&&(e.id=e.id||"scale")},buildOrUpdateScales:function(){var o=this,t=o.options,s=o.scales||{},e=[],l=Object.keys(s).reduce(function(t,e){return t[e]=!1,t},{});t.scales&&(e=e.concat((t.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(t.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),t.scale&&e.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),q.each(e,function(t){var e=t.options,n=e.id,i=Ze(e.type,t.dtype);tn(e.position)!==tn(t.dposition)&&(e.position=t.dposition),l[n]=!0;var r=null;if(n in s&&s[n].type===i)(r=s[n]).options=e,r.ctx=o.ctx,r.chart=o;else{var a=Ne.getScaleConstructor(i);if(!a)return;r=new a({id:n,type:i,options:e,ctx:o.ctx,chart:o}),s[r.id]=r}r.mergeTicksOptions(),t.isDefault&&(o.scale=r)}),q.each(l,function(t,e){t||delete s[e]}),o.scales=s,Ne.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t,e,n=this,i=[],r=n.data.datasets;for(t=0,e=r.length;t<e;t++){var a=r[t],o=n.getDatasetMeta(t),s=a.type||n.config.type;if(o.type&&o.type!==s&&(n.destroyDatasetMeta(t),o=n.getDatasetMeta(t)),o.type=s,o.order=a.order||0,o.index=t,o.controller)o.controller.updateIndex(t),o.controller.linkScales();else{var l=Qt[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(n,t),i.push(o.controller)}}return i},resetElements:function(){var n=this;q.each(n.data.datasets,function(t,e){n.getDatasetMeta(e).controller.reset()},n)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e,n,i,r,a=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),r=(i=a).options,q.each(i.scales,function(t){me.removeBox(i,t)}),r=Qe(E.global,E[i.config.type],r),i.options=i.config.options=r,i.ensureScalesHaveIDs(),i.buildOrUpdateScales(),i.tooltip._options=r.tooltips,i.tooltip.initialize(),ze._invalidate(a),!1!==ze.notify(a,"beforeUpdate")){a.tooltip._data=a.data;var o=a.buildOrUpdateControllers();for(e=0,n=a.data.datasets.length;e<n;e++)a.getDatasetMeta(e).controller.buildOrUpdateElements();a.updateLayout(),a.options.animation&&a.options.animation.duration&&q.each(o,function(t){t.reset()}),a.updateDatasets(),a.tooltip.initialize(),a.lastActive=[],ze.notify(a,"afterUpdate"),a._layers.sort(en("z","_idx")),a._bufferedRender?a._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:a.render(t)}},updateLayout:function(){var e=this;!1!==ze.notify(e,"beforeLayout")&&(me.update(this,this.width,this.height),e._layers=[],q.each(e.boxes,function(t){t._configure&&t._configure(),e._layers.push.apply(e._layers,t._layers())},e),e._layers.forEach(function(t,e){t._idx=e}),ze.notify(e,"afterScaleUpdate"),ze.notify(e,"afterLayout"))},updateDatasets:function(){if(!1!==ze.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);ze.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==ze.notify(this,"beforeDatasetUpdate",[n])&&(e.controller._update(),ze.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,i=Ze(t.duration,n&&n.duration),r=t.lazy;if(!1!==ze.notify(e,"beforeRender")){var a=function(t){ze.notify(e,"afterRender"),q.callback(n&&n.onComplete,[t],e)};if(n&&i){var o=new J({numSteps:i/16.66,easing:t.easing||n.easing,render:function(t,e){var n=q.easing.effects[e.easing],i=e.currentStep,r=i/e.numSteps;t.draw(n(r),r,i)},onAnimationProgress:n.onProgress,onAnimationComplete:a});tt.addAnimation(e,o,i,r)}else e.draw(),a(new J({numSteps:0,chart:e}));return e}},draw:function(t){var e,n,i=this;if(i.clear(),q.isNullOrUndef(t)&&(t=1),i.transition(t),!(i.width<=0||i.height<=0)&&!1!==ze.notify(i,"beforeDraw",[t])){for(n=i._layers,e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(i.chartArea);for(i.drawDatasets(t);e<n.length;++e)n[e].draw(i.chartArea);i._drawTooltip(t),ze.notify(i,"afterDraw",[t])}},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},_getSortedDatasetMetas:function(t){var e,n,i=[];for(e=0,n=(this.data.datasets||[]).length;e<n;++e)t&&!this.isDatasetVisible(e)||i.push(this.getDatasetMeta(e));return i.sort(en("order","index")),i},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(t){var e,n;if(!1!==ze.notify(this,"beforeDatasetsDraw",[t])){for(n=(e=this._getSortedVisibleDatasetMetas()).length-1;0<=n;--n)this.drawDataset(e[n],t);ze.notify(this,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n={meta:t,index:t.index,easingValue:e};!1!==ze.notify(this,"beforeDatasetDraw",[n])&&(t.controller.draw(e),ze.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==ze.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),ze.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return ae.modes.single(this,t)},getElementsAtEvent:function(t){return ae.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return ae.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var i=ae.modes[e];return"function"==typeof i?i(this,t,n):[]},getDatasetAtEvent:function(t){return ae.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n=n||(e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e.order||0,index:t})},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],i=n._meta&&n._meta[e];i&&(i.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,i=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),q.canvas.clear(n),Re.releaseContext(n.ctx),n.canvas=null,n.ctx=null),ze.notify(n,"destroy"),delete nn.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new Ke({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var e=this,n=e._listeners={},i=function(){e.eventHandler.apply(e,arguments)};q.each(e.options.events,function(t){Re.addEventListener(e,t,i),n[t]=i}),e.options.responsive&&(i=function(){e.resize()},Re.addEventListener(e,"resize",i),n.resize=i)},unbindEvents:function(){var n=this,t=n._listeners;t&&(delete n._listeners,q.each(t,function(t,e){Re.removeEventListener(n,e,t)}))},updateHoverStyle:function(t,e,n){var i,r,a,o=n?"set":"remove";for(r=0,a=t.length;r<a;++r)(i=t[r])&&this.getDatasetMeta(i._datasetIndex).controller[o+"HoverStyle"](i);"dataset"===e&&this.getDatasetMeta(t[0]._datasetIndex).controller["_"+o+"DatasetHoverStyle"]()},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==ze.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var i=e.handleEvent(t);n&&(i=n._start?n.handleEvent(t):i|n.handleEvent(t)),ze.notify(e,"afterEvent",[t]);var r=e._bufferedRequest;return r?e.render(r):i&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,i=n.options||{},r=i.hover;return n.lastActive=n.lastActive||[],"mouseout"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,r.mode,r),q.callback(i.onHover||i.hover.onHover,[t.native,n.active],n),"mouseup"!==t.type&&"click"!==t.type||i.onClick&&i.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,r.mode,!1),n.active.length&&r.mode&&n.updateHoverStyle(n.active,r.mode,!0),e=!q.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),nn.instances={};var rn=nn;(nn.Controller=nn).types={},q.configMerge=Qe,q.scaleMerge=$e;function an(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function on(t){this.options=t||{}}q.extend(on.prototype,{formats:an,parse:an,format:an,add:an,diff:an,startOf:an,endOf:an,_create:function(t){return t}}),on.override=function(t){q.extend(on.prototype,t)};var sn={_date:on},ln={formatters:{values:function(t){return q.isArray(t)?t:""+t},linear:function(t,e,n){var i=3<n.length?n[2]-n[1]:n[1]-n[0];1<Math.abs(i)&&t!==Math.floor(t)&&(i=t-Math.floor(t));var r=q.log10(Math.abs(i)),a="";if(0!==t)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var o=q.log10(Math.abs(t)),s=Math.floor(o)-Math.floor(r);s=Math.max(Math.min(s,20),0),a=t.toExponential(s)}else{var l=-1*Math.floor(r);l=Math.max(Math.min(l,20),0),a=t.toFixed(l)}else a="0";return a},logarithmic:function(t,e,n){var i=t/Math.pow(10,Math.floor(q.log10(t)));return 0===t?"0":1==i||2==i||5==i||0===e||e===n.length-1?t.toExponential():""}}},un=q.isArray,cn=q.isNullOrUndef,dn=q.valueOrDefault,hn=q.valueAtIndexOrDefault;function fn(t,e,n){var i,r=t.getTicks().length,a=Math.min(e,r-1),o=t.getPixelForTick(a),s=t._startPixel,l=t._endPixel;if(!(n&&(i=1===r?Math.max(o-s,l-o):0===e?(t.getPixelForTick(1)-o)/2:(o-t.getPixelForTick(a-1))/2,(o+=a<e?i:-i)<s-1e-6||l+1e-6<o)))return o}function gn(t,e,n,i){var r,a,o,s,l,u,c,d,h,f,g,p,m,v,b,y=n.length,x=[],_=[],w=[];for(r=0;r<y;++r){if(s=n[r].label,l=n[r].major?e.major:e.minor,t.font=u=l.string,c=i[u]=i[u]||{data:{},gc:[]},d=l.lineHeight,h=f=0,cn(s)||un(s)){if(un(s))for(a=0,o=s.length;a<o;++a)g=s[a],cn(g)||un(g)||(h=q.measureText(t,c.data,c.gc,h,g),f+=d)}else h=q.measureText(t,c.data,c.gc,h,s),f=d;x.push(h),_.push(f),w.push(d/2)}function k(t){return{width:x[t]||0,height:_[t]||0,offset:w[t]||0}}return v=i,b=y,q.each(v,function(t){var e,n=t.gc,i=n.length/2;if(b<i){for(e=0;e<i;++e)delete t.data[n[e]];n.splice(0,i)}}),p=x.indexOf(Math.max.apply(null,x)),m=_.indexOf(Math.max.apply(null,_)),{first:k(0),last:k(y-1),widest:k(p),highest:k(m)}}function pn(t){return t.drawTicks?t.tickMarkLength:0}function mn(t){var e,n;return t.display?(e=q.options._parseFont(t),n=q.options.toPadding(t.padding),e.lineHeight+n.height):0}function vn(t,e){return q.extend(q.options._parseFont({fontFamily:dn(e.fontFamily,t.fontFamily),fontSize:dn(e.fontSize,t.fontSize),fontStyle:dn(e.fontStyle,t.fontStyle),lineHeight:dn(e.lineHeight,t.lineHeight)}),{color:q.options.resolve([e.fontColor,t.fontColor,E.global.defaultFontColor])})}function bn(t){var e=vn(t,t.minor);return{minor:e,major:t.major.enabled?vn(t,t.major):e}}function yn(t){var e,n,i,r=[];for(n=0,i=t.length;n<i;++n)void 0!==(e=t[n])._index&&r.push(e);return r}function xn(t,e,n,i){var r,a,o,s,l=function(t){var e,n,i=t.length;if(i<2)return!1;for(n=t[0],e=1;e<i;++e)if(t[e]-t[e-1]!==n)return!1;return n}(t),u=(e.length-1)/i;if(!l)return Math.max(u,1);for(o=0,s=(r=q.math._factorize(l)).length-1;o<s;o++)if(u<(a=r[o]))return a;return Math.max(u,1)}function _n(t,e,n,i){var r,a,o,s,l=dn(n,0),u=Math.min(dn(i,t.length),t.length),c=0;for(e=Math.ceil(e),i&&(e=(r=i-n)/Math.floor(r/e)),s=l;s<0;)c++,s=Math.round(l+c*e);for(a=Math.max(l,0);a<u;a++)o=t[a],a===s?(o._index=a,c++,s=Math.round(l+c*e)):delete o.label}E._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:ln.formatters.values,minor:{},major:{}}});var wn=$.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){q.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var i,r,a,o,s,l=this,u=l.options.ticks,c=u.sampleSize;if(l.beforeUpdate(),l.maxWidth=t,l.maxHeight=e,l.margins=q.extend({left:0,right:0,top:0,bottom:0},n),l._ticks=null,l.ticks=null,l._labelSizes=null,l._maxLabelLines=0,l.longestLabelWidth=0,l.longestTextCache=l.longestTextCache||{},l._gridLineItems=null,l._labelItems=null,l.beforeSetDimensions(),l.setDimensions(),l.afterSetDimensions(),l.beforeDataLimits(),l.determineDataLimits(),l.afterDataLimits(),l.beforeBuildTicks(),o=l.buildTicks()||[],(!(o=l.afterBuildTicks(o)||o)||!o.length)&&l.ticks)for(o=[],i=0,r=l.ticks.length;i<r;++i)o.push({value:l.ticks[i],major:!1});return s=c<(l._ticks=o).length,a=l._convertTicksToLabels(s?function(t,e){for(var n=[],i=t.length/e,r=0,a=t.length;r<a;r+=i)n.push(t[Math.floor(r)]);return n}(o,c):o),l._configure(),l.beforeCalculateTickRotation(),l.calculateTickRotation(),l.afterCalculateTickRotation(),l.beforeFit(),l.fit(),l.afterFit(),l._ticksToDraw=u.display&&(u.autoSkip||"auto"===u.source)?l._autoSkip(o):o,s&&(a=l._convertTicksToLabels(l._ticksToDraw)),l.ticks=a,l.afterUpdate(),l.minSize},_configure:function(){var t,e,n=this,i=n.options.ticks.reverse;n.isHorizontal()?(t=n.left,e=n.right):(t=n.top,e=n.bottom,i=!i),n._startPixel=t,n._endPixel=e,n._reversePixels=i,n._length=e-t},afterUpdate:function(){q.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){q.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){q.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){q.callback(this.options.beforeDataLimits,[this])},determineDataLimits:q.noop,afterDataLimits:function(){q.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){q.callback(this.options.beforeBuildTicks,[this])},buildTicks:q.noop,afterBuildTicks:function(t){var e=this;return un(t)&&t.length?q.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=q.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){q.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){q.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){q.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t,e,n,i,r,a,o,s=this,l=s.options,u=l.ticks,c=s.getTicks().length,d=u.minRotation||0,h=u.maxRotation,f=d;!s._isVisible()||!u.display||h<=d||c<=1||!s.isHorizontal()?s.labelRotation=d:(e=(t=s._getLabelSizes()).widest.width,n=t.highest.height-t.highest.offset,i=Math.min(s.maxWidth,s.chart.width-e),(r=l.offset?s.maxWidth/c:i/(c-1))<e+6&&(r=i/(c-(l.offset?.5:1)),a=s.maxHeight-pn(l.gridLines)-u.padding-mn(l.scaleLabel),o=Math.sqrt(e*e+n*n),f=q.toDegrees(Math.min(Math.asin(Math.min((t.highest.height+6)/r,1)),Math.asin(Math.min(a/o,1))-Math.asin(n/o))),f=Math.max(d,Math.min(h,f))),s.labelRotation=f)},afterCalculateTickRotation:function(){q.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){q.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=t.chart,i=t.options,r=i.ticks,a=i.scaleLabel,o=i.gridLines,s=t._isVisible(),l="bottom"===i.position,u=t.isHorizontal();if(u?e.width=t.maxWidth:s&&(e.width=pn(o)+mn(a)),u?s&&(e.height=pn(o)+mn(a)):e.height=t.maxHeight,r.display&&s){var c=bn(r),d=t._getLabelSizes(),h=d.first,f=d.last,g=d.widest,p=d.highest,m=.4*c.minor.lineHeight,v=r.padding;if(u){var b=0!==t.labelRotation,y=q.toRadians(t.labelRotation),x=Math.cos(y),_=Math.sin(y),w=_*g.width+x*(p.height-(b?p.offset:0))+(b?0:m);e.height=Math.min(t.maxHeight,e.height+w+v);var k,M,C=t.getPixelForTick(0)-t.left,S=t.right-t.getPixelForTick(t.getTicks().length-1);M=b?(k=l?x*h.width+_*h.offset:_*(h.height-h.offset),l?_*(f.height-f.offset):x*f.width+_*f.offset):(k=h.width/2,f.width/2),t.paddingLeft=Math.max((k-C)*t.width/(t.width-C),0)+3,t.paddingRight=Math.max((M-S)*t.width/(t.width-S),0)+3}else{var D=r.mirror?0:g.width+v+m;e.width=Math.min(t.maxWidth,e.width+D),t.paddingTop=h.height/2,t.paddingBottom=f.height/2}}t.handleMargins(),u?(t.width=t._length=n.width-t.margins.left-t.margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=n.height-t.margins.top-t.margins.bottom)},handleMargins:function(){var t=this;t.margins&&(t.margins.left=Math.max(t.paddingLeft,t.margins.left),t.margins.top=Math.max(t.paddingTop,t.margins.top),t.margins.right=Math.max(t.paddingRight,t.margins.right),t.margins.bottom=Math.max(t.paddingBottom,t.margins.bottom))},afterFit:function(){q.callback(this.options.afterFit,[this])},isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(cn(t))return NaN;if(("number"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},_convertTicksToLabels:function(t){var e,n,i,r=this;for(r.ticks=t.map(function(t){return t.value}),r.beforeTickToLabelConversion(),e=r.convertTicksToLabels(t)||r.ticks,r.afterTickToLabelConversion(),n=0,i=t.length;n<i;++n)t[n].label=e[n];return e},_getLabelSizes:function(){var t=this,e=t._labelSizes;return e||(t._labelSizes=e=gn(t.ctx,bn(t.options.ticks),t.getTicks(),t.longestTextCache),t.longestLabelWidth=e.widest.width),e},_parseValue:function(t){var e,n,i,r;return r=un(t)?(e=+this.getRightValue(t[0]),n=+this.getRightValue(t[1]),i=Math.min(e,n),Math.max(e,n)):(e=void 0,i=n=t=+this.getRightValue(t)),{min:i,max:r,start:e,end:n}},_getScaleLabel:function(t){var e=this._parseValue(t);return void 0!==e.start?"["+e.start+", "+e.end+"]":+this.getRightValue(t)},getLabelForIndex:q.noop,getPixelForValue:q.noop,getValueForPixel:q.noop,getPixelForTick:function(t){var e=this.options.offset,n=this._ticks.length,i=1/Math.max(n-(e?0:1),1);return t<0||n-1<t?null:this.getPixelForDecimal(t*i+(e?i/2:0))},getPixelForDecimal:function(t){return this._reversePixels&&(t=1-t),this._startPixel+t*this._length},getDecimalForPixel:function(t){var e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:0<t&&0<e?t:0},_autoSkip:function(t){var e,n,i,r,a=this.options.ticks,o=this._length,s=a.maxTicksLimit||o/this._tickSize()+1,l=a.major.enabled?function(t){var e,n,i=[];for(e=0,n=t.length;e<n;e++)t[e].major&&i.push(e);return i}(t):[],u=l.length,c=l[0],d=l[u-1];if(s<u)return function(t,e,n){var i,r,a=0,o=e[0];for(n=Math.ceil(n),i=0;i<t.length;i++)r=t[i],i===o?(r._index=i,o=e[++a*n]):delete r.label}(t,l,u/s),yn(t);if(i=xn(l,t,0,s),0<u){for(e=0,n=u-1;e<n;e++)_n(t,i,l[e],l[e+1]);return r=1<u?(d-c)/(u-1):null,_n(t,i,q.isNullOrUndef(r)?0:c-r,c),_n(t,i,d,q.isNullOrUndef(r)?t.length:d+r),yn(t)}return _n(t,i),yn(t)},_tickSize:function(){var t=this.options.ticks,e=q.toRadians(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),a=t.autoSkipPadding||0,o=r?r.widest.width+a:0,s=r?r.highest.height+a:0;return this.isHorizontal()?o*i<s*n?o/n:s/i:s*i<o*n?s/n:o/i},_isVisible:function(){var t,e,n,i=this.chart,r=this.options.display;if("auto"!==r)return!!r;for(t=0,e=i.data.datasets.length;t<e;++t)if(i.isDatasetVisible(t)&&((n=i.getDatasetMeta(t)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(t){function e(t){return I(x,t,P)}var n,i,r,a,o,s,l,u,c,d,h,f,g,p,m,v,b,y=this,x=y.chart,_=y.options,w=_.gridLines,k=_.position,M=w.offsetGridLines,C=y.isHorizontal(),S=y._ticksToDraw,D=S.length+(M?1:0),A=pn(w),T=[],P=w.drawBorder?hn(w.lineWidth,0,0):0,O=P/2,I=q._alignPixel;for("top"===k?(n=e(y.bottom),l=y.bottom-A,c=n-O,h=e(t.top)+O,g=t.bottom):"bottom"===k?(n=e(y.top),h=t.top,g=e(t.bottom)-O,l=n+O,c=y.top+A):"left"===k?(n=e(y.right),s=y.right-A,u=n-O,d=e(t.left)+O,f=t.right):(n=e(y.left),d=t.left,f=e(t.right)-O,s=n+O,u=y.left+A),i=0;i<D;++i)r=S[i]||{},cn(r.label)&&i<S.length||(b=i===y.zeroLineIndex&&_.offset===M?(p=w.zeroLineWidth,m=w.zeroLineColor,v=w.zeroLineBorderDash||[],w.zeroLineBorderDashOffset||0):(p=hn(w.lineWidth,i,1),m=hn(w.color,i,"rgba(0,0,0,0.1)"),v=w.borderDash||[],w.borderDashOffset||0),void 0!==(a=fn(y,r._index||i,M))&&(o=I(x,a,p),C?s=u=d=f=o:l=c=h=g=o,T.push({tx1:s,ty1:l,tx2:u,ty2:c,x1:d,y1:h,x2:f,y2:g,width:p,color:m,borderDash:v,borderDashOffset:b})));return T.ticksLength=D,T.borderValue=n,T},_computeLabelItems:function(){var t,e,n,i,r,a,o,s,l,u,c,d,h=this,f=h.options,g=f.ticks,p=f.position,m=g.mirror,v=h.isHorizontal(),b=h._ticksToDraw,y=bn(g),x=g.padding,_=pn(f.gridLines),w=-q.toRadians(h.labelRotation),k=[];for(o="top"===p?(a=h.bottom-_-x,w?"left":"center"):"bottom"===p?(a=h.top+_+x,w?"right":"center"):"left"===p?(r=h.right-(m?0:_)-x,m?"left":"right"):(r=h.left+(m?0:_)+x,m?"right":"left"),t=0,e=b.length;t<e;++t)i=(n=b[t]).label,cn(i)||(s=h.getPixelForTick(n._index||t)+g.labelOffset,u=(l=n.major?y.major:y.minor).lineHeight,c=un(i)?i.length:1,d=v?(r=s,"top"===p?((w?1:.5)-c)*u:(w?0:.5)*u):(a=s,(1-c)*u/2),k.push({x:r,y:a,rotation:w,label:i,font:l,textOffset:d,textAlign:o}));return k},_drawGrid:function(t){var e=this,n=e.options.gridLines;if(n.display){var i,r,a,o,s,l=e.ctx,u=e.chart,c=q._alignPixel,d=n.drawBorder?hn(n.lineWidth,0,0):0,h=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));for(a=0,o=h.length;a<o;++a)i=(s=h[a]).width,r=s.color,i&&r&&(l.save(),l.lineWidth=i,l.strokeStyle=r,l.setLineDash&&(l.setLineDash(s.borderDash),l.lineDashOffset=s.borderDashOffset),l.beginPath(),n.drawTicks&&(l.moveTo(s.tx1,s.ty1),l.lineTo(s.tx2,s.ty2)),n.drawOnChartArea&&(l.moveTo(s.x1,s.y1),l.lineTo(s.x2,s.y2)),l.stroke(),l.restore());if(d){var f,g,p,m,v=d,b=hn(n.lineWidth,h.ticksLength-1,1),y=h.borderValue;e.isHorizontal()?(f=c(u,e.left,v)-v/2,g=c(u,e.right,b)+b/2,p=m=y):(p=c(u,e.top,v)-v/2,m=c(u,e.bottom,b)+b/2,f=g=y),l.lineWidth=d,l.strokeStyle=hn(n.color,0),l.beginPath(),l.moveTo(f,p),l.lineTo(g,m),l.stroke()}}},_drawLabels:function(){var t=this;if(t.options.ticks.display){var e,n,i,r,a,o,s,l,u=t.ctx,c=t._labelItems||(t._labelItems=t._computeLabelItems());for(e=0,i=c.length;e<i;++e){if(o=(a=c[e]).font,u.save(),u.translate(a.x,a.y),u.rotate(a.rotation),u.font=o.string,u.fillStyle=o.color,u.textBaseline="middle",u.textAlign=a.textAlign,s=a.label,l=a.textOffset,un(s))for(n=0,r=s.length;n<r;++n)u.fillText(""+s[n],0,l),l+=o.lineHeight;else u.fillText(s,0,l);u.restore()}}},_drawTitle:function(){var t=this,e=t.ctx,n=t.options,i=n.scaleLabel;if(i.display){var r,a,o=dn(i.fontColor,E.global.defaultFontColor),s=q.options._parseFont(i),l=q.options.toPadding(i.padding),u=s.lineHeight/2,c=n.position,d=0;if(t.isHorizontal())r=t.left+t.width/2,a="bottom"===c?t.bottom-u-l.bottom:t.top+u+l.top;else{var h="left"===c;r=h?t.left+u+l.top:t.right-u-l.top,a=t.top+t.height/2,d=h?-.5*Math.PI:.5*Math.PI}e.save(),e.translate(r,a),e.rotate(d),e.textAlign="center",e.textBaseline="middle",e.fillStyle=o,e.font=s.string,e.fillText(i.labelString,0,0),e.restore()}},draw:function(t){this._isVisible()&&(this._drawGrid(t),this._drawTitle(),this._drawLabels())},_layers:function(){var t=this,e=t.options,n=e.ticks&&e.ticks.z||0,i=e.gridLines&&e.gridLines.z||0;return t._isVisible()&&n!==i&&t.draw===t._draw?[{z:i,draw:function(){t._drawGrid.apply(t,arguments),t._drawTitle.apply(t,arguments)}},{z:n,draw:function(){t._drawLabels.apply(t,arguments)}}]:[{z:n,draw:function(){t.draw.apply(t,arguments)}}]},_getMatchingVisibleMetas:function(e){var n=this,i=n.isHorizontal();return n.chart._getSortedVisibleDatasetMetas().filter(function(t){return(!e||t.type===e)&&(i?t.xAxisID===n.id:t.yAxisID===n.id)})}});wn.prototype._draw=wn.prototype.draw;var kn=wn,Mn=q.isNullOrUndef,Cn=kn.extend({determineDataLimits:function(){var t,e=this,n=e._getLabels(),i=e.options.ticks,r=i.min,a=i.max,o=0,s=n.length-1;void 0!==r&&0<=(t=n.indexOf(r))&&(o=t),void 0!==a&&0<=(t=n.indexOf(a))&&(s=t),e.minIndex=o,e.maxIndex=s,e.min=n[o],e.max=n[s]},buildTicks:function(){var t=this._getLabels(),e=this.minIndex,n=this.maxIndex;this.ticks=0===e&&n===t.length-1?t:t.slice(e,n+1)},getLabelForIndex:function(t,e){var n=this.chart;return n.getDatasetMeta(e).controller._getValueScaleId()===this.id?this.getRightValue(n.data.datasets[e].data[t]):this._getLabels()[t]},_configure:function(){var t=this,e=t.options.offset,n=t.ticks;kn.prototype._configure.call(t),t.isHorizontal()||(t._reversePixels=!t._reversePixels),n&&(t._startValue=t.minIndex-(e?.5:0),t._valueRange=Math.max(n.length-(e?0:1),1))},getPixelForValue:function(t,e,n){var i,r,a,o=this;return Mn(e)||Mn(n)||(t=o.chart.data.datasets[n].data[e]),Mn(t)||(i=o.isHorizontal()?t.x:t.y),(void 0!==i||void 0!==t&&isNaN(e))&&(r=o._getLabels(),t=q.valueOrDefault(i,t),e=-1!==(a=r.indexOf(t))?a:e,isNaN(e)&&(e=t)),o.getPixelForDecimal((e-o._startValue)/o._valueRange)},getPixelForTick:function(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t],t+this.minIndex)},getValueForPixel:function(t){var e=Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange);return Math.min(Math.max(e,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),Sn={position:"bottom"};Cn._defaults=Sn;var Dn=q.noop,An=q.isNullOrUndef;var Tn=kn.extend({getRightValue:function(t){return"string"==typeof t?+t:kn.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;if(e.beginAtZero){var n=q.sign(t.min),i=q.sign(t.max);n<0&&i<0?t.max=0:0<n&&0<i&&(t.min=0)}var r=void 0!==e.min||void 0!==e.suggestedMin,a=void 0!==e.max||void 0!==e.suggestedMax;void 0!==e.min?t.min=e.min:void 0!==e.suggestedMin&&(null===t.min?t.min=e.suggestedMin:t.min=Math.min(t.min,e.suggestedMin)),void 0!==e.max?t.max=e.max:void 0!==e.suggestedMax&&(null===t.max?t.max=e.suggestedMax:t.max=Math.max(t.max,e.suggestedMax)),r!=a&&t.min>=t.max&&(r?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,e.beginAtZero||t.min--)},getTickLimit:function(){var t,e=this.options.ticks,n=e.stepSize,i=e.maxTicksLimit;return n?t=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(t=this._computeTickLimit(),i=i||11),i&&(t=Math.min(i,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:Dn,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),i={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:q.valueOrDefault(e.fixedStepSize,e.stepSize)},r=t.ticks=function(t,e){var n,i,r,a,o=[],s=t.stepSize,l=s||1,u=t.maxTicks-1,c=t.min,d=t.max,h=t.precision,f=e.min,g=e.max,p=q.niceNum((g-f)/u/l)*l;if(p<1e-14&&An(c)&&An(d))return[f,g];u<(a=Math.ceil(g/p)-Math.floor(f/p))&&(p=q.niceNum(a*p/u/l)*l),s||An(h)?n=Math.pow(10,q._decimalPlaces(p)):(n=Math.pow(10,h),p=Math.ceil(p*n)/n),i=Math.floor(f/p)*p,r=Math.ceil(g/p)*p,s&&(!An(c)&&q.almostWhole(c/p,p/1e3)&&(i=c),!An(d)&&q.almostWhole(d/p,p/1e3)&&(r=d)),a=(r-i)/p,a=q.almostEquals(a,Math.round(a),p/1e3)?Math.round(a):Math.ceil(a),i=Math.round(i*n)/n,r=Math.round(r*n)/n,o.push(An(c)?i:c);for(var m=1;m<a;++m)o.push(Math.round((i+m*p)*n)/n);return o.push(An(d)?r:d),o}(i,t);t.handleDirectionalChanges(),t.max=q.max(r),t.min=q.min(r),e.reverse?(r.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),kn.prototype.convertTicksToLabels.call(t)},_configure:function(){var t,e=this,n=e.getTicks(),i=e.min,r=e.max;kn.prototype._configure.call(e),e.options.offset&&n.length&&(i-=t=(r-i)/Math.max(n.length-1,1)/2,r+=t),e._startValue=i,e._endValue=r,e._valueRange=r-i}}),Pn={position:"left",ticks:{callback:ln.formatters.linear}};function On(t,e,n,i){var r,a,o,s,l,u,c=t.options,d=c.stacked,h=(r=e,a=d,s=[(o=n).type,void 0===a&&void 0===o.stack?o.index:"",o.stack].join("."),void 0===r[s]&&(r[s]={pos:[],neg:[]}),r[s]),f=h.pos,g=h.neg,p=i.length;for(l=0;l<p;++l)u=t._parseValue(i[l]),isNaN(u.min)||isNaN(u.max)||n.data[l].hidden||(f[l]=f[l]||0,g[l]=g[l]||0,c.relativePoints?f[l]=100:u.min<0||u.max<0?g[l]+=u.min:f[l]+=u.max)}function In(t,e,n){var i,r,a=n.length;for(i=0;i<a;++i)r=t._parseValue(n[i]),isNaN(r.min)||isNaN(r.max)||e.data[i].hidden||(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}var Fn=Tn.extend({determineDataLimits:function(){var t,e,n,i,r=this,a=r.options,o=r.chart.data.datasets,s=r._getMatchingVisibleMetas(),l=a.stacked,u={},c=s.length;if(r.min=Number.POSITIVE_INFINITY,r.max=Number.NEGATIVE_INFINITY,void 0===l)for(t=0;!l&&t<c;++t)l=void 0!==(e=s[t]).stack;for(t=0;t<c;++t)n=o[(e=s[t]).index].data,l?On(r,u,e,n):In(r,e,n);q.each(u,function(t){i=t.pos.concat(t.neg),r.min=Math.min(r.min,q.min(i)),r.max=Math.max(r.max,q.max(i))}),r.min=q.isFinite(r.min)&&!isNaN(r.min)?r.min:0,r.max=q.isFinite(r.max)&&!isNaN(r.max)?r.max:1,r.handleTickRangeOptions()},_computeTickLimit:function(){var t;return this.isHorizontal()?Math.ceil(this.width/40):(t=q.options._parseFont(this.options.ticks),Math.ceil(this.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){return this.getPixelForDecimal((this.getRightValue(t)-this._startValue)/this._valueRange)},getValueForPixel:function(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange},getPixelForTick:function(t){var e=this.ticksAsNumbers;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])}}),Ln=Pn;Fn._defaults=Ln;var Rn=q.valueOrDefault,zn=q.math.log10;var Nn={position:"left",ticks:{callback:ln.formatters.logarithmic}};function Bn(t,e){return q.isFinite(t)&&0<=t?t:e}var En=kn.extend({determineDataLimits:function(){var t,e,n,i,r,a,o=this,s=o.options,l=o.chart,u=l.data.datasets,c=o.isHorizontal();function d(t){return c?t.xAxisID===o.id:t.yAxisID===o.id}o.min=Number.POSITIVE_INFINITY,o.max=Number.NEGATIVE_INFINITY,o.minNotZero=Number.POSITIVE_INFINITY;var h=s.stacked;if(void 0===h)for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&d(e)&&void 0!==e.stack){h=!0;break}if(s.stacked||h){var f={};for(t=0;t<u.length;t++){var g=[(e=l.getDatasetMeta(t)).type,void 0===s.stacked&&void 0===e.stack?t:"",e.stack].join(".");if(l.isDatasetVisible(t)&&d(e))for(void 0===f[g]&&(f[g]=[]),r=0,a=(i=u[t].data).length;r<a;r++){var p=f[g];n=o._parseValue(i[r]),isNaN(n.min)||isNaN(n.max)||e.data[r].hidden||n.min<0||n.max<0||(p[r]=p[r]||0,p[r]+=n.max)}}q.each(f,function(t){if(0<t.length){var e=q.min(t),n=q.max(t);o.min=Math.min(o.min,e),o.max=Math.max(o.max,n)}})}else for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&d(e))for(r=0,a=(i=u[t].data).length;r<a;r++)n=o._parseValue(i[r]),isNaN(n.min)||isNaN(n.max)||e.data[r].hidden||n.min<0||n.max<0||(o.min=Math.min(n.min,o.min),o.max=Math.max(n.max,o.max),0!==n.min&&(o.minNotZero=Math.min(n.min,o.minNotZero)));o.min=q.isFinite(o.min)?o.min:null,o.max=q.isFinite(o.max)?o.max:null,o.minNotZero=q.isFinite(o.minNotZero)?o.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;t.min=Bn(e.min,t.min),t.max=Bn(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(zn(t.min))-1),t.max=Math.pow(10,Math.floor(zn(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(zn(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(zn(t.min))+1):10),null===t.minNotZero&&(0<t.min?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(zn(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),i={min:Bn(e.min),max:Bn(e.max)},r=t.ticks=function(t,e){var n,i,r=[],a=Rn(t.min,Math.pow(10,Math.floor(zn(e.min)))),o=Math.floor(zn(e.max)),s=Math.ceil(e.max/Math.pow(10,o));0===a?(n=Math.floor(zn(e.minNotZero)),i=Math.floor(e.minNotZero/Math.pow(10,n)),r.push(a),a=i*Math.pow(10,n)):(n=Math.floor(zn(a)),i=Math.floor(a/Math.pow(10,n)));for(var l=n<0?Math.pow(10,Math.abs(n)):1;r.push(a),10===++i&&(i=1,l=0<=++n?1:l),a=Math.round(i*Math.pow(10,n)*l)/l,n<o||n===o&&i<s;);var u=Rn(t.max,a);return r.push(u),r}(i,t);t.max=q.max(r),t.min=q.min(r),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&r.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),kn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){var e=this.tickValues;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])},_getFirstTickValue:function(t){var e=Math.floor(zn(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},_configure:function(){var t=this,e=t.min,n=0;kn.prototype._configure.call(t),0===e&&(e=t._getFirstTickValue(t.minNotZero),n=Rn(t.options.ticks.fontSize,E.global.defaultFontSize)/t._length),t._startValue=zn(e),t._valueOffset=n,t._valueRange=(zn(t.max)-zn(e))/(1-n)},getPixelForValue:function(t){var e=this,n=0;return(t=+e.getRightValue(t))>e.min&&0<t&&(n=(zn(t)-e._startValue)/e._valueRange+e._valueOffset),e.getPixelForDecimal(n)},getValueForPixel:function(t){var e=this,n=e.getDecimalForPixel(t);return 0===n&&0===e.min?0:Math.pow(10,e._startValue+(n-e._valueOffset)*e._valueRange)}}),Wn=Nn;En._defaults=Wn;var Hn=q.valueOrDefault,Vn=q.valueAtIndexOrDefault,jn=q.options.resolve,qn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:ln.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function Un(t){var e=t.ticks;return e.display&&t.display?Hn(e.fontSize,E.global.defaultFontSize)+2*e.backdropPaddingY:0}function Yn(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||r<t?{start:e-n,end:e}:{start:e,end:e+n}}function Gn(t,e,n,i){var r,a,o=n.y+i/2;if(q.isArray(e))for(r=0,a=e.length;r<a;++r)t.fillText(e[r],n.x,o),o+=i;else t.fillText(e,n.x,o)}function Xn(t){return q.isNumber(t)?t:0}var Kn=Tn.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Un(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var r=this,n=r.chart,a=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY;q.each(n.data.datasets,function(t,e){if(n.isDatasetVisible(e)){var i=n.getDatasetMeta(e);q.each(t.data,function(t,e){var n=+r.getRightValue(t);isNaN(n)||i.data[e].hidden||(a=Math.min(n,a),o=Math.max(n,o))})}}),r.min=a===Number.POSITIVE_INFINITY?0:a,r.max=o===Number.NEGATIVE_INFINITY?0:o,r.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Un(this.options))},convertTicksToLabels:function(){var e=this;Tn.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(function(){var t=q.callback(e.options.pointLabels.callback,arguments,e);return t||0===t?t:""})},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this.options;t.display&&t.pointLabels.display?function(t){var e,n,i,r=q.options._parseFont(t.options.pointLabels),a={l:0,r:t.width,t:0,b:t.height-t.paddingTop},o={};t.ctx.font=r.string,t._pointLabelSizes=[];var s,l,u,c=t.chart.data.labels.length;for(e=0;e<c;e++){i=t.getPointPosition(e,t.drawingArea+5),s=t.ctx,l=r.lineHeight,u=t.pointLabels[e],n=q.isArray(u)?{w:q.longestText(s,s.font,u),h:u.length*l}:{w:s.measureText(u).width,h:l},t._pointLabelSizes[e]=n;var d=t.getIndexAngle(e),h=q.toDegrees(d)%360,f=Yn(h,i.x,n.w,0,180),g=Yn(h,i.y,n.h,90,270);f.start<a.l&&(a.l=f.start,o.l=d),f.end>a.r&&(a.r=f.end,o.r=d),g.start<a.t&&(a.t=g.start,o.t=d),g.end>a.b&&(a.b=g.end,o.b=d)}t.setReductions(t.drawingArea,a,o)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var i=this,r=e.l/Math.sin(n.l),a=Math.max(e.r-i.width,0)/Math.sin(n.r),o=-e.t/Math.cos(n.t),s=-Math.max(e.b-(i.height-i.paddingTop),0)/Math.cos(n.b);r=Xn(r),a=Xn(a),o=Xn(o),s=Xn(s),i.drawingArea=Math.min(Math.floor(t-(r+a)/2),Math.floor(t-(o+s)/2)),i.setCenterPoint(r,a,o,s)},setCenterPoint:function(t,e,n,i){var r=this,a=r.width-e-r.drawingArea,o=t+r.drawingArea,s=n+r.drawingArea,l=r.height-r.paddingTop-i-r.drawingArea;r.xCenter=Math.floor((o+a)/2+r.left),r.yCenter=Math.floor((s+l)/2+r.top+r.paddingTop)},getIndexAngle:function(t){var e=this.chart,n=(t*(360/e.data.labels.length)+((e.options||{}).startAngle||0))%360;return(n<0?360+n:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(q.isNullOrUndef(t))return NaN;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(t){var e=this.min,n=this.max;return this.getPointPositionForValue(t||0,this.beginAtZero?0:e<0&&n<0?n:0<e&&0<n?e:0)},_drawGrid:function(){var t,n,e,i=this,r=i.ctx,a=i.options,o=a.gridLines,s=a.angleLines,l=Hn(s.lineWidth,o.lineWidth),u=Hn(s.color,o.color);if(a.pointLabels.display&&function(t){var e,n,i,r,a=t.ctx,o=t.options,s=o.pointLabels,l=Un(o),u=t.getDistanceFromCenterForValue(o.ticks.reverse?t.min:t.max),c=q.options._parseFont(s);a.save(),a.font=c.string,a.textBaseline="middle";for(var d=t.chart.data.labels.length-1;0<=d;d--){var h=0===d?l/2:0,f=t.getPointPosition(d,u+h+5),g=Vn(s.fontColor,d,E.global.defaultFontColor);a.fillStyle=g;var p=t.getIndexAngle(d),m=q.toDegrees(p);a.textAlign=0===(r=m)||180===r?"center":r<180?"left":"right",e=m,n=t._pointLabelSizes[d],i=f,90===e||270===e?i.y-=n.h/2:(270<e||e<90)&&(i.y-=n.h),Gn(a,t.pointLabels[d],f,c.lineHeight)}a.restore()}(i),o.display&&q.each(i.ticks,function(t,e){0!==e&&(n=i.getDistanceFromCenterForValue(i.ticksAsNumbers[e]),function(t,e,n,i){var r,a=t.ctx,o=e.circular,s=t.chart.data.labels.length,l=Vn(e.color,i-1),u=Vn(e.lineWidth,i-1);if((o||s)&&l&&u){if(a.save(),a.strokeStyle=l,a.lineWidth=u,a.setLineDash&&(a.setLineDash(e.borderDash||[]),a.lineDashOffset=e.borderDashOffset||0),a.beginPath(),o)a.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{r=t.getPointPosition(0,n),a.moveTo(r.x,r.y);for(var c=1;c<s;c++)r=t.getPointPosition(c,n),a.lineTo(r.x,r.y)}a.closePath(),a.stroke(),a.restore()}}(i,o,n,e))}),s.display&&l&&u){for(r.save(),r.lineWidth=l,r.strokeStyle=u,r.setLineDash&&(r.setLineDash(jn([s.borderDash,o.borderDash,[]])),r.lineDashOffset=jn([s.borderDashOffset,o.borderDashOffset,0])),t=i.chart.data.labels.length-1;0<=t;t--)n=i.getDistanceFromCenterForValue(a.ticks.reverse?i.min:i.max),e=i.getPointPosition(t,n),r.beginPath(),r.moveTo(i.xCenter,i.yCenter),r.lineTo(e.x,e.y),r.stroke();r.restore()}},_drawLabels:function(){var n=this,i=n.ctx,r=n.options.ticks;if(r.display){var a,o,t=n.getIndexAngle(0),s=q.options._parseFont(r),l=Hn(r.fontColor,E.global.defaultFontColor);i.save(),i.font=s.string,i.translate(n.xCenter,n.yCenter),i.rotate(t),i.textAlign="center",i.textBaseline="middle",q.each(n.ticks,function(t,e){0===e&&!r.reverse||(a=n.getDistanceFromCenterForValue(n.ticksAsNumbers[e]),r.showLabelBackdrop&&(o=i.measureText(t).width,i.fillStyle=r.backdropColor,i.fillRect(-o/2-r.backdropPaddingX,-a-s.size/2-r.backdropPaddingY,o+2*r.backdropPaddingX,s.size+2*r.backdropPaddingY)),i.fillStyle=l,i.fillText(t,0,-a))}),i.restore()}},_drawTitle:q.noop}),Zn=qn;Kn._defaults=Zn;var $n=q._deprecated,Qn=q.options.resolve,Jn=q.valueOrDefault,ti=Number.MIN_SAFE_INTEGER||-9007199254740991,ei=Number.MAX_SAFE_INTEGER||9007199254740991,ni={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ii=Object.keys(ni);function ri(t,e){return t-e}function ai(t){return q.valueOrDefault(t.time.min,t.ticks.min)}function oi(t){return q.valueOrDefault(t.time.max,t.ticks.max)}function si(t,e,n,i){var r=function(t,e,n){for(var i,r,a,o=0,s=t.length-1;0<=o&&o<=s;){if(r=t[(i=o+s>>1)-1]||null,a=t[i],!r)return{lo:null,hi:a};if(a[e]<n)o=1+i;else{if(!(r[e]>n))return{lo:r,hi:a};s=i-1}}return{lo:a,hi:null}}(t,e,n),a=r.lo?r.hi?r.lo:t[t.length-2]:t[0],o=r.lo?r.hi?r.hi:t[t.length-1]:t[1],s=o[e]-a[e],l=s?(n-a[e])/s:0,u=(o[i]-a[i])*l;return a[i]+u}function li(t,e){var n=t._adapter,i=t.options.time,r=i.parser,a=r||i.format,o=e;return"function"==typeof r&&(o=r(o)),q.isFinite(o)||(o="string"==typeof a?n.parse(o,a):n.parse(o)),null!==o?+o:(r||"function"!=typeof a||(o=a(e),q.isFinite(o)||(o=n.parse(o))),o)}function ui(t,e){if(q.isNullOrUndef(e))return null;var n=t.options.time,i=li(t,t.getRightValue(e));return null===i||n.round&&(i=+t._adapter.startOf(i,n.round)),i}function ci(t,e,n,i){var r,a,o,s=ii.length;for(r=ii.indexOf(t);r<s-1;++r)if(o=(a=ni[ii[r]]).steps?a.steps:ei,a.common&&Math.ceil((n-e)/(o*a.size))<=i)return ii[r];return ii[s-1]}function di(t,e,n){var i,r,a=[],o={},s=e.length;for(i=0;i<s;++i)o[r=e[i]]=i,a.push({value:r,major:!1});return 0!==s&&n?function(t,e,n,i){var r,a,o=t._adapter,s=+o.startOf(e[0].value,i),l=e[e.length-1].value;for(r=s;r<=l;r=+o.add(r,1,i))0<=(a=n[r])&&(e[a].major=!0);return e}(t,a,o,n):a}var hi=kn.extend({initialize:function(){this.mergeTicksOptions(),kn.prototype.initialize.call(this)},update:function(){var t=this.options,e=t.time||(t.time={}),n=this._adapter=new sn._date(t.adapters.date);return $n("time scale",e.format,"time.format","time.parser"),$n("time scale",e.min,"time.min","ticks.min"),$n("time scale",e.max,"time.max","ticks.max"),q.mergeIf(e.displayFormats,n.formats()),kn.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),kn.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,i,r,a,o,s=this,l=s.chart,u=s._adapter,c=s.options,d=c.time.unit||"day",h=ei,f=ti,g=[],p=[],m=[],v=s._getLabels();for(t=0,n=v.length;t<n;++t)m.push(ui(s,v[t]));for(t=0,n=(l.data.datasets||[]).length;t<n;++t)if(l.isDatasetVisible(t))if(r=l.data.datasets[t].data,q.isObject(r[0]))for(p[t]=[],e=0,i=r.length;e<i;++e)a=ui(s,r[e]),g.push(a),p[t][e]=a;else p[t]=m.slice(0),o||(g=g.concat(m),o=!0);else p[t]=[];m.length&&(h=Math.min(h,m[0]),f=Math.max(f,m[m.length-1])),g.length&&(g=1<n?function(t){var e,n,i,r={},a=[];for(e=0,n=t.length;e<n;++e)r[i=t[e]]||(r[i]=!0,a.push(i));return a}(g).sort(ri):g.sort(ri),h=Math.min(h,g[0]),f=Math.max(f,g[g.length-1])),h=ui(s,ai(c))||h,f=ui(s,oi(c))||f,h=h===ei?+u.startOf(Date.now(),d):h,f=f===ti?+u.endOf(Date.now(),d)+1:f,s.min=Math.min(h,f),s.max=Math.max(h+1,f),s._table=[],s._timestamps={data:g,datasets:p,labels:m}},buildTicks:function(){var t,e,n,i,r,a,o,s,l,u=this,c=u.min,d=u.max,h=u.options,f=h.ticks,g=h.time,p=u._timestamps,m=[],v=u.getLabelCapacity(c),b=f.source,y=h.distribution;for(p="data"===b||"auto"===b&&"series"===y?p.data:"labels"===b?p.labels:function(t,e,n,i){var r,a=t._adapter,o=t.options,s=o.time,l=s.unit||ci(s.minUnit,e,n,i),u=Qn([s.stepSize,s.unitStepSize,1]),c="week"===l&&s.isoWeekday,d=e,h=[];if(c&&(d=+a.startOf(d,"isoWeek",c)),d=+a.startOf(d,c?"day":l),a.diff(n,e,l)>1e5*u)throw e+" and "+n+" are too far apart with stepSize of "+u+" "+l;for(r=d;r<n;r=+a.add(r,u,l))h.push(r);return r!==n&&"ticks"!==o.bounds||h.push(r),h}(u,c,d,v),"ticks"===h.bounds&&p.length&&(c=p[0],d=p[p.length-1]),c=ui(u,ai(h))||c,d=ui(u,oi(h))||d,t=0,e=p.length;t<e;++t)c<=(n=p[t])&&n<=d&&m.push(n);return u.min=c,u.max=d,u._unit=g.unit||(f.autoSkip?ci(g.minUnit,u.min,u.max,v):function(t,e,n,i,r){var a,o;for(a=ii.length-1;a>=ii.indexOf(n);a--)if(o=ii[a],ni[o].common&&t._adapter.diff(r,i,o)>=e-1)return o;return ii[n?ii.indexOf(n):0]}(u,m.length,g.minUnit,u.min,u.max)),u._majorUnit=f.major.enabled&&"year"!==u._unit?function(t){for(var e=ii.indexOf(t)+1,n=ii.length;e<n;++e)if(ni[ii[e]].common)return ii[e]}(u._unit):void 0,u._table=function(t,e,n,i){if("linear"===i||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var r,a,o,s,l,u=[],c=[e];for(r=0,a=t.length;r<a;++r)e<(s=t[r])&&s<n&&c.push(s);for(c.push(n),r=0,a=c.length;r<a;++r)l=c[r+1],o=c[r-1],s=c[r],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:r/(a-1)});return u}(u._timestamps.data,c,d,y),u._offsets=(i=u._table,r=m,l=s=0,h.offset&&r.length&&(a=si(i,"time",r[0],"pos"),s=1===r.length?1-a:(si(i,"time",r[1],"pos")-a)/2,o=si(i,"time",r[r.length-1],"pos"),l=1===r.length?o:(o-si(i,"time",r[r.length-2],"pos"))/2),{start:s,end:l,factor:1/(s+1+l)}),f.reverse&&m.reverse(),di(u,m,u._majorUnit)},getLabelForIndex:function(t,e){var n=this,i=n._adapter,r=n.chart.data,a=n.options.time,o=r.labels&&t<r.labels.length?r.labels[t]:"",s=r.datasets[e].data[t];return q.isObject(s)&&(o=n.getRightValue(s)),a.tooltipFormat?i.format(li(n,o),a.tooltipFormat):"string"==typeof o?o:i.format(li(n,o),a.displayFormats.datetime)},tickFormatFunction:function(t,e,n,i){var r=this._adapter,a=this.options,o=a.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],c=n[e],d=a.ticks,h=l&&u&&c&&c.major,f=r.format(t,i||(h?u:s)),g=h?d.major:d.minor,p=Qn([g.callback,g.userCallback,d.callback,d.userCallback]);return p?p(f,e,n):f},convertTicksToLabels:function(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(this.tickFormatFunction(t[e].value,e,t));return i},getPixelForOffset:function(t){var e=this._offsets,n=si(this._table,"time",t,"pos");return this.getPixelForDecimal((e.start+n)*e.factor)},getPixelForValue:function(t,e,n){var i=null;if(void 0!==e&&void 0!==n&&(i=this._timestamps.datasets[n][e]),null===i&&(i=ui(this,t)),null!==i)return this.getPixelForOffset(i)},getPixelForTick:function(t){var e=this.getTicks();return 0<=t&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end,i=si(this._table,"pos",n,"time");return this._adapter._create(i)},_getLabelSize:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,i=q.toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),a=Math.sin(i),o=Jn(e.fontSize,E.global.defaultFontSize);return{w:n*r+o*a,h:n*a+o*r}},getLabelWidth:function(t){return this._getLabelSize(t).w},getLabelCapacity:function(t){var e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this.tickFormatFunction(t,0,di(this,[t],this._majorUnit),i),a=this._getLabelSize(r),o=Math.floor(this.isHorizontal()?this.width/a.w:this.height/a.h);return this.options.offset&&o--,0<o?o:1}}),fi={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};hi._defaults=fi;var gi={category:Cn,linear:Fn,logarithmic:En,radialLinear:Kn,time:hi},pi={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};sn._date.override("function"==typeof i?{_id:"moment",formats:function(){return pi},parse:function(t,e){return"string"==typeof t&&"string"==typeof e?t=i(t,e):t instanceof i||(t=i(t)),t.isValid()?t.valueOf():null},format:function(t,e){return i(t).format(e)},add:function(t,e,n){return i(t).add(e,n).valueOf()},diff:function(t,e,n){return i(t).diff(i(e),n)},startOf:function(t,e,n){return t=i(t),"isoWeek"===e?t.isoWeekday(n).valueOf():t.startOf(e).valueOf()},endOf:function(t,e){return i(t).endOf(e).valueOf()},_create:function(t){return i(t)}}:{}),E._set("global",{plugins:{filler:{propagate:!0}}});var mi={dataset:function(t){var e=t.fill,n=t.chart,i=n.getDatasetMeta(e),r=i&&n.isDatasetVisible(e)&&i.dataset._children||[],a=r.length||0;return a?function(t,e){return e<a&&r[e]._view||null}:null},boundary:function(t){var n=t.boundary,e=n?n.x:null,i=n?n.y:null;return q.isArray(n)?function(t,e){return n[e]}:function(t){return{x:null===e?t.x:e,y:null===i?t.y:i}}}};function vi(t,e,n){var i,r=t._model||{},a=r.fill;if(void 0===a&&(a=!!r.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(i=parseFloat(a,10),isFinite(i)&&Math.floor(i)===i)return"-"!==a[0]&&"+"!==a[0]||(i=e+i),!(i===e||i<0||n<=i)&&i;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}function bi(t){return((t.el._scale||{}).getPointPositionForValue?function(t){var e,n,i,r,a,o=t.el._scale,s=o.options,l=o.chart.data.labels.length,u=t.fill,c=[];if(!l)return null;for(e=s.ticks.reverse?o.max:o.min,n=s.ticks.reverse?o.min:o.max,i=o.getPointPositionForValue(0,e),r=0;r<l;++r)a="start"===u||"end"===u?o.getPointPositionForValue(r,"start"===u?e:n):o.getBasePosition(r),s.gridLines.circular&&(a.cx=i.x,a.cy=i.y,a.angle=o.getIndexAngle(r)-Math.PI/2),c.push(a);return c}:function(t){var e,n=t.el._model||{},i=t.el._scale||{},r=t.fill,a=null;if(isFinite(r))return null;if("start"===r?a=void 0===n.scaleBottom?i.bottom:n.scaleBottom:"end"===r?a=void 0===n.scaleTop?i.top:n.scaleTop:void 0!==n.scaleZero?a=n.scaleZero:i.getBasePixel&&(a=i.getBasePixel()),null!=a){if(void 0!==a.x&&void 0!==a.y)return a;if(q.isFinite(a))return{x:(e=i.isHorizontal())?a:null,y:e?null:a}}return null})(t)}function yi(t,e,n){var i,r=t[e].fill,a=[e];if(!n)return r;for(;!1!==r&&-1===a.indexOf(r);){if(!isFinite(r))return r;if(!(i=t[r]))return!1;if(i.visible)return r;a.push(r),r=i.fill}return!1}function xi(t){return t&&!t.skip}function _i(t,e,n,i,r){var a,o,s,l;if(i&&r){for(t.moveTo(e[0].x,e[0].y),a=1;a<i;++a)q.canvas.lineTo(t,e[a-1],e[a]);if(void 0===n[0].angle)for(t.lineTo(n[r-1].x,n[r-1].y),a=r-1;0<a;--a)q.canvas.lineTo(t,n[a],n[a-1],!0);else for(o=n[0].cx,s=n[0].cy,l=Math.sqrt(Math.pow(n[0].x-o,2)+Math.pow(n[0].y-s,2)),a=r-1;0<a;--a)t.arc(o,s,l,n[a].angle,n[a-1].angle,!0)}}function wi(t,e,n,i,r,a){var o,s,l,u,c,d,h,f,g=e.length,p=i.spanGaps,m=[],v=[],b=0,y=0;for(t.beginPath(),o=0,s=g;o<s;++o)c=n(u=e[l=o%g]._view,l,i),d=xi(u),h=xi(c),a&&void 0===f&&d&&(s=g+(f=o+1)),d&&h?(b=m.push(u),y=v.push(c)):b&&y&&(p?(d&&m.push(u),h&&v.push(c)):(_i(t,m,v,b,y),b=y=0,m=[],v=[]));_i(t,m,v,b,y),t.closePath(),t.fillStyle=r,t.fill()}var ki={id:"filler",afterDatasetsUpdate:function(t,e){var n,i,r,a,o,s,l,u=(t.data.datasets||[]).length,c=e.propagate,d=[];for(i=0;i<u;++i)a=null,(r=(n=t.getDatasetMeta(i)).dataset)&&r._model&&r instanceof Mt.Line&&(a={visible:t.isDatasetVisible(i),fill:vi(r,i,u),chart:t,el:r}),n.$filler=a,d.push(a);for(i=0;i<u;++i)(a=d[i])&&(a.fill=yi(d,i,c),a.boundary=bi(a),a.mapper=(l=void 0,s=(o=a).fill,!(l="dataset")===s?null:(isFinite(s)||(l="boundary"),mi[l](o))))},beforeDatasetsDraw:function(t){var e,n,i,r,a,o,s,l=t._getSortedVisibleDatasetMetas(),u=t.ctx;for(n=l.length-1;0<=n;--n)(e=l[n].$filler)&&e.visible&&(r=(i=e.el)._view,a=i._children||[],o=e.mapper,s=r.backgroundColor||E.global.defaultColor,o&&s&&a.length&&(q.canvas.clipArea(u,t.chartArea),wi(u,a,o,r,s,i._loop),q.canvas.unclipArea(u)))}},Mi=q.rtl.getRtlAdapter,Ci=q.noop,Si=q.valueOrDefault;function Di(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}E._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,i=this.chart,r=i.getDatasetMeta(n);r.hidden=null===r.hidden?!i.data.datasets[n].hidden:null,i.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(n){var i=n.data.datasets,t=n.options.legend||{},r=t.labels&&t.labels.usePointStyle;return n._getSortedDatasetMetas().map(function(t){var e=t.controller.getStyle(r?0:void 0);return{text:i[t.index].label,fillStyle:e.backgroundColor,hidden:!n.isDatasetVisible(t.index),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,rotation:e.rotation,datasetIndex:t.index}},this)}}},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data.datasets;for(r.setAttribute("class",t.id+"-legend"),e=0,n=a.length;e<n;e++)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=a[e].backgroundColor,a[e].label&&i.appendChild(document.createTextNode(a[e].label));return r.outerHTML}});var Ai=$.extend({initialize:function(t){q.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:Ci,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ci,beforeSetDimensions:Ci,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ci,beforeBuildLabels:Ci,buildLabels:function(){var e=this,n=e.options.labels||{},t=q.callback(n.generateLabels,[e.chart],e)||[];n.filter&&(t=t.filter(function(t){return n.filter(t,e.chart.data)})),e.options.reverse&&t.reverse(),e.legendItems=t},afterBuildLabels:Ci,beforeFit:Ci,fit:function(){var t=this,e=t.options,i=e.labels,n=e.display,r=t.ctx,a=q.options._parseFont(i),o=a.size,s=t.legendHitBoxes=[],l=t.minSize,u=t.isHorizontal();if(u?(l.width=t.maxWidth,l.height=n?10:0):(l.width=n?10:0,l.height=t.maxHeight),n){if(r.font=a.string,u){var c=t.lineWidths=[0],d=0;r.textAlign="left",r.textBaseline="middle",q.each(t.legendItems,function(t,e){var n=Di(i,o)+o/2+r.measureText(t.text).width;(0===e||c[c.length-1]+n+2*i.padding>l.width)&&(d+=o+i.padding,c[c.length-(0<e?0:1)]=0),s[e]={left:0,top:0,width:n,height:o},c[c.length-1]+=n+i.padding}),l.height+=d}else{var h=i.padding,f=t.columnWidths=[],g=t.columnHeights=[],p=i.padding,m=0,v=0;q.each(t.legendItems,function(t,e){var n=Di(i,o)+o/2+r.measureText(t.text).width;0<e&&v+o+2*h>l.height&&(p+=m+i.padding,f.push(m),g.push(v),v=m=0),m=Math.max(m,n),v+=o+h,s[e]={left:0,top:0,width:n,height:o}}),p+=m,f.push(m),g.push(v),l.width+=p}t.width=l.width,t.height=l.height}else t.width=l.width=t.height=l.height=0},afterFit:Ci,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var g=this,n=g.options,p=n.labels,t=E.global,m=t.defaultColor,v=t.elements.line,b=g.height,y=g.columnHeights,x=g.width,_=g.lineWidths;if(n.display){var w,k=Mi(n.rtl,g.left,g.minSize.width),M=g.ctx,e=Si(p.fontColor,t.defaultFontColor),i=q.options._parseFont(p),C=i.size;M.textAlign=k.textAlign("left"),M.textBaseline="middle",M.lineWidth=.5,M.strokeStyle=e,M.fillStyle=e,M.font=i.string;var S=Di(p,C),D=g.legendHitBoxes,A=function(t,e){switch(n.align){case"start":return p.padding;case"end":return t-e;default:return(t-e+p.padding)/2}},T=g.isHorizontal();w=T?{x:g.left+A(x,_[0]),y:g.top+p.padding,line:0}:{x:g.left+p.padding,y:g.top+A(b,y[0]),line:0},q.rtl.overrideTextDirection(g.ctx,n.textDirection);var P=C+p.padding;q.each(g.legendItems,function(t,e){var n=M.measureText(t.text).width,i=S+C/2+n,r=w.x,a=w.y;k.setWidth(g.minSize.width),T?0<e&&r+i+p.padding>g.left+g.minSize.width&&(a=w.y+=P,w.line++,r=w.x=g.left+A(x,_[w.line])):0<e&&a+P>g.top+g.minSize.height&&(r=w.x=r+g.columnWidths[w.line]+p.padding,w.line++,a=w.y=g.top+A(b,y[w.line]));var o,s,l,u,c,d,h,f=k.x(r);!function(t,e,n){if(!(isNaN(S)||S<=0)){M.save();var i=Si(n.lineWidth,v.borderWidth);if(M.fillStyle=Si(n.fillStyle,m),M.lineCap=Si(n.lineCap,v.borderCapStyle),M.lineDashOffset=Si(n.lineDashOffset,v.borderDashOffset),M.lineJoin=Si(n.lineJoin,v.borderJoinStyle),M.lineWidth=i,M.strokeStyle=Si(n.strokeStyle,m),M.setLineDash&&M.setLineDash(Si(n.lineDash,v.borderDash)),p&&p.usePointStyle){var r=S*Math.SQRT2/2,a=k.xPlus(t,S/2),o=e+C/2;q.canvas.drawPoint(M,n.pointStyle,r,a,o,n.rotation)}else M.fillRect(k.leftForLtr(t,S),e,S,C),0!==i&&M.strokeRect(k.leftForLtr(t,S),e,S,C);M.restore()}}(f,a,t),D[e].left=k.leftForLtr(f,D[e].width),D[e].top=a,o=f,s=a,l=t,u=n,c=C/2,d=k.xPlus(o,S+c),h=s+c,M.fillText(l.text,d,h),l.hidden&&(M.beginPath(),M.lineWidth=2,M.moveTo(d,h),M.lineTo(k.xPlus(d,u),h),M.stroke()),T?w.x+=i+p.padding:w.y+=P}),q.rtl.restoreTextDirection(g.ctx,n.textDirection)}},_getLegendItemAt:function(t,e){var n,i,r;if(t>=this.left&&t<=this.right&&e>=this.top&&e<=this.bottom)for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(t>=(i=r[n]).left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return this.legendItems[n];return null},handleEvent:function(t){var e,n=this.options,i="mouseup"===t.type?"click":t.type;if("mousemove"===i){if(!n.onHover&&!n.onLeave)return}else{if("click"!==i)return;if(!n.onClick)return}e=this._getLegendItemAt(t.x,t.y),"click"===i?e&&n.onClick&&n.onClick.call(this,t.native,e):(n.onLeave&&e!==this._hoveredItem&&(this._hoveredItem&&n.onLeave.call(this,t.native,this._hoveredItem),this._hoveredItem=e),n.onHover&&e&&n.onHover.call(this,t.native,e))}});function Ti(t,e){var n=new Ai({ctx:t.ctx,options:e,chart:t});me.configure(t,n,e),me.addBox(t,n),t.legend=n}var Pi={id:"legend",_element:Ai,beforeInit:function(t){var e=t.options.legend;e&&Ti(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(q.mergeIf(e,E.global.legend),n?(me.configure(t,n,e),n.options=e):Ti(t,e)):n&&(me.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},Oi=q.noop;E._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Ii=$.extend({initialize:function(t){q.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:Oi,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Oi,beforeSetDimensions:Oi,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Oi,beforeBuildLabels:Oi,buildLabels:Oi,afterBuildLabels:Oi,beforeFit:Oi,fit:function(){var t,e=this.options,n=this.minSize={},i=this.isHorizontal();e.display?(t=(q.isArray(e.text)?e.text.length:1)*q.options._parseFont(e).lineHeight+2*e.padding,this.width=n.width=i?this.maxWidth:t,this.height=n.height=i?t:this.maxHeight):this.width=n.width=this.height=n.height=0},afterFit:Oi,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this.ctx,e=this.options;if(e.display){var n,i,r,a=q.options._parseFont(e),o=a.lineHeight,s=o/2+e.padding,l=0,u=this.top,c=this.left,d=this.bottom,h=this.right;t.fillStyle=q.valueOrDefault(e.fontColor,E.global.defaultFontColor),t.font=a.string,this.isHorizontal()?(i=c+(h-c)/2,r=u+s,n=h-c):(i="left"===e.position?c+s:h-s,r=u+(d-u)/2,n=d-u,l=Math.PI*("left"===e.position?-.5:.5)),t.save(),t.translate(i,r),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var f=e.text;if(q.isArray(f))for(var g=0,p=0;p<f.length;++p)t.fillText(f[p],0,g,n),g+=o;else t.fillText(f,0,0,n);t.restore()}}});function Fi(t,e){var n=new Ii({ctx:t.ctx,options:e,chart:t});me.configure(t,n,e),me.addBox(t,n),t.titleBlock=n}var Li={},Ri=ki,zi=Pi,Ni={id:"title",_element:Ii,beforeInit:function(t){var e=t.options.title;e&&Fi(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(q.mergeIf(e,E.global.title),n?(me.configure(t,n,e),n.options=e):Fi(t,e)):n&&(me.removeBox(t,n),delete t.titleBlock)}};function Bi(t,e,n){var i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}function Ei(t){return null!=t&&"none"!==t}function Wi(t,e,n){var i=document.defaultView,r=q._getParentNode(t),a=i.getComputedStyle(t)[e],o=i.getComputedStyle(r)[e],s=Ei(a),l=Ei(o),u=Number.POSITIVE_INFINITY;return s||l?Math.min(s?Bi(a,t,n):u,l?Bi(o,r,n):u):"none"}for(var Hi in Li.filler=Ri,Li.legend=zi,Li.title=Ni,(rn.helpers=q).where=function(t,e){if(q.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return q.each(t,function(t){e(t)&&n.push(t)}),n},q.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var i=0,r=t.length;i<r;++i)if(e.call(n,t[i],i,t))return i;return-1},q.findNextWhere=function(t,e,n){q.isNullOrUndef(n)&&(n=-1);for(var i=n+1;i<t.length;i++){var r=t[i];if(e(r))return r}},q.findPreviousWhere=function(t,e,n){q.isNullOrUndef(n)&&(n=t.length);for(var i=n-1;0<=i;i--){var r=t[i];if(e(r))return r}},q.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},q.almostEquals=function(t,e,n){return Math.abs(t-e)<n},q.almostWhole=function(t,e){var n=Math.round(t);return n-e<=t&&t<=n+e},q.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},q.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},q.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0===(t=+t)||isNaN(t)?t:0<t?1:-1},q.toRadians=function(t){return t*(Math.PI/180)},q.toDegrees=function(t){return t*(180/Math.PI)},q._decimalPlaces=function(t){if(q.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},q.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i),a=Math.atan2(i,n);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:r}},q.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},q.aliasPixel=function(t){return t%2==0?0:.5},q._alignPixel=function(t,e,n){var i=t.currentDevicePixelRatio,r=n/2;return Math.round((e-r)*i)/i+r},q.splineCurve=function(t,e,n,i){var r=t.skip?e:t,a=e,o=n.skip?e:n,s=Math.sqrt(Math.pow(a.x-r.x,2)+Math.pow(a.y-r.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),u=s/(s+l),c=l/(s+l),d=i*(u=isNaN(u)?0:u),h=i*(c=isNaN(c)?0:c);return{previous:{x:a.x-d*(o.x-r.x),y:a.y-d*(o.y-r.y)},next:{x:a.x+h*(o.x-r.x),y:a.y+h*(o.y-r.y)}}},q.EPSILON=Number.EPSILON||1e-14,q.splineCurveMonotone=function(t){var e,n,i,r,a,o,s,l,u,c=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),d=c.length;for(e=0;e<d;++e)if(!(i=c[e]).model.skip){if(n=0<e?c[e-1]:null,(r=e<d-1?c[e+1]:null)&&!r.model.skip){var h=r.model.x-i.model.x;i.deltaK=0!=h?(r.model.y-i.model.y)/h:0}!n||n.model.skip?i.mK=i.deltaK:!r||r.model.skip?i.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(i.deltaK)?i.mK=0:i.mK=(n.deltaK+i.deltaK)/2}for(e=0;e<d-1;++e)i=c[e],r=c[e+1],i.model.skip||r.model.skip||(q.almostEquals(i.deltaK,0,this.EPSILON)?i.mK=r.mK=0:(a=i.mK/i.deltaK,o=r.mK/i.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),i.mK=a*s*i.deltaK,r.mK=o*s*i.deltaK)));for(e=0;e<d;++e)(i=c[e]).model.skip||(n=0<e?c[e-1]:null,r=e<d-1?c[e+1]:null,n&&!n.model.skip&&(u=(i.model.x-n.model.x)/3,i.model.controlPointPreviousX=i.model.x-u,i.model.controlPointPreviousY=i.model.y-u*i.mK),r&&!r.model.skip&&(u=(r.model.x-i.model.x)/3,i.model.controlPointNextX=i.model.x+u,i.model.controlPointNextY=i.model.y+u*i.mK))},q.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},q.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},q.niceNum=function(t,e){var n=Math.floor(q.log10(t)),i=t/Math.pow(10,n);return(e?i<1.5?1:i<3?2:i<7?5:10:i<=1?1:i<=2?2:i<=5?5:10)*Math.pow(10,n)},q.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},q.getRelativePosition=function(t,e){var n,i,r=t.originalEvent||t,a=t.target||t.srcElement,o=a.getBoundingClientRect(),s=r.touches;i=s&&0<s.length?(n=s[0].clientX,s[0].clientY):(n=r.clientX,r.clientY);var l=parseFloat(q.getStyle(a,"padding-left")),u=parseFloat(q.getStyle(a,"padding-top")),c=parseFloat(q.getStyle(a,"padding-right")),d=parseFloat(q.getStyle(a,"padding-bottom")),h=o.right-o.left-l-c,f=o.bottom-o.top-u-d;return{x:n=Math.round((n-o.left-l)/h*a.width/e.currentDevicePixelRatio),y:i=Math.round((i-o.top-u)/f*a.height/e.currentDevicePixelRatio)}},q.getConstraintWidth=function(t){return Wi(t,"max-width","clientWidth")},q.getConstraintHeight=function(t){return Wi(t,"max-height","clientHeight")},q._calculatePadding=function(t,e,n){return-1<(e=q.getStyle(t,e)).indexOf("%")?n*parseInt(e,10)/100:parseInt(e,10)},q._getParentNode=function(t){var e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e},q.getMaximumWidth=function(t){var e=q._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,i=n-q._calculatePadding(e,"padding-left",n)-q._calculatePadding(e,"padding-right",n),r=q.getConstraintWidth(t);return isNaN(r)?i:Math.min(i,r)},q.getMaximumHeight=function(t){var e=q._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,i=n-q._calculatePadding(e,"padding-top",n)-q._calculatePadding(e,"padding-bottom",n),r=q.getConstraintHeight(t);return isNaN(r)?i:Math.min(i,r)},q.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},q.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var i=t.canvas,r=t.height,a=t.width;i.height=r*n,i.width=a*n,t.ctx.scale(n,n),i.style.height||i.style.width||(i.style.height=r+"px",i.style.width=a+"px")}},q.fontString=function(t,e,n){return e+" "+t+"px "+n},q.longestText=function(t,e,n,i){var r=(i=i||{}).data=i.data||{},a=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},a=i.garbageCollect=[],i.font=e),t.font=e;var o,s,l,u,c,d=0,h=n.length;for(o=0;o<h;o++)if(null!=(u=n[o])&&!0!==q.isArray(u))d=q.measureText(t,r,a,d,u);else if(q.isArray(u))for(s=0,l=u.length;s<l;s++)null==(c=u[s])||q.isArray(c)||(d=q.measureText(t,r,a,d,c));var f=a.length/2;if(f>n.length){for(o=0;o<f;o++)delete r[a[o]];a.splice(0,f)}return d},q.measureText=function(t,e,n,i,r){var a=e[r];return a||(a=e[r]=t.measureText(r).width,n.push(r)),i<a&&(i=a),i},q.numberOfLabelLines=function(t){var e=1;return q.each(t,function(t){q.isArray(t)&&t.length>e&&(e=t.length)}),e},q.color=C?function(t){return t instanceof CanvasGradient&&(t=E.global.defaultColor),C(t)}:function(t){return console.error("Color.js not found!"),t},q.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:q.color(t).saturate(.5).darken(.1).rgbString()},rn._adapters=sn,rn.Animation=J,rn.animationService=tt,rn.controllers=Qt,rn.DatasetController=at,rn.defaults=E,rn.Element=$,rn.elements=Mt,rn.Interaction=ae,rn.layouts=me,rn.platform=Re,rn.plugins=ze,rn.Scale=kn,rn.scaleService=Ne,rn.Ticks=ln,rn.Tooltip=Ke,rn.helpers.each(gi,function(t,e){rn.scaleService.registerScaleType(e,t,t._defaults)}),Li)Li.hasOwnProperty(Hi)&&rn.plugins.register(Li[Hi]);rn.platform.initialize();var Vi=rn;return"undefined"!=typeof window&&(window.Chart=rn),(rn.Chart=rn).Legend=Li.legend._element,rn.Title=Li.title._element,rn.pluginService=rn.plugins,rn.PluginBase=rn.Element.extend({}),rn.canvasHelpers=rn.helpers.canvas,rn.layoutService=rn.layouts,rn.LinearScaleBase=Tn,rn.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],function(n){rn[n]=function(t,e){return new rn(t,rn.helpers.merge(e||{},{type:n.charAt(0).toLowerCase()+n.slice(1)}))}}),Vi}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Glide=e()}(this,function(){"use strict";var n={type:"slider",startAt:0,perView:1,focusAt:0,gap:10,autoplay:!1,hoverpause:!0,keyboard:!0,bound:!1,swipeThreshold:80,dragThreshold:120,perTouch:!1,touchRatio:.5,touchAngle:45,animationDuration:400,rewind:!0,rewindDuration:800,animationTimingFunc:"cubic-bezier(.165, .840, .440, 1)",throttle:10,direction:"ltr",peek:0,breakpoints:{},classes:{direction:{ltr:"glide--ltr",rtl:"glide--rtl"},slider:"glide--slider",carousel:"glide--carousel",swipeable:"glide--swipeable",dragging:"glide--dragging",cloneSlide:"glide__slide--clone",activeNav:"glide__bullet--active",activeSlide:"glide__slide--active",disabledArrow:"glide__arrow--disabled"}};function s(t){console.error("[Glide warn]: "+t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t=function(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t};function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function b(t){return parseInt(t)}function o(t){return"string"==typeof t}function u(t){var e=void 0===t?"undefined":r(t);return"function"===e||"object"===e&&t}function c(t){return"function"==typeof t}function d(t){return void 0===t}function h(t){return t.constructor===Array}function f(t,e,n){Object.defineProperty(t,e,n)}function g(t,e){var n=l({},t,e);return e.hasOwnProperty("classes")&&(n.classes=l({},t.classes,e.classes),e.classes.hasOwnProperty("direction")&&(n.classes.direction=l({},t.classes.direction,e.classes.direction))),e.hasOwnProperty("breakpoints")&&(n.breakpoints=l({},t.breakpoints,e.breakpoints)),n}var p=(t(e,[{key:"on",value:function(t,e){if(h(t))for(var n=0;n<t.length;n++)this.on(t[n],e);this.hop.call(this.events,t)||(this.events[t]=[]);var i=this.events[t].push(e)-1;return{remove:function(){delete this.events[t][i]}}}},{key:"emit",value:function(t,e){if(h(t))for(var n=0;n<t.length;n++)this.emit(t[n],e);this.hop.call(this.events,t)&&this.events[t].forEach(function(t){t(e||{})})}}]),e);function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,e),this.events=t,this.hop=t.hasOwnProperty}var m=(t(v,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this._e.emit("mount.before"),u(e)?this._c=function(t,e,n){var i={};for(var r in e)c(e[r])?i[r]=e[r](t,i,n):s("Extension must be a function");for(var a in i)c(i[a].mount)&&i[a].mount();return i}(this,e,this._e):s("You need to provide a object on `mount()`"),this._e.emit("mount.after"),this}},{key:"mutate",value:function(t){var e=0<arguments.length&&void 0!==t?t:[];return h(e)?this._t=e:s("You need to provide a array on `mutate()`"),this}},{key:"update",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this.settings=g(this.settings,e),e.hasOwnProperty("startAt")&&(this.index=e.startAt),this._e.emit("update"),this}},{key:"go",value:function(t){return this._c.Run.make(t),this}},{key:"move",value:function(t){return this._c.Transition.disable(),this._c.Move.make(t),this}},{key:"destroy",value:function(){return this._e.emit("destroy"),this}},{key:"play",value:function(t){var e=0<arguments.length&&void 0!==t&&t;return e&&(this.settings.autoplay=e),this._e.emit("play"),this}},{key:"pause",value:function(){return this._e.emit("pause"),this}},{key:"disable",value:function(){return this.disabled=!0,this}},{key:"enable",value:function(){return this.disabled=!1,this}},{key:"on",value:function(t,e){return this._e.on(t,e),this}},{key:"isType",value:function(t){return this.settings.type===t}},{key:"settings",get:function(){return this._o},set:function(t){u(t)?this._o=t:s("Options must be an `object` instance.")}},{key:"index",get:function(){return this._i},set:function(t){this._i=b(t)}},{key:"type",get:function(){return this.settings.type}},{key:"disabled",get:function(){return this._d},set:function(t){this._d=!!t}}]),v);function v(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};i(this,v),this._c={},this._t=[],this._e=new p,this.disabled=!1,this.selector=t,this.settings=g(n,e),this.index=this.settings.startAt}function y(){return(new Date).getTime()}function x(n,i,r){var a=void 0,o=void 0,s=void 0,l=void 0,u=0;r=r||{};function c(){u=!1===r.leading?0:y(),a=null,l=n.apply(o,s),a||(o=s=null)}function t(){var t=y();u||!1!==r.leading||(u=t);var e=i-(t-u);return o=this,s=arguments,e<=0||i<e?(a&&(clearTimeout(a),a=null),u=t,l=n.apply(o,s),a||(o=s=null)):a||!1===r.trailing||(a=setTimeout(c,e)),l}return t.cancel=function(){clearTimeout(a),u=0,a=o=s=null},t}var _={ltr:["marginLeft","marginRight"],rtl:["marginRight","marginLeft"]};function w(t){if(t&&t.parentNode){for(var e=t.parentNode.firstChild,n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}return[]}function k(t){return!!(t&&t instanceof window.HTMLElement)}var M='[data-glide-el="track"]';var C=(t(S,[{key:"on",value:function(t,e,n,i){var r=3<arguments.length&&void 0!==i&&i;o(t)&&(t=[t]);for(var a=0;a<t.length;a++)this.listeners[t[a]]=n,e.addEventListener(t[a],this.listeners[t[a]],r)}},{key:"off",value:function(t,e,n){var i=2<arguments.length&&void 0!==n&&n;o(t)&&(t=[t]);for(var r=0;r<t.length;r++)e.removeEventListener(t[r],this.listeners[t[r]],i)}},{key:"destroy",value:function(){delete this.listeners}}]),S);function S(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,S),this.listeners=t}var D=["ltr","rtl"],A={">":"<","<":">","=":"="};function T(t,e){return{modify:function(t){return e.Direction.is("rtl")?-t:t}}}function P(i,r,a){var o=[function(e,n){return{modify:function(t){return t+n.Gaps.value*e.index}}},function(t,e){return{modify:function(t){return t+e.Clones.grow/2}}},function(n,i){return{modify:function(t){if(0<=n.settings.focusAt){var e=i.Peek.value;return u(e)?t-e.before:t-e}return t}}},function(a,o){return{modify:function(t){var e=o.Gaps.value,n=o.Sizes.width,i=a.settings.focusAt,r=o.Sizes.slideWidth;return"center"===i?t-(n/2-r/2):t-r*i-e*i}}}].concat(i._t,[T]);return{mutate:function(t){for(var e=0;e<o.length;e++){var n=o[e];c(n)&&c(n().modify)?t=n(i,r,a).modify(t):s("Transformer should be a function that returns an object with `modify()` method")}return t}}}var O=!1;try{var I=Object.defineProperty({},"passive",{get:function(){O=!0}});window.addEventListener("testPassive",null,I),window.removeEventListener("testPassive",null,I)}catch(t){}var F=O,L=["touchstart","mousedown"],R=["touchmove","mousemove"],z=["touchend","touchcancel","mouseup","mouseleave"],N=["mousedown","mousemove","mouseup","mouseleave"];function B(t){return u(t)?(n=t,Object.keys(n).sort().reduce(function(t,e){return t[e]=n[e],t[e],t},{})):(s("Breakpoints option must be an object"),{});var n}var E={Html:function(e,t){var n={mount:function(){this.root=e.selector,this.track=this.root.querySelector(M),this.slides=Array.prototype.slice.call(this.wrapper.children).filter(function(t){return!t.classList.contains(e.settings.classes.cloneSlide)})}};return f(n,"root",{get:function(){return n._r},set:function(t){o(t)&&(t=document.querySelector(t)),k(t)?n._r=t:s("Root element must be a existing Html node")}}),f(n,"track",{get:function(){return n._t},set:function(t){k(t)?n._t=t:s("Could not find track element. Please use "+M+" attribute.")}}),f(n,"wrapper",{get:function(){return n.track.children[0]}}),n},Translate:function(r,a,o){var s={set:function(t){var e=P(r,a).mutate(t);a.Html.wrapper.style.transform="translate3d("+-1*e+"px, 0px, 0px)"},remove:function(){a.Html.wrapper.style.transform=""}};return o.on("move",function(t){var e=a.Gaps.value,n=a.Sizes.length,i=a.Sizes.slideWidth;return r.isType("carousel")&&a.Run.isOffset("<")?(a.Transition.after(function(){o.emit("translate.jump"),s.set(i*(n-1))}),s.set(-i-e*n)):r.isType("carousel")&&a.Run.isOffset(">")?(a.Transition.after(function(){o.emit("translate.jump"),s.set(0)}),s.set(i*n+e*n)):s.set(t.movement)}),o.on("destroy",function(){s.remove()}),s},Transition:function(n,i,t){var r=!1,e={compose:function(t){var e=n.settings;return r?t+" 0ms "+e.animationTimingFunc:t+" "+this.duration+"ms "+e.animationTimingFunc},set:function(t){var e=0<arguments.length&&void 0!==t?t:"transform";i.Html.wrapper.style.transition=this.compose(e)},remove:function(){i.Html.wrapper.style.transition=""},after:function(t){setTimeout(function(){t()},this.duration)},enable:function(){r=!1,this.set()},disable:function(){r=!0,this.set()}};return f(e,"duration",{get:function(){var t=n.settings;return n.isType("slider")&&i.Run.offset?t.rewindDuration:t.animationDuration}}),t.on("move",function(){e.set()}),t.on(["build.before","resize","translate.jump"],function(){e.disable()}),t.on("run",function(){e.enable()}),t.on("destroy",function(){e.remove()}),e},Direction:function(t,e,n){var i={mount:function(){this.value=t.settings.direction},resolve:function(t){var e=t.slice(0,1);return this.is("rtl")?t.split(e).join(A[e]):t},is:function(t){return this.value===t},addClass:function(){e.Html.root.classList.add(t.settings.classes.direction[this.value])},removeClass:function(){e.Html.root.classList.remove(t.settings.classes.direction[this.value])}};return f(i,"value",{get:function(){return i._v},set:function(t){-1<D.indexOf(t)?i._v=t:s("Direction value must be `ltr` or `rtl`")}}),n.on(["destroy","update"],function(){i.removeClass()}),n.on("update",function(){i.mount()}),n.on(["build.before","update"],function(){i.addClass()}),i},Peek:function(n,t,e){var i={mount:function(){this.value=n.settings.peek}};return f(i,"value",{get:function(){return i._v},set:function(t){u(t)?(t.before=b(t.before),t.after=b(t.after)):t=b(t),i._v=t}}),f(i,"reductor",{get:function(){var t=i.value,e=n.settings.perView;return u(t)?t.before/e+t.after/e:2*t/e}}),e.on(["resize","update"],function(){i.mount()}),i},Sizes:function(t,i,e){var n={setupSlides:function(){for(var t=this.slideWidth+"px",e=i.Html.slides,n=0;n<e.length;n++)e[n].style.width=t},setupWrapper:function(){i.Html.wrapper.style.width=this.wrapperSize+"px"},remove:function(){for(var t=i.Html.slides,e=0;e<t.length;e++)t[e].style.width="";i.Html.wrapper.style.width=""}};return f(n,"length",{get:function(){return i.Html.slides.length}}),f(n,"width",{get:function(){return i.Html.root.offsetWidth}}),f(n,"wrapperSize",{get:function(){return n.slideWidth*n.length+i.Gaps.grow+i.Clones.grow}}),f(n,"slideWidth",{get:function(){return n.width/t.settings.perView-i.Peek.reductor-i.Gaps.reductor}}),e.on(["build.before","resize","update"],function(){n.setupSlides(),n.setupWrapper()}),e.on("destroy",function(){n.remove()}),n},Gaps:function(e,a,t){var n={apply:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style,r=a.Direction.value;i[_[r][0]]=0!==e?this.value/2+"px":"",e!==t.length-1?i[_[r][1]]=this.value/2+"px":i[_[r][1]]=""}},remove:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style;i.marginLeft="",i.marginRight=""}}};return f(n,"value",{get:function(){return b(e.settings.gap)}}),f(n,"grow",{get:function(){return n.value*(a.Sizes.length-1)}}),f(n,"reductor",{get:function(){var t=e.settings.perView;return n.value*(t-1)/t}}),t.on(["build.after","update"],x(function(){n.apply(a.Html.wrapper.children)},30)),t.on("destroy",function(){n.remove(a.Html.wrapper.children)}),n},Move:function(t,i,r){var e={mount:function(){this._o=0},make:function(t){var e=this,n=0<arguments.length&&void 0!==t?t:0;this.offset=n,r.emit("move",{movement:this.value}),i.Transition.after(function(){r.emit("move.after",{movement:e.value})})}};return f(e,"offset",{get:function(){return e._o},set:function(t){e._o=d(t)?0:b(t)}}),f(e,"translate",{get:function(){return i.Sizes.slideWidth*t.index}}),f(e,"value",{get:function(){var t=this.offset,e=this.translate;return i.Direction.is("rtl")?e+t:e-t}}),r.on(["build.before","run"],function(){e.make()}),e},Clones:function(g,p,t){var e={mount:function(){this.items=[],g.isType("carousel")&&(this.items=this.collect())},collect:function(t){for(var e=0<arguments.length&&void 0!==t?t:[],n=p.Html.slides,i=g.settings,r=i.perView,a=i.classes,o=r+ +!!g.settings.peek,s=n.slice(0,o),l=n.slice(-o),u=0;u<Math.max(1,Math.floor(r/n.length));u++){for(var c=0;c<s.length;c++){var d=s[c].cloneNode(!0);d.classList.add(a.cloneSlide),e.push(d)}for(var h=0;h<l.length;h++){var f=l[h].cloneNode(!0);f.classList.add(a.cloneSlide),e.unshift(f)}}return e},append:function(){for(var t=this.items,e=p.Html,n=e.wrapper,i=e.slides,r=Math.floor(t.length/2),a=t.slice(0,r).reverse(),o=t.slice(r,t.length),s=p.Sizes.slideWidth+"px",l=0;l<o.length;l++)n.appendChild(o[l]);for(var u=0;u<a.length;u++)n.insertBefore(a[u],i[0]);for(var c=0;c<t.length;c++)t[c].style.width=s},remove:function(){for(var t=this.items,e=0;e<t.length;e++)p.Html.wrapper.removeChild(t[e])}};return f(e,"grow",{get:function(){return(p.Sizes.slideWidth+p.Gaps.value)*e.items.length}}),t.on("update",function(){e.remove(),e.mount(),e.append()}),t.on("build.before",function(){g.isType("carousel")&&e.append()}),t.on("destroy",function(){e.remove()}),e},Resize:function(t,e,n){var i=new C,r={mount:function(){this.bind()},bind:function(){i.on("resize",window,x(function(){n.emit("resize")},t.settings.throttle))},unbind:function(){i.off("resize",window)}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Build:function(n,i,t){var e={mount:function(){t.emit("build.before"),this.typeClass(),this.activeClass(),t.emit("build.after")},typeClass:function(){i.Html.root.classList.add(n.settings.classes[n.settings.type])},activeClass:function(){var e=n.settings.classes,t=i.Html.slides[n.index];t&&(t.classList.add(e.activeSlide),w(t).forEach(function(t){t.classList.remove(e.activeSlide)}))},removeClasses:function(){var e=n.settings.classes;i.Html.root.classList.remove(e[n.settings.type]),i.Html.slides.forEach(function(t){t.classList.remove(e.activeSlide)})}};return t.on(["destroy","update"],function(){e.removeClasses()}),t.on(["resize","update"],function(){e.mount()}),t.on("move.after",function(){e.activeClass()}),e},Run:function(a,n,i){var t={mount:function(){this._o=!1},make:function(t){var e=this;a.disabled||(a.disable(),this.move=t,i.emit("run.before",this.move),this.calculate(),i.emit("run",this.move),n.Transition.after(function(){e.isStart()&&i.emit("run.start",e.move),e.isEnd()&&i.emit("run.end",e.move),(e.isOffset("<")||e.isOffset(">"))&&(e._o=!1,i.emit("run.offset",e.move)),i.emit("run.after",e.move),a.enable()}))},calculate:function(){var t=this.move,e=this.length,n=t.steps,i=t.direction,r="number"==typeof b(n)&&0!==b(n);switch(i){case">":">"===n?a.index=e:this.isEnd()?a.isType("slider")&&!a.settings.rewind||(this._o=!0,a.index=0):r?a.index+=Math.min(e-a.index,-b(n)):a.index++;break;case"<":"<"===n?a.index=0:this.isStart()?a.isType("slider")&&!a.settings.rewind||(this._o=!0,a.index=e):r?a.index-=Math.min(a.index,b(n)):a.index--;break;case"=":a.index=n;break;default:s("Invalid direction pattern ["+i+n+"] has been used")}},isStart:function(){return 0===a.index},isEnd:function(){return a.index===this.length},isOffset:function(t){return this._o&&this.move.direction===t}};return f(t,"move",{get:function(){return this._m},set:function(t){var e=t.substr(1);this._m={direction:t.substr(0,1),steps:e?b(e)?b(e):e:0}}}),f(t,"length",{get:function(){var t=a.settings,e=n.Html.slides.length;return a.isType("slider")&&"center"!==t.focusAt&&t.bound?e-1-(b(t.perView)-1)+b(t.focusAt):e-1}}),f(t,"offset",{get:function(){return this._o}}),t},Swipe:function(h,f,g){var n=new C,p=0,m=0,v=0,i=!1,r=!!F&&{passive:!0},t={mount:function(){this.bindSwipeStart()},start:function(t){if(!i&&!h.disabled){this.disable();var e=this.touches(t);p=null,m=b(e.pageX),v=b(e.pageY),this.bindSwipeMove(),this.bindSwipeEnd(),g.emit("swipe.start")}},move:function(t){if(!h.disabled){var e=h.settings,n=e.touchAngle,i=e.touchRatio,r=e.classes,a=this.touches(t),o=b(a.pageX)-m,s=b(a.pageY)-v,l=Math.abs(o<<2),u=Math.abs(s<<2),c=Math.sqrt(l+u),d=Math.sqrt(u);if(!(180*(p=Math.asin(d/c))/Math.PI<n))return!1;t.stopPropagation(),f.Move.make(o*parseFloat(i)),f.Html.root.classList.add(r.dragging),g.emit("swipe.move")}},end:function(t){if(!h.disabled){var e=h.settings,n=this.touches(t),i=this.threshold(t),r=n.pageX-m,a=180*p/Math.PI,o=Math.round(r/f.Sizes.slideWidth);this.enable(),i<r&&a<e.touchAngle?(e.perTouch&&(o=Math.min(o,b(e.perTouch))),f.Direction.is("rtl")&&(o=-o),f.Run.make(f.Direction.resolve("<"+o))):r<-i&&a<e.touchAngle?(e.perTouch&&(o=Math.max(o,-b(e.perTouch))),f.Direction.is("rtl")&&(o=-o),f.Run.make(f.Direction.resolve(">"+o))):f.Move.make(),f.Html.root.classList.remove(e.classes.dragging),this.unbindSwipeMove(),this.unbindSwipeEnd(),g.emit("swipe.end")}},bindSwipeStart:function(){var e=this,t=h.settings;t.swipeThreshold&&n.on(L[0],f.Html.wrapper,function(t){e.start(t)},r),t.dragThreshold&&n.on(L[1],f.Html.wrapper,function(t){e.start(t)},r)},unbindSwipeStart:function(){n.off(L[0],f.Html.wrapper,r),n.off(L[1],f.Html.wrapper,r)},bindSwipeMove:function(){var e=this;n.on(R,f.Html.wrapper,x(function(t){e.move(t)},h.settings.throttle),r)},unbindSwipeMove:function(){n.off(R,f.Html.wrapper,r)},bindSwipeEnd:function(){var e=this;n.on(z,f.Html.wrapper,function(t){e.end(t)})},unbindSwipeEnd:function(){n.off(z,f.Html.wrapper)},touches:function(t){return-1<N.indexOf(t.type)?t:t.touches[0]||t.changedTouches[0]},threshold:function(t){var e=h.settings;return-1<N.indexOf(t.type)?e.dragThreshold:e.swipeThreshold},enable:function(){return i=!1,f.Transition.enable(),this},disable:function(){return i=!0,f.Transition.disable(),this}};return g.on("build.after",function(){f.Html.root.classList.add(h.settings.classes.swipeable)}),g.on("destroy",function(){t.unbindSwipeStart(),t.unbindSwipeMove(),t.unbindSwipeEnd(),n.destroy()}),t},Images:function(t,e,n){var i=new C,r={mount:function(){this.bind()},bind:function(){i.on("dragstart",e.Html.wrapper,this.dragstart)},unbind:function(){i.off("dragstart",e.Html.wrapper)},dragstart:function(t){t.preventDefault()}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Anchors:function(t,e,n){var i=new C,r=!1,a=!1,o={mount:function(){this._a=e.Html.wrapper.querySelectorAll("a"),this.bind()},bind:function(){i.on("click",e.Html.wrapper,this.click)},unbind:function(){i.off("click",e.Html.wrapper)},click:function(t){a&&(t.stopPropagation(),t.preventDefault())},detach:function(){if(a=!0,!r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!1,this.items[t].setAttribute("data-href",this.items[t].getAttribute("href")),this.items[t].removeAttribute("href");r=!0}return this},attach:function(){if(a=!1,r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!0,this.items[t].setAttribute("href",this.items[t].getAttribute("data-href"));r=!1}return this}};return f(o,"items",{get:function(){return o._a}}),n.on("swipe.move",function(){o.detach()}),n.on("swipe.end",function(){e.Transition.after(function(){o.attach()})}),n.on("destroy",function(){o.attach(),o.unbind(),i.destroy()}),o},Controls:function(i,e,t){var n=new C,r=!!F&&{passive:!0},a={mount:function(){this._n=e.Html.root.querySelectorAll('[data-glide-el="controls[nav]"]'),this._c=e.Html.root.querySelectorAll('[data-glide-el^="controls"]'),this.addBindings()},setActive:function(){for(var t=0;t<this._n.length;t++)this.addClass(this._n[t].children)},removeActive:function(){for(var t=0;t<this._n.length;t++)this.removeClass(this._n[t].children)},addClass:function(t){var e=i.settings,n=t[i.index];n&&(n.classList.add(e.classes.activeNav),w(n).forEach(function(t){t.classList.remove(e.classes.activeNav)}))},removeClass:function(t){var e=t[i.index];e&&e.classList.remove(i.settings.classes.activeNav)},addBindings:function(){for(var t=0;t<this._c.length;t++)this.bind(this._c[t].children)},removeBindings:function(){for(var t=0;t<this._c.length;t++)this.unbind(this._c[t].children)},bind:function(t){for(var e=0;e<t.length;e++)n.on("click",t[e],this.click),n.on("touchstart",t[e],this.click,r)},unbind:function(t){for(var e=0;e<t.length;e++)n.off(["click","touchstart"],t[e])},click:function(t){t.preventDefault(),e.Run.make(e.Direction.resolve(t.currentTarget.getAttribute("data-glide-dir")))}};return f(a,"items",{get:function(){return a._c}}),t.on(["mount.after","move.after"],function(){a.setActive()}),t.on("destroy",function(){a.removeBindings(),a.removeActive(),n.destroy()}),a},Keyboard:function(t,e,n){var i=new C,r={mount:function(){t.settings.keyboard&&this.bind()},bind:function(){i.on("keyup",document,this.press)},unbind:function(){i.off("keyup",document)},press:function(t){39===t.keyCode&&e.Run.make(e.Direction.resolve(">")),37===t.keyCode&&e.Run.make(e.Direction.resolve("<"))}};return n.on(["destroy","update"],function(){r.unbind()}),n.on("update",function(){r.mount()}),n.on("destroy",function(){i.destroy()}),r},Autoplay:function(e,n,t){var i=new C,r={mount:function(){this.start(),e.settings.hoverpause&&this.bind()},start:function(){var t=this;e.settings.autoplay&&d(this._i)&&(this._i=setInterval(function(){t.stop(),n.Run.make(">"),t.start()},this.time))},stop:function(){this._i=clearInterval(this._i)},bind:function(){var t=this;i.on("mouseover",n.Html.root,function(){t.stop()}),i.on("mouseout",n.Html.root,function(){t.start()})},unbind:function(){i.off(["mouseover","mouseout"],n.Html.root)}};return f(r,"time",{get:function(){var t=n.Html.slides[e.index].getAttribute("data-glide-autoplay");return b(t||e.settings.autoplay)}}),t.on(["destroy","update"],function(){r.unbind()}),t.on(["run.before","pause","destroy","swipe.start","update"],function(){r.stop()}),t.on(["run.after","play","swipe.end"],function(){r.start()}),t.on("update",function(){r.mount()}),t.on("destroy",function(){i.destroy()}),r},Breakpoints:function(t,e,n){var i=new C,r=t.settings,a=B(r.breakpoints),o=l({},r),s={match:function(t){if(void 0!==window.matchMedia)for(var e in t)if(t.hasOwnProperty(e)&&window.matchMedia("(max-width: "+e+"px)").matches)return t[e];return o}};return l(r,s.match(a)),i.on("resize",window,x(function(){t.settings=g(r,s.match(a))},t.settings.throttle)),n.on("update",function(){a=B(a),o=l({},r)}),n.on("destroy",function(){i.off("resize",window)}),s}};function W(){return i(this,W),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(W.__proto__||Object.getPrototypeOf(W)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(W,m),t(W,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,i)}if("value"in r)return r.value;var o=r.get;return void 0!==o?o.call(i):void 0}(W.prototype.__proto__||Object.getPrototypeOf(W.prototype),"mount",this).call(this,l({},E,e))}}]),W});var chartObject,chartObject1,chartObject2,chartObject3,chartObject4,chartObject5,chartObject6,chartObject7,chartObject8,chartObject9,refreshTime=6e5,slideTimeTitle=document.querySelector(".js-slide-time-title"),reportDaysDisplay=document.querySelector(".js-days"),reportDays=reportDaysDisplay.value,fullScreenOpen=document.querySelector(".js-full-screen-open"),fullScreenClose=document.querySelector(".js-full-screen-close"),body=document.body,themeGrideLines=body.classList.contains("light-theme")?"rgba(0,0,0,0.05)":"rgba(255,255,255,0.05)",themeFontColour=body.classList.contains("light-theme")?"rgba(0,0,0,0.6)":"rgba(255,255,255,0.6)",toggleSwitch=document.querySelector(".js-toggle-switch"),toggleSwitchInput=toggleSwitch.querySelector(".onoffswitch-checkbox");function getData(t,i,r){var a=new XMLHttpRequest;a.onload=function(){if(200<=a.status&&a.status<300){for(var t=JSON.parse(a.response).values,e={labels:[],datasetTitle:[],datasets:{0:[],1:[],2:[],3:[],4:[],5:[]},title:t[1][0]},n=0;n<=24*i;n++)0===n?(e.datasetTitle.push(t[n][1]),e.datasetTitle.push(t[n][2]),e.datasetTitle.push(t[n][3]),e.datasetTitle.push(t[n][4]),e.datasetTitle.push(t[n][8]),e.datasetTitle.push(t[n][9])):void 0!==t[n]?(e.datasets[0].push(t[n][1]),e.datasets[1].push(t[n][2]),e.datasets[2].push(t[n][3]),e.datasets[3].push(t[n][4]),e.datasets[4].push(t[n][8]),e.datasets[5].push(t[n][9]),e.labels.push(t[n][6]+" "+t[n][5])):(e.datasets[0].push(0),e.datasets[1].push(0),e.datasets[2].push(0),e.datasets[3].push(0),e.datasets[4].push(0),e.datasets[5].push(0),e.labels.push("00:00:00"));r(e)}else console.log("The request failed!")},a.open("GET","https://sheets.googleapis.com/v4/spreadsheets/1SSIkRt0WgSDgD6XvQiWsXBOUApTE1RFZ-zFftKyaG6Q/values/"+t+"?key=AIzaSyDxuzVaF80Tx4nN3xqfSHeYznHTCTA01Lk"),a.send()}function addChart(t,e,n,i){var r=document.getElementById(t).getContext("2d"),a=new Chart(r,{type:"line",data:{labels:n.labels,datasets:[{label:n.datasetTitle[0],data:n.datasets[0],fill:!1,borderColor:["rgba(54, 162, 235, 1)"],pointBackgroundColor:"rgba(54, 162, 235, 1)",pointBorderColor:"rgba(54, 162, 235, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[1],data:n.datasets[1],fill:!1,borderColor:["rgba(255, 99, 132, 1)"],pointBackgroundColor:"rgba(255, 99, 132, 1)",pointBorderColor:"rgba(255, 99, 132, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[2],data:n.datasets[2],fill:!1,borderColor:["rgb(65, 255, 99)"],pointBackgroundColor:"rgba(65, 255, 99, 1)",pointBorderColor:"rgba(65, 255, 99, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[3],data:n.datasets[3],fill:!1,borderColor:["rgb(255, 140, 26)"],pointBackgroundColor:"rgba(255, 140, 26, 1)",pointBorderColor:"rgba(255, 140, 26, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[4],data:n.datasets[4],fill:!1,borderColor:["rgb(206,198,53)"],pointBackgroundColor:"rgb(206,198,53)",pointBorderColor:"rgb(206,198,53)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[5],data:n.datasets[5],fill:!1,borderColor:["rgb(206,11,36)"],pointBackgroundColor:"rgb(206,11,36)",pointBorderColor:"rgb(206,11,36)",pointRadius:1,borderWidth:2}]},options:{scales:{yAxes:[{ticks:{fontColor:themeFontColour,beginAtZero:!0,suggestedMin:0,suggestedMax:3,stepSize:1},gridLines:{display:!0,color:themeGrideLines}}],xAxes:[{id:"xAxis1",ticks:{fontColor:themeFontColour,reverse:!0,autoSkip:!0,callback:function(t){return t.substring(0,5)}},gridLines:{display:!0,color:themeGrideLines}},{id:"xAxis2",gridLines:{drawOnChartArea:!1,color:themeGrideLines},ticks:{fontColor:themeFontColour,maxRotation:0,autoSkip:!1,reverse:!0,callback:function(t){if("00:"===t.substring(0,3))return t.substring(9)+" →"}}}]},legend:{text:"something",labels:{fontColor:themeFontColour}},title:{display:!0,text:e,fontSize:18,fontColor:themeFontColour},animation:{duration:0},maintainAspectRatio:!1}});a.canvas.parentNode.style.height=window.innerHeight/2.75+"px",i(a)}function updateChart(t,e){t.data.labels=e.labels;for(var n=0;n<t.data.datasets.length;n++)t.data.datasets[n].data=e.datasets[n];t.update()}function updateChartColours(t){themeGrideLines=body.classList.contains("light-theme")?"rgba(0,0,0,0.05)":"rgba(255,255,255,0.05)",themeFontColour=body.classList.contains("light-theme")?"rgba(0,0,0,0.6)":"rgba(255,255,255,0.6)",t.options.scales.yAxes[0].ticks.fontColor=themeFontColour,t.options.scales.yAxes[0].gridLines.color=themeGrideLines,t.options.scales.xAxes[0].ticks.fontColor=themeFontColour,t.options.scales.xAxes[0].gridLines.color=themeGrideLines,t.options.scales.xAxes[1].ticks.fontColor=themeFontColour,t.options.scales.xAxes[1].gridLines.color=themeGrideLines,t.options.legend.labels.fontColor=themeFontColour,t.options.title.fontColor=themeFontColour,t.update()}function openFullScreen(t){t.requestFullscreen?t.requestFullscreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():t.msRequestFullscreen&&t.msRequestFullscreen(),body.classList.add("full-screen")}function closeFullScreen(){document.exitFullscreen(),body.classList.remove("full-screen")}function updateAllCharts(t){getData("Home",t,function(t){updateChart(chartObject,t)}),getData("Car Insurance",t,function(t){updateChart(chartObject1,t)}),getData("Multi Car",t,function(t){updateChart(chartObject2,t)}),getData("Claims",t,function(t){updateChart(chartObject3,t)}),getData("Home Insurance",t,function(t){updateChart(chartObject4,t)}),getData("Smartmiles",t,function(t){updateChart(chartObject5,t)}),getData("Help",t,function(t){updateChart(chartObject6,t)}),getData("About Us",t,function(t){updateChart(chartObject7,t)}),getData("Contact Us",t,function(t){updateChart(chartObject8,t)}),getData("Coronavirus FAQs",t,function(t){updateChart(chartObject9,t)})}getData("Home",reportDays,function(t){addChart("metricChart",t.title,t,function(e){chartObject=e,setInterval(function(){getData("Home",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Car Insurance",reportDays,function(t){addChart("metricChart1",t.title,t,function(e){chartObject1=e,setInterval(function(){getData("Car Insurance",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Multi Car",reportDays,function(t){addChart("metricChart2",t.title,t,function(e){chartObject2=e,setInterval(function(){getData("Multi Car",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Claims",reportDays,function(t){addChart("metricChart3",t.title,t,function(e){chartObject3=e,setInterval(function(){getData("Claims",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Home Insurance",reportDays,function(t){addChart("metricChart4",t.title,t,function(e){chartObject4=e,setInterval(function(){getData("Home Insurance",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Smartmiles",reportDays,function(t){addChart("metricChart5",t.title,t,function(e){chartObject5=e,setInterval(function(){getData("Smartmiles",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Help",reportDays,function(t){addChart("metricChart6",t.title,t,function(e){chartObject6=e,setInterval(function(){getData("Help",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("About Us",reportDays,function(t){addChart("metricChart7",t.title,t,function(e){chartObject7=e,setInterval(function(){getData("About Us",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Contact Us",reportDays,function(t){addChart("metricChart8",t.title,t,function(e){chartObject8=e,setInterval(function(){getData("Contact Us",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Coronavirus FAQs",reportDays,function(t){addChart("metricChart9",t.title,t,function(e){chartObject9=e,setInterval(function(){getData("Coronavirus FAQs",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),reportDaysDisplay.addEventListener("change",function(t){updateAllCharts(t.target.value)}),fullScreenOpen.addEventListener("click",function(){openFullScreen(document.documentElement)}),fullScreenClose.addEventListener("click",function(){closeFullScreen()}),window.addEventListener("resize",function(){setTimeout(function(){chartObject.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject1.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject2.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject3.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject4.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject5.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject6.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject7.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject8.canvas.parentNode.style.height=window.innerHeight/2.6+"px",chartObject9.canvas.parentNode.style.height=window.innerHeight/2.6+"px"},500)});var glide=new Glide(".glide",{autoplay:3e4,animationDuration:1e3,hoverpause:!0});glide.on("run",function(){0!==glide.index?slideTimeTitle.classList.contains("active")||slideTimeTitle.classList.add("active"):slideTimeTitle.classList.remove("active")}),glide.mount(),toggleSwitchInput.addEventListener("change",function(t){reportDays=reportDaysDisplay.value,toggleSwitchInput.checked?body.classList.remove("light-theme"):body.classList.add("light-theme"),updateChartColours(chartObject),updateChartColours(chartObject1),updateChartColours(chartObject2),updateChartColours(chartObject3),updateChartColours(chartObject4),updateChartColours(chartObject5),updateChartColours(chartObject6),updateChartColours(chartObject7),updateChartColours(chartObject8),updateChartColours(chartObject9)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoYXJ0LmpzIiwiZ2xpZGUuanMiLCJkYXNoYm9hcmQuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJDaGFydCIsIm1vbWVudCIsInRoaXMiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbG9yTmFtZSIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29udmVyc2lvbnMiLCJyZXZlcnNlS2V5d29yZHMiLCJrZXkiLCJjb252ZXJ0IiwicmdiIiwiY2hhbm5lbHMiLCJsYWJlbHMiLCJoc2wiLCJoc3YiLCJod2IiLCJjbXlrIiwieHl6IiwibGFiIiwibGNoIiwiaGV4Iiwia2V5d29yZCIsImFuc2kxNiIsImFuc2kyNTYiLCJoY2ciLCJhcHBsZSIsIm1vZGVsIiwiRXJyb3IiLCJsZW5ndGgiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaCIsImwiLCJyIiwiZyIsImIiLCJtaW4iLCJNYXRoIiwibWF4IiwiZGVsdGEiLCJkaWZmYyIsImMiLCJ2IiwiZGlmZiIsInJkaWYiLCJnZGlmIiwiYmRpZiIsInMiLCJrIiwicmV2ZXJzZWQiLCJjdXJyZW50Q2xvc2VzdEtleXdvcmQiLCJ4IiwieSIsImN1cnJlbnRDbG9zZXN0RGlzdGFuY2UiLCJJbmZpbml0eSIsImRpc3RhbmNlIiwicG93IiwieiIsInQxIiwidDIiLCJ0MyIsInZhbCIsImkiLCJzbWluIiwibG1pbiIsImhpIiwiZmxvb3IiLCJmIiwicCIsInEiLCJ0Iiwic2wiLCJ2bWluIiwibiIsIndoIiwiYmwiLCJyYXRpbyIsIm0iLCJ5MiIsIngyIiwiejIiLCJhIiwiYXRhbjIiLCJQSSIsInNxcnQiLCJociIsImNvcyIsInNpbiIsImFyZ3MiLCJhcmd1bWVudHMiLCJyb3VuZCIsImFuc2kiLCJjb2xvciIsIm11bHQiLCJyZW0iLCJzdHJpbmciLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwibWF0Y2giLCJjb2xvclN0cmluZyIsInNwbGl0IiwibWFwIiwiY2hhciIsImpvaW4iLCJpbnRlZ2VyIiwicGFyc2VJbnQiLCJodWUiLCJjaHJvbWEiLCJtZyIsInB1cmUiLCJ3IiwiZm4iLCJkZXJpdmVCRlMiLCJmcm9tTW9kZWwiLCJncmFwaCIsIm1vZGVscyIsImtleXMiLCJsZW4iLCJwYXJlbnQiLCJidWlsZEdyYXBoIiwicXVldWUiLCJjdXJyZW50IiwicG9wIiwiYWRqYWNlbnRzIiwiYWRqYWNlbnQiLCJub2RlIiwidW5zaGlmdCIsImxpbmsiLCJmcm9tIiwidG8iLCJ3cmFwQ29udmVyc2lvbiIsInRvTW9kZWwiLCJwYXRoIiwiY3VyIiwiY29udmVyc2lvbiIsIndyYXBSYXciLCJ3cmFwcGVkRm4iLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsIndyYXBSb3VuZGVkIiwicmVzdWx0IiwiZm9yRWFjaCIsInJvdXRlcyIsInJvdXRlIiwicmF3IiwiY29sb3JDb252ZXJ0IiwiY29sb3JOYW1lJDEiLCJnZXRSZ2JhIiwiZ2V0SHNsYSIsImdldFJnYiIsInJnYmEiLCJnZXRIc2wiLCJoc2xhIiwiZ2V0SHdiIiwiZ2V0QWxwaGEiLCJ2YWxzIiwiaGV4U3RyaW5nIiwidW5kZWZpbmVkIiwiaGV4RG91YmxlIiwicmdiU3RyaW5nIiwiYWxwaGEiLCJyZ2JhU3RyaW5nIiwicGVyY2VudFN0cmluZyIsInBlcmNlbnRhU3RyaW5nIiwiaHNsU3RyaW5nIiwiaHNsYVN0cmluZyIsImh3YlN0cmluZyIsInJldmVyc2VOYW1lcyIsImhleEFscGhhIiwicGFyc2VGbG9hdCIsInNjYWxlIiwiaXNOYU4iLCJudW0iLCJzdHIiLCJuYW1lIiwiQ29sb3IiLCJvYmoiLCJ2YWxpZCIsInZhbHVlcyIsInNldFZhbHVlcyIsImxpZ2h0bmVzcyIsIndoaXRlbmVzcyIsImlzVmFsaWQiLCJzZXRTcGFjZSIsInJnYkFycmF5IiwiaHNsQXJyYXkiLCJoc3ZBcnJheSIsImh3YkFycmF5IiwiY29uY2F0IiwiY215a0FycmF5IiwicmdiYUFycmF5IiwiaHNsYUFycmF5Iiwic2V0Q2hhbm5lbCIsInNhdHVyYXRpb24iLCJzYXR1cmF0aW9udiIsImJsYWNrbmVzcyIsInJnYk51bWJlciIsImx1bWlub3NpdHkiLCJsdW0iLCJjaGFuIiwiY29udHJhc3QiLCJjb2xvcjIiLCJsdW0xIiwibHVtMiIsImxldmVsIiwiY29udHJhc3RSYXRpbyIsImRhcmsiLCJsaWdodCIsIm5lZ2F0ZSIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImRlc2F0dXJhdGUiLCJ3aGl0ZW4iLCJibGFja2VuIiwiZ3JleXNjYWxlIiwiY2xlYXJlciIsIm9wYXF1ZXIiLCJyb3RhdGUiLCJkZWdyZWVzIiwibWl4IiwibWl4aW5Db2xvciIsIndlaWdodCIsImNvbG9yMSIsIncxIiwidzIiLCJ0b0pTT04iLCJjbG9uZSIsInR5cGUiLCJzb3VyY2UiLCJ0YXJnZXQiLCJwcm9wIiwiY29uc29sZSIsImVycm9yIiwic3BhY2VzIiwibWF4ZXMiLCJnZXRWYWx1ZXMiLCJzcGFjZSIsImNoYXJBdCIsImNhcHBlZCIsImNoYW5zIiwic25hbWUiLCJpbmRleCIsInN2YWx1ZXMiLCJ3aW5kb3ciLCJpZCIsImNoYXJ0anNDb2xvciIsImhlbHBlcnMiLCJub29wIiwidWlkIiwiaXNOdWxsT3JVbmRlZiIsImlzQXJyYXkiLCJzdWJzdHIiLCJpc09iamVjdCIsImlzRmluaXRlIiwiTnVtYmVyIiwidmFsdWVPckRlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZUF0SW5kZXhPckRlZmF1bHQiLCJjYWxsYmFjayIsInRoaXNBcmciLCJhcHBseSIsImVhY2giLCJsb29wYWJsZSIsInJldmVyc2UiLCJhcnJheUVxdWFscyIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImtsZW4iLCJfbWVyZ2VyIiwib3B0aW9ucyIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJfbWVyZ2VySWYiLCJtZXJnZUlmIiwic291cmNlcyIsIm1lcmdlciIsImV4dGVuZCIsImFzc2lnbiIsImRzdCIsInNyYyIsImluaGVyaXRzIiwiZXh0ZW5zaW9ucyIsIlN1cnJvZ2F0ZSIsImNvbnN0cnVjdG9yIiwiQ2hhcnRFbGVtZW50IiwibWUiLCJfX3N1cGVyX18iLCJfZGVwcmVjYXRlZCIsInNjb3BlIiwicHJldmlvdXMiLCJ3YXJuIiwiaGVscGVyc19jb3JlIiwiY2FsbENhbGxiYWNrIiwiaW5kZXhPZiIsImFycmF5IiwiaXRlbSIsImZyb21JbmRleCIsImdldFZhbHVlT3JEZWZhdWx0IiwiZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiYXNpbiIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlSW5Cb3VuY2UiLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluT3V0Qm91bmNlIiwiaGVscGVyc19lYXNpbmciLCJlYXNpbmdFZmZlY3RzIiwiUkFEX1BFUl9ERUciLCJET1VCTEVfUEkiLCJIQUxGX1BJIiwiUVVBUlRFUl9QSSIsIlRXT19USElSRFNfUEkiLCJleHBvcnRzJDEiLCJjbGVhciIsImNoYXJ0IiwiY3R4IiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJyb3VuZGVkUmVjdCIsInJhZGl1cyIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsIm1vdmVUbyIsImFyYyIsImNsb3NlUGF0aCIsInJlY3QiLCJkcmF3UG9pbnQiLCJzdHlsZSIsInJvdGF0aW9uIiwieE9mZnNldCIsInlPZmZzZXQiLCJzaXplIiwiY29ybmVyUmFkaXVzIiwicmFkIiwic2F2ZSIsInRyYW5zbGF0ZSIsImRyYXdJbWFnZSIsInJlc3RvcmUiLCJiZWdpblBhdGgiLCJsaW5lVG8iLCJTUVJUMV8yIiwiZmlsbCIsInN0cm9rZSIsIl9pc1BvaW50SW5BcmVhIiwicG9pbnQiLCJhcmVhIiwiY2xpcEFyZWEiLCJjbGlwIiwidW5jbGlwQXJlYSIsImZsaXAiLCJzdGVwcGVkIiwic3RlcHBlZExpbmUiLCJtaWRwb2ludCIsInRlbnNpb24iLCJiZXppZXJDdXJ2ZVRvIiwiY29udHJvbFBvaW50UHJldmlvdXNYIiwiY29udHJvbFBvaW50TmV4dFgiLCJjb250cm9sUG9pbnRQcmV2aW91c1kiLCJjb250cm9sUG9pbnROZXh0WSIsImhlbHBlcnNfY2FudmFzIiwiZHJhd1JvdW5kZWRSZWN0YW5nbGUiLCJkZWZhdWx0cyIsIl9zZXQiLCJkZWZhdWx0Q29sb3IiLCJkZWZhdWx0Rm9udENvbG9yIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJkZWZhdWx0Rm9udFNpemUiLCJkZWZhdWx0Rm9udFN0eWxlIiwiZGVmYXVsdExpbmVIZWlnaHQiLCJzaG93TGluZXMiLCJjb3JlX2RlZmF1bHRzIiwiaGVscGVyc19vcHRpb25zIiwidG9MaW5lSGVpZ2h0IiwibWF0Y2hlcyIsInRvUGFkZGluZyIsIl9wYXJzZUZvbnQiLCJmb250IiwiZ2xvYmFsRGVmYXVsdHMiLCJmb250U2l6ZSIsImZhbWlseSIsImZvbnRGYW1pbHkiLCJsaW5lSGVpZ2h0IiwiZm9udFN0eWxlIiwicmVzb2x2ZSIsImlucHV0cyIsImNvbnRleHQiLCJpbmZvIiwiY2FjaGVhYmxlIiwiZXhwb3J0cyQyIiwiX2ZhY3Rvcml6ZSIsInB1c2giLCJzb3J0IiwibG9nMTAiLCJleHBvbmVudCIsImxvZyIsIkxPRzEwRSIsInBvd2VyT2YxMCIsImhlbHBlcnNfbWF0aCIsImhlbHBlcnMkMSIsImVhc2luZyIsImNhbnZhcyIsIm1hdGgiLCJydGwiLCJnZXRSdGxBZGFwdGVyIiwicmVjdFgiLCJzZXRXaWR0aCIsInRleHRBbGlnbiIsImFsaWduIiwieFBsdXMiLCJsZWZ0Rm9yTHRyIiwiaXRlbVdpZHRoIiwiX2l0ZW1XaWR0aCIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInByZXZUZXh0RGlyZWN0aW9uIiwicmVzdG9yZVRleHREaXJlY3Rpb24iLCJFbGVtZW50IiwiY29uZmlndXJhdGlvbiIsImluaXRpYWxpemUiLCJfdHlwZSIsImhpZGRlbiIsInBpdm90IiwiX3ZpZXciLCJfbW9kZWwiLCJfc3RhcnQiLCJ0cmFuc2l0aW9uIiwiZWFzZSIsInN0YXJ0IiwidmlldyIsImFjdHVhbCIsIm9yaWdpbiIsImMwIiwiYzEiLCJpbnRlcnBvbGF0ZSIsInRvb2x0aXBQb3NpdGlvbiIsImhhc1ZhbHVlIiwiaXNOdW1iZXIiLCJjb3JlX2VsZW1lbnQiLCJleHBvcnRzJDMiLCJjdXJyZW50U3RlcCIsIm51bVN0ZXBzIiwicmVuZGVyIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uQW5pbWF0aW9uQ29tcGxldGUiLCJjb3JlX2FuaW1hdGlvbiIsImdldCIsInNldCIsImFuaW1hdGlvbiIsImR1cmF0aW9uIiwib25Qcm9ncmVzcyIsIm9uQ29tcGxldGUiLCJjb3JlX2FuaW1hdGlvbnMiLCJhbmltYXRpb25zIiwicmVxdWVzdCIsImFkZEFuaW1hdGlvbiIsImxhenkiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiYW5pbWF0aW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uIiwiZmluZEluZGV4Iiwic3BsaWNlIiwicmVxdWVzdEFuaW1GcmFtZSIsInN0YXJ0RGlnZXN0IiwiYWR2YW5jZSIsIm5leHRTdGVwIiwiYXJyYXlFdmVudHMiLCJ1bmxpc3RlbkFycmF5RXZlbnRzIiwibGlzdGVuZXIiLCJzdHViIiwiX2NoYXJ0anMiLCJsaXN0ZW5lcnMiLCJEYXRhc2V0Q29udHJvbGxlciIsImRhdGFzZXRJbmRleCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImRhdGFFbGVtZW50VHlwZSIsIl9kYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJfZGF0YUVsZW1lbnRPcHRpb25zIiwibGlua1NjYWxlcyIsImFkZEVsZW1lbnRzIiwiZ2V0TWV0YSIsInVwZGF0ZUluZGV4IiwibWV0YSIsInNjYWxlcyIsImRhdGFzZXQiLCJnZXREYXRhc2V0Iiwic2NhbGVzT3B0cyIsInhBeGlzSUQiLCJ4QXhlcyIsInlBeGlzSUQiLCJ5QXhlcyIsImRhdGEiLCJkYXRhc2V0cyIsImdldERhdGFzZXRNZXRhIiwiZ2V0U2NhbGVGb3JJZCIsInNjYWxlSUQiLCJfZ2V0VmFsdWVTY2FsZUlkIiwiX2dldEluZGV4U2NhbGVJZCIsIl9nZXRWYWx1ZVNjYWxlIiwiX2dldEluZGV4U2NhbGUiLCJyZXNldCIsIl91cGRhdGUiLCJkZXN0cm95IiwiX2RhdGEiLCJjcmVhdGVNZXRhRGF0YXNldCIsIl9jaGFydCIsIl9kYXRhc2V0SW5kZXgiLCJjcmVhdGVNZXRhRGF0YSIsIl9pbmRleCIsIm1ldGFEYXRhIiwiYWRkRWxlbWVudEFuZFJlc2V0IiwiZWxlbWVudCIsInVwZGF0ZUVsZW1lbnQiLCJidWlsZE9yVXBkYXRlRWxlbWVudHMiLCJpc0V4dGVuc2libGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwibWV0aG9kIiwiYmFzZSIsInJlcyIsIm9iamVjdCIsInJlc3luY0VsZW1lbnRzIiwiX2NvbmZpZ3VyZSIsIl9jb25maWciLCJfY2FjaGVkRGF0YU9wdHMiLCJ1cGRhdGUiLCJlYXNpbmdWYWx1ZSIsImVsZW1lbnRzIiwiZHJhdyIsImdldFN0eWxlIiwiX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiaG92ZXIiLCJyZWFkS2V5IiwiZGF0YXNldE9wdHMiLCJjdXN0b20iLCJlbGVtZW50T3B0aW9ucyIsImNhY2hlZCIsImRhdGFJbmRleCIsImZyZWV6ZSIsInJlbW92ZUhvdmVyU3R5bGUiLCIkcHJldmlvdXNTdHlsZSIsInNldEhvdmVyU3R5bGUiLCJnZXRIb3ZlckNvbG9yIiwiYm9yZGVyV2lkdGgiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckJvcmRlcldpZHRoIiwiX3JlbW92ZURhdGFzZXRIb3ZlclN0eWxlIiwiX3NldERhdGFzZXRIb3ZlclN0eWxlIiwiaG92ZXJPcHRpb25zIiwicHJldiIsIm51bU1ldGEiLCJudW1EYXRhIiwiaW5zZXJ0RWxlbWVudHMiLCJjb3VudCIsIm9uRGF0YVB1c2giLCJvbkRhdGFQb3AiLCJvbkRhdGFTaGlmdCIsInNoaWZ0Iiwib25EYXRhU3BsaWNlIiwib25EYXRhVW5zaGlmdCIsImNvcmVfZGF0YXNldENvbnRyb2xsZXIiLCJUQVUiLCJjbGlwQXJjIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwicGl4ZWxNYXJnaW4iLCJhbmdsZU1hcmdpbiIsIm91dGVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJkcmF3Qm9yZGVyIiwidm0iLCJpbm5lciIsImJvcmRlckFsaWduIiwibGluZVdpZHRoIiwibGluZUpvaW4iLCJmdWxsQ2lyY2xlcyIsImRyYXdGdWxsQ2lyY2xlQm9yZGVycyIsImVsZW1lbnRfYXJjIiwiaW5MYWJlbFJhbmdlIiwibW91c2VYIiwiaG92ZXJSYWRpdXMiLCJpblJhbmdlIiwiY2hhcnRYIiwiY2hhcnRZIiwicG9pbnRSZWxhdGl2ZVBvc2l0aW9uIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJhbmdsZSIsImJldHdlZW5BbmdsZXMiLCJ3aXRoaW5SYWRpdXMiLCJnZXRDZW50ZXJQb2ludCIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJnZXRBcmVhIiwiY2VudHJlQW5nbGUiLCJyYW5nZUZyb21DZW50cmUiLCJjaXJjdW1mZXJlbmNlIiwiZmlsbFN0eWxlIiwic3Ryb2tlU3R5bGUiLCJ2YWx1ZU9yRGVmYXVsdCQxIiwibGluZSIsImJvcmRlckNhcFN0eWxlIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJjYXBCZXppZXJQb2ludHMiLCJlbGVtZW50X2xpbmUiLCJjdXJyZW50Vk0iLCJzcGFuR2FwcyIsInBvaW50cyIsIl9jaGlsZHJlbiIsImdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cyIsImxhc3REcmF3bkluZGV4IiwiX2xvb3AiLCJwcmV2aW91c0l0ZW0iLCJza2lwIiwibGluZUNhcCIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJ2YWx1ZU9yRGVmYXVsdCQyIiwiZGVmYXVsdENvbG9yJDEiLCJ4UmFuZ2UiLCJhYnMiLCJoaXRSYWRpdXMiLCJwb2ludFN0eWxlIiwiZWxlbWVudF9wb2ludCIsIm1vdXNlWSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJwYWRkaW5nIiwiY2hhcnRBcmVhIiwiZGVmYXVsdENvbG9yJDIiLCJpc1ZlcnRpY2FsIiwiZ2V0QmFyQm91bmRzIiwieDEiLCJ5MSIsImhhbGYiLCJzd2FwIiwib3JpZyIsInYyIiwicGFyc2VCb3JkZXJXaWR0aCIsIm1heFciLCJtYXhIIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwic2tpcFgiLCJza2lwWSIsImJvdW5kcyIsInJlY3RhbmdsZSIsImVsZW1lbnRfcmVjdGFuZ2xlIiwiYm9yZGVyIiwicmVjdHMiLCJvdXRlciIsImZpbGxSZWN0IiwiQXJjIiwiTGluZSIsIlBvaW50IiwiUmVjdGFuZ2xlIiwiZGVwcmVjYXRlZCIsInZhbHVlT3JEZWZhdWx0JDMiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJydWxlciIsInRoaWNrbmVzcyIsImJhclRoaWNrbmVzcyIsInN0YWNrQ291bnQiLCJjdXJyIiwicGl4ZWxzIiwiX2xlbmd0aCIsImdldFRpY2tzIiwiZ2V0UGl4ZWxGb3JUaWNrIiwiY29tcHV0ZU1pblNhbXBsZVNpemUiLCJjYXRlZ29yeVBlcmNlbnRhZ2UiLCJiYXJQZXJjZW50YWdlIiwiY2h1bmsiLCJtb2RlIiwib2Zmc2V0IiwiZ3JpZExpbmVzIiwib2Zmc2V0R3JpZExpbmVzIiwiYmFyIiwiY29udHJvbGxlcl9iYXIiLCJzY2FsZU9wdHMiLCJzdGFjayIsIm1pbkJhckxlbmd0aCIsIm1heEJhclRoaWNrbmVzcyIsIl9ydWxlciIsImdldFJ1bGVyIiwiX3hTY2FsZSIsIl95U2NhbGUiLCJkYXRhc2V0TGFiZWwiLCJsYWJlbCIsIl91cGRhdGVFbGVtZW50R2VvbWV0cnkiLCJ2c2NhbGUiLCJnZXRCYXNlUGl4ZWwiLCJpc0hvcml6b250YWwiLCJ2cGl4ZWxzIiwiY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCJpcGl4ZWxzIiwiY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMiLCJoZWFkIiwiY2VudGVyIiwiX2dldFN0YWNrcyIsImxhc3QiLCJtZXRhc2V0cyIsIl9nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyIsInN0YWNrZWQiLCJzdGFja3MiLCJnZXRTdGFja0NvdW50IiwiZ2V0U3RhY2tJbmRleCIsImdldFBpeGVsRm9yVmFsdWUiLCJfc3RhcnRQaXhlbCIsImVuZCIsIl9lbmRQaXhlbCIsImltZXRhIiwiaXZhbHVlIiwic3RhY2tMZW5ndGgiLCJfcGFyc2VWYWx1ZSIsIm5leHQiLCJwZXJjZW50IiwicmFuZ2UiLCJzdGFja0luZGV4IiwiaW5kZXhPcHRzIiwidmFsdWVPcHRzIiwidmFsdWVPckRlZmF1bHQkNCIsInJlc29sdmUkMSIsInBvc2l0aW9uIiwidG9vbHRpcHMiLCJjYWxsYmFja3MiLCJ0aXRsZSIsImRhdGFQb2ludCIsInhMYWJlbCIsInlMYWJlbCIsImNvbnRyb2xsZXJfYnViYmxlIiwieFNjYWxlIiwieVNjYWxlIiwiZHNJbmRleCIsImdldFBpeGVsRm9yRGVjaW1hbCIsIk5hTiIsIl9vcHRpb25zIiwidmFsdWVPckRlZmF1bHQkNSIsIlBJJDEiLCJET1VCTEVfUEkkMSIsIkhBTEZfUEkkMSIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJsZWdlbmRDYWxsYmFjayIsImxpc3RJdGVtIiwibGlzdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJvdXRlckhUTUwiLCJsZWdlbmQiLCJnZW5lcmF0ZUxhYmVscyIsImNvbnRyb2xsZXIiLCJ0ZXh0Iiwib25DbGljayIsImxlZ2VuZEl0ZW0iLCJjdXRvdXRQZXJjZW50YWdlIiwidG9vbHRpcEl0ZW0iLCJkYXRhTGFiZWwiLCJjb250cm9sbGVyX2RvdWdobnV0IiwiZ2V0UmluZ0luZGV4IiwicmluZ0luZGV4IiwiaiIsImlzRGF0YXNldFZpc2libGUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIm9wdHMiLCJyYXRpb1giLCJyYXRpb1kiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImFyY3MiLCJjdXRvdXQiLCJjaGFydFdlaWdodCIsIl9nZXRSaW5nV2VpZ2h0Iiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJjb250YWluczAiLCJjb250YWluczkwIiwiY29udGFpbnMyNzAiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsImFuaW1hdGlvbk9wdHMiLCJjZW50ZXJYIiwiY2VudGVyWSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJob3ZlcldpZHRoIiwicmluZ1dlaWdodE9mZnNldCIsImRhdGFTZXRJbmRleCIsImF4aXMiLCJob3Jpem9udGFsQmFyIiwiY29udHJvbGxlcl9ob3Jpem9udGFsQmFyIiwidmFsdWVPckRlZmF1bHQkNiIsInJlc29sdmUkMiIsImlzUG9pbnRJbkFyZWEiLCJzY2FsZUNsaXAiLCJoYWxmQm9yZGVyV2lkdGgiLCJ0aWNrT3B0cyIsInRpY2tzIiwiY29udHJvbGxlcl9saW5lIiwiY29uZmlnIiwic2hvd0xpbmUiLCJfc2hvd0xpbmUiLCJsaW5lVGVuc2lvbiIsIl9zY2FsZSIsInVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJsaW5lTW9kZWwiLCJjYWxjdWxhdGVQb2ludFkiLCJsaW5lT3B0aW9ucyIsImRzIiwiZHNNZXRhIiwic3RhY2tlZFJpZ2h0VmFsdWUiLCJyaWdodFZhbHVlIiwic3VtUG9zIiwic3VtTmVnIiwiZ2V0UmlnaHRWYWx1ZSIsIl9nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiY29udHJvbFBvaW50cyIsImNhcENvbnRyb2xQb2ludCIsInB0IiwiZmlsdGVyIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJzcGxpbmVDdXJ2ZSIsIm5leHRJdGVtIiwicmVzb2x2ZSQzIiwiYW5nbGVMaW5lcyIsImRpc3BsYXkiLCJjaXJjdWxhciIsInBvaW50TGFiZWxzIiwiYmVnaW5BdFplcm8iLCJjb250cm9sbGVyX3BvbGFyQXJlYSIsInN0YXJ0cyIsIl9zdGFydHMiLCJhbmdsZXMiLCJfYW5nbGVzIiwiX3VwZGF0ZVJhZGl1cyIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwiX2NvbXB1dGVBbmdsZSIsIm1pblNpemUiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50IiwieENlbnRlciIsInlDZW50ZXIiLCJkYXRhc2V0U3RhcnRBbmdsZSIsImdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlIiwicmVzZXRSYWRpdXMiLCJkb3VnaG51dCIsImNvbnRyb2xsZXJfcGllIiwidmFsdWVPckRlZmF1bHQkNyIsImNvbnRyb2xsZXJfcmFkYXIiLCJwb2ludFBvc2l0aW9uIiwiZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlIiwic2NhdHRlciIsImNvbnRyb2xsZXJzIiwiYnViYmxlIiwicG9sYXJBcmVhIiwicGllIiwicmFkYXIiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwibmF0aXZlIiwicGFyc2VWaXNpYmxlSXRlbXMiLCJoYW5kbGVyIiwibWV0YWRhdGEiLCJqbGVuIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJnZXROZWFyZXN0SXRlbXMiLCJpbnRlcnNlY3QiLCJkaXN0YW5jZU1ldHJpYyIsIm1pbkRpc3RhbmNlIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJuZWFyZXN0SXRlbXMiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJ1c2VYIiwidXNlWSIsInB0MSIsInB0MiIsImRlbHRhWCIsImRlbHRhWSIsImluZGV4TW9kZSIsIml0ZW1zIiwiY29yZV9pbnRlcmFjdGlvbiIsIm1vZGVzIiwic2luZ2xlIiwieC1heGlzIiwibmVhcmVzdCIsImludGVyc2VjdHNJdGVtIiwiZmlsdGVyQnlQb3NpdGlvbiIsIndoZXJlIiwicG9zIiwic29ydEJ5V2VpZ2h0IiwiYnVpbGRMYXlvdXRCb3hlcyIsImJveGVzIiwibGF5b3V0Qm94ZXMiLCJib3giLCJ3cmFwQm94ZXMiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImdldENvbWJpbmVkTWF4IiwibWF4UGFkZGluZyIsInVwZGF0ZURpbXMiLCJwYXJhbXMiLCJsYXlvdXQiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsImdldFBhZGRpbmciLCJib3hQYWRkaW5nIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiZ2V0TWFyZ2lucyIsIm1hcmdpbkZvclBvc2l0aW9ucyIsInBvc2l0aW9ucyIsIm1hcmdpbiIsImZpdEJveGVzIiwicmVmaXQiLCJjaGFuZ2VkIiwicmVmaXRCb3hlcyIsImZ1bGxXaWR0aCIsInBsYWNlQm94ZXMiLCJ1c2VyUGFkZGluZyIsImNvcmVfbGF5b3V0cyIsImFkZEJveCIsIl9sYXllcnMiLCJyZW1vdmVCb3giLCJsYXlvdXRJdGVtIiwiY29uZmlndXJlIiwicHJvcHMiLCJsYXlvdXRPcHRpb25zIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwidkJveE1heFdpZHRoIiwiaEJveE1heEhlaWdodCIsImxheW91dHMiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwic3R5bGVzaGVldCIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJFWFBBTkRPX0tFWSIsIkNTU19QUkVGSVgiLCJDU1NfU0laRV9NT05JVE9SIiwiQ1NTX1JFTkRFUl9NT05JVE9SIiwiQ1NTX1JFTkRFUl9BTklNQVRJT04iLCJBTklNQVRJT05fU1RBUlRfRVZFTlRTIiwiRVZFTlRfVFlQRVMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmxlYXZlIiwicG9pbnRlcm91dCIsInJlYWRVc2VkU2l6ZSIsInByb3BlcnR5IiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJzdXBwb3J0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXNzaXZlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiY3JlYXRlRGl2IiwiY2xzIiwiZWwiLCJjbGFzc05hbWUiLCJhZGRSZXNpemVMaXN0ZW5lciIsInJlc2l6ZXIiLCJleHBhbmQiLCJzaHJpbmsiLCJ0aWNraW5nIiwiZXhwYW5kbyIsInByb3h5IiwiY29udGFpbmVyIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInBhcmVudE5vZGUiLCJjbGllbnRXaWR0aCIsIl9yZXNldCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJvblNjcm9sbCIsImJpbmQiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicmVuZGVyUHJveHkiLCJhbmltYXRpb25OYW1lIiwicmVmbG93Iiwib2Zmc2V0UGFyZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlUmVzaXplTGlzdGVuZXIiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInBsYXRmb3JtX2RvbSQyIiwiZGlzYWJsZUNTU0luamVjdGlvbiIsIl9lbmFibGVkIiwiX2Vuc3VyZUxvYWRlZCIsInJvb3QiLCJnZXRSb290Tm9kZSIsInJvb3ROb2RlIiwiY3NzIiwiY29udGFpbnNTdHlsZXMiLCJpbmplY3RDU1MiLCJob3N0IiwiYWNxdWlyZUNvbnRleHQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJyZW5kZXJIZWlnaHQiLCJnZXRBdHRyaWJ1dGUiLCJyZW5kZXJXaWR0aCIsImluaXRpYWwiLCJkaXNwbGF5V2lkdGgiLCJhc3BlY3RSYXRpbyIsImRpc3BsYXlIZWlnaHQiLCJpbml0Q2FudmFzIiwicmVsZWFzZUNvbnRleHQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcm94aWVzIiwiZXZlbnQiLCJhZGRFdmVudCIsInJlbW92ZUV2ZW50IiwiaW1wbGVtZW50YXRpb24iLCJwbGF0Zm9ybSIsInBsdWdpbnMiLCJjb3JlX3BsdWdpbnMiLCJfcGx1Z2lucyIsIl9jYWNoZUlkIiwicmVnaXN0ZXIiLCJwbHVnaW4iLCJ1bnJlZ2lzdGVyIiwiaWR4IiwiZ2V0QWxsIiwibm90aWZ5IiwiaG9vayIsImRlc2NyaXB0b3IiLCJkZXNjcmlwdG9ycyIsImNhY2hlIiwiJHBsdWdpbnMiLCJfaW52YWxpZGF0ZSIsImNvcmVfc2NhbGVTZXJ2aWNlIiwiY29uc3RydWN0b3JzIiwicmVnaXN0ZXJTY2FsZVR5cGUiLCJzY2FsZUNvbnN0cnVjdG9yIiwic2NhbGVEZWZhdWx0cyIsImdldFNjYWxlQ29uc3RydWN0b3IiLCJnZXRTY2FsZURlZmF1bHRzIiwidXBkYXRlU2NhbGVEZWZhdWx0cyIsImFkZGl0aW9ucyIsImFkZFNjYWxlc1RvTGF5b3V0IiwidmFsdWVPckRlZmF1bHQkOCIsImdldFJ0bEhlbHBlciIsImVuYWJsZWQiLCJ0aXRsZUZvbnRTdHlsZSIsInRpdGxlU3BhY2luZyIsInRpdGxlTWFyZ2luQm90dG9tIiwidGl0bGVGb250Q29sb3IiLCJ0aXRsZUFsaWduIiwiYm9keVNwYWNpbmciLCJib2R5Rm9udENvbG9yIiwiYm9keUFsaWduIiwiZm9vdGVyRm9udFN0eWxlIiwiZm9vdGVyU3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlckZvbnRDb2xvciIsImZvb3RlckFsaWduIiwieVBhZGRpbmciLCJ4UGFkZGluZyIsImNhcmV0UGFkZGluZyIsImNhcmV0U2l6ZSIsIm11bHRpS2V5QmFja2dyb3VuZCIsImRpc3BsYXlDb2xvcnMiLCJiZWZvcmVUaXRsZSIsInRvb2x0aXBJdGVtcyIsImxhYmVsQ291bnQiLCJhZnRlclRpdGxlIiwiYmVmb3JlQm9keSIsImJlZm9yZUxhYmVsIiwibGFiZWxDb2xvciIsImxhYmVsVGV4dENvbG9yIiwiYWZ0ZXJMYWJlbCIsImFmdGVyQm9keSIsImJlZm9yZUZvb3RlciIsImZvb3RlciIsImFmdGVyRm9vdGVyIiwicG9zaXRpb25lcnMiLCJhdmVyYWdlIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwiZCIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsInRwIiwicHVzaE9yQ29uY2F0IiwidG9QdXNoIiwic3BsaXROZXdsaW5lcyIsIlN0cmluZyIsImdldEJhc2VNb2RlbCIsInRvb2x0aXBPcHRzIiwieEFsaWduIiwieUFsaWduIiwidGV4dERpcmVjdGlvbiIsIl9ib2R5Rm9udEZhbWlseSIsImJvZHlGb250RmFtaWx5IiwiX2JvZHlGb250U3R5bGUiLCJib2R5Rm9udFN0eWxlIiwiX2JvZHlBbGlnbiIsImJvZHlGb250U2l6ZSIsIl90aXRsZUZvbnRGYW1pbHkiLCJ0aXRsZUZvbnRGYW1pbHkiLCJfdGl0bGVGb250U3R5bGUiLCJ0aXRsZUZvbnRTaXplIiwiX3RpdGxlQWxpZ24iLCJfZm9vdGVyRm9udEZhbWlseSIsImZvb3RlckZvbnRGYW1pbHkiLCJfZm9vdGVyRm9udFN0eWxlIiwiZm9vdGVyRm9udFNpemUiLCJfZm9vdGVyQWxpZ24iLCJvcGFjaXR5IiwibGVnZW5kQ29sb3JCYWNrZ3JvdW5kIiwiZ2V0VG9vbHRpcFNpemUiLCJ0b29sdGlwIiwiYm9keSIsImNvbWJpbmVkQm9keUxlbmd0aCIsInJlZHVjZSIsImJvZHlJdGVtIiwiYmVmb3JlIiwibGluZXMiLCJhZnRlciIsInRpdGxlTGluZUNvdW50IiwiZm9vdGVyTGluZUNvdW50IiwibWF4TGluZVdpZHRoIiwibWVhc3VyZVRleHQiLCJ3aWR0aFBhZGRpbmciLCJmb250U3RyaW5nIiwiZ2V0QWxpZ25lZFgiLCJnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyIsImV4cG9ydHMkNCIsIl9sYXN0QWN0aXZlIiwiZ2V0VGl0bGUiLCJnZXRCZWZvcmVCb2R5IiwiZ2V0Qm9keSIsImJvZHlJdGVtcyIsImdldEFmdGVyQm9keSIsImdldEZvb3RlciIsImFsaWdubWVudCIsInBhZGRpbmdBbmRTaXplIiwicmFkaXVzQW5kUGFkZGluZyIsImluZGV4U2NhbGUiLCJ2YWx1ZVNjYWxlIiwiZXhpc3RpbmdNb2RlbCIsImFjdGl2ZSIsIl9hY3RpdmUiLCJiYWNrZ3JvdW5kUG9pbnQiLCJ0b29sdGlwU2l6ZSIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxUZXh0Q29sb3JzIiwiX2V2ZW50UG9zaXRpb24iLCJnZXRMYWJlbEZvckluZGV4IiwiaXRlbVNvcnQiLCJkYXRhUG9pbnRzIiwibGYiLCJyZiIsIm9sZiIsIm9yZiIsInlmIiwibWlkWCIsIm1pZFkiLCJkZXRlcm1pbmVBbGlnbm1lbnQiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0bXAiLCJkcmF3VGl0bGUiLCJydGxIZWxwZXIiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsVGV4dCIsImRyYXdCb2R5IiwiZmlsbExpbmVPZlRleHQiLCJ4TGluZVBhZGRpbmciLCJ0ZXh0Q29sb3IiLCJkcmF3Q29sb3JCb3hlcyIsImNvbG9yWCIsImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwicnRsQ29sb3JYIiwic3Ryb2tlUmVjdCIsImRyYXdGb290ZXIiLCJkcmF3QmFja2dyb3VuZCIsInF1YWRyYXRpY0N1cnZlVG8iLCJoYXNUb29sdGlwQ29udGVudCIsImdsb2JhbEFscGhhIiwiaGFuZGxlRXZlbnQiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwicG9zaXRpb25lcnNfMSIsImNvcmVfdG9vbHRpcCIsInZhbHVlT3JEZWZhdWx0JDkiLCJtZXJnZVNjYWxlQ29uZmlnIiwic2xlbiIsIm1lcmdlQ29uZmlnIiwibmV4dEF2YWlsYWJsZVNjYWxlSWQiLCJheGVzT3B0cyIsInByZWZpeCIsImhhc0lkIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJsMiIsImV2ZW50cyIsIm9uSG92ZXIiLCJhbmltYXRpb25EdXJhdGlvbiIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlQW5pbWF0aW9uRHVyYXRpb24iLCJjb25zdHJ1Y3QiLCJfYnVmZmVyZWRSZW5kZXIiLCJpbnN0YW5jZXMiLCJyZXRpbmFTY2FsZSIsImRldmljZVBpeGVsUmF0aW8iLCJiaW5kRXZlbnRzIiwicmVzaXplIiwiaW5pdFRvb2xUaXAiLCJzdG9wIiwic2lsZW50IiwiZ2V0TWF4aW11bVdpZHRoIiwiZ2V0TWF4aW11bUhlaWdodCIsIm5ld1NpemUiLCJvblJlc2l6ZSIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJzY2FsZXNPcHRpb25zIiwic2NhbGVPcHRpb25zIiwieEF4aXNPcHRpb25zIiwieUF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInVwZGF0ZWQiLCJkdHlwZSIsImRwb3NpdGlvbiIsImlzRGVmYXVsdCIsInNjYWxlVHlwZSIsInNjYWxlQ2xhc3MiLCJtZXJnZVRpY2tzT3B0aW9ucyIsImhhc1VwZGF0ZWQiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsImRlc3Ryb3lEYXRhc2V0TWV0YSIsIm9yZGVyIiwiQ29udHJvbGxlckNsYXNzIiwicmVzZXRFbGVtZW50cyIsIm5ld09wdGlvbnMiLCJ1cGRhdGVMYXlvdXQiLCJ1cGRhdGVEYXRhc2V0cyIsImxhc3RBY3RpdmUiLCJfYnVmZmVyZWRSZXF1ZXN0IiwiX2lkeCIsInVwZGF0ZURhdGFzZXQiLCJhbmltYXRpb25PcHRpb25zIiwiYW5pbWF0aW9uT2JqZWN0IiwiZWFzaW5nRnVuY3Rpb24iLCJzdGVwRGVjaW1hbCIsImxheWVycyIsImRyYXdEYXRhc2V0cyIsIl9kcmF3VG9vbHRpcCIsIl9nZXRTb3J0ZWREYXRhc2V0TWV0YXMiLCJmaWx0ZXJWaXNpYmxlIiwiZHJhd0RhdGFzZXQiLCJnZXRFbGVtZW50QXRFdmVudCIsImdldEVsZW1lbnRzQXRFdmVudCIsImdldEVsZW1lbnRzQXRYQXhpcyIsImdldERhdGFzZXRBdEV2ZW50IiwiX21ldGEiLCJnZW5lcmF0ZUxlZ2VuZCIsInVuYmluZEV2ZW50cyIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJfY2hhcnRJbnN0YW5jZSIsIl9saXN0ZW5lcnMiLCJldmVudEhhbmRsZXIiLCJ1cGRhdGVIb3ZlclN0eWxlIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY29yZV9jb250cm9sbGVyIiwiQ29udHJvbGxlciIsInR5cGVzIiwiY29uZmlnTWVyZ2UiLCJzY2FsZU1lcmdlIiwiYWJzdHJhY3QiLCJEYXRlQWRhcHRlciIsImZvcm1hdHMiLCJwYXJzZSIsImZvcm1hdCIsInN0YXJ0T2YiLCJlbmRPZiIsIl9jcmVhdGUiLCJvdmVycmlkZSIsIm1lbWJlcnMiLCJjb3JlX2FkYXB0ZXJzIiwiX2RhdGUiLCJjb3JlX3RpY2tzIiwiZm9ybWF0dGVycyIsInRpY2tWYWx1ZSIsImxvZ0RlbHRhIiwidGlja1N0cmluZyIsImxvZ1RpY2siLCJudW1FeHBvbmVudGlhbCIsInRvRXhwb25lbnRpYWwiLCJudW1EZWNpbWFsIiwidG9GaXhlZCIsImxvZ2FyaXRobWljIiwicmVtYWluIiwidmFsdWVPckRlZmF1bHQkYSIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiY29tcHV0ZUxhYmVsU2l6ZXMiLCJ0aWNrRm9udHMiLCJjYWNoZXMiLCJ0aWNrRm9udCIsIm5lc3RlZExhYmVsIiwid2lkZXN0IiwiaGlnaGVzdCIsIndpZHRocyIsImhlaWdodHMiLCJvZmZzZXRzIiwibWFqb3IiLCJtaW5vciIsImdjIiwidmFsdWVBdCIsImdjTGVuIiwiZmlyc3QiLCJnZXRUaWNrTWFya0xlbmd0aCIsImRyYXdUaWNrcyIsInRpY2tNYXJrTGVuZ3RoIiwiZ2V0U2NhbGVMYWJlbEhlaWdodCIsInBhcnNlRm9udE9wdGlvbnMiLCJuZXN0ZWRPcHRzIiwiZm9udENvbG9yIiwicGFyc2VUaWNrRm9udE9wdGlvbnMiLCJub25Ta2lwcGVkIiwidGlja3NUb0ZpbHRlciIsImZpbHRlcmVkIiwiY2FsY3VsYXRlU3BhY2luZyIsIm1ham9ySW5kaWNlcyIsImF4aXNMZW5ndGgiLCJ0aWNrc0xpbWl0IiwiZmFjdG9ycyIsImZhY3RvciIsImV2ZW5NYWpvclNwYWNpbmciLCJhcnIiLCJnZXRFdmVuU3BhY2luZyIsInNwYWNpbmciLCJtYWpvclN0YXJ0IiwibWFqb3JFbmQiLCJ0aWNrIiwiY2VpbCIsImRyYXdPbkNoYXJ0QXJlYSIsInplcm9MaW5lV2lkdGgiLCJ6ZXJvTGluZUNvbG9yIiwiemVyb0xpbmVCb3JkZXJEYXNoIiwiemVyb0xpbmVCb3JkZXJEYXNoT2Zmc2V0Iiwic2NhbGVMYWJlbCIsImxhYmVsU3RyaW5nIiwibWluUm90YXRpb24iLCJtYXhSb3RhdGlvbiIsIm1pcnJvciIsImF1dG9Ta2lwIiwiYXV0b1NraXBQYWRkaW5nIiwibGFiZWxPZmZzZXQiLCJTY2FsZSIsInplcm9MaW5lSW5kZXgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwiX3RpY2tzIiwiX2dldExhYmVscyIsInhMYWJlbHMiLCJ5TGFiZWxzIiwiYmVmb3JlVXBkYXRlIiwibWFyZ2lucyIsInNhbXBsaW5nRW5hYmxlZCIsInNhbXBsZVNpemUiLCJfbGFiZWxTaXplcyIsIl9tYXhMYWJlbExpbmVzIiwibG9uZ2VzdExhYmVsV2lkdGgiLCJsb25nZXN0VGV4dENhY2hlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsImJlZm9yZVNldERpbWVuc2lvbnMiLCJzZXREaW1lbnNpb25zIiwiYWZ0ZXJTZXREaW1lbnNpb25zIiwiYmVmb3JlRGF0YUxpbWl0cyIsImRldGVybWluZURhdGFMaW1pdHMiLCJhZnRlckRhdGFMaW1pdHMiLCJiZWZvcmVCdWlsZFRpY2tzIiwiYnVpbGRUaWNrcyIsImFmdGVyQnVpbGRUaWNrcyIsIl9jb252ZXJ0VGlja3NUb0xhYmVscyIsIm51bUl0ZW1zIiwiaW5jcmVtZW50Iiwic2FtcGxlIiwiYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uIiwiY2FsY3VsYXRlVGlja1JvdGF0aW9uIiwiYWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb24iLCJiZWZvcmVGaXQiLCJmaXQiLCJhZnRlckZpdCIsIl90aWNrc1RvRHJhdyIsIl9hdXRvU2tpcCIsImFmdGVyVXBkYXRlIiwic3RhcnRQaXhlbCIsImVuZFBpeGVsIiwicmV2ZXJzZVBpeGVscyIsIl9yZXZlcnNlUGl4ZWxzIiwiYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uIiwiY29udmVydFRpY2tzVG9MYWJlbHMiLCJ1c2VyQ2FsbGJhY2siLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImxhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwibWF4TGFiZWxIZWlnaHQiLCJ0aWNrV2lkdGgiLCJtYXhMYWJlbERpYWdvbmFsIiwibnVtVGlja3MiLCJsYWJlbFJvdGF0aW9uIiwiX2lzVmlzaWJsZSIsIl9nZXRMYWJlbFNpemVzIiwidG9EZWdyZWVzIiwic2NhbGVMYWJlbE9wdHMiLCJncmlkTGluZU9wdHMiLCJpc0JvdHRvbSIsImZpcnN0TGFiZWxTaXplIiwibGFzdExhYmVsU2l6ZSIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJsaW5lU3BhY2UiLCJ0aWNrUGFkZGluZyIsImlzUm90YXRlZCIsImFuZ2xlUmFkaWFucyIsInRvUmFkaWFucyIsImNvc1JvdGF0aW9uIiwic2luUm90YXRpb24iLCJsYWJlbEhlaWdodCIsIm9mZnNldExlZnQiLCJvZmZzZXRSaWdodCIsImxhYmVsV2lkdGgiLCJoYW5kbGVNYXJnaW5zIiwiaXNGdWxsV2lkdGgiLCJyYXdWYWx1ZSIsIl9nZXRTY2FsZUxhYmVsIiwiZ2V0VmFsdWVGb3JQaXhlbCIsImRlY2ltYWwiLCJnZXREZWNpbWFsRm9yUGl4ZWwiLCJwaXhlbCIsImdldEJhc2VWYWx1ZSIsImF2Z01ham9yU3BhY2luZyIsIm1heFRpY2tzTGltaXQiLCJfdGlja1NpemUiLCJnZXRNYWpvckluZGljZXMiLCJudW1NYWpvckluZGljZXMiLCJza2lwTWFqb3JzIiwib3B0aW9uVGlja3MiLCJyb3QiLCJfY29tcHV0ZUdyaWRMaW5lSXRlbXMiLCJhbGlnbkJvcmRlclZhbHVlIiwiYWxpZ25QaXhlbCIsImF4aXNXaWR0aCIsImJvcmRlclZhbHVlIiwiYWxpZ25lZExpbmVWYWx1ZSIsInR4MSIsInR5MSIsInR4MiIsInR5MiIsImxpbmVDb2xvciIsInRpY2tzTGVuZ3RoIiwidGwiLCJheGlzSGFsZldpZHRoIiwiX2FsaWduUGl4ZWwiLCJfY29tcHV0ZUxhYmVsSXRlbXMiLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiaXNNaXJyb3JlZCIsImZvbnRzIiwiX2RyYXdHcmlkIiwiZmlyc3RMaW5lV2lkdGgiLCJsYXN0TGluZVdpZHRoIiwiX2RyYXdMYWJlbHMiLCJfZHJhd1RpdGxlIiwic2NhbGVMYWJlbFgiLCJzY2FsZUxhYmVsWSIsInNjYWxlTGFiZWxGb250Q29sb3IiLCJzY2FsZUxhYmVsRm9udCIsInNjYWxlTGFiZWxQYWRkaW5nIiwiaGFsZkxpbmVIZWlnaHQiLCJpc0xlZnQiLCJ0eiIsImd6IiwiX2RyYXciLCJjb3JlX3NjYWxlIiwiaXNOdWxsT3JVbmRlZiQxIiwic2NhbGVfY2F0ZWdvcnkiLCJ0aWNrc09wdHMiLCJtaW5JbmRleCIsIm1heEluZGV4IiwiX3N0YXJ0VmFsdWUiLCJfdmFsdWVSYW5nZSIsInZhbHVlQ2F0ZWdvcnkiLCJfZGVmYXVsdHMiLCJpc051bGxPclVuZGVmJDIiLCJzY2FsZV9saW5lYXJiYXNlIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsIm1pblNpZ24iLCJzaWduIiwibWF4U2lnbiIsInNldE1pbiIsInN1Z2dlc3RlZE1pbiIsInNldE1heCIsInN1Z2dlc3RlZE1heCIsImdldFRpY2tMaW1pdCIsIm1heFRpY2tzIiwic3RlcFNpemUiLCJfY29tcHV0ZVRpY2tMaW1pdCIsImhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlcyIsIm51bWVyaWNHZW5lcmF0b3JPcHRpb25zIiwicHJlY2lzaW9uIiwiZml4ZWRTdGVwU2l6ZSIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwibmljZU1pbiIsIm5pY2VNYXgiLCJudW1TcGFjZXMiLCJ1bml0IiwibWF4TnVtU3BhY2VzIiwicm1pbiIsInJtYXgiLCJuaWNlTnVtIiwiX2RlY2ltYWxQbGFjZXMiLCJhbG1vc3RXaG9sZSIsImFsbW9zdEVxdWFscyIsImdlbmVyYXRlVGlja3MiLCJ0aWNrc0FzTnVtYmVycyIsIl9lbmRWYWx1ZSIsImRlZmF1bHRDb25maWckMSIsInN0YWNrRGF0YSIsIm5lZyIsInJlbGF0aXZlUG9pbnRzIiwidXBkYXRlTWluTWF4Iiwic2NhbGVfbGluZWFyIiwiaGFzU3RhY2tzIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJzdGFja1ZhbHVlcyIsIl9kZWZhdWx0cyQxIiwidmFsdWVPckRlZmF1bHQkYiIsImRlZmF1bHRDb25maWckMiIsIm5vbk5lZ2F0aXZlT3JEZWZhdWx0Iiwic2NhbGVfbG9nYXJpdGhtaWMiLCJJRE1hdGNoZXMiLCJtaW5Ob3RaZXJvIiwidmFsdWVzUGVyU3RhY2siLCJ2YWx1ZXNGb3JUeXBlIiwibWluVmFsIiwibWF4VmFsIiwiZXhwIiwic2lnbmlmaWNhbmQiLCJ0aWNrVmFsIiwiZW5kRXhwIiwiZW5kU2lnbmlmaWNhbmQiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MkMSIsInRpY2tWYWx1ZXMiLCJfZ2V0Rmlyc3RUaWNrVmFsdWUiLCJfdmFsdWVPZmZzZXQiLCJfZGVmYXVsdHMkMiIsInZhbHVlT3JEZWZhdWx0JGMiLCJ2YWx1ZUF0SW5kZXhPckRlZmF1bHQkMSIsInJlc29sdmUkNCIsImRlZmF1bHRDb25maWckMyIsImFuaW1hdGUiLCJzaG93TGFiZWxCYWNrZHJvcCIsImJhY2tkcm9wQ29sb3IiLCJiYWNrZHJvcFBhZGRpbmdZIiwiYmFja2Ryb3BQYWRkaW5nWCIsImdldFRpY2tCYWNrZHJvcEhlaWdodCIsImRldGVybWluZUxpbWl0cyIsIm51bWJlck9yWmVybyIsInBhcmFtIiwic2NhbGVfcmFkaWFsTGluZWFyIiwiZHJhd2luZ0FyZWEiLCJ0ZXh0U2l6ZSIsInBsRm9udCIsImZ1cnRoZXN0TGltaXRzIiwiZnVydGhlc3RBbmdsZXMiLCJfcG9pbnRMYWJlbFNpemVzIiwidmFsdWVDb3VudCIsImdldFBvaW50UG9zaXRpb24iLCJsb25nZXN0VGV4dCIsImdldEluZGV4QW5nbGUiLCJoTGltaXRzIiwidkxpbWl0cyIsInNldFJlZHVjdGlvbnMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJzZXRDZW50ZXJQb2ludCIsImxhcmdlc3RQb3NzaWJsZVJhZGl1cyIsInJhZGl1c1JlZHVjdGlvbkxlZnQiLCJyYWRpdXNSZWR1Y3Rpb25SaWdodCIsInJhZGl1c1JlZHVjdGlvblRvcCIsInJhZGl1c1JlZHVjdGlvbkJvdHRvbSIsImxlZnRNb3ZlbWVudCIsInJpZ2h0TW92ZW1lbnQiLCJ0b3BNb3ZlbWVudCIsImJvdHRvbU1vdmVtZW50IiwibWF4UmlnaHQiLCJtYXhMZWZ0IiwibWF4VG9wIiwibWF4Qm90dG9tIiwic2NhbGluZ0ZhY3RvciIsImRpc3RhbmNlRnJvbUNlbnRlciIsInRoaXNBbmdsZSIsImdldEJhc2VQb3NpdGlvbiIsImFuZ2xlTGluZU9wdHMiLCJwb2ludExhYmVsT3B0cyIsInRpY2tCYWNrZHJvcEhlaWdodCIsIm91dGVyRGlzdGFuY2UiLCJleHRyYSIsInBvaW50TGFiZWxQb3NpdGlvbiIsInBvaW50TGFiZWxGb250Q29sb3IiLCJkcmF3UG9pbnRMYWJlbHMiLCJkcmF3UmFkaXVzTGluZSIsInRpY2tGb250Q29sb3IiLCJfZGVmYXVsdHMkMyIsImRlcHJlY2F0ZWQkMSIsInJlc29sdmUkNSIsInZhbHVlT3JEZWZhdWx0JGQiLCJNSU5fSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJNQVhfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInN0ZXBzIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInF1YXJ0ZXIiLCJ5ZWFyIiwiVU5JVFMiLCJzb3J0ZXIiLCJnZXRNaW4iLCJ0aW1lIiwiZ2V0TWF4IiwiaW50ZXJwb2xhdGUkMSIsInRhYmxlIiwic2tleSIsInRrZXkiLCJtaWQiLCJpMCIsImkxIiwibG8iLCJsb29rdXAiLCJzcGFuIiwidG9UaW1lc3RhbXAiLCJpbnB1dCIsImFkYXB0ZXIiLCJfYWRhcHRlciIsInBhcnNlciIsImRldGVybWluZVVuaXRGb3JBdXRvVGlja3MiLCJtaW5Vbml0IiwiY2FwYWNpdHkiLCJpbnRlcnZhbCIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwic2NhbGVfdGltZSIsImFkYXB0ZXJzIiwiZGF0ZSIsImRpc3BsYXlGb3JtYXRzIiwidGltZXN0YW1wIiwibGFiZWxzQWRkZWQiLCJ0aW1lc3RhbXBzIiwiZGF0YUxhYmVscyIsImhhc2giLCJvdXQiLCJhcnJheVVuaXF1ZSIsIl90YWJsZSIsIl90aW1lc3RhbXBzIiwidGltZU9wdHMiLCJnZXRMYWJlbENhcGFjaXR5IiwiZGlzdHJpYnV0aW9uIiwidW5pdFN0ZXBTaXplIiwid2Vla2RheSIsImlzb1dlZWtkYXkiLCJnZW5lcmF0ZSIsIl91bml0IiwiZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmciLCJfbWFqb3JVbml0IiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiYnVpbGRMb29rdXBUYWJsZSIsIl9vZmZzZXRzIiwidG9vbHRpcEZvcm1hdCIsImRhdGV0aW1lIiwidGlja0Zvcm1hdEZ1bmN0aW9uIiwibWlub3JGb3JtYXQiLCJtYWpvckZvcm1hdCIsIm5lc3RlZFRpY2tPcHRzIiwiZm9ybWF0dGVyIiwiZ2V0UGl4ZWxGb3JPZmZzZXQiLCJfZ2V0TGFiZWxTaXplIiwidGlja0xhYmVsV2lkdGgiLCJ0aWNrRm9udFNpemUiLCJnZXRMYWJlbFdpZHRoIiwiZXhhbXBsZVRpbWUiLCJleGFtcGxlTGFiZWwiLCJfZGVmYXVsdHMkNCIsImRpc3BsYXlGb3JtYXQiLCJjYXRlZ29yeSIsInJhZGlhbExpbmVhciIsIkZPUk1BVFMiLCJfaWQiLCJ2YWx1ZU9mIiwiYW1vdW50IiwiZmlsbGVyIiwicHJvcGFnYXRlIiwibWFwcGVycyIsImJvdW5kYXJ5IiwiZGVjb2RlRmlsbCIsImNvbXB1dGVCb3VuZGFyeSIsImN4IiwiY3kiLCJzY2FsZUJvdHRvbSIsInNjYWxlVG9wIiwic2NhbGVaZXJvIiwicmVzb2x2ZVRhcmdldCIsInZpc2l0ZWQiLCJ2aXNpYmxlIiwiaXNEcmF3YWJsZSIsImRyYXdBcmVhIiwiY3VydmUwIiwiY3VydmUxIiwibGVuMCIsImxlbjEiLCJkb0ZpbGwiLCJtYXBwZXIiLCJsb29wIiwicDAiLCJwMSIsImQwIiwiZDEiLCJsb29wT2Zmc2V0IiwicGx1Z2luX2ZpbGxlciIsImFmdGVyRGF0YXNldHNVcGRhdGUiLCIkZmlsbGVyIiwiYmVmb3JlRGF0YXNldHNEcmF3IiwiZ2V0UnRsSGVscGVyJDEiLCJub29wJDEiLCJ2YWx1ZU9yRGVmYXVsdCRlIiwiZ2V0Qm94V2lkdGgiLCJsYWJlbE9wdHMiLCJ1c2VQb2ludFN0eWxlIiwiYm94V2lkdGgiLCJjaSIsIm9uTGVhdmUiLCJsaW5lRGFzaCIsIkxlZ2VuZCIsImxlZ2VuZEhpdEJveGVzIiwiX2hvdmVyZWRJdGVtIiwiZG91Z2hudXRNb2RlIiwiYmVmb3JlQnVpbGRMYWJlbHMiLCJidWlsZExhYmVscyIsImFmdGVyQnVpbGRMYWJlbHMiLCJsZWdlbmRJdGVtcyIsImxhYmVsRm9udCIsImhpdGJveGVzIiwibGluZVdpZHRocyIsInRvdGFsSGVpZ2h0IiwidlBhZGRpbmciLCJjb2x1bW5XaWR0aHMiLCJjb2x1bW5IZWlnaHRzIiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJsaW5lRGVmYXVsdCIsImxlZ2VuZEhlaWdodCIsImxlZ2VuZFdpZHRoIiwiY3Vyc29yIiwiYWxpZ25tZW50T2Zmc2V0IiwiZGltZW5zaW9uIiwiYmxvY2tTaXplIiwiaXRlbUhlaWdodCIsInRleHRXaWR0aCIsImhhbGZGb250U2l6ZSIsInhMZWZ0IiwieU1pZGRsZSIsInJlYWxYIiwiU1FSVDIiLCJkcmF3TGVnZW5kQm94IiwiX2dldExlZ2VuZEl0ZW1BdCIsImhpdEJveCIsImxoIiwiaG92ZXJlZEl0ZW0iLCJjcmVhdGVOZXdMZWdlbmRBbmRBdHRhY2giLCJsZWdlbmRPcHRzIiwicGx1Z2luX2xlZ2VuZCIsIl9lbGVtZW50IiwiYmVmb3JlSW5pdCIsImFmdGVyRXZlbnQiLCJub29wJDIiLCJUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsImZvbnRPcHRzIiwiY3JlYXRlTmV3VGl0bGVCbG9ja0FuZEF0dGFjaCIsInRpdGxlT3B0cyIsInRpdGxlQmxvY2siLCJwYXJzZU1heFN0eWxlIiwic3R5bGVWYWx1ZSIsInBhcmVudFByb3BlcnR5IiwidmFsdWVJblBpeGVscyIsImlzQ29uc3RyYWluZWRWYWx1ZSIsImdldENvbnN0cmFpbnREaW1lbnNpb24iLCJkb21Ob2RlIiwibWF4U3R5bGUiLCJwZXJjZW50YWdlUHJvcGVydHkiLCJkZWZhdWx0VmlldyIsIl9nZXRQYXJlbnROb2RlIiwiY29uc3RyYWluZWROb2RlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbnN0cmFpbmVkQ29udGFpbmVyIiwiaGFzQ05vZGUiLCJoYXNDQ29udGFpbmVyIiwiaW5maW5pdHkiLCJjb2xsZWN0aW9uIiwiZmlsdGVyQ2FsbGJhY2siLCJmaW5kTmV4dFdoZXJlIiwiYXJyYXlUb1NlYXJjaCIsInN0YXJ0SW5kZXgiLCJjdXJyZW50SXRlbSIsImZpbmRQcmV2aW91c1doZXJlIiwiZXBzaWxvbiIsInJvdW5kZWQiLCJyYWRpYW5zIiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJhbGlhc1BpeGVsIiwicGl4ZWxXaWR0aCIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiaGFsZldpZHRoIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsImQwMSIsImQxMiIsInMwMSIsInMxMiIsImZhIiwiZmIiLCJFUFNJTE9OIiwicG9pbnRCZWZvcmUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwiYWxwaGFLIiwiYmV0YUsiLCJ0YXVLIiwic3F1YXJlZE1hZ25pdHVkZSIsInBvaW50c1dpdGhUYW5nZW50cyIsImRlbHRhSyIsIm1LIiwicG9pbnRzTGVuIiwic2xvcGVEZWx0YVgiLCJmcmFjdGlvbiIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJldnQiLCJvcmlnaW5hbEV2ZW50Iiwic3JjRWxlbWVudCIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsImdldENvbnN0cmFpbnRXaWR0aCIsImdldENvbnN0cmFpbnRIZWlnaHQiLCJfY2FsY3VsYXRlUGFkZGluZyIsInBhcmVudERpbWVuc2lvbiIsImN3IiwiY2xpZW50SGVpZ2h0IiwiY2giLCJjdXJyZW50U3R5bGUiLCJmb3JjZVJhdGlvIiwicGl4ZWxSYXRpbyIsInBpeGVsU2l6ZSIsImFycmF5T2ZUaGluZ3MiLCJnYXJiYWdlQ29sbGVjdCIsInRoaW5nIiwibmVzdGVkVGhpbmciLCJsb25nZXN0IiwibnVtYmVyT2ZMYWJlbExpbmVzIiwibnVtYmVyT2ZMaW5lcyIsIkNhbnZhc0dyYWRpZW50IiwiY29sb3JWYWx1ZSIsIkNhbnZhc1BhdHRlcm4iLCJfYWRhcHRlcnMiLCJBbmltYXRpb24iLCJhbmltYXRpb25TZXJ2aWNlIiwiSW50ZXJhY3Rpb24iLCJzY2FsZVNlcnZpY2UiLCJUaWNrcyIsIlRvb2x0aXAiLCJwbHVnaW5TZXJ2aWNlIiwiUGx1Z2luQmFzZSIsImNhbnZhc0hlbHBlcnMiLCJsYXlvdXRTZXJ2aWNlIiwiTGluZWFyU2NhbGVCYXNlIiwia2xhc3MiLCJjZmciLCJ0b0xvd2VyQ2FzZSIsIkdsaWRlIiwic3RhcnRBdCIsInBlclZpZXciLCJmb2N1c0F0IiwiZ2FwIiwiYXV0b3BsYXkiLCJob3ZlcnBhdXNlIiwia2V5Ym9hcmQiLCJib3VuZCIsInN3aXBlVGhyZXNob2xkIiwiZHJhZ1RocmVzaG9sZCIsInBlclRvdWNoIiwidG91Y2hSYXRpbyIsInRvdWNoQW5nbGUiLCJyZXdpbmQiLCJyZXdpbmREdXJhdGlvbiIsImFuaW1hdGlvblRpbWluZ0Z1bmMiLCJ0aHJvdHRsZSIsInBlZWsiLCJicmVha3BvaW50cyIsImNsYXNzZXMiLCJsdHIiLCJzbGlkZXIiLCJjYXJvdXNlbCIsInN3aXBlYWJsZSIsImRyYWdnaW5nIiwiY2xvbmVTbGlkZSIsImFjdGl2ZU5hdiIsImFjdGl2ZVNsaWRlIiwiZGlzYWJsZWRBcnJvdyIsIm1zZyIsImNsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiZGVmaW5lUHJvcGVydGllcyIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJ0b0ludCIsImlzU3RyaW5nIiwiaXNGdW5jdGlvbiIsImlzVW5kZWZpbmVkIiwiZGVmaW5pdGlvbiIsIm1lcmdlT3B0aW9ucyIsInNldHRpbmdzIiwiRXZlbnRzQnVzIiwib24iLCJob3AiLCJlbWl0IiwiX2UiLCJfYyIsImdsaWRlIiwiY29tcG9uZW50cyIsIl9uYW1lIiwibW91bnQiLCJ0cmFuc2Zvcm1lcnMiLCJfdCIsInBhdHRlcm4iLCJSdW4iLCJtYWtlIiwiVHJhbnNpdGlvbiIsImRpc2FibGUiLCJNb3ZlIiwiZGlzYWJsZWQiLCJfbyIsIm8iLCJfaSIsIl9kIiwic3RhdHVzIiwic2VsZWN0b3IiLCJnZXRUaW1lIiwiZnVuYyIsIndhaXQiLCJ0aW1lb3V0IiwibGF0ZXIiLCJsZWFkaW5nIiwidGhyb3R0bGVkIiwiYXQiLCJyZW1haW5pbmciLCJjbGVhclRpbWVvdXQiLCJ0cmFpbGluZyIsImNhbmNlbCIsIk1BUkdJTl9UWVBFIiwic2libGluZ3MiLCJtYXRjaGVkIiwibmV4dFNpYmxpbmciLCJub2RlVHlwZSIsImV4aXN0IiwiSFRNTEVsZW1lbnQiLCJUUkFDS19TRUxFQ1RPUiIsIkV2ZW50c0JpbmRlciIsImNsb3N1cmUiLCJjYXB0dXJlIiwiVkFMSURfRElSRUNUSU9OUyIsIkZMSVBFRF9NT1ZFTUVOVFMiLCI+IiwiPCIsIj0iLCJSdGwiLCJDb21wb25lbnRzIiwibW9kaWZ5IiwiRGlyZWN0aW9uIiwiaXMiLCJtdXRhdG9yIiwiRXZlbnRzIiwiVFJBTlNGT1JNRVJTIiwiR2FwcyIsIkNsb25lcyIsImdyb3ciLCJQZWVrIiwiU2l6ZXMiLCJzbGlkZVdpZHRoIiwibXV0YXRlIiwidHJhbnNmb3JtZXIiLCJzdXBwb3J0c1Bhc3NpdmUiLCJzdXBwb3J0c1Bhc3NpdmUkMSIsIlNUQVJUX0VWRU5UUyIsIk1PVkVfRVZFTlRTIiwiRU5EX0VWRU5UUyIsIk1PVVNFX0VWRU5UUyIsInNvcnRCcmVha3BvaW50cyIsIkNPTVBPTkVOVFMiLCJIdG1sIiwidHJhY2siLCJxdWVyeVNlbGVjdG9yIiwic2xpZGVzIiwid3JhcHBlciIsImNoaWxkcmVuIiwic2xpZGUiLCJjb250YWlucyIsIl9yIiwiVHJhbnNsYXRlIiwidHJhbnNmb3JtIiwiaXNUeXBlIiwiaXNPZmZzZXQiLCJtb3ZlbWVudCIsImNvbXBvc2UiLCJlbmFibGUiLCJ0b2tlbiIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJfdiIsInNldHVwU2xpZGVzIiwic2V0dXBXcmFwcGVyIiwid3JhcHBlclNpemUiLCJvZmZzZXRXaWR0aCIsInJlZHVjdG9yIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiX3RoaXMiLCJjb2xsZWN0IiwiX0dsaWRlJHNldHRpbmdzIiwicGFydCIsImNsb25lTm9kZSIsIl9jbG9uZSIsImFwcGVuZCIsIl9Db21wb25lbnRzJEh0bWwiLCJwcmVwZW5kIiwiX2kyIiwiX2kzIiwiUmVzaXplIiwiQmluZGVyIiwidW5iaW5kIiwib2ZmIiwiQnVpbGQiLCJ0eXBlQ2xhc3MiLCJhY3RpdmVDbGFzcyIsInNpYmxpbmciLCJyZW1vdmVDbGFzc2VzIiwibW92ZSIsImNhbGN1bGF0ZSIsImlzU3RhcnQiLCJpc0VuZCIsImNvdW50YWJsZVN0ZXBzIiwiX20iLCJzdGVwIiwiU3dpcGUiLCJzd2lwZVNpbiIsInN3aXBlU3RhcnRYIiwic3dpcGVTdGFydFkiLCJiaW5kU3dpcGVTdGFydCIsInN3aXBlIiwicGFnZVgiLCJwYWdlWSIsImJpbmRTd2lwZU1vdmUiLCJiaW5kU3dpcGVFbmQiLCJzdWJFeFN4Iiwic3ViRXlTeSIsInBvd0VYIiwicG93RVkiLCJzd2lwZUh5cG90ZW51c2UiLCJzd2lwZUNhdGhldHVzIiwic3RvcFByb3BhZ2F0aW9uIiwidGhyZXNob2xkIiwic3dpcGVEaXN0YW5jZSIsInN3aXBlRGVnIiwidW5iaW5kU3dpcGVNb3ZlIiwidW5iaW5kU3dpcGVFbmQiLCJ1bmJpbmRTd2lwZVN0YXJ0IiwiX3RoaXMyIiwiX3RoaXMzIiwiY2hhbmdlZFRvdWNoZXMiLCJJbWFnZXMiLCJkcmFnc3RhcnQiLCJwcmV2ZW50RGVmYXVsdCIsIkFuY2hvcnMiLCJkZXRhY2hlZCIsInByZXZlbnRlZCIsIl9hIiwicXVlcnlTZWxlY3RvckFsbCIsImNsaWNrIiwiZGV0YWNoIiwiZHJhZ2dhYmxlIiwiYXR0YWNoIiwiQ29udHJvbHMiLCJfbiIsImFkZEJpbmRpbmdzIiwic2V0QWN0aXZlIiwicmVtb3ZlQWN0aXZlIiwiY29udHJvbHMiLCJyZW1vdmVCaW5kaW5ncyIsImN1cnJlbnRUYXJnZXQiLCJLZXlib2FyZCIsInByZXNzIiwia2V5Q29kZSIsIkF1dG9wbGF5Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiQnJlYWtwb2ludHMiLCJtYXRjaE1lZGlhIiwiR2xpZGUkJDEiLCJSZWZlcmVuY2VFcnJvciIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJnZXRQcm90b3R5cGVPZiIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsInNldFByb3RvdHlwZU9mIiwicmVjZWl2ZXIiLCJGdW5jdGlvbiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJjaGFydE9iamVjdCIsImNoYXJ0T2JqZWN0MSIsImNoYXJ0T2JqZWN0MiIsImNoYXJ0T2JqZWN0MyIsImNoYXJ0T2JqZWN0NCIsImNoYXJ0T2JqZWN0NSIsImNoYXJ0T2JqZWN0NiIsImNoYXJ0T2JqZWN0NyIsImNoYXJ0T2JqZWN0OCIsImNoYXJ0T2JqZWN0OSIsInJlZnJlc2hUaW1lIiwic2xpZGVUaW1lVGl0bGUiLCJyZXBvcnREYXlzRGlzcGxheSIsInJlcG9ydERheXMiLCJmdWxsU2NyZWVuT3BlbiIsImZ1bGxTY3JlZW5DbG9zZSIsInRoZW1lR3JpZGVMaW5lcyIsInRoZW1lRm9udENvbG91ciIsInRvZ2dsZVN3aXRjaCIsInRvZ2dsZVN3aXRjaElucHV0IiwiZ2V0RGF0YSIsInNoZWV0TmFtZSIsImRhdGVSYW5nZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25sb2FkIiwiSlNPTiIsInJlc3BvbnNlIiwiZGF0YXNldFRpdGxlIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCI1Iiwib3BlbiIsInNlbmQiLCJhZGRDaGFydCIsInBvaW50QmFja2dyb3VuZENvbG9yIiwicG9pbnRCb3JkZXJDb2xvciIsInBvaW50UmFkaXVzIiwiaW5uZXJIZWlnaHQiLCJ1cGRhdGVDaGFydCIsInVwZGF0ZUNoYXJ0Q29sb3VycyIsIm9wZW5GdWxsU2NyZWVuIiwiZWxlbSIsInJlcXVlc3RGdWxsc2NyZWVuIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJjbG9zZUZ1bGxTY3JlZW4iLCJleGl0RnVsbHNjcmVlbiIsInVwZGF0ZUFsbENoYXJ0cyIsImRvY3VtZW50RWxlbWVudCIsImNoZWNrZWQiXSwibWFwcGluZ3MiOiJDQU1BLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsb0JBQUFDLE9BQUFBLE9BQUFELFFBQUFELEVBQUEsV0FBQSxJQUFBLE9BQUFHLFFBQUEsVUFBQSxNQUFBQyxLQUFBLElBQ0EsbUJBQUFDLFFBQUFBLE9BQUFDLElBQUFELE9BQUEsQ0FBQSxXQUFBLFNBQUFGLEdBQUEsT0FBQUgsRUFBQSxXQUFBLElBQUEsT0FBQUcsRUFBQSxVQUFBLE1BQUFDLEtBQUEsT0FDQUwsRUFBQUEsR0FBQVEsTUFBQUMsTUFBQVIsRUFBQUQsRUFBQVUsUUFIQSxDQUlBQyxLQUFBLFNBQUFELEdBQUEsYUFFQUEsRUFBQUEsR0FBQUEsRUFBQUUsZUFBQSxXQUFBRixFQUFBLFFBQUFBLEVBVUEsSUFSQVAsRUFRQVUsRUFBQSxDQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxFQUFBLEVBQUEsR0FDQUMsZUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsRUFBQSxFQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsZUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsS0FBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsRUFBQSxFQUFBLEtBQ0FDLFNBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxFQUFBLElBQUEsR0FDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxJQUFBLEVBQUEsS0FDQUMsZUFBQSxDQUFBLEdBQUEsSUFBQSxJQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFdBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsRUFBQSxHQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLEdBQUEsR0FBQSxLQUNBQyxjQUFBLENBQUEsR0FBQSxHQUFBLElBQ0FDLGNBQUEsQ0FBQSxHQUFBLEdBQUEsSUFDQUMsY0FBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLFNBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsWUFBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLEdBQUEsSUFBQSxJQUNBQyxRQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsRUFBQSxJQUFBLEdBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxPQUFBLENBQUEsR0FBQSxFQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxhQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLHFCQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxlQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsRUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxHQUFBLElBQUEsSUFDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxFQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLEVBQUEsR0FDQUMsaUJBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLEVBQUEsRUFBQSxLQUNBQyxhQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxnQkFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxrQkFBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxnQkFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxnQkFBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxhQUFBLENBQUEsR0FBQSxHQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLEVBQUEsRUFBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLEdBQUEsR0FDQUMsT0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLEVBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxJQUFBLENBQUEsSUFBQSxFQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxTQUFBLENBQUEsR0FBQSxJQUFBLElBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsSUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxVQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLE9BQUEs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QSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLEVBQUEsRUFBQSxHQUNBQyxlQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxFQUFBLEVBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxNQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxlQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsR0FBQSxJQUNBQyxLQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFNBQUEsQ0FBQSxFQUFBLEVBQUEsS0FDQUMsU0FBQSxDQUFBLEVBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLEVBQUEsSUFBQSxHQUNBQyxTQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLElBQUEsRUFBQSxLQUNBQyxlQUFBLENBQUEsR0FBQSxJQUFBLElBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsV0FBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxRQUFBLENBQUEsSUFBQSxFQUFBLEdBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsYUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsR0FBQSxHQUFBLEtBQ0FDLGNBQUEsQ0FBQSxHQUFBLEdBQUEsSUFDQUMsY0FBQSxDQUFBLEdBQUEsR0FBQSxJQUNBQyxjQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLEVBQUEsS0FDQUMsU0FBQSxDQUFBLElBQUEsR0FBQSxLQUNBQyxZQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsR0FBQSxJQUFBLElBQ0FDLFFBQUEsQ0FBQSxJQUFBLEVBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsQ0FBQSxFQUFBLElBQUEsR0FDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxJQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLE9BQUEsQ0FBQSxHQUFBLEVBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsY0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEdBQ0FDLGFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMscUJBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxHQUFBLElBQUEsS0FDQUMsYUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxlQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxFQUFBLElBQUEsR0FDQUMsVUFBQSxDQUFBLEdBQUEsSUFBQSxJQUNBQyxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLEVBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsRUFBQSxHQUNBQyxpQkFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsRUFBQSxFQUFBLEtBQ0FDLGFBQUEsQ0FBQSxJQUFBLEdBQUEsS0FDQUMsYUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxlQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLGdCQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGtCQUFBLENBQUEsRUFBQSxJQUFBLEtBQ0FDLGdCQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLGdCQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLGFBQUEsQ0FBQSxHQUFBLEdBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsRUFBQSxFQUFBLEtBQ0FDLFFBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxDQUFBLElBQUEsSUFBQSxHQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsR0FDQUMsVUFBQSxDQUFBLElBQUEsR0FBQSxHQUNBQyxPQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxJQUFBLElBQUEsSUFDQUMsS0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxDQUFBLElBQUEsRUFBQSxLQUNBQyxjQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLElBQUEsQ0FBQSxJQUFBLEVBQUEsR0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsR0FBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxJQUFBLEdBQUEsSUFDQUMsT0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLENBQUEsSUFBQSxJQUFBLElBQ0FDLFNBQUEsQ0FBQSxHQUFBLElBQUEsSUFDQUMsU0FBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxPQUFBLENBQUEsSUFBQSxHQUFBLElBQ0FDLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsUUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxVQUFBLENBQUEsSUFBQSxHQUFBLEtBQ0FDLFVBQUEsQ0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLElBQUEsSUFBQSxLQUNBQyxLQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsVUFBQSxDQUFBLEdBQUEsSUFBQSxLQUNBQyxJQUFBLENBQUEsSUFBQSxJQUFBLEtBQ0FDLEtBQUEsQ0FBQSxFQUFBLElBQUEsS0FDQUMsUUFBQSxDQUFB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LG1CQUFBMUMsY0FDQTBDLG1CQUFBekMsY0FDQXlDLG1CQUFBeEMsY0FDQXdDLG1CQUFBdkMsY0FDQXVDLG1CQUFBdEMsY0FDQXNDLG1CQUFBckMsY0FDQXFDLG1CQUFBcEMsY0FDQW9DLG1CQUFBbkMsY0FDQW1DLG1CQUFBbEMiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENoYXJ0LmpzIHYyLjkuM1xuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDE5IENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG50eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZnVuY3Rpb24oKSB7IHRyeSB7IHJldHVybiByZXF1aXJlKCdtb21lbnQnKTsgfSBjYXRjaChlKSB7IH0gfSgpKSA6XG50eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydyZXF1aXJlJ10sIGZ1bmN0aW9uKHJlcXVpcmUpIHsgcmV0dXJuIGZhY3RvcnkoZnVuY3Rpb24oKSB7IHRyeSB7IHJldHVybiByZXF1aXJlKCdtb21lbnQnKTsgfSBjYXRjaChlKSB7IH0gfSgpKTsgfSkgOlxuKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuQ2hhcnQgPSBmYWN0b3J5KGdsb2JhbC5tb21lbnQpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5tb21lbnQgPSBtb21lbnQgJiYgbW9tZW50Lmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBtb21lbnRbJ2RlZmF1bHQnXSA6IG1vbWVudDtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbmZ1bmN0aW9uIGdldENqc0V4cG9ydEZyb21OYW1lc3BhY2UgKG4pIHtcblx0cmV0dXJuIG4gJiYgblsnZGVmYXVsdCddIHx8IG47XG59XG5cbnZhciBjb2xvck5hbWUgPSB7XHJcblx0XCJhbGljZWJsdWVcIjogWzI0MCwgMjQ4LCAyNTVdLFxyXG5cdFwiYW50aXF1ZXdoaXRlXCI6IFsyNTAsIDIzNSwgMjE1XSxcclxuXHRcImFxdWFcIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImFxdWFtYXJpbmVcIjogWzEyNywgMjU1LCAyMTJdLFxyXG5cdFwiYXp1cmVcIjogWzI0MCwgMjU1LCAyNTVdLFxyXG5cdFwiYmVpZ2VcIjogWzI0NSwgMjQ1LCAyMjBdLFxyXG5cdFwiYmlzcXVlXCI6IFsyNTUsIDIyOCwgMTk2XSxcclxuXHRcImJsYWNrXCI6IFswLCAwLCAwXSxcclxuXHRcImJsYW5jaGVkYWxtb25kXCI6IFsyNTUsIDIzNSwgMjA1XSxcclxuXHRcImJsdWVcIjogWzAsIDAsIDI1NV0sXHJcblx0XCJibHVldmlvbGV0XCI6IFsxMzgsIDQzLCAyMjZdLFxyXG5cdFwiYnJvd25cIjogWzE2NSwgNDIsIDQyXSxcclxuXHRcImJ1cmx5d29vZFwiOiBbMjIyLCAxODQsIDEzNV0sXHJcblx0XCJjYWRldGJsdWVcIjogWzk1LCAxNTgsIDE2MF0sXHJcblx0XCJjaGFydHJldXNlXCI6IFsxMjcsIDI1NSwgMF0sXHJcblx0XCJjaG9jb2xhdGVcIjogWzIxMCwgMTA1LCAzMF0sXHJcblx0XCJjb3JhbFwiOiBbMjU1LCAxMjcsIDgwXSxcclxuXHRcImNvcm5mbG93ZXJibHVlXCI6IFsxMDAsIDE0OSwgMjM3XSxcclxuXHRcImNvcm5zaWxrXCI6IFsyNTUsIDI0OCwgMjIwXSxcclxuXHRcImNyaW1zb25cIjogWzIyMCwgMjAsIDYwXSxcclxuXHRcImN5YW5cIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImRhcmtibHVlXCI6IFswLCAwLCAxMzldLFxyXG5cdFwiZGFya2N5YW5cIjogWzAsIDEzOSwgMTM5XSxcclxuXHRcImRhcmtnb2xkZW5yb2RcIjogWzE4NCwgMTM0LCAxMV0sXHJcblx0XCJkYXJrZ3JheVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJrZ3JlZW5cIjogWzAsIDEwMCwgMF0sXHJcblx0XCJkYXJrZ3JleVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJra2hha2lcIjogWzE4OSwgMTgzLCAxMDddLFxyXG5cdFwiZGFya21hZ2VudGFcIjogWzEzOSwgMCwgMTM5XSxcclxuXHRcImRhcmtvbGl2ZWdyZWVuXCI6IFs4NSwgMTA3LCA0N10sXHJcblx0XCJkYXJrb3JhbmdlXCI6IFsyNTUsIDE0MCwgMF0sXHJcblx0XCJkYXJrb3JjaGlkXCI6IFsxNTMsIDUwLCAyMDRdLFxyXG5cdFwiZGFya3JlZFwiOiBbMTM5LCAwLCAwXSxcclxuXHRcImRhcmtzYWxtb25cIjogWzIzMywgMTUwLCAxMjJdLFxyXG5cdFwiZGFya3NlYWdyZWVuXCI6IFsxNDMsIDE4OCwgMTQzXSxcclxuXHRcImRhcmtzbGF0ZWJsdWVcIjogWzcyLCA2MSwgMTM5XSxcclxuXHRcImRhcmtzbGF0ZWdyYXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3NsYXRlZ3JleVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrdHVycXVvaXNlXCI6IFswLCAyMDYsIDIwOV0sXHJcblx0XCJkYXJrdmlvbGV0XCI6IFsxNDgsIDAsIDIxMV0sXHJcblx0XCJkZWVwcGlua1wiOiBbMjU1LCAyMCwgMTQ3XSxcclxuXHRcImRlZXBza3libHVlXCI6IFswLCAxOTEsIDI1NV0sXHJcblx0XCJkaW1ncmF5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRpbWdyZXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZG9kZ2VyYmx1ZVwiOiBbMzAsIDE0NCwgMjU1XSxcclxuXHRcImZpcmVicmlja1wiOiBbMTc4LCAzNCwgMzRdLFxyXG5cdFwiZmxvcmFsd2hpdGVcIjogWzI1NSwgMjUwLCAyNDBdLFxyXG5cdFwiZm9yZXN0Z3JlZW5cIjogWzM0LCAxMzksIDM0XSxcclxuXHRcImZ1Y2hzaWFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcImdhaW5zYm9yb1wiOiBbMjIwLCAyMjAsIDIyMF0sXHJcblx0XCJnaG9zdHdoaXRlXCI6IFsyNDgsIDI0OCwgMjU1XSxcclxuXHRcImdvbGRcIjogWzI1NSwgMjE1LCAwXSxcclxuXHRcImdvbGRlbnJvZFwiOiBbMjE4LCAxNjUsIDMyXSxcclxuXHRcImdyYXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiZ3JlZW5cIjogWzAsIDEyOCwgMF0sXHJcblx0XCJncmVlbnllbGxvd1wiOiBbMTczLCAyNTUsIDQ3XSxcclxuXHRcImdyZXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiaG9uZXlkZXdcIjogWzI0MCwgMjU1LCAyNDBdLFxyXG5cdFwiaG90cGlua1wiOiBbMjU1LCAxMDUsIDE4MF0sXHJcblx0XCJpbmRpYW5yZWRcIjogWzIwNSwgOTIsIDkyXSxcclxuXHRcImluZGlnb1wiOiBbNzUsIDAsIDEzMF0sXHJcblx0XCJpdm9yeVwiOiBbMjU1LCAyNTUsIDI0MF0sXHJcblx0XCJraGFraVwiOiBbMjQwLCAyMzAsIDE0MF0sXHJcblx0XCJsYXZlbmRlclwiOiBbMjMwLCAyMzAsIDI1MF0sXHJcblx0XCJsYXZlbmRlcmJsdXNoXCI6IFsyNTUsIDI0MCwgMjQ1XSxcclxuXHRcImxhd25ncmVlblwiOiBbMTI0LCAyNTIsIDBdLFxyXG5cdFwibGVtb25jaGlmZm9uXCI6IFsyNTUsIDI1MCwgMjA1XSxcclxuXHRcImxpZ2h0Ymx1ZVwiOiBbMTczLCAyMTYsIDIzMF0sXHJcblx0XCJsaWdodGNvcmFsXCI6IFsyNDAsIDEyOCwgMTI4XSxcclxuXHRcImxpZ2h0Y3lhblwiOiBbMjI0LCAyNTUsIDI1NV0sXHJcblx0XCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBbMjUwLCAyNTAsIDIxMF0sXHJcblx0XCJsaWdodGdyYXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRncmVlblwiOiBbMTQ0LCAyMzgsIDE0NF0sXHJcblx0XCJsaWdodGdyZXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRwaW5rXCI6IFsyNTUsIDE4MiwgMTkzXSxcclxuXHRcImxpZ2h0c2FsbW9uXCI6IFsyNTUsIDE2MCwgMTIyXSxcclxuXHRcImxpZ2h0c2VhZ3JlZW5cIjogWzMyLCAxNzgsIDE3MF0sXHJcblx0XCJsaWdodHNreWJsdWVcIjogWzEzNSwgMjA2LCAyNTBdLFxyXG5cdFwibGlnaHRzbGF0ZWdyYXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzbGF0ZWdyZXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzdGVlbGJsdWVcIjogWzE3NiwgMTk2LCAyMjJdLFxyXG5cdFwibGlnaHR5ZWxsb3dcIjogWzI1NSwgMjU1LCAyMjRdLFxyXG5cdFwibGltZVwiOiBbMCwgMjU1LCAwXSxcclxuXHRcImxpbWVncmVlblwiOiBbNTAsIDIwNSwgNTBdLFxyXG5cdFwibGluZW5cIjogWzI1MCwgMjQwLCAyMzBdLFxyXG5cdFwibWFnZW50YVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwibWFyb29uXCI6IFsxMjgsIDAsIDBdLFxyXG5cdFwibWVkaXVtYXF1YW1hcmluZVwiOiBbMTAyLCAyMDUsIDE3MF0sXHJcblx0XCJtZWRpdW1ibHVlXCI6IFswLCAwLCAyMDVdLFxyXG5cdFwibWVkaXVtb3JjaGlkXCI6IFsxODYsIDg1LCAyMTFdLFxyXG5cdFwibWVkaXVtcHVycGxlXCI6IFsxNDcsIDExMiwgMjE5XSxcclxuXHRcIm1lZGl1bXNlYWdyZWVuXCI6IFs2MCwgMTc5LCAxMTNdLFxyXG5cdFwibWVkaXVtc2xhdGVibHVlXCI6IFsxMjMsIDEwNCwgMjM4XSxcclxuXHRcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLCAyNTAsIDE1NF0sXHJcblx0XCJtZWRpdW10dXJxdW9pc2VcIjogWzcyLCAyMDksIDIwNF0sXHJcblx0XCJtZWRpdW12aW9sZXRyZWRcIjogWzE5OSwgMjEsIDEzM10sXHJcblx0XCJtaWRuaWdodGJsdWVcIjogWzI1LCAyNSwgMTEyXSxcclxuXHRcIm1pbnRjcmVhbVwiOiBbMjQ1LCAyNTUsIDI1MF0sXHJcblx0XCJtaXN0eXJvc2VcIjogWzI1NSwgMjI4LCAyMjVdLFxyXG5cdFwibW9jY2FzaW5cIjogWzI1NSwgMjI4LCAxODFdLFxyXG5cdFwibmF2YWpvd2hpdGVcIjogWzI1NSwgMjIyLCAxNzNdLFxyXG5cdFwibmF2eVwiOiBbMCwgMCwgMTI4XSxcclxuXHRcIm9sZGxhY2VcIjogWzI1MywgMjQ1LCAyMzBdLFxyXG5cdFwib2xpdmVcIjogWzEyOCwgMTI4LCAwXSxcclxuXHRcIm9saXZlZHJhYlwiOiBbMTA3LCAxNDIsIDM1XSxcclxuXHRcIm9yYW5nZVwiOiBbMjU1LCAxNjUsIDBdLFxyXG5cdFwib3JhbmdlcmVkXCI6IFsyNTUsIDY5LCAwXSxcclxuXHRcIm9yY2hpZFwiOiBbMjE4LCAxMTIsIDIxNF0sXHJcblx0XCJwYWxlZ29sZGVucm9kXCI6IFsyMzgsIDIzMiwgMTcwXSxcclxuXHRcInBhbGVncmVlblwiOiBbMTUyLCAyNTEsIDE1Ml0sXHJcblx0XCJwYWxldHVycXVvaXNlXCI6IFsxNzUsIDIzOCwgMjM4XSxcclxuXHRcInBhbGV2aW9sZXRyZWRcIjogWzIxOSwgMTEyLCAxNDddLFxyXG5cdFwicGFwYXlhd2hpcFwiOiBbMjU1LCAyMzksIDIxM10sXHJcblx0XCJwZWFjaHB1ZmZcIjogWzI1NSwgMjE4LCAxODVdLFxyXG5cdFwicGVydVwiOiBbMjA1LCAxMzMsIDYzXSxcclxuXHRcInBpbmtcIjogWzI1NSwgMTkyLCAyMDNdLFxyXG5cdFwicGx1bVwiOiBbMjIxLCAxNjAsIDIyMV0sXHJcblx0XCJwb3dkZXJibHVlXCI6IFsxNzYsIDIyNCwgMjMwXSxcclxuXHRcInB1cnBsZVwiOiBbMTI4LCAwLCAxMjhdLFxyXG5cdFwicmViZWNjYXB1cnBsZVwiOiBbMTAyLCA1MSwgMTUzXSxcclxuXHRcInJlZFwiOiBbMjU1LCAwLCAwXSxcclxuXHRcInJvc3licm93blwiOiBbMTg4LCAxNDMsIDE0M10sXHJcblx0XCJyb3lhbGJsdWVcIjogWzY1LCAxMDUsIDIyNV0sXHJcblx0XCJzYWRkbGVicm93blwiOiBbMTM5LCA2OSwgMTldLFxyXG5cdFwic2FsbW9uXCI6IFsyNTAsIDEyOCwgMTE0XSxcclxuXHRcInNhbmR5YnJvd25cIjogWzI0NCwgMTY0LCA5Nl0sXHJcblx0XCJzZWFncmVlblwiOiBbNDYsIDEzOSwgODddLFxyXG5cdFwic2Vhc2hlbGxcIjogWzI1NSwgMjQ1LCAyMzhdLFxyXG5cdFwic2llbm5hXCI6IFsxNjAsIDgyLCA0NV0sXHJcblx0XCJzaWx2ZXJcIjogWzE5MiwgMTkyLCAxOTJdLFxyXG5cdFwic2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDIzNV0sXHJcblx0XCJzbGF0ZWJsdWVcIjogWzEwNiwgOTAsIDIwNV0sXHJcblx0XCJzbGF0ZWdyYXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic2xhdGVncmV5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNub3dcIjogWzI1NSwgMjUwLCAyNTBdLFxyXG5cdFwic3ByaW5nZ3JlZW5cIjogWzAsIDI1NSwgMTI3XSxcclxuXHRcInN0ZWVsYmx1ZVwiOiBbNzAsIDEzMCwgMTgwXSxcclxuXHRcInRhblwiOiBbMjEwLCAxODAsIDE0MF0sXHJcblx0XCJ0ZWFsXCI6IFswLCAxMjgsIDEyOF0sXHJcblx0XCJ0aGlzdGxlXCI6IFsyMTYsIDE5MSwgMjE2XSxcclxuXHRcInRvbWF0b1wiOiBbMjU1LCA5OSwgNzFdLFxyXG5cdFwidHVycXVvaXNlXCI6IFs2NCwgMjI0LCAyMDhdLFxyXG5cdFwidmlvbGV0XCI6IFsyMzgsIDEzMCwgMjM4XSxcclxuXHRcIndoZWF0XCI6IFsyNDUsIDIyMiwgMTc5XSxcclxuXHRcIndoaXRlXCI6IFsyNTUsIDI1NSwgMjU1XSxcclxuXHRcIndoaXRlc21va2VcIjogWzI0NSwgMjQ1LCAyNDVdLFxyXG5cdFwieWVsbG93XCI6IFsyNTUsIDI1NSwgMF0sXHJcblx0XCJ5ZWxsb3dncmVlblwiOiBbMTU0LCAyMDUsIDUwXVxyXG59O1xuXG52YXIgY29udmVyc2lvbnMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vKiBNSVQgbGljZW5zZSAqL1xuXG5cbi8vIE5PVEU6IGNvbnZlcnNpb25zIHNob3VsZCBvbmx5IHJldHVybiBwcmltaXRpdmUgdmFsdWVzIChpLmUuIGFycmF5cywgb3Jcbi8vICAgICAgIHZhbHVlcyB0aGF0IGdpdmUgY29ycmVjdCBgdHlwZW9mYCByZXN1bHRzKS5cbi8vICAgICAgIGRvIG5vdCB1c2UgYm94IHZhbHVlcyB0eXBlcyAoaS5lLiBOdW1iZXIoKSwgU3RyaW5nKCksIGV0Yy4pXG5cbnZhciByZXZlcnNlS2V5d29yZHMgPSB7fTtcbmZvciAodmFyIGtleSBpbiBjb2xvck5hbWUpIHtcblx0aWYgKGNvbG9yTmFtZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0cmV2ZXJzZUtleXdvcmRzW2NvbG9yTmFtZVtrZXldXSA9IGtleTtcblx0fVxufVxuXG52YXIgY29udmVydCA9IG1vZHVsZS5leHBvcnRzID0ge1xuXHRyZ2I6IHtjaGFubmVsczogMywgbGFiZWxzOiAncmdiJ30sXG5cdGhzbDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc2wnfSxcblx0aHN2OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2hzdid9LFxuXHRod2I6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHdiJ30sXG5cdGNteWs6IHtjaGFubmVsczogNCwgbGFiZWxzOiAnY215ayd9LFxuXHR4eXo6IHtjaGFubmVsczogMywgbGFiZWxzOiAneHl6J30sXG5cdGxhYjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsYWInfSxcblx0bGNoOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2xjaCd9LFxuXHRoZXg6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2hleCddfSxcblx0a2V5d29yZDoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsna2V5d29yZCddfSxcblx0YW5zaTE2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMTYnXX0sXG5cdGFuc2kyNTY6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2Fuc2kyNTYnXX0sXG5cdGhjZzoge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsnaCcsICdjJywgJ2cnXX0sXG5cdGFwcGxlOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogWydyMTYnLCAnZzE2JywgJ2IxNiddfSxcblx0Z3JheToge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnZ3JheSddfVxufTtcblxuLy8gaGlkZSAuY2hhbm5lbHMgYW5kIC5sYWJlbHMgcHJvcGVydGllc1xuZm9yICh2YXIgbW9kZWwgaW4gY29udmVydCkge1xuXHRpZiAoY29udmVydC5oYXNPd25Qcm9wZXJ0eShtb2RlbCkpIHtcblx0XHRpZiAoISgnY2hhbm5lbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGNoYW5uZWxzIHByb3BlcnR5OiAnICsgbW9kZWwpO1xuXHRcdH1cblxuXHRcdGlmICghKCdsYWJlbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGNoYW5uZWwgbGFiZWxzIHByb3BlcnR5OiAnICsgbW9kZWwpO1xuXHRcdH1cblxuXHRcdGlmIChjb252ZXJ0W21vZGVsXS5sYWJlbHMubGVuZ3RoICE9PSBjb252ZXJ0W21vZGVsXS5jaGFubmVscykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdjaGFubmVsIGFuZCBsYWJlbCBjb3VudHMgbWlzbWF0Y2g6ICcgKyBtb2RlbCk7XG5cdFx0fVxuXG5cdFx0dmFyIGNoYW5uZWxzID0gY29udmVydFttb2RlbF0uY2hhbm5lbHM7XG5cdFx0dmFyIGxhYmVscyA9IGNvbnZlcnRbbW9kZWxdLmxhYmVscztcblx0XHRkZWxldGUgY29udmVydFttb2RlbF0uY2hhbm5lbHM7XG5cdFx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmxhYmVscztcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFttb2RlbF0sICdjaGFubmVscycsIHt2YWx1ZTogY2hhbm5lbHN9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFttb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGxhYmVsc30pO1xuXHR9XG59XG5cbmNvbnZlcnQucmdiLmhzbCA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHIgPSByZ2JbMF0gLyAyNTU7XG5cdHZhciBnID0gcmdiWzFdIC8gMjU1O1xuXHR2YXIgYiA9IHJnYlsyXSAvIDI1NTtcblx0dmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuXHR2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG5cdHZhciBkZWx0YSA9IG1heCAtIG1pbjtcblx0dmFyIGg7XG5cdHZhciBzO1xuXHR2YXIgbDtcblxuXHRpZiAobWF4ID09PSBtaW4pIHtcblx0XHRoID0gMDtcblx0fSBlbHNlIGlmIChyID09PSBtYXgpIHtcblx0XHRoID0gKGcgLSBiKSAvIGRlbHRhO1xuXHR9IGVsc2UgaWYgKGcgPT09IG1heCkge1xuXHRcdGggPSAyICsgKGIgLSByKSAvIGRlbHRhO1xuXHR9IGVsc2UgaWYgKGIgPT09IG1heCkge1xuXHRcdGggPSA0ICsgKHIgLSBnKSAvIGRlbHRhO1xuXHR9XG5cblx0aCA9IE1hdGgubWluKGggKiA2MCwgMzYwKTtcblxuXHRpZiAoaCA8IDApIHtcblx0XHRoICs9IDM2MDtcblx0fVxuXG5cdGwgPSAobWluICsgbWF4KSAvIDI7XG5cblx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0cyA9IDA7XG5cdH0gZWxzZSBpZiAobCA8PSAwLjUpIHtcblx0XHRzID0gZGVsdGEgLyAobWF4ICsgbWluKTtcblx0fSBlbHNlIHtcblx0XHRzID0gZGVsdGEgLyAoMiAtIG1heCAtIG1pbik7XG5cdH1cblxuXHRyZXR1cm4gW2gsIHMgKiAxMDAsIGwgKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IuaHN2ID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgcmRpZjtcblx0dmFyIGdkaWY7XG5cdHZhciBiZGlmO1xuXHR2YXIgaDtcblx0dmFyIHM7XG5cblx0dmFyIHIgPSByZ2JbMF0gLyAyNTU7XG5cdHZhciBnID0gcmdiWzFdIC8gMjU1O1xuXHR2YXIgYiA9IHJnYlsyXSAvIDI1NTtcblx0dmFyIHYgPSBNYXRoLm1heChyLCBnLCBiKTtcblx0dmFyIGRpZmYgPSB2IC0gTWF0aC5taW4ociwgZywgYik7XG5cdHZhciBkaWZmYyA9IGZ1bmN0aW9uIChjKSB7XG5cdFx0cmV0dXJuICh2IC0gYykgLyA2IC8gZGlmZiArIDEgLyAyO1xuXHR9O1xuXG5cdGlmIChkaWZmID09PSAwKSB7XG5cdFx0aCA9IHMgPSAwO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSBkaWZmIC8gdjtcblx0XHRyZGlmID0gZGlmZmMocik7XG5cdFx0Z2RpZiA9IGRpZmZjKGcpO1xuXHRcdGJkaWYgPSBkaWZmYyhiKTtcblxuXHRcdGlmIChyID09PSB2KSB7XG5cdFx0XHRoID0gYmRpZiAtIGdkaWY7XG5cdFx0fSBlbHNlIGlmIChnID09PSB2KSB7XG5cdFx0XHRoID0gKDEgLyAzKSArIHJkaWYgLSBiZGlmO1xuXHRcdH0gZWxzZSBpZiAoYiA9PT0gdikge1xuXHRcdFx0aCA9ICgyIC8gMykgKyBnZGlmIC0gcmRpZjtcblx0XHR9XG5cdFx0aWYgKGggPCAwKSB7XG5cdFx0XHRoICs9IDE7XG5cdFx0fSBlbHNlIGlmIChoID4gMSkge1xuXHRcdFx0aCAtPSAxO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBbXG5cdFx0aCAqIDM2MCxcblx0XHRzICogMTAwLFxuXHRcdHYgKiAxMDBcblx0XTtcbn07XG5cbmNvbnZlcnQucmdiLmh3YiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHIgPSByZ2JbMF07XG5cdHZhciBnID0gcmdiWzFdO1xuXHR2YXIgYiA9IHJnYlsyXTtcblx0dmFyIGggPSBjb252ZXJ0LnJnYi5oc2wocmdiKVswXTtcblx0dmFyIHcgPSAxIC8gMjU1ICogTWF0aC5taW4ociwgTWF0aC5taW4oZywgYikpO1xuXG5cdGIgPSAxIC0gMSAvIDI1NSAqIE1hdGgubWF4KHIsIE1hdGgubWF4KGcsIGIpKTtcblxuXHRyZXR1cm4gW2gsIHcgKiAxMDAsIGIgKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IuY215ayA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHIgPSByZ2JbMF0gLyAyNTU7XG5cdHZhciBnID0gcmdiWzFdIC8gMjU1O1xuXHR2YXIgYiA9IHJnYlsyXSAvIDI1NTtcblx0dmFyIGM7XG5cdHZhciBtO1xuXHR2YXIgeTtcblx0dmFyIGs7XG5cblx0ayA9IE1hdGgubWluKDEgLSByLCAxIC0gZywgMSAtIGIpO1xuXHRjID0gKDEgLSByIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdG0gPSAoMSAtIGcgLSBrKSAvICgxIC0gaykgfHwgMDtcblx0eSA9ICgxIC0gYiAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXG5cdHJldHVybiBbYyAqIDEwMCwgbSAqIDEwMCwgeSAqIDEwMCwgayAqIDEwMF07XG59O1xuXG4vKipcbiAqIFNlZSBodHRwczovL2VuLm0ud2lraXBlZGlhLm9yZy93aWtpL0V1Y2xpZGVhbl9kaXN0YW5jZSNTcXVhcmVkX0V1Y2xpZGVhbl9kaXN0YW5jZVxuICogKi9cbmZ1bmN0aW9uIGNvbXBhcmF0aXZlRGlzdGFuY2UoeCwgeSkge1xuXHRyZXR1cm4gKFxuXHRcdE1hdGgucG93KHhbMF0gLSB5WzBdLCAyKSArXG5cdFx0TWF0aC5wb3coeFsxXSAtIHlbMV0sIDIpICtcblx0XHRNYXRoLnBvdyh4WzJdIC0geVsyXSwgMilcblx0KTtcbn1cblxuY29udmVydC5yZ2Iua2V5d29yZCA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHJldmVyc2VkID0gcmV2ZXJzZUtleXdvcmRzW3JnYl07XG5cdGlmIChyZXZlcnNlZCkge1xuXHRcdHJldHVybiByZXZlcnNlZDtcblx0fVxuXG5cdHZhciBjdXJyZW50Q2xvc2VzdERpc3RhbmNlID0gSW5maW5pdHk7XG5cdHZhciBjdXJyZW50Q2xvc2VzdEtleXdvcmQ7XG5cblx0Zm9yICh2YXIga2V5d29yZCBpbiBjb2xvck5hbWUpIHtcblx0XHRpZiAoY29sb3JOYW1lLmhhc093blByb3BlcnR5KGtleXdvcmQpKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBjb2xvck5hbWVba2V5d29yZF07XG5cblx0XHRcdC8vIENvbXB1dGUgY29tcGFyYXRpdmUgZGlzdGFuY2Vcblx0XHRcdHZhciBkaXN0YW5jZSA9IGNvbXBhcmF0aXZlRGlzdGFuY2UocmdiLCB2YWx1ZSk7XG5cblx0XHRcdC8vIENoZWNrIGlmIGl0cyBsZXNzLCBpZiBzbyBzZXQgYXMgY2xvc2VzdFxuXHRcdFx0aWYgKGRpc3RhbmNlIDwgY3VycmVudENsb3Nlc3REaXN0YW5jZSkge1xuXHRcdFx0XHRjdXJyZW50Q2xvc2VzdERpc3RhbmNlID0gZGlzdGFuY2U7XG5cdFx0XHRcdGN1cnJlbnRDbG9zZXN0S2V5d29yZCA9IGtleXdvcmQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGN1cnJlbnRDbG9zZXN0S2V5d29yZDtcbn07XG5cbmNvbnZlcnQua2V5d29yZC5yZ2IgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xuXHRyZXR1cm4gY29sb3JOYW1lW2tleXdvcmRdO1xufTtcblxuY29udmVydC5yZ2IueHl6ID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgciA9IHJnYlswXSAvIDI1NTtcblx0dmFyIGcgPSByZ2JbMV0gLyAyNTU7XG5cdHZhciBiID0gcmdiWzJdIC8gMjU1O1xuXG5cdC8vIGFzc3VtZSBzUkdCXG5cdHIgPSByID4gMC4wNDA0NSA/IE1hdGgucG93KCgociArIDAuMDU1KSAvIDEuMDU1KSwgMi40KSA6IChyIC8gMTIuOTIpO1xuXHRnID0gZyA+IDAuMDQwNDUgPyBNYXRoLnBvdygoKGcgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCkgOiAoZyAvIDEyLjkyKTtcblx0YiA9IGIgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKChiICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogKGIgLyAxMi45Mik7XG5cblx0dmFyIHggPSAociAqIDAuNDEyNCkgKyAoZyAqIDAuMzU3NikgKyAoYiAqIDAuMTgwNSk7XG5cdHZhciB5ID0gKHIgKiAwLjIxMjYpICsgKGcgKiAwLjcxNTIpICsgKGIgKiAwLjA3MjIpO1xuXHR2YXIgeiA9IChyICogMC4wMTkzKSArIChnICogMC4xMTkyKSArIChiICogMC45NTA1KTtcblxuXHRyZXR1cm4gW3ggKiAxMDAsIHkgKiAxMDAsIHogKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IubGFiID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgeHl6ID0gY29udmVydC5yZ2IueHl6KHJnYik7XG5cdHZhciB4ID0geHl6WzBdO1xuXHR2YXIgeSA9IHh5elsxXTtcblx0dmFyIHogPSB4eXpbMl07XG5cdHZhciBsO1xuXHR2YXIgYTtcblx0dmFyIGI7XG5cblx0eCAvPSA5NS4wNDc7XG5cdHkgLz0gMTAwO1xuXHR6IC89IDEwOC44ODM7XG5cblx0eCA9IHggPiAwLjAwODg1NiA/IE1hdGgucG93KHgsIDEgLyAzKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcblx0eSA9IHkgPiAwLjAwODg1NiA/IE1hdGgucG93KHksIDEgLyAzKSA6ICg3Ljc4NyAqIHkpICsgKDE2IC8gMTE2KTtcblx0eiA9IHogPiAwLjAwODg1NiA/IE1hdGgucG93KHosIDEgLyAzKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuXHRsID0gKDExNiAqIHkpIC0gMTY7XG5cdGEgPSA1MDAgKiAoeCAtIHkpO1xuXHRiID0gMjAwICogKHkgLSB6KTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5oc2wucmdiID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXSAvIDM2MDtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgdDE7XG5cdHZhciB0Mjtcblx0dmFyIHQzO1xuXHR2YXIgcmdiO1xuXHR2YXIgdmFsO1xuXG5cdGlmIChzID09PSAwKSB7XG5cdFx0dmFsID0gbCAqIDI1NTtcblx0XHRyZXR1cm4gW3ZhbCwgdmFsLCB2YWxdO1xuXHR9XG5cblx0aWYgKGwgPCAwLjUpIHtcblx0XHR0MiA9IGwgKiAoMSArIHMpO1xuXHR9IGVsc2Uge1xuXHRcdHQyID0gbCArIHMgLSBsICogcztcblx0fVxuXG5cdHQxID0gMiAqIGwgLSB0MjtcblxuXHRyZ2IgPSBbMCwgMCwgMF07XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0dDMgPSBoICsgMSAvIDMgKiAtKGkgLSAxKTtcblx0XHRpZiAodDMgPCAwKSB7XG5cdFx0XHR0MysrO1xuXHRcdH1cblx0XHRpZiAodDMgPiAxKSB7XG5cdFx0XHR0My0tO1xuXHRcdH1cblxuXHRcdGlmICg2ICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0MSArICh0MiAtIHQxKSAqIDYgKiB0Mztcblx0XHR9IGVsc2UgaWYgKDIgKiB0MyA8IDEpIHtcblx0XHRcdHZhbCA9IHQyO1xuXHRcdH0gZWxzZSBpZiAoMyAqIHQzIDwgMikge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiAoMiAvIDMgLSB0MykgKiA2O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWwgPSB0MTtcblx0XHR9XG5cblx0XHRyZ2JbaV0gPSB2YWwgKiAyNTU7XG5cdH1cblxuXHRyZXR1cm4gcmdiO1xufTtcblxuY29udmVydC5oc2wuaHN2ID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXTtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgc21pbiA9IHM7XG5cdHZhciBsbWluID0gTWF0aC5tYXgobCwgMC4wMSk7XG5cdHZhciBzdjtcblx0dmFyIHY7XG5cblx0bCAqPSAyO1xuXHRzICo9IChsIDw9IDEpID8gbCA6IDIgLSBsO1xuXHRzbWluICo9IGxtaW4gPD0gMSA/IGxtaW4gOiAyIC0gbG1pbjtcblx0diA9IChsICsgcykgLyAyO1xuXHRzdiA9IGwgPT09IDAgPyAoMiAqIHNtaW4pIC8gKGxtaW4gKyBzbWluKSA6ICgyICogcykgLyAobCArIHMpO1xuXG5cdHJldHVybiBbaCwgc3YgKiAxMDAsIHYgKiAxMDBdO1xufTtcblxuY29udmVydC5oc3YucmdiID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXSAvIDYwO1xuXHR2YXIgcyA9IGhzdlsxXSAvIDEwMDtcblx0dmFyIHYgPSBoc3ZbMl0gLyAxMDA7XG5cdHZhciBoaSA9IE1hdGguZmxvb3IoaCkgJSA2O1xuXG5cdHZhciBmID0gaCAtIE1hdGguZmxvb3IoaCk7XG5cdHZhciBwID0gMjU1ICogdiAqICgxIC0gcyk7XG5cdHZhciBxID0gMjU1ICogdiAqICgxIC0gKHMgKiBmKSk7XG5cdHZhciB0ID0gMjU1ICogdiAqICgxIC0gKHMgKiAoMSAtIGYpKSk7XG5cdHYgKj0gMjU1O1xuXG5cdHN3aXRjaCAoaGkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRyZXR1cm4gW3YsIHQsIHBdO1xuXHRcdGNhc2UgMTpcblx0XHRcdHJldHVybiBbcSwgdiwgcF07XG5cdFx0Y2FzZSAyOlxuXHRcdFx0cmV0dXJuIFtwLCB2LCB0XTtcblx0XHRjYXNlIDM6XG5cdFx0XHRyZXR1cm4gW3AsIHEsIHZdO1xuXHRcdGNhc2UgNDpcblx0XHRcdHJldHVybiBbdCwgcCwgdl07XG5cdFx0Y2FzZSA1OlxuXHRcdFx0cmV0dXJuIFt2LCBwLCBxXTtcblx0fVxufTtcblxuY29udmVydC5oc3YuaHNsID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXTtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXHR2YXIgdm1pbiA9IE1hdGgubWF4KHYsIDAuMDEpO1xuXHR2YXIgbG1pbjtcblx0dmFyIHNsO1xuXHR2YXIgbDtcblxuXHRsID0gKDIgLSBzKSAqIHY7XG5cdGxtaW4gPSAoMiAtIHMpICogdm1pbjtcblx0c2wgPSBzICogdm1pbjtcblx0c2wgLz0gKGxtaW4gPD0gMSkgPyBsbWluIDogMiAtIGxtaW47XG5cdHNsID0gc2wgfHwgMDtcblx0bCAvPSAyO1xuXG5cdHJldHVybiBbaCwgc2wgKiAxMDAsIGwgKiAxMDBdO1xufTtcblxuLy8gaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3NzLWNvbG9yLyNod2ItdG8tcmdiXG5jb252ZXJ0Lmh3Yi5yZ2IgPSBmdW5jdGlvbiAoaHdiKSB7XG5cdHZhciBoID0gaHdiWzBdIC8gMzYwO1xuXHR2YXIgd2ggPSBod2JbMV0gLyAxMDA7XG5cdHZhciBibCA9IGh3YlsyXSAvIDEwMDtcblx0dmFyIHJhdGlvID0gd2ggKyBibDtcblx0dmFyIGk7XG5cdHZhciB2O1xuXHR2YXIgZjtcblx0dmFyIG47XG5cblx0Ly8gd2ggKyBibCBjYW50IGJlID4gMVxuXHRpZiAocmF0aW8gPiAxKSB7XG5cdFx0d2ggLz0gcmF0aW87XG5cdFx0YmwgLz0gcmF0aW87XG5cdH1cblxuXHRpID0gTWF0aC5mbG9vcig2ICogaCk7XG5cdHYgPSAxIC0gYmw7XG5cdGYgPSA2ICogaCAtIGk7XG5cblx0aWYgKChpICYgMHgwMSkgIT09IDApIHtcblx0XHRmID0gMSAtIGY7XG5cdH1cblxuXHRuID0gd2ggKyBmICogKHYgLSB3aCk7IC8vIGxpbmVhciBpbnRlcnBvbGF0aW9uXG5cblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblx0c3dpdGNoIChpKSB7XG5cdFx0ZGVmYXVsdDpcblx0XHRjYXNlIDY6XG5cdFx0Y2FzZSAwOiByID0gdjsgZyA9IG47IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAxOiByID0gbjsgZyA9IHY7IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAyOiByID0gd2g7IGcgPSB2OyBiID0gbjsgYnJlYWs7XG5cdFx0Y2FzZSAzOiByID0gd2g7IGcgPSBuOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA0OiByID0gbjsgZyA9IHdoOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA1OiByID0gdjsgZyA9IHdoOyBiID0gbjsgYnJlYWs7XG5cdH1cblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC5jbXlrLnJnYiA9IGZ1bmN0aW9uIChjbXlrKSB7XG5cdHZhciBjID0gY215a1swXSAvIDEwMDtcblx0dmFyIG0gPSBjbXlrWzFdIC8gMTAwO1xuXHR2YXIgeSA9IGNteWtbMl0gLyAxMDA7XG5cdHZhciBrID0gY215a1szXSAvIDEwMDtcblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblxuXHRyID0gMSAtIE1hdGgubWluKDEsIGMgKiAoMSAtIGspICsgayk7XG5cdGcgPSAxIC0gTWF0aC5taW4oMSwgbSAqICgxIC0gaykgKyBrKTtcblx0YiA9IDEgLSBNYXRoLm1pbigxLCB5ICogKDEgLSBrKSArIGspO1xuXG5cdHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59O1xuXG5jb252ZXJ0Lnh5ei5yZ2IgPSBmdW5jdGlvbiAoeHl6KSB7XG5cdHZhciB4ID0geHl6WzBdIC8gMTAwO1xuXHR2YXIgeSA9IHh5elsxXSAvIDEwMDtcblx0dmFyIHogPSB4eXpbMl0gLyAxMDA7XG5cdHZhciByO1xuXHR2YXIgZztcblx0dmFyIGI7XG5cblx0ciA9ICh4ICogMy4yNDA2KSArICh5ICogLTEuNTM3MikgKyAoeiAqIC0wLjQ5ODYpO1xuXHRnID0gKHggKiAtMC45Njg5KSArICh5ICogMS44NzU4KSArICh6ICogMC4wNDE1KTtcblx0YiA9ICh4ICogMC4wNTU3KSArICh5ICogLTAuMjA0MCkgKyAoeiAqIDEuMDU3MCk7XG5cblx0Ly8gYXNzdW1lIHNSR0Jcblx0ciA9IHIgPiAwLjAwMzEzMDhcblx0XHQ/ICgoMS4wNTUgKiBNYXRoLnBvdyhyLCAxLjAgLyAyLjQpKSAtIDAuMDU1KVxuXHRcdDogciAqIDEyLjkyO1xuXG5cdGcgPSBnID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogTWF0aC5wb3coZywgMS4wIC8gMi40KSkgLSAwLjA1NSlcblx0XHQ6IGcgKiAxMi45MjtcblxuXHRiID0gYiA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIE1hdGgucG93KGIsIDEuMCAvIDIuNCkpIC0gMC4wNTUpXG5cdFx0OiBiICogMTIuOTI7XG5cblx0ciA9IE1hdGgubWluKE1hdGgubWF4KDAsIHIpLCAxKTtcblx0ZyA9IE1hdGgubWluKE1hdGgubWF4KDAsIGcpLCAxKTtcblx0YiA9IE1hdGgubWluKE1hdGgubWF4KDAsIGIpLCAxKTtcblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC54eXoubGFiID0gZnVuY3Rpb24gKHh5eikge1xuXHR2YXIgeCA9IHh5elswXTtcblx0dmFyIHkgPSB4eXpbMV07XG5cdHZhciB6ID0geHl6WzJdO1xuXHR2YXIgbDtcblx0dmFyIGE7XG5cdHZhciBiO1xuXG5cdHggLz0gOTUuMDQ3O1xuXHR5IC89IDEwMDtcblx0eiAvPSAxMDguODgzO1xuXG5cdHggPSB4ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiAoNy43ODcgKiB4KSArICgxNiAvIDExNik7XG5cdHkgPSB5ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh5LCAxIC8gMykgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh6LCAxIC8gMykgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cblx0bCA9ICgxMTYgKiB5KSAtIDE2O1xuXHRhID0gNTAwICogKHggLSB5KTtcblx0YiA9IDIwMCAqICh5IC0geik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQubGFiLnh5eiA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIHg7XG5cdHZhciB5O1xuXHR2YXIgejtcblxuXHR5ID0gKGwgKyAxNikgLyAxMTY7XG5cdHggPSBhIC8gNTAwICsgeTtcblx0eiA9IHkgLSBiIC8gMjAwO1xuXG5cdHZhciB5MiA9IE1hdGgucG93KHksIDMpO1xuXHR2YXIgeDIgPSBNYXRoLnBvdyh4LCAzKTtcblx0dmFyIHoyID0gTWF0aC5wb3coeiwgMyk7XG5cdHkgPSB5MiA+IDAuMDA4ODU2ID8geTIgOiAoeSAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXHR4ID0geDIgPiAwLjAwODg1NiA/IHgyIDogKHggLSAxNiAvIDExNikgLyA3Ljc4Nztcblx0eiA9IHoyID4gMC4wMDg4NTYgPyB6MiA6ICh6IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cblx0eCAqPSA5NS4wNDc7XG5cdHkgKj0gMTAwO1xuXHR6ICo9IDEwOC44ODM7XG5cblx0cmV0dXJuIFt4LCB5LCB6XTtcbn07XG5cbmNvbnZlcnQubGFiLmxjaCA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIGhyO1xuXHR2YXIgaDtcblx0dmFyIGM7XG5cblx0aHIgPSBNYXRoLmF0YW4yKGIsIGEpO1xuXHRoID0gaHIgKiAzNjAgLyAyIC8gTWF0aC5QSTtcblxuXHRpZiAoaCA8IDApIHtcblx0XHRoICs9IDM2MDtcblx0fVxuXG5cdGMgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG5cblx0cmV0dXJuIFtsLCBjLCBoXTtcbn07XG5cbmNvbnZlcnQubGNoLmxhYiA9IGZ1bmN0aW9uIChsY2gpIHtcblx0dmFyIGwgPSBsY2hbMF07XG5cdHZhciBjID0gbGNoWzFdO1xuXHR2YXIgaCA9IGxjaFsyXTtcblx0dmFyIGE7XG5cdHZhciBiO1xuXHR2YXIgaHI7XG5cblx0aHIgPSBoIC8gMzYwICogMiAqIE1hdGguUEk7XG5cdGEgPSBjICogTWF0aC5jb3MoaHIpO1xuXHRiID0gYyAqIE1hdGguc2luKGhyKTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5yZ2IuYW5zaTE2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblx0dmFyIHZhbHVlID0gMSBpbiBhcmd1bWVudHMgPyBhcmd1bWVudHNbMV0gOiBjb252ZXJ0LnJnYi5oc3YoYXJncylbMl07IC8vIGhzdiAtPiBhbnNpMTYgb3B0aW1pemF0aW9uXG5cblx0dmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlIC8gNTApO1xuXG5cdGlmICh2YWx1ZSA9PT0gMCkge1xuXHRcdHJldHVybiAzMDtcblx0fVxuXG5cdHZhciBhbnNpID0gMzBcblx0XHQrICgoTWF0aC5yb3VuZChiIC8gMjU1KSA8PCAyKVxuXHRcdHwgKE1hdGgucm91bmQoZyAvIDI1NSkgPDwgMSlcblx0XHR8IE1hdGgucm91bmQociAvIDI1NSkpO1xuXG5cdGlmICh2YWx1ZSA9PT0gMikge1xuXHRcdGFuc2kgKz0gNjA7XG5cdH1cblxuXHRyZXR1cm4gYW5zaTtcbn07XG5cbmNvbnZlcnQuaHN2LmFuc2kxNiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdC8vIG9wdGltaXphdGlvbiBoZXJlOyB3ZSBhbHJlYWR5IGtub3cgdGhlIHZhbHVlIGFuZCBkb24ndCBuZWVkIHRvIGdldFxuXHQvLyBpdCBjb252ZXJ0ZWQgZm9yIHVzLlxuXHRyZXR1cm4gY29udmVydC5yZ2IuYW5zaTE2KGNvbnZlcnQuaHN2LnJnYihhcmdzKSwgYXJnc1syXSk7XG59O1xuXG5jb252ZXJ0LnJnYi5hbnNpMjU2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblxuXHQvLyB3ZSB1c2UgdGhlIGV4dGVuZGVkIGdyZXlzY2FsZSBwYWxldHRlIGhlcmUsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZlxuXHQvLyBibGFjayBhbmQgd2hpdGUuIG5vcm1hbCBwYWxldHRlIG9ubHkgaGFzIDQgZ3JleXNjYWxlIHNoYWRlcy5cblx0aWYgKHIgPT09IGcgJiYgZyA9PT0gYikge1xuXHRcdGlmIChyIDwgOCkge1xuXHRcdFx0cmV0dXJuIDE2O1xuXHRcdH1cblxuXHRcdGlmIChyID4gMjQ4KSB7XG5cdFx0XHRyZXR1cm4gMjMxO1xuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLnJvdW5kKCgociAtIDgpIC8gMjQ3KSAqIDI0KSArIDIzMjtcblx0fVxuXG5cdHZhciBhbnNpID0gMTZcblx0XHQrICgzNiAqIE1hdGgucm91bmQociAvIDI1NSAqIDUpKVxuXHRcdCsgKDYgKiBNYXRoLnJvdW5kKGcgLyAyNTUgKiA1KSlcblx0XHQrIE1hdGgucm91bmQoYiAvIDI1NSAqIDUpO1xuXG5cdHJldHVybiBhbnNpO1xufTtcblxuY29udmVydC5hbnNpMTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIGNvbG9yID0gYXJncyAlIDEwO1xuXG5cdC8vIGhhbmRsZSBncmV5c2NhbGVcblx0aWYgKGNvbG9yID09PSAwIHx8IGNvbG9yID09PSA3KSB7XG5cdFx0aWYgKGFyZ3MgPiA1MCkge1xuXHRcdFx0Y29sb3IgKz0gMy41O1xuXHRcdH1cblxuXHRcdGNvbG9yID0gY29sb3IgLyAxMC41ICogMjU1O1xuXG5cdFx0cmV0dXJuIFtjb2xvciwgY29sb3IsIGNvbG9yXTtcblx0fVxuXG5cdHZhciBtdWx0ID0gKH5+KGFyZ3MgPiA1MCkgKyAxKSAqIDAuNTtcblx0dmFyIHIgPSAoKGNvbG9yICYgMSkgKiBtdWx0KSAqIDI1NTtcblx0dmFyIGcgPSAoKChjb2xvciA+PiAxKSAmIDEpICogbXVsdCkgKiAyNTU7XG5cdHZhciBiID0gKCgoY29sb3IgPj4gMikgJiAxKSAqIG11bHQpICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LmFuc2kyNTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gaGFuZGxlIGdyZXlzY2FsZVxuXHRpZiAoYXJncyA+PSAyMzIpIHtcblx0XHR2YXIgYyA9IChhcmdzIC0gMjMyKSAqIDEwICsgODtcblx0XHRyZXR1cm4gW2MsIGMsIGNdO1xuXHR9XG5cblx0YXJncyAtPSAxNjtcblxuXHR2YXIgcmVtO1xuXHR2YXIgciA9IE1hdGguZmxvb3IoYXJncyAvIDM2KSAvIDUgKiAyNTU7XG5cdHZhciBnID0gTWF0aC5mbG9vcigocmVtID0gYXJncyAlIDM2KSAvIDYpIC8gNSAqIDI1NTtcblx0dmFyIGIgPSAocmVtICUgNikgLyA1ICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oZXggPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgaW50ZWdlciA9ICgoTWF0aC5yb3VuZChhcmdzWzBdKSAmIDB4RkYpIDw8IDE2KVxuXHRcdCsgKChNYXRoLnJvdW5kKGFyZ3NbMV0pICYgMHhGRikgPDwgOClcblx0XHQrIChNYXRoLnJvdW5kKGFyZ3NbMl0pICYgMHhGRik7XG5cblx0dmFyIHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LmhleC5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgbWF0Y2ggPSBhcmdzLnRvU3RyaW5nKDE2KS5tYXRjaCgvW2EtZjAtOV17Nn18W2EtZjAtOV17M30vaSk7XG5cdGlmICghbWF0Y2gpIHtcblx0XHRyZXR1cm4gWzAsIDAsIDBdO1xuXHR9XG5cblx0dmFyIGNvbG9yU3RyaW5nID0gbWF0Y2hbMF07XG5cblx0aWYgKG1hdGNoWzBdLmxlbmd0aCA9PT0gMykge1xuXHRcdGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoY2hhcikge1xuXHRcdFx0cmV0dXJuIGNoYXIgKyBjaGFyO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0dmFyIGludGVnZXIgPSBwYXJzZUludChjb2xvclN0cmluZywgMTYpO1xuXHR2YXIgciA9IChpbnRlZ2VyID4+IDE2KSAmIDB4RkY7XG5cdHZhciBnID0gKGludGVnZXIgPj4gOCkgJiAweEZGO1xuXHR2YXIgYiA9IGludGVnZXIgJiAweEZGO1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oY2cgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBtYXggPSBNYXRoLm1heChNYXRoLm1heChyLCBnKSwgYik7XG5cdHZhciBtaW4gPSBNYXRoLm1pbihNYXRoLm1pbihyLCBnKSwgYik7XG5cdHZhciBjaHJvbWEgPSAobWF4IC0gbWluKTtcblx0dmFyIGdyYXlzY2FsZTtcblx0dmFyIGh1ZTtcblxuXHRpZiAoY2hyb21hIDwgMSkge1xuXHRcdGdyYXlzY2FsZSA9IG1pbiAvICgxIC0gY2hyb21hKTtcblx0fSBlbHNlIHtcblx0XHRncmF5c2NhbGUgPSAwO1xuXHR9XG5cblx0aWYgKGNocm9tYSA8PSAwKSB7XG5cdFx0aHVlID0gMDtcblx0fSBlbHNlXG5cdGlmIChtYXggPT09IHIpIHtcblx0XHRodWUgPSAoKGcgLSBiKSAvIGNocm9tYSkgJSA2O1xuXHR9IGVsc2Vcblx0aWYgKG1heCA9PT0gZykge1xuXHRcdGh1ZSA9IDIgKyAoYiAtIHIpIC8gY2hyb21hO1xuXHR9IGVsc2Uge1xuXHRcdGh1ZSA9IDQgKyAociAtIGcpIC8gY2hyb21hICsgNDtcblx0fVxuXG5cdGh1ZSAvPSA2O1xuXHRodWUgJT0gMTtcblxuXHRyZXR1cm4gW2h1ZSAqIDM2MCwgY2hyb21hICogMTAwLCBncmF5c2NhbGUgKiAxMDBdO1xufTtcblxuY29udmVydC5oc2wuaGNnID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgcyA9IGhzbFsxXSAvIDEwMDtcblx0dmFyIGwgPSBoc2xbMl0gLyAxMDA7XG5cdHZhciBjID0gMTtcblx0dmFyIGYgPSAwO1xuXG5cdGlmIChsIDwgMC41KSB7XG5cdFx0YyA9IDIuMCAqIHMgKiBsO1xuXHR9IGVsc2Uge1xuXHRcdGMgPSAyLjAgKiBzICogKDEuMCAtIGwpO1xuXHR9XG5cblx0aWYgKGMgPCAxLjApIHtcblx0XHRmID0gKGwgLSAwLjUgKiBjKSAvICgxLjAgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHNsWzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHN2LmhjZyA9IGZ1bmN0aW9uIChoc3YpIHtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXG5cdHZhciBjID0gcyAqIHY7XG5cdHZhciBmID0gMDtcblxuXHRpZiAoYyA8IDEuMCkge1xuXHRcdGYgPSAodiAtIGMpIC8gKDEgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHN2WzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLnJnYiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGggPSBoY2dbMF0gLyAzNjA7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRpZiAoYyA9PT0gMC4wKSB7XG5cdFx0cmV0dXJuIFtnICogMjU1LCBnICogMjU1LCBnICogMjU1XTtcblx0fVxuXG5cdHZhciBwdXJlID0gWzAsIDAsIDBdO1xuXHR2YXIgaGkgPSAoaCAlIDEpICogNjtcblx0dmFyIHYgPSBoaSAlIDE7XG5cdHZhciB3ID0gMSAtIHY7XG5cdHZhciBtZyA9IDA7XG5cblx0c3dpdGNoIChNYXRoLmZsb29yKGhpKSkge1xuXHRcdGNhc2UgMDpcblx0XHRcdHB1cmVbMF0gPSAxOyBwdXJlWzFdID0gdjsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMTpcblx0XHRcdHB1cmVbMF0gPSB3OyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgMzpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gdzsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGNhc2UgNDpcblx0XHRcdHB1cmVbMF0gPSB2OyBwdXJlWzFdID0gMDsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSB3O1xuXHR9XG5cblx0bWcgPSAoMS4wIC0gYykgKiBnO1xuXG5cdHJldHVybiBbXG5cdFx0KGMgKiBwdXJlWzBdICsgbWcpICogMjU1LFxuXHRcdChjICogcHVyZVsxXSArIG1nKSAqIDI1NSxcblx0XHQoYyAqIHB1cmVbMl0gKyBtZykgKiAyNTVcblx0XTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzdiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciB2ID0gYyArIGcgKiAoMS4wIC0gYyk7XG5cdHZhciBmID0gMDtcblxuXHRpZiAodiA+IDAuMCkge1xuXHRcdGYgPSBjIC8gdjtcblx0fVxuXG5cdHJldHVybiBbaGNnWzBdLCBmICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzbCA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciBsID0gZyAqICgxLjAgLSBjKSArIDAuNSAqIGM7XG5cdHZhciBzID0gMDtcblxuXHRpZiAobCA+IDAuMCAmJiBsIDwgMC41KSB7XG5cdFx0cyA9IGMgLyAoMiAqIGwpO1xuXHR9IGVsc2Vcblx0aWYgKGwgPj0gMC41ICYmIGwgPCAxLjApIHtcblx0XHRzID0gYyAvICgyICogKDEgLSBsKSk7XG5cdH1cblxuXHRyZXR1cm4gW2hjZ1swXSwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5od2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblx0dmFyIHYgPSBjICsgZyAqICgxLjAgLSBjKTtcblx0cmV0dXJuIFtoY2dbMF0sICh2IC0gYykgKiAxMDAsICgxIC0gdikgKiAxMDBdO1xufTtcblxuY29udmVydC5od2IuaGNnID0gZnVuY3Rpb24gKGh3Yikge1xuXHR2YXIgdyA9IGh3YlsxXSAvIDEwMDtcblx0dmFyIGIgPSBod2JbMl0gLyAxMDA7XG5cdHZhciB2ID0gMSAtIGI7XG5cdHZhciBjID0gdiAtIHc7XG5cdHZhciBnID0gMDtcblxuXHRpZiAoYyA8IDEpIHtcblx0XHRnID0gKHYgLSBjKSAvICgxIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2h3YlswXSwgYyAqIDEwMCwgZyAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmFwcGxlLnJnYiA9IGZ1bmN0aW9uIChhcHBsZSkge1xuXHRyZXR1cm4gWyhhcHBsZVswXSAvIDY1NTM1KSAqIDI1NSwgKGFwcGxlWzFdIC8gNjU1MzUpICogMjU1LCAoYXBwbGVbMl0gLyA2NTUzNSkgKiAyNTVdO1xufTtcblxuY29udmVydC5yZ2IuYXBwbGUgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHJldHVybiBbKHJnYlswXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsxXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsyXSAvIDI1NSkgKiA2NTUzNV07XG59O1xuXG5jb252ZXJ0LmdyYXkucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFthcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1XTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oc2wgPSBjb252ZXJ0LmdyYXkuaHN2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFswLCAwLCBhcmdzWzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5od2IgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gWzAsIDEwMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkuY215ayA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbMCwgMCwgMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkubGFiID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFtncmF5WzBdLCAwLCAwXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oZXggPSBmdW5jdGlvbiAoZ3JheSkge1xuXHR2YXIgdmFsID0gTWF0aC5yb3VuZChncmF5WzBdIC8gMTAwICogMjU1KSAmIDB4RkY7XG5cdHZhciBpbnRlZ2VyID0gKHZhbCA8PCAxNikgKyAodmFsIDw8IDgpICsgdmFsO1xuXG5cdHZhciBzdHJpbmcgPSBpbnRlZ2VyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHRyZXR1cm4gJzAwMDAwMCcuc3Vic3RyaW5nKHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufTtcblxuY29udmVydC5yZ2IuZ3JheSA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHZhbCA9IChyZ2JbMF0gKyByZ2JbMV0gKyByZ2JbMl0pIC8gMztcblx0cmV0dXJuIFt2YWwgLyAyNTUgKiAxMDBdO1xufTtcbn0pO1xudmFyIGNvbnZlcnNpb25zXzEgPSBjb252ZXJzaW9ucy5yZ2I7XG52YXIgY29udmVyc2lvbnNfMiA9IGNvbnZlcnNpb25zLmhzbDtcbnZhciBjb252ZXJzaW9uc18zID0gY29udmVyc2lvbnMuaHN2O1xudmFyIGNvbnZlcnNpb25zXzQgPSBjb252ZXJzaW9ucy5od2I7XG52YXIgY29udmVyc2lvbnNfNSA9IGNvbnZlcnNpb25zLmNteWs7XG52YXIgY29udmVyc2lvbnNfNiA9IGNvbnZlcnNpb25zLnh5ejtcbnZhciBjb252ZXJzaW9uc183ID0gY29udmVyc2lvbnMubGFiO1xudmFyIGNvbnZlcnNpb25zXzggPSBjb252ZXJzaW9ucy5sY2g7XG52YXIgY29udmVyc2lvbnNfOSA9IGNvbnZlcnNpb25zLmhleDtcbnZhciBjb252ZXJzaW9uc18xMCA9IGNvbnZlcnNpb25zLmtleXdvcmQ7XG52YXIgY29udmVyc2lvbnNfMTEgPSBjb252ZXJzaW9ucy5hbnNpMTY7XG52YXIgY29udmVyc2lvbnNfMTIgPSBjb252ZXJzaW9ucy5hbnNpMjU2O1xudmFyIGNvbnZlcnNpb25zXzEzID0gY29udmVyc2lvbnMuaGNnO1xudmFyIGNvbnZlcnNpb25zXzE0ID0gY29udmVyc2lvbnMuYXBwbGU7XG52YXIgY29udmVyc2lvbnNfMTUgPSBjb252ZXJzaW9ucy5ncmF5O1xuXG4vKlxuXHR0aGlzIGZ1bmN0aW9uIHJvdXRlcyBhIG1vZGVsIHRvIGFsbCBvdGhlciBtb2RlbHMuXG5cblx0YWxsIGZ1bmN0aW9ucyB0aGF0IGFyZSByb3V0ZWQgaGF2ZSBhIHByb3BlcnR5IGAuY29udmVyc2lvbmAgYXR0YWNoZWRcblx0dG8gdGhlIHJldHVybmVkIHN5bnRoZXRpYyBmdW5jdGlvbi4gVGhpcyBwcm9wZXJ0eSBpcyBhbiBhcnJheVxuXHRvZiBzdHJpbmdzLCBlYWNoIHdpdGggdGhlIHN0ZXBzIGluIGJldHdlZW4gdGhlICdmcm9tJyBhbmQgJ3RvJ1xuXHRjb2xvciBtb2RlbHMgKGluY2x1c2l2ZSkuXG5cblx0Y29udmVyc2lvbnMgdGhhdCBhcmUgbm90IHBvc3NpYmxlIHNpbXBseSBhcmUgbm90IGluY2x1ZGVkLlxuKi9cblxuZnVuY3Rpb24gYnVpbGRHcmFwaCgpIHtcblx0dmFyIGdyYXBoID0ge307XG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS9vYmplY3Qta2V5cy12cy1mb3ItaW4td2l0aC1jbG9zdXJlLzNcblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Z3JhcGhbbW9kZWxzW2ldXSA9IHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tLzEtdnMtaW5maW5pdHlcblx0XHRcdC8vIG1pY3JvLW9wdCwgYnV0IHRoaXMgaXMgc2ltcGxlLlxuXHRcdFx0ZGlzdGFuY2U6IC0xLFxuXHRcdFx0cGFyZW50OiBudWxsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2hcbmZ1bmN0aW9uIGRlcml2ZUJGUyhmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gYnVpbGRHcmFwaCgpO1xuXHR2YXIgcXVldWUgPSBbZnJvbU1vZGVsXTsgLy8gdW5zaGlmdCAtPiBxdWV1ZSAtPiBwb3BcblxuXHRncmFwaFtmcm9tTW9kZWxdLmRpc3RhbmNlID0gMDtcblxuXHR3aGlsZSAocXVldWUubGVuZ3RoKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSBxdWV1ZS5wb3AoKTtcblx0XHR2YXIgYWRqYWNlbnRzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnNbY3VycmVudF0pO1xuXG5cdFx0Zm9yICh2YXIgbGVuID0gYWRqYWNlbnRzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dmFyIGFkamFjZW50ID0gYWRqYWNlbnRzW2ldO1xuXHRcdFx0dmFyIG5vZGUgPSBncmFwaFthZGphY2VudF07XG5cblx0XHRcdGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuXHRcdFx0XHRub2RlLmRpc3RhbmNlID0gZ3JhcGhbY3VycmVudF0uZGlzdGFuY2UgKyAxO1xuXHRcdFx0XHRub2RlLnBhcmVudCA9IGN1cnJlbnQ7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gbGluayhmcm9tLCB0bykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRyZXR1cm4gdG8oZnJvbShhcmdzKSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG5cdHZhciBwYXRoID0gW2dyYXBoW3RvTW9kZWxdLnBhcmVudCwgdG9Nb2RlbF07XG5cdHZhciBmbiA9IGNvbnZlcnNpb25zW2dyYXBoW3RvTW9kZWxdLnBhcmVudF1bdG9Nb2RlbF07XG5cblx0dmFyIGN1ciA9IGdyYXBoW3RvTW9kZWxdLnBhcmVudDtcblx0d2hpbGUgKGdyYXBoW2N1cl0ucGFyZW50KSB7XG5cdFx0cGF0aC51bnNoaWZ0KGdyYXBoW2N1cl0ucGFyZW50KTtcblx0XHRmbiA9IGxpbmsoY29udmVyc2lvbnNbZ3JhcGhbY3VyXS5wYXJlbnRdW2N1cl0sIGZuKTtcblx0XHRjdXIgPSBncmFwaFtjdXJdLnBhcmVudDtcblx0fVxuXG5cdGZuLmNvbnZlcnNpb24gPSBwYXRoO1xuXHRyZXR1cm4gZm47XG59XG5cbnZhciByb3V0ZSA9IGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG5cdHZhciBjb252ZXJzaW9uID0ge307XG5cblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGdyYXBoKTtcblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdHZhciB0b01vZGVsID0gbW9kZWxzW2ldO1xuXHRcdHZhciBub2RlID0gZ3JhcGhbdG9Nb2RlbF07XG5cblx0XHRpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcblx0XHRcdC8vIG5vIHBvc3NpYmxlIGNvbnZlcnNpb24sIG9yIHRoaXMgbm9kZSBpcyB0aGUgc291cmNlIG1vZGVsLlxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udmVyc2lvblt0b01vZGVsXSA9IHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKTtcblx0fVxuXG5cdHJldHVybiBjb252ZXJzaW9uO1xufTtcblxudmFyIGNvbnZlcnQgPSB7fTtcblxudmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHZhciByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIHdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHRjb252ZXJ0W2Zyb21Nb2RlbF0gPSB7fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0uY2hhbm5lbHN9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5sYWJlbHN9KTtcblxuXHR2YXIgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0dmFyIHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uICh0b01vZGVsKSB7XG5cdFx0dmFyIGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxudmFyIGNvbG9yQ29udmVydCA9IGNvbnZlcnQ7XG5cbnZhciBjb2xvck5hbWUkMSA9IHtcclxuXHRcImFsaWNlYmx1ZVwiOiBbMjQwLCAyNDgsIDI1NV0sXHJcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxyXG5cdFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXHJcblx0XCJhenVyZVwiOiBbMjQwLCAyNTUsIDI1NV0sXHJcblx0XCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXHJcblx0XCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxyXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxyXG5cdFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxyXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMjU1XSxcclxuXHRcImJsdWV2aW9sZXRcIjogWzEzOCwgNDMsIDIyNl0sXHJcblx0XCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxyXG5cdFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcclxuXHRcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcclxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcclxuXHRcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcclxuXHRcImNvcmFsXCI6IFsyNTUsIDEyNywgODBdLFxyXG5cdFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxyXG5cdFwiY29ybnNpbGtcIjogWzI1NSwgMjQ4LCAyMjBdLFxyXG5cdFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxyXG5cdFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOV0sXHJcblx0XCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxyXG5cdFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcclxuXHRcImRhcmtncmF5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtncmVlblwiOiBbMCwgMTAwLCAwXSxcclxuXHRcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtraGFraVwiOiBbMTg5LCAxODMsIDEwN10sXHJcblx0XCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxyXG5cdFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcclxuXHRcImRhcmtvcmFuZ2VcIjogWzI1NSwgMTQwLCAwXSxcclxuXHRcImRhcmtvcmNoaWRcIjogWzE1MywgNTAsIDIwNF0sXHJcblx0XCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxyXG5cdFwiZGFya3NhbG1vblwiOiBbMjMzLCAxNTAsIDEyMl0sXHJcblx0XCJkYXJrc2VhZ3JlZW5cIjogWzE0MywgMTg4LCAxNDNdLFxyXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxyXG5cdFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcclxuXHRcImRhcmt2aW9sZXRcIjogWzE0OCwgMCwgMjExXSxcclxuXHRcImRlZXBwaW5rXCI6IFsyNTUsIDIwLCAxNDddLFxyXG5cdFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcclxuXHRcImRpbWdyYXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZGltZ3JleVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxyXG5cdFwiZmlyZWJyaWNrXCI6IFsxNzgsIDM0LCAzNF0sXHJcblx0XCJmbG9yYWx3aGl0ZVwiOiBbMjU1LCAyNTAsIDI0MF0sXHJcblx0XCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxyXG5cdFwiZnVjaHNpYVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcclxuXHRcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxyXG5cdFwiZ29sZFwiOiBbMjU1LCAyMTUsIDBdLFxyXG5cdFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxyXG5cdFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJncmVlblwiOiBbMCwgMTI4LCAwXSxcclxuXHRcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxyXG5cdFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJob25leWRld1wiOiBbMjQwLCAyNTUsIDI0MF0sXHJcblx0XCJob3RwaW5rXCI6IFsyNTUsIDEwNSwgMTgwXSxcclxuXHRcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxyXG5cdFwiaW5kaWdvXCI6IFs3NSwgMCwgMTMwXSxcclxuXHRcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcclxuXHRcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcclxuXHRcImxhdmVuZGVyXCI6IFsyMzAsIDIzMCwgMjUwXSxcclxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzI1NSwgMjQwLCAyNDVdLFxyXG5cdFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXHJcblx0XCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxyXG5cdFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcclxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxyXG5cdFwibGlnaHRjeWFuXCI6IFsyMjQsIDI1NSwgMjU1XSxcclxuXHRcImxpZ2h0Z29sZGVucm9keWVsbG93XCI6IFsyNTAsIDI1MCwgMjEwXSxcclxuXHRcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcclxuXHRcImxpZ2h0Z3JleVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxyXG5cdFwibGlnaHRzYWxtb25cIjogWzI1NSwgMTYwLCAxMjJdLFxyXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIsIDE3OCwgMTcwXSxcclxuXHRcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXHJcblx0XCJsaWdodHNsYXRlZ3JheVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXHJcblx0XCJsaWdodHllbGxvd1wiOiBbMjU1LCAyNTUsIDIyNF0sXHJcblx0XCJsaW1lXCI6IFswLCAyNTUsIDBdLFxyXG5cdFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXHJcblx0XCJsaW5lblwiOiBbMjUwLCAyNDAsIDIzMF0sXHJcblx0XCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXHJcblx0XCJtZWRpdW1hcXVhbWFyaW5lXCI6IFsxMDIsIDIwNSwgMTcwXSxcclxuXHRcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXHJcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXHJcblx0XCJtZWRpdW1wdXJwbGVcIjogWzE0NywgMTEyLCAyMTldLFxyXG5cdFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXHJcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxyXG5cdFwibWVkaXVtc3ByaW5nZ3JlZW5cIjogWzAsIDI1MCwgMTU0XSxcclxuXHRcIm1lZGl1bXR1cnF1b2lzZVwiOiBbNzIsIDIwOSwgMjA0XSxcclxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcclxuXHRcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxyXG5cdFwibWludGNyZWFtXCI6IFsyNDUsIDI1NSwgMjUwXSxcclxuXHRcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXHJcblx0XCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXHJcblx0XCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXHJcblx0XCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxyXG5cdFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXHJcblx0XCJvbGl2ZVwiOiBbMTI4LCAxMjgsIDBdLFxyXG5cdFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxyXG5cdFwib3JhbmdlXCI6IFsyNTUsIDE2NSwgMF0sXHJcblx0XCJvcmFuZ2VyZWRcIjogWzI1NSwgNjksIDBdLFxyXG5cdFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcclxuXHRcInBhbGVnb2xkZW5yb2RcIjogWzIzOCwgMjMyLCAxNzBdLFxyXG5cdFwicGFsZWdyZWVuXCI6IFsxNTIsIDI1MSwgMTUyXSxcclxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxyXG5cdFwicGFsZXZpb2xldHJlZFwiOiBbMjE5LCAxMTIsIDE0N10sXHJcblx0XCJwYXBheWF3aGlwXCI6IFsyNTUsIDIzOSwgMjEzXSxcclxuXHRcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXHJcblx0XCJwZXJ1XCI6IFsyMDUsIDEzMywgNjNdLFxyXG5cdFwicGlua1wiOiBbMjU1LCAxOTIsIDIwM10sXHJcblx0XCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcclxuXHRcInBvd2RlcmJsdWVcIjogWzE3NiwgMjI0LCAyMzBdLFxyXG5cdFwicHVycGxlXCI6IFsxMjgsIDAsIDEyOF0sXHJcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxyXG5cdFwicmVkXCI6IFsyNTUsIDAsIDBdLFxyXG5cdFwicm9zeWJyb3duXCI6IFsxODgsIDE0MywgMTQzXSxcclxuXHRcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcclxuXHRcInNhZGRsZWJyb3duXCI6IFsxMzksIDY5LCAxOV0sXHJcblx0XCJzYWxtb25cIjogWzI1MCwgMTI4LCAxMTRdLFxyXG5cdFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcclxuXHRcInNlYWdyZWVuXCI6IFs0NiwgMTM5LCA4N10sXHJcblx0XCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXHJcblx0XCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcclxuXHRcInNpbHZlclwiOiBbMTkyLCAxOTIsIDE5Ml0sXHJcblx0XCJza3libHVlXCI6IFsxMzUsIDIwNiwgMjM1XSxcclxuXHRcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcclxuXHRcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXHJcblx0XCJzcHJpbmdncmVlblwiOiBbMCwgMjU1LCAxMjddLFxyXG5cdFwic3RlZWxibHVlXCI6IFs3MCwgMTMwLCAxODBdLFxyXG5cdFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcclxuXHRcInRlYWxcIjogWzAsIDEyOCwgMTI4XSxcclxuXHRcInRoaXN0bGVcIjogWzIxNiwgMTkxLCAyMTZdLFxyXG5cdFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXHJcblx0XCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXHJcblx0XCJ2aW9sZXRcIjogWzIzOCwgMTMwLCAyMzhdLFxyXG5cdFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxyXG5cdFwid2hpdGVcIjogWzI1NSwgMjU1LCAyNTVdLFxyXG5cdFwid2hpdGVzbW9rZVwiOiBbMjQ1LCAyNDUsIDI0NV0sXHJcblx0XCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcclxuXHRcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdXHJcbn07XG5cbi8qIE1JVCBsaWNlbnNlICovXG5cblxudmFyIGNvbG9yU3RyaW5nID0ge1xuICAgZ2V0UmdiYTogZ2V0UmdiYSxcbiAgIGdldEhzbGE6IGdldEhzbGEsXG4gICBnZXRSZ2I6IGdldFJnYixcbiAgIGdldEhzbDogZ2V0SHNsLFxuICAgZ2V0SHdiOiBnZXRId2IsXG4gICBnZXRBbHBoYTogZ2V0QWxwaGEsXG5cbiAgIGhleFN0cmluZzogaGV4U3RyaW5nLFxuICAgcmdiU3RyaW5nOiByZ2JTdHJpbmcsXG4gICByZ2JhU3RyaW5nOiByZ2JhU3RyaW5nLFxuICAgcGVyY2VudFN0cmluZzogcGVyY2VudFN0cmluZyxcbiAgIHBlcmNlbnRhU3RyaW5nOiBwZXJjZW50YVN0cmluZyxcbiAgIGhzbFN0cmluZzogaHNsU3RyaW5nLFxuICAgaHNsYVN0cmluZzogaHNsYVN0cmluZyxcbiAgIGh3YlN0cmluZzogaHdiU3RyaW5nLFxuICAga2V5d29yZDoga2V5d29yZFxufTtcblxuZnVuY3Rpb24gZ2V0UmdiYShzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgYWJiciA9ICAvXiMoW2EtZkEtRjAtOV17Myw0fSkkL2ksXG4gICAgICAgaGV4ID0gIC9eIyhbYS1mQS1GMC05XXs2fShbYS1mQS1GMC05XXsyfSk/KSQvaSxcbiAgICAgICByZ2JhID0gL15yZ2JhP1xcKFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKixcXHMqKFsrLV0/XFxkKylcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpJC9pLFxuICAgICAgIHBlciA9IC9ecmdiYT9cXChcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqLFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvaSxcbiAgICAgICBrZXl3b3JkID0gLyhcXHcrKS87XG5cbiAgIHZhciByZ2IgPSBbMCwgMCwgMF0sXG4gICAgICAgYSA9IDEsXG4gICAgICAgbWF0Y2ggPSBzdHJpbmcubWF0Y2goYWJiciksXG4gICAgICAgaGV4QWxwaGEgPSBcIlwiO1xuICAgaWYgKG1hdGNoKSB7XG4gICAgICBtYXRjaCA9IG1hdGNoWzFdO1xuICAgICAgaGV4QWxwaGEgPSBtYXRjaFszXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpXSArIG1hdGNoW2ldLCAxNik7XG4gICAgICB9XG4gICAgICBpZiAoaGV4QWxwaGEpIHtcbiAgICAgICAgIGEgPSBNYXRoLnJvdW5kKChwYXJzZUludChoZXhBbHBoYSArIGhleEFscGhhLCAxNikgLyAyNTUpICogMTAwKSAvIDEwMDtcbiAgICAgIH1cbiAgIH1cbiAgIGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGhleCkpIHtcbiAgICAgIGhleEFscGhhID0gbWF0Y2hbMl07XG4gICAgICBtYXRjaCA9IG1hdGNoWzFdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IHBhcnNlSW50KG1hdGNoLnNsaWNlKGkgKiAyLCBpICogMiArIDIpLCAxNik7XG4gICAgICB9XG4gICAgICBpZiAoaGV4QWxwaGEpIHtcbiAgICAgICAgIGEgPSBNYXRoLnJvdW5kKChwYXJzZUludChoZXhBbHBoYSwgMTYpIC8gMjU1KSAqIDEwMCkgLyAxMDA7XG4gICAgICB9XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChyZ2JhKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IHBhcnNlSW50KG1hdGNoW2kgKyAxXSk7XG4gICAgICB9XG4gICAgICBhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChwZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgcmdiW2ldID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG1hdGNoW2kgKyAxXSkgKiAyLjU1KTtcbiAgICAgIH1cbiAgICAgIGEgPSBwYXJzZUZsb2F0KG1hdGNoWzRdKTtcbiAgIH1cbiAgIGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGtleXdvcmQpKSB7XG4gICAgICBpZiAobWF0Y2hbMV0gPT0gXCJ0cmFuc3BhcmVudFwiKSB7XG4gICAgICAgICByZXR1cm4gWzAsIDAsIDAsIDBdO1xuICAgICAgfVxuICAgICAgcmdiID0gY29sb3JOYW1lJDFbbWF0Y2hbMV1dO1xuICAgICAgaWYgKCFyZ2IpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgIH1cblxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJnYltpXSA9IHNjYWxlKHJnYltpXSwgMCwgMjU1KTtcbiAgIH1cbiAgIGlmICghYSAmJiBhICE9IDApIHtcbiAgICAgIGEgPSAxO1xuICAgfVxuICAgZWxzZSB7XG4gICAgICBhID0gc2NhbGUoYSwgMCwgMSk7XG4gICB9XG4gICByZ2JbM10gPSBhO1xuICAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gZ2V0SHNsYShzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHNsID0gL15oc2xhP1xcKFxccyooWystXT9cXGQrKSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkvO1xuICAgdmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGhzbCk7XG4gICBpZiAobWF0Y2gpIHtcbiAgICAgIHZhciBhbHBoYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgICAgdmFyIGggPSBzY2FsZShwYXJzZUludChtYXRjaFsxXSksIDAsIDM2MCksXG4gICAgICAgICAgcyA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbMl0pLCAwLCAxMDApLFxuICAgICAgICAgIGwgPSBzY2FsZShwYXJzZUZsb2F0KG1hdGNoWzNdKSwgMCwgMTAwKSxcbiAgICAgICAgICBhID0gc2NhbGUoaXNOYU4oYWxwaGEpID8gMSA6IGFscGhhLCAwLCAxKTtcbiAgICAgIHJldHVybiBbaCwgcywgbCwgYV07XG4gICB9XG59XG5cbmZ1bmN0aW9uIGdldEh3YihzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHdiID0gL15od2JcXChcXHMqKFsrLV0/XFxkKykoPzpkZWcpP1xccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpLztcbiAgIHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaChod2IpO1xuICAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICAgICB2YXIgaCA9IHNjYWxlKHBhcnNlSW50KG1hdGNoWzFdKSwgMCwgMzYwKSxcbiAgICAgICAgICB3ID0gc2NhbGUocGFyc2VGbG9hdChtYXRjaFsyXSksIDAsIDEwMCksXG4gICAgICAgICAgYiA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbM10pLCAwLCAxMDApLFxuICAgICAgICAgIGEgPSBzY2FsZShpc05hTihhbHBoYSkgPyAxIDogYWxwaGEsIDAsIDEpO1xuICAgICAgcmV0dXJuIFtoLCB3LCBiLCBhXTtcbiAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmdiKHN0cmluZykge1xuICAgdmFyIHJnYmEgPSBnZXRSZ2JhKHN0cmluZyk7XG4gICByZXR1cm4gcmdiYSAmJiByZ2JhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRIc2woc3RyaW5nKSB7XG4gIHZhciBoc2xhID0gZ2V0SHNsYShzdHJpbmcpO1xuICByZXR1cm4gaHNsYSAmJiBoc2xhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRBbHBoYShzdHJpbmcpIHtcbiAgIHZhciB2YWxzID0gZ2V0UmdiYShzdHJpbmcpO1xuICAgaWYgKHZhbHMpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxuICAgZWxzZSBpZiAodmFscyA9IGdldEhzbGEoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHZhbHNbM107XG4gICB9XG4gICBlbHNlIGlmICh2YWxzID0gZ2V0SHdiKHN0cmluZykpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxufVxuXG4vLyBnZW5lcmF0b3JzXG5mdW5jdGlvbiBoZXhTdHJpbmcocmdiYSwgYSkge1xuICAgdmFyIGEgPSAoYSAhPT0gdW5kZWZpbmVkICYmIHJnYmEubGVuZ3RoID09PSAzKSA/IGEgOiByZ2JhWzNdO1xuICAgcmV0dXJuIFwiI1wiICsgaGV4RG91YmxlKHJnYmFbMF0pIFxuICAgICAgICAgICAgICArIGhleERvdWJsZShyZ2JhWzFdKVxuICAgICAgICAgICAgICArIGhleERvdWJsZShyZ2JhWzJdKVxuICAgICAgICAgICAgICArIChcbiAgICAgICAgICAgICAgICAgKGEgPj0gMCAmJiBhIDwgMSlcbiAgICAgICAgICAgICAgICAgPyBoZXhEb3VibGUoTWF0aC5yb3VuZChhICogMjU1KSlcbiAgICAgICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgICAgICk7XG59XG5cbmZ1bmN0aW9uIHJnYlN0cmluZyhyZ2JhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhIDwgMSB8fCAocmdiYVszXSAmJiByZ2JhWzNdIDwgMSkpIHtcbiAgICAgIHJldHVybiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKTtcbiAgIH1cbiAgIHJldHVybiBcInJnYihcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAocmdiYVszXSAhPT0gdW5kZWZpbmVkID8gcmdiYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwicmdiYShcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXVxuICAgICAgICAgICArIFwiLCBcIiArIGFscGhhICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnRTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKHJnYmFbM10gJiYgcmdiYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpO1xuICAgfVxuICAgdmFyIHIgPSBNYXRoLnJvdW5kKHJnYmFbMF0vMjU1ICogMTAwKSxcbiAgICAgICBnID0gTWF0aC5yb3VuZChyZ2JhWzFdLzI1NSAqIDEwMCksXG4gICAgICAgYiA9IE1hdGgucm91bmQocmdiYVsyXS8yNTUgKiAxMDApO1xuXG4gICByZXR1cm4gXCJyZ2IoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSlcIjtcbn1cblxuZnVuY3Rpb24gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIHZhciByID0gTWF0aC5yb3VuZChyZ2JhWzBdLzI1NSAqIDEwMCksXG4gICAgICAgZyA9IE1hdGgucm91bmQocmdiYVsxXS8yNTUgKiAxMDApLFxuICAgICAgIGIgPSBNYXRoLnJvdW5kKHJnYmFbMl0vMjU1ICogMTAwKTtcbiAgIHJldHVybiBcInJnYmEoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSwgXCIgKyAoYWxwaGEgfHwgcmdiYVszXSB8fCAxKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xTdHJpbmcoaHNsYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKGhzbGFbM10gJiYgaHNsYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gaHNsYVN0cmluZyhoc2xhLCBhbHBoYSk7XG4gICB9XG4gICByZXR1cm4gXCJoc2woXCIgKyBoc2xhWzBdICsgXCIsIFwiICsgaHNsYVsxXSArIFwiJSwgXCIgKyBoc2xhWzJdICsgXCIlKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xhU3RyaW5nKGhzbGEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHNsYVszXSAhPT0gdW5kZWZpbmVkID8gaHNsYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwiaHNsYShcIiArIGhzbGFbMF0gKyBcIiwgXCIgKyBoc2xhWzFdICsgXCIlLCBcIiArIGhzbGFbMl0gKyBcIiUsIFwiXG4gICAgICAgICAgICsgYWxwaGEgKyBcIilcIjtcbn1cblxuLy8gaHdiIGlzIGEgYml0IGRpZmZlcmVudCB0aGFuIHJnYihhKSAmIGhzbChhKSBzaW5jZSB0aGVyZSBpcyBubyBhbHBoYSBzcGVjaWZpYyBzeW50YXhcbi8vIChod2IgaGF2ZSBhbHBoYSBvcHRpb25hbCAmIDEgaXMgZGVmYXVsdCB2YWx1ZSlcbmZ1bmN0aW9uIGh3YlN0cmluZyhod2IsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHdiWzNdICE9PSB1bmRlZmluZWQgPyBod2JbM10gOiAxKTtcbiAgIH1cbiAgIHJldHVybiBcImh3YihcIiArIGh3YlswXSArIFwiLCBcIiArIGh3YlsxXSArIFwiJSwgXCIgKyBod2JbMl0gKyBcIiVcIlxuICAgICAgICAgICArIChhbHBoYSAhPT0gdW5kZWZpbmVkICYmIGFscGhhICE9PSAxID8gXCIsIFwiICsgYWxwaGEgOiBcIlwiKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkKHJnYikge1xuICByZXR1cm4gcmV2ZXJzZU5hbWVzW3JnYi5zbGljZSgwLCAzKV07XG59XG5cbi8vIGhlbHBlcnNcbmZ1bmN0aW9uIHNjYWxlKG51bSwgbWluLCBtYXgpIHtcbiAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIG51bSksIG1heCk7XG59XG5cbmZ1bmN0aW9uIGhleERvdWJsZShudW0pIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIChzdHIubGVuZ3RoIDwgMikgPyBcIjBcIiArIHN0ciA6IHN0cjtcbn1cblxuXG4vL2NyZWF0ZSBhIGxpc3Qgb2YgcmV2ZXJzZSBjb2xvciBuYW1lc1xudmFyIHJldmVyc2VOYW1lcyA9IHt9O1xuZm9yICh2YXIgbmFtZSBpbiBjb2xvck5hbWUkMSkge1xuICAgcmV2ZXJzZU5hbWVzW2NvbG9yTmFtZSQxW25hbWVdXSA9IG5hbWU7XG59XG5cbi8qIE1JVCBsaWNlbnNlICovXG5cblxuXG52YXIgQ29sb3IgPSBmdW5jdGlvbiAob2JqKSB7XG5cdGlmIChvYmogaW5zdGFuY2VvZiBDb2xvcikge1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIENvbG9yKSkge1xuXHRcdHJldHVybiBuZXcgQ29sb3Iob2JqKTtcblx0fVxuXG5cdHRoaXMudmFsaWQgPSBmYWxzZTtcblx0dGhpcy52YWx1ZXMgPSB7XG5cdFx0cmdiOiBbMCwgMCwgMF0sXG5cdFx0aHNsOiBbMCwgMCwgMF0sXG5cdFx0aHN2OiBbMCwgMCwgMF0sXG5cdFx0aHdiOiBbMCwgMCwgMF0sXG5cdFx0Y215azogWzAsIDAsIDAsIDBdLFxuXHRcdGFscGhhOiAxXG5cdH07XG5cblx0Ly8gcGFyc2UgQ29sb3IoKSBhcmd1bWVudFxuXHR2YXIgdmFscztcblx0aWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG5cdFx0dmFscyA9IGNvbG9yU3RyaW5nLmdldFJnYmEob2JqKTtcblx0XHRpZiAodmFscykge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscyA9IGNvbG9yU3RyaW5nLmdldEhzbGEob2JqKSkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscyA9IGNvbG9yU3RyaW5nLmdldEh3YihvYmopKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdmFscyk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG5cdFx0dmFscyA9IG9iajtcblx0XHRpZiAodmFscy5yICE9PSB1bmRlZmluZWQgfHwgdmFscy5yZWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy5sICE9PSB1bmRlZmluZWQgfHwgdmFscy5saWdodG5lc3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy52ICE9PSB1bmRlZmluZWQgfHwgdmFscy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHN2JywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLncgIT09IHVuZGVmaW5lZCB8fCB2YWxzLndoaXRlbmVzcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLmMgIT09IHVuZGVmaW5lZCB8fCB2YWxzLmN5YW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2NteWsnLCB2YWxzKTtcblx0XHR9XG5cdH1cbn07XG5cbkNvbG9yLnByb3RvdHlwZSA9IHtcblx0aXNWYWxpZDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbGlkO1xuXHR9LFxuXHRyZ2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgncmdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0aHNsOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ2hzbCcsIGFyZ3VtZW50cyk7XG5cdH0sXG5cdGhzdjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdoc3YnLCBhcmd1bWVudHMpO1xuXHR9LFxuXHRod2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgnaHdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0Y215azogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdjbXlrJywgYXJndW1lbnRzKTtcblx0fSxcblxuXHRyZ2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5yZ2I7XG5cdH0sXG5cdGhzbEFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmhzbDtcblx0fSxcblx0aHN2QXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuaHN2O1xuXHR9LFxuXHRod2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0XHRpZiAodmFsdWVzLmFscGhhICE9PSAxKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWVzLmh3Yi5jb25jYXQoW3ZhbHVlcy5hbHBoYV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWVzLmh3Yjtcblx0fSxcblx0Y215a0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmNteWs7XG5cdH0sXG5cdHJnYmFBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0XHRyZXR1cm4gdmFsdWVzLnJnYi5jb25jYXQoW3ZhbHVlcy5hbHBoYV0pO1xuXHR9LFxuXHRoc2xhQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdFx0cmV0dXJuIHZhbHVlcy5oc2wuY29uY2F0KFt2YWx1ZXMuYWxwaGFdKTtcblx0fSxcblx0YWxwaGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnZhbHVlcy5hbHBoYTtcblx0XHR9XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2FscGhhJywgdmFsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZWQ6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAwLCB2YWwpO1xuXHR9LFxuXHRncmVlbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ3JnYicsIDEsIHZhbCk7XG5cdH0sXG5cdGJsdWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAyLCB2YWwpO1xuXHR9LFxuXHRodWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAodmFsKSB7XG5cdFx0XHR2YWwgJT0gMzYwO1xuXHRcdFx0dmFsID0gdmFsIDwgMCA/IDM2MCArIHZhbCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHNsJywgMCwgdmFsKTtcblx0fSxcblx0c2F0dXJhdGlvbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDEsIHZhbCk7XG5cdH0sXG5cdGxpZ2h0bmVzczogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDIsIHZhbCk7XG5cdH0sXG5cdHNhdHVyYXRpb252OiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHN2JywgMSwgdmFsKTtcblx0fSxcblx0d2hpdGVuZXNzOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHdiJywgMSwgdmFsKTtcblx0fSxcblx0YmxhY2tuZXNzOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHdiJywgMiwgdmFsKTtcblx0fSxcblx0dmFsdWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc3YnLCAyLCB2YWwpO1xuXHR9LFxuXHRjeWFuOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDAsIHZhbCk7XG5cdH0sXG5cdG1hZ2VudGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdjbXlrJywgMSwgdmFsKTtcblx0fSxcblx0eWVsbG93OiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDIsIHZhbCk7XG5cdH0sXG5cdGJsYWNrOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDMsIHZhbCk7XG5cdH0sXG5cblx0aGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLmhleFN0cmluZyh0aGlzLnZhbHVlcy5yZ2IpO1xuXHR9LFxuXHRyZ2JTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcucmdiU3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRyZ2JhU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLnJnYmFTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdHBlcmNlbnRTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcucGVyY2VudFN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHNsU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLmhzbFN0cmluZyh0aGlzLnZhbHVlcy5oc2wsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHNsYVN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb2xvclN0cmluZy5oc2xhU3RyaW5nKHRoaXMudmFsdWVzLmhzbCwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRod2JTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcuaHdiU3RyaW5nKHRoaXMudmFsdWVzLmh3YiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRrZXl3b3JkOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLmtleXdvcmQodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cblx0cmdiTnVtYmVyOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHRyZXR1cm4gKHJnYlswXSA8PCAxNikgfCAocmdiWzFdIDw8IDgpIHwgcmdiWzJdO1xuXHR9LFxuXG5cdGx1bWlub3NpdHk6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHR2YXIgbHVtID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBjaGFuID0gcmdiW2ldIC8gMjU1O1xuXHRcdFx0bHVtW2ldID0gKGNoYW4gPD0gMC4wMzkyOCkgPyBjaGFuIC8gMTIuOTIgOiBNYXRoLnBvdygoKGNoYW4gKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7XG5cdFx0fVxuXHRcdHJldHVybiAwLjIxMjYgKiBsdW1bMF0gKyAwLjcxNTIgKiBsdW1bMV0gKyAwLjA3MjIgKiBsdW1bMl07XG5cdH0sXG5cblx0Y29udHJhc3Q6IGZ1bmN0aW9uIChjb2xvcjIpIHtcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI2NvbnRyYXN0LXJhdGlvZGVmXG5cdFx0dmFyIGx1bTEgPSB0aGlzLmx1bWlub3NpdHkoKTtcblx0XHR2YXIgbHVtMiA9IGNvbG9yMi5sdW1pbm9zaXR5KCk7XG5cdFx0aWYgKGx1bTEgPiBsdW0yKSB7XG5cdFx0XHRyZXR1cm4gKGx1bTEgKyAwLjA1KSAvIChsdW0yICsgMC4wNSk7XG5cdFx0fVxuXHRcdHJldHVybiAobHVtMiArIDAuMDUpIC8gKGx1bTEgKyAwLjA1KTtcblx0fSxcblxuXHRsZXZlbDogZnVuY3Rpb24gKGNvbG9yMikge1xuXHRcdHZhciBjb250cmFzdFJhdGlvID0gdGhpcy5jb250cmFzdChjb2xvcjIpO1xuXHRcdGlmIChjb250cmFzdFJhdGlvID49IDcuMSkge1xuXHRcdFx0cmV0dXJuICdBQUEnO1xuXHRcdH1cblxuXHRcdHJldHVybiAoY29udHJhc3RSYXRpbyA+PSA0LjUpID8gJ0FBJyA6ICcnO1xuXHR9LFxuXG5cdGRhcms6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBZSVEgZXF1YXRpb24gZnJvbSBodHRwOi8vMjR3YXlzLm9yZy8yMDEwL2NhbGN1bGF0aW5nLWNvbG9yLWNvbnRyYXN0XG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHR2YXIgeWlxID0gKHJnYlswXSAqIDI5OSArIHJnYlsxXSAqIDU4NyArIHJnYlsyXSAqIDExNCkgLyAxMDAwO1xuXHRcdHJldHVybiB5aXEgPCAxMjg7XG5cdH0sXG5cblx0bGlnaHQ6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gIXRoaXMuZGFyaygpO1xuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cmdiW2ldID0gMjU1IC0gdGhpcy52YWx1ZXMucmdiW2ldO1xuXHRcdH1cblx0XHR0aGlzLnNldFZhbHVlcygncmdiJywgcmdiKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRsaWdodGVuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsyXSArPSBoc2xbMl0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRkYXJrZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0aHNsWzJdIC09IGhzbFsyXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCBoc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHNhdHVyYXRlOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsxXSArPSBoc2xbMV0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRkZXNhdHVyYXRlOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsxXSAtPSBoc2xbMV0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3aGl0ZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBod2IgPSB0aGlzLnZhbHVlcy5od2I7XG5cdFx0aHdiWzFdICs9IGh3YlsxXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCBod2IpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGJsYWNrZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBod2IgPSB0aGlzLnZhbHVlcy5od2I7XG5cdFx0aHdiWzJdICs9IGh3YlsyXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCBod2IpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGdyZXlzY2FsZTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HcmF5c2NhbGUjQ29udmVydGluZ19jb2xvcl90b19ncmF5c2NhbGVcblx0XHR2YXIgdmFsID0gcmdiWzBdICogMC4zICsgcmdiWzFdICogMC41OSArIHJnYlsyXSAqIDAuMTE7XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIFt2YWwsIHZhbCwgdmFsXSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xlYXJlcjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGFscGhhID0gdGhpcy52YWx1ZXMuYWxwaGE7XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2FscGhhJywgYWxwaGEgLSAoYWxwaGEgKiByYXRpbykpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdG9wYXF1ZXI6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBhbHBoYSA9IHRoaXMudmFsdWVzLmFscGhhO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdhbHBoYScsIGFscGhhICsgKGFscGhhICogcmF0aW8pKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyb3RhdGU6IGZ1bmN0aW9uIChkZWdyZWVzKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHR2YXIgaHVlID0gKGhzbFswXSArIGRlZ3JlZXMpICUgMzYwO1xuXHRcdGhzbFswXSA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFBvcnRlZCBmcm9tIHNhc3MgaW1wbGVtZW50YXRpb24gaW4gQ1xuXHQgKiBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy9saWJzYXNzL2Jsb2IvMGU2YjRhMjg1MDA5MjM1NmFhM2VjZTA3YzZiMjQ5ZjAyMjFjYWNlZC9mdW5jdGlvbnMuY3BwI0wyMDlcblx0ICovXG5cdG1peDogZnVuY3Rpb24gKG1peGluQ29sb3IsIHdlaWdodCkge1xuXHRcdHZhciBjb2xvcjEgPSB0aGlzO1xuXHRcdHZhciBjb2xvcjIgPSBtaXhpbkNvbG9yO1xuXHRcdHZhciBwID0gd2VpZ2h0ID09PSB1bmRlZmluZWQgPyAwLjUgOiB3ZWlnaHQ7XG5cblx0XHR2YXIgdyA9IDIgKiBwIC0gMTtcblx0XHR2YXIgYSA9IGNvbG9yMS5hbHBoYSgpIC0gY29sb3IyLmFscGhhKCk7XG5cblx0XHR2YXIgdzEgPSAoKCh3ICogYSA9PT0gLTEpID8gdyA6ICh3ICsgYSkgLyAoMSArIHcgKiBhKSkgKyAxKSAvIDIuMDtcblx0XHR2YXIgdzIgPSAxIC0gdzE7XG5cblx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0LnJnYihcblx0XHRcdFx0dzEgKiBjb2xvcjEucmVkKCkgKyB3MiAqIGNvbG9yMi5yZWQoKSxcblx0XHRcdFx0dzEgKiBjb2xvcjEuZ3JlZW4oKSArIHcyICogY29sb3IyLmdyZWVuKCksXG5cdFx0XHRcdHcxICogY29sb3IxLmJsdWUoKSArIHcyICogY29sb3IyLmJsdWUoKVxuXHRcdFx0KVxuXHRcdFx0LmFscGhhKGNvbG9yMS5hbHBoYSgpICogcCArIGNvbG9yMi5hbHBoYSgpICogKDEgLSBwKSk7XG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmdiKCk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBOT1RFKFNCKTogdXNpbmcgbm9kZS1jbG9uZSBjcmVhdGVzIGEgZGVwZW5kZW5jeSB0byBCdWZmZXIgd2hlbiB1c2luZyBicm93c2VyaWZ5LFxuXHRcdC8vIG1ha2luZyB0aGUgZmluYWwgYnVpbGQgd2F5IHRvIGJpZyB0byBlbWJlZCBpbiBDaGFydC5qcy4gU28gbGV0J3MgZG8gaXQgbWFudWFsbHksXG5cdFx0Ly8gYXNzdW1pbmcgdGhhdCB2YWx1ZXMgdG8gY2xvbmUgYXJlIDEgZGltZW5zaW9uIGFycmF5cyBjb250YWluaW5nIG9ubHkgbnVtYmVycyxcblx0XHQvLyBleGNlcHQgJ2FscGhhJyB3aGljaCBpcyBhIG51bWJlci5cblx0XHR2YXIgcmVzdWx0ID0gbmV3IENvbG9yKCk7XG5cdFx0dmFyIHNvdXJjZSA9IHRoaXMudmFsdWVzO1xuXHRcdHZhciB0YXJnZXQgPSByZXN1bHQudmFsdWVzO1xuXHRcdHZhciB2YWx1ZSwgdHlwZTtcblxuXHRcdGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG5cdFx0XHRpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG5cdFx0XHRcdHZhbHVlID0gc291cmNlW3Byb3BdO1xuXHRcdFx0XHR0eXBlID0gKHt9KS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblx0XHRcdFx0aWYgKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcblx0XHRcdFx0XHR0YXJnZXRbcHJvcF0gPSB2YWx1ZS5zbGljZSgwKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuXHRcdFx0XHRcdHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ3VuZXhwZWN0ZWQgY29sb3IgdmFsdWU6JywgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufTtcblxuQ29sb3IucHJvdG90eXBlLnNwYWNlcyA9IHtcblx0cmdiOiBbJ3JlZCcsICdncmVlbicsICdibHVlJ10sXG5cdGhzbDogWydodWUnLCAnc2F0dXJhdGlvbicsICdsaWdodG5lc3MnXSxcblx0aHN2OiBbJ2h1ZScsICdzYXR1cmF0aW9uJywgJ3ZhbHVlJ10sXG5cdGh3YjogWydodWUnLCAnd2hpdGVuZXNzJywgJ2JsYWNrbmVzcyddLFxuXHRjbXlrOiBbJ2N5YW4nLCAnbWFnZW50YScsICd5ZWxsb3cnLCAnYmxhY2snXVxufTtcblxuQ29sb3IucHJvdG90eXBlLm1heGVzID0ge1xuXHRyZ2I6IFsyNTUsIDI1NSwgMjU1XSxcblx0aHNsOiBbMzYwLCAxMDAsIDEwMF0sXG5cdGhzdjogWzM2MCwgMTAwLCAxMDBdLFxuXHRod2I6IFszNjAsIDEwMCwgMTAwXSxcblx0Y215azogWzEwMCwgMTAwLCAxMDAsIDEwMF1cbn07XG5cbkNvbG9yLnByb3RvdHlwZS5nZXRWYWx1ZXMgPSBmdW5jdGlvbiAoc3BhY2UpIHtcblx0dmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHR2YXIgdmFscyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHR2YWxzW3NwYWNlLmNoYXJBdChpKV0gPSB2YWx1ZXNbc3BhY2VdW2ldO1xuXHR9XG5cblx0aWYgKHZhbHVlcy5hbHBoYSAhPT0gMSkge1xuXHRcdHZhbHMuYSA9IHZhbHVlcy5hbHBoYTtcblx0fVxuXG5cdC8vIHtyOiAyNTUsIGc6IDI1NSwgYjogMjU1LCBhOiAwLjR9XG5cdHJldHVybiB2YWxzO1xufTtcblxuQ29sb3IucHJvdG90eXBlLnNldFZhbHVlcyA9IGZ1bmN0aW9uIChzcGFjZSwgdmFscykge1xuXHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdHZhciBzcGFjZXMgPSB0aGlzLnNwYWNlcztcblx0dmFyIG1heGVzID0gdGhpcy5tYXhlcztcblx0dmFyIGFscGhhID0gMTtcblx0dmFyIGk7XG5cblx0dGhpcy52YWxpZCA9IHRydWU7XG5cblx0aWYgKHNwYWNlID09PSAnYWxwaGEnKSB7XG5cdFx0YWxwaGEgPSB2YWxzO1xuXHR9IGVsc2UgaWYgKHZhbHMubGVuZ3RoKSB7XG5cdFx0Ly8gWzEwLCAxMCwgMTBdXG5cdFx0dmFsdWVzW3NwYWNlXSA9IHZhbHMuc2xpY2UoMCwgc3BhY2UubGVuZ3RoKTtcblx0XHRhbHBoYSA9IHZhbHNbc3BhY2UubGVuZ3RoXTtcblx0fSBlbHNlIGlmICh2YWxzW3NwYWNlLmNoYXJBdCgwKV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIHtyOiAxMCwgZzogMTAsIGI6IDEwfVxuXHRcdGZvciAoaSA9IDA7IGkgPCBzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFsdWVzW3NwYWNlXVtpXSA9IHZhbHNbc3BhY2UuY2hhckF0KGkpXTtcblx0XHR9XG5cblx0XHRhbHBoYSA9IHZhbHMuYTtcblx0fSBlbHNlIGlmICh2YWxzW3NwYWNlc1tzcGFjZV1bMF1dICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB7cmVkOiAxMCwgZ3JlZW46IDEwLCBibHVlOiAxMH1cblx0XHR2YXIgY2hhbnMgPSBzcGFjZXNbc3BhY2VdO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YWx1ZXNbc3BhY2VdW2ldID0gdmFsc1tjaGFuc1tpXV07XG5cdFx0fVxuXG5cdFx0YWxwaGEgPSB2YWxzLmFscGhhO1xuXHR9XG5cblx0dmFsdWVzLmFscGhhID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKGFscGhhID09PSB1bmRlZmluZWQgPyB2YWx1ZXMuYWxwaGEgOiBhbHBoYSkpKTtcblxuXHRpZiAoc3BhY2UgPT09ICdhbHBoYScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgY2FwcGVkO1xuXG5cdC8vIGNhcCB2YWx1ZXMgb2YgdGhlIHNwYWNlIHByaW9yIGNvbnZlcnRpbmcgYWxsIHZhbHVlc1xuXHRmb3IgKGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRjYXBwZWQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihtYXhlc1tzcGFjZV1baV0sIHZhbHVlc1tzcGFjZV1baV0pKTtcblx0XHR2YWx1ZXNbc3BhY2VdW2ldID0gTWF0aC5yb3VuZChjYXBwZWQpO1xuXHR9XG5cblx0Ly8gY29udmVydCB0byBhbGwgdGhlIG90aGVyIGNvbG9yIHNwYWNlc1xuXHRmb3IgKHZhciBzbmFtZSBpbiBzcGFjZXMpIHtcblx0XHRpZiAoc25hbWUgIT09IHNwYWNlKSB7XG5cdFx0XHR2YWx1ZXNbc25hbWVdID0gY29sb3JDb252ZXJ0W3NwYWNlXVtzbmFtZV0odmFsdWVzW3NwYWNlXSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc2V0U3BhY2UgPSBmdW5jdGlvbiAoc3BhY2UsIGFyZ3MpIHtcblx0dmFyIHZhbHMgPSBhcmdzWzBdO1xuXG5cdGlmICh2YWxzID09PSB1bmRlZmluZWQpIHtcblx0XHQvLyBjb2xvci5yZ2IoKVxuXHRcdHJldHVybiB0aGlzLmdldFZhbHVlcyhzcGFjZSk7XG5cdH1cblxuXHQvLyBjb2xvci5yZ2IoMTAsIDEwLCAxMClcblx0aWYgKHR5cGVvZiB2YWxzID09PSAnbnVtYmVyJykge1xuXHRcdHZhbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcblx0fVxuXG5cdHRoaXMuc2V0VmFsdWVzKHNwYWNlLCB2YWxzKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uIChzcGFjZSwgaW5kZXgsIHZhbCkge1xuXHR2YXIgc3ZhbHVlcyA9IHRoaXMudmFsdWVzW3NwYWNlXTtcblx0aWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8gY29sb3IucmVkKClcblx0XHRyZXR1cm4gc3ZhbHVlc1tpbmRleF07XG5cdH0gZWxzZSBpZiAodmFsID09PSBzdmFsdWVzW2luZGV4XSkge1xuXHRcdC8vIGNvbG9yLnJlZChjb2xvci5yZWQoKSlcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8vIGNvbG9yLnJlZCgxMDApXG5cdHN2YWx1ZXNbaW5kZXhdID0gdmFsO1xuXHR0aGlzLnNldFZhbHVlcyhzcGFjZSwgc3ZhbHVlcyk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0d2luZG93LkNvbG9yID0gQ29sb3I7XG59XG5cbnZhciBjaGFydGpzQ29sb3IgPSBDb2xvcjtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnNcbiAqL1xudmFyIGhlbHBlcnMgPSB7XG5cdC8qKlxuXHQgKiBBbiBlbXB0eSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSwgZm9yIG9wdGlvbmFsIGNhbGxiYWNrLlxuXHQgKi9cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhIHVuaXF1ZSBpZCwgc2VxdWVudGlhbGx5IGdlbmVyYXRlZCBmcm9tIGEgZ2xvYmFsIHZhcmlhYmxlLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKiBAZnVuY3Rpb25cblx0ICovXG5cdHVpZDogKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZCA9IDA7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGlkKys7XG5cdFx0fTtcblx0fSgpKSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgbmVpdGhlciBudWxsIG5vciB1bmRlZmluZWQsIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHRpc051bGxPclVuZGVmOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSAoaW5jbHVkaW5nIHR5cGVkIGFycmF5cyksIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRpc0FycmF5OiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXHRcdGlmICh0eXBlLnN1YnN0cigwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc3Vic3RyKC02KSA9PT0gJ0FycmF5XScpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCAoZXhjbHVkaW5nIG51bGwpLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aXNPYmplY3Q6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgcmV0dXJucyBmYWxzZVxuXHQgKiBAcGFyYW0geyp9IHZhbHVlICAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdGlzRmluaXRlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUodmFsdWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG5cdCAqIEByZXR1cm5zIHsqfVxuXHQgKi9cblx0dmFsdWVPckRlZmF1bHQ6IGZ1bmN0aW9uKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHZhbHVlIGF0IHRoZSBnaXZlbiBgaW5kZXhgIGluIGFycmF5IGlmIGRlZmluZWQsIGVsc2UgcmV0dXJucyBgZGVmYXVsdFZhbHVlYC5cblx0ICogQHBhcmFtIHtBcnJheX0gdmFsdWUgLSBUaGUgYXJyYXkgdG8gbG9va3VwIGZvciB2YWx1ZSBhdCBgaW5kZXhgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW4gYHZhbHVlYCB0byBsb29rdXAgZm9yIHZhbHVlLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlW2luZGV4XWAgaXMgdW5kZWZpbmVkLlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdHZhbHVlQXRJbmRleE9yRGVmYXVsdDogZnVuY3Rpb24odmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gaGVscGVycy52YWx1ZU9yRGVmYXVsdChoZWxwZXJzLmlzQXJyYXkodmFsdWUpID8gdmFsdWVbaW5kZXhdIDogdmFsdWUsIGRlZmF1bHRWYWx1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENhbGxzIGBmbmAgd2l0aCB0aGUgZ2l2ZW4gYGFyZ3NgIGluIHRoZSBzY29wZSBkZWZpbmVkIGJ5IGB0aGlzQXJnYCBhbmQgcmV0dXJucyB0aGVcblx0ICogdmFsdWUgcmV0dXJuZWQgYnkgYGZuYC4gSWYgYGZuYCBpcyBub3QgYSBmdW5jdGlvbiwgdGhpcyBtZXRob2QgcmV0dXJucyB1bmRlZmluZWQuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG5cdCAqIEBwYXJhbSB7QXJyYXl8dW5kZWZpbmVkfG51bGx9IGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHRjYWxsYmFjazogZnVuY3Rpb24oZm4sIGFyZ3MsIHRoaXNBcmcpIHtcblx0XHRpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIE5vdGUoU0IpIGZvciBwZXJmb3JtYW5jZSBzYWtlLCB0aGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gbG9vcGFibGUgdHlwZVxuXHQgKiBpcyB1bmtub3duIG9yIGluIG5vbmUgaW50ZW5zaXZlIGNvZGUgKG5vdCBjYWxsZWQgb2Z0ZW4gYW5kIHNtYWxsIGxvb3BhYmxlKS4gRWxzZVxuXHQgKiBpdCdzIHByZWZlcmFibGUgdG8gdXNlIGEgcmVndWxhciBmb3IoKSBsb29wIGFuZCBzYXZlIGV4dHJhIGZ1bmN0aW9uIGNhbGxzLlxuXHQgKiBAcGFyYW0ge29iamVjdHxBcnJheX0gbG9vcGFibGUgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIGl0ZXJhdGVkLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGl0ZW0uXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbdGhpc0FyZ10gLSBUaGUgdmFsdWUgb2YgYHRoaXNgIHByb3ZpZGVkIGZvciB0aGUgY2FsbCB0byBgZm5gLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXZlcnNlXSAtIElmIHRydWUsIGl0ZXJhdGVzIGJhY2t3YXJkIG9uIHRoZSBsb29wYWJsZS5cblx0ICovXG5cdGVhY2g6IGZ1bmN0aW9uKGxvb3BhYmxlLCBmbiwgdGhpc0FyZywgcmV2ZXJzZSkge1xuXHRcdHZhciBpLCBsZW4sIGtleXM7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShsb29wYWJsZSkpIHtcblx0XHRcdGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcblx0XHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHRcdGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0Zm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChoZWxwZXJzLmlzT2JqZWN0KGxvb3BhYmxlKSkge1xuXHRcdFx0a2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcblx0XHRcdGxlbiA9IGtleXMubGVuZ3RoO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBgYTBgIGFuZCBgYTFgIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQsIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTQ4NTM5NzRcblx0ICogQHBhcmFtIHtBcnJheX0gYTAgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhMSAtIFRoZSBhcnJheSB0byBjb21wYXJlXG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgKi9cblx0YXJyYXlFcXVhbHM6IGZ1bmN0aW9uKGEwLCBhMSkge1xuXHRcdHZhciBpLCBpbGVuLCB2MCwgdjE7XG5cblx0XHRpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhMC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHYwID0gYTBbaV07XG5cdFx0XHR2MSA9IGExW2ldO1xuXG5cdFx0XHRpZiAodjAgaW5zdGFuY2VvZiBBcnJheSAmJiB2MSBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRcdGlmICghaGVscGVycy5hcnJheUVxdWFscyh2MCwgdjEpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHYwICE9PSB2MSkge1xuXHRcdFx0XHQvLyBOT1RFOiB0d28gZGlmZmVyZW50IG9iamVjdCBpbnN0YW5jZXMgd2lsbCBuZXZlciBiZSBlcXVhbDoge3g6MjB9ICE9IHt4OjIwfVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBkZWVwIGNvcHkgb2YgYHNvdXJjZWAgd2l0aG91dCBrZWVwaW5nIHJlZmVyZW5jZXMgb24gb2JqZWN0cyBhbmQgYXJyYXlzLlxuXHQgKiBAcGFyYW0geyp9IHNvdXJjZSAtIFRoZSB2YWx1ZSB0byBjbG9uZS5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHRjbG9uZTogZnVuY3Rpb24oc291cmNlKSB7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShzb3VyY2UpKSB7XG5cdFx0XHRyZXR1cm4gc291cmNlLm1hcChoZWxwZXJzLmNsb25lKTtcblx0XHR9XG5cblx0XHRpZiAoaGVscGVycy5pc09iamVjdChzb3VyY2UpKSB7XG5cdFx0XHR2YXIgdGFyZ2V0ID0ge307XG5cdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cdFx0XHR2YXIga2xlbiA9IGtleXMubGVuZ3RoO1xuXHRcdFx0dmFyIGsgPSAwO1xuXG5cdFx0XHRmb3IgKDsgayA8IGtsZW47ICsraykge1xuXHRcdFx0XHR0YXJnZXRba2V5c1trXV0gPSBoZWxwZXJzLmNsb25lKHNvdXJjZVtrZXlzW2tdXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNvdXJjZTtcblx0fSxcblxuXHQvKipcblx0ICogVGhlIGRlZmF1bHQgbWVyZ2VyIHdoZW4gQ2hhcnQuaGVscGVycy5tZXJnZSBpcyBjYWxsZWQgd2l0aG91dCBtZXJnZXIgb3B0aW9uLlxuXHQgKiBOb3RlKFNCKTogYWxzbyB1c2VkIGJ5IG1lcmdlQ29uZmlnIGFuZCBtZXJnZVNjYWxlQ29uZmlnIGFzIGZhbGxiYWNrLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X21lcmdlcjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciB0dmFsID0gdGFyZ2V0W2tleV07XG5cdFx0dmFyIHN2YWwgPSBzb3VyY2Vba2V5XTtcblxuXHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KHR2YWwpICYmIGhlbHBlcnMuaXNPYmplY3Qoc3ZhbCkpIHtcblx0XHRcdGhlbHBlcnMubWVyZ2UodHZhbCwgc3ZhbCwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldFtrZXldID0gaGVscGVycy5jbG9uZShzdmFsKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIE1lcmdlcyBzb3VyY2Vba2V5XSBpbiB0YXJnZXRba2V5XSBvbmx5IGlmIHRhcmdldFtrZXldIGlzIHVuZGVmaW5lZC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9tZXJnZXJJZjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuXHRcdHZhciB0dmFsID0gdGFyZ2V0W2tleV07XG5cdFx0dmFyIHN2YWwgPSBzb3VyY2Vba2V5XTtcblxuXHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KHR2YWwpICYmIGhlbHBlcnMuaXNPYmplY3Qoc3ZhbCkpIHtcblx0XHRcdGhlbHBlcnMubWVyZ2VJZih0dmFsLCBzdmFsKTtcblx0XHR9IGVsc2UgaWYgKCF0YXJnZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0dGFyZ2V0W2tleV0gPSBoZWxwZXJzLmNsb25lKHN2YWwpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmVjdXJzaXZlbHkgZGVlcCBjb3BpZXMgYHNvdXJjZWAgcHJvcGVydGllcyBpbnRvIGB0YXJnZXRgIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYC5cblx0ICogSU1QT1JUQU5UOiBgdGFyZ2V0YCBpcyBub3QgY2xvbmVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCBgc291cmNlYCBwcm9wZXJ0aWVzLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgaW4gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIG1lcmdlZCBpbnRvLlxuXHQgKiBAcGFyYW0ge29iamVjdHxvYmplY3RbXX0gc291cmNlIC0gT2JqZWN0KHMpIHRvIG1lcmdlIGludG8gYHRhcmdldGAuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBNZXJnaW5nIG9wdGlvbnM6XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm1lcmdlcl0gLSBUaGUgbWVyZ2UgbWV0aG9kIChrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgYHRhcmdldGAgb2JqZWN0LlxuXHQgKi9cblx0bWVyZ2U6IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdFx0dmFyIHNvdXJjZXMgPSBoZWxwZXJzLmlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtzb3VyY2VdO1xuXHRcdHZhciBpbGVuID0gc291cmNlcy5sZW5ndGg7XG5cdFx0dmFyIG1lcmdlLCBpLCBrZXlzLCBrbGVuLCBrO1xuXG5cdFx0aWYgKCFoZWxwZXJzLmlzT2JqZWN0KHRhcmdldCkpIHtcblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFx0bWVyZ2UgPSBvcHRpb25zLm1lcmdlciB8fCBoZWxwZXJzLl9tZXJnZXI7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRzb3VyY2UgPSBzb3VyY2VzW2ldO1xuXHRcdFx0aWYgKCFoZWxwZXJzLmlzT2JqZWN0KHNvdXJjZSkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXHRcdFx0Zm9yIChrID0gMCwga2xlbiA9IGtleXMubGVuZ3RoOyBrIDwga2xlbjsgKytrKSB7XG5cdFx0XHRcdG1lcmdlKGtleXNba10sIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZWN1cnNpdmVseSBkZWVwIGNvcGllcyBgc291cmNlYCBwcm9wZXJ0aWVzIGludG8gYHRhcmdldGAgKm9ubHkqIGlmIG5vdCBkZWZpbmVkIGluIHRhcmdldC5cblx0ICogSU1QT1JUQU5UOiBgdGFyZ2V0YCBpcyBub3QgY2xvbmVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCBgc291cmNlYCBwcm9wZXJ0aWVzLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgaW4gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIG1lcmdlZCBpbnRvLlxuXHQgKiBAcGFyYW0ge29iamVjdHxvYmplY3RbXX0gc291cmNlIC0gT2JqZWN0KHMpIHRvIG1lcmdlIGludG8gYHRhcmdldGAuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBgdGFyZ2V0YCBvYmplY3QuXG5cdCAqL1xuXHRtZXJnZUlmOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKHRhcmdldCwgc291cmNlLCB7bWVyZ2VyOiBoZWxwZXJzLl9tZXJnZXJJZn0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIHRoZSBjb250ZW50cyBvZiB0d28gb3IgbW9yZSBvYmplY3RzIHRvZ2V0aGVyIGludG8gdGhlIGZpcnN0IG9iamVjdC5cblx0ICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IGluIHdoaWNoIGFsbCBvYmplY3RzIGFyZSBtZXJnZWQgaW50by5cblx0ICogQHBhcmFtIHtvYmplY3R9IGFyZzEgLSBPYmplY3QgY29udGFpbmluZyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4gdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gYXJnTiAtIEFkZGl0aW9uYWwgb2JqZWN0cyBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4gdGFyZ2V0LlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgYHRhcmdldGAgb2JqZWN0LlxuXHQgKi9cblx0ZXh0ZW5kOiBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKHRhcmdldCwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB7XG5cdFx0XHRtZXJnZXI6IGZ1bmN0aW9uKGtleSwgZHN0LCBzcmMpIHtcblx0XHRcdFx0ZHN0W2tleV0gPSBzcmNba2V5XTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHQvKipcblx0ICogQmFzaWMgamF2YXNjcmlwdCBpbmhlcml0YW5jZSBiYXNlZCBvbiB0aGUgbW9kZWwgY3JlYXRlZCBpbiBCYWNrYm9uZS5qc1xuXHQgKi9cblx0aW5oZXJpdHM6IGZ1bmN0aW9uKGV4dGVuc2lvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBDaGFydEVsZW1lbnQgPSAoZXh0ZW5zaW9ucyAmJiBleHRlbnNpb25zLmhhc093blByb3BlcnR5KCdjb25zdHJ1Y3RvcicpKSA/IGV4dGVuc2lvbnMuY29uc3RydWN0b3IgOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cblx0XHR2YXIgU3Vycm9nYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmNvbnN0cnVjdG9yID0gQ2hhcnRFbGVtZW50O1xuXHRcdH07XG5cblx0XHRTdXJyb2dhdGUucHJvdG90eXBlID0gbWUucHJvdG90eXBlO1xuXHRcdENoYXJ0RWxlbWVudC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlKCk7XG5cdFx0Q2hhcnRFbGVtZW50LmV4dGVuZCA9IGhlbHBlcnMuaW5oZXJpdHM7XG5cblx0XHRpZiAoZXh0ZW5zaW9ucykge1xuXHRcdFx0aGVscGVycy5leHRlbmQoQ2hhcnRFbGVtZW50LnByb3RvdHlwZSwgZXh0ZW5zaW9ucyk7XG5cdFx0fVxuXG5cdFx0Q2hhcnRFbGVtZW50Ll9fc3VwZXJfXyA9IG1lLnByb3RvdHlwZTtcblx0XHRyZXR1cm4gQ2hhcnRFbGVtZW50O1xuXHR9LFxuXG5cdF9kZXByZWNhdGVkOiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIHByZXZpb3VzLCBjdXJyZW50KSB7XG5cdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICtcblx0XHRcdFx0J1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInICsgY3VycmVudCArICdcIiBpbnN0ZWFkJyk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgaGVscGVyc19jb3JlID0gaGVscGVycztcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbGxiYWNrIGluc3RlYWQuXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5jYWxsQ2FsbGJhY2tcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuY2FsbENhbGxiYWNrID0gaGVscGVycy5jYWxsYmFjaztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGluc3RlYWQuXG4gKiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiBjb21wYXRpYmlsaXR5OiBDaHJvbWUsIE9wZXJhLCBTYWZhcmksIEZGMS41KywgSUU5K1xuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuaW5kZXhPZlxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb21JbmRleCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgaXRlbSwgZnJvbUluZGV4KTtcbn07XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLnZhbHVlT3JEZWZhdWx0IGluc3RlYWQuXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5nZXRWYWx1ZU9yRGVmYXVsdFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5nZXRWYWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdCBpbnN0ZWFkLlxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xuXG4vKipcbiAqIEVhc2luZyBmdW5jdGlvbnMgYWRhcHRlZCBmcm9tIFJvYmVydCBQZW5uZXIncyBlYXNpbmcgZXF1YXRpb25zLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmVhc2luZ0VmZmVjdHNcbiAqIEBzZWUgaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZy9cbiAqL1xudmFyIGVmZmVjdHMgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiB0O1xuXHR9LFxuXG5cdGVhc2VJblF1YWQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQ7XG5cdH0sXG5cblx0ZWFzZU91dFF1YWQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLXQgKiAodCAtIDIpO1xuXHR9LFxuXG5cdGVhc2VJbk91dFF1YWQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIC0wLjUgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSk7XG5cdH0sXG5cblx0ZWFzZUluQ3ViaWM6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0O1xuXHR9LFxuXG5cdGVhc2VPdXRDdWJpYzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAodCA9IHQgLSAxKSAqIHQgKiB0ICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIHQgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMik7XG5cdH0sXG5cblx0ZWFzZUluUXVhcnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0ICogdDtcblx0fSxcblxuXHRlYXNlT3V0UXVhcnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLSgodCA9IHQgLSAxKSAqIHQgKiB0ICogdCAtIDEpO1xuXHR9LFxuXG5cdGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogdCAqIHQgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKTtcblx0fSxcblxuXHRlYXNlSW5RdWludDogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiB0ICogdCAqIHQgKiB0ICogdDtcblx0fSxcblxuXHRlYXNlT3V0UXVpbnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gKHQgPSB0IC0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRRdWludDogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0O1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xuXHR9LFxuXG5cdGVhc2VJblNpbmU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLU1hdGguY29zKHQgKiAoTWF0aC5QSSAvIDIpKSArIDE7XG5cdH0sXG5cblx0ZWFzZU91dFNpbmU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gTWF0aC5zaW4odCAqIChNYXRoLlBJIC8gMikpO1xuXHR9LFxuXG5cdGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLTAuNSAqIChNYXRoLmNvcyhNYXRoLlBJICogdCkgLSAxKTtcblx0fSxcblxuXHRlYXNlSW5FeHBvOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuICh0ID09PSAwKSA/IDAgOiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpO1xuXHR9LFxuXG5cdGVhc2VPdXRFeHBvOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuICh0ID09PSAxKSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogdCkgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dEV4cG86IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAodCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGlmICh0ID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogLS10KSArIDIpO1xuXHR9LFxuXG5cdGVhc2VJbkNpcmM6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAodCA+PSAxKSB7XG5cdFx0XHRyZXR1cm4gdDtcblx0XHR9XG5cdFx0cmV0dXJuIC0oTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKTtcblx0fSxcblxuXHRlYXNlT3V0Q2lyYzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiBNYXRoLnNxcnQoMSAtICh0ID0gdCAtIDEpICogdCk7XG5cdH0sXG5cblx0ZWFzZUluT3V0Q2lyYzogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKTtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKTtcblx0fSxcblxuXHRlYXNlSW5FbGFzdGljOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHZhciBwID0gMDtcblx0XHR2YXIgYSA9IDE7XG5cdFx0aWYgKHQgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRpZiAodCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmICghcCkge1xuXHRcdFx0cCA9IDAuMztcblx0XHR9XG5cdFx0aWYgKGEgPCAxKSB7XG5cdFx0XHRhID0gMTtcblx0XHRcdHMgPSBwIC8gNDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTtcblx0XHR9XG5cdFx0cmV0dXJuIC0oYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSk7XG5cdH0sXG5cblx0ZWFzZU91dEVsYXN0aWM6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0dmFyIHAgPSAwO1xuXHRcdHZhciBhID0gMTtcblx0XHRpZiAodCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGlmICh0ID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKCFwKSB7XG5cdFx0XHRwID0gMC4zO1xuXHRcdH1cblx0XHRpZiAoYSA8IDEpIHtcblx0XHRcdGEgPSAxO1xuXHRcdFx0cyA9IHAgLyA0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSAvIGEpO1xuXHRcdH1cblx0XHRyZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0RWxhc3RpYzogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHR2YXIgcCA9IDA7XG5cdFx0dmFyIGEgPSAxO1xuXHRcdGlmICh0ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0aWYgKCh0IC89IDAuNSkgPT09IDIpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0XHRpZiAoIXApIHtcblx0XHRcdHAgPSAwLjQ1O1xuXHRcdH1cblx0XHRpZiAoYSA8IDEpIHtcblx0XHRcdGEgPSAxO1xuXHRcdFx0cyA9IHAgLyA0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSAvIGEpO1xuXHRcdH1cblx0XHRpZiAodCA8IDEpIHtcblx0XHRcdHJldHVybiAtMC41ICogKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKiAwLjUgKyAxO1xuXHR9LFxuXHRlYXNlSW5CYWNrOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuXHR9LFxuXG5cdGVhc2VPdXRCYWNrOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHJldHVybiAodCA9IHQgLSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0QmFjazogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpO1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuXHR9LFxuXG5cdGVhc2VJbkJvdW5jZTogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAxIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KTtcblx0fSxcblxuXHRlYXNlT3V0Qm91bmNlOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPCAoMSAvIDIuNzUpKSB7XG5cdFx0XHRyZXR1cm4gNy41NjI1ICogdCAqIHQ7XG5cdFx0fVxuXHRcdGlmICh0IDwgKDIgLyAyLjc1KSkge1xuXHRcdFx0cmV0dXJuIDcuNTYyNSAqICh0IC09ICgxLjUgLyAyLjc1KSkgKiB0ICsgMC43NTtcblx0XHR9XG5cdFx0aWYgKHQgPCAoMi41IC8gMi43NSkpIHtcblx0XHRcdHJldHVybiA3LjU2MjUgKiAodCAtPSAoMi4yNSAvIDIuNzUpKSAqIHQgKyAwLjkzNzU7XG5cdFx0fVxuXHRcdHJldHVybiA3LjU2MjUgKiAodCAtPSAoMi42MjUgLyAyLjc1KSkgKiB0ICsgMC45ODQzNzU7XG5cdH0sXG5cblx0ZWFzZUluT3V0Qm91bmNlOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPCAwLjUpIHtcblx0XHRcdHJldHVybiBlZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjU7XG5cdFx0fVxuXHRcdHJldHVybiBlZmZlY3RzLmVhc2VPdXRCb3VuY2UodCAqIDIgLSAxKSAqIDAuNSArIDAuNTtcblx0fVxufTtcblxudmFyIGhlbHBlcnNfZWFzaW5nID0ge1xuXHRlZmZlY3RzOiBlZmZlY3RzXG59O1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMuZWFzaW5nLmVmZmVjdHMgaW5zdGVhZC5cbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmVhc2luZ0VmZmVjdHNcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnNfY29yZS5lYXNpbmdFZmZlY3RzID0gZWZmZWN0cztcblxudmFyIFBJID0gTWF0aC5QSTtcbnZhciBSQURfUEVSX0RFRyA9IFBJIC8gMTgwO1xudmFyIERPVUJMRV9QSSA9IFBJICogMjtcbnZhciBIQUxGX1BJID0gUEkgLyAyO1xudmFyIFFVQVJURVJfUEkgPSBQSSAvIDQ7XG52YXIgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmNhbnZhc1xuICovXG52YXIgZXhwb3J0cyQxID0ge1xuXHQvKipcblx0ICogQ2xlYXJzIHRoZSBlbnRpcmUgY2FudmFzIGFzc29jaWF0ZWQgdG8gdGhlIGdpdmVuIGBjaGFydGAuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IGZvciB3aGljaCB0byBjbGVhciB0aGUgY2FudmFzLlxuXHQgKi9cblx0Y2xlYXI6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0Y2hhcnQuY3R4LmNsZWFyUmVjdCgwLCAwLCBjaGFydC53aWR0aCwgY2hhcnQuaGVpZ2h0KTtcblx0fSxcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIFwicGF0aFwiIGZvciBhIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVycyBhdCBwb3NpdGlvbiAoeCwgeSkgd2l0aCBhXG5cdCAqIGdpdmVuIHNpemUgKHdpZHRoLCBoZWlnaHQpIGFuZCB0aGUgc2FtZSBgcmFkaXVzYCBmb3IgYWxsIGNvcm5lcnMuXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBUaGUgY2FudmFzIDJEIENvbnRleHQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggYXhpcyBvZiB0aGUgY29vcmRpbmF0ZSBmb3IgdGhlIHJlY3RhbmdsZSBzdGFydGluZyBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBheGlzIG9mIHRoZSBjb29yZGluYXRlIGZvciB0aGUgcmVjdGFuZ2xlIHN0YXJ0aW5nIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgcmVjdGFuZ2xlJ3Mgd2lkdGguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgcmVjdGFuZ2xlJ3MgaGVpZ2h0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gVGhlIHJvdW5kZWQgYW1vdW50IChpbiBwaXhlbHMpIGZvciB0aGUgZm91ciBjb3JuZXJzLlxuXHQgKiBAdG9kbyBoYW5kbGUgYHJhZGl1c2AgYXMgdG9wLWxlZnQsIHRvcC1yaWdodCwgYm90dG9tLXJpZ2h0LCBib3R0b20tbGVmdCBhcnJheS9vYmplY3Q/XG5cdCAqL1xuXHRyb3VuZGVkUmVjdDogZnVuY3Rpb24oY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcblx0XHRpZiAocmFkaXVzKSB7XG5cdFx0XHR2YXIgciA9IE1hdGgubWluKHJhZGl1cywgaGVpZ2h0IC8gMiwgd2lkdGggLyAyKTtcblx0XHRcdHZhciBsZWZ0ID0geCArIHI7XG5cdFx0XHR2YXIgdG9wID0geSArIHI7XG5cdFx0XHR2YXIgcmlnaHQgPSB4ICsgd2lkdGggLSByO1xuXHRcdFx0dmFyIGJvdHRvbSA9IHkgKyBoZWlnaHQgLSByO1xuXG5cdFx0XHRjdHgubW92ZVRvKHgsIHRvcCk7XG5cdFx0XHRpZiAobGVmdCA8IHJpZ2h0ICYmIHRvcCA8IGJvdHRvbSkge1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIHRvcCwgciwgLVBJLCAtSEFMRl9QSSk7XG5cdFx0XHRcdGN0eC5hcmMocmlnaHQsIHRvcCwgciwgLUhBTEZfUEksIDApO1xuXHRcdFx0XHRjdHguYXJjKHJpZ2h0LCBib3R0b20sIHIsIDAsIEhBTEZfUEkpO1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIGJvdHRvbSwgciwgSEFMRl9QSSwgUEkpO1xuXHRcdFx0fSBlbHNlIGlmIChsZWZ0IDwgcmlnaHQpIHtcblx0XHRcdFx0Y3R4Lm1vdmVUbyhsZWZ0LCB5KTtcblx0XHRcdFx0Y3R4LmFyYyhyaWdodCwgdG9wLCByLCAtSEFMRl9QSSwgSEFMRl9QSSk7XG5cdFx0XHRcdGN0eC5hcmMobGVmdCwgdG9wLCByLCBIQUxGX1BJLCBQSSArIEhBTEZfUEkpO1xuXHRcdFx0fSBlbHNlIGlmICh0b3AgPCBib3R0b20pIHtcblx0XHRcdFx0Y3R4LmFyYyhsZWZ0LCB0b3AsIHIsIC1QSSwgMCk7XG5cdFx0XHRcdGN0eC5hcmMobGVmdCwgYm90dG9tLCByLCAwLCBQSSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIHRvcCwgciwgLVBJLCBQSSk7XG5cdFx0XHR9XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRjdHgubW92ZVRvKHgsIHkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdHgucmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcblx0XHR9XG5cdH0sXG5cblx0ZHJhd1BvaW50OiBmdW5jdGlvbihjdHgsIHN0eWxlLCByYWRpdXMsIHgsIHksIHJvdGF0aW9uKSB7XG5cdFx0dmFyIHR5cGUsIHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cztcblx0XHR2YXIgcmFkID0gKHJvdGF0aW9uIHx8IDApICogUkFEX1BFUl9ERUc7XG5cblx0XHRpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0dHlwZSA9IHN0eWxlLnRvU3RyaW5nKCk7XG5cdFx0XHRpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcblx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0Y3R4LnRyYW5zbGF0ZSh4LCB5KTtcblx0XHRcdFx0Y3R4LnJvdGF0ZShyYWQpO1xuXHRcdFx0XHRjdHguZHJhd0ltYWdlKHN0eWxlLCAtc3R5bGUud2lkdGggLyAyLCAtc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG5cdFx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblxuXHRcdHN3aXRjaCAoc3R5bGUpIHtcblx0XHQvLyBEZWZhdWx0IGluY2x1ZGVzIGNpcmNsZVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgRE9VQkxFX1BJKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3RyaWFuZ2xlJzpcblx0XHRcdGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcblx0XHRcdHJhZCArPSBUV09fVEhJUkRTX1BJO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuXHRcdFx0cmFkICs9IFRXT19USElSRFNfUEk7XG5cdFx0XHRjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyZWN0Um91bmRlZCc6XG5cdFx0XHQvLyBOT1RFOiB0aGUgcm91bmRlZCByZWN0IGltcGxlbWVudGF0aW9uIGNoYW5nZWQgdG8gdXNlIGBhcmNgIGluc3RlYWQgb2Zcblx0XHRcdC8vIGBxdWFkcmF0aWNDdXJ2ZVRvYCBzaW5jZSBpdCBnZW5lcmF0ZXMgYmV0dGVyIHJlc3VsdHMgd2hlbiByZWN0IGlzXG5cdFx0XHQvLyBhbG1vc3QgYSBjaXJjbGUuIDAuNTE2IChpbnN0ZWFkIG9mIDAuNSkgcHJvZHVjZXMgcmVzdWx0cyB3aXRoIHZpc3VhbGx5XG5cdFx0XHQvLyBjbG9zZXIgcHJvcG9ydGlvbiB0byB0aGUgcHJldmlvdXMgaW1wbCBhbmQgaXQgaXMgaW5zY3JpYmVkIGluIHRoZVxuXHRcdFx0Ly8gY2lyY2xlIHdpdGggYHJhZGl1c2AuIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgZm9sbG93aW5nIFBSczpcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81NTk3XG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTg1OFxuXHRcdFx0Y29ybmVyUmFkaXVzID0gcmFkaXVzICogMC41MTY7XG5cdFx0XHRzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcblx0XHRcdHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG5cdFx0XHRjdHguYXJjKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG5cdFx0XHRjdHguYXJjKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuXHRcdFx0Y3R4LmFyYyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkLCByYWQgKyBIQUxGX1BJKTtcblx0XHRcdGN0eC5hcmMoeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3JlY3QnOlxuXHRcdFx0aWYgKCFyb3RhdGlvbikge1xuXHRcdFx0XHRzaXplID0gTWF0aC5TUVJUMV8yICogcmFkaXVzO1xuXHRcdFx0XHRjdHgucmVjdCh4IC0gc2l6ZSwgeSAtIHNpemUsIDIgKiBzaXplLCAyICogc2l6ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0cmFkICs9IFFVQVJURVJfUEk7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAncmVjdFJvdCc6XG5cdFx0XHR4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcblx0XHRcdHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY3Jvc3NSb3QnOlxuXHRcdFx0cmFkICs9IFFVQVJURVJfUEk7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAnY3Jvc3MnOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3N0YXInOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcblx0XHRcdHJhZCArPSBRVUFSVEVSX1BJO1xuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2xpbmUnOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2Rhc2gnOlxuXHRcdFx0Y3R4Lm1vdmVUbyh4LCB5KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiByYWRpdXMsIHkgKyBNYXRoLnNpbihyYWQpICogcmFkaXVzKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGN0eC5maWxsKCk7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgcmVjdGFuZ2xlXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBwb2ludCAtIFRoZSBwb2ludCB0byB0ZXN0XG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBhcmVhIC0gVGhlIHJlY3RhbmdsZVxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9pc1BvaW50SW5BcmVhOiBmdW5jdGlvbihwb2ludCwgYXJlYSkge1xuXHRcdHZhciBlcHNpbG9uID0gMWUtNjsgLy8gMWUtNiBpcyBtYXJnaW4gaW4gcGl4ZWxzIGZvciBhY2N1bXVsYXRlZCBlcnJvci5cblxuXHRcdHJldHVybiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gZXBzaWxvbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIGVwc2lsb24gJiZcblx0XHRcdHBvaW50LnkgPiBhcmVhLnRvcCAtIGVwc2lsb24gJiYgcG9pbnQueSA8IGFyZWEuYm90dG9tICsgZXBzaWxvbjtcblx0fSxcblxuXHRjbGlwQXJlYTogZnVuY3Rpb24oY3R4LCBhcmVhKSB7XG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG5cdFx0Y3R4LmNsaXAoKTtcblx0fSxcblxuXHR1bmNsaXBBcmVhOiBmdW5jdGlvbihjdHgpIHtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdGxpbmVUbzogZnVuY3Rpb24oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG5cdFx0dmFyIHN0ZXBwZWQgPSB0YXJnZXQuc3RlcHBlZExpbmU7XG5cdFx0aWYgKHN0ZXBwZWQpIHtcblx0XHRcdGlmIChzdGVwcGVkID09PSAnbWlkZGxlJykge1xuXHRcdFx0XHR2YXIgbWlkcG9pbnQgPSAocHJldmlvdXMueCArIHRhcmdldC54KSAvIDIuMDtcblx0XHRcdFx0Y3R4LmxpbmVUbyhtaWRwb2ludCwgZmxpcCA/IHRhcmdldC55IDogcHJldmlvdXMueSk7XG5cdFx0XHRcdGN0eC5saW5lVG8obWlkcG9pbnQsIGZsaXAgPyBwcmV2aW91cy55IDogdGFyZ2V0LnkpO1xuXHRcdFx0fSBlbHNlIGlmICgoc3RlcHBlZCA9PT0gJ2FmdGVyJyAmJiAhZmxpcCkgfHwgKHN0ZXBwZWQgIT09ICdhZnRlcicgJiYgZmxpcCkpIHtcblx0XHRcdFx0Y3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCBwcmV2aW91cy55KTtcblx0XHRcdH1cblx0XHRcdGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXRhcmdldC50ZW5zaW9uKSB7XG5cdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y3R4LmJlemllckN1cnZlVG8oXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNYIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFgsXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNZIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFksXG5cdFx0XHRmbGlwID8gdGFyZ2V0LmNvbnRyb2xQb2ludE5leHRYIDogdGFyZ2V0LmNvbnRyb2xQb2ludFByZXZpb3VzWCxcblx0XHRcdGZsaXAgPyB0YXJnZXQuY29udHJvbFBvaW50TmV4dFkgOiB0YXJnZXQuY29udHJvbFBvaW50UHJldmlvdXNZLFxuXHRcdFx0dGFyZ2V0LngsXG5cdFx0XHR0YXJnZXQueSk7XG5cdH1cbn07XG5cbnZhciBoZWxwZXJzX2NhbnZhcyA9IGV4cG9ydHMkMTtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcy5jbGVhciBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmNsZWFyXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzX2NvcmUuY2xlYXIgPSBleHBvcnRzJDEuY2xlYXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcy5yb3VuZGVkUmVjdCBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzX2NvcmUuZHJhd1JvdW5kZWRSZWN0YW5nbGUgPSBmdW5jdGlvbihjdHgpIHtcblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRleHBvcnRzJDEucm91bmRlZFJlY3QuYXBwbHkoZXhwb3J0cyQxLCBhcmd1bWVudHMpO1xufTtcblxudmFyIGRlZmF1bHRzID0ge1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9zZXQ6IGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZXMpIHtcblx0XHRyZXR1cm4gaGVscGVyc19jb3JlLm1lcmdlKHRoaXNbc2NvcGVdIHx8ICh0aGlzW3Njb3BlXSA9IHt9KSwgdmFsdWVzKTtcblx0fVxufTtcblxuLy8gVE9ETyh2Myk6IHJlbW92ZSAnZ2xvYmFsJyBmcm9tIG5hbWVzcGFjZS4gIGFsbCBkZWZhdWx0IGFyZSBnbG9iYWwgYW5kXG4vLyB0aGVyZSdzIGluY29uc2lzdGVuY3kgYXJvdW5kIHdoaWNoIG9wdGlvbnMgYXJlIHVuZGVyICdnbG9iYWwnXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGRlZmF1bHRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG5cdGRlZmF1bHRGb250Q29sb3I6ICcjNjY2Jyxcblx0ZGVmYXVsdEZvbnRGYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcblx0ZGVmYXVsdEZvbnRTaXplOiAxMixcblx0ZGVmYXVsdEZvbnRTdHlsZTogJ25vcm1hbCcsXG5cdGRlZmF1bHRMaW5lSGVpZ2h0OiAxLjIsXG5cdHNob3dMaW5lczogdHJ1ZVxufSk7XG5cbnZhciBjb3JlX2RlZmF1bHRzID0gZGVmYXVsdHM7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnNfY29yZS52YWx1ZU9yRGVmYXVsdDtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZm9udCBvYmplY3QgaW50byBhIENTUyBmb250IHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBmb250IC0gQSBmb250IG9iamVjdC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIENTUyBmb250IHN0cmluZy4gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0b0ZvbnRTdHJpbmcoZm9udCkge1xuXHRpZiAoIWZvbnQgfHwgaGVscGVyc19jb3JlLmlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBoZWxwZXJzX2NvcmUuaXNOdWxsT3JVbmRlZihmb250LmZhbWlseSkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiAoZm9udC5zdHlsZSA/IGZvbnQuc3R5bGUgKyAnICcgOiAnJylcblx0XHQrIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpXG5cdFx0KyBmb250LnNpemUgKyAncHggJ1xuXHRcdCsgZm9udC5mYW1pbHk7XG59XG5cbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMub3B0aW9uc1xuICogQG5hbWVzcGFjZVxuICovXG52YXIgaGVscGVyc19vcHRpb25zID0ge1xuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIGxpbmUgaGVpZ2h0IGB2YWx1ZWAgaW4gcGl4ZWxzIGZvciBhIHNwZWNpZmljIGZvbnQgYHNpemVgLlxuXHQgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlIC0gVGhlIGxpbmVIZWlnaHQgdG8gcGFyc2UgKGVnLiAxLjYsICcxNHB4JywgJzc1JScsICcxLjZlbScpLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRoZSBmb250IHNpemUgKGluIHBpeGVscykgdXNlZCB0byByZXNvbHZlIHJlbGF0aXZlIGB2YWx1ZWAuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBlZmZlY3RpdmUgbGluZSBoZWlnaHQgaW4gcGl4ZWxzIChzaXplICogMS4yIGlmIHZhbHVlIGlzIGludmFsaWQpLlxuXHQgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWhlaWdodFxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdHRvTGluZUhlaWdodDogZnVuY3Rpb24odmFsdWUsIHNpemUpIHtcblx0XHR2YXIgbWF0Y2hlcyA9ICgnJyArIHZhbHVlKS5tYXRjaCgvXihub3JtYWx8KFxcZCsoPzpcXC5cXGQrKT8pKHB4fGVtfCUpPykkLyk7XG5cdFx0aWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG5cdFx0XHRyZXR1cm4gc2l6ZSAqIDEuMjtcblx0XHR9XG5cblx0XHR2YWx1ZSA9ICttYXRjaGVzWzJdO1xuXG5cdFx0c3dpdGNoIChtYXRjaGVzWzNdKSB7XG5cdFx0Y2FzZSAncHgnOlxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGNhc2UgJyUnOlxuXHRcdFx0dmFsdWUgLz0gMTAwO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNpemUgKiB2YWx1ZTtcblx0fSxcblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBwYWRkaW5nIG9iamVjdCB3aXRoIHByZS1jb21wdXRlZCB3aWR0aC9oZWlnaHQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfG9iamVjdH0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG5cdCAqICBlbHNlLCBpZiBhbmQgb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBwYWRkaW5nIHZhbHVlcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KVxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdHRvUGFkZGluZzogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgdCwgciwgYiwgbDtcblxuXHRcdGlmIChoZWxwZXJzX2NvcmUuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0XHR0ID0gK3ZhbHVlLnRvcCB8fCAwO1xuXHRcdFx0ciA9ICt2YWx1ZS5yaWdodCB8fCAwO1xuXHRcdFx0YiA9ICt2YWx1ZS5ib3R0b20gfHwgMDtcblx0XHRcdGwgPSArdmFsdWUubGVmdCB8fCAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ID0gciA9IGIgPSBsID0gK3ZhbHVlIHx8IDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogdCxcblx0XHRcdHJpZ2h0OiByLFxuXHRcdFx0Ym90dG9tOiBiLFxuXHRcdFx0bGVmdDogbCxcblx0XHRcdGhlaWdodDogdCArIGIsXG5cdFx0XHR3aWR0aDogbCArIHJcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZm9udCBvcHRpb25zIGFuZCByZXR1cm5zIHRoZSBmb250IG9iamVjdC5cblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZvbnQgb3B0aW9ucyB0byBiZSBwYXJzZWQuXG5cdCAqIEByZXR1cm4ge29iamVjdH0gVGhlIGZvbnQgb2JqZWN0LlxuXHQgKiBAdG9kbyBTdXBwb3J0IGZvbnQuKiBvcHRpb25zIGFuZCByZW5hbWVkIHRvIHRvRm9udCgpLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3BhcnNlRm9udDogZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBnbG9iYWxEZWZhdWx0cyA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKTtcblx0XHR2YXIgZm9udCA9IHtcblx0XHRcdGZhbWlseTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0XHRsaW5lSGVpZ2h0OiBoZWxwZXJzX2NvcmUub3B0aW9ucy50b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0TGluZUhlaWdodCksIHNpemUpLFxuXHRcdFx0c2l6ZTogc2l6ZSxcblx0XHRcdHN0eWxlOiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0XHR3ZWlnaHQ6IG51bGwsXG5cdFx0XHRzdHJpbmc6ICcnXG5cdFx0fTtcblxuXHRcdGZvbnQuc3RyaW5nID0gdG9Gb250U3RyaW5nKGZvbnQpO1xuXHRcdHJldHVybiBmb250O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIGBpbnB1dHNgIHNlcXVlbnRpYWxseSBhbmQgcmV0dXJucyB0aGUgZmlyc3QgZGVmaW5lZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtBcnJheX0gaW5wdXRzIC0gQW4gYXJyYXkgb2YgdmFsdWVzLCBmYWxsaW5nIGJhY2sgdG8gdGhlIGxhc3QgdmFsdWUuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbY29udGV4dF0gLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCB0aGUgdmFsdWVcblx0ICogaXMgY2FsbGVkIHdpdGggYGNvbnRleHRgIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGUgcmVzdWx0IGJlY29tZXMgdGhlIG5ldyBpbnB1dC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleF0gLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlIHZhbHVlXG5cdCAqIGF0IGBpbmRleGAgYmVjb21lIHRoZSBuZXcgaW5wdXQuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbaW5mb10gLSBvYmplY3QgdG8gcmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHJlc29sdXRpb24gaW5cblx0ICogQHBhcmFtIHtib29sZWFufSBbaW5mby5jYWNoZWFibGVdIC0gV2lsbCBiZSBzZXQgdG8gYGZhbHNlYCBpZiBvcHRpb24gaXMgbm90IGNhY2hlYWJsZS5cblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHRyZXNvbHZlOiBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG5cdFx0dmFyIGNhY2hlYWJsZSA9IHRydWU7XG5cdFx0dmFyIGksIGlsZW4sIHZhbHVlO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHZhbHVlID0gaW5wdXRzW2ldO1xuXHRcdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuXHRcdFx0XHRjYWNoZWFibGUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGhlbHBlcnNfY29yZS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW2luZGV4XTtcblx0XHRcdFx0Y2FjaGVhYmxlID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRpZiAoaW5mbyAmJiAhY2FjaGVhYmxlKSB7XG5cdFx0XHRcdFx0aW5mby5jYWNoZWFibGUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vKipcbiAqIEBhbGlhcyBDaGFydC5oZWxwZXJzLm1hdGhcbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIGV4cG9ydHMkMiA9IHtcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gYXJyYXkgb2YgZmFjdG9ycyBzb3J0ZWQgZnJvbSAxIHRvIHNxcnQodmFsdWUpXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZmFjdG9yaXplOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR2YXIgc3FydCA9IE1hdGguc3FydCh2YWx1ZSk7XG5cdFx0dmFyIGk7XG5cblx0XHRmb3IgKGkgPSAxOyBpIDwgc3FydDsgaSsrKSB7XG5cdFx0XHRpZiAodmFsdWUgJSBpID09PSAwKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKGkpO1xuXHRcdFx0XHRyZXN1bHQucHVzaCh2YWx1ZSAvIGkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkgeyAvLyBpZiB2YWx1ZSBpcyBhIHNxdWFyZSBudW1iZXJcblx0XHRcdHJlc3VsdC5wdXNoKHNxcnQpO1xuXHRcdH1cblxuXHRcdHJlc3VsdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHJldHVybiBhIC0gYjtcblx0XHR9KS5wb3AoKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXG5cdGxvZzEwOiBNYXRoLmxvZzEwIHx8IGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgZXhwb25lbnQgPSBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFOyAvLyBNYXRoLkxPRzEwRSA9IDEgLyBNYXRoLkxOMTAuXG5cdFx0Ly8gQ2hlY2sgZm9yIHdob2xlIHBvd2VycyBvZiAxMCxcblx0XHQvLyB3aGljaCBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3Igc2hvdWxkIGJlIGNvcnJlY3RlZC5cblx0XHR2YXIgcG93ZXJPZjEwID0gTWF0aC5yb3VuZChleHBvbmVudCk7XG5cdFx0dmFyIGlzUG93ZXJPZjEwID0geCA9PT0gTWF0aC5wb3coMTAsIHBvd2VyT2YxMCk7XG5cblx0XHRyZXR1cm4gaXNQb3dlck9mMTAgPyBwb3dlck9mMTAgOiBleHBvbmVudDtcblx0fVxufTtcblxudmFyIGhlbHBlcnNfbWF0aCA9IGV4cG9ydHMkMjtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLm1hdGgubG9nMTAgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5sb2cxMFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjkuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVyc19jb3JlLmxvZzEwID0gZXhwb3J0cyQyLmxvZzEwO1xuXG52YXIgZ2V0UnRsQWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuXHRyZXR1cm4ge1xuXHRcdHg6IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiByZWN0WCArIHJlY3RYICsgd2lkdGggLSB4O1xuXHRcdH0sXG5cdFx0c2V0V2lkdGg6IGZ1bmN0aW9uKHcpIHtcblx0XHRcdHdpZHRoID0gdztcblx0XHR9LFxuXHRcdHRleHRBbGlnbjogZnVuY3Rpb24oYWxpZ24pIHtcblx0XHRcdGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHRcdFx0cmV0dXJuIGFsaWduO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0Jztcblx0XHR9LFxuXHRcdHhQbHVzOiBmdW5jdGlvbih4LCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHggLSB2YWx1ZTtcblx0XHR9LFxuXHRcdGxlZnRGb3JMdHI6IGZ1bmN0aW9uKHgsIGl0ZW1XaWR0aCkge1xuXHRcdFx0cmV0dXJuIHggLSBpdGVtV2lkdGg7XG5cdFx0fSxcblx0fTtcbn07XG5cbnZhciBnZXRMdHJBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB7XG5cdFx0eDogZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIHg7XG5cdFx0fSxcblx0XHRzZXRXaWR0aDogZnVuY3Rpb24odykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdFx0fSxcblx0XHR0ZXh0QWxpZ246IGZ1bmN0aW9uKGFsaWduKSB7XG5cdFx0XHRyZXR1cm4gYWxpZ247XG5cdFx0fSxcblx0XHR4UGx1czogZnVuY3Rpb24oeCwgdmFsdWUpIHtcblx0XHRcdHJldHVybiB4ICsgdmFsdWU7XG5cdFx0fSxcblx0XHRsZWZ0Rm9yTHRyOiBmdW5jdGlvbih4LCBfaXRlbVdpZHRoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0XHRcdHJldHVybiB4O1xuXHRcdH0sXG5cdH07XG59O1xuXG52YXIgZ2V0QWRhcHRlciA9IGZ1bmN0aW9uKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG5cdHJldHVybiBydGwgPyBnZXRSdGxBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMdHJBZGFwdGVyKCk7XG59O1xuXG52YXIgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uID0gZnVuY3Rpb24oY3R4LCBkaXJlY3Rpb24pIHtcblx0dmFyIHN0eWxlLCBvcmlnaW5hbDtcblx0aWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicgfHwgZGlyZWN0aW9uID09PSAncnRsJykge1xuXHRcdHN0eWxlID0gY3R4LmNhbnZhcy5zdHlsZTtcblx0XHRvcmlnaW5hbCA9IFtcblx0XHRcdHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpLFxuXHRcdFx0c3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnZGlyZWN0aW9uJyksXG5cdFx0XTtcblxuXHRcdHN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBkaXJlY3Rpb24sICdpbXBvcnRhbnQnKTtcblx0XHRjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcblx0fVxufTtcblxudmFyIHJlc3RvcmVUZXh0RGlyZWN0aW9uID0gZnVuY3Rpb24oY3R4KSB7XG5cdHZhciBvcmlnaW5hbCA9IGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcblx0aWYgKG9yaWdpbmFsICE9PSB1bmRlZmluZWQpIHtcblx0XHRkZWxldGUgY3R4LnByZXZUZXh0RGlyZWN0aW9uO1xuXHRcdGN0eC5jYW52YXMuc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIG9yaWdpbmFsWzBdLCBvcmlnaW5hbFsxXSk7XG5cdH1cbn07XG5cbnZhciBoZWxwZXJzX3J0bCA9IHtcblx0Z2V0UnRsQWRhcHRlcjogZ2V0QWRhcHRlcixcblx0b3ZlcnJpZGVUZXh0RGlyZWN0aW9uOiBvdmVycmlkZVRleHREaXJlY3Rpb24sXG5cdHJlc3RvcmVUZXh0RGlyZWN0aW9uOiByZXN0b3JlVGV4dERpcmVjdGlvbixcbn07XG5cbnZhciBoZWxwZXJzJDEgPSBoZWxwZXJzX2NvcmU7XG52YXIgZWFzaW5nID0gaGVscGVyc19lYXNpbmc7XG52YXIgY2FudmFzID0gaGVscGVyc19jYW52YXM7XG52YXIgb3B0aW9ucyA9IGhlbHBlcnNfb3B0aW9ucztcbnZhciBtYXRoID0gaGVscGVyc19tYXRoO1xudmFyIHJ0bCA9IGhlbHBlcnNfcnRsO1xuaGVscGVycyQxLmVhc2luZyA9IGVhc2luZztcbmhlbHBlcnMkMS5jYW52YXMgPSBjYW52YXM7XG5oZWxwZXJzJDEub3B0aW9ucyA9IG9wdGlvbnM7XG5oZWxwZXJzJDEubWF0aCA9IG1hdGg7XG5oZWxwZXJzJDEucnRsID0gcnRsO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgdmlldywgbW9kZWwsIGVhc2UpIHtcblx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhtb2RlbCk7XG5cdHZhciBpLCBpbGVuLCBrZXksIGFjdHVhbCwgb3JpZ2luLCB0YXJnZXQsIHR5cGUsIGMwLCBjMTtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRrZXkgPSBrZXlzW2ldO1xuXG5cdFx0dGFyZ2V0ID0gbW9kZWxba2V5XTtcblxuXHRcdC8vIGlmIGEgdmFsdWUgaXMgYWRkZWQgdG8gdGhlIG1vZGVsIGFmdGVyIHBpdm90KCkgaGFzIGJlZW4gY2FsbGVkLCB0aGUgdmlld1xuXHRcdC8vIGRvZXNuJ3QgY29udGFpbiBpdCwgc28gbGV0J3MgaW5pdGlhbGl6ZSB0aGUgdmlldyB0byB0aGUgdGFyZ2V0IHZhbHVlLlxuXHRcdGlmICghdmlldy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHR2aWV3W2tleV0gPSB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0YWN0dWFsID0gdmlld1trZXldO1xuXG5cdFx0aWYgKGFjdHVhbCA9PT0gdGFyZ2V0IHx8IGtleVswXSA9PT0gJ18nKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoIXN0YXJ0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdHN0YXJ0W2tleV0gPSBhY3R1YWw7XG5cdFx0fVxuXG5cdFx0b3JpZ2luID0gc3RhcnRba2V5XTtcblxuXHRcdHR5cGUgPSB0eXBlb2YgdGFyZ2V0O1xuXG5cdFx0aWYgKHR5cGUgPT09IHR5cGVvZiBvcmlnaW4pIHtcblx0XHRcdGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRjMCA9IGNoYXJ0anNDb2xvcihvcmlnaW4pO1xuXHRcdFx0XHRpZiAoYzAudmFsaWQpIHtcblx0XHRcdFx0XHRjMSA9IGNoYXJ0anNDb2xvcih0YXJnZXQpO1xuXHRcdFx0XHRcdGlmIChjMS52YWxpZCkge1xuXHRcdFx0XHRcdFx0dmlld1trZXldID0gYzEubWl4KGMwLCBlYXNlKS5yZ2JTdHJpbmcoKTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChoZWxwZXJzJDEuaXNGaW5pdGUob3JpZ2luKSAmJiBoZWxwZXJzJDEuaXNGaW5pdGUodGFyZ2V0KSkge1xuXHRcdFx0XHR2aWV3W2tleV0gPSBvcmlnaW4gKyAodGFyZ2V0IC0gb3JpZ2luKSAqIGVhc2U7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZpZXdba2V5XSA9IHRhcmdldDtcblx0fVxufVxuXG52YXIgRWxlbWVudCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcblx0aGVscGVycyQxLmV4dGVuZCh0aGlzLCBjb25maWd1cmF0aW9uKTtcblx0dGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG5oZWxwZXJzJDEuZXh0ZW5kKEVsZW1lbnQucHJvdG90eXBlLCB7XG5cdF90eXBlOiB1bmRlZmluZWQsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oaWRkZW4gPSBmYWxzZTtcblx0fSxcblxuXHRwaXZvdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAoIW1lLl92aWV3KSB7XG5cdFx0XHRtZS5fdmlldyA9IGhlbHBlcnMkMS5leHRlbmQoe30sIG1lLl9tb2RlbCk7XG5cdFx0fVxuXHRcdG1lLl9zdGFydCA9IHt9O1xuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHR0cmFuc2l0aW9uOiBmdW5jdGlvbihlYXNlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbW9kZWwgPSBtZS5fbW9kZWw7XG5cdFx0dmFyIHN0YXJ0ID0gbWUuX3N0YXJ0O1xuXHRcdHZhciB2aWV3ID0gbWUuX3ZpZXc7XG5cblx0XHQvLyBObyBhbmltYXRpb24gLT4gTm8gVHJhbnNpdGlvblxuXHRcdGlmICghbW9kZWwgfHwgZWFzZSA9PT0gMSkge1xuXHRcdFx0bWUuX3ZpZXcgPSBoZWxwZXJzJDEuZXh0ZW5kKHt9LCBtb2RlbCk7XG5cdFx0XHRtZS5fc3RhcnQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIG1lO1xuXHRcdH1cblxuXHRcdGlmICghdmlldykge1xuXHRcdFx0dmlldyA9IG1lLl92aWV3ID0ge307XG5cdFx0fVxuXG5cdFx0aWYgKCFzdGFydCkge1xuXHRcdFx0c3RhcnQgPSBtZS5fc3RhcnQgPSB7fTtcblx0XHR9XG5cblx0XHRpbnRlcnBvbGF0ZShzdGFydCwgdmlldywgbW9kZWwsIGVhc2UpO1xuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHRoaXMuX21vZGVsLngsXG5cdFx0XHR5OiB0aGlzLl9tb2RlbC55XG5cdFx0fTtcblx0fSxcblxuXHRoYXNWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnMkMS5pc051bWJlcih0aGlzLl9tb2RlbC54KSAmJiBoZWxwZXJzJDEuaXNOdW1iZXIodGhpcy5fbW9kZWwueSk7XG5cdH1cbn0pO1xuXG5FbGVtZW50LmV4dGVuZCA9IGhlbHBlcnMkMS5pbmhlcml0cztcblxudmFyIGNvcmVfZWxlbWVudCA9IEVsZW1lbnQ7XG5cbnZhciBleHBvcnRzJDMgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0Y2hhcnQ6IG51bGwsIC8vIHRoZSBhbmltYXRpb24gYXNzb2NpYXRlZCBjaGFydCBpbnN0YW5jZVxuXHRjdXJyZW50U3RlcDogMCwgLy8gdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHN0ZXBcblx0bnVtU3RlcHM6IDYwLCAvLyBkZWZhdWx0IG51bWJlciBvZiBzdGVwc1xuXHRlYXNpbmc6ICcnLCAvLyB0aGUgZWFzaW5nIHRvIHVzZSBmb3IgdGhpcyBhbmltYXRpb25cblx0cmVuZGVyOiBudWxsLCAvLyByZW5kZXIgZnVuY3Rpb24gdXNlZCBieSB0aGUgYW5pbWF0aW9uIHNlcnZpY2VcblxuXHRvbkFuaW1hdGlvblByb2dyZXNzOiBudWxsLCAvLyB1c2VyIHNwZWNpZmllZCBjYWxsYmFjayB0byBmaXJlIG9uIGVhY2ggc3RlcCBvZiB0aGUgYW5pbWF0aW9uXG5cdG9uQW5pbWF0aW9uQ29tcGxldGU6IG51bGwsIC8vIHVzZXIgc3BlY2lmaWVkIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVzXG59KTtcblxudmFyIGNvcmVfYW5pbWF0aW9uID0gZXhwb3J0cyQzO1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LkFuaW1hdGlvbiBpbnN0ZWFkXG4gKiBAcHJvcCBDaGFydC5BbmltYXRpb24jYW5pbWF0aW9uT2JqZWN0XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzJDMucHJvdG90eXBlLCAnYW5pbWF0aW9uT2JqZWN0Jywge1xuXHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59KTtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LkFuaW1hdGlvbiNjaGFydCBpbnN0ZWFkXG4gKiBAcHJvcCBDaGFydC5BbmltYXRpb24jY2hhcnRJbnN0YW5jZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyQzLnByb3RvdHlwZSwgJ2NoYXJ0SW5zdGFuY2UnLCB7XG5cdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2hhcnQ7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR0aGlzLmNoYXJ0ID0gdmFsdWU7XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0YW5pbWF0aW9uOiB7XG5cdFx0ZHVyYXRpb246IDEwMDAsXG5cdFx0ZWFzaW5nOiAnZWFzZU91dFF1YXJ0Jyxcblx0XHRvblByb2dyZXNzOiBoZWxwZXJzJDEubm9vcCxcblx0XHRvbkNvbXBsZXRlOiBoZWxwZXJzJDEubm9vcFxuXHR9XG59KTtcblxudmFyIGNvcmVfYW5pbWF0aW9ucyA9IHtcblx0YW5pbWF0aW9uczogW10sXG5cdHJlcXVlc3Q6IG51bGwsXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IHRvIGFuaW1hdGUuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQW5pbWF0aW9ufSBhbmltYXRpb24gLSBUaGUgYW5pbWF0aW9uIHRoYXQgd2Ugd2lsbCBhbmltYXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBUaGUgYW5pbWF0aW9uIGR1cmF0aW9uIGluIG1zLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGxhenkgLSBpZiB0cnVlLCB0aGUgY2hhcnQgaXMgbm90IG1hcmtlZCBhcyBhbmltYXRpbmcgdG8gZW5hYmxlIG1vcmUgcmVzcG9uc2l2ZSBpbnRlcmFjdGlvbnNcblx0ICovXG5cdGFkZEFuaW1hdGlvbjogZnVuY3Rpb24oY2hhcnQsIGFuaW1hdGlvbiwgZHVyYXRpb24sIGxhenkpIHtcblx0XHR2YXIgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucztcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGFuaW1hdGlvbi5jaGFydCA9IGNoYXJ0O1xuXHRcdGFuaW1hdGlvbi5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdGFuaW1hdGlvbi5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG5cdFx0aWYgKCFsYXp5KSB7XG5cdFx0XHRjaGFydC5hbmltYXRpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhbmltYXRpb25zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0aWYgKGFuaW1hdGlvbnNbaV0uY2hhcnQgPT09IGNoYXJ0KSB7XG5cdFx0XHRcdGFuaW1hdGlvbnNbaV0gPSBhbmltYXRpb247XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcblxuXHRcdC8vIElmIHRoZXJlIGFyZSBubyBhbmltYXRpb25zIHF1ZXVlZCwgbWFudWFsbHkga2lja3N0YXJ0IGEgZGlnZXN0LCBmb3IgbGFjayBvZiBhIGJldHRlciB3b3JkXG5cdFx0aWYgKGFuaW1hdGlvbnMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHR0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuXHRcdH1cblx0fSxcblxuXHRjYW5jZWxBbmltYXRpb246IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGluZGV4ID0gaGVscGVycyQxLmZpbmRJbmRleCh0aGlzLmFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbikge1xuXHRcdFx0cmV0dXJuIGFuaW1hdGlvbi5jaGFydCA9PT0gY2hhcnQ7XG5cdFx0fSk7XG5cblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHR0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdGNoYXJ0LmFuaW1hdGluZyA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblxuXHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0aWYgKG1lLnJlcXVlc3QgPT09IG51bGwpIHtcblx0XHRcdC8vIFNraXAgYW5pbWF0aW9uIGZyYW1lIHJlcXVlc3RzIHVudGlsIHRoZSBhY3RpdmUgb25lIGlzIGV4ZWN1dGVkLlxuXHRcdFx0Ly8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gcHJvY2Vzc2luZyBtb3VzZSBldmVudHMsIGUuZy4gJ21vdXNlbW92ZSdcblx0XHRcdC8vIGFuZCAnbW91c2VvdXQnIGV2ZW50cyB3aWxsIHRyaWdnZXIgbXVsdGlwbGUgcmVuZGVycy5cblx0XHRcdG1lLnJlcXVlc3QgPSBoZWxwZXJzJDEucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1lLnJlcXVlc3QgPSBudWxsO1xuXHRcdFx0XHRtZS5zdGFydERpZ2VzdCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0c3RhcnREaWdlc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRtZS5hZHZhbmNlKCk7XG5cblx0XHQvLyBEbyB3ZSBoYXZlIG1vcmUgc3R1ZmYgdG8gYW5pbWF0ZT9cblx0XHRpZiAobWUuYW5pbWF0aW9ucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRtZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRhZHZhbmNlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucztcblx0XHR2YXIgYW5pbWF0aW9uLCBjaGFydCwgbnVtU3RlcHMsIG5leHRTdGVwO1xuXHRcdHZhciBpID0gMDtcblxuXHRcdC8vIDEgYW5pbWF0aW9uIHBlciBjaGFydCwgc28gd2UgYXJlIGxvb3BpbmcgY2hhcnRzIGhlcmVcblx0XHR3aGlsZSAoaSA8IGFuaW1hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRhbmltYXRpb24gPSBhbmltYXRpb25zW2ldO1xuXHRcdFx0Y2hhcnQgPSBhbmltYXRpb24uY2hhcnQ7XG5cdFx0XHRudW1TdGVwcyA9IGFuaW1hdGlvbi5udW1TdGVwcztcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgY3VycmVudFN0ZXAgc3RhcnRzIGF0IDFcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy82MTA0XG5cdFx0XHRuZXh0U3RlcCA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBhbmltYXRpb24uc3RhcnRUaW1lKSAvIGFuaW1hdGlvbi5kdXJhdGlvbiAqIG51bVN0ZXBzKSArIDE7XG5cdFx0XHRhbmltYXRpb24uY3VycmVudFN0ZXAgPSBNYXRoLm1pbihuZXh0U3RlcCwgbnVtU3RlcHMpO1xuXG5cdFx0XHRoZWxwZXJzJDEuY2FsbGJhY2soYW5pbWF0aW9uLnJlbmRlciwgW2NoYXJ0LCBhbmltYXRpb25dLCBjaGFydCk7XG5cdFx0XHRoZWxwZXJzJDEuY2FsbGJhY2soYW5pbWF0aW9uLm9uQW5pbWF0aW9uUHJvZ3Jlc3MsIFthbmltYXRpb25dLCBjaGFydCk7XG5cblx0XHRcdGlmIChhbmltYXRpb24uY3VycmVudFN0ZXAgPj0gbnVtU3RlcHMpIHtcblx0XHRcdFx0aGVscGVycyQxLmNhbGxiYWNrKGFuaW1hdGlvbi5vbkFuaW1hdGlvbkNvbXBsZXRlLCBbYW5pbWF0aW9uXSwgY2hhcnQpO1xuXHRcdFx0XHRjaGFydC5hbmltYXRpbmcgPSBmYWxzZTtcblx0XHRcdFx0YW5pbWF0aW9ucy5zcGxpY2UoaSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQrK2k7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgcmVzb2x2ZSA9IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmU7XG5cbnZhciBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcblxuLyoqXG4gKiBIb29rcyB0aGUgYXJyYXkgbWV0aG9kcyB0aGF0IGFkZCBvciByZW1vdmUgdmFsdWVzICgncHVzaCcsIHBvcCcsICdzaGlmdCcsICdzcGxpY2UnLFxuICogJ3Vuc2hpZnQnKSBhbmQgbm90aWZ5IHRoZSBsaXN0ZW5lciBBRlRFUiB0aGUgYXJyYXkgaGFzIGJlZW4gYWx0ZXJlZC4gTGlzdGVuZXJzIGFyZVxuICogY2FsbGVkIG9uIHRoZSAnb25EYXRhKicgY2FsbGJhY2tzIChlLmcuIG9uRGF0YVB1c2gsIGV0Yy4pIHdpdGggc2FtZSBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuXHRpZiAoYXJyYXkuX2NoYXJ0anMpIHtcblx0XHRhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCAnX2NoYXJ0anMnLCB7XG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdHZhbHVlOiB7XG5cdFx0XHRsaXN0ZW5lcnM6IFtsaXN0ZW5lcl1cblx0XHR9XG5cdH0pO1xuXG5cdGFycmF5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0dmFyIG1ldGhvZCA9ICdvbkRhdGEnICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpO1xuXHRcdHZhciBiYXNlID0gYXJyYXlba2V5XTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdFx0XHR2YXIgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcblxuXHRcdFx0XHRoZWxwZXJzJDEuZWFjaChhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMsIGZ1bmN0aW9uKG9iamVjdCkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygb2JqZWN0W21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdG9iamVjdFttZXRob2RdLmFwcGx5KG9iamVjdCwgYXJncyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gcmVzO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBnaXZlbiBhcnJheSBldmVudCBsaXN0ZW5lciBhbmQgY2xlYW51cCBleHRyYSBhdHRhY2hlZCBwcm9wZXJ0aWVzIChzdWNoIGFzXG4gKiB0aGUgX2NoYXJ0anMgc3R1YiBhbmQgb3ZlcnJpZGRlbiBtZXRob2RzKSBpZiBhcnJheSBkb2Vzbid0IGhhdmUgYW55IG1vcmUgbGlzdGVuZXJzLlxuICovXG5mdW5jdGlvbiB1bmxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuXHR2YXIgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuXHRpZiAoIXN0dWIpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG5cdHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcblx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHR9XG5cblx0aWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0YXJyYXlFdmVudHMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRkZWxldGUgYXJyYXlba2V5XTtcblx0fSk7XG5cblx0ZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuXG4vLyBCYXNlIGNsYXNzIGZvciBhbGwgZGF0YXNldCBjb250cm9sbGVycyAobGluZSwgYmFyLCBldGMpXG52YXIgRGF0YXNldENvbnRyb2xsZXIgPSBmdW5jdGlvbihjaGFydCwgZGF0YXNldEluZGV4KSB7XG5cdHRoaXMuaW5pdGlhbGl6ZShjaGFydCwgZGF0YXNldEluZGV4KTtcbn07XG5cbmhlbHBlcnMkMS5leHRlbmQoRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLCB7XG5cblx0LyoqXG5cdCAqIEVsZW1lbnQgdHlwZSB1c2VkIHRvIGdlbmVyYXRlIGEgbWV0YSBkYXRhc2V0IChlLmcuIENoYXJ0LmVsZW1lbnQuTGluZSkuXG5cdCAqIEB0eXBlIHtDaGFydC5jb3JlLmVsZW1lbnR9XG5cdCAqL1xuXHRkYXRhc2V0RWxlbWVudFR5cGU6IG51bGwsXG5cblx0LyoqXG5cdCAqIEVsZW1lbnQgdHlwZSB1c2VkIHRvIGdlbmVyYXRlIGEgbWV0YSBkYXRhIChlLmcuIENoYXJ0LmVsZW1lbnQuUG9pbnQpLlxuXHQgKiBAdHlwZSB7Q2hhcnQuY29yZS5lbGVtZW50fVxuXHQgKi9cblx0ZGF0YUVsZW1lbnRUeXBlOiBudWxsLFxuXG5cdC8qKlxuXHQgKiBEYXRhc2V0IGVsZW1lbnQgb3B0aW9uIGtleXMgdG8gYmUgcmVzb2x2ZWQgaW4gX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMuXG5cdCAqIEEgZGVyaXZlZCBjb250cm9sbGVyIG1heSBvdmVycmlkZSB0aGlzIHRvIHJlc29sdmUgY29udHJvbGxlci1zcGVjaWZpYyBvcHRpb25zLlxuXHQgKiBUaGUga2V5cyBkZWZpbmVkIGhlcmUgYXJlIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGZvciBsZWdlbmQgc3R5bGVzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFzZXRFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJDYXBTdHlsZScsXG5cdFx0J2JvcmRlckNvbG9yJyxcblx0XHQnYm9yZGVyRGFzaCcsXG5cdFx0J2JvcmRlckRhc2hPZmZzZXQnLFxuXHRcdCdib3JkZXJKb2luU3R5bGUnLFxuXHRcdCdib3JkZXJXaWR0aCdcblx0XSxcblxuXHQvKipcblx0ICogRGF0YSBlbGVtZW50IG9wdGlvbiBrZXlzIHRvIGJlIHJlc29sdmVkIGluIF9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zLlxuXHQgKiBBIGRlcml2ZWQgY29udHJvbGxlciBtYXkgb3ZlcnJpZGUgdGhpcyB0byByZXNvbHZlIGNvbnRyb2xsZXItc3BlY2lmaWMgb3B0aW9ucy5cblx0ICogVGhlIGtleXMgZGVmaW5lZCBoZXJlIGFyZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBmb3IgbGVnZW5kIHN0eWxlcy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J3BvaW50U3R5bGUnXG5cdF0sXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0bWUuY2hhcnQgPSBjaGFydDtcblx0XHRtZS5pbmRleCA9IGRhdGFzZXRJbmRleDtcblx0XHRtZS5saW5rU2NhbGVzKCk7XG5cdFx0bWUuYWRkRWxlbWVudHMoKTtcblx0XHRtZS5fdHlwZSA9IG1lLmdldE1ldGEoKS50eXBlO1xuXHR9LFxuXG5cdHVwZGF0ZUluZGV4OiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHR0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuXHR9LFxuXG5cdGxpbmtTY2FsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIHNjYWxlcyA9IGNoYXJ0LnNjYWxlcztcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgc2NhbGVzT3B0cyA9IGNoYXJ0Lm9wdGlvbnMuc2NhbGVzO1xuXG5cdFx0aWYgKG1ldGEueEF4aXNJRCA9PT0gbnVsbCB8fCAhKG1ldGEueEF4aXNJRCBpbiBzY2FsZXMpIHx8IGRhdGFzZXQueEF4aXNJRCkge1xuXHRcdFx0bWV0YS54QXhpc0lEID0gZGF0YXNldC54QXhpc0lEIHx8IHNjYWxlc09wdHMueEF4ZXNbMF0uaWQ7XG5cdFx0fVxuXHRcdGlmIChtZXRhLnlBeGlzSUQgPT09IG51bGwgfHwgIShtZXRhLnlBeGlzSUQgaW4gc2NhbGVzKSB8fCBkYXRhc2V0LnlBeGlzSUQpIHtcblx0XHRcdG1ldGEueUF4aXNJRCA9IGRhdGFzZXQueUF4aXNJRCB8fCBzY2FsZXNPcHRzLnlBeGVzWzBdLmlkO1xuXHRcdH1cblx0fSxcblxuXHRnZXREYXRhc2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3RoaXMuaW5kZXhdO1xuXHR9LFxuXG5cdGdldE1ldGE6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuXHR9LFxuXG5cdGdldFNjYWxlRm9ySWQ6IGZ1bmN0aW9uKHNjYWxlSUQpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZXNbc2NhbGVJRF07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0VmFsdWVTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueUF4aXNJRDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRJbmRleFNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldE1ldGEoKS54QXhpc0lEO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFZhbHVlU2NhbGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFNjYWxlRm9ySWQodGhpcy5fZ2V0VmFsdWVTY2FsZUlkKCkpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEluZGV4U2NhbGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFNjYWxlRm9ySWQodGhpcy5fZ2V0SW5kZXhTY2FsZUlkKCkpO1xuXHR9LFxuXG5cdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl91cGRhdGUodHJ1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5fZGF0YSkge1xuXHRcdFx0dW5saXN0ZW5BcnJheUV2ZW50cyh0aGlzLl9kYXRhLCB0aGlzKTtcblx0XHR9XG5cdH0sXG5cblx0Y3JlYXRlTWV0YURhdGFzZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHR5cGUgPSBtZS5kYXRhc2V0RWxlbWVudFR5cGU7XG5cdFx0cmV0dXJuIHR5cGUgJiYgbmV3IHR5cGUoe1xuXHRcdFx0X2NoYXJ0OiBtZS5jaGFydCxcblx0XHRcdF9kYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0fSk7XG5cdH0sXG5cblx0Y3JlYXRlTWV0YURhdGE6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdHlwZSA9IG1lLmRhdGFFbGVtZW50VHlwZTtcblx0XHRyZXR1cm4gdHlwZSAmJiBuZXcgdHlwZSh7XG5cdFx0XHRfY2hhcnQ6IG1lLmNoYXJ0LFxuXHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRfaW5kZXg6IGluZGV4XG5cdFx0fSk7XG5cdH0sXG5cblx0YWRkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YSB8fCBbXTtcblx0XHR2YXIgbWV0YURhdGEgPSBtZXRhLmRhdGE7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1ldGFEYXRhW2ldID0gbWV0YURhdGFbaV0gfHwgbWUuY3JlYXRlTWV0YURhdGEoaSk7XG5cdFx0fVxuXG5cdFx0bWV0YS5kYXRhc2V0ID0gbWV0YS5kYXRhc2V0IHx8IG1lLmNyZWF0ZU1ldGFEYXRhc2V0KCk7XG5cdH0sXG5cblx0YWRkRWxlbWVudEFuZFJlc2V0OiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5jcmVhdGVNZXRhRGF0YShpbmRleCk7XG5cdFx0dGhpcy5nZXRNZXRhKCkuZGF0YS5zcGxpY2UoaW5kZXgsIDAsIGVsZW1lbnQpO1xuXHRcdHRoaXMudXBkYXRlRWxlbWVudChlbGVtZW50LCBpbmRleCwgdHJ1ZSk7XG5cdH0sXG5cblx0YnVpbGRPclVwZGF0ZUVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBkYXRhID0gZGF0YXNldC5kYXRhIHx8IChkYXRhc2V0LmRhdGEgPSBbXSk7XG5cblx0XHQvLyBJbiBvcmRlciB0byBjb3JyZWN0bHkgaGFuZGxlIGRhdGEgYWRkaXRpb24vZGVsZXRpb24gYW5pbWF0aW9uIChhbiB0aHVzIHNpbXVsYXRlXG5cdFx0Ly8gcmVhbC10aW1lIGNoYXJ0cyksIHdlIG5lZWQgdG8gbW9uaXRvciB0aGVzZSBkYXRhIG1vZGlmaWNhdGlvbnMgYW5kIHN5bmNocm9uaXplXG5cdFx0Ly8gdGhlIGludGVybmFsIG1ldGEgZGF0YSBhY2NvcmRpbmdseS5cblx0XHRpZiAobWUuX2RhdGEgIT09IGRhdGEpIHtcblx0XHRcdGlmIChtZS5fZGF0YSkge1xuXHRcdFx0XHQvLyBUaGlzIGNhc2UgaGFwcGVucyB3aGVuIHRoZSB1c2VyIHJlcGxhY2VkIHRoZSBkYXRhIGFycmF5IGluc3RhbmNlLlxuXHRcdFx0XHR1bmxpc3RlbkFycmF5RXZlbnRzKG1lLl9kYXRhLCBtZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChkYXRhICYmIE9iamVjdC5pc0V4dGVuc2libGUoZGF0YSkpIHtcblx0XHRcdFx0bGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgbWUpO1xuXHRcdFx0fVxuXHRcdFx0bWUuX2RhdGEgPSBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFJlLXN5bmMgbWV0YSBkYXRhIGluIGNhc2UgdGhlIHVzZXIgcmVwbGFjZWQgdGhlIGRhdGEgYXJyYXkgb3IgaWYgd2UgbWlzc2VkXG5cdFx0Ly8gYW55IHVwZGF0ZXMgYW5kIHNvIG1ha2Ugc3VyZSB0aGF0IHdlIGhhbmRsZSBudW1iZXIgb2YgZGF0YXBvaW50cyBjaGFuZ2luZy5cblx0XHRtZS5yZXN5bmNFbGVtZW50cygpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtZXJnZWQgdXNlci1zdXBwbGllZCBhbmQgZGVmYXVsdCBkYXRhc2V0LWxldmVsIG9wdGlvbnNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0bWUuX2NvbmZpZyA9IGhlbHBlcnMkMS5tZXJnZSh7fSwgW1xuXHRcdFx0bWUuY2hhcnQub3B0aW9ucy5kYXRhc2V0c1ttZS5fdHlwZV0sXG5cdFx0XHRtZS5nZXREYXRhc2V0KCksXG5cdFx0XSwge1xuXHRcdFx0bWVyZ2VyOiBmdW5jdGlvbihrZXksIHRhcmdldCwgc291cmNlKSB7XG5cdFx0XHRcdGlmIChrZXkgIT09ICdfbWV0YScgJiYga2V5ICE9PSAnZGF0YScpIHtcblx0XHRcdFx0XHRoZWxwZXJzJDEuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF91cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRtZS5fY29uZmlndXJlKCk7XG5cdFx0bWUuX2NhY2hlZERhdGFPcHRzID0gbnVsbDtcblx0XHRtZS51cGRhdGUocmVzZXQpO1xuXHR9LFxuXG5cdHVwZGF0ZTogaGVscGVycyQxLm5vb3AsXG5cblx0dHJhbnNpdGlvbjogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdHZhciBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHR2YXIgaWxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblx0XHR2YXIgaSA9IDA7XG5cblx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0ZWxlbWVudHNbaV0udHJhbnNpdGlvbihlYXNpbmdWYWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKG1ldGEuZGF0YXNldCkge1xuXHRcdFx0bWV0YS5kYXRhc2V0LnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdHZhciBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHR2YXIgaWxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblx0XHR2YXIgaSA9IDA7XG5cblx0XHRpZiAobWV0YS5kYXRhc2V0KSB7XG5cdFx0XHRtZXRhLmRhdGFzZXQuZHJhdygpO1xuXHRcdH1cblxuXHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRlbGVtZW50c1tpXS5kcmF3KCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgc2V0IG9mIHByZWRlZmluZWQgc3R5bGUgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgZGF0YXNldFxuXHQgKiBvciB0aGUgZGF0YSBpZiB0aGUgaW5kZXggaXMgc3BlY2lmaWVkXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIGRhdGEgaW5kZXhcblx0ICogQHJldHVybiB7SVN0eWxlSW50ZXJmYWNlfSBzdHlsZSBvYmplY3Rcblx0ICovXG5cdGdldFN0eWxlOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG5cdFx0dmFyIHN0eWxlO1xuXG5cdFx0bWUuX2NvbmZpZ3VyZSgpO1xuXHRcdGlmIChkYXRhc2V0ICYmIGluZGV4ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHN0eWxlID0gbWUuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMoZGF0YXNldCB8fCB7fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGluZGV4ID0gaW5kZXggfHwgMDtcblx0XHRcdHN0eWxlID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMobWV0YS5kYXRhW2luZGV4XSB8fCB7fSwgaW5kZXgpO1xuXHRcdH1cblxuXHRcdGlmIChzdHlsZS5maWxsID09PSBmYWxzZSB8fCBzdHlsZS5maWxsID09PSBudWxsKSB7XG5cdFx0XHRzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZS5ib3JkZXJDb2xvcjtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3R5bGU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oZWxlbWVudCwgaG92ZXIpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0T3B0cyA9IG1lLl9jb25maWc7XG5cdFx0dmFyIGN1c3RvbSA9IGVsZW1lbnQuY3VzdG9tIHx8IHt9O1xuXHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucy5lbGVtZW50c1ttZS5kYXRhc2V0RWxlbWVudFR5cGUucHJvdG90eXBlLl90eXBlXSB8fCB7fTtcblx0XHR2YXIgZWxlbWVudE9wdGlvbnMgPSBtZS5fZGF0YXNldEVsZW1lbnRPcHRpb25zO1xuXHRcdHZhciB2YWx1ZXMgPSB7fTtcblx0XHR2YXIgaSwgaWxlbiwga2V5LCByZWFkS2V5O1xuXG5cdFx0Ly8gU2NyaXB0YWJsZSBvcHRpb25zXG5cdFx0dmFyIGNvbnRleHQgPSB7XG5cdFx0XHRjaGFydDogY2hhcnQsXG5cdFx0XHRkYXRhc2V0OiBtZS5nZXREYXRhc2V0KCksXG5cdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4LFxuXHRcdFx0aG92ZXI6IGhvdmVyXG5cdFx0fTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBlbGVtZW50T3B0aW9ucy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGtleSA9IGVsZW1lbnRPcHRpb25zW2ldO1xuXHRcdFx0cmVhZEtleSA9IGhvdmVyID8gJ2hvdmVyJyArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKSA6IGtleTtcblx0XHRcdHZhbHVlc1trZXldID0gcmVzb2x2ZShbXG5cdFx0XHRcdGN1c3RvbVtyZWFkS2V5XSxcblx0XHRcdFx0ZGF0YXNldE9wdHNbcmVhZEtleV0sXG5cdFx0XHRcdG9wdGlvbnNbcmVhZEtleV1cblx0XHRcdF0sIGNvbnRleHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjdXN0b20gPSBlbGVtZW50ICYmIGVsZW1lbnQuY3VzdG9tO1xuXHRcdHZhciBjYWNoZWQgPSBtZS5fY2FjaGVkRGF0YU9wdHM7XG5cdFx0aWYgKGNhY2hlZCAmJiAhY3VzdG9tKSB7XG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXHRcdH1cblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgZGF0YXNldE9wdHMgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucy5lbGVtZW50c1ttZS5kYXRhRWxlbWVudFR5cGUucHJvdG90eXBlLl90eXBlXSB8fCB7fTtcblx0XHR2YXIgZWxlbWVudE9wdGlvbnMgPSBtZS5fZGF0YUVsZW1lbnRPcHRpb25zO1xuXHRcdHZhciB2YWx1ZXMgPSB7fTtcblxuXHRcdC8vIFNjcmlwdGFibGUgb3B0aW9uc1xuXHRcdHZhciBjb250ZXh0ID0ge1xuXHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0ZGF0YUluZGV4OiBpbmRleCxcblx0XHRcdGRhdGFzZXQ6IG1lLmdldERhdGFzZXQoKSxcblx0XHRcdGRhdGFzZXRJbmRleDogbWUuaW5kZXhcblx0XHR9O1xuXG5cdFx0Ly8gYHJlc29sdmVgIHNldHMgY2FjaGVhYmxlIHRvIGBmYWxzZWAgaWYgYW55IG9wdGlvbiBpcyBpbmRleGVkIG9yIHNjcmlwdGVkXG5cdFx0dmFyIGluZm8gPSB7Y2FjaGVhYmxlOiAhY3VzdG9tfTtcblxuXHRcdHZhciBrZXlzLCBpLCBpbGVuLCBrZXk7XG5cblx0XHRjdXN0b20gPSBjdXN0b20gfHwge307XG5cblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkoZWxlbWVudE9wdGlvbnMpKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZWxlbWVudE9wdGlvbnMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGtleSA9IGVsZW1lbnRPcHRpb25zW2ldO1xuXHRcdFx0XHR2YWx1ZXNba2V5XSA9IHJlc29sdmUoW1xuXHRcdFx0XHRcdGN1c3RvbVtrZXldLFxuXHRcdFx0XHRcdGRhdGFzZXRPcHRzW2tleV0sXG5cdFx0XHRcdFx0b3B0aW9uc1trZXldXG5cdFx0XHRcdF0sIGNvbnRleHQsIGluZGV4LCBpbmZvKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0a2V5cyA9IE9iamVjdC5rZXlzKGVsZW1lbnRPcHRpb25zKTtcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdFx0XHR2YWx1ZXNba2V5XSA9IHJlc29sdmUoW1xuXHRcdFx0XHRcdGN1c3RvbVtrZXldLFxuXHRcdFx0XHRcdGRhdGFzZXRPcHRzW2VsZW1lbnRPcHRpb25zW2tleV1dLFxuXHRcdFx0XHRcdGRhdGFzZXRPcHRzW2tleV0sXG5cdFx0XHRcdFx0b3B0aW9uc1trZXldXG5cdFx0XHRcdF0sIGNvbnRleHQsIGluZGV4LCBpbmZvKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaW5mby5jYWNoZWFibGUpIHtcblx0XHRcdG1lLl9jYWNoZWREYXRhT3B0cyA9IE9iamVjdC5mcmVlemUodmFsdWVzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWVzO1xuXHR9LFxuXG5cdHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRoZWxwZXJzJDEubWVyZ2UoZWxlbWVudC5fbW9kZWwsIGVsZW1lbnQuJHByZXZpb3VzU3R5bGUgfHwge30pO1xuXHRcdGRlbGV0ZSBlbGVtZW50LiRwcmV2aW91c1N0eWxlO1xuXHR9LFxuXG5cdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHR2YXIgZGF0YXNldCA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tlbGVtZW50Ll9kYXRhc2V0SW5kZXhdO1xuXHRcdHZhciBpbmRleCA9IGVsZW1lbnQuX2luZGV4O1xuXHRcdHZhciBjdXN0b20gPSBlbGVtZW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgbW9kZWwgPSBlbGVtZW50Ll9tb2RlbDtcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0ZWxlbWVudC4kcHJldmlvdXNTdHlsZSA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG1vZGVsLmJvcmRlcldpZHRoXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHJlc29sdmUoW2N1c3RvbS5ob3ZlckJhY2tncm91bmRDb2xvciwgZGF0YXNldC5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihtb2RlbC5iYWNrZ3JvdW5kQ29sb3IpXSwgdW5kZWZpbmVkLCBpbmRleCk7XG5cdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSByZXNvbHZlKFtjdXN0b20uaG92ZXJCb3JkZXJDb2xvciwgZGF0YXNldC5ob3ZlckJvcmRlckNvbG9yLCBnZXRIb3ZlckNvbG9yKG1vZGVsLmJvcmRlckNvbG9yKV0sIHVuZGVmaW5lZCwgaW5kZXgpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gcmVzb2x2ZShbY3VzdG9tLmhvdmVyQm9yZGVyV2lkdGgsIGRhdGFzZXQuaG92ZXJCb3JkZXJXaWR0aCwgbW9kZWwuYm9yZGVyV2lkdGhdLCB1bmRlZmluZWQsIGluZGV4KTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmdldE1ldGEoKS5kYXRhc2V0O1xuXG5cdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdHRoaXMucmVtb3ZlSG92ZXJTdHlsZShlbGVtZW50KTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfc2V0RGF0YXNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5nZXRNZXRhKCkuZGF0YXNldDtcblx0XHR2YXIgcHJldiA9IHt9O1xuXHRcdHZhciBpLCBpbGVuLCBrZXksIGtleXMsIGhvdmVyT3B0aW9ucywgbW9kZWw7XG5cblx0XHRpZiAoIWVsZW1lbnQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRtb2RlbCA9IGVsZW1lbnQuX21vZGVsO1xuXHRcdGhvdmVyT3B0aW9ucyA9IHRoaXMuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMoZWxlbWVudCwgdHJ1ZSk7XG5cblx0XHRrZXlzID0gT2JqZWN0LmtleXMoaG92ZXJPcHRpb25zKTtcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGtleSA9IGtleXNbaV07XG5cdFx0XHRwcmV2W2tleV0gPSBtb2RlbFtrZXldO1xuXHRcdFx0bW9kZWxba2V5XSA9IGhvdmVyT3B0aW9uc1trZXldO1xuXHRcdH1cblxuXHRcdGVsZW1lbnQuJHByZXZpb3VzU3R5bGUgPSBwcmV2O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cmVzeW5jRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YTtcblx0XHR2YXIgbnVtTWV0YSA9IG1ldGEuZGF0YS5sZW5ndGg7XG5cdFx0dmFyIG51bURhdGEgPSBkYXRhLmxlbmd0aDtcblxuXHRcdGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuXHRcdFx0bWV0YS5kYXRhLnNwbGljZShudW1EYXRhLCBudW1NZXRhIC0gbnVtRGF0YSk7XG5cdFx0fSBlbHNlIGlmIChudW1EYXRhID4gbnVtTWV0YSkge1xuXHRcdFx0bWUuaW5zZXJ0RWxlbWVudHMobnVtTWV0YSwgbnVtRGF0YSAtIG51bU1ldGEpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGluc2VydEVsZW1lbnRzOiBmdW5jdGlvbihzdGFydCwgY291bnQpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcblx0XHRcdHRoaXMuYWRkRWxlbWVudEFuZFJlc2V0KHN0YXJ0ICsgaSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0b25EYXRhUHVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHR0aGlzLmluc2VydEVsZW1lbnRzKHRoaXMuZ2V0RGF0YXNldCgpLmRhdGEubGVuZ3RoIC0gY291bnQsIGNvdW50KTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdG9uRGF0YVBvcDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5nZXRNZXRhKCkuZGF0YS5wb3AoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdG9uRGF0YVNoaWZ0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmdldE1ldGEoKS5kYXRhLnNoaWZ0KCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRvbkRhdGFTcGxpY2U6IGZ1bmN0aW9uKHN0YXJ0LCBjb3VudCkge1xuXHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG5cdFx0dGhpcy5pbnNlcnRFbGVtZW50cyhzdGFydCwgYXJndW1lbnRzLmxlbmd0aCAtIDIpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0b25EYXRhVW5zaGlmdDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5pbnNlcnRFbGVtZW50cygwLCBhcmd1bWVudHMubGVuZ3RoKTtcblx0fVxufSk7XG5cbkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCA9IGhlbHBlcnMkMS5pbmhlcml0cztcblxudmFyIGNvcmVfZGF0YXNldENvbnRyb2xsZXIgPSBEYXRhc2V0Q29udHJvbGxlcjtcblxudmFyIFRBVSA9IE1hdGguUEkgKiAyO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZWxlbWVudHM6IHtcblx0XHRhcmM6IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6ICcjZmZmJyxcblx0XHRcdGJvcmRlcldpZHRoOiAyLFxuXHRcdFx0Ym9yZGVyQWxpZ246ICdjZW50ZXInXG5cdFx0fVxuXHR9XG59KTtcblxuZnVuY3Rpb24gY2xpcEFyYyhjdHgsIGFyYykge1xuXHR2YXIgc3RhcnRBbmdsZSA9IGFyYy5zdGFydEFuZ2xlO1xuXHR2YXIgZW5kQW5nbGUgPSBhcmMuZW5kQW5nbGU7XG5cdHZhciBwaXhlbE1hcmdpbiA9IGFyYy5waXhlbE1hcmdpbjtcblx0dmFyIGFuZ2xlTWFyZ2luID0gcGl4ZWxNYXJnaW4gLyBhcmMub3V0ZXJSYWRpdXM7XG5cdHZhciB4ID0gYXJjLng7XG5cdHZhciB5ID0gYXJjLnk7XG5cblx0Ly8gRHJhdyBhbiBpbm5lciBib3JkZXIgYnkgY2xpcGluZyB0aGUgYXJjIGFuZCBkcmF3aW5nIGEgZG91YmxlLXdpZHRoIGJvcmRlclxuXHQvLyBFbmxhcmdlIHRoZSBjbGlwcGluZyBhcmMgYnkgMC4zMyBwaXhlbHMgdG8gZWxpbWluYXRlIGdsaXRjaGVzIGJldHdlZW4gYm9yZGVyc1xuXHRjdHguYmVnaW5QYXRoKCk7XG5cdGN0eC5hcmMoeCwgeSwgYXJjLm91dGVyUmFkaXVzLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4pO1xuXHRpZiAoYXJjLmlubmVyUmFkaXVzID4gcGl4ZWxNYXJnaW4pIHtcblx0XHRhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gYXJjLmlubmVyUmFkaXVzO1xuXHRcdGN0eC5hcmMoeCwgeSwgYXJjLmlubmVyUmFkaXVzIC0gcGl4ZWxNYXJnaW4sIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG5cdH0gZWxzZSB7XG5cdFx0Y3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBNYXRoLlBJIC8gMiwgc3RhcnRBbmdsZSAtIE1hdGguUEkgLyAyKTtcblx0fVxuXHRjdHguY2xvc2VQYXRoKCk7XG5cdGN0eC5jbGlwKCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdGdWxsQ2lyY2xlQm9yZGVycyhjdHgsIHZtLCBhcmMsIGlubmVyKSB7XG5cdHZhciBlbmRBbmdsZSA9IGFyYy5lbmRBbmdsZTtcblx0dmFyIGk7XG5cblx0aWYgKGlubmVyKSB7XG5cdFx0YXJjLmVuZEFuZ2xlID0gYXJjLnN0YXJ0QW5nbGUgKyBUQVU7XG5cdFx0Y2xpcEFyYyhjdHgsIGFyYyk7XG5cdFx0YXJjLmVuZEFuZ2xlID0gZW5kQW5nbGU7XG5cdFx0aWYgKGFyYy5lbmRBbmdsZSA9PT0gYXJjLnN0YXJ0QW5nbGUgJiYgYXJjLmZ1bGxDaXJjbGVzKSB7XG5cdFx0XHRhcmMuZW5kQW5nbGUgKz0gVEFVO1xuXHRcdFx0YXJjLmZ1bGxDaXJjbGVzLS07XG5cdFx0fVxuXHR9XG5cblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRjdHguYXJjKGFyYy54LCBhcmMueSwgYXJjLmlubmVyUmFkaXVzLCBhcmMuc3RhcnRBbmdsZSArIFRBVSwgYXJjLnN0YXJ0QW5nbGUsIHRydWUpO1xuXHRmb3IgKGkgPSAwOyBpIDwgYXJjLmZ1bGxDaXJjbGVzOyArK2kpIHtcblx0XHRjdHguc3Ryb2tlKCk7XG5cdH1cblxuXHRjdHguYmVnaW5QYXRoKCk7XG5cdGN0eC5hcmMoYXJjLngsIGFyYy55LCB2bS5vdXRlclJhZGl1cywgYXJjLnN0YXJ0QW5nbGUsIGFyYy5zdGFydEFuZ2xlICsgVEFVKTtcblx0Zm9yIChpID0gMDsgaSA8IGFyYy5mdWxsQ2lyY2xlczsgKytpKSB7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRyYXdCb3JkZXIoY3R4LCB2bSwgYXJjKSB7XG5cdHZhciBpbm5lciA9IHZtLmJvcmRlckFsaWduID09PSAnaW5uZXInO1xuXG5cdGlmIChpbm5lcikge1xuXHRcdGN0eC5saW5lV2lkdGggPSB2bS5ib3JkZXJXaWR0aCAqIDI7XG5cdFx0Y3R4LmxpbmVKb2luID0gJ3JvdW5kJztcblx0fSBlbHNlIHtcblx0XHRjdHgubGluZVdpZHRoID0gdm0uYm9yZGVyV2lkdGg7XG5cdFx0Y3R4LmxpbmVKb2luID0gJ2JldmVsJztcblx0fVxuXG5cdGlmIChhcmMuZnVsbENpcmNsZXMpIHtcblx0XHRkcmF3RnVsbENpcmNsZUJvcmRlcnMoY3R4LCB2bSwgYXJjLCBpbm5lcik7XG5cdH1cblxuXHRpZiAoaW5uZXIpIHtcblx0XHRjbGlwQXJjKGN0eCwgYXJjKTtcblx0fVxuXG5cdGN0eC5iZWdpblBhdGgoKTtcblx0Y3R4LmFyYyhhcmMueCwgYXJjLnksIHZtLm91dGVyUmFkaXVzLCBhcmMuc3RhcnRBbmdsZSwgYXJjLmVuZEFuZ2xlKTtcblx0Y3R4LmFyYyhhcmMueCwgYXJjLnksIGFyYy5pbm5lclJhZGl1cywgYXJjLmVuZEFuZ2xlLCBhcmMuc3RhcnRBbmdsZSwgdHJ1ZSk7XG5cdGN0eC5jbG9zZVBhdGgoKTtcblx0Y3R4LnN0cm9rZSgpO1xufVxuXG52YXIgZWxlbWVudF9hcmMgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0X3R5cGU6ICdhcmMnLFxuXG5cdGluTGFiZWxSYW5nZTogZnVuY3Rpb24obW91c2VYKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblxuXHRcdGlmICh2bSkge1xuXHRcdFx0cmV0dXJuIChNYXRoLnBvdyhtb3VzZVggLSB2bS54LCAyKSA8IE1hdGgucG93KHZtLnJhZGl1cyArIHZtLmhvdmVyUmFkaXVzLCAyKSk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRpblJhbmdlOiBmdW5jdGlvbihjaGFydFgsIGNoYXJ0WSkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRpZiAodm0pIHtcblx0XHRcdHZhciBwb2ludFJlbGF0aXZlUG9zaXRpb24gPSBoZWxwZXJzJDEuZ2V0QW5nbGVGcm9tUG9pbnQodm0sIHt4OiBjaGFydFgsIHk6IGNoYXJ0WX0pO1xuXHRcdFx0dmFyIGFuZ2xlID0gcG9pbnRSZWxhdGl2ZVBvc2l0aW9uLmFuZ2xlO1xuXHRcdFx0dmFyIGRpc3RhbmNlID0gcG9pbnRSZWxhdGl2ZVBvc2l0aW9uLmRpc3RhbmNlO1xuXG5cdFx0XHQvLyBTYW5pdGlzZSBhbmdsZSByYW5nZVxuXHRcdFx0dmFyIHN0YXJ0QW5nbGUgPSB2bS5zdGFydEFuZ2xlO1xuXHRcdFx0dmFyIGVuZEFuZ2xlID0gdm0uZW5kQW5nbGU7XG5cdFx0XHR3aGlsZSAoZW5kQW5nbGUgPCBzdGFydEFuZ2xlKSB7XG5cdFx0XHRcdGVuZEFuZ2xlICs9IFRBVTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChhbmdsZSA+IGVuZEFuZ2xlKSB7XG5cdFx0XHRcdGFuZ2xlIC09IFRBVTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChhbmdsZSA8IHN0YXJ0QW5nbGUpIHtcblx0XHRcdFx0YW5nbGUgKz0gVEFVO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDaGVjayBpZiB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSBvcGVuL2Nsb3NlIGFuZ2xlXG5cdFx0XHR2YXIgYmV0d2VlbkFuZ2xlcyA9IChhbmdsZSA+PSBzdGFydEFuZ2xlICYmIGFuZ2xlIDw9IGVuZEFuZ2xlKTtcblx0XHRcdHZhciB3aXRoaW5SYWRpdXMgPSAoZGlzdGFuY2UgPj0gdm0uaW5uZXJSYWRpdXMgJiYgZGlzdGFuY2UgPD0gdm0ub3V0ZXJSYWRpdXMpO1xuXG5cdFx0XHRyZXR1cm4gKGJldHdlZW5BbmdsZXMgJiYgd2l0aGluUmFkaXVzKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBoYWxmQW5nbGUgPSAodm0uc3RhcnRBbmdsZSArIHZtLmVuZEFuZ2xlKSAvIDI7XG5cdFx0dmFyIGhhbGZSYWRpdXMgPSAodm0uaW5uZXJSYWRpdXMgKyB2bS5vdXRlclJhZGl1cykgLyAyO1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54ICsgTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXMsXG5cdFx0XHR5OiB2bS55ICsgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXNcblx0XHR9O1xuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIE1hdGguUEkgKiAoKHZtLmVuZEFuZ2xlIC0gdm0uc3RhcnRBbmdsZSkgLyAoMiAqIE1hdGguUEkpKSAqIChNYXRoLnBvdyh2bS5vdXRlclJhZGl1cywgMikgLSBNYXRoLnBvdyh2bS5pbm5lclJhZGl1cywgMikpO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgY2VudHJlQW5nbGUgPSB2bS5zdGFydEFuZ2xlICsgKCh2bS5lbmRBbmdsZSAtIHZtLnN0YXJ0QW5nbGUpIC8gMik7XG5cdFx0dmFyIHJhbmdlRnJvbUNlbnRyZSA9ICh2bS5vdXRlclJhZGl1cyAtIHZtLmlubmVyUmFkaXVzKSAvIDIgKyB2bS5pbm5lclJhZGl1cztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54ICsgKE1hdGguY29zKGNlbnRyZUFuZ2xlKSAqIHJhbmdlRnJvbUNlbnRyZSksXG5cdFx0XHR5OiB2bS55ICsgKE1hdGguc2luKGNlbnRyZUFuZ2xlKSAqIHJhbmdlRnJvbUNlbnRyZSlcblx0XHR9O1xuXHR9LFxuXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgcGl4ZWxNYXJnaW4gPSAodm0uYm9yZGVyQWxpZ24gPT09ICdpbm5lcicpID8gMC4zMyA6IDA7XG5cdFx0dmFyIGFyYyA9IHtcblx0XHRcdHg6IHZtLngsXG5cdFx0XHR5OiB2bS55LFxuXHRcdFx0aW5uZXJSYWRpdXM6IHZtLmlubmVyUmFkaXVzLFxuXHRcdFx0b3V0ZXJSYWRpdXM6IE1hdGgubWF4KHZtLm91dGVyUmFkaXVzIC0gcGl4ZWxNYXJnaW4sIDApLFxuXHRcdFx0cGl4ZWxNYXJnaW46IHBpeGVsTWFyZ2luLFxuXHRcdFx0c3RhcnRBbmdsZTogdm0uc3RhcnRBbmdsZSxcblx0XHRcdGVuZEFuZ2xlOiB2bS5lbmRBbmdsZSxcblx0XHRcdGZ1bGxDaXJjbGVzOiBNYXRoLmZsb29yKHZtLmNpcmN1bWZlcmVuY2UgLyBUQVUpXG5cdFx0fTtcblx0XHR2YXIgaTtcblxuXHRcdGN0eC5zYXZlKCk7XG5cblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYmFja2dyb3VuZENvbG9yO1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHZtLmJvcmRlckNvbG9yO1xuXG5cdFx0aWYgKGFyYy5mdWxsQ2lyY2xlcykge1xuXHRcdFx0YXJjLmVuZEFuZ2xlID0gYXJjLnN0YXJ0QW5nbGUgKyBUQVU7XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHguYXJjKGFyYy54LCBhcmMueSwgYXJjLm91dGVyUmFkaXVzLCBhcmMuc3RhcnRBbmdsZSwgYXJjLmVuZEFuZ2xlKTtcblx0XHRcdGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMuaW5uZXJSYWRpdXMsIGFyYy5lbmRBbmdsZSwgYXJjLnN0YXJ0QW5nbGUsIHRydWUpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGFyYy5mdWxsQ2lyY2xlczsgKytpKSB7XG5cdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHR9XG5cdFx0XHRhcmMuZW5kQW5nbGUgPSBhcmMuc3RhcnRBbmdsZSArIHZtLmNpcmN1bWZlcmVuY2UgJSBUQVU7XG5cdFx0fVxuXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMub3V0ZXJSYWRpdXMsIGFyYy5zdGFydEFuZ2xlLCBhcmMuZW5kQW5nbGUpO1xuXHRcdGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMuaW5uZXJSYWRpdXMsIGFyYy5lbmRBbmdsZSwgYXJjLnN0YXJ0QW5nbGUsIHRydWUpO1xuXHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRjdHguZmlsbCgpO1xuXG5cdFx0aWYgKHZtLmJvcmRlcldpZHRoKSB7XG5cdFx0XHRkcmF3Qm9yZGVyKGN0eCwgdm0sIGFyYyk7XG5cdFx0fVxuXG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fVxufSk7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQxID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xuXG52YXIgZGVmYXVsdENvbG9yID0gY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZWxlbWVudHM6IHtcblx0XHRsaW5lOiB7XG5cdFx0XHR0ZW5zaW9uOiAwLjQsXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiAzLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IGRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG5cdFx0XHRib3JkZXJEYXNoOiBbXSxcblx0XHRcdGJvcmRlckRhc2hPZmZzZXQ6IDAuMCxcblx0XHRcdGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcblx0XHRcdGNhcEJlemllclBvaW50czogdHJ1ZSxcblx0XHRcdGZpbGw6IHRydWUsIC8vIGRvIHdlIGZpbGwgaW4gdGhlIGFyZWEgYmV0d2VlbiB0aGUgbGluZSBhbmQgaXRzIGJhc2UgYXhpc1xuXHRcdH1cblx0fVxufSk7XG5cbnZhciBlbGVtZW50X2xpbmUgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0X3R5cGU6ICdsaW5lJyxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB2bSA9IG1lLl92aWV3O1xuXHRcdHZhciBjdHggPSBtZS5fY2hhcnQuY3R4O1xuXHRcdHZhciBzcGFuR2FwcyA9IHZtLnNwYW5HYXBzO1xuXHRcdHZhciBwb2ludHMgPSBtZS5fY2hpbGRyZW4uc2xpY2UoKTsgLy8gY2xvbmUgYXJyYXlcblx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblx0XHR2YXIgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzID0gZ2xvYmFsRGVmYXVsdHMuZWxlbWVudHMubGluZTtcblx0XHR2YXIgbGFzdERyYXduSW5kZXggPSAtMTtcblx0XHR2YXIgY2xvc2VQYXRoID0gbWUuX2xvb3A7XG5cdFx0dmFyIGluZGV4LCBwcmV2aW91cywgY3VycmVudFZNO1xuXG5cdFx0aWYgKCFwb2ludHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKG1lLl9sb29wKSB7XG5cdFx0XHRmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG5cdFx0XHRcdHByZXZpb3VzID0gaGVscGVycyQxLnByZXZpb3VzSXRlbShwb2ludHMsIGluZGV4KTtcblx0XHRcdFx0Ly8gSWYgdGhlIGxpbmUgaGFzIGFuIG9wZW4gcGF0aCwgc2hpZnQgdGhlIHBvaW50IGFycmF5XG5cdFx0XHRcdGlmICghcG9pbnRzW2luZGV4XS5fdmlldy5za2lwICYmIHByZXZpb3VzLl92aWV3LnNraXApIHtcblx0XHRcdFx0XHRwb2ludHMgPSBwb2ludHMuc2xpY2UoaW5kZXgpLmNvbmNhdChwb2ludHMuc2xpY2UoMCwgaW5kZXgpKTtcblx0XHRcdFx0XHRjbG9zZVBhdGggPSBzcGFuR2Fwcztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgdGhlIGxpbmUgaGFzIGEgY2xvc2UgcGF0aCwgYWRkIHRoZSBmaXJzdCBwb2ludCBhZ2FpblxuXHRcdFx0aWYgKGNsb3NlUGF0aCkge1xuXHRcdFx0XHRwb2ludHMucHVzaChwb2ludHNbMF0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN0eC5zYXZlKCk7XG5cblx0XHQvLyBTdHJva2UgTGluZSBPcHRpb25zXG5cdFx0Y3R4LmxpbmVDYXAgPSB2bS5ib3JkZXJDYXBTdHlsZSB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyQ2FwU3R5bGU7XG5cblx0XHQvLyBJRSA5IGFuZCAxMCBkbyBub3Qgc3VwcG9ydCBsaW5lIGRhc2hcblx0XHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0XHRjdHguc2V0TGluZURhc2godm0uYm9yZGVyRGFzaCB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyRGFzaCk7XG5cdFx0fVxuXG5cdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQkMSh2bS5ib3JkZXJEYXNoT2Zmc2V0LCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyRGFzaE9mZnNldCk7XG5cdFx0Y3R4LmxpbmVKb2luID0gdm0uYm9yZGVySm9pblN0eWxlIHx8IGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cy5ib3JkZXJKb2luU3R5bGU7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JDEodm0uYm9yZGVyV2lkdGgsIGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cy5ib3JkZXJXaWR0aCk7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdm0uYm9yZGVyQ29sb3IgfHwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdENvbG9yO1xuXG5cdFx0Ly8gU3Ryb2tlIExpbmVcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHQvLyBGaXJzdCBwb2ludCBtb3ZlcyB0byBpdCdzIHN0YXJ0aW5nIHBvc2l0aW9uIG5vIG1hdHRlciB3aGF0XG5cdFx0Y3VycmVudFZNID0gcG9pbnRzWzBdLl92aWV3O1xuXHRcdGlmICghY3VycmVudFZNLnNraXApIHtcblx0XHRcdGN0eC5tb3ZlVG8oY3VycmVudFZNLngsIGN1cnJlbnRWTS55KTtcblx0XHRcdGxhc3REcmF3bkluZGV4ID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGluZGV4ID0gMTsgaW5kZXggPCBwb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG5cdFx0XHRjdXJyZW50Vk0gPSBwb2ludHNbaW5kZXhdLl92aWV3O1xuXHRcdFx0cHJldmlvdXMgPSBsYXN0RHJhd25JbmRleCA9PT0gLTEgPyBoZWxwZXJzJDEucHJldmlvdXNJdGVtKHBvaW50cywgaW5kZXgpIDogcG9pbnRzW2xhc3REcmF3bkluZGV4XTtcblxuXHRcdFx0aWYgKCFjdXJyZW50Vk0uc2tpcCkge1xuXHRcdFx0XHRpZiAoKGxhc3REcmF3bkluZGV4ICE9PSAoaW5kZXggLSAxKSAmJiAhc3BhbkdhcHMpIHx8IGxhc3REcmF3bkluZGV4ID09PSAtMSkge1xuXHRcdFx0XHRcdC8vIFRoZXJlIHdhcyBhIGdhcCBhbmQgdGhpcyBpcyB0aGUgZmlyc3QgcG9pbnQgYWZ0ZXIgdGhlIGdhcFxuXHRcdFx0XHRcdGN0eC5tb3ZlVG8oY3VycmVudFZNLngsIGN1cnJlbnRWTS55KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBMaW5lIHRvIG5leHQgcG9pbnRcblx0XHRcdFx0XHRoZWxwZXJzJDEuY2FudmFzLmxpbmVUbyhjdHgsIHByZXZpb3VzLl92aWV3LCBjdXJyZW50Vk0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxhc3REcmF3bkluZGV4ID0gaW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGNsb3NlUGF0aCkge1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdH1cblxuXHRcdGN0eC5zdHJva2UoKTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9XG59KTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDIgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbnZhciBkZWZhdWx0Q29sb3IkMSA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0cG9pbnQ6IHtcblx0XHRcdHJhZGl1czogMyxcblx0XHRcdHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0Q29sb3IkMSxcblx0XHRcdGJvcmRlckNvbG9yOiBkZWZhdWx0Q29sb3IkMSxcblx0XHRcdGJvcmRlcldpZHRoOiAxLFxuXHRcdFx0Ly8gSG92ZXJcblx0XHRcdGhpdFJhZGl1czogMSxcblx0XHRcdGhvdmVyUmFkaXVzOiA0LFxuXHRcdFx0aG92ZXJCb3JkZXJXaWR0aDogMVxuXHRcdH1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIHhSYW5nZShtb3VzZVgpIHtcblx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0cmV0dXJuIHZtID8gKE1hdGguYWJzKG1vdXNlWCAtIHZtLngpIDwgdm0ucmFkaXVzICsgdm0uaGl0UmFkaXVzKSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiB5UmFuZ2UobW91c2VZKSB7XG5cdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdHJldHVybiB2bSA/IChNYXRoLmFicyhtb3VzZVkgLSB2bS55KSA8IHZtLnJhZGl1cyArIHZtLmhpdFJhZGl1cykgOiBmYWxzZTtcbn1cblxudmFyIGVsZW1lbnRfcG9pbnQgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0X3R5cGU6ICdwb2ludCcsXG5cblx0aW5SYW5nZTogZnVuY3Rpb24obW91c2VYLCBtb3VzZVkpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB2bSA/ICgoTWF0aC5wb3cobW91c2VYIC0gdm0ueCwgMikgKyBNYXRoLnBvdyhtb3VzZVkgLSB2bS55LCAyKSkgPCBNYXRoLnBvdyh2bS5oaXRSYWRpdXMgKyB2bS5yYWRpdXMsIDIpKSA6IGZhbHNlO1xuXHR9LFxuXG5cdGluTGFiZWxSYW5nZTogeFJhbmdlLFxuXHRpblhSYW5nZTogeFJhbmdlLFxuXHRpbllSYW5nZTogeVJhbmdlLFxuXG5cdGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueVxuXHRcdH07XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE1hdGguUEkgKiBNYXRoLnBvdyh0aGlzLl92aWV3LnJhZGl1cywgMik7XG5cdH0sXG5cblx0dG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueSxcblx0XHRcdHBhZGRpbmc6IHZtLnJhZGl1cyArIHZtLmJvcmRlcldpZHRoXG5cdFx0fTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbihjaGFydEFyZWEpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHBvaW50U3R5bGUgPSB2bS5wb2ludFN0eWxlO1xuXHRcdHZhciByb3RhdGlvbiA9IHZtLnJvdGF0aW9uO1xuXHRcdHZhciByYWRpdXMgPSB2bS5yYWRpdXM7XG5cdFx0dmFyIHggPSB2bS54O1xuXHRcdHZhciB5ID0gdm0ueTtcblx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblx0XHR2YXIgZGVmYXVsdENvbG9yID0gZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdENvbG9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNoYWRvd1xuXG5cdFx0aWYgKHZtLnNraXApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDbGlwcGluZyBmb3IgUG9pbnRzLlxuXHRcdGlmIChjaGFydEFyZWEgPT09IHVuZGVmaW5lZCB8fCBoZWxwZXJzJDEuY2FudmFzLl9pc1BvaW50SW5BcmVhKHZtLCBjaGFydEFyZWEpKSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2bS5ib3JkZXJDb2xvciB8fCBkZWZhdWx0Q29sb3I7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQkMih2bS5ib3JkZXJXaWR0aCwgZ2xvYmFsRGVmYXVsdHMuZWxlbWVudHMucG9pbnQuYm9yZGVyV2lkdGgpO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJhY2tncm91bmRDb2xvciB8fCBkZWZhdWx0Q29sb3I7XG5cdFx0XHRoZWxwZXJzJDEuY2FudmFzLmRyYXdQb2ludChjdHgsIHBvaW50U3R5bGUsIHJhZGl1cywgeCwgeSwgcm90YXRpb24pO1xuXHRcdH1cblx0fVxufSk7XG5cbnZhciBkZWZhdWx0Q29sb3IkMiA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0cmVjdGFuZ2xlOiB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRlZmF1bHRDb2xvciQyLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IGRlZmF1bHRDb2xvciQyLFxuXHRcdFx0Ym9yZGVyU2tpcHBlZDogJ2JvdHRvbScsXG5cdFx0XHRib3JkZXJXaWR0aDogMFxuXHRcdH1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIGlzVmVydGljYWwodm0pIHtcblx0cmV0dXJuIHZtICYmIHZtLndpZHRoICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB0aGUgYm91bmRzIG9mIHRoZSBiYXIgcmVnYXJkbGVzcyBvZiB0aGUgb3JpZW50YXRpb25cbiAqIEBwYXJhbSBiYXIge0NoYXJ0LkVsZW1lbnQuUmVjdGFuZ2xlfSB0aGUgYmFyXG4gKiBAcmV0dXJuIHtCb3VuZHN9IGJvdW5kcyBvZiB0aGUgYmFyXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRCYXJCb3VuZHModm0pIHtcblx0dmFyIHgxLCB4MiwgeTEsIHkyLCBoYWxmO1xuXG5cdGlmIChpc1ZlcnRpY2FsKHZtKSkge1xuXHRcdGhhbGYgPSB2bS53aWR0aCAvIDI7XG5cdFx0eDEgPSB2bS54IC0gaGFsZjtcblx0XHR4MiA9IHZtLnggKyBoYWxmO1xuXHRcdHkxID0gTWF0aC5taW4odm0ueSwgdm0uYmFzZSk7XG5cdFx0eTIgPSBNYXRoLm1heCh2bS55LCB2bS5iYXNlKTtcblx0fSBlbHNlIHtcblx0XHRoYWxmID0gdm0uaGVpZ2h0IC8gMjtcblx0XHR4MSA9IE1hdGgubWluKHZtLngsIHZtLmJhc2UpO1xuXHRcdHgyID0gTWF0aC5tYXgodm0ueCwgdm0uYmFzZSk7XG5cdFx0eTEgPSB2bS55IC0gaGFsZjtcblx0XHR5MiA9IHZtLnkgKyBoYWxmO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZWZ0OiB4MSxcblx0XHR0b3A6IHkxLFxuXHRcdHJpZ2h0OiB4Mixcblx0XHRib3R0b206IHkyXG5cdH07XG59XG5cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG5cdHJldHVybiBvcmlnID09PSB2MSA/IHYyIDogb3JpZyA9PT0gdjIgPyB2MSA6IG9yaWc7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyU2tpcHBlZCh2bSkge1xuXHR2YXIgZWRnZSA9IHZtLmJvcmRlclNraXBwZWQ7XG5cdHZhciByZXMgPSB7fTtcblxuXHRpZiAoIWVkZ2UpIHtcblx0XHRyZXR1cm4gcmVzO1xuXHR9XG5cblx0aWYgKHZtLmhvcml6b250YWwpIHtcblx0XHRpZiAodm0uYmFzZSA+IHZtLngpIHtcblx0XHRcdGVkZ2UgPSBzd2FwKGVkZ2UsICdsZWZ0JywgJ3JpZ2h0Jyk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHZtLmJhc2UgPCB2bS55KSB7XG5cdFx0ZWRnZSA9IHN3YXAoZWRnZSwgJ2JvdHRvbScsICd0b3AnKTtcblx0fVxuXG5cdHJlc1tlZGdlXSA9IHRydWU7XG5cdHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyV2lkdGgodm0sIG1heFcsIG1heEgpIHtcblx0dmFyIHZhbHVlID0gdm0uYm9yZGVyV2lkdGg7XG5cdHZhciBza2lwID0gcGFyc2VCb3JkZXJTa2lwcGVkKHZtKTtcblx0dmFyIHQsIHIsIGIsIGw7XG5cblx0aWYgKGhlbHBlcnMkMS5pc09iamVjdCh2YWx1ZSkpIHtcblx0XHR0ID0gK3ZhbHVlLnRvcCB8fCAwO1xuXHRcdHIgPSArdmFsdWUucmlnaHQgfHwgMDtcblx0XHRiID0gK3ZhbHVlLmJvdHRvbSB8fCAwO1xuXHRcdGwgPSArdmFsdWUubGVmdCB8fCAwO1xuXHR9IGVsc2Uge1xuXHRcdHQgPSByID0gYiA9IGwgPSArdmFsdWUgfHwgMDtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0dDogc2tpcC50b3AgfHwgKHQgPCAwKSA/IDAgOiB0ID4gbWF4SCA/IG1heEggOiB0LFxuXHRcdHI6IHNraXAucmlnaHQgfHwgKHIgPCAwKSA/IDAgOiByID4gbWF4VyA/IG1heFcgOiByLFxuXHRcdGI6IHNraXAuYm90dG9tIHx8IChiIDwgMCkgPyAwIDogYiA+IG1heEggPyBtYXhIIDogYixcblx0XHRsOiBza2lwLmxlZnQgfHwgKGwgPCAwKSA/IDAgOiBsID4gbWF4VyA/IG1heFcgOiBsXG5cdH07XG59XG5cbmZ1bmN0aW9uIGJvdW5kaW5nUmVjdHModm0pIHtcblx0dmFyIGJvdW5kcyA9IGdldEJhckJvdW5kcyh2bSk7XG5cdHZhciB3aWR0aCA9IGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0O1xuXHR2YXIgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG5cdHZhciBib3JkZXIgPSBwYXJzZUJvcmRlcldpZHRoKHZtLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuXG5cdHJldHVybiB7XG5cdFx0b3V0ZXI6IHtcblx0XHRcdHg6IGJvdW5kcy5sZWZ0LFxuXHRcdFx0eTogYm91bmRzLnRvcCxcblx0XHRcdHc6IHdpZHRoLFxuXHRcdFx0aDogaGVpZ2h0XG5cdFx0fSxcblx0XHRpbm5lcjoge1xuXHRcdFx0eDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcblx0XHRcdHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcblx0XHRcdHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcblx0XHRcdGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmJcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2Uodm0sIHgsIHkpIHtcblx0dmFyIHNraXBYID0geCA9PT0gbnVsbDtcblx0dmFyIHNraXBZID0geSA9PT0gbnVsbDtcblx0dmFyIGJvdW5kcyA9ICF2bSB8fCAoc2tpcFggJiYgc2tpcFkpID8gZmFsc2UgOiBnZXRCYXJCb3VuZHModm0pO1xuXG5cdHJldHVybiBib3VuZHNcblx0XHQmJiAoc2tpcFggfHwgeCA+PSBib3VuZHMubGVmdCAmJiB4IDw9IGJvdW5kcy5yaWdodClcblx0XHQmJiAoc2tpcFkgfHwgeSA+PSBib3VuZHMudG9wICYmIHkgPD0gYm91bmRzLmJvdHRvbSk7XG59XG5cbnZhciBlbGVtZW50X3JlY3RhbmdsZSA9IGNvcmVfZWxlbWVudC5leHRlbmQoe1xuXHRfdHlwZTogJ3JlY3RhbmdsZScsXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciByZWN0cyA9IGJvdW5kaW5nUmVjdHModm0pO1xuXHRcdHZhciBvdXRlciA9IHJlY3RzLm91dGVyO1xuXHRcdHZhciBpbm5lciA9IHJlY3RzLmlubmVyO1xuXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJhY2tncm91bmRDb2xvcjtcblx0XHRjdHguZmlsbFJlY3Qob3V0ZXIueCwgb3V0ZXIueSwgb3V0ZXIudywgb3V0ZXIuaCk7XG5cblx0XHRpZiAob3V0ZXIudyA9PT0gaW5uZXIudyAmJiBvdXRlci5oID09PSBpbm5lci5oKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4LnJlY3Qob3V0ZXIueCwgb3V0ZXIueSwgb3V0ZXIudywgb3V0ZXIuaCk7XG5cdFx0Y3R4LmNsaXAoKTtcblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYm9yZGVyQ29sb3I7XG5cdFx0Y3R4LnJlY3QoaW5uZXIueCwgaW5uZXIueSwgaW5uZXIudywgaW5uZXIuaCk7XG5cdFx0Y3R4LmZpbGwoJ2V2ZW5vZGQnKTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdGhlaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4gdm0uYmFzZSAtIHZtLnk7XG5cdH0sXG5cblx0aW5SYW5nZTogZnVuY3Rpb24obW91c2VYLCBtb3VzZVkpIHtcblx0XHRyZXR1cm4gaW5SYW5nZSh0aGlzLl92aWV3LCBtb3VzZVgsIG1vdXNlWSk7XG5cdH0sXG5cblx0aW5MYWJlbFJhbmdlOiBmdW5jdGlvbihtb3VzZVgsIG1vdXNlWSkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIGlzVmVydGljYWwodm0pXG5cdFx0XHQ/IGluUmFuZ2Uodm0sIG1vdXNlWCwgbnVsbClcblx0XHRcdDogaW5SYW5nZSh2bSwgbnVsbCwgbW91c2VZKTtcblx0fSxcblxuXHRpblhSYW5nZTogZnVuY3Rpb24obW91c2VYKSB7XG5cdFx0cmV0dXJuIGluUmFuZ2UodGhpcy5fdmlldywgbW91c2VYLCBudWxsKTtcblx0fSxcblxuXHRpbllSYW5nZTogZnVuY3Rpb24obW91c2VZKSB7XG5cdFx0cmV0dXJuIGluUmFuZ2UodGhpcy5fdmlldywgbnVsbCwgbW91c2VZKTtcblx0fSxcblxuXHRnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgeCwgeTtcblx0XHRpZiAoaXNWZXJ0aWNhbCh2bSkpIHtcblx0XHRcdHggPSB2bS54O1xuXHRcdFx0eSA9ICh2bS55ICsgdm0uYmFzZSkgLyAyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR4ID0gKHZtLnggKyB2bS5iYXNlKSAvIDI7XG5cdFx0XHR5ID0gdm0ueTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge3g6IHgsIHk6IHl9O1xuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRyZXR1cm4gaXNWZXJ0aWNhbCh2bSlcblx0XHRcdD8gdm0ud2lkdGggKiBNYXRoLmFicyh2bS55IC0gdm0uYmFzZSlcblx0XHRcdDogdm0uaGVpZ2h0ICogTWF0aC5hYnModm0ueCAtIHZtLmJhc2UpO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCxcblx0XHRcdHk6IHZtLnlcblx0XHR9O1xuXHR9XG59KTtcblxudmFyIGVsZW1lbnRzID0ge307XG52YXIgQXJjID0gZWxlbWVudF9hcmM7XG52YXIgTGluZSA9IGVsZW1lbnRfbGluZTtcbnZhciBQb2ludCA9IGVsZW1lbnRfcG9pbnQ7XG52YXIgUmVjdGFuZ2xlID0gZWxlbWVudF9yZWN0YW5nbGU7XG5lbGVtZW50cy5BcmMgPSBBcmM7XG5lbGVtZW50cy5MaW5lID0gTGluZTtcbmVsZW1lbnRzLlBvaW50ID0gUG9pbnQ7XG5lbGVtZW50cy5SZWN0YW5nbGUgPSBSZWN0YW5nbGU7XG5cbnZhciBkZXByZWNhdGVkID0gaGVscGVycyQxLl9kZXByZWNhdGVkO1xudmFyIHZhbHVlT3JEZWZhdWx0JDMgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnYmFyJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdsYWJlbCdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdjYXRlZ29yeScsXG5cdFx0XHRvZmZzZXQ6IHRydWUsXG5cdFx0XHRncmlkTGluZXM6IHtcblx0XHRcdFx0b2Zmc2V0R3JpZExpbmVzOiB0cnVlXG5cdFx0XHR9XG5cdFx0fV0sXG5cblx0XHR5QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInXG5cdFx0fV1cblx0fVxufSk7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRkYXRhc2V0czoge1xuXHRcdGJhcjoge1xuXHRcdFx0Y2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG5cdFx0XHRiYXJQZXJjZW50YWdlOiAwLjlcblx0XHR9XG5cdH1cbn0pO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBcIm9wdGltYWxcIiBzYW1wbGUgc2l6ZSB0byBtYWludGFpbiBiYXJzIGVxdWFsbHkgc2l6ZWQgd2hpbGUgcHJldmVudGluZyBvdmVybGFwLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUoc2NhbGUsIHBpeGVscykge1xuXHR2YXIgbWluID0gc2NhbGUuX2xlbmd0aDtcblx0dmFyIHByZXYsIGN1cnIsIGksIGlsZW47XG5cblx0Zm9yIChpID0gMSwgaWxlbiA9IHBpeGVscy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRtaW4gPSBNYXRoLm1pbihtaW4sIE1hdGguYWJzKHBpeGVsc1tpXSAtIHBpeGVsc1tpIC0gMV0pKTtcblx0fVxuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBzY2FsZS5nZXRUaWNrcygpLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGN1cnIgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2soaSk7XG5cdFx0bWluID0gaSA+IDAgPyBNYXRoLm1pbihtaW4sIE1hdGguYWJzKGN1cnIgLSBwcmV2KSkgOiBtaW47XG5cdFx0cHJldiA9IGN1cnI7XG5cdH1cblxuXHRyZXR1cm4gbWluO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGFuIFwiaWRlYWxcIiBjYXRlZ29yeSBiYXNlZCBvbiB0aGUgYWJzb2x1dGUgYmFyIHRoaWNrbmVzcyBvciwgaWYgdW5kZWZpbmVkIG9yIG51bGwsXG4gKiB1c2VzIHRoZSBzbWFsbGVzdCBpbnRlcnZhbCAoc2VlIGNvbXB1dGVNaW5TYW1wbGVTaXplKSB0aGF0IHByZXZlbnRzIGJhciBvdmVybGFwcGluZy4gVGhpc1xuICogbW9kZSBjdXJyZW50bHkgYWx3YXlzIGdlbmVyYXRlcyBiYXJzIGVxdWFsbHkgc2l6ZWQgKHVudGlsIHdlIGludHJvZHVjZSBzY3JpcHRhYmxlIG9wdGlvbnM/KS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMpIHtcblx0dmFyIHRoaWNrbmVzcyA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzO1xuXHR2YXIgY291bnQgPSBydWxlci5zdGFja0NvdW50O1xuXHR2YXIgY3VyciA9IHJ1bGVyLnBpeGVsc1tpbmRleF07XG5cdHZhciBtaW4gPSBoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZih0aGlja25lc3MpXG5cdFx0PyBjb21wdXRlTWluU2FtcGxlU2l6ZShydWxlci5zY2FsZSwgcnVsZXIucGl4ZWxzKVxuXHRcdDogLTE7XG5cdHZhciBzaXplLCByYXRpbztcblxuXHRpZiAoaGVscGVycyQxLmlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuXHRcdHNpemUgPSBtaW4gKiBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcblx0XHRyYXRpbyA9IG9wdGlvbnMuYmFyUGVyY2VudGFnZTtcblx0fSBlbHNlIHtcblx0XHQvLyBXaGVuIGJhciB0aGlja25lc3MgaXMgZW5mb3JjZWQsIGNhdGVnb3J5IGFuZCBiYXIgcGVyY2VudGFnZXMgYXJlIGlnbm9yZWQuXG5cdFx0Ly8gTm90ZShTQik6IHdlIGNvdWxkIGFkZCBzdXBwb3J0IGZvciByZWxhdGl2ZSBiYXIgdGhpY2tuZXNzIChlLmcuIGJhclRoaWNrbmVzczogJzUwJScpXG5cdFx0Ly8gYW5kIGRlcHJlY2F0ZSBiYXJQZXJjZW50YWdlIHNpbmNlIHRoaXMgdmFsdWUgaXMgaWdub3JlZCB3aGVuIHRoaWNrbmVzcyBpcyBhYnNvbHV0ZS5cblx0XHRzaXplID0gdGhpY2tuZXNzICogY291bnQ7XG5cdFx0cmF0aW8gPSAxO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRjaHVuazogc2l6ZSAvIGNvdW50LFxuXHRcdHJhdGlvOiByYXRpbyxcblx0XHRzdGFydDogY3VyciAtIChzaXplIC8gMilcblx0fTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhbiBcIm9wdGltYWxcIiBjYXRlZ29yeSB0aGF0IGdsb2JhbGx5IGFycmFuZ2VzIGJhcnMgc2lkZSBieSBzaWRlIChubyBnYXAgd2hlblxuICogcGVyY2VudGFnZSBvcHRpb25zIGFyZSAxKSwgYmFzZWQgb24gdGhlIHByZXZpb3VzIGFuZCBmb2xsb3dpbmcgY2F0ZWdvcmllcy4gVGhpcyBtb2RlXG4gKiBnZW5lcmF0ZXMgYmFycyB3aXRoIGRpZmZlcmVudCB3aWR0aHMgd2hlbiBkYXRhIGFyZSBub3QgZXZlbmx5IHNwYWNlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zKSB7XG5cdHZhciBwaXhlbHMgPSBydWxlci5waXhlbHM7XG5cdHZhciBjdXJyID0gcGl4ZWxzW2luZGV4XTtcblx0dmFyIHByZXYgPSBpbmRleCA+IDAgPyBwaXhlbHNbaW5kZXggLSAxXSA6IG51bGw7XG5cdHZhciBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcblx0dmFyIHBlcmNlbnQgPSBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcblx0dmFyIHN0YXJ0LCBzaXplO1xuXG5cdGlmIChwcmV2ID09PSBudWxsKSB7XG5cdFx0Ly8gZmlyc3QgZGF0YTogaXRzIHNpemUgaXMgZG91YmxlIGJhc2VkIG9uIHRoZSBuZXh0IHBvaW50IG9yLFxuXHRcdC8vIGlmIGl0J3MgYWxzbyB0aGUgbGFzdCBkYXRhLCB3ZSB1c2UgdGhlIHNjYWxlIHNpemUuXG5cdFx0cHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuXHR9XG5cblx0aWYgKG5leHQgPT09IG51bGwpIHtcblx0XHQvLyBsYXN0IGRhdGE6IGl0cyBzaXplIGlzIGFsc28gZG91YmxlIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBwb2ludC5cblx0XHRuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuXHR9XG5cblx0c3RhcnQgPSBjdXJyIC0gKGN1cnIgLSBNYXRoLm1pbihwcmV2LCBuZXh0KSkgLyAyICogcGVyY2VudDtcblx0c2l6ZSA9IE1hdGguYWJzKG5leHQgLSBwcmV2KSAvIDIgKiBwZXJjZW50O1xuXG5cdHJldHVybiB7XG5cdFx0Y2h1bms6IHNpemUgLyBydWxlci5zdGFja0NvdW50LFxuXHRcdHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG5cdFx0c3RhcnQ6IHN0YXJ0XG5cdH07XG59XG5cbnZhciBjb250cm9sbGVyX2JhciA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLlJlY3RhbmdsZSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJTa2lwcGVkJyxcblx0XHQnYm9yZGVyV2lkdGgnLFxuXHRcdCdiYXJQZXJjZW50YWdlJyxcblx0XHQnYmFyVGhpY2tuZXNzJyxcblx0XHQnY2F0ZWdvcnlQZXJjZW50YWdlJyxcblx0XHQnbWF4QmFyVGhpY2tuZXNzJyxcblx0XHQnbWluQmFyTGVuZ3RoJ1xuXHRdLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEsIHNjYWxlT3B0cztcblxuXHRcdGNvcmVfZGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHRtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdG1ldGEuc3RhY2sgPSBtZS5nZXREYXRhc2V0KCkuc3RhY2s7XG5cdFx0bWV0YS5iYXIgPSB0cnVlO1xuXG5cdFx0c2NhbGVPcHRzID0gbWUuX2dldEluZGV4U2NhbGUoKS5vcHRpb25zO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5iYXJQZXJjZW50YWdlLCAnc2NhbGVzLlt4L3ldQXhlcy5iYXJQZXJjZW50YWdlJywgJ2RhdGFzZXQuYmFyUGVyY2VudGFnZScpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5iYXJUaGlja25lc3MsICdzY2FsZXMuW3gveV1BeGVzLmJhclRoaWNrbmVzcycsICdkYXRhc2V0LmJhclRoaWNrbmVzcycpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5jYXRlZ29yeVBlcmNlbnRhZ2UsICdzY2FsZXMuW3gveV1BeGVzLmNhdGVnb3J5UGVyY2VudGFnZScsICdkYXRhc2V0LmNhdGVnb3J5UGVyY2VudGFnZScpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIG1lLl9nZXRWYWx1ZVNjYWxlKCkub3B0aW9ucy5taW5CYXJMZW5ndGgsICdzY2FsZXMuW3gveV1BeGVzLm1pbkJhckxlbmd0aCcsICdkYXRhc2V0Lm1pbkJhckxlbmd0aCcpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5tYXhCYXJUaGlja25lc3MsICdzY2FsZXMuW3gveV1BeGVzLm1heEJhclRoaWNrbmVzcycsICdkYXRhc2V0Lm1heEJhclRoaWNrbmVzcycpO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciByZWN0cyA9IG1lLmdldE1ldGEoKS5kYXRhO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0bWUuX3J1bGVyID0gbWUuZ2V0UnVsZXIoKTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSByZWN0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQocmVjdHNbaV0sIGksIHJlc2V0KTtcblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocmVjdGFuZ2xlLCBpbmRleCwgcmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBvcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMocmVjdGFuZ2xlLCBpbmRleCk7XG5cblx0XHRyZWN0YW5nbGUuX3hTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS54QXhpc0lEKTtcblx0XHRyZWN0YW5nbGUuX3lTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS55QXhpc0lEKTtcblx0XHRyZWN0YW5nbGUuX2RhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdHJlY3RhbmdsZS5faW5kZXggPSBpbmRleDtcblx0XHRyZWN0YW5nbGUuX21vZGVsID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyU2tpcHBlZDogb3B0aW9ucy5ib3JkZXJTa2lwcGVkLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHRkYXRhc2V0TGFiZWw6IGRhdGFzZXQubGFiZWwsXG5cdFx0XHRsYWJlbDogbWUuY2hhcnQuZGF0YS5sYWJlbHNbaW5kZXhdXG5cdFx0fTtcblxuXHRcdGlmIChoZWxwZXJzJDEuaXNBcnJheShkYXRhc2V0LmRhdGFbaW5kZXhdKSkge1xuXHRcdFx0cmVjdGFuZ2xlLl9tb2RlbC5ib3JkZXJTa2lwcGVkID0gbnVsbDtcblx0XHR9XG5cblx0XHRtZS5fdXBkYXRlRWxlbWVudEdlb21ldHJ5KHJlY3RhbmdsZSwgaW5kZXgsIHJlc2V0LCBvcHRpb25zKTtcblxuXHRcdHJlY3RhbmdsZS5waXZvdCgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3VwZGF0ZUVsZW1lbnRHZW9tZXRyeTogZnVuY3Rpb24ocmVjdGFuZ2xlLCBpbmRleCwgcmVzZXQsIG9wdGlvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtb2RlbCA9IHJlY3RhbmdsZS5fbW9kZWw7XG5cdFx0dmFyIHZzY2FsZSA9IG1lLl9nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0dmFyIGJhc2UgPSB2c2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG5cdFx0dmFyIGhvcml6b250YWwgPSB2c2NhbGUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIHJ1bGVyID0gbWUuX3J1bGVyIHx8IG1lLmdldFJ1bGVyKCk7XG5cdFx0dmFyIHZwaXhlbHMgPSBtZS5jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhtZS5pbmRleCwgaW5kZXgsIG9wdGlvbnMpO1xuXHRcdHZhciBpcGl4ZWxzID0gbWUuY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMobWUuaW5kZXgsIGluZGV4LCBydWxlciwgb3B0aW9ucyk7XG5cblx0XHRtb2RlbC5ob3Jpem9udGFsID0gaG9yaXpvbnRhbDtcblx0XHRtb2RlbC5iYXNlID0gcmVzZXQgPyBiYXNlIDogdnBpeGVscy5iYXNlO1xuXHRcdG1vZGVsLnggPSBob3Jpem9udGFsID8gcmVzZXQgPyBiYXNlIDogdnBpeGVscy5oZWFkIDogaXBpeGVscy5jZW50ZXI7XG5cdFx0bW9kZWwueSA9IGhvcml6b250YWwgPyBpcGl4ZWxzLmNlbnRlciA6IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuaGVhZDtcblx0XHRtb2RlbC5oZWlnaHQgPSBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogdW5kZWZpbmVkO1xuXHRcdG1vZGVsLndpZHRoID0gaG9yaXpvbnRhbCA/IHVuZGVmaW5lZCA6IGlwaXhlbHMuc2l6ZTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc3RhY2tzIGJhc2VkIG9uIGdyb3VwcyBhbmQgYmFyIHZpc2liaWxpdHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbGFzdF0gLSBUaGUgZGF0YXNldCBpbmRleFxuXHQgKiBAcmV0dXJucyB7c3RyaW5nW119IFRoZSBsaXN0IG9mIHN0YWNrIElEc1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFN0YWNrczogZnVuY3Rpb24obGFzdCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHNjYWxlID0gbWUuX2dldEluZGV4U2NhbGUoKTtcblx0XHR2YXIgbWV0YXNldHMgPSBzY2FsZS5fZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMobWUuX3R5cGUpO1xuXHRcdHZhciBzdGFja2VkID0gc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuXHRcdHZhciBpbGVuID0gbWV0YXNldHMubGVuZ3RoO1xuXHRcdHZhciBzdGFja3MgPSBbXTtcblx0XHR2YXIgaSwgbWV0YTtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXTtcblx0XHRcdC8vIHN0YWNrZWQgICB8IG1ldGEuc3RhY2tcblx0XHRcdC8vICAgICAgICAgICB8IGZvdW5kIHwgbm90IGZvdW5kIHwgdW5kZWZpbmVkXG5cdFx0XHQvLyBmYWxzZSAgICAgfCAgIHggICB8ICAgICB4ICAgICB8ICAgICB4XG5cdFx0XHQvLyB0cnVlICAgICAgfCAgICAgICB8ICAgICB4ICAgICB8XG5cdFx0XHQvLyB1bmRlZmluZWQgfCAgICAgICB8ICAgICB4ICAgICB8ICAgICB4XG5cdFx0XHRpZiAoc3RhY2tlZCA9PT0gZmFsc2UgfHwgc3RhY2tzLmluZGV4T2YobWV0YS5zdGFjaykgPT09IC0xIHx8XG5cdFx0XHRcdChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRzdGFja3MucHVzaChtZXRhLnN0YWNrKTtcblx0XHRcdH1cblx0XHRcdGlmIChtZXRhLmluZGV4ID09PSBsYXN0KSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzdGFja3M7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGVmZmVjdGl2ZSBudW1iZXIgb2Ygc3RhY2tzIGJhc2VkIG9uIGdyb3VwcyBhbmQgYmFyIHZpc2liaWxpdHkuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRnZXRTdGFja0NvdW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKCkubGVuZ3RoO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzdGFjayBpbmRleCBmb3IgdGhlIGdpdmVuIGRhdGFzZXQgYmFzZWQgb24gZ3JvdXBzIGFuZCBiYXIgdmlzaWJpbGl0eS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkYXRhc2V0SW5kZXhdIC0gVGhlIGRhdGFzZXQgaW5kZXhcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSAtIFRoZSBzdGFjayBuYW1lIHRvIGZpbmRcblx0ICogQHJldHVybnMge251bWJlcn0gVGhlIHN0YWNrIGluZGV4XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRnZXRTdGFja0luZGV4OiBmdW5jdGlvbihkYXRhc2V0SW5kZXgsIG5hbWUpIHtcblx0XHR2YXIgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCk7XG5cdFx0dmFyIGluZGV4ID0gKG5hbWUgIT09IHVuZGVmaW5lZClcblx0XHRcdD8gc3RhY2tzLmluZGV4T2YobmFtZSlcblx0XHRcdDogLTE7IC8vIGluZGV4T2YgcmV0dXJucyAtMSBpZiBlbGVtZW50IGlzIG5vdCBwcmVzZW50XG5cblx0XHRyZXR1cm4gKGluZGV4ID09PSAtMSlcblx0XHRcdD8gc3RhY2tzLmxlbmd0aCAtIDFcblx0XHRcdDogaW5kZXg7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRnZXRSdWxlcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgc2NhbGUgPSBtZS5fZ2V0SW5kZXhTY2FsZSgpO1xuXHRcdHZhciBwaXhlbHMgPSBbXTtcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBtZS5nZXRNZXRhKCkuZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHBpeGVscy5wdXNoKHNjYWxlLmdldFBpeGVsRm9yVmFsdWUobnVsbCwgaSwgbWUuaW5kZXgpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cGl4ZWxzOiBwaXhlbHMsXG5cdFx0XHRzdGFydDogc2NhbGUuX3N0YXJ0UGl4ZWwsXG5cdFx0XHRlbmQ6IHNjYWxlLl9lbmRQaXhlbCxcblx0XHRcdHN0YWNrQ291bnQ6IG1lLmdldFN0YWNrQ291bnQoKSxcblx0XHRcdHNjYWxlOiBzY2FsZVxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIE5vdGU6IHBpeGVsIHZhbHVlcyBhcmUgbm90IGNsYW1wZWQgdG8gdGhlIHNjYWxlIGFyZWEuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRjYWxjdWxhdGVCYXJWYWx1ZVBpeGVsczogZnVuY3Rpb24oZGF0YXNldEluZGV4LCBpbmRleCwgb3B0aW9ucykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIHNjYWxlID0gbWUuX2dldFZhbHVlU2NhbGUoKTtcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbWV0YXNldHMgPSBzY2FsZS5fZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMobWUuX3R5cGUpO1xuXHRcdHZhciB2YWx1ZSA9IHNjYWxlLl9wYXJzZVZhbHVlKGRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdHZhciBtaW5CYXJMZW5ndGggPSBvcHRpb25zLm1pbkJhckxlbmd0aDtcblx0XHR2YXIgc3RhY2tlZCA9IHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcblx0XHR2YXIgc3RhY2sgPSBtZS5nZXRNZXRhKCkuc3RhY2s7XG5cdFx0dmFyIHN0YXJ0ID0gdmFsdWUuc3RhcnQgPT09IHVuZGVmaW5lZCA/IDAgOiB2YWx1ZS5tYXggPj0gMCAmJiB2YWx1ZS5taW4gPj0gMCA/IHZhbHVlLm1pbiA6IHZhbHVlLm1heDtcblx0XHR2YXIgbGVuZ3RoID0gdmFsdWUuc3RhcnQgPT09IHVuZGVmaW5lZCA/IHZhbHVlLmVuZCA6IHZhbHVlLm1heCA+PSAwICYmIHZhbHVlLm1pbiA+PSAwID8gdmFsdWUubWF4IC0gdmFsdWUubWluIDogdmFsdWUubWluIC0gdmFsdWUubWF4O1xuXHRcdHZhciBpbGVuID0gbWV0YXNldHMubGVuZ3RoO1xuXHRcdHZhciBpLCBpbWV0YSwgaXZhbHVlLCBiYXNlLCBoZWFkLCBzaXplLCBzdGFja0xlbmd0aDtcblxuXHRcdGlmIChzdGFja2VkIHx8IChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgc3RhY2sgIT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0aW1ldGEgPSBtZXRhc2V0c1tpXTtcblxuXHRcdFx0XHRpZiAoaW1ldGEuaW5kZXggPT09IGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGltZXRhLnN0YWNrID09PSBzdGFjaykge1xuXHRcdFx0XHRcdHN0YWNrTGVuZ3RoID0gc2NhbGUuX3BhcnNlVmFsdWUoZGF0YXNldHNbaW1ldGEuaW5kZXhdLmRhdGFbaW5kZXhdKTtcblx0XHRcdFx0XHRpdmFsdWUgPSBzdGFja0xlbmd0aC5zdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhY2tMZW5ndGguZW5kIDogc3RhY2tMZW5ndGgubWluID49IDAgJiYgc3RhY2tMZW5ndGgubWF4ID49IDAgPyBzdGFja0xlbmd0aC5tYXggOiBzdGFja0xlbmd0aC5taW47XG5cblx0XHRcdFx0XHRpZiAoKHZhbHVlLm1pbiA8IDAgJiYgaXZhbHVlIDwgMCkgfHwgKHZhbHVlLm1heCA+PSAwICYmIGl2YWx1ZSA+IDApKSB7XG5cdFx0XHRcdFx0XHRzdGFydCArPSBpdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YmFzZSA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQpO1xuXHRcdGhlYWQgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0ICsgbGVuZ3RoKTtcblx0XHRzaXplID0gaGVhZCAtIGJhc2U7XG5cblx0XHRpZiAobWluQmFyTGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcblx0XHRcdHNpemUgPSBtaW5CYXJMZW5ndGg7XG5cdFx0XHRpZiAobGVuZ3RoID49IDAgJiYgIWlzSG9yaXpvbnRhbCB8fCBsZW5ndGggPCAwICYmIGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRoZWFkID0gYmFzZSAtIG1pbkJhckxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhlYWQgPSBiYXNlICsgbWluQmFyTGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0YmFzZTogYmFzZSxcblx0XHRcdGhlYWQ6IGhlYWQsXG5cdFx0XHRjZW50ZXI6IGhlYWQgKyBzaXplIC8gMlxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRjYWxjdWxhdGVCYXJJbmRleFBpeGVsczogZnVuY3Rpb24oZGF0YXNldEluZGV4LCBpbmRleCwgcnVsZXIsIG9wdGlvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCdcblx0XHRcdD8gY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMpXG5cdFx0XHQ6IGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMpO1xuXG5cdFx0dmFyIHN0YWNrSW5kZXggPSBtZS5nZXRTdGFja0luZGV4KGRhdGFzZXRJbmRleCwgbWUuZ2V0TWV0YSgpLnN0YWNrKTtcblx0XHR2YXIgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyAocmFuZ2UuY2h1bmsgKiBzdGFja0luZGV4KSArIChyYW5nZS5jaHVuayAvIDIpO1xuXHRcdHZhciBzaXplID0gTWF0aC5taW4oXG5cdFx0XHR2YWx1ZU9yRGVmYXVsdCQzKG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSksXG5cdFx0XHRyYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRiYXNlOiBjZW50ZXIgLSBzaXplIC8gMixcblx0XHRcdGhlYWQ6IGNlbnRlciArIHNpemUgLyAyLFxuXHRcdFx0Y2VudGVyOiBjZW50ZXIsXG5cdFx0XHRzaXplOiBzaXplXG5cdFx0fTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBzY2FsZSA9IG1lLl9nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0dmFyIHJlY3RzID0gbWUuZ2V0TWV0YSgpLmRhdGE7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIGlsZW4gPSByZWN0cy5sZW5ndGg7XG5cdFx0dmFyIGkgPSAwO1xuXG5cdFx0aGVscGVycyQxLmNhbnZhcy5jbGlwQXJlYShjaGFydC5jdHgsIGNoYXJ0LmNoYXJ0QXJlYSk7XG5cblx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0dmFyIHZhbCA9IHNjYWxlLl9wYXJzZVZhbHVlKGRhdGFzZXQuZGF0YVtpXSk7XG5cdFx0XHRpZiAoIWlzTmFOKHZhbC5taW4pICYmICFpc05hTih2YWwubWF4KSkge1xuXHRcdFx0XHRyZWN0c1tpXS5kcmF3KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGVscGVycyQxLmNhbnZhcy51bmNsaXBBcmVhKGNoYXJ0LmN0eCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdmFsdWVzID0gaGVscGVycyQxLmV4dGVuZCh7fSwgY29yZV9kYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMuYXBwbHkobWUsIGFyZ3VtZW50cykpO1xuXHRcdHZhciBpbmRleE9wdHMgPSBtZS5fZ2V0SW5kZXhTY2FsZSgpLm9wdGlvbnM7XG5cdFx0dmFyIHZhbHVlT3B0cyA9IG1lLl9nZXRWYWx1ZVNjYWxlKCkub3B0aW9ucztcblxuXHRcdHZhbHVlcy5iYXJQZXJjZW50YWdlID0gdmFsdWVPckRlZmF1bHQkMyhpbmRleE9wdHMuYmFyUGVyY2VudGFnZSwgdmFsdWVzLmJhclBlcmNlbnRhZ2UpO1xuXHRcdHZhbHVlcy5iYXJUaGlja25lc3MgPSB2YWx1ZU9yRGVmYXVsdCQzKGluZGV4T3B0cy5iYXJUaGlja25lc3MsIHZhbHVlcy5iYXJUaGlja25lc3MpO1xuXHRcdHZhbHVlcy5jYXRlZ29yeVBlcmNlbnRhZ2UgPSB2YWx1ZU9yRGVmYXVsdCQzKGluZGV4T3B0cy5jYXRlZ29yeVBlcmNlbnRhZ2UsIHZhbHVlcy5jYXRlZ29yeVBlcmNlbnRhZ2UpO1xuXHRcdHZhbHVlcy5tYXhCYXJUaGlja25lc3MgPSB2YWx1ZU9yRGVmYXVsdCQzKGluZGV4T3B0cy5tYXhCYXJUaGlja25lc3MsIHZhbHVlcy5tYXhCYXJUaGlja25lc3MpO1xuXHRcdHZhbHVlcy5taW5CYXJMZW5ndGggPSB2YWx1ZU9yRGVmYXVsdCQzKHZhbHVlT3B0cy5taW5CYXJMZW5ndGgsIHZhbHVlcy5taW5CYXJMZW5ndGgpO1xuXG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fVxuXG59KTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDQgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgcmVzb2x2ZSQxID0gaGVscGVycyQxLm9wdGlvbnMucmVzb2x2ZTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdidWJibGUnLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInLCAvLyBidWJibGUgc2hvdWxkIHByb2JhYmx5IHVzZSBhIGxpbmVhciBzY2FsZSBieSBkZWZhdWx0XG5cdFx0XHRwb3NpdGlvbjogJ2JvdHRvbScsXG5cdFx0XHRpZDogJ3gtYXhpcy0wJyAvLyBuZWVkIGFuIElEIHNvIGRhdGFzZXRzIGNhbiByZWZlcmVuY2UgdGhlIHNjYWxlXG5cdFx0fV0sXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdHBvc2l0aW9uOiAnbGVmdCcsXG5cdFx0XHRpZDogJ3ktYXhpcy0wJ1xuXHRcdH1dXG5cdH0sXG5cblx0dG9vbHRpcHM6IHtcblx0XHRjYWxsYmFja3M6IHtcblx0XHRcdHRpdGxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gVGl0bGUgZG9lc24ndCBtYWtlIHNlbnNlIGZvciBzY2F0dGVyIHNpbmNlIHdlIGZvcm1hdCB0aGUgZGF0YSBhcyBhIHBvaW50XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSwgZGF0YSkge1xuXHRcdFx0XHR2YXIgZGF0YXNldExhYmVsID0gZGF0YS5kYXRhc2V0c1tpdGVtLmRhdGFzZXRJbmRleF0ubGFiZWwgfHwgJyc7XG5cdFx0XHRcdHZhciBkYXRhUG9pbnQgPSBkYXRhLmRhdGFzZXRzW2l0ZW0uZGF0YXNldEluZGV4XS5kYXRhW2l0ZW0uaW5kZXhdO1xuXHRcdFx0XHRyZXR1cm4gZGF0YXNldExhYmVsICsgJzogKCcgKyBpdGVtLnhMYWJlbCArICcsICcgKyBpdGVtLnlMYWJlbCArICcsICcgKyBkYXRhUG9pbnQuciArICcpJztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgY29udHJvbGxlcl9idWJibGUgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cdC8qKlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLlBvaW50LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJDb2xvcicsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnaG92ZXJCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdob3ZlckJvcmRlckNvbG9yJyxcblx0XHQnaG92ZXJCb3JkZXJXaWR0aCcsXG5cdFx0J2hvdmVyUmFkaXVzJyxcblx0XHQnaGl0UmFkaXVzJyxcblx0XHQncG9pbnRTdHlsZScsXG5cdFx0J3JvdGF0aW9uJ1xuXHRdLFxuXG5cdC8qKlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhO1xuXG5cdFx0Ly8gVXBkYXRlIFBvaW50c1xuXHRcdGhlbHBlcnMkMS5lYWNoKHBvaW50cywgZnVuY3Rpb24ocG9pbnQsIGluZGV4KSB7XG5cdFx0XHRtZS51cGRhdGVFbGVtZW50KHBvaW50LCBpbmRleCwgcmVzZXQpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihwb2ludCwgaW5kZXgsIHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXHRcdHZhciB4U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueEF4aXNJRCk7XG5cdFx0dmFyIHlTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS55QXhpc0lEKTtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHBvaW50LCBpbmRleCk7XG5cdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YVtpbmRleF07XG5cdFx0dmFyIGRzSW5kZXggPSBtZS5pbmRleDtcblxuXHRcdHZhciB4ID0gcmVzZXQgPyB4U2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiB4U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgPyBkYXRhIDogTmFOLCBpbmRleCwgZHNJbmRleCk7XG5cdFx0dmFyIHkgPSByZXNldCA/IHlTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKGRhdGEsIGluZGV4LCBkc0luZGV4KTtcblxuXHRcdHBvaW50Ll94U2NhbGUgPSB4U2NhbGU7XG5cdFx0cG9pbnQuX3lTY2FsZSA9IHlTY2FsZTtcblx0XHRwb2ludC5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0cG9pbnQuX2RhdGFzZXRJbmRleCA9IGRzSW5kZXg7XG5cdFx0cG9pbnQuX2luZGV4ID0gaW5kZXg7XG5cdFx0cG9pbnQuX21vZGVsID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHRoaXRSYWRpdXM6IG9wdGlvbnMuaGl0UmFkaXVzLFxuXHRcdFx0cG9pbnRTdHlsZTogb3B0aW9ucy5wb2ludFN0eWxlLFxuXHRcdFx0cm90YXRpb246IG9wdGlvbnMucm90YXRpb24sXG5cdFx0XHRyYWRpdXM6IHJlc2V0ID8gMCA6IG9wdGlvbnMucmFkaXVzLFxuXHRcdFx0c2tpcDogY3VzdG9tLnNraXAgfHwgaXNOYU4oeCkgfHwgaXNOYU4oeSksXG5cdFx0XHR4OiB4LFxuXHRcdFx0eTogeSxcblx0XHR9O1xuXG5cdFx0cG9pbnQucGl2b3QoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0dmFyIG9wdGlvbnMgPSBwb2ludC5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0cG9pbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBtb2RlbC5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aCxcblx0XHRcdHJhZGl1czogbW9kZWwucmFkaXVzXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDQob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQkNChvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQkNChvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuXHRcdG1vZGVsLnJhZGl1cyA9IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5ob3ZlclJhZGl1cztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zOiBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0dmFyIGRhdGEgPSBkYXRhc2V0LmRhdGFbaW5kZXhdIHx8IHt9O1xuXHRcdHZhciB2YWx1ZXMgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5fcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucy5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdC8vIFNjcmlwdGFibGUgb3B0aW9uc1xuXHRcdHZhciBjb250ZXh0ID0ge1xuXHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0ZGF0YUluZGV4OiBpbmRleCxcblx0XHRcdGRhdGFzZXQ6IGRhdGFzZXQsXG5cdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0fTtcblxuXHRcdC8vIEluIGNhc2UgdmFsdWVzIHdlcmUgY2FjaGVkIChhbmQgdGh1cyBmcm96ZW4pLCB3ZSBuZWVkIHRvIGNsb25lIHRoZSB2YWx1ZXNcblx0XHRpZiAobWUuX2NhY2hlZERhdGFPcHRzID09PSB2YWx1ZXMpIHtcblx0XHRcdHZhbHVlcyA9IGhlbHBlcnMkMS5leHRlbmQoe30sIHZhbHVlcyk7XG5cdFx0fVxuXG5cdFx0Ly8gQ3VzdG9tIHJhZGl1cyByZXNvbHV0aW9uXG5cdFx0dmFsdWVzLnJhZGl1cyA9IHJlc29sdmUkMShbXG5cdFx0XHRjdXN0b20ucmFkaXVzLFxuXHRcdFx0ZGF0YS5yLFxuXHRcdFx0bWUuX2NvbmZpZy5yYWRpdXMsXG5cdFx0XHRjaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LnJhZGl1c1xuXHRcdF0sIGNvbnRleHQsIGluZGV4KTtcblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH1cbn0pO1xuXG52YXIgdmFsdWVPckRlZmF1bHQkNSA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxudmFyIFBJJDEgPSBNYXRoLlBJO1xudmFyIERPVUJMRV9QSSQxID0gUEkkMSAqIDI7XG52YXIgSEFMRl9QSSQxID0gUEkkMSAvIDI7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZG91Z2hudXQnLCB7XG5cdGFuaW1hdGlvbjoge1xuXHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxuXHRcdGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cdFx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSBzY2FsaW5nIHRoZSBEb3VnaG51dCBmcm9tIHRoZSBjZW50cmVcblx0XHRhbmltYXRlU2NhbGU6IGZhbHNlXG5cdH0sXG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblx0bGVnZW5kQ2FsbGJhY2s6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHR2YXIgZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzO1xuXHRcdHZhciBsYWJlbHMgPSBkYXRhLmxhYmVscztcblx0XHR2YXIgaSwgaWxlbiwgbGlzdEl0ZW0sIGxpc3RJdGVtU3BhbjtcblxuXHRcdGxpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsIGNoYXJ0LmlkICsgJy1sZWdlbmQnKTtcblx0XHRpZiAoZGF0YXNldHMubGVuZ3RoKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHNbMF0uZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bGlzdEl0ZW0gPSBsaXN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykpO1xuXHRcdFx0XHRsaXN0SXRlbVNwYW4gPSBsaXN0SXRlbS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJykpO1xuXHRcdFx0XHRsaXN0SXRlbVNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldHNbMF0uYmFja2dyb3VuZENvbG9yW2ldO1xuXHRcdFx0XHRpZiAobGFiZWxzW2ldKSB7XG5cdFx0XHRcdFx0bGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGFiZWxzW2ldKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdC5vdXRlckhUTUw7XG5cdH0sXG5cdGxlZ2VuZDoge1xuXHRcdGxhYmVsczoge1xuXHRcdFx0Z2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHRcdFx0aWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhLmxhYmVscy5tYXAoZnVuY3Rpb24obGFiZWwsIGkpIHtcblx0XHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG5cdFx0XHRcdFx0XHR2YXIgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHRleHQ6IGxhYmVsLFxuXHRcdFx0XHRcdFx0XHRmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcblx0XHRcdFx0XHRcdFx0c3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRcdFx0XHRsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuXHRcdFx0XHRcdFx0XHRoaWRkZW46IGlzTmFOKGRhdGEuZGF0YXNldHNbMF0uZGF0YVtpXSkgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbixcblxuXHRcdFx0XHRcdFx0XHQvLyBFeHRyYSBkYXRhIHVzZWQgZm9yIHRvZ2dsaW5nIHRoZSBjb3JyZWN0IGl0ZW1cblx0XHRcdFx0XHRcdFx0aW5kZXg6IGlcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRvbkNsaWNrOiBmdW5jdGlvbihlLCBsZWdlbmRJdGVtKSB7XG5cdFx0XHR2YXIgaW5kZXggPSBsZWdlbmRJdGVtLmluZGV4O1xuXHRcdFx0dmFyIGNoYXJ0ID0gdGhpcy5jaGFydDtcblx0XHRcdHZhciBpLCBpbGVuLCBtZXRhO1xuXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdC8vIHRvZ2dsZSB2aXNpYmlsaXR5IG9mIGluZGV4IGlmIGV4aXN0c1xuXHRcdFx0XHRpZiAobWV0YS5kYXRhW2luZGV4XSkge1xuXHRcdFx0XHRcdG1ldGEuZGF0YVtpbmRleF0uaGlkZGVuID0gIW1ldGEuZGF0YVtpbmRleF0uaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNoYXJ0LnVwZGF0ZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBUaGUgcGVyY2VudGFnZSBvZiB0aGUgY2hhcnQgdGhhdCB3ZSBjdXQgb3V0IG9mIHRoZSBtaWRkbGUuXG5cdGN1dG91dFBlcmNlbnRhZ2U6IDUwLFxuXG5cdC8vIFRoZSByb3RhdGlvbiBvZiB0aGUgY2hhcnQsIHdoZXJlIHRoZSBmaXJzdCBkYXRhIGFyYyBiZWdpbnMuXG5cdHJvdGF0aW9uOiAtSEFMRl9QSSQxLFxuXG5cdC8vIFRoZSB0b3RhbCBjaXJjdW1mZXJlbmNlIG9mIHRoZSBjaGFydC5cblx0Y2lyY3VtZmVyZW5jZTogRE9VQkxFX1BJJDEsXG5cblx0Ly8gTmVlZCB0byBvdmVycmlkZSB0aGVzZSB0byBnaXZlIGEgbmljZSBkZWZhdWx0XG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0dmFyIGRhdGFMYWJlbCA9IGRhdGEubGFiZWxzW3Rvb2x0aXBJdGVtLmluZGV4XTtcblx0XHRcdFx0dmFyIHZhbHVlID0gJzogJyArIGRhdGEuZGF0YXNldHNbdG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4XS5kYXRhW3Rvb2x0aXBJdGVtLmluZGV4XTtcblxuXHRcdFx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkoZGF0YUxhYmVsKSkge1xuXHRcdFx0XHRcdC8vIHNob3cgdmFsdWUgb24gZmlyc3QgbGluZSBvZiBtdWx0aWxpbmUgbGFiZWxcblx0XHRcdFx0XHQvLyBuZWVkIHRvIGNsb25lIGJlY2F1c2Ugd2UgYXJlIGNoYW5naW5nIHRoZSB2YWx1ZVxuXHRcdFx0XHRcdGRhdGFMYWJlbCA9IGRhdGFMYWJlbC5zbGljZSgpO1xuXHRcdFx0XHRcdGRhdGFMYWJlbFswXSArPSB2YWx1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhTGFiZWwgKz0gdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZGF0YUxhYmVsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbnZhciBjb250cm9sbGVyX2RvdWdobnV0ID0gY29yZV9kYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXG5cdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuQXJjLFxuXG5cdGxpbmtTY2FsZXM6IGhlbHBlcnMkMS5ub29wLFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJDb2xvcicsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnYm9yZGVyQWxpZ24nLFxuXHRcdCdob3ZlckJhY2tncm91bmRDb2xvcicsXG5cdFx0J2hvdmVyQm9yZGVyQ29sb3InLFxuXHRcdCdob3ZlckJvcmRlcldpZHRoJyxcblx0XSxcblxuXHQvLyBHZXQgaW5kZXggb2YgdGhlIGRhdGFzZXQgaW4gcmVsYXRpb24gdG8gdGhlIHZpc2libGUgZGF0YXNldHMuIFRoaXMgYWxsb3dzIGRldGVybWluaW5nIHRoZSBpbm5lciBhbmQgb3V0ZXIgcmFkaXVzIGNvcnJlY3RseVxuXHRnZXRSaW5nSW5kZXg6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciByaW5nSW5kZXggPSAwO1xuXG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkYXRhc2V0SW5kZXg7ICsraikge1xuXHRcdFx0aWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShqKSkge1xuXHRcdFx0XHQrK3JpbmdJbmRleDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmluZ0luZGV4O1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdHZhciByYXRpb1ggPSAxO1xuXHRcdHZhciByYXRpb1kgPSAxO1xuXHRcdHZhciBvZmZzZXRYID0gMDtcblx0XHR2YXIgb2Zmc2V0WSA9IDA7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGFyY3MgPSBtZXRhLmRhdGE7XG5cdFx0dmFyIGN1dG91dCA9IG9wdHMuY3V0b3V0UGVyY2VudGFnZSAvIDEwMCB8fCAwO1xuXHRcdHZhciBjaXJjdW1mZXJlbmNlID0gb3B0cy5jaXJjdW1mZXJlbmNlO1xuXHRcdHZhciBjaGFydFdlaWdodCA9IG1lLl9nZXRSaW5nV2VpZ2h0KG1lLmluZGV4KTtcblx0XHR2YXIgbWF4V2lkdGgsIG1heEhlaWdodCwgaSwgaWxlbjtcblxuXHRcdC8vIElmIHRoZSBjaGFydCdzIGNpcmN1bWZlcmVuY2UgaXNuJ3QgYSBmdWxsIGNpcmNsZSwgY2FsY3VsYXRlIHNpemUgYXMgYSByYXRpbyBvZiB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBhcmNcblx0XHRpZiAoY2lyY3VtZmVyZW5jZSA8IERPVUJMRV9QSSQxKSB7XG5cdFx0XHR2YXIgc3RhcnRBbmdsZSA9IG9wdHMucm90YXRpb24gJSBET1VCTEVfUEkkMTtcblx0XHRcdHN0YXJ0QW5nbGUgKz0gc3RhcnRBbmdsZSA+PSBQSSQxID8gLURPVUJMRV9QSSQxIDogc3RhcnRBbmdsZSA8IC1QSSQxID8gRE9VQkxFX1BJJDEgOiAwO1xuXHRcdFx0dmFyIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2U7XG5cdFx0XHR2YXIgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG5cdFx0XHR2YXIgc3RhcnRZID0gTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG5cdFx0XHR2YXIgZW5kWCA9IE1hdGguY29zKGVuZEFuZ2xlKTtcblx0XHRcdHZhciBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuXHRcdFx0dmFyIGNvbnRhaW5zMCA9IChzdGFydEFuZ2xlIDw9IDAgJiYgZW5kQW5nbGUgPj0gMCkgfHwgZW5kQW5nbGUgPj0gRE9VQkxFX1BJJDE7XG5cdFx0XHR2YXIgY29udGFpbnM5MCA9IChzdGFydEFuZ2xlIDw9IEhBTEZfUEkkMSAmJiBlbmRBbmdsZSA+PSBIQUxGX1BJJDEpIHx8IGVuZEFuZ2xlID49IERPVUJMRV9QSSQxICsgSEFMRl9QSSQxO1xuXHRcdFx0dmFyIGNvbnRhaW5zMTgwID0gc3RhcnRBbmdsZSA9PT0gLVBJJDEgfHwgZW5kQW5nbGUgPj0gUEkkMTtcblx0XHRcdHZhciBjb250YWluczI3MCA9IChzdGFydEFuZ2xlIDw9IC1IQUxGX1BJJDEgJiYgZW5kQW5nbGUgPj0gLUhBTEZfUEkkMSkgfHwgZW5kQW5nbGUgPj0gUEkkMSArIEhBTEZfUEkkMTtcblx0XHRcdHZhciBtaW5YID0gY29udGFpbnMxODAgPyAtMSA6IE1hdGgubWluKHN0YXJ0WCwgc3RhcnRYICogY3V0b3V0LCBlbmRYLCBlbmRYICogY3V0b3V0KTtcblx0XHRcdHZhciBtaW5ZID0gY29udGFpbnMyNzAgPyAtMSA6IE1hdGgubWluKHN0YXJ0WSwgc3RhcnRZICogY3V0b3V0LCBlbmRZLCBlbmRZICogY3V0b3V0KTtcblx0XHRcdHZhciBtYXhYID0gY29udGFpbnMwID8gMSA6IE1hdGgubWF4KHN0YXJ0WCwgc3RhcnRYICogY3V0b3V0LCBlbmRYLCBlbmRYICogY3V0b3V0KTtcblx0XHRcdHZhciBtYXhZID0gY29udGFpbnM5MCA/IDEgOiBNYXRoLm1heChzdGFydFksIHN0YXJ0WSAqIGN1dG91dCwgZW5kWSwgZW5kWSAqIGN1dG91dCk7XG5cdFx0XHRyYXRpb1ggPSAobWF4WCAtIG1pblgpIC8gMjtcblx0XHRcdHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuXHRcdFx0b2Zmc2V0WCA9IC0obWF4WCArIG1pblgpIC8gMjtcblx0XHRcdG9mZnNldFkgPSAtKG1heFkgKyBtaW5ZKSAvIDI7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRhcmNzW2ldLl9vcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoYXJjc1tpXSwgaSk7XG5cdFx0fVxuXG5cdFx0Y2hhcnQuYm9yZGVyV2lkdGggPSBtZS5nZXRNYXhCb3JkZXJXaWR0aCgpO1xuXHRcdG1heFdpZHRoID0gKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0IC0gY2hhcnQuYm9yZGVyV2lkdGgpIC8gcmF0aW9YO1xuXHRcdG1heEhlaWdodCA9IChjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCAtIGNoYXJ0LmJvcmRlcldpZHRoKSAvIHJhdGlvWTtcblx0XHRjaGFydC5vdXRlclJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG5cdFx0Y2hhcnQuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChjaGFydC5vdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG5cdFx0Y2hhcnQucmFkaXVzTGVuZ3RoID0gKGNoYXJ0Lm91dGVyUmFkaXVzIC0gY2hhcnQuaW5uZXJSYWRpdXMpIC8gKG1lLl9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCkgfHwgMSk7XG5cdFx0Y2hhcnQub2Zmc2V0WCA9IG9mZnNldFggKiBjaGFydC5vdXRlclJhZGl1cztcblx0XHRjaGFydC5vZmZzZXRZID0gb2Zmc2V0WSAqIGNoYXJ0Lm91dGVyUmFkaXVzO1xuXG5cdFx0bWV0YS50b3RhbCA9IG1lLmNhbGN1bGF0ZVRvdGFsKCk7XG5cblx0XHRtZS5vdXRlclJhZGl1cyA9IGNoYXJ0Lm91dGVyUmFkaXVzIC0gY2hhcnQucmFkaXVzTGVuZ3RoICogbWUuX2dldFJpbmdXZWlnaHRPZmZzZXQobWUuaW5kZXgpO1xuXHRcdG1lLmlubmVyUmFkaXVzID0gTWF0aC5tYXgobWUub3V0ZXJSYWRpdXMgLSBjaGFydC5yYWRpdXNMZW5ndGggKiBjaGFydFdlaWdodCwgMCk7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQoYXJjc1tpXSwgaSwgcmVzZXQpO1xuXHRcdH1cblx0fSxcblxuXHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihhcmMsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcblx0XHR2YXIgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG5cdFx0dmFyIGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcblx0XHR2YXIgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuXHRcdHZhciBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG5cdFx0dmFyIHN0YXJ0QW5nbGUgPSBvcHRzLnJvdGF0aW9uOyAvLyBub24gcmVzZXQgY2FzZSBoYW5kbGVkIGxhdGVyXG5cdFx0dmFyIGVuZEFuZ2xlID0gb3B0cy5yb3RhdGlvbjsgLy8gbm9uIHJlc2V0IGNhc2UgaGFuZGxlZCBsYXRlclxuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBjaXJjdW1mZXJlbmNlID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlID8gMCA6IGFyYy5oaWRkZW4gPyAwIDogbWUuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShkYXRhc2V0LmRhdGFbaW5kZXhdKSAqIChvcHRzLmNpcmN1bWZlcmVuY2UgLyBET1VCTEVfUEkkMSk7XG5cdFx0dmFyIGlubmVyUmFkaXVzID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUgPyAwIDogbWUuaW5uZXJSYWRpdXM7XG5cdFx0dmFyIG91dGVyUmFkaXVzID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUgPyAwIDogbWUub3V0ZXJSYWRpdXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBhcmMuX29wdGlvbnMgfHwge307XG5cblx0XHRoZWxwZXJzJDEuZXh0ZW5kKGFyYywge1xuXHRcdFx0Ly8gVXRpbGl0eVxuXHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRfaW5kZXg6IGluZGV4LFxuXG5cdFx0XHQvLyBEZXNpcmVkIHZpZXcgcHJvcGVydGllc1xuXHRcdFx0X21vZGVsOiB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcblx0XHRcdFx0Ym9yZGVyQWxpZ246IG9wdGlvbnMuYm9yZGVyQWxpZ24sXG5cdFx0XHRcdHg6IGNlbnRlclggKyBjaGFydC5vZmZzZXRYLFxuXHRcdFx0XHR5OiBjZW50ZXJZICsgY2hhcnQub2Zmc2V0WSxcblx0XHRcdFx0c3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcblx0XHRcdFx0ZW5kQW5nbGU6IGVuZEFuZ2xlLFxuXHRcdFx0XHRjaXJjdW1mZXJlbmNlOiBjaXJjdW1mZXJlbmNlLFxuXHRcdFx0XHRvdXRlclJhZGl1czogb3V0ZXJSYWRpdXMsXG5cdFx0XHRcdGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyxcblx0XHRcdFx0bGFiZWw6IGhlbHBlcnMkMS52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5sYWJlbCwgaW5kZXgsIGNoYXJ0LmRhdGEubGFiZWxzW2luZGV4XSlcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHZhciBtb2RlbCA9IGFyYy5fbW9kZWw7XG5cblx0XHQvLyBTZXQgY29ycmVjdCBhbmdsZXMgaWYgbm90IHJlc2V0dGluZ1xuXHRcdGlmICghcmVzZXQgfHwgIWFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSkge1xuXHRcdFx0aWYgKGluZGV4ID09PSAwKSB7XG5cdFx0XHRcdG1vZGVsLnN0YXJ0QW5nbGUgPSBvcHRzLnJvdGF0aW9uO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bW9kZWwuc3RhcnRBbmdsZSA9IG1lLmdldE1ldGEoKS5kYXRhW2luZGV4IC0gMV0uX21vZGVsLmVuZEFuZ2xlO1xuXHRcdFx0fVxuXG5cdFx0XHRtb2RlbC5lbmRBbmdsZSA9IG1vZGVsLnN0YXJ0QW5nbGUgKyBtb2RlbC5jaXJjdW1mZXJlbmNlO1xuXHRcdH1cblxuXHRcdGFyYy5waXZvdCgpO1xuXHR9LFxuXG5cdGNhbGN1bGF0ZVRvdGFsOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBtZXRhID0gdGhpcy5nZXRNZXRhKCk7XG5cdFx0dmFyIHRvdGFsID0gMDtcblx0XHR2YXIgdmFsdWU7XG5cblx0XHRoZWxwZXJzJDEuZWFjaChtZXRhLmRhdGEsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG5cdFx0XHR2YWx1ZSA9IGRhdGFzZXQuZGF0YVtpbmRleF07XG5cdFx0XHRpZiAoIWlzTmFOKHZhbHVlKSAmJiAhZWxlbWVudC5oaWRkZW4pIHtcblx0XHRcdFx0dG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0LyogaWYgKHRvdGFsID09PSAwKSB7XG5cdFx0XHR0b3RhbCA9IE5hTjtcblx0XHR9Ki9cblxuXHRcdHJldHVybiB0b3RhbDtcblx0fSxcblxuXHRjYWxjdWxhdGVDaXJjdW1mZXJlbmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciB0b3RhbCA9IHRoaXMuZ2V0TWV0YSgpLnRvdGFsO1xuXHRcdGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIERPVUJMRV9QSSQxICogKE1hdGguYWJzKHZhbHVlKSAvIHRvdGFsKTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gZ2V0cyB0aGUgbWF4IGJvcmRlciBvciBob3ZlciB3aWR0aCB0byBwcm9wZXJseSBzY2FsZSBwaWUgY2hhcnRzXG5cdGdldE1heEJvcmRlcldpZHRoOiBmdW5jdGlvbihhcmNzKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWF4ID0gMDtcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgaSwgaWxlbiwgbWV0YSwgYXJjLCBjb250cm9sbGVyLCBvcHRpb25zLCBib3JkZXJXaWR0aCwgaG92ZXJXaWR0aDtcblxuXHRcdGlmICghYXJjcykge1xuXHRcdFx0Ly8gRmluZCB0aGUgb3V0bW9zdCB2aXNpYmxlIGRhdGFzZXRcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdFx0XHRhcmNzID0gbWV0YS5kYXRhO1xuXHRcdFx0XHRcdGlmIChpICE9PSBtZS5pbmRleCkge1xuXHRcdFx0XHRcdFx0Y29udHJvbGxlciA9IG1ldGEuY29udHJvbGxlcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIWFyY3MpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0YXJjID0gYXJjc1tpXTtcblx0XHRcdGlmIChjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnRyb2xsZXIuX2NvbmZpZ3VyZSgpO1xuXHRcdFx0XHRvcHRpb25zID0gY29udHJvbGxlci5fcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhhcmMsIGkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucyA9IGFyYy5fb3B0aW9ucztcblx0XHRcdH1cblx0XHRcdGlmIChvcHRpb25zLmJvcmRlckFsaWduICE9PSAnaW5uZXInKSB7XG5cdFx0XHRcdGJvcmRlcldpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcblx0XHRcdFx0aG92ZXJXaWR0aCA9IG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aDtcblxuXHRcdFx0XHRtYXggPSBib3JkZXJXaWR0aCA+IG1heCA/IGJvcmRlcldpZHRoIDogbWF4O1xuXHRcdFx0XHRtYXggPSBob3ZlcldpZHRoID4gbWF4ID8gaG92ZXJXaWR0aCA6IG1heDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1heDtcblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24oYXJjKSB7XG5cdFx0dmFyIG1vZGVsID0gYXJjLl9tb2RlbDtcblx0XHR2YXIgb3B0aW9ucyA9IGFyYy5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0YXJjLiRwcmV2aW91c1N0eWxlID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBtb2RlbC5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogbW9kZWwuYm9yZGVyQ29sb3IsXG5cdFx0XHRib3JkZXJXaWR0aDogbW9kZWwuYm9yZGVyV2lkdGgsXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDUob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQkNShvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQkNShvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBHZXQgcmFkaXVzIGxlbmd0aCBvZmZzZXQgb2YgdGhlIGRhdGFzZXQgaW4gcmVsYXRpb24gdG8gdGhlIHZpc2libGUgZGF0YXNldHMgd2VpZ2h0cy4gVGhpcyBhbGxvd3MgZGV0ZXJtaW5pbmcgdGhlIGlubmVyIGFuZCBvdXRlciByYWRpdXMgY29ycmVjdGx5XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0UmluZ1dlaWdodE9mZnNldDogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0dmFyIHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhc2V0SW5kZXg7ICsraSkge1xuXHRcdFx0aWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRyaW5nV2VpZ2h0T2Zmc2V0ICs9IHRoaXMuX2dldFJpbmdXZWlnaHQoaSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJpbmdXZWlnaHRPZmZzZXQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0UmluZ1dlaWdodDogZnVuY3Rpb24oZGF0YVNldEluZGV4KSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KHZhbHVlT3JEZWZhdWx0JDUodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFTZXRJbmRleF0ud2VpZ2h0LCAxKSwgMCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHN1bSBvZiBhbGwgdmlzaWJpbGUgZGF0YSBzZXQgd2VpZ2h0cy4gIFRoaXMgdmFsdWUgY2FuIGJlIDAuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aCk7XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2hvcml6b250YWxCYXInLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ2luZGV4Jyxcblx0XHRheGlzOiAneSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInLFxuXHRcdFx0cG9zaXRpb246ICdib3R0b20nXG5cdFx0fV0sXG5cblx0XHR5QXhlczogW3tcblx0XHRcdHR5cGU6ICdjYXRlZ29yeScsXG5cdFx0XHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRcdFx0b2Zmc2V0OiB0cnVlLFxuXHRcdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRcdG9mZnNldEdyaWRMaW5lczogdHJ1ZVxuXHRcdFx0fVxuXHRcdH1dXG5cdH0sXG5cblx0ZWxlbWVudHM6IHtcblx0XHRyZWN0YW5nbGU6IHtcblx0XHRcdGJvcmRlclNraXBwZWQ6ICdsZWZ0J1xuXHRcdH1cblx0fSxcblxuXHR0b29sdGlwczoge1xuXHRcdG1vZGU6ICdpbmRleCcsXG5cdFx0YXhpczogJ3knXG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZGF0YXNldHM6IHtcblx0XHRob3Jpem9udGFsQmFyOiB7XG5cdFx0XHRjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcblx0XHRcdGJhclBlcmNlbnRhZ2U6IDAuOVxuXHRcdH1cblx0fVxufSk7XG5cbnZhciBjb250cm9sbGVyX2hvcml6b250YWxCYXIgPSBjb250cm9sbGVyX2Jhci5leHRlbmQoe1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRWYWx1ZVNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldE1ldGEoKS54QXhpc0lEO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEluZGV4U2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0TWV0YSgpLnlBeGlzSUQ7XG5cdH1cbn0pO1xuXG52YXIgdmFsdWVPckRlZmF1bHQkNiA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcbnZhciByZXNvbHZlJDIgPSBoZWxwZXJzJDEub3B0aW9ucy5yZXNvbHZlO1xudmFyIGlzUG9pbnRJbkFyZWEgPSBoZWxwZXJzJDEuY2FudmFzLl9pc1BvaW50SW5BcmVhO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2xpbmUnLCB7XG5cdHNob3dMaW5lczogdHJ1ZSxcblx0c3BhbkdhcHM6IGZhbHNlLFxuXG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ2xhYmVsJ1xuXHR9LFxuXG5cdHNjYWxlczoge1xuXHRcdHhBeGVzOiBbe1xuXHRcdFx0dHlwZTogJ2NhdGVnb3J5Jyxcblx0XHRcdGlkOiAneC1heGlzLTAnXG5cdFx0fV0sXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdGlkOiAneS1heGlzLTAnXG5cdFx0fV1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIHNjYWxlQ2xpcChzY2FsZSwgaGFsZkJvcmRlcldpZHRoKSB7XG5cdHZhciB0aWNrT3B0cyA9IHNjYWxlICYmIHNjYWxlLm9wdGlvbnMudGlja3MgfHwge307XG5cdHZhciByZXZlcnNlID0gdGlja09wdHMucmV2ZXJzZTtcblx0dmFyIG1pbiA9IHRpY2tPcHRzLm1pbiA9PT0gdW5kZWZpbmVkID8gaGFsZkJvcmRlcldpZHRoIDogMDtcblx0dmFyIG1heCA9IHRpY2tPcHRzLm1heCA9PT0gdW5kZWZpbmVkID8gaGFsZkJvcmRlcldpZHRoIDogMDtcblx0cmV0dXJuIHtcblx0XHRzdGFydDogcmV2ZXJzZSA/IG1heCA6IG1pbixcblx0XHRlbmQ6IHJldmVyc2UgPyBtaW4gOiBtYXhcblx0fTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENsaXAoeFNjYWxlLCB5U2NhbGUsIGJvcmRlcldpZHRoKSB7XG5cdHZhciBoYWxmQm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCAvIDI7XG5cdHZhciB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgaGFsZkJvcmRlcldpZHRoKTtcblx0dmFyIHkgPSBzY2FsZUNsaXAoeVNjYWxlLCBoYWxmQm9yZGVyV2lkdGgpO1xuXG5cdHJldHVybiB7XG5cdFx0dG9wOiB5LmVuZCxcblx0XHRyaWdodDogeC5lbmQsXG5cdFx0Ym90dG9tOiB5LnN0YXJ0LFxuXHRcdGxlZnQ6IHguc3RhcnRcblx0fTtcbn1cblxuZnVuY3Rpb24gdG9DbGlwKHZhbHVlKSB7XG5cdHZhciB0LCByLCBiLCBsO1xuXG5cdGlmIChoZWxwZXJzJDEuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0dCA9IHZhbHVlLnRvcDtcblx0XHRyID0gdmFsdWUucmlnaHQ7XG5cdFx0YiA9IHZhbHVlLmJvdHRvbTtcblx0XHRsID0gdmFsdWUubGVmdDtcblx0fSBlbHNlIHtcblx0XHR0ID0gciA9IGIgPSBsID0gdmFsdWU7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHRvcDogdCxcblx0XHRyaWdodDogcixcblx0XHRib3R0b206IGIsXG5cdFx0bGVmdDogbFxuXHR9O1xufVxuXG5cbnZhciBjb250cm9sbGVyX2xpbmUgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cblx0ZGF0YXNldEVsZW1lbnRUeXBlOiBlbGVtZW50cy5MaW5lLFxuXG5cdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUG9pbnQsXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YXNldEVsZW1lbnRPcHRpb25zOiBbXG5cdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0J2JvcmRlckNhcFN0eWxlJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJEYXNoJyxcblx0XHQnYm9yZGVyRGFzaE9mZnNldCcsXG5cdFx0J2JvcmRlckpvaW5TdHlsZScsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnY3ViaWNJbnRlcnBvbGF0aW9uTW9kZScsXG5cdFx0J2ZpbGwnXG5cdF0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YUVsZW1lbnRPcHRpb25zOiB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiAncG9pbnRCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdGJvcmRlckNvbG9yOiAncG9pbnRCb3JkZXJDb2xvcicsXG5cdFx0Ym9yZGVyV2lkdGg6ICdwb2ludEJvcmRlcldpZHRoJyxcblx0XHRoaXRSYWRpdXM6ICdwb2ludEhpdFJhZGl1cycsXG5cdFx0aG92ZXJCYWNrZ3JvdW5kQ29sb3I6ICdwb2ludEhvdmVyQmFja2dyb3VuZENvbG9yJyxcblx0XHRob3ZlckJvcmRlckNvbG9yOiAncG9pbnRIb3ZlckJvcmRlckNvbG9yJyxcblx0XHRob3ZlckJvcmRlcldpZHRoOiAncG9pbnRIb3ZlckJvcmRlcldpZHRoJyxcblx0XHRob3ZlclJhZGl1czogJ3BvaW50SG92ZXJSYWRpdXMnLFxuXHRcdHBvaW50U3R5bGU6ICdwb2ludFN0eWxlJyxcblx0XHRyYWRpdXM6ICdwb2ludFJhZGl1cycsXG5cdFx0cm90YXRpb246ICdwb2ludFJvdGF0aW9uJ1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBsaW5lID0gbWV0YS5kYXRhc2V0O1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5jaGFydC5vcHRpb25zO1xuXHRcdHZhciBjb25maWcgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBzaG93TGluZSA9IG1lLl9zaG93TGluZSA9IHZhbHVlT3JEZWZhdWx0JDYoY29uZmlnLnNob3dMaW5lLCBvcHRpb25zLnNob3dMaW5lcyk7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRtZS5feFNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnhBeGlzSUQpO1xuXHRcdG1lLl95U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cblx0XHQvLyBVcGRhdGUgTGluZVxuXHRcdGlmIChzaG93TGluZSkge1xuXHRcdFx0Ly8gQ29tcGF0aWJpbGl0eTogSWYgdGhlIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgd2l0aCBvbmx5IHRoZSBvbGQgbmFtZSwgdXNlIHRob3NlIHZhbHVlc1xuXHRcdFx0aWYgKGNvbmZpZy50ZW5zaW9uICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmxpbmVUZW5zaW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29uZmlnLmxpbmVUZW5zaW9uID0gY29uZmlnLnRlbnNpb247XG5cdFx0XHR9XG5cblx0XHRcdC8vIFV0aWxpdHlcblx0XHRcdGxpbmUuX3NjYWxlID0gbWUuX3lTY2FsZTtcblx0XHRcdGxpbmUuX2RhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdFx0Ly8gRGF0YVxuXHRcdFx0bGluZS5fY2hpbGRyZW4gPSBwb2ludHM7XG5cdFx0XHQvLyBNb2RlbFxuXHRcdFx0bGluZS5fbW9kZWwgPSBtZS5fcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhsaW5lKTtcblxuXHRcdFx0bGluZS5waXZvdCgpO1xuXHRcdH1cblxuXHRcdC8vIFVwZGF0ZSBQb2ludHNcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0bWUudXBkYXRlRWxlbWVudChwb2ludHNbaV0sIGksIHJlc2V0KTtcblx0XHR9XG5cblx0XHRpZiAoc2hvd0xpbmUgJiYgbGluZS5fbW9kZWwudGVuc2lvbiAhPT0gMCkge1xuXHRcdFx0bWUudXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cygpO1xuXHRcdH1cblxuXHRcdC8vIE5vdyBwaXZvdCB0aGUgcG9pbnQgZm9yIGFuaW1hdGlvblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwb2ludHNbaV0ucGl2b3QoKTtcblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgZGF0YXNldEluZGV4ID0gbWUuaW5kZXg7XG5cdFx0dmFyIHZhbHVlID0gZGF0YXNldC5kYXRhW2luZGV4XTtcblx0XHR2YXIgeFNjYWxlID0gbWUuX3hTY2FsZTtcblx0XHR2YXIgeVNjYWxlID0gbWUuX3lTY2FsZTtcblx0XHR2YXIgbGluZU1vZGVsID0gbWV0YS5kYXRhc2V0Ll9tb2RlbDtcblx0XHR2YXIgeCwgeTtcblxuXHRcdHZhciBvcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMocG9pbnQsIGluZGV4KTtcblxuXHRcdHggPSB4U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUgOiBOYU4sIGluZGV4LCBkYXRhc2V0SW5kZXgpO1xuXHRcdHkgPSByZXNldCA/IHlTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IG1lLmNhbGN1bGF0ZVBvaW50WSh2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCk7XG5cblx0XHQvLyBVdGlsaXR5XG5cdFx0cG9pbnQuX3hTY2FsZSA9IHhTY2FsZTtcblx0XHRwb2ludC5feVNjYWxlID0geVNjYWxlO1xuXHRcdHBvaW50Ll9vcHRpb25zID0gb3B0aW9ucztcblx0XHRwb2ludC5fZGF0YXNldEluZGV4ID0gZGF0YXNldEluZGV4O1xuXHRcdHBvaW50Ll9pbmRleCA9IGluZGV4O1xuXG5cdFx0Ly8gRGVzaXJlZCB2aWV3IHByb3BlcnRpZXNcblx0XHRwb2ludC5fbW9kZWwgPSB7XG5cdFx0XHR4OiB4LFxuXHRcdFx0eTogeSxcblx0XHRcdHNraXA6IGN1c3RvbS5za2lwIHx8IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuXHRcdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdFx0cmFkaXVzOiBvcHRpb25zLnJhZGl1cyxcblx0XHRcdHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcblx0XHRcdHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHR0ZW5zaW9uOiB2YWx1ZU9yRGVmYXVsdCQ2KGN1c3RvbS50ZW5zaW9uLCBsaW5lTW9kZWwgPyBsaW5lTW9kZWwudGVuc2lvbiA6IDApLFxuXHRcdFx0c3RlcHBlZExpbmU6IGxpbmVNb2RlbCA/IGxpbmVNb2RlbC5zdGVwcGVkTGluZSA6IGZhbHNlLFxuXHRcdFx0Ly8gVG9vbHRpcFxuXHRcdFx0aGl0UmFkaXVzOiBvcHRpb25zLmhpdFJhZGl1c1xuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNvbmZpZyA9IG1lLl9jb25maWc7XG5cdFx0dmFyIGN1c3RvbSA9IGVsZW1lbnQuY3VzdG9tIHx8IHt9O1xuXHRcdHZhciBvcHRpb25zID0gbWUuY2hhcnQub3B0aW9ucztcblx0XHR2YXIgbGluZU9wdGlvbnMgPSBvcHRpb25zLmVsZW1lbnRzLmxpbmU7XG5cdFx0dmFyIHZhbHVlcyA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLl9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0Ly8gVGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgbGluZXMgaXMgdG8gYnJlYWsgYXQgbnVsbCB2YWx1ZXMsIGFjY29yZGluZ1xuXHRcdC8vIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yNDM1I2lzc3VlY29tbWVudC0yMTY3MTgxNThcblx0XHQvLyBUaGlzIG9wdGlvbiBnaXZlcyBsaW5lcyB0aGUgYWJpbGl0eSB0byBzcGFuIGdhcHNcblx0XHR2YWx1ZXMuc3BhbkdhcHMgPSB2YWx1ZU9yRGVmYXVsdCQ2KGNvbmZpZy5zcGFuR2Fwcywgb3B0aW9ucy5zcGFuR2Fwcyk7XG5cdFx0dmFsdWVzLnRlbnNpb24gPSB2YWx1ZU9yRGVmYXVsdCQ2KGNvbmZpZy5saW5lVGVuc2lvbiwgbGluZU9wdGlvbnMudGVuc2lvbik7XG5cdFx0dmFsdWVzLnN0ZXBwZWRMaW5lID0gcmVzb2x2ZSQyKFtjdXN0b20uc3RlcHBlZExpbmUsIGNvbmZpZy5zdGVwcGVkTGluZSwgbGluZU9wdGlvbnMuc3RlcHBlZF0pO1xuXHRcdHZhbHVlcy5jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0JDYoY29uZmlnLmNsaXAsIGRlZmF1bHRDbGlwKG1lLl94U2NhbGUsIG1lLl95U2NhbGUsIHZhbHVlcy5ib3JkZXJXaWR0aCkpKTtcblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH0sXG5cblx0Y2FsY3VsYXRlUG9pbnRZOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIHlTY2FsZSA9IG1lLl95U2NhbGU7XG5cdFx0dmFyIHN1bVBvcyA9IDA7XG5cdFx0dmFyIHN1bU5lZyA9IDA7XG5cdFx0dmFyIGksIGRzLCBkc01ldGEsIHN0YWNrZWRSaWdodFZhbHVlLCByaWdodFZhbHVlLCBtZXRhc2V0cywgaWxlbjtcblxuXHRcdGlmICh5U2NhbGUub3B0aW9ucy5zdGFja2VkKSB7XG5cdFx0XHRyaWdodFZhbHVlID0gK3lTY2FsZS5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdG1ldGFzZXRzID0gY2hhcnQuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcblx0XHRcdGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7XG5cblx0XHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0ZHNNZXRhID0gbWV0YXNldHNbaV07XG5cdFx0XHRcdGlmIChkc01ldGEuaW5kZXggPT09IGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzW2RzTWV0YS5pbmRleF07XG5cdFx0XHRcdGlmIChkc01ldGEudHlwZSA9PT0gJ2xpbmUnICYmIGRzTWV0YS55QXhpc0lEID09PSB5U2NhbGUuaWQpIHtcblx0XHRcdFx0XHRzdGFja2VkUmlnaHRWYWx1ZSA9ICt5U2NhbGUuZ2V0UmlnaHRWYWx1ZShkcy5kYXRhW2luZGV4XSk7XG5cdFx0XHRcdFx0aWYgKHN0YWNrZWRSaWdodFZhbHVlIDwgMCkge1xuXHRcdFx0XHRcdFx0c3VtTmVnICs9IHN0YWNrZWRSaWdodFZhbHVlIHx8IDA7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN1bVBvcyArPSBzdGFja2VkUmlnaHRWYWx1ZSB8fCAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocmlnaHRWYWx1ZSA8IDApIHtcblx0XHRcdFx0cmV0dXJuIHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN1bU5lZyArIHJpZ2h0VmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN1bVBvcyArIHJpZ2h0VmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4geVNjYWxlLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuXHR9LFxuXG5cdHVwZGF0ZUJlemllckNvbnRyb2xQb2ludHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGxpbmVNb2RlbCA9IG1ldGEuZGF0YXNldC5fbW9kZWw7XG5cdFx0dmFyIGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHR2YXIgaSwgaWxlbiwgbW9kZWwsIGNvbnRyb2xQb2ludHM7XG5cblx0XHQvLyBPbmx5IGNvbnNpZGVyIHBvaW50cyB0aGF0IGFyZSBkcmF3biBpbiBjYXNlIHRoZSBzcGFuR2FwcyBvcHRpb24gaXMgdXNlZFxuXHRcdGlmIChsaW5lTW9kZWwuc3BhbkdhcHMpIHtcblx0XHRcdHBvaW50cyA9IHBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocHQpIHtcblx0XHRcdFx0cmV0dXJuICFwdC5fbW9kZWwuc2tpcDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNhcENvbnRyb2xQb2ludChwdCwgbWluLCBtYXgpIHtcblx0XHRcdHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcblx0XHR9XG5cblx0XHRpZiAobGluZU1vZGVsLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcblx0XHRcdGhlbHBlcnMkMS5zcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1vZGVsID0gcG9pbnRzW2ldLl9tb2RlbDtcblx0XHRcdFx0Y29udHJvbFBvaW50cyA9IGhlbHBlcnMkMS5zcGxpbmVDdXJ2ZShcblx0XHRcdFx0XHRoZWxwZXJzJDEucHJldmlvdXNJdGVtKHBvaW50cywgaSkuX21vZGVsLFxuXHRcdFx0XHRcdG1vZGVsLFxuXHRcdFx0XHRcdGhlbHBlcnMkMS5uZXh0SXRlbShwb2ludHMsIGkpLl9tb2RlbCxcblx0XHRcdFx0XHRsaW5lTW9kZWwudGVuc2lvblxuXHRcdFx0XHQpO1xuXHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLng7XG5cdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueTtcblx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFggPSBjb250cm9sUG9pbnRzLm5leHQueDtcblx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFkgPSBjb250cm9sUG9pbnRzLm5leHQueTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoY2hhcnQub3B0aW9ucy5lbGVtZW50cy5saW5lLmNhcEJlemllclBvaW50cykge1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bW9kZWwgPSBwb2ludHNbaV0uX21vZGVsO1xuXHRcdFx0XHRpZiAoaXNQb2ludEluQXJlYShtb2RlbCwgYXJlYSkpIHtcblx0XHRcdFx0XHRpZiAoaSA+IDAgJiYgaXNQb2ludEluQXJlYShwb2ludHNbaSAtIDFdLl9tb2RlbCwgYXJlYSkpIHtcblx0XHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1gsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG5cdFx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBjYXBDb250cm9sUG9pbnQobW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNZLCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaSA8IHBvaW50cy5sZW5ndGggLSAxICYmIGlzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXS5fbW9kZWwsIGFyZWEpKSB7XG5cdFx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnROZXh0WCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gY2FwQ29udHJvbFBvaW50KG1vZGVsLmNvbnRyb2xQb2ludE5leHRZLCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIGlsZW4gPSBwb2ludHMubGVuZ3RoO1xuXHRcdHZhciBjbGlwO1xuXG5cdFx0aWYgKG1lLl9zaG93TGluZSkge1xuXHRcdFx0Y2xpcCA9IG1ldGEuZGF0YXNldC5fbW9kZWwuY2xpcDtcblxuXHRcdFx0aGVscGVycyQxLmNhbnZhcy5jbGlwQXJlYShjaGFydC5jdHgsIHtcblx0XHRcdFx0bGVmdDogY2xpcC5sZWZ0ID09PSBmYWxzZSA/IDAgOiBhcmVhLmxlZnQgLSBjbGlwLmxlZnQsXG5cdFx0XHRcdHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IGNhbnZhcy53aWR0aCA6IGFyZWEucmlnaHQgKyBjbGlwLnJpZ2h0LFxuXHRcdFx0XHR0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuXHRcdFx0XHRib3R0b206IGNsaXAuYm90dG9tID09PSBmYWxzZSA/IGNhbnZhcy5oZWlnaHQgOiBhcmVhLmJvdHRvbSArIGNsaXAuYm90dG9tXG5cdFx0XHR9KTtcblxuXHRcdFx0bWV0YS5kYXRhc2V0LmRyYXcoKTtcblxuXHRcdFx0aGVscGVycyQxLmNhbnZhcy51bmNsaXBBcmVhKGNoYXJ0LmN0eCk7XG5cdFx0fVxuXG5cdFx0Ly8gRHJhdyB0aGUgcG9pbnRzXG5cdFx0Zm9yICg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHBvaW50c1tpXS5kcmF3KGFyZWEpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0dmFyIG9wdGlvbnMgPSBwb2ludC5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0cG9pbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBtb2RlbC5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aCxcblx0XHRcdHJhZGl1czogbW9kZWwucmFkaXVzXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDYob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQkNihvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQkNihvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuXHRcdG1vZGVsLnJhZGl1cyA9IHZhbHVlT3JEZWZhdWx0JDYob3B0aW9ucy5ob3ZlclJhZGl1cywgb3B0aW9ucy5yYWRpdXMpO1xuXHR9LFxufSk7XG5cbnZhciByZXNvbHZlJDMgPSBoZWxwZXJzJDEub3B0aW9ucy5yZXNvbHZlO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3BvbGFyQXJlYScsIHtcblx0c2NhbGU6IHtcblx0XHR0eXBlOiAncmFkaWFsTGluZWFyJyxcblx0XHRhbmdsZUxpbmVzOiB7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZVxuXHRcdH0sXG5cdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRjaXJjdWxhcjogdHJ1ZVxuXHRcdH0sXG5cdFx0cG9pbnRMYWJlbHM6IHtcblx0XHRcdGRpc3BsYXk6IGZhbHNlXG5cdFx0fSxcblx0XHR0aWNrczoge1xuXHRcdFx0YmVnaW5BdFplcm86IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSB0aGUgcm90YXRpb24gb2YgdGhlIGNoYXJ0XG5cdGFuaW1hdGlvbjoge1xuXHRcdGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cdFx0YW5pbWF0ZVNjYWxlOiB0cnVlXG5cdH0sXG5cblx0c3RhcnRBbmdsZTogLTAuNSAqIE1hdGguUEksXG5cdGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcblx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0dmFyIGRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbGFiZWxzID0gZGF0YS5sYWJlbHM7XG5cdFx0dmFyIGksIGlsZW4sIGxpc3RJdGVtLCBsaXN0SXRlbVNwYW47XG5cblx0XHRsaXN0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjaGFydC5pZCArICctbGVnZW5kJyk7XG5cdFx0aWYgKGRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzWzBdLmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGxpc3RJdGVtID0gbGlzdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpKTtcblx0XHRcdFx0bGlzdEl0ZW1TcGFuID0gbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpKTtcblx0XHRcdFx0bGlzdEl0ZW1TcGFuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXRzWzBdLmJhY2tncm91bmRDb2xvcltpXTtcblx0XHRcdFx0aWYgKGxhYmVsc1tpXSkge1xuXHRcdFx0XHRcdGxpc3RJdGVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxhYmVsc1tpXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Qub3V0ZXJIVE1MO1xuXHR9LFxuXHRsZWdlbmQ6IHtcblx0XHRsYWJlbHM6IHtcblx0XHRcdGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0XHRcdGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YS5sYWJlbHMubWFwKGZ1bmN0aW9uKGxhYmVsLCBpKSB7XG5cdFx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuXHRcdFx0XHRcdFx0dmFyIHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHR0ZXh0OiBsYWJlbCxcblx0XHRcdFx0XHRcdFx0ZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdFx0XHRcdHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcblx0XHRcdFx0XHRcdFx0bGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcblx0XHRcdFx0XHRcdFx0aGlkZGVuOiBpc05hTihkYXRhLmRhdGFzZXRzWzBdLmRhdGFbaV0pIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4sXG5cblx0XHRcdFx0XHRcdFx0Ly8gRXh0cmEgZGF0YSB1c2VkIGZvciB0b2dnbGluZyB0aGUgY29ycmVjdCBpdGVtXG5cdFx0XHRcdFx0XHRcdGluZGV4OiBpXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5pbmRleDtcblx0XHRcdHZhciBjaGFydCA9IHRoaXMuY2hhcnQ7XG5cdFx0XHR2YXIgaSwgaWxlbiwgbWV0YTtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0XHRtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbiA9ICFtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Y2hhcnQudXBkYXRlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5lZWQgdG8gb3ZlcnJpZGUgdGhlc2UgdG8gZ2l2ZSBhIG5pY2UgZGVmYXVsdFxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKGl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGEubGFiZWxzW2l0ZW0uaW5kZXhdICsgJzogJyArIGl0ZW0ueUxhYmVsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbnZhciBjb250cm9sbGVyX3BvbGFyQXJlYSA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLkFyYyxcblxuXHRsaW5rU2NhbGVzOiBoZWxwZXJzJDEubm9vcCxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J2JvcmRlckFsaWduJyxcblx0XHQnaG92ZXJCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdob3ZlckJvcmRlckNvbG9yJyxcblx0XHQnaG92ZXJCb3JkZXJXaWR0aCcsXG5cdF0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0SW5kZXhTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZS5pZDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRWYWx1ZVNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0LnNjYWxlLmlkO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBzdGFydCA9IG1lLmNoYXJ0Lm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuXHRcdHZhciBzdGFydHMgPSBtZS5fc3RhcnRzID0gW107XG5cdFx0dmFyIGFuZ2xlcyA9IG1lLl9hbmdsZXMgPSBbXTtcblx0XHR2YXIgYXJjcyA9IG1ldGEuZGF0YTtcblx0XHR2YXIgaSwgaWxlbiwgYW5nbGU7XG5cblx0XHRtZS5fdXBkYXRlUmFkaXVzKCk7XG5cblx0XHRtZXRhLmNvdW50ID0gbWUuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0LmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0XHRzdGFydHNbaV0gPSBzdGFydDtcblx0XHRcdGFuZ2xlID0gbWUuX2NvbXB1dGVBbmdsZShpKTtcblx0XHRcdGFuZ2xlc1tpXSA9IGFuZ2xlO1xuXHRcdFx0c3RhcnQgKz0gYW5nbGU7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRhcmNzW2ldLl9vcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoYXJjc1tpXSwgaSk7XG5cdFx0XHRtZS51cGRhdGVFbGVtZW50KGFyY3NbaV0sIGksIHJlc2V0KTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfdXBkYXRlUmFkaXVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdHZhciBtaW5TaXplID0gTWF0aC5taW4oY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQsIGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wKTtcblxuXHRcdGNoYXJ0Lm91dGVyUmFkaXVzID0gTWF0aC5tYXgobWluU2l6ZSAvIDIsIDApO1xuXHRcdGNoYXJ0LmlubmVyUmFkaXVzID0gTWF0aC5tYXgob3B0cy5jdXRvdXRQZXJjZW50YWdlID8gKGNoYXJ0Lm91dGVyUmFkaXVzIC8gMTAwKSAqIChvcHRzLmN1dG91dFBlcmNlbnRhZ2UpIDogMSwgMCk7XG5cdFx0Y2hhcnQucmFkaXVzTGVuZ3RoID0gKGNoYXJ0Lm91dGVyUmFkaXVzIC0gY2hhcnQuaW5uZXJSYWRpdXMpIC8gY2hhcnQuZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpO1xuXG5cdFx0bWUub3V0ZXJSYWRpdXMgPSBjaGFydC5vdXRlclJhZGl1cyAtIChjaGFydC5yYWRpdXNMZW5ndGggKiBtZS5pbmRleCk7XG5cdFx0bWUuaW5uZXJSYWRpdXMgPSBtZS5vdXRlclJhZGl1cyAtIGNoYXJ0LnJhZGl1c0xlbmd0aDtcblx0fSxcblxuXHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihhcmMsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdHZhciBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG5cdFx0dmFyIHNjYWxlID0gY2hhcnQuc2NhbGU7XG5cdFx0dmFyIGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzO1xuXG5cdFx0dmFyIGNlbnRlclggPSBzY2FsZS54Q2VudGVyO1xuXHRcdHZhciBjZW50ZXJZID0gc2NhbGUueUNlbnRlcjtcblxuXHRcdC8vIHZhciBuZWdIYWxmUEkgPSAtMC41ICogTWF0aC5QSTtcblx0XHR2YXIgZGF0YXNldFN0YXJ0QW5nbGUgPSBvcHRzLnN0YXJ0QW5nbGU7XG5cdFx0dmFyIGRpc3RhbmNlID0gYXJjLmhpZGRlbiA/IDAgOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblx0XHR2YXIgc3RhcnRBbmdsZSA9IG1lLl9zdGFydHNbaW5kZXhdO1xuXHRcdHZhciBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoYXJjLmhpZGRlbiA/IDAgOiBtZS5fYW5nbGVzW2luZGV4XSk7XG5cblx0XHR2YXIgcmVzZXRSYWRpdXMgPSBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSA/IDAgOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblx0XHR2YXIgb3B0aW9ucyA9IGFyYy5fb3B0aW9ucyB8fCB7fTtcblxuXHRcdGhlbHBlcnMkMS5leHRlbmQoYXJjLCB7XG5cdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRfZGF0YXNldEluZGV4OiBtZS5pbmRleCxcblx0XHRcdF9pbmRleDogaW5kZXgsXG5cdFx0XHRfc2NhbGU6IHNjYWxlLFxuXG5cdFx0XHQvLyBEZXNpcmVkIHZpZXcgcHJvcGVydGllc1xuXHRcdFx0X21vZGVsOiB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcblx0XHRcdFx0Ym9yZGVyQWxpZ246IG9wdGlvbnMuYm9yZGVyQWxpZ24sXG5cdFx0XHRcdHg6IGNlbnRlclgsXG5cdFx0XHRcdHk6IGNlbnRlclksXG5cdFx0XHRcdGlubmVyUmFkaXVzOiAwLFxuXHRcdFx0XHRvdXRlclJhZGl1czogcmVzZXQgPyByZXNldFJhZGl1cyA6IGRpc3RhbmNlLFxuXHRcdFx0XHRzdGFydEFuZ2xlOiByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUgPyBkYXRhc2V0U3RhcnRBbmdsZSA6IHN0YXJ0QW5nbGUsXG5cdFx0XHRcdGVuZEFuZ2xlOiByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUgPyBkYXRhc2V0U3RhcnRBbmdsZSA6IGVuZEFuZ2xlLFxuXHRcdFx0XHRsYWJlbDogaGVscGVycyQxLnZhbHVlQXRJbmRleE9yRGVmYXVsdChsYWJlbHMsIGluZGV4LCBsYWJlbHNbaW5kZXhdKVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXJjLnBpdm90KCk7XG5cdH0sXG5cblx0Y291bnRWaXNpYmxlRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIG1ldGEgPSB0aGlzLmdldE1ldGEoKTtcblx0XHR2YXIgY291bnQgPSAwO1xuXG5cdFx0aGVscGVycyQxLmVhY2gobWV0YS5kYXRhLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuXHRcdFx0aWYgKCFpc05hTihkYXRhc2V0LmRhdGFbaW5kZXhdKSAmJiAhZWxlbWVudC5oaWRkZW4pIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBjb3VudDtcblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24oYXJjKSB7XG5cdFx0dmFyIG1vZGVsID0gYXJjLl9tb2RlbDtcblx0XHR2YXIgb3B0aW9ucyA9IGFyYy5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxuXHRcdGFyYy4kcHJldmlvdXNTdHlsZSA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG1vZGVsLmJvcmRlcldpZHRoLFxuXHRcdH07XG5cblx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQmFja2dyb3VuZENvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jb21wdXRlQW5nbGU6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY291bnQgPSB0aGlzLmdldE1ldGEoKS5jb3VudDtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblxuXHRcdGlmIChpc05hTihkYXRhc2V0LmRhdGFbaW5kZXhdKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU2NyaXB0YWJsZSBvcHRpb25zXG5cdFx0dmFyIGNvbnRleHQgPSB7XG5cdFx0XHRjaGFydDogbWUuY2hhcnQsXG5cdFx0XHRkYXRhSW5kZXg6IGluZGV4LFxuXHRcdFx0ZGF0YXNldDogZGF0YXNldCxcblx0XHRcdGRhdGFzZXRJbmRleDogbWUuaW5kZXhcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHJlc29sdmUkMyhbXG5cdFx0XHRtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYy5hbmdsZSxcblx0XHRcdCgyICogTWF0aC5QSSkgLyBjb3VudFxuXHRcdF0sIGNvbnRleHQsIGluZGV4KTtcblx0fVxufSk7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgncGllJywgaGVscGVycyQxLmNsb25lKGNvcmVfZGVmYXVsdHMuZG91Z2hudXQpKTtcbmNvcmVfZGVmYXVsdHMuX3NldCgncGllJywge1xuXHRjdXRvdXRQZXJjZW50YWdlOiAwXG59KTtcblxuLy8gUGllIGNoYXJ0cyBhcmUgRG91Z2hudXQgY2hhcnQgd2l0aCBkaWZmZXJlbnQgZGVmYXVsdHNcbnZhciBjb250cm9sbGVyX3BpZSA9IGNvbnRyb2xsZXJfZG91Z2hudXQ7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQ3ID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3JhZGFyJywge1xuXHRzcGFuR2FwczogZmFsc2UsXG5cdHNjYWxlOiB7XG5cdFx0dHlwZTogJ3JhZGlhbExpbmVhcidcblx0fSxcblx0ZWxlbWVudHM6IHtcblx0XHRsaW5lOiB7XG5cdFx0XHRmaWxsOiAnc3RhcnQnLFxuXHRcdFx0dGVuc2lvbjogMCAvLyBubyBiZXppZXIgaW4gcmFkYXJcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgY29udHJvbGxlcl9yYWRhciA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblx0ZGF0YXNldEVsZW1lbnRUeXBlOiBlbGVtZW50cy5MaW5lLFxuXG5cdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUG9pbnQsXG5cblx0bGlua1NjYWxlczogaGVscGVycyQxLm5vb3AsXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YXNldEVsZW1lbnRPcHRpb25zOiBbXG5cdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJDYXBTdHlsZScsXG5cdFx0J2JvcmRlckRhc2gnLFxuXHRcdCdib3JkZXJEYXNoT2Zmc2V0Jyxcblx0XHQnYm9yZGVySm9pblN0eWxlJyxcblx0XHQnZmlsbCdcblx0XSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdwb2ludEJhY2tncm91bmRDb2xvcicsXG5cdFx0Ym9yZGVyQ29sb3I6ICdwb2ludEJvcmRlckNvbG9yJyxcblx0XHRib3JkZXJXaWR0aDogJ3BvaW50Qm9yZGVyV2lkdGgnLFxuXHRcdGhpdFJhZGl1czogJ3BvaW50SGl0UmFkaXVzJyxcblx0XHRob3ZlckJhY2tncm91bmRDb2xvcjogJ3BvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdGhvdmVyQm9yZGVyQ29sb3I6ICdwb2ludEhvdmVyQm9yZGVyQ29sb3InLFxuXHRcdGhvdmVyQm9yZGVyV2lkdGg6ICdwb2ludEhvdmVyQm9yZGVyV2lkdGgnLFxuXHRcdGhvdmVyUmFkaXVzOiAncG9pbnRIb3ZlclJhZGl1cycsXG5cdFx0cG9pbnRTdHlsZTogJ3BvaW50U3R5bGUnLFxuXHRcdHJhZGl1czogJ3BvaW50UmFkaXVzJyxcblx0XHRyb3RhdGlvbjogJ3BvaW50Um90YXRpb24nXG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0SW5kZXhTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZS5pZDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRWYWx1ZVNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0LnNjYWxlLmlkO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBsaW5lID0gbWV0YS5kYXRhc2V0O1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIHNjYWxlID0gbWUuY2hhcnQuc2NhbGU7XG5cdFx0dmFyIGNvbmZpZyA9IG1lLl9jb25maWc7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHQvLyBDb21wYXRpYmlsaXR5OiBJZiB0aGUgcHJvcGVydGllcyBhcmUgZGVmaW5lZCB3aXRoIG9ubHkgdGhlIG9sZCBuYW1lLCB1c2UgdGhvc2UgdmFsdWVzXG5cdFx0aWYgKGNvbmZpZy50ZW5zaW9uICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmxpbmVUZW5zaW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbmZpZy5saW5lVGVuc2lvbiA9IGNvbmZpZy50ZW5zaW9uO1xuXHRcdH1cblxuXHRcdC8vIFV0aWxpdHlcblx0XHRsaW5lLl9zY2FsZSA9IHNjYWxlO1xuXHRcdGxpbmUuX2RhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdC8vIERhdGFcblx0XHRsaW5lLl9jaGlsZHJlbiA9IHBvaW50cztcblx0XHRsaW5lLl9sb29wID0gdHJ1ZTtcblx0XHQvLyBNb2RlbFxuXHRcdGxpbmUuX21vZGVsID0gbWUuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobGluZSk7XG5cblx0XHRsaW5lLnBpdm90KCk7XG5cblx0XHQvLyBVcGRhdGUgUG9pbnRzXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQocG9pbnRzW2ldLCBpLCByZXNldCk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIGJlemllciBjb250cm9sIHBvaW50c1xuXHRcdG1lLnVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMoKTtcblxuXHRcdC8vIE5vdyBwaXZvdCB0aGUgcG9pbnQgZm9yIGFuaW1hdGlvblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwb2ludHNbaV0ucGl2b3QoKTtcblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgc2NhbGUgPSBtZS5jaGFydC5zY2FsZTtcblx0XHR2YXIgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCwgZGF0YXNldC5kYXRhW2luZGV4XSk7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5fcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhwb2ludCwgaW5kZXgpO1xuXHRcdHZhciBsaW5lTW9kZWwgPSBtZS5nZXRNZXRhKCkuZGF0YXNldC5fbW9kZWw7XG5cdFx0dmFyIHggPSByZXNldCA/IHNjYWxlLnhDZW50ZXIgOiBwb2ludFBvc2l0aW9uLng7XG5cdFx0dmFyIHkgPSByZXNldCA/IHNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnk7XG5cblx0XHQvLyBVdGlsaXR5XG5cdFx0cG9pbnQuX3NjYWxlID0gc2NhbGU7XG5cdFx0cG9pbnQuX29wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHBvaW50Ll9kYXRhc2V0SW5kZXggPSBtZS5pbmRleDtcblx0XHRwb2ludC5faW5kZXggPSBpbmRleDtcblxuXHRcdC8vIERlc2lyZWQgdmlldyBwcm9wZXJ0aWVzXG5cdFx0cG9pbnQuX21vZGVsID0ge1xuXHRcdFx0eDogeCwgLy8gdmFsdWUgbm90IHVzZWQgaW4gZGF0YXNldCBzY2FsZSwgYnV0IHdlIHdhbnQgYSBjb25zaXN0ZW50IEFQSSBiZXR3ZWVuIHNjYWxlc1xuXHRcdFx0eTogeSxcblx0XHRcdHNraXA6IGN1c3RvbS5za2lwIHx8IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuXHRcdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdFx0cmFkaXVzOiBvcHRpb25zLnJhZGl1cyxcblx0XHRcdHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcblx0XHRcdHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHR0ZW5zaW9uOiB2YWx1ZU9yRGVmYXVsdCQ3KGN1c3RvbS50ZW5zaW9uLCBsaW5lTW9kZWwgPyBsaW5lTW9kZWwudGVuc2lvbiA6IDApLFxuXG5cdFx0XHQvLyBUb29sdGlwXG5cdFx0XHRoaXRSYWRpdXM6IG9wdGlvbnMuaGl0UmFkaXVzXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjb25maWcgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBvcHRpb25zID0gbWUuY2hhcnQub3B0aW9ucztcblx0XHR2YXIgdmFsdWVzID0gY29yZV9kYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHR2YWx1ZXMuc3BhbkdhcHMgPSB2YWx1ZU9yRGVmYXVsdCQ3KGNvbmZpZy5zcGFuR2Fwcywgb3B0aW9ucy5zcGFuR2Fwcyk7XG5cdFx0dmFsdWVzLnRlbnNpb24gPSB2YWx1ZU9yRGVmYXVsdCQ3KGNvbmZpZy5saW5lVGVuc2lvbiwgb3B0aW9ucy5lbGVtZW50cy5saW5lLnRlbnNpb24pO1xuXG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fSxcblxuXHR1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBhcmVhID0gbWUuY2hhcnQuY2hhcnRBcmVhO1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIGksIGlsZW4sIG1vZGVsLCBjb250cm9sUG9pbnRzO1xuXG5cdFx0Ly8gT25seSBjb25zaWRlciBwb2ludHMgdGhhdCBhcmUgZHJhd24gaW4gY2FzZSB0aGUgc3BhbkdhcHMgb3B0aW9uIGlzIHVzZWRcblx0XHRpZiAobWV0YS5kYXRhc2V0Ll9tb2RlbC5zcGFuR2Fwcykge1xuXHRcdFx0cG9pbnRzID0gcG9pbnRzLmZpbHRlcihmdW5jdGlvbihwdCkge1xuXHRcdFx0XHRyZXR1cm4gIXB0Ll9tb2RlbC5za2lwO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuXHRcdFx0cmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHB0LCBtYXgpLCBtaW4pO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtb2RlbCA9IHBvaW50c1tpXS5fbW9kZWw7XG5cdFx0XHRjb250cm9sUG9pbnRzID0gaGVscGVycyQxLnNwbGluZUN1cnZlKFxuXHRcdFx0XHRoZWxwZXJzJDEucHJldmlvdXNJdGVtKHBvaW50cywgaSwgdHJ1ZSkuX21vZGVsLFxuXHRcdFx0XHRtb2RlbCxcblx0XHRcdFx0aGVscGVycyQxLm5leHRJdGVtKHBvaW50cywgaSwgdHJ1ZSkuX21vZGVsLFxuXHRcdFx0XHRtb2RlbC50ZW5zaW9uXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRoZSBiZXppZXIgZ29pbmcgb3V0c2lkZSBvZiB0aGUgYm91bmRzIG9mIHRoZSBncmFwaFxuXHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gY2FwQ29udHJvbFBvaW50KGNvbnRyb2xQb2ludHMucHJldmlvdXMueCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IGNhcENvbnRyb2xQb2ludChjb250cm9sUG9pbnRzLnByZXZpb3VzLnksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG5cdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IGNhcENvbnRyb2xQb2ludChjb250cm9sUG9pbnRzLm5leHQueCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gY2FwQ29udHJvbFBvaW50KGNvbnRyb2xQb2ludHMubmV4dC55LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdH1cblx0fSxcblxuXHRzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdHZhciBtb2RlbCA9IHBvaW50Ll9tb2RlbDtcblx0XHR2YXIgb3B0aW9ucyA9IHBvaW50Ll9vcHRpb25zO1xuXHRcdHZhciBnZXRIb3ZlckNvbG9yID0gaGVscGVycyQxLmdldEhvdmVyQ29sb3I7XG5cblx0XHRwb2ludC4kcHJldmlvdXNTdHlsZSA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG1vZGVsLmJvcmRlcldpZHRoLFxuXHRcdFx0cmFkaXVzOiBtb2RlbC5yYWRpdXNcblx0XHR9O1xuXG5cdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gdmFsdWVPckRlZmF1bHQkNyhvcHRpb25zLmhvdmVyQmFja2dyb3VuZENvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdCQ3KG9wdGlvbnMuaG92ZXJCb3JkZXJDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKSk7XG5cdFx0bW9kZWwuYm9yZGVyV2lkdGggPSB2YWx1ZU9yRGVmYXVsdCQ3KG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aCwgb3B0aW9ucy5ib3JkZXJXaWR0aCk7XG5cdFx0bW9kZWwucmFkaXVzID0gdmFsdWVPckRlZmF1bHQkNyhvcHRpb25zLmhvdmVyUmFkaXVzLCBvcHRpb25zLnJhZGl1cyk7XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3NjYXR0ZXInLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdGlkOiAneC1heGlzLTEnLCAgICAvLyBuZWVkIGFuIElEIHNvIGRhdGFzZXRzIGNhbiByZWZlcmVuY2UgdGhlIHNjYWxlXG5cdFx0XHR0eXBlOiAnbGluZWFyJywgICAgLy8gc2NhdHRlciBzaG91bGQgbm90IHVzZSBhIGNhdGVnb3J5IGF4aXNcblx0XHRcdHBvc2l0aW9uOiAnYm90dG9tJ1xuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0aWQ6ICd5LWF4aXMtMScsXG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdHBvc2l0aW9uOiAnbGVmdCdcblx0XHR9XVxuXHR9LFxuXG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAnJzsgICAgIC8vIGRvZXNuJ3QgbWFrZSBzZW5zZSBmb3Igc2NhdHRlciBzaW5jZSBkYXRhIGFyZSBmb3JtYXR0ZWQgYXMgYSBwb2ludFxuXHRcdFx0fSxcblx0XHRcdGxhYmVsOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdHJldHVybiAnKCcgKyBpdGVtLnhMYWJlbCArICcsICcgKyBpdGVtLnlMYWJlbCArICcpJztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZGF0YXNldHM6IHtcblx0XHRzY2F0dGVyOiB7XG5cdFx0XHRzaG93TGluZTogZmFsc2Vcblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBTY2F0dGVyIGNoYXJ0cyB1c2UgbGluZSBjb250cm9sbGVyc1xudmFyIGNvbnRyb2xsZXJfc2NhdHRlciA9IGNvbnRyb2xsZXJfbGluZTtcblxuLy8gTk9URSBleHBvcnQgYSBtYXAgaW4gd2hpY2ggdGhlIGtleSByZXByZXNlbnRzIHRoZSBjb250cm9sbGVyIHR5cGUsIG5vdFxuLy8gdGhlIGNsYXNzLCBhbmQgc28gbXVzdCBiZSBDYW1lbENhc2UgaW4gb3JkZXIgdG8gYmUgY29ycmVjdGx5IHJldHJpZXZlZFxuLy8gYnkgdGhlIGNvbnRyb2xsZXIgaW4gY29yZS5jb250cm9sbGVyLmpzIChgY29udHJvbGxlcnNbbWV0YS50eXBlXWApLlxuXG52YXIgY29udHJvbGxlcnMgPSB7XG5cdGJhcjogY29udHJvbGxlcl9iYXIsXG5cdGJ1YmJsZTogY29udHJvbGxlcl9idWJibGUsXG5cdGRvdWdobnV0OiBjb250cm9sbGVyX2RvdWdobnV0LFxuXHRob3Jpem9udGFsQmFyOiBjb250cm9sbGVyX2hvcml6b250YWxCYXIsXG5cdGxpbmU6IGNvbnRyb2xsZXJfbGluZSxcblx0cG9sYXJBcmVhOiBjb250cm9sbGVyX3BvbGFyQXJlYSxcblx0cGllOiBjb250cm9sbGVyX3BpZSxcblx0cmFkYXI6IGNvbnRyb2xsZXJfcmFkYXIsXG5cdHNjYXR0ZXI6IGNvbnRyb2xsZXJfc2NhdHRlclxufTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHJlbGF0aXZlIHBvc2l0aW9uIGZvciBhbiBldmVudFxuICogQHBhcmFtIHtFdmVudHxJRXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGdldCB0aGUgcG9zaXRpb24gZm9yXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydFxuICogQHJldHVybnMge29iamVjdH0gdGhlIGV2ZW50IHBvc2l0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpIHtcblx0aWYgKGUubmF0aXZlKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IGUueCxcblx0XHRcdHk6IGUueVxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gaGVscGVycyQxLmdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byB0cmF2ZXJzZSBhbGwgb2YgdGhlIHZpc2libGUgZWxlbWVudHMgaW4gdGhlIGNoYXJ0XG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydFxuICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlciAtIHRoZSBjYWxsYmFjayB0byBleGVjdXRlIGZvciBlYWNoIHZpc2libGUgaXRlbVxuICovXG5mdW5jdGlvbiBwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgaGFuZGxlcikge1xuXHR2YXIgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuXHR2YXIgbWV0YWRhdGEsIGksIGosIGlsZW4sIGpsZW4sIGVsZW1lbnQ7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdG1ldGFkYXRhID0gbWV0YXNldHNbaV0uZGF0YTtcblx0XHRmb3IgKGogPSAwLCBqbGVuID0gbWV0YWRhdGEubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG5cdFx0XHRlbGVtZW50ID0gbWV0YWRhdGFbal07XG5cdFx0XHRpZiAoIWVsZW1lbnQuX3ZpZXcuc2tpcCkge1xuXHRcdFx0XHRoYW5kbGVyKGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGl0ZW1zIHRoYXQgaW50ZXJzZWN0IHRoZSBldmVudCBwb3NpdGlvblxuICogQHBhcmFtIHtDaGFydEVsZW1lbnRbXX0gaXRlbXMgLSBlbGVtZW50cyB0byBmaWx0ZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwb3NpdGlvbiAtIHRoZSBwb2ludCB0byBiZSBuZWFyZXN0IHRvXG4gKiBAcmV0dXJuIHtDaGFydEVsZW1lbnRbXX0gdGhlIG5lYXJlc3QgaXRlbXNcbiAqL1xuZnVuY3Rpb24gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSB7XG5cdHZhciBlbGVtZW50cyA9IFtdO1xuXG5cdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0ZWxlbWVudHMucHVzaChlbGVtZW50KTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBpdGVtcyBuZWFyZXN0IHRvIHRoZSBldmVudCBwb3NpdGlvbiBjb25zaWRlcmluZyBhbGwgdmlzaWJsZSBpdGVtcyBpbiB0ZWggY2hhcnRcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHRvIGxvb2sgYXQgZWxlbWVudHMgZnJvbVxuICogQHBhcmFtIHtvYmplY3R9IHBvc2l0aW9uIC0gdGhlIHBvaW50IHRvIGJlIG5lYXJlc3QgdG9cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW50ZXJzZWN0IC0gaWYgdHJ1ZSwgb25seSBjb25zaWRlciBpdGVtcyB0aGF0IGludGVyc2VjdCB0aGUgcG9zaXRpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRpc3RhbmNlTWV0cmljIC0gZnVuY3Rpb24gdG8gcHJvdmlkZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiBwb2ludHNcbiAqIEByZXR1cm4ge0NoYXJ0RWxlbWVudFtdfSB0aGUgbmVhcmVzdCBpdGVtc1xuICovXG5mdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBpbnRlcnNlY3QsIGRpc3RhbmNlTWV0cmljKSB7XG5cdHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0dmFyIG5lYXJlc3RJdGVtcyA9IFtdO1xuXG5cdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0aWYgKGludGVyc2VjdCAmJiAhZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQoKTtcblx0XHR2YXIgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcblx0XHRpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuXHRcdFx0bmVhcmVzdEl0ZW1zID0gW2VsZW1lbnRdO1xuXHRcdFx0bWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuXHRcdFx0Ly8gQ2FuIGhhdmUgbXVsdGlwbGUgaXRlbXMgYXQgdGhlIHNhbWUgZGlzdGFuY2UgaW4gd2hpY2ggY2FzZSB3ZSBzb3J0IGJ5IHNpemVcblx0XHRcdG5lYXJlc3RJdGVtcy5wdXNoKGVsZW1lbnQpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIG5lYXJlc3RJdGVtcztcbn1cblxuLyoqXG4gKiBHZXQgYSBkaXN0YW5jZSBtZXRyaWMgZnVuY3Rpb24gZm9yIHR3byBwb2ludHMgYmFzZWQgb24gdGhlXG4gKiBheGlzIG1vZGUgc2V0dGluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGF4aXMgLSB0aGUgYXhpcyBtb2RlLiB4fHl8eHlcbiAqL1xuZnVuY3Rpb24gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpIHtcblx0dmFyIHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG5cdHZhciB1c2VZID0gYXhpcy5pbmRleE9mKCd5JykgIT09IC0xO1xuXG5cdHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuXHRcdHZhciBkZWx0YVggPSB1c2VYID8gTWF0aC5hYnMocHQxLnggLSBwdDIueCkgOiAwO1xuXHRcdHZhciBkZWx0YVkgPSB1c2VZID8gTWF0aC5hYnMocHQxLnkgLSBwdDIueSkgOiAwO1xuXHRcdHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGVsdGFYLCAyKSArIE1hdGgucG93KGRlbHRhWSwgMikpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBpbmRleE1vZGUoY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdC8vIERlZmF1bHQgYXhpcyBmb3IgaW5kZXggbW9kZSBpcyAneCcgdG8gbWF0Y2ggb2xkIGJlaGF2aW91clxuXHRvcHRpb25zLmF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3gnO1xuXHR2YXIgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMob3B0aW9ucy5heGlzKTtcblx0dmFyIGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24pIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgZmFsc2UsIGRpc3RhbmNlTWV0cmljKTtcblx0dmFyIGVsZW1lbnRzID0gW107XG5cblx0aWYgKCFpdGVtcy5sZW5ndGgpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjaGFydC5fZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmZvckVhY2goZnVuY3Rpb24obWV0YSkge1xuXHRcdHZhciBlbGVtZW50ID0gbWV0YS5kYXRhW2l0ZW1zWzBdLl9pbmRleF07XG5cblx0XHQvLyBkb24ndCBjb3VudCBpdGVtcyB0aGF0IGFyZSBza2lwcGVkIChudWxsIGRhdGEpXG5cdFx0aWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuX3ZpZXcuc2tpcCkge1xuXHRcdFx0ZWxlbWVudHMucHVzaChlbGVtZW50KTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIElJbnRlcmFjdGlvbk9wdGlvbnNcbiAqL1xuLyoqXG4gKiBJZiB0cnVlLCBvbmx5IGNvbnNpZGVyIGl0ZW1zIHRoYXQgaW50ZXJzZWN0IHRoZSBwb2ludFxuICogQG5hbWUgSUludGVyZmFjZU9wdGlvbnMjYm9vbGVhblxuICogQHR5cGUgQm9vbGVhblxuICovXG5cbi8qKlxuICogQ29udGFpbnMgaW50ZXJhY3Rpb24gcmVsYXRlZCBmdW5jdGlvbnNcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuSW50ZXJhY3Rpb25cbiAqL1xudmFyIGNvcmVfaW50ZXJhY3Rpb24gPSB7XG5cdC8vIEhlbHBlciBmdW5jdGlvbiBmb3IgZGlmZmVyZW50IG1vZGVzXG5cdG1vZGVzOiB7XG5cdFx0c2luZ2xlOiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSBbXTtcblxuXHRcdFx0cGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzLnNsaWNlKDAsIDEpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMubGFiZWxcblx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNC4wXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0bGFiZWw6IGluZGV4TW9kZSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgaXRlbXMgYXQgdGhlIHNhbWUgaW5kZXguIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgd2Ugb25seSByZXR1cm4gaXRlbXMgaWYgd2UgaW50ZXJzZWN0IHNvbWV0aGluZ1xuXHRcdCAqIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBtb2RlIGlzIGZhbHNlLCB3ZSBmaW5kIHRoZSBuZWFyZXN0IGl0ZW0gYW5kIHJldHVybiB0aGUgaXRlbXMgYXQgdGhlIHNhbWUgaW5kZXggYXMgdGhhdCBpdGVtXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmluZGV4XG5cdFx0ICogQHNpbmNlIHYyLjQuMFxuXHRcdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSB7RXZlbnR9IGUgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIC0gb3B0aW9ucyB0byB1c2UgZHVyaW5nIGludGVyYWN0aW9uXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdGluZGV4OiBpbmRleE1vZGUsXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGl0ZW1zIGluIHRoZSBzYW1lIGRhdGFzZXQuIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgd2Ugb25seSByZXR1cm4gaXRlbXMgaWYgd2UgaW50ZXJzZWN0IHNvbWV0aGluZ1xuXHRcdCAqIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBpcyBmYWxzZSwgd2UgZmluZCB0aGUgbmVhcmVzdCBpdGVtIGFuZCByZXR1cm4gdGhlIGl0ZW1zIGluIHRoYXQgZGF0YXNldFxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5kYXRhc2V0XG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIHtFdmVudH0gZSAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0ge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBvcHRpb25zIHRvIHVzZSBkdXJpbmcgaW50ZXJhY3Rpb25cblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0ZGF0YXNldDogZnVuY3Rpb24oY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0b3B0aW9ucy5heGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG5cdFx0XHR2YXIgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMob3B0aW9ucy5heGlzKTtcblx0XHRcdHZhciBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGZhbHNlLCBkaXN0YW5jZU1ldHJpYyk7XG5cblx0XHRcdGlmIChpdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGl0ZW1zID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaXRlbXNbMF0uX2RhdGFzZXRJbmRleCkuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMueC1heGlzXG5cdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjQuMC4gVXNlIGluZGV4IG1vZGUgYW5kIGludGVyc2VjdCA9PSB0cnVlXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0J3gtYXhpcyc6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhNb2RlKGNoYXJ0LCBlLCB7aW50ZXJzZWN0OiBmYWxzZX0pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBQb2ludCBtb2RlIHJldHVybnMgYWxsIGVsZW1lbnRzIHRoYXQgaGl0IHRlc3QgYmFzZWQgb24gdGhlIGV2ZW50IHBvc2l0aW9uXG5cdFx0ICogb2YgdGhlIGV2ZW50XG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmludGVyc2VjdFxuXHRcdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSB7RXZlbnR9IGUgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdHBvaW50OiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHRyZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogbmVhcmVzdCBtb2RlIHJldHVybnMgdGhlIGVsZW1lbnQgY2xvc2VzdCB0byB0aGUgcG9pbnRcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMuaW50ZXJzZWN0XG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIHtFdmVudH0gZSAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0ge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBvcHRpb25zIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHRuZWFyZXN0OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHRvcHRpb25zLmF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5Jztcblx0XHRcdHZhciBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhvcHRpb25zLmF4aXMpO1xuXHRcdFx0cmV0dXJuIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIG9wdGlvbnMuaW50ZXJzZWN0LCBkaXN0YW5jZU1ldHJpYyk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIHggbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50cyB0aGF0IGhpdC10ZXN0IGF0IHRoZSBjdXJyZW50IHggY29vcmRpbmF0ZVxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy54XG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIHtFdmVudH0gZSAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0ge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBvcHRpb25zIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHR4OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHRcdHZhciBpbnRlcnNlY3RzSXRlbSA9IGZhbHNlO1xuXG5cdFx0XHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0XHRpZiAoZWxlbWVudC5pblhSYW5nZShwb3NpdGlvbi54KSkge1xuXHRcdFx0XHRcdGl0ZW1zLnB1c2goZWxlbWVudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRcdFx0aW50ZXJzZWN0c0l0ZW0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSWYgd2Ugd2FudCB0byB0cmlnZ2VyIG9uIGFuIGludGVyc2VjdCBhbmQgd2UgZG9uJ3QgaGF2ZSBhbnkgaXRlbXNcblx0XHRcdC8vIHRoYXQgaW50ZXJzZWN0IHRoZSBwb3NpdGlvbiwgcmV0dXJuIG5vdGhpbmdcblx0XHRcdGlmIChvcHRpb25zLmludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcblx0XHRcdFx0aXRlbXMgPSBbXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBpdGVtcztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogeSBtb2RlIHJldHVybnMgdGhlIGVsZW1lbnRzIHRoYXQgaGl0LXRlc3QgYXQgdGhlIGN1cnJlbnQgeSBjb29yZGluYXRlXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLnlcblx0XHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0ge0V2ZW50fSBlIC0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEBwYXJhbSB7SUludGVyYWN0aW9uT3B0aW9uc30gb3B0aW9ucyAtIG9wdGlvbnMgdG8gdXNlXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdHk6IGZ1bmN0aW9uKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcblx0XHRcdHZhciBpdGVtcyA9IFtdO1xuXHRcdFx0dmFyIGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG5cblx0XHRcdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRcdGlmIChlbGVtZW50LmluWVJhbmdlKHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRcdFx0aXRlbXMucHVzaChlbGVtZW50KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSkpIHtcblx0XHRcdFx0XHRpbnRlcnNlY3RzSXRlbSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBJZiB3ZSB3YW50IHRvIHRyaWdnZXIgb24gYW4gaW50ZXJzZWN0IGFuZCB3ZSBkb24ndCBoYXZlIGFueSBpdGVtc1xuXHRcdFx0Ly8gdGhhdCBpbnRlcnNlY3QgdGhlIHBvc2l0aW9uLCByZXR1cm4gbm90aGluZ1xuXHRcdFx0aWYgKG9wdGlvbnMuaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuXHRcdFx0XHRpdGVtcyA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGV4dGVuZCA9IGhlbHBlcnMkMS5leHRlbmQ7XG5cbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oYXJyYXksIHBvc2l0aW9uKSB7XG5cdHJldHVybiBoZWxwZXJzJDEud2hlcmUoYXJyYXksIGZ1bmN0aW9uKHYpIHtcblx0XHRyZXR1cm4gdi5wb3MgPT09IHBvc2l0aW9uO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG5cdHJldHVybiBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHR2YXIgdjAgPSByZXZlcnNlID8gYiA6IGE7XG5cdFx0dmFyIHYxID0gcmV2ZXJzZSA/IGEgOiBiO1xuXHRcdHJldHVybiB2MC53ZWlnaHQgPT09IHYxLndlaWdodCA/XG5cdFx0XHR2MC5pbmRleCAtIHYxLmluZGV4IDpcblx0XHRcdHYwLndlaWdodCAtIHYxLndlaWdodDtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBCb3hlcyhib3hlcykge1xuXHR2YXIgbGF5b3V0Qm94ZXMgPSBbXTtcblx0dmFyIGksIGlsZW4sIGJveDtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gKGJveGVzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRib3ggPSBib3hlc1tpXTtcblx0XHRsYXlvdXRCb3hlcy5wdXNoKHtcblx0XHRcdGluZGV4OiBpLFxuXHRcdFx0Ym94OiBib3gsXG5cdFx0XHRwb3M6IGJveC5wb3NpdGlvbixcblx0XHRcdGhvcml6b250YWw6IGJveC5pc0hvcml6b250YWwoKSxcblx0XHRcdHdlaWdodDogYm94LndlaWdodFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBsYXlvdXRCb3hlcztcbn1cblxuZnVuY3Rpb24gc2V0TGF5b3V0RGltcyhsYXlvdXRzLCBwYXJhbXMpIHtcblx0dmFyIGksIGlsZW4sIGxheW91dDtcblx0Zm9yIChpID0gMCwgaWxlbiA9IGxheW91dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bGF5b3V0ID0gbGF5b3V0c1tpXTtcblx0XHQvLyBzdG9yZSB3aWR0aCB1c2VkIGluc3RlYWQgb2YgY2hhcnRBcmVhLncgaW4gZml0Qm94ZXNcblx0XHRsYXlvdXQud2lkdGggPSBsYXlvdXQuaG9yaXpvbnRhbFxuXHRcdFx0PyBsYXlvdXQuYm94LmZ1bGxXaWR0aCAmJiBwYXJhbXMuYXZhaWxhYmxlV2lkdGhcblx0XHRcdDogcGFyYW1zLnZCb3hNYXhXaWR0aDtcblx0XHQvLyBzdG9yZSBoZWlnaHQgdXNlZCBpbnN0ZWFkIG9mIGNoYXJ0QXJlYS5oIGluIGZpdEJveGVzXG5cdFx0bGF5b3V0LmhlaWdodCA9IGxheW91dC5ob3Jpem9udGFsICYmIHBhcmFtcy5oQm94TWF4SGVpZ2h0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTGF5b3V0Qm94ZXMoYm94ZXMpIHtcblx0dmFyIGxheW91dEJveGVzID0gd3JhcEJveGVzKGJveGVzKTtcblx0dmFyIGxlZnQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2xlZnQnKSwgdHJ1ZSk7XG5cdHZhciByaWdodCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAncmlnaHQnKSk7XG5cdHZhciB0b3AgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3RvcCcpLCB0cnVlKTtcblx0dmFyIGJvdHRvbSA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnYm90dG9tJykpO1xuXG5cdHJldHVybiB7XG5cdFx0bGVmdEFuZFRvcDogbGVmdC5jb25jYXQodG9wKSxcblx0XHRyaWdodEFuZEJvdHRvbTogcmlnaHQuY29uY2F0KGJvdHRvbSksXG5cdFx0Y2hhcnRBcmVhOiBmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnY2hhcnRBcmVhJyksXG5cdFx0dmVydGljYWw6IGxlZnQuY29uY2F0KHJpZ2h0KSxcblx0XHRob3Jpem9udGFsOiB0b3AuY29uY2F0KGJvdHRvbSlcblx0fTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCBhLCBiKSB7XG5cdHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0KSB7XG5cdHZhciBib3ggPSBsYXlvdXQuYm94O1xuXHR2YXIgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuXHR2YXIgbmV3V2lkdGgsIG5ld0hlaWdodDtcblxuXHRpZiAobGF5b3V0LnNpemUpIHtcblx0XHQvLyB0aGlzIGxheW91dCB3YXMgYWxyZWFkeSBjb3VudGVkIGZvciwgbGV0cyBmaXJzdCByZWR1Y2Ugb2xkIHNpemVcblx0XHRjaGFydEFyZWFbbGF5b3V0LnBvc10gLT0gbGF5b3V0LnNpemU7XG5cdH1cblx0bGF5b3V0LnNpemUgPSBsYXlvdXQuaG9yaXpvbnRhbCA/IGJveC5oZWlnaHQgOiBib3gud2lkdGg7XG5cdGNoYXJ0QXJlYVtsYXlvdXQucG9zXSArPSBsYXlvdXQuc2l6ZTtcblxuXHRpZiAoYm94LmdldFBhZGRpbmcpIHtcblx0XHR2YXIgYm94UGFkZGluZyA9IGJveC5nZXRQYWRkaW5nKCk7XG5cdFx0bWF4UGFkZGluZy50b3AgPSBNYXRoLm1heChtYXhQYWRkaW5nLnRvcCwgYm94UGFkZGluZy50b3ApO1xuXHRcdG1heFBhZGRpbmcubGVmdCA9IE1hdGgubWF4KG1heFBhZGRpbmcubGVmdCwgYm94UGFkZGluZy5sZWZ0KTtcblx0XHRtYXhQYWRkaW5nLmJvdHRvbSA9IE1hdGgubWF4KG1heFBhZGRpbmcuYm90dG9tLCBib3hQYWRkaW5nLmJvdHRvbSk7XG5cdFx0bWF4UGFkZGluZy5yaWdodCA9IE1hdGgubWF4KG1heFBhZGRpbmcucmlnaHQsIGJveFBhZGRpbmcucmlnaHQpO1xuXHR9XG5cblx0bmV3V2lkdGggPSBwYXJhbXMub3V0ZXJXaWR0aCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ2xlZnQnLCAncmlnaHQnKTtcblx0bmV3SGVpZ2h0ID0gcGFyYW1zLm91dGVySGVpZ2h0IC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAndG9wJywgJ2JvdHRvbScpO1xuXG5cdGlmIChuZXdXaWR0aCAhPT0gY2hhcnRBcmVhLncgfHwgbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaCkge1xuXHRcdGNoYXJ0QXJlYS53ID0gbmV3V2lkdGg7XG5cdFx0Y2hhcnRBcmVhLmggPSBuZXdIZWlnaHQ7XG5cblx0XHQvLyByZXR1cm4gdHJ1ZSBpZiBjaGFydCBhcmVhIGNoYW5nZWQgaW4gbGF5b3V0J3MgZGlyZWN0aW9uXG5cdFx0cmV0dXJuIGxheW91dC5ob3Jpem9udGFsID8gbmV3V2lkdGggIT09IGNoYXJ0QXJlYS53IDogbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaDtcblx0fVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSkge1xuXHR2YXIgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZVBvcyhwb3MpIHtcblx0XHR2YXIgY2hhbmdlID0gTWF0aC5tYXgobWF4UGFkZGluZ1twb3NdIC0gY2hhcnRBcmVhW3Bvc10sIDApO1xuXHRcdGNoYXJ0QXJlYVtwb3NdICs9IGNoYW5nZTtcblx0XHRyZXR1cm4gY2hhbmdlO1xuXHR9XG5cdGNoYXJ0QXJlYS55ICs9IHVwZGF0ZVBvcygndG9wJyk7XG5cdGNoYXJ0QXJlYS54ICs9IHVwZGF0ZVBvcygnbGVmdCcpO1xuXHR1cGRhdGVQb3MoJ3JpZ2h0Jyk7XG5cdHVwZGF0ZVBvcygnYm90dG9tJyk7XG59XG5cbmZ1bmN0aW9uIGdldE1hcmdpbnMoaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSB7XG5cdHZhciBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG5cblx0ZnVuY3Rpb24gbWFyZ2luRm9yUG9zaXRpb25zKHBvc2l0aW9ucykge1xuXHRcdHZhciBtYXJnaW4gPSB7bGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwfTtcblx0XHRwb3NpdGlvbnMuZm9yRWFjaChmdW5jdGlvbihwb3MpIHtcblx0XHRcdG1hcmdpbltwb3NdID0gTWF0aC5tYXgoY2hhcnRBcmVhW3Bvc10sIG1heFBhZGRpbmdbcG9zXSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG1hcmdpbjtcblx0fVxuXG5cdHJldHVybiBob3Jpem9udGFsXG5cdFx0PyBtYXJnaW5Gb3JQb3NpdGlvbnMoWydsZWZ0JywgJ3JpZ2h0J10pXG5cdFx0OiBtYXJnaW5Gb3JQb3NpdGlvbnMoWyd0b3AnLCAnYm90dG9tJ10pO1xufVxuXG5mdW5jdGlvbiBmaXRCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpIHtcblx0dmFyIHJlZml0Qm94ZXMgPSBbXTtcblx0dmFyIGksIGlsZW4sIGxheW91dCwgYm94LCByZWZpdCwgY2hhbmdlZDtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bGF5b3V0ID0gYm94ZXNbaV07XG5cdFx0Ym94ID0gbGF5b3V0LmJveDtcblxuXHRcdGJveC51cGRhdGUoXG5cdFx0XHRsYXlvdXQud2lkdGggfHwgY2hhcnRBcmVhLncsXG5cdFx0XHRsYXlvdXQuaGVpZ2h0IHx8IGNoYXJ0QXJlYS5oLFxuXHRcdFx0Z2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKVxuXHRcdCk7XG5cdFx0aWYgKHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCkpIHtcblx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0aWYgKHJlZml0Qm94ZXMubGVuZ3RoKSB7XG5cdFx0XHRcdC8vIERpbWVuc2lvbnMgY2hhbmdlZCBhbmQgdGhlcmUgd2VyZSBub24gZnVsbCB3aWR0aCBib3hlcyBiZWZvcmUgdGhpc1xuXHRcdFx0XHQvLyAtPiB3ZSBoYXZlIHRvIHJlZml0IHRob3NlXG5cdFx0XHRcdHJlZml0ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFib3guZnVsbFdpZHRoKSB7IC8vIGZ1bGxXaWR0aCBib3hlcyBkb24ndCBuZWVkIHRvIGJlIHJlLWZpdHRlZCBpbiBhbnkgY2FzZVxuXHRcdFx0cmVmaXRCb3hlcy5wdXNoKGxheW91dCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlZml0ID8gZml0Qm94ZXMocmVmaXRCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpIHx8IGNoYW5nZWQgOiBjaGFuZ2VkO1xufVxuXG5mdW5jdGlvbiBwbGFjZUJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcykge1xuXHR2YXIgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcblx0dmFyIHggPSBjaGFydEFyZWEueDtcblx0dmFyIHkgPSBjaGFydEFyZWEueTtcblx0dmFyIGksIGlsZW4sIGxheW91dCwgYm94O1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBib3hlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRsYXlvdXQgPSBib3hlc1tpXTtcblx0XHRib3ggPSBsYXlvdXQuYm94O1xuXHRcdGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuXHRcdFx0Ym94LmxlZnQgPSBib3guZnVsbFdpZHRoID8gdXNlclBhZGRpbmcubGVmdCA6IGNoYXJ0QXJlYS5sZWZ0O1xuXHRcdFx0Ym94LnJpZ2h0ID0gYm94LmZ1bGxXaWR0aCA/IHBhcmFtcy5vdXRlcldpZHRoIC0gdXNlclBhZGRpbmcucmlnaHQgOiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53O1xuXHRcdFx0Ym94LnRvcCA9IHk7XG5cdFx0XHRib3guYm90dG9tID0geSArIGJveC5oZWlnaHQ7XG5cdFx0XHRib3gud2lkdGggPSBib3gucmlnaHQgLSBib3gubGVmdDtcblx0XHRcdHkgPSBib3guYm90dG9tO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRib3gubGVmdCA9IHg7XG5cdFx0XHRib3gucmlnaHQgPSB4ICsgYm94LndpZHRoO1xuXHRcdFx0Ym94LnRvcCA9IGNoYXJ0QXJlYS50b3A7XG5cdFx0XHRib3guYm90dG9tID0gY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5oO1xuXHRcdFx0Ym94LmhlaWdodCA9IGJveC5ib3R0b20gLSBib3gudG9wO1xuXHRcdFx0eCA9IGJveC5yaWdodDtcblx0XHR9XG5cdH1cblxuXHRjaGFydEFyZWEueCA9IHg7XG5cdGNoYXJ0QXJlYS55ID0geTtcbn1cblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGxheW91dDoge1xuXHRcdHBhZGRpbmc6IHtcblx0XHRcdHRvcDogMCxcblx0XHRcdHJpZ2h0OiAwLFxuXHRcdFx0Ym90dG9tOiAwLFxuXHRcdFx0bGVmdDogMFxuXHRcdH1cblx0fVxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBJTGF5b3V0SXRlbVxuICogQHByb3Age3N0cmluZ30gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gaW4gdGhlIGNoYXJ0IGxheW91dC4gUG9zc2libGUgdmFsdWVzIGFyZVxuICogJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsIGFuZCAnY2hhcnRBcmVhJ1xuICogQHByb3Age251bWJlcn0gd2VpZ2h0IC0gVGhlIHdlaWdodCB1c2VkIHRvIHNvcnQgdGhlIGl0ZW0uIEhpZ2hlciB3ZWlnaHRzIGFyZSBmdXJ0aGVyIGF3YXkgZnJvbSB0aGUgY2hhcnQgYXJlYVxuICogQHByb3Age2Jvb2xlYW59IGZ1bGxXaWR0aCAtIGlmIHRydWUsIGFuZCB0aGUgaXRlbSBpcyBob3Jpem9udGFsLCB0aGVuIHB1c2ggdmVydGljYWwgYm94ZXMgZG93blxuICogQHByb3Age2Z1bmN0aW9ufSBpc0hvcml6b250YWwgLSByZXR1cm5zIHRydWUgaWYgdGhlIGxheW91dCBpdGVtIGlzIGhvcml6b250YWwgKGllLiB0b3Agb3IgYm90dG9tKVxuICogQHByb3Age2Z1bmN0aW9ufSB1cGRhdGUgLSBUYWtlcyB0d28gcGFyYW1ldGVyczogd2lkdGggYW5kIGhlaWdodC4gUmV0dXJucyBzaXplIG9mIGl0ZW1cbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2V0UGFkZGluZyAtICBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHBhZGRpbmcgb24gdGhlIGVkZ2VzXG4gKiBAcHJvcCB7bnVtYmVyfSB3aWR0aCAtIFdpZHRoIG9mIGl0ZW0uIE11c3QgYmUgdmFsaWQgYWZ0ZXIgdXBkYXRlKClcbiAqIEBwcm9wIHtudW1iZXJ9IGhlaWdodCAtIEhlaWdodCBvZiBpdGVtLiBNdXN0IGJlIHZhbGlkIGFmdGVyIHVwZGF0ZSgpXG4gKiBAcHJvcCB7bnVtYmVyfSBsZWZ0IC0gTGVmdCBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG4gKiBAcHJvcCB7bnVtYmVyfSB0b3AgLSBUb3AgZWRnZSBvZiB0aGUgaXRlbS4gU2V0IGJ5IGxheW91dCBzeXN0ZW0gYW5kIGNhbm5vdCBiZSB1c2VkIGluIHVwZGF0ZVxuICogQHByb3Age251bWJlcn0gcmlnaHQgLSBSaWdodCBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG4gKiBAcHJvcCB7bnVtYmVyfSBib3R0b20gLSBCb3R0b20gZWRnZSBvZiB0aGUgaXRlbS4gU2V0IGJ5IGxheW91dCBzeXN0ZW0gYW5kIGNhbm5vdCBiZSB1c2VkIGluIHVwZGF0ZVxuICovXG5cbi8vIFRoZSBsYXlvdXQgc2VydmljZSBpcyB2ZXJ5IHNlbGYgZXhwbGFuYXRvcnkuICBJdCdzIHJlc3BvbnNpYmxlIGZvciB0aGUgbGF5b3V0IHdpdGhpbiBhIGNoYXJ0LlxuLy8gU2NhbGVzLCBMZWdlbmRzIGFuZCBQbHVnaW5zIGFsbCByZWx5IG9uIHRoZSBsYXlvdXQgc2VydmljZSBhbmQgY2FuIGVhc2lseSByZWdpc3RlciB0byBiZSBwbGFjZWQgYW55d2hlcmUgdGhleSBuZWVkXG4vLyBJdCBpcyB0aGlzIHNlcnZpY2UncyByZXNwb25zaWJpbGl0eSBvZiBjYXJyeWluZyBvdXQgdGhhdCBsYXlvdXQuXG52YXIgY29yZV9sYXlvdXRzID0ge1xuXHRkZWZhdWx0czoge30sXG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVyIGEgYm94IHRvIGEgY2hhcnQuXG5cdCAqIEEgYm94IGlzIHNpbXBseSBhIHJlZmVyZW5jZSB0byBhbiBvYmplY3QgdGhhdCByZXF1aXJlcyBsYXlvdXQuIGVnLiBTY2FsZXMsIExlZ2VuZCwgVGl0bGUuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHRvIHVzZVxuXHQgKiBAcGFyYW0ge0lMYXlvdXRJdGVtfSBpdGVtIC0gdGhlIGl0ZW0gdG8gYWRkIHRvIGJlIGxheWVkIG91dFxuXHQgKi9cblx0YWRkQm94OiBmdW5jdGlvbihjaGFydCwgaXRlbSkge1xuXHRcdGlmICghY2hhcnQuYm94ZXMpIHtcblx0XHRcdGNoYXJ0LmJveGVzID0gW107XG5cdFx0fVxuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBpdGVtIHdpdGggZGVmYXVsdCB2YWx1ZXNcblx0XHRpdGVtLmZ1bGxXaWR0aCA9IGl0ZW0uZnVsbFdpZHRoIHx8IGZhbHNlO1xuXHRcdGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuXHRcdGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcblx0XHRpdGVtLl9sYXllcnMgPSBpdGVtLl9sYXllcnMgfHwgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gW3tcblx0XHRcdFx0ejogMCxcblx0XHRcdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aXRlbS5kcmF3LmFwcGx5KGl0ZW0sIGFyZ3VtZW50cyk7XG5cdFx0XHRcdH1cblx0XHRcdH1dO1xuXHRcdH07XG5cblx0XHRjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYSBsYXlvdXRJdGVtIGZyb20gYSBjaGFydFxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB0byByZW1vdmUgdGhlIGJveCBmcm9tXG5cdCAqIEBwYXJhbSB7SUxheW91dEl0ZW19IGxheW91dEl0ZW0gLSB0aGUgaXRlbSB0byByZW1vdmUgZnJvbSB0aGUgbGF5b3V0XG5cdCAqL1xuXHRyZW1vdmVCb3g6IGZ1bmN0aW9uKGNoYXJ0LCBsYXlvdXRJdGVtKSB7XG5cdFx0dmFyIGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y2hhcnQuYm94ZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldHMgKG9yIHVwZGF0ZXMpIG9wdGlvbnMgb24gdGhlIGdpdmVuIGBpdGVtYC5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgaW4gd2hpY2ggdGhlIGl0ZW0gbGl2ZXMgKG9yIHdpbGwgYmUgYWRkZWQgdG8pXG5cdCAqIEBwYXJhbSB7SUxheW91dEl0ZW19IGl0ZW0gLSB0aGUgaXRlbSB0byBjb25maWd1cmUgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuXHQgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIHRoZSBuZXcgaXRlbSBvcHRpb25zLlxuXHQgKi9cblx0Y29uZmlndXJlOiBmdW5jdGlvbihjaGFydCwgaXRlbSwgb3B0aW9ucykge1xuXHRcdHZhciBwcm9wcyA9IFsnZnVsbFdpZHRoJywgJ3Bvc2l0aW9uJywgJ3dlaWdodCddO1xuXHRcdHZhciBpbGVuID0gcHJvcHMubGVuZ3RoO1xuXHRcdHZhciBpID0gMDtcblx0XHR2YXIgcHJvcDtcblxuXHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbaV07XG5cdFx0XHRpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuXHRcdFx0XHRpdGVtW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEZpdHMgYm94ZXMgb2YgdGhlIGdpdmVuIGNoYXJ0IGludG8gdGhlIGdpdmVuIHNpemUgYnkgaGF2aW5nIGVhY2ggYm94IG1lYXN1cmUgaXRzZWxmXG5cdCAqIHRoZW4gcnVubmluZyBhIGZpdHRpbmcgYWxnb3JpdGhtXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIHRoZSB3aWR0aCB0byBmaXQgaW50b1xuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gdGhlIGhlaWdodCB0byBmaXQgaW50b1xuXHQgKi9cblx0dXBkYXRlOiBmdW5jdGlvbihjaGFydCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmICghY2hhcnQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgbGF5b3V0T3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMubGF5b3V0IHx8IHt9O1xuXHRcdHZhciBwYWRkaW5nID0gaGVscGVycyQxLm9wdGlvbnMudG9QYWRkaW5nKGxheW91dE9wdGlvbnMucGFkZGluZyk7XG5cblx0XHR2YXIgYXZhaWxhYmxlV2lkdGggPSB3aWR0aCAtIHBhZGRpbmcud2lkdGg7XG5cdFx0dmFyIGF2YWlsYWJsZUhlaWdodCA9IGhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0O1xuXHRcdHZhciBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuXHRcdHZhciB2ZXJ0aWNhbEJveGVzID0gYm94ZXMudmVydGljYWw7XG5cdFx0dmFyIGhvcml6b250YWxCb3hlcyA9IGJveGVzLmhvcml6b250YWw7XG5cblx0XHQvLyBFc3NlbnRpYWxseSB3ZSBub3cgaGF2ZSBhbnkgbnVtYmVyIG9mIGJveGVzIG9uIGVhY2ggb2YgdGhlIDQgc2lkZXMuXG5cdFx0Ly8gT3VyIGNhbnZhcyBsb29rcyBsaWtlIHRoZSBmb2xsb3dpbmcuXG5cdFx0Ly8gVGhlIGFyZWFzIEwxIGFuZCBMMiBhcmUgdGhlIGxlZnQgYXhlcy4gUjEgaXMgdGhlIHJpZ2h0IGF4aXMsIFQxIGlzIHRoZSB0b3AgYXhpcyBhbmRcblx0XHQvLyBCMSBpcyB0aGUgYm90dG9tIGF4aXNcblx0XHQvLyBUaGVyZSBhcmUgYWxzbyA0IHF1YWRyYW50LWxpa2UgbG9jYXRpb25zIChsZWZ0IHRvIHJpZ2h0IGluc3RlYWQgb2YgY2xvY2t3aXNlKSByZXNlcnZlZCBmb3IgY2hhcnQgb3ZlcmxheXNcblx0XHQvLyBUaGVzZSBsb2NhdGlvbnMgYXJlIHNpbmdsZS1ib3ggbG9jYXRpb25zIG9ubHksIHdoZW4gdHJ5aW5nIHRvIHJlZ2lzdGVyIGEgY2hhcnRBcmVhIGxvY2F0aW9uIHRoYXQgaXMgYWxyZWFkeSB0YWtlbixcblx0XHQvLyBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cblx0XHQvL1xuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgICAgICAgICAgICAgICBUMSAoRnVsbCBXaWR0aCkgICAgICAgICAgICAgICAgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICBUMiAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgICAgfC0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8IEMxIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEMyIHwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8LS0tLXwgICAgICAgICAgICAgICAgICAgICAgICAgICB8LS0tLXwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgTDEgfCBMMiB8ICAgICAgICAgICBDaGFydEFyZWEgKEMwKSAgICAgICAgICAgIHwgUjEgfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8LS0tLXwgICAgICAgICAgICAgICAgICAgICAgICAgICB8LS0tLXwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8IEMzIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEM0IHwgICAgfFxuXHRcdC8vIHwgICAgfC0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICBCMSAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgICAgICAgICAgICAgICBCMiAoRnVsbCBXaWR0aCkgICAgICAgICAgICAgICAgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vXG5cblx0XHR2YXIgcGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh7XG5cdFx0XHRvdXRlcldpZHRoOiB3aWR0aCxcblx0XHRcdG91dGVySGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRwYWRkaW5nOiBwYWRkaW5nLFxuXHRcdFx0YXZhaWxhYmxlV2lkdGg6IGF2YWlsYWJsZVdpZHRoLFxuXHRcdFx0dkJveE1heFdpZHRoOiBhdmFpbGFibGVXaWR0aCAvIDIgLyB2ZXJ0aWNhbEJveGVzLmxlbmd0aCxcblx0XHRcdGhCb3hNYXhIZWlnaHQ6IGF2YWlsYWJsZUhlaWdodCAvIDJcblx0XHR9KTtcblx0XHR2YXIgY2hhcnRBcmVhID0gZXh0ZW5kKHtcblx0XHRcdG1heFBhZGRpbmc6IGV4dGVuZCh7fSwgcGFkZGluZyksXG5cdFx0XHR3OiBhdmFpbGFibGVXaWR0aCxcblx0XHRcdGg6IGF2YWlsYWJsZUhlaWdodCxcblx0XHRcdHg6IHBhZGRpbmcubGVmdCxcblx0XHRcdHk6IHBhZGRpbmcudG9wXG5cdFx0fSwgcGFkZGluZyk7XG5cblx0XHRzZXRMYXlvdXREaW1zKHZlcnRpY2FsQm94ZXMuY29uY2F0KGhvcml6b250YWxCb3hlcyksIHBhcmFtcyk7XG5cblx0XHQvLyBGaXJzdCBmaXQgdmVydGljYWwgYm94ZXNcblx0XHRmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcyk7XG5cblx0XHQvLyBUaGVuIGZpdCBob3Jpem9udGFsIGJveGVzXG5cdFx0aWYgKGZpdEJveGVzKGhvcml6b250YWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpKSB7XG5cdFx0XHQvLyBpZiB0aGUgYXJlYSBjaGFuZ2VkLCByZS1maXQgdmVydGljYWwgYm94ZXNcblx0XHRcdGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zKTtcblx0XHR9XG5cblx0XHRoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSk7XG5cblx0XHQvLyBGaW5hbGx5IHBsYWNlIHRoZSBib3hlcyB0byBjb3JyZWN0IGNvb3JkaW5hdGVzXG5cdFx0cGxhY2VCb3hlcyhib3hlcy5sZWZ0QW5kVG9wLCBjaGFydEFyZWEsIHBhcmFtcyk7XG5cblx0XHQvLyBNb3ZlIHRvIG9wcG9zaXRlIHNpZGUgb2YgY2hhcnRcblx0XHRjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcblx0XHRjaGFydEFyZWEueSArPSBjaGFydEFyZWEuaDtcblxuXHRcdHBsYWNlQm94ZXMoYm94ZXMucmlnaHRBbmRCb3R0b20sIGNoYXJ0QXJlYSwgcGFyYW1zKTtcblxuXHRcdGNoYXJ0LmNoYXJ0QXJlYSA9IHtcblx0XHRcdGxlZnQ6IGNoYXJ0QXJlYS5sZWZ0LFxuXHRcdFx0dG9wOiBjaGFydEFyZWEudG9wLFxuXHRcdFx0cmlnaHQ6IGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLncsXG5cdFx0XHRib3R0b206IGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuaFxuXHRcdH07XG5cblx0XHQvLyBGaW5hbGx5IHVwZGF0ZSBib3hlcyBpbiBjaGFydEFyZWEgKHJhZGlhbCBzY2FsZSBmb3IgZXhhbXBsZSlcblx0XHRoZWxwZXJzJDEuZWFjaChib3hlcy5jaGFydEFyZWEsIGZ1bmN0aW9uKGxheW91dCkge1xuXHRcdFx0dmFyIGJveCA9IGxheW91dC5ib3g7XG5cdFx0XHRleHRlbmQoYm94LCBjaGFydC5jaGFydEFyZWEpO1xuXHRcdFx0Ym94LnVwZGF0ZShjaGFydEFyZWEudywgY2hhcnRBcmVhLmgpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG4vKipcbiAqIFBsYXRmb3JtIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIChtaW5pbWFsKS5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTkxI2lzc3VlY29tbWVudC0zMTk1NzU5MzlcbiAqL1xuXG52YXIgcGxhdGZvcm1fYmFzaWMgPSB7XG5cdGFjcXVpcmVDb250ZXh0OiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcblx0XHRcdC8vIFN1cHBvcnQgZm9yIGFueSBvYmplY3QgYXNzb2NpYXRlZCB0byBhIGNhbnZhcyAoaW5jbHVkaW5nIGEgY29udGV4dDJkKVxuXHRcdFx0aXRlbSA9IGl0ZW0uY2FudmFzO1xuXHRcdH1cblxuXHRcdHJldHVybiBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKSB8fCBudWxsO1xuXHR9XG59O1xuXG52YXIgcGxhdGZvcm1fZG9tID0gXCIvKlxcbiAqIERPTSBlbGVtZW50IHJlbmRlcmluZyBkZXRlY3Rpb25cXG4gKiBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9kZXRlY3Qtbm9kZS1pbnNlcnRpb25cXG4gKi9cXG5Aa2V5ZnJhbWVzIGNoYXJ0anMtcmVuZGVyLWFuaW1hdGlvbiB7XFxuXFx0ZnJvbSB7IG9wYWNpdHk6IDAuOTk7IH1cXG5cXHR0byB7IG9wYWNpdHk6IDE7IH1cXG59XFxuXFxuLmNoYXJ0anMtcmVuZGVyLW1vbml0b3Ige1xcblxcdGFuaW1hdGlvbjogY2hhcnRqcy1yZW5kZXItYW5pbWF0aW9uIDAuMDAxcztcXG59XFxuXFxuLypcXG4gKiBET00gZWxlbWVudCByZXNpemluZyBkZXRlY3Rpb25cXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFyY2ovY3NzLWVsZW1lbnQtcXVlcmllc1xcbiAqL1xcbi5jaGFydGpzLXNpemUtbW9uaXRvcixcXG4uY2hhcnRqcy1zaXplLW1vbml0b3ItZXhwYW5kLFxcbi5jaGFydGpzLXNpemUtbW9uaXRvci1zaHJpbmsge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHRkaXJlY3Rpb246IGx0cjtcXG5cXHRsZWZ0OiAwO1xcblxcdHRvcDogMDtcXG5cXHRyaWdodDogMDtcXG5cXHRib3R0b206IDA7XFxuXFx0b3ZlcmZsb3c6IGhpZGRlbjtcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXG5cXHR2aXNpYmlsaXR5OiBoaWRkZW47XFxuXFx0ei1pbmRleDogLTE7XFxufVxcblxcbi5jaGFydGpzLXNpemUtbW9uaXRvci1leHBhbmQgPiBkaXYge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR3aWR0aDogMTAwMDAwMHB4O1xcblxcdGhlaWdodDogMTAwMDAwMHB4O1xcblxcdGxlZnQ6IDA7XFxuXFx0dG9wOiAwO1xcbn1cXG5cXG4uY2hhcnRqcy1zaXplLW1vbml0b3Itc2hyaW5rID4gZGl2IHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0d2lkdGg6IDIwMCU7XFxuXFx0aGVpZ2h0OiAyMDAlO1xcblxcdGxlZnQ6IDA7XFxuXFx0dG9wOiAwO1xcbn1cXG5cIjtcblxudmFyIHBsYXRmb3JtX2RvbSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuJ2RlZmF1bHQnOiBwbGF0Zm9ybV9kb21cbn0pO1xuXG52YXIgc3R5bGVzaGVldCA9IGdldENqc0V4cG9ydEZyb21OYW1lc3BhY2UocGxhdGZvcm1fZG9tJDEpO1xuXG52YXIgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xudmFyIENTU19QUkVGSVggPSAnY2hhcnRqcy0nO1xudmFyIENTU19TSVpFX01PTklUT1IgPSBDU1NfUFJFRklYICsgJ3NpemUtbW9uaXRvcic7XG52YXIgQ1NTX1JFTkRFUl9NT05JVE9SID0gQ1NTX1BSRUZJWCArICdyZW5kZXItbW9uaXRvcic7XG52YXIgQ1NTX1JFTkRFUl9BTklNQVRJT04gPSBDU1NfUFJFRklYICsgJ3JlbmRlci1hbmltYXRpb24nO1xudmFyIEFOSU1BVElPTl9TVEFSVF9FVkVOVFMgPSBbJ2FuaW1hdGlvbnN0YXJ0JywgJ3dlYmtpdEFuaW1hdGlvblN0YXJ0J107XG5cbi8qKlxuICogRE9NIGV2ZW50IHR5cGVzIC0+IENoYXJ0LmpzIGV2ZW50IHR5cGVzLlxuICogTm90ZTogb25seSBldmVudHMgd2l0aCBkaWZmZXJlbnQgdHlwZXMgYXJlIG1hcHBlZC5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzXG4gKi9cbnZhciBFVkVOVF9UWVBFUyA9IHtcblx0dG91Y2hzdGFydDogJ21vdXNlZG93bicsXG5cdHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG5cdHRvdWNoZW5kOiAnbW91c2V1cCcsXG5cdHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuXHRwb2ludGVyZG93bjogJ21vdXNlZG93bicsXG5cdHBvaW50ZXJtb3ZlOiAnbW91c2Vtb3ZlJyxcblx0cG9pbnRlcnVwOiAnbW91c2V1cCcsXG5cdHBvaW50ZXJsZWF2ZTogJ21vdXNlb3V0Jyxcblx0cG9pbnRlcm91dDogJ21vdXNlb3V0J1xufTtcblxuLyoqXG4gKiBUaGUgXCJ1c2VkXCIgc2l6ZSBpcyB0aGUgZmluYWwgdmFsdWUgb2YgYSBkaW1lbnNpb24gcHJvcGVydHkgYWZ0ZXIgYWxsIGNhbGN1bGF0aW9ucyBoYXZlXG4gKiBiZWVuIHBlcmZvcm1lZC4gVGhpcyBtZXRob2QgdXNlcyB0aGUgY29tcHV0ZWQgc3R5bGUgb2YgYGVsZW1lbnRgIGJ1dCByZXR1cm5zIHVuZGVmaW5lZFxuICogaWYgdGhlIGNvbXB1dGVkIHN0eWxlIGlzIG5vdCBleHByZXNzZWQgaW4gcGl4ZWxzLiBUaGF0IGNhbiBoYXBwZW4gaW4gc29tZSBjYXNlcyB3aGVyZVxuICogYGVsZW1lbnRgIGhhcyBhIHNpemUgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBhbmQgdGhpcyBsYXN0IG9uZSBpcyBub3QgeWV0IGRpc3BsYXllZCxcbiAqIGZvciBleGFtcGxlIGJlY2F1c2Ugb2YgYGRpc3BsYXk6IG5vbmVgIG9uIGEgcGFyZW50IG5vZGUuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91c2VkX3ZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaXplIGluIHBpeGVscyBvciB1bmRlZmluZWQgaWYgdW5rbm93bi5cbiAqL1xuZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG5cdHZhciB2YWx1ZSA9IGhlbHBlcnMkMS5nZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG5cdHZhciBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG5cdHJldHVybiBtYXRjaGVzID8gTnVtYmVyKG1hdGNoZXNbMV0pIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRoZSBjYW52YXMgc3R5bGUgYW5kIHJlbmRlciBzaXplIHdpdGhvdXQgbW9kaWZ5aW5nIHRoZSBjYW52YXMgZGlzcGxheSBzaXplLFxuICogc2luY2UgcmVzcG9uc2l2ZW5lc3MgaXMgaGFuZGxlZCBieSB0aGUgY29udHJvbGxlci5yZXNpemUoKSBtZXRob2QuIFRoZSBjb25maWcgaXMgdXNlZFxuICogdG8gZGV0ZXJtaW5lIHRoZSBhc3BlY3QgcmF0aW8gdG8gYXBwbHkgaW4gY2FzZSBubyBleHBsaWNpdCBoZWlnaHQgaGFzIGJlZW4gc3BlY2lmaWVkLlxuICovXG5mdW5jdGlvbiBpbml0Q2FudmFzKGNhbnZhcywgY29uZmlnKSB7XG5cdHZhciBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcblxuXHQvLyBOT1RFKFNCKSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpICE9PSBjYW52YXMud2lkdGg6IGluIHRoZSBmaXJzdCBjYXNlIGl0XG5cdC8vIHJldHVybnMgbnVsbCBvciAnJyBpZiBubyBleHBsaWNpdCB2YWx1ZSBoYXMgYmVlbiBzZXQgdG8gdGhlIGNhbnZhcyBhdHRyaWJ1dGUuXG5cdHZhciByZW5kZXJIZWlnaHQgPSBjYW52YXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcblx0dmFyIHJlbmRlcldpZHRoID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcblxuXHQvLyBDaGFydC5qcyBtb2RpZmllcyBzb21lIGNhbnZhcyB2YWx1ZXMgdGhhdCB3ZSB3YW50IHRvIHJlc3RvcmUgb24gZGVzdHJveVxuXHRjYW52YXNbRVhQQU5ET19LRVldID0ge1xuXHRcdGluaXRpYWw6IHtcblx0XHRcdGhlaWdodDogcmVuZGVySGVpZ2h0LFxuXHRcdFx0d2lkdGg6IHJlbmRlcldpZHRoLFxuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0ZGlzcGxheTogc3R5bGUuZGlzcGxheSxcblx0XHRcdFx0aGVpZ2h0OiBzdHlsZS5oZWlnaHQsXG5cdFx0XHRcdHdpZHRoOiBzdHlsZS53aWR0aFxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvLyBGb3JjZSBjYW52YXMgdG8gZGlzcGxheSBhcyBibG9jayB0byBhdm9pZCBleHRyYSBzcGFjZSBjYXVzZWQgYnkgaW5saW5lXG5cdC8vIGVsZW1lbnRzLCB3aGljaCB3b3VsZCBpbnRlcmZlcmUgd2l0aCB0aGUgcmVzcG9uc2l2ZSByZXNpemUgcHJvY2Vzcy5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI1Mzhcblx0c3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcblxuXHRpZiAocmVuZGVyV2lkdGggPT09IG51bGwgfHwgcmVuZGVyV2lkdGggPT09ICcnKSB7XG5cdFx0dmFyIGRpc3BsYXlXaWR0aCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICd3aWR0aCcpO1xuXHRcdGlmIChkaXNwbGF5V2lkdGggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y2FudmFzLndpZHRoID0gZGlzcGxheVdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdGlmIChyZW5kZXJIZWlnaHQgPT09IG51bGwgfHwgcmVuZGVySGVpZ2h0ID09PSAnJykge1xuXHRcdGlmIChjYW52YXMuc3R5bGUuaGVpZ2h0ID09PSAnJykge1xuXHRcdFx0Ly8gSWYgbm8gZXhwbGljaXQgcmVuZGVyIGhlaWdodCBhbmQgc3R5bGUgaGVpZ2h0LCBsZXQncyBhcHBseSB0aGUgYXNwZWN0IHJhdGlvLFxuXHRcdFx0Ly8gd2hpY2ggb25lIGNhbiBiZSBzcGVjaWZpZWQgYnkgdGhlIHVzZXIgYnV0IGFsc28gYnkgY2hhcnRzIGFzIGRlZmF1bHQgb3B0aW9uXG5cdFx0XHQvLyAoaS5lLiBvcHRpb25zLmFzcGVjdFJhdGlvKS4gSWYgbm90IHNwZWNpZmllZCwgdXNlIGNhbnZhcyBhc3BlY3QgcmF0aW8gb2YgMi5cblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoY29uZmlnLm9wdGlvbnMuYXNwZWN0UmF0aW8gfHwgMik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBkaXNwbGF5SGVpZ2h0ID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ2hlaWdodCcpO1xuXHRcdFx0aWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjYW52YXM7XG59XG5cbi8qKlxuICogRGV0ZWN0cyBzdXBwb3J0IGZvciBvcHRpb25zIG9iamVjdCBhcmd1bWVudCBpbiBhZGRFdmVudExpc3RlbmVyLlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjU2FmZWx5X2RldGVjdGluZ19vcHRpb25fc3VwcG9ydFxuICogQHByaXZhdGVcbiAqL1xudmFyIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSAoZnVuY3Rpb24oKSB7XG5cdHZhciBzdXBwb3J0cyA9IGZhbHNlO1xuXHR0cnkge1xuXHRcdHZhciBvcHRpb25zID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnZXR0ZXItcmV0dXJuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdXBwb3J0cyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2UnLCBudWxsLCBvcHRpb25zKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3Jcblx0fVxuXHRyZXR1cm4gc3VwcG9ydHM7XG59KCkpO1xuXG4vLyBEZWZhdWx0IHBhc3NpdmUgdG8gdHJ1ZSBhcyBleHBlY3RlZCBieSBDaHJvbWUgZm9yICd0b3VjaHN0YXJ0JyBhbmQgJ3RvdWNoZW5kJyBldmVudHMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNDI4N1xudmFyIGV2ZW50TGlzdGVuZXJPcHRpb25zID0gc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA/IHtwYXNzaXZlOiB0cnVlfSA6IGZhbHNlO1xuXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuXHRub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIobm9kZSwgdHlwZSwgbGlzdGVuZXIpIHtcblx0bm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50KHR5cGUsIGNoYXJ0LCB4LCB5LCBuYXRpdmVFdmVudCkge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IHR5cGUsXG5cdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdG5hdGl2ZTogbmF0aXZlRXZlbnQgfHwgbnVsbCxcblx0XHR4OiB4ICE9PSB1bmRlZmluZWQgPyB4IDogbnVsbCxcblx0XHR5OiB5ICE9PSB1bmRlZmluZWQgPyB5IDogbnVsbCxcblx0fTtcbn1cblxuZnVuY3Rpb24gZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkge1xuXHR2YXIgdHlwZSA9IEVWRU5UX1RZUEVTW2V2ZW50LnR5cGVdIHx8IGV2ZW50LnR5cGU7XG5cdHZhciBwb3MgPSBoZWxwZXJzJDEuZ2V0UmVsYXRpdmVQb3NpdGlvbihldmVudCwgY2hhcnQpO1xuXHRyZXR1cm4gY3JlYXRlRXZlbnQodHlwZSwgY2hhcnQsIHBvcy54LCBwb3MueSwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcpIHtcblx0dmFyIHRpY2tpbmcgPSBmYWxzZTtcblx0dmFyIGFyZ3MgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0dGhpc0FyZyA9IHRoaXNBcmcgfHwgdGhpcztcblxuXHRcdGlmICghdGlja2luZykge1xuXHRcdFx0dGlja2luZyA9IHRydWU7XG5cdFx0XHRoZWxwZXJzJDEucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRpY2tpbmcgPSBmYWxzZTtcblx0XHRcdFx0Zm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURpdihjbHMpIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdGVsLmNsYXNzTmFtZSA9IGNscyB8fCAnJztcblx0cmV0dXJuIGVsO1xufVxuXG4vLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbWFyY2ovY3NzLWVsZW1lbnQtcXVlcmllc1xuZnVuY3Rpb24gY3JlYXRlUmVzaXplcihoYW5kbGVyKSB7XG5cdHZhciBtYXhTaXplID0gMTAwMDAwMDtcblxuXHQvLyBOT1RFKFNCKSBEb24ndCB1c2UgaW5uZXJIVE1MIGJlY2F1c2UgaXQgY291bGQgYmUgY29uc2lkZXJlZCB1bnNhZmUuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81OTAyXG5cdHZhciByZXNpemVyID0gY3JlYXRlRGl2KENTU19TSVpFX01PTklUT1IpO1xuXHR2YXIgZXhwYW5kID0gY3JlYXRlRGl2KENTU19TSVpFX01PTklUT1IgKyAnLWV4cGFuZCcpO1xuXHR2YXIgc2hyaW5rID0gY3JlYXRlRGl2KENTU19TSVpFX01PTklUT1IgKyAnLXNocmluaycpO1xuXG5cdGV4cGFuZC5hcHBlbmRDaGlsZChjcmVhdGVEaXYoKSk7XG5cdHNocmluay5hcHBlbmRDaGlsZChjcmVhdGVEaXYoKSk7XG5cblx0cmVzaXplci5hcHBlbmRDaGlsZChleHBhbmQpO1xuXHRyZXNpemVyLmFwcGVuZENoaWxkKHNocmluayk7XG5cdHJlc2l6ZXIuX3Jlc2V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0ZXhwYW5kLnNjcm9sbExlZnQgPSBtYXhTaXplO1xuXHRcdGV4cGFuZC5zY3JvbGxUb3AgPSBtYXhTaXplO1xuXHRcdHNocmluay5zY3JvbGxMZWZ0ID0gbWF4U2l6ZTtcblx0XHRzaHJpbmsuc2Nyb2xsVG9wID0gbWF4U2l6ZTtcblx0fTtcblxuXHR2YXIgb25TY3JvbGwgPSBmdW5jdGlvbigpIHtcblx0XHRyZXNpemVyLl9yZXNldCgpO1xuXHRcdGhhbmRsZXIoKTtcblx0fTtcblxuXHRhZGRMaXN0ZW5lcihleHBhbmQsICdzY3JvbGwnLCBvblNjcm9sbC5iaW5kKGV4cGFuZCwgJ2V4cGFuZCcpKTtcblx0YWRkTGlzdGVuZXIoc2hyaW5rLCAnc2Nyb2xsJywgb25TY3JvbGwuYmluZChzaHJpbmssICdzaHJpbmsnKSk7XG5cblx0cmV0dXJuIHJlc2l6ZXI7XG59XG5cbi8vIGh0dHBzOi8vZGF2aWR3YWxzaC5uYW1lL2RldGVjdC1ub2RlLWluc2VydGlvblxuZnVuY3Rpb24gd2F0Y2hGb3JSZW5kZXIobm9kZSwgaGFuZGxlcikge1xuXHR2YXIgZXhwYW5kbyA9IG5vZGVbRVhQQU5ET19LRVldIHx8IChub2RlW0VYUEFORE9fS0VZXSA9IHt9KTtcblx0dmFyIHByb3h5ID0gZXhwYW5kby5yZW5kZXJQcm94eSA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5hbmltYXRpb25OYW1lID09PSBDU1NfUkVOREVSX0FOSU1BVElPTikge1xuXHRcdFx0aGFuZGxlcigpO1xuXHRcdH1cblx0fTtcblxuXHRoZWxwZXJzJDEuZWFjaChBTklNQVRJT05fU1RBUlRfRVZFTlRTLCBmdW5jdGlvbih0eXBlKSB7XG5cdFx0YWRkTGlzdGVuZXIobm9kZSwgdHlwZSwgcHJveHkpO1xuXHR9KTtcblxuXHQvLyAjNDczNzogQ2hyb21lIG1pZ2h0IHNraXAgdGhlIENTUyBhbmltYXRpb24gd2hlbiB0aGUgQ1NTX1JFTkRFUl9NT05JVE9SIGNsYXNzXG5cdC8vIGlzIHJlbW92ZWQgdGhlbiBhZGRlZCBiYWNrIGltbWVkaWF0ZWx5IChzYW1lIGFuaW1hdGlvbiBmcmFtZT8pLiBBY2Nlc3NpbmcgdGhlXG5cdC8vIGBvZmZzZXRQYXJlbnRgIHByb3BlcnR5IHdpbGwgZm9yY2UgYSByZWZsb3cgYW5kIHJlLWV2YWx1YXRlIHRoZSBDU1MgYW5pbWF0aW9uLlxuXHQvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvNWQ1MmZiMDgxYjM1NzBjODFlM2EjYm94LW1ldHJpY3Ncblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQ3Mzdcblx0ZXhwYW5kby5yZWZsb3cgPSAhIW5vZGUub2Zmc2V0UGFyZW50O1xuXG5cdG5vZGUuY2xhc3NMaXN0LmFkZChDU1NfUkVOREVSX01PTklUT1IpO1xufVxuXG5mdW5jdGlvbiB1bndhdGNoRm9yUmVuZGVyKG5vZGUpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0dmFyIHByb3h5ID0gZXhwYW5kby5yZW5kZXJQcm94eTtcblxuXHRpZiAocHJveHkpIHtcblx0XHRoZWxwZXJzJDEuZWFjaChBTklNQVRJT05fU1RBUlRfRVZFTlRTLCBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHRyZW1vdmVMaXN0ZW5lcihub2RlLCB0eXBlLCBwcm94eSk7XG5cdFx0fSk7XG5cblx0XHRkZWxldGUgZXhwYW5kby5yZW5kZXJQcm94eTtcblx0fVxuXG5cdG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDU1NfUkVOREVSX01PTklUT1IpO1xufVxuXG5mdW5jdGlvbiBhZGRSZXNpemVMaXN0ZW5lcihub2RlLCBsaXN0ZW5lciwgY2hhcnQpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCAobm9kZVtFWFBBTkRPX0tFWV0gPSB7fSk7XG5cblx0Ly8gTGV0J3Mga2VlcCB0cmFjayBvZiB0aGlzIGFkZGVkIHJlc2l6ZXIgYW5kIHRodXMgYXZvaWQgRE9NIHF1ZXJ5IHdoZW4gcmVtb3ZpbmcgaXQuXG5cdHZhciByZXNpemVyID0gZXhwYW5kby5yZXNpemVyID0gY3JlYXRlUmVzaXplcih0aHJvdHRsZWQoZnVuY3Rpb24oKSB7XG5cdFx0aWYgKGV4cGFuZG8ucmVzaXplcikge1xuXHRcdFx0dmFyIGNvbnRhaW5lciA9IGNoYXJ0Lm9wdGlvbnMubWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiBub2RlLnBhcmVudE5vZGU7XG5cdFx0XHR2YXIgdyA9IGNvbnRhaW5lciA/IGNvbnRhaW5lci5jbGllbnRXaWR0aCA6IDA7XG5cdFx0XHRsaXN0ZW5lcihjcmVhdGVFdmVudCgncmVzaXplJywgY2hhcnQpKTtcblx0XHRcdGlmIChjb250YWluZXIgJiYgY29udGFpbmVyLmNsaWVudFdpZHRoIDwgdyAmJiBjaGFydC5jYW52YXMpIHtcblx0XHRcdFx0Ly8gSWYgdGhlIGNvbnRhaW5lciBzaXplIHNocmFuayBkdXJpbmcgY2hhcnQgcmVzaXplLCBsZXQncyBhc3N1bWVcblx0XHRcdFx0Ly8gc2Nyb2xsYmFyIGFwcGVhcmVkLiBTbyB3ZSByZXNpemUgYWdhaW4gd2l0aCB0aGUgc2Nyb2xsYmFyIHZpc2libGUgLVxuXHRcdFx0XHQvLyBlZmZlY3RpdmVseSBtYWtpbmcgY2hhcnQgc21hbGxlciBhbmQgdGhlIHNjcm9sbGJhciBoaWRkZW4gYWdhaW4uXG5cdFx0XHRcdC8vIEJlY2F1c2Ugd2UgYXJlIGluc2lkZSBgdGhyb3R0bGVkYCwgYW5kIGN1cnJlbnRseSBgdGlja2luZ2AsIHNjcm9sbFxuXHRcdFx0XHQvLyBldmVudHMgYXJlIGlnbm9yZWQgZHVyaW5nIHRoaXMgd2hvbGUgMiByZXNpemUgcHJvY2Vzcy5cblx0XHRcdFx0Ly8gSWYgd2UgYXNzdW1lZCB3cm9uZyBhbmQgc29tZXRoaW5nIGVsc2UgaGFwcGVuZWQsIHdlIGFyZSByZXNpemluZ1xuXHRcdFx0XHQvLyB0d2ljZSBpbiBhIGZyYW1lIChwb3RlbnRpYWwgcGVyZm9ybWFuY2UgaXNzdWUpXG5cdFx0XHRcdGxpc3RlbmVyKGNyZWF0ZUV2ZW50KCdyZXNpemUnLCBjaGFydCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkpO1xuXG5cdC8vIFRoZSByZXNpemVyIG5lZWRzIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBub2RlIHBhcmVudCwgc28gd2UgZmlyc3QgbmVlZCB0byBiZVxuXHQvLyBzdXJlIHRoYXQgYG5vZGVgIGlzIGF0dGFjaGVkIHRvIHRoZSBET00gYmVmb3JlIGluamVjdGluZyB0aGUgcmVzaXplciBlbGVtZW50LlxuXHR3YXRjaEZvclJlbmRlcihub2RlLCBmdW5jdGlvbigpIHtcblx0XHRpZiAoZXhwYW5kby5yZXNpemVyKSB7XG5cdFx0XHR2YXIgY29udGFpbmVyID0gbm9kZS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIgIT09IHJlc2l6ZXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRjb250YWluZXIuaW5zZXJ0QmVmb3JlKHJlc2l6ZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGNvbnRhaW5lciBzaXplIG1pZ2h0IGhhdmUgY2hhbmdlZCwgbGV0J3MgcmVzZXQgdGhlIHJlc2l6ZXIgc3RhdGUuXG5cdFx0XHRyZXNpemVyLl9yZXNldCgpO1xuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZUxpc3RlbmVyKG5vZGUpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0dmFyIHJlc2l6ZXIgPSBleHBhbmRvLnJlc2l6ZXI7XG5cblx0ZGVsZXRlIGV4cGFuZG8ucmVzaXplcjtcblx0dW53YXRjaEZvclJlbmRlcihub2RlKTtcblxuXHRpZiAocmVzaXplciAmJiByZXNpemVyLnBhcmVudE5vZGUpIHtcblx0XHRyZXNpemVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVzaXplcik7XG5cdH1cbn1cblxuLyoqXG4gKiBJbmplY3RzIENTUyBzdHlsZXMgaW5saW5lIGlmIHRoZSBzdHlsZXMgYXJlIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gKiBAcGFyYW0ge0hUTUxEb2N1bWVudHxTaGFkb3dSb290fSByb290Tm9kZSAtIHRoZSBub2RlIHRvIGNvbnRhaW4gdGhlIDxzdHlsZT4uXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzIC0gdGhlIENTUyB0byBiZSBpbmplY3RlZC5cbiAqL1xuZnVuY3Rpb24gaW5qZWN0Q1NTKHJvb3ROb2RlLCBjc3MpIHtcblx0Ly8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzM5MjIxMzlcblx0dmFyIGV4cGFuZG8gPSByb290Tm9kZVtFWFBBTkRPX0tFWV0gfHwgKHJvb3ROb2RlW0VYUEFORE9fS0VZXSA9IHt9KTtcblx0aWYgKCFleHBhbmRvLmNvbnRhaW5zU3R5bGVzKSB7XG5cdFx0ZXhwYW5kby5jb250YWluc1N0eWxlcyA9IHRydWU7XG5cdFx0Y3NzID0gJy8qIENoYXJ0LmpzICovXFxuJyArIGNzcztcblx0XHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHRcdHJvb3ROb2RlLmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fVxufVxuXG52YXIgcGxhdGZvcm1fZG9tJDIgPSB7XG5cdC8qKlxuXHQgKiBXaGVuIGB0cnVlYCwgcHJldmVudHMgdGhlIGF1dG9tYXRpYyBpbmplY3Rpb24gb2YgdGhlIHN0eWxlc2hlZXQgcmVxdWlyZWQgdG9cblx0ICogY29ycmVjdGx5IGRldGVjdCB3aGVuIHRoZSBjaGFydCBpcyBhZGRlZCB0byB0aGUgRE9NIGFuZCB0aGVuIHJlc2l6ZWQuIFRoaXNcblx0ICogc3dpdGNoIGhhcyBiZWVuIGFkZGVkIHRvIGFsbG93IGV4dGVybmFsIHN0eWxlc2hlZXQgKGBkaXN0L0NoYXJ0KC5taW4pPy5qc2ApXG5cdCAqIHRvIGJlIG1hbnVhbGx5IGltcG9ydGVkIHRvIG1ha2UgdGhpcyBsaWJyYXJ5IGNvbXBhdGlibGUgd2l0aCBhbnkgQ1NQLlxuXHQgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzUyMDhcblx0ICovXG5cdGRpc2FibGVDU1NJbmplY3Rpb246IGZhbHNlLFxuXG5cdC8qKlxuXHQgKiBUaGlzIHByb3BlcnR5IGhvbGRzIHdoZXRoZXIgdGhpcyBwbGF0Zm9ybSBpcyBlbmFibGVkIGZvciB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cblx0ICogQ3VycmVudGx5IHVzZWQgYnkgcGxhdGZvcm0uanMgdG8gc2VsZWN0IHRoZSBwcm9wZXIgaW1wbGVtZW50YXRpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZW5hYmxlZDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgcmVzb3VyY2VzIHRoYXQgZGVwZW5kIG9uIHBsYXRmb3JtIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyAtIFRoZSBDYW52YXMgZWxlbWVudC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9lbnN1cmVMb2FkZWQ6IGZ1bmN0aW9uKGNhbnZhcykge1xuXHRcdGlmICghdGhpcy5kaXNhYmxlQ1NTSW5qZWN0aW9uKSB7XG5cdFx0XHQvLyBJZiB0aGUgY2FudmFzIGlzIGluIGEgc2hhZG93IERPTSwgdGhlbiB0aGUgc3R5bGVzIG11c3QgYWxzbyBiZSBpbnNlcnRlZFxuXHRcdFx0Ly8gaW50byB0aGUgc2FtZSBzaGFkb3cgRE9NLlxuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU3NjNcblx0XHRcdHZhciByb290ID0gY2FudmFzLmdldFJvb3ROb2RlID8gY2FudmFzLmdldFJvb3ROb2RlKCkgOiBkb2N1bWVudDtcblx0XHRcdHZhciB0YXJnZXROb2RlID0gcm9vdC5ob3N0ID8gcm9vdCA6IGRvY3VtZW50LmhlYWQ7XG5cdFx0XHRpbmplY3RDU1ModGFyZ2V0Tm9kZSwgc3R5bGVzaGVldCk7XG5cdFx0fVxuXHR9LFxuXG5cdGFjcXVpcmVDb250ZXh0OiBmdW5jdGlvbihpdGVtLCBjb25maWcpIHtcblx0XHRpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbSk7XG5cdFx0fSBlbHNlIGlmIChpdGVtLmxlbmd0aCkge1xuXHRcdFx0Ly8gU3VwcG9ydCBmb3IgYXJyYXkgYmFzZWQgcXVlcmllcyAoc3VjaCBhcyBqUXVlcnkpXG5cdFx0XHRpdGVtID0gaXRlbVswXTtcblx0XHR9XG5cblx0XHRpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuXHRcdFx0Ly8gU3VwcG9ydCBmb3IgYW55IG9iamVjdCBhc3NvY2lhdGVkIHRvIGEgY2FudmFzIChpbmNsdWRpbmcgYSBjb250ZXh0MmQpXG5cdFx0XHRpdGVtID0gaXRlbS5jYW52YXM7XG5cdFx0fVxuXG5cdFx0Ly8gVG8gcHJldmVudCBjYW52YXMgZmluZ2VycHJpbnRpbmcsIHNvbWUgYWRkLW9ucyB1bmRlZmluZSB0aGUgZ2V0Q29udGV4dFxuXHRcdC8vIG1ldGhvZCwgZm9yIGV4YW1wbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ra2Fwc25lci9DYW52YXNCbG9ja2VyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI4MDdcblx0XHR2YXIgY29udGV4dCA9IGl0ZW0gJiYgaXRlbS5nZXRDb250ZXh0ICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKTtcblxuXHRcdC8vIGBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50L0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRGAgZmFpbHMgd2hlbiB0aGUgaXRlbSBpc1xuXHRcdC8vIGluc2lkZSBhbiBpZnJhbWUgb3Igd2hlbiBydW5uaW5nIGluIGEgcHJvdGVjdGVkIGVudmlyb25tZW50LiBXZSBjb3VsZCBndWVzcyB0aGVcblx0XHQvLyB0eXBlcyBmcm9tIHRoZWlyIHRvU3RyaW5nKCkgdmFsdWUgYnV0IGxldCdzIGtlZXAgdGhpbmdzIGZsZXhpYmxlIGFuZCBhc3N1bWUgaXQnc1xuXHRcdC8vIGEgc3VmZmljaWVudCBjb25kaXRpb24gaWYgdGhlIGl0ZW0gaGFzIGEgY29udGV4dDJEIHdoaWNoIGhhcyBpdGVtIGFzIGBjYW52YXNgLlxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zODg3XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQxMDJcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNDE1MlxuXHRcdGlmIChjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzID09PSBpdGVtKSB7XG5cdFx0XHQvLyBMb2FkIHBsYXRmb3JtIHJlc291cmNlcyBvbiBmaXJzdCBjaGFydCBjcmVhdGlvbiwgdG8gbWFrZSBpdCBwb3NzaWJsZSB0b1xuXHRcdFx0Ly8gaW1wb3J0IHRoZSBsaWJyYXJ5IGJlZm9yZSBzZXR0aW5nIHBsYXRmb3JtIG9wdGlvbnMuXG5cdFx0XHR0aGlzLl9lbnN1cmVMb2FkZWQoaXRlbSk7XG5cdFx0XHRpbml0Q2FudmFzKGl0ZW0sIGNvbmZpZyk7XG5cdFx0XHRyZXR1cm4gY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHRyZWxlYXNlQ29udGV4dDogZnVuY3Rpb24oY29udGV4dCkge1xuXHRcdHZhciBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcblx0XHRpZiAoIWNhbnZhc1tFWFBBTkRPX0tFWV0pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgaW5pdGlhbCA9IGNhbnZhc1tFWFBBTkRPX0tFWV0uaW5pdGlhbDtcblx0XHRbJ2hlaWdodCcsICd3aWR0aCddLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuXHRcdFx0dmFyIHZhbHVlID0gaW5pdGlhbFtwcm9wXTtcblx0XHRcdGlmIChoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcblx0XHRcdFx0Y2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aGVscGVycyQxLmVhY2goaW5pdGlhbC5zdHlsZSB8fCB7fSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuXHRcdFx0Y2FudmFzLnN0eWxlW2tleV0gPSB2YWx1ZTtcblx0XHR9KTtcblxuXHRcdC8vIFRoZSBjYW52YXMgcmVuZGVyIHNpemUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWQgKGFuZCB0aHVzIHRoZSBzdGF0ZSBzdGFjayBkaXNjYXJkZWQpLFxuXHRcdC8vIHdlIGNhbid0IHVzZSBzYXZlKCkgYW5kIHJlc3RvcmUoKSB0byByZXN0b3JlIHRoZSBpbml0aWFsIHN0YXRlLiBTbyBtYWtlIHN1cmUgdGhhdCBhdFxuXHRcdC8vIGxlYXN0IHRoZSBjYW52YXMgY29udGV4dCBpcyByZXNldCB0byB0aGUgZGVmYXVsdCBzdGF0ZSBieSBzZXR0aW5nIHRoZSBjYW52YXMgd2lkdGguXG5cdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvV0QtaHRtbDUtMjAxMTA1MjUvdGhlLWNhbnZhcy1lbGVtZW50Lmh0bWxcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ25cblx0XHRjYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG5cblx0XHRkZWxldGUgY2FudmFzW0VYUEFORE9fS0VZXTtcblx0fSxcblxuXHRhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcblx0XHR2YXIgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuXHRcdGlmICh0eXBlID09PSAncmVzaXplJykge1xuXHRcdFx0Ly8gTm90ZTogdGhlIHJlc2l6ZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cblx0XHRcdGFkZFJlc2l6ZUxpc3RlbmVyKGNhbnZhcywgbGlzdGVuZXIsIGNoYXJ0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZXhwYW5kbyA9IGxpc3RlbmVyW0VYUEFORE9fS0VZXSB8fCAobGlzdGVuZXJbRVhQQU5ET19LRVldID0ge30pO1xuXHRcdHZhciBwcm94aWVzID0gZXhwYW5kby5wcm94aWVzIHx8IChleHBhbmRvLnByb3hpZXMgPSB7fSk7XG5cdFx0dmFyIHByb3h5ID0gcHJveGllc1tjaGFydC5pZCArICdfJyArIHR5cGVdID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGxpc3RlbmVyKGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpKTtcblx0XHR9O1xuXG5cdFx0YWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG5cdH0sXG5cblx0cmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHRpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcblx0XHRcdC8vIE5vdGU6IHRoZSByZXNpemUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXG5cdFx0XHRyZW1vdmVSZXNpemVMaXN0ZW5lcihjYW52YXMpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBleHBhbmRvID0gbGlzdGVuZXJbRVhQQU5ET19LRVldIHx8IHt9O1xuXHRcdHZhciBwcm94aWVzID0gZXhwYW5kby5wcm94aWVzIHx8IHt9O1xuXHRcdHZhciBwcm94eSA9IHByb3hpZXNbY2hhcnQuaWQgKyAnXycgKyB0eXBlXTtcblx0XHRpZiAoIXByb3h5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0cmVtb3ZlTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG5cdH1cbn07XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgRXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciBpbnN0ZWFkLlxuICogRXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciBjb21wYXRpYmlsaXR5OiBDaHJvbWUsIE9wZXJhIDcsIFNhZmFyaSwgRkYxLjUrLCBJRTkrXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5hZGRFdmVudFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycyQxLmFkZEV2ZW50ID0gYWRkTGlzdGVuZXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBFdmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyIGluc3RlYWQuXG4gKiBFdmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyIGNvbXBhdGliaWxpdHk6IENocm9tZSwgT3BlcmEgNywgU2FmYXJpLCBGRjEuNSssIElFOStcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L3JlbW92ZUV2ZW50TGlzdGVuZXJcbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLnJlbW92ZUV2ZW50XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzJDEucmVtb3ZlRXZlbnQgPSByZW1vdmVMaXN0ZW5lcjtcblxuLy8gQFRPRE8gTWFrZSBwb3NzaWJsZSB0byBzZWxlY3QgYW5vdGhlciBwbGF0Zm9ybSBhdCBidWlsZCB0aW1lLlxudmFyIGltcGxlbWVudGF0aW9uID0gcGxhdGZvcm1fZG9tJDIuX2VuYWJsZWQgPyBwbGF0Zm9ybV9kb20kMiA6IHBsYXRmb3JtX2Jhc2ljO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQucGxhdGZvcm1cbiAqIEBzZWUgaHR0cHM6Ly9jaGFydGpzLmdpdGJvb2tzLmlvL3Byb3Bvc2Fscy9jb250ZW50L1BsYXRmb3JtLmh0bWxcbiAqIEBzaW5jZSAyLjQuMFxuICovXG52YXIgcGxhdGZvcm0gPSBoZWxwZXJzJDEuZXh0ZW5kKHtcblx0LyoqXG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogQ2FsbGVkIGF0IGNoYXJ0IGNvbnN0cnVjdGlvbiB0aW1lLCByZXR1cm5zIGEgY29udGV4dDJkIGluc3RhbmNlIGltcGxlbWVudGluZ1xuXHQgKiB0aGUgW1czQyBDYW52YXMgMkQgQ29udGV4dCBBUEkgc3RhbmRhcmRde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yZGNvbnRleHQvfS5cblx0ICogQHBhcmFtIHsqfSBpdGVtIC0gVGhlIG5hdGl2ZSBpdGVtIGZyb20gd2hpY2ggdG8gYWNxdWlyZSBjb250ZXh0IChwbGF0Zm9ybSBzcGVjaWZpYylcblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBUaGUgY2hhcnQgb3B0aW9uc1xuXHQgKiBAcmV0dXJucyB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0MmQgaW5zdGFuY2Vcblx0ICovXG5cdGFjcXVpcmVDb250ZXh0OiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBDYWxsZWQgYXQgY2hhcnQgZGVzdHJ1Y3Rpb24gdGltZSwgcmVsZWFzZXMgYW55IHJlc291cmNlcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZXh0XG5cdCAqIHByZXZpb3VzbHkgcmV0dXJuZWQgYnkgdGhlIGFjcXVpcmVDb250ZXh0KCkgbWV0aG9kLlxuXHQgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCAtIFRoZSBjb250ZXh0MmQgaW5zdGFuY2Vcblx0ICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIG1ldGhvZCBzdWNjZWVkZWQsIGVsc2UgZmFsc2Vcblx0ICovXG5cdHJlbGVhc2VDb250ZXh0OiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciBvbiB0aGUgZ2l2ZW4gY2hhcnQuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gQ2hhcnQgZnJvbSB3aGljaCB0byBsaXN0ZW4gZm9yIGV2ZW50XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlICh7QGxpbmsgSUV2ZW50fSkgdHlwZSB0byBsaXN0ZW4gZm9yXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gUmVjZWl2ZXMgYSBub3RpZmljYXRpb24gKGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHNcblx0ICogdGhlIHtAbGluayBJRXZlbnR9IGludGVyZmFjZSkgd2hlbiBhbiBldmVudCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgb2NjdXJzLlxuXHQgKi9cblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIGxpc3RlbmVyIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCB3aXRoIGFkZEV2ZW50TGlzdGVuZXIuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gQ2hhcnQgZnJvbSB3aGljaCB0byByZW1vdmUgdGhlIGxpc3RlbmVyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlICh7QGxpbmsgSUV2ZW50fSkgdHlwZSB0byByZW1vdmVcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50IHRhcmdldC5cblx0ICovXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKCkge31cblxufSwgaW1wbGVtZW50YXRpb24pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0cGx1Z2luczoge31cbn0pO1xuXG4vKipcbiAqIFRoZSBwbHVnaW4gc2VydmljZSBzaW5nbGV0b25cbiAqIEBuYW1lc3BhY2UgQ2hhcnQucGx1Z2luc1xuICogQHNpbmNlIDIuMS4wXG4gKi9cbnZhciBjb3JlX3BsdWdpbnMgPSB7XG5cdC8qKlxuXHQgKiBHbG9iYWxseSByZWdpc3RlcmVkIHBsdWdpbnMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcGx1Z2luczogW10sXG5cblx0LyoqXG5cdCAqIFRoaXMgaWRlbnRpZmllciBpcyB1c2VkIHRvIGludmFsaWRhdGUgdGhlIGRlc2NyaXB0b3JzIGNhY2hlIGF0dGFjaGVkIHRvIGVhY2ggY2hhcnRcblx0ICogd2hlbiBhIGdsb2JhbCBwbHVnaW4gaXMgcmVnaXN0ZXJlZCBvciB1bnJlZ2lzdGVyZWQuIEluIHRoaXMgY2FzZSwgdGhlIGNhY2hlIElEIGlzXG5cdCAqIGluY3JlbWVudGVkIGFuZCBkZXNjcmlwdG9ycyBhcmUgcmVnZW5lcmF0ZWQgZHVyaW5nIGZvbGxvd2luZyBBUEkgY2FsbHMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY2FjaGVJZDogMCxcblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIHRoZSBnaXZlbiBwbHVnaW4ocykgaWYgbm90IGFscmVhZHkgcmVnaXN0ZXJlZC5cblx0ICogQHBhcmFtIHtJUGx1Z2luW118SVBsdWdpbn0gcGx1Z2lucyBwbHVnaW4gaW5zdGFuY2UocykuXG5cdCAqL1xuXHRyZWdpc3RlcjogZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdHZhciBwID0gdGhpcy5fcGx1Z2lucztcblx0XHQoW10pLmNvbmNhdChwbHVnaW5zKS5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuXHRcdFx0aWYgKHAuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuXHRcdFx0XHRwLnB1c2gocGx1Z2luKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX2NhY2hlSWQrKztcblx0fSxcblxuXHQvKipcblx0ICogVW5yZWdpc3RlcnMgdGhlIGdpdmVuIHBsdWdpbihzKSBvbmx5IGlmIHJlZ2lzdGVyZWQuXG5cdCAqIEBwYXJhbSB7SVBsdWdpbltdfElQbHVnaW59IHBsdWdpbnMgcGx1Z2luIGluc3RhbmNlKHMpLlxuXHQgKi9cblx0dW5yZWdpc3RlcjogZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdHZhciBwID0gdGhpcy5fcGx1Z2lucztcblx0XHQoW10pLmNvbmNhdChwbHVnaW5zKS5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuXHRcdFx0dmFyIGlkeCA9IHAuaW5kZXhPZihwbHVnaW4pO1xuXHRcdFx0aWYgKGlkeCAhPT0gLTEpIHtcblx0XHRcdFx0cC5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX2NhY2hlSWQrKztcblx0fSxcblxuXHQvKipcblx0ICogUmVtb3ZlIGFsbCByZWdpc3RlcmVkIHBsdWdpbnMuXG5cdCAqIEBzaW5jZSAyLjEuNVxuXHQgKi9cblx0Y2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3BsdWdpbnMgPSBbXTtcblx0XHR0aGlzLl9jYWNoZUlkKys7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG51bWJlciBvZiByZWdpc3RlcmVkIHBsdWdpbnM/XG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9XG5cdCAqIEBzaW5jZSAyLjEuNVxuXHQgKi9cblx0Y291bnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wbHVnaW5zLmxlbmd0aDtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhbGwgcmVnaXN0ZXJlZCBwbHVnaW4gaW5zdGFuY2VzLlxuXHQgKiBAcmV0dXJucyB7SVBsdWdpbltdfSBhcnJheSBvZiBwbHVnaW4gb2JqZWN0cy5cblx0ICogQHNpbmNlIDIuMS41XG5cdCAqL1xuXHRnZXRBbGw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wbHVnaW5zO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDYWxscyBlbmFibGVkIHBsdWdpbnMgZm9yIGBjaGFydGAgb24gdGhlIHNwZWNpZmllZCBob29rIGFuZCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuXHQgKiBUaGlzIG1ldGhvZCBpbW1lZGlhdGVseSByZXR1cm5zIGFzIHNvb24gYXMgYSBwbHVnaW4gZXhwbGljaXRseSByZXR1cm5zIGZhbHNlLiBUaGVcblx0ICogcmV0dXJuZWQgdmFsdWUgY2FuIGJlIHVzZWQsIGZvciBpbnN0YW5jZSwgdG8gaW50ZXJydXB0IHRoZSBjdXJyZW50IGFjdGlvbi5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UgZm9yIHdoaWNoIHBsdWdpbnMgc2hvdWxkIGJlIGNhbGxlZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIG1ldGhvZCB0byBjYWxsIChlLmcuICdiZWZvcmVVcGRhdGUnKS5cblx0ICogQHBhcmFtIHtBcnJheX0gW2FyZ3NdIC0gRXh0cmEgYXJndW1lbnRzIHRvIGFwcGx5IHRvIHRoZSBob29rIGNhbGwuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBmYWxzZSBpZiBhbnkgb2YgdGhlIHBsdWdpbnMgcmV0dXJuIGZhbHNlLCBlbHNlIHJldHVybnMgdHJ1ZS5cblx0ICovXG5cdG5vdGlmeTogZnVuY3Rpb24oY2hhcnQsIGhvb2ssIGFyZ3MpIHtcblx0XHR2YXIgZGVzY3JpcHRvcnMgPSB0aGlzLmRlc2NyaXB0b3JzKGNoYXJ0KTtcblx0XHR2YXIgaWxlbiA9IGRlc2NyaXB0b3JzLmxlbmd0aDtcblx0XHR2YXIgaSwgZGVzY3JpcHRvciwgcGx1Z2luLCBwYXJhbXMsIG1ldGhvZDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1tpXTtcblx0XHRcdHBsdWdpbiA9IGRlc2NyaXB0b3IucGx1Z2luO1xuXHRcdFx0bWV0aG9kID0gcGx1Z2luW2hvb2tdO1xuXHRcdFx0aWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cGFyYW1zID0gW2NoYXJ0XS5jb25jYXQoYXJncyB8fCBbXSk7XG5cdFx0XHRcdHBhcmFtcy5wdXNoKGRlc2NyaXB0b3Iub3B0aW9ucyk7XG5cdFx0XHRcdGlmIChtZXRob2QuYXBwbHkocGx1Z2luLCBwYXJhbXMpID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGRlc2NyaXB0b3JzIG9mIGVuYWJsZWQgcGx1Z2lucyBmb3IgdGhlIGdpdmVuIGNoYXJ0LlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0W119IFt7IHBsdWdpbiwgb3B0aW9ucyB9XVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZGVzY3JpcHRvcnM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGNhY2hlID0gY2hhcnQuJHBsdWdpbnMgfHwgKGNoYXJ0LiRwbHVnaW5zID0ge30pO1xuXHRcdGlmIChjYWNoZS5pZCA9PT0gdGhpcy5fY2FjaGVJZCkge1xuXHRcdFx0cmV0dXJuIGNhY2hlLmRlc2NyaXB0b3JzO1xuXHRcdH1cblxuXHRcdHZhciBwbHVnaW5zID0gW107XG5cdFx0dmFyIGRlc2NyaXB0b3JzID0gW107XG5cdFx0dmFyIGNvbmZpZyA9IChjaGFydCAmJiBjaGFydC5jb25maWcpIHx8IHt9O1xuXHRcdHZhciBvcHRpb25zID0gKGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnBsdWdpbnMpIHx8IHt9O1xuXG5cdFx0dGhpcy5fcGx1Z2lucy5jb25jYXQoY29uZmlnLnBsdWdpbnMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24ocGx1Z2luKSB7XG5cdFx0XHR2YXIgaWR4ID0gcGx1Z2lucy5pbmRleE9mKHBsdWdpbik7XG5cdFx0XHRpZiAoaWR4ICE9PSAtMSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBpZCA9IHBsdWdpbi5pZDtcblx0XHRcdHZhciBvcHRzID0gb3B0aW9uc1tpZF07XG5cdFx0XHRpZiAob3B0cyA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRvcHRzID0gaGVscGVycyQxLmNsb25lKGNvcmVfZGVmYXVsdHMuZ2xvYmFsLnBsdWdpbnNbaWRdKTtcblx0XHRcdH1cblxuXHRcdFx0cGx1Z2lucy5wdXNoKHBsdWdpbik7XG5cdFx0XHRkZXNjcmlwdG9ycy5wdXNoKHtcblx0XHRcdFx0cGx1Z2luOiBwbHVnaW4sXG5cdFx0XHRcdG9wdGlvbnM6IG9wdHMgfHwge31cblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0Y2FjaGUuZGVzY3JpcHRvcnMgPSBkZXNjcmlwdG9ycztcblx0XHRjYWNoZS5pZCA9IHRoaXMuX2NhY2hlSWQ7XG5cdFx0cmV0dXJuIGRlc2NyaXB0b3JzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBJbnZhbGlkYXRlcyBjYWNoZSBmb3IgdGhlIGdpdmVuIGNoYXJ0OiBkZXNjcmlwdG9ycyBob2xkIGEgcmVmZXJlbmNlIG9uIHBsdWdpbiBvcHRpb24sXG5cdCAqIGJ1dCBpbiBzb21lIGNhc2VzLCB0aGlzIHJlZmVyZW5jZSBjYW4gYmUgY2hhbmdlZCBieSB0aGUgdXNlciB3aGVuIHVwZGF0aW5nIG9wdGlvbnMuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81MTExI2lzc3VlY29tbWVudC0zNTU5MzQxNjdcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9pbnZhbGlkYXRlOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdGRlbGV0ZSBjaGFydC4kcGx1Z2lucztcblx0fVxufTtcblxudmFyIGNvcmVfc2NhbGVTZXJ2aWNlID0ge1xuXHQvLyBTY2FsZSByZWdpc3RyYXRpb24gb2JqZWN0LiBFeHRlbnNpb25zIGNhbiByZWdpc3RlciBuZXcgc2NhbGUgdHlwZXMgKHN1Y2ggYXMgbG9nIG9yIERCIHNjYWxlcykgYW5kIHRoZW5cblx0Ly8gdXNlIHRoZSBuZXcgY2hhcnQgb3B0aW9ucyB0byBncmFiIHRoZSBjb3JyZWN0IHNjYWxlXG5cdGNvbnN0cnVjdG9yczoge30sXG5cdC8vIFVzZSBhIHJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBzbyB0aGF0IHdlIGNhbiBtb3ZlIHRvIGFuIEVTNiBtYXAgd2hlbiB3ZSBubyBsb25nZXIgbmVlZCB0byBzdXBwb3J0XG5cdC8vIG9sZCBicm93c2Vyc1xuXG5cdC8vIFNjYWxlIGNvbmZpZyBkZWZhdWx0c1xuXHRkZWZhdWx0czoge30sXG5cdHJlZ2lzdGVyU2NhbGVUeXBlOiBmdW5jdGlvbih0eXBlLCBzY2FsZUNvbnN0cnVjdG9yLCBzY2FsZURlZmF1bHRzKSB7XG5cdFx0dGhpcy5jb25zdHJ1Y3RvcnNbdHlwZV0gPSBzY2FsZUNvbnN0cnVjdG9yO1xuXHRcdHRoaXMuZGVmYXVsdHNbdHlwZV0gPSBoZWxwZXJzJDEuY2xvbmUoc2NhbGVEZWZhdWx0cyk7XG5cdH0sXG5cdGdldFNjYWxlQ29uc3RydWN0b3I6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcnMuaGFzT3duUHJvcGVydHkodHlwZSkgPyB0aGlzLmNvbnN0cnVjdG9yc1t0eXBlXSA6IHVuZGVmaW5lZDtcblx0fSxcblx0Z2V0U2NhbGVEZWZhdWx0czogZnVuY3Rpb24odHlwZSkge1xuXHRcdC8vIFJldHVybiB0aGUgc2NhbGUgZGVmYXVsdHMgbWVyZ2VkIHdpdGggdGhlIGdsb2JhbCBzZXR0aW5ncyBzbyB0aGF0IHdlIGFsd2F5cyB1c2UgdGhlIGxhdGVzdCBvbmVzXG5cdFx0cmV0dXJuIHRoaXMuZGVmYXVsdHMuaGFzT3duUHJvcGVydHkodHlwZSkgPyBoZWxwZXJzJDEubWVyZ2Uoe30sIFtjb3JlX2RlZmF1bHRzLnNjYWxlLCB0aGlzLmRlZmF1bHRzW3R5cGVdXSkgOiB7fTtcblx0fSxcblx0dXBkYXRlU2NhbGVEZWZhdWx0czogZnVuY3Rpb24odHlwZSwgYWRkaXRpb25zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAobWUuZGVmYXVsdHMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcblx0XHRcdG1lLmRlZmF1bHRzW3R5cGVdID0gaGVscGVycyQxLmV4dGVuZChtZS5kZWZhdWx0c1t0eXBlXSwgYWRkaXRpb25zKTtcblx0XHR9XG5cdH0sXG5cdGFkZFNjYWxlc1RvTGF5b3V0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdC8vIEFkZHMgZWFjaCBzY2FsZSB0byB0aGUgY2hhcnQuYm94ZXMgYXJyYXkgdG8gYmUgc2l6ZWQgYWNjb3JkaW5nbHlcblx0XHRoZWxwZXJzJDEuZWFjaChjaGFydC5zY2FsZXMsIGZ1bmN0aW9uKHNjYWxlKSB7XG5cdFx0XHQvLyBTZXQgSUxheW91dEl0ZW0gcGFyYW1ldGVycyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdHNjYWxlLmZ1bGxXaWR0aCA9IHNjYWxlLm9wdGlvbnMuZnVsbFdpZHRoO1xuXHRcdFx0c2NhbGUucG9zaXRpb24gPSBzY2FsZS5vcHRpb25zLnBvc2l0aW9uO1xuXHRcdFx0c2NhbGUud2VpZ2h0ID0gc2NhbGUub3B0aW9ucy53ZWlnaHQ7XG5cdFx0XHRjb3JlX2xheW91dHMuYWRkQm94KGNoYXJ0LCBzY2FsZSk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQ4ID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xudmFyIGdldFJ0bEhlbHBlciA9IGhlbHBlcnMkMS5ydGwuZ2V0UnRsQWRhcHRlcjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdHRvb2x0aXBzOiB7XG5cdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRjdXN0b206IG51bGwsXG5cdFx0bW9kZTogJ25lYXJlc3QnLFxuXHRcdHBvc2l0aW9uOiAnYXZlcmFnZScsXG5cdFx0aW50ZXJzZWN0OiB0cnVlLFxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG5cdFx0dGl0bGVGb250U3R5bGU6ICdib2xkJyxcblx0XHR0aXRsZVNwYWNpbmc6IDIsXG5cdFx0dGl0bGVNYXJnaW5Cb3R0b206IDYsXG5cdFx0dGl0bGVGb250Q29sb3I6ICcjZmZmJyxcblx0XHR0aXRsZUFsaWduOiAnbGVmdCcsXG5cdFx0Ym9keVNwYWNpbmc6IDIsXG5cdFx0Ym9keUZvbnRDb2xvcjogJyNmZmYnLFxuXHRcdGJvZHlBbGlnbjogJ2xlZnQnLFxuXHRcdGZvb3RlckZvbnRTdHlsZTogJ2JvbGQnLFxuXHRcdGZvb3RlclNwYWNpbmc6IDIsXG5cdFx0Zm9vdGVyTWFyZ2luVG9wOiA2LFxuXHRcdGZvb3RlckZvbnRDb2xvcjogJyNmZmYnLFxuXHRcdGZvb3RlckFsaWduOiAnbGVmdCcsXG5cdFx0eVBhZGRpbmc6IDYsXG5cdFx0eFBhZGRpbmc6IDYsXG5cdFx0Y2FyZXRQYWRkaW5nOiAyLFxuXHRcdGNhcmV0U2l6ZTogNSxcblx0XHRjb3JuZXJSYWRpdXM6IDYsXG5cdFx0bXVsdGlLZXlCYWNrZ3JvdW5kOiAnI2ZmZicsXG5cdFx0ZGlzcGxheUNvbG9yczogdHJ1ZSxcblx0XHRib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuXHRcdGJvcmRlcldpZHRoOiAwLFxuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRiZWZvcmVUaXRsZTogaGVscGVycyQxLm5vb3AsXG5cdFx0XHR0aXRsZTogZnVuY3Rpb24odG9vbHRpcEl0ZW1zLCBkYXRhKSB7XG5cdFx0XHRcdHZhciB0aXRsZSA9ICcnO1xuXHRcdFx0XHR2YXIgbGFiZWxzID0gZGF0YS5sYWJlbHM7XG5cdFx0XHRcdHZhciBsYWJlbENvdW50ID0gbGFiZWxzID8gbGFiZWxzLmxlbmd0aCA6IDA7XG5cblx0XHRcdFx0aWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0dmFyIGl0ZW0gPSB0b29sdGlwSXRlbXNbMF07XG5cdFx0XHRcdFx0aWYgKGl0ZW0ubGFiZWwpIHtcblx0XHRcdFx0XHRcdHRpdGxlID0gaXRlbS5sYWJlbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGl0ZW0ueExhYmVsKSB7XG5cdFx0XHRcdFx0XHR0aXRsZSA9IGl0ZW0ueExhYmVsO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobGFiZWxDb3VudCA+IDAgJiYgaXRlbS5pbmRleCA8IGxhYmVsQ291bnQpIHtcblx0XHRcdFx0XHRcdHRpdGxlID0gbGFiZWxzW2l0ZW0uaW5kZXhdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0aXRsZTtcblx0XHRcdH0sXG5cdFx0XHRhZnRlclRpdGxlOiBoZWxwZXJzJDEubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRiZWZvcmVCb2R5OiBoZWxwZXJzJDEubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0XHRcdGJlZm9yZUxhYmVsOiBoZWxwZXJzJDEubm9vcCxcblx0XHRcdGxhYmVsOiBmdW5jdGlvbih0b29sdGlwSXRlbSwgZGF0YSkge1xuXHRcdFx0XHR2YXIgbGFiZWwgPSBkYXRhLmRhdGFzZXRzW3Rvb2x0aXBJdGVtLmRhdGFzZXRJbmRleF0ubGFiZWwgfHwgJyc7XG5cblx0XHRcdFx0aWYgKGxhYmVsKSB7XG5cdFx0XHRcdFx0bGFiZWwgKz0gJzogJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWhlbHBlcnMkMS5pc051bGxPclVuZGVmKHRvb2x0aXBJdGVtLnZhbHVlKSkge1xuXHRcdFx0XHRcdGxhYmVsICs9IHRvb2x0aXBJdGVtLnZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxhYmVsICs9IHRvb2x0aXBJdGVtLnlMYWJlbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWxDb2xvcjogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcblx0XHRcdFx0dmFyIGFjdGl2ZUVsZW1lbnQgPSBtZXRhLmRhdGFbdG9vbHRpcEl0ZW0uaW5kZXhdO1xuXHRcdFx0XHR2YXIgdmlldyA9IGFjdGl2ZUVsZW1lbnQuX3ZpZXc7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I6IHZpZXcuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiB2aWV3LmJhY2tncm91bmRDb2xvclxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblx0XHRcdGxhYmVsVGV4dENvbG9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX29wdGlvbnMuYm9keUZvbnRDb2xvcjtcblx0XHRcdH0sXG5cdFx0XHRhZnRlckxhYmVsOiBoZWxwZXJzJDEubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRhZnRlckJvZHk6IGhlbHBlcnMkMS5ub29wLFxuXG5cdFx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtcywgZGF0YSlcblx0XHRcdGJlZm9yZUZvb3RlcjogaGVscGVycyQxLm5vb3AsXG5cdFx0XHRmb290ZXI6IGhlbHBlcnMkMS5ub29wLFxuXHRcdFx0YWZ0ZXJGb290ZXI6IGhlbHBlcnMkMS5ub29wXG5cdFx0fVxuXHR9XG59KTtcblxudmFyIHBvc2l0aW9uZXJzID0ge1xuXHQvKipcblx0ICogQXZlcmFnZSBtb2RlIHBsYWNlcyB0aGUgdG9vbHRpcCBhdCB0aGUgYXZlcmFnZSBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudHMgc2hvd25cblx0ICogQGZ1bmN0aW9uIENoYXJ0LlRvb2x0aXAucG9zaXRpb25lcnMuYXZlcmFnZVxuXHQgKiBAcGFyYW0gZWxlbWVudHMge0NoYXJ0RWxlbWVudFtdfSB0aGUgZWxlbWVudHMgYmVpbmcgZGlzcGxheWVkIGluIHRoZSB0b29sdGlwXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IHRvb2x0aXAgcG9zaXRpb25cblx0ICovXG5cdGF2ZXJhZ2U6IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG5cdFx0aWYgKCFlbGVtZW50cy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgaSwgbGVuO1xuXHRcdHZhciB4ID0gMDtcblx0XHR2YXIgeSA9IDA7XG5cdFx0dmFyIGNvdW50ID0gMDtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHR2YXIgZWwgPSBlbGVtZW50c1tpXTtcblx0XHRcdGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG5cdFx0XHRcdHZhciBwb3MgPSBlbC50b29sdGlwUG9zaXRpb24oKTtcblx0XHRcdFx0eCArPSBwb3MueDtcblx0XHRcdFx0eSArPSBwb3MueTtcblx0XHRcdFx0Kytjb3VudDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogeCAvIGNvdW50LFxuXHRcdFx0eTogeSAvIGNvdW50XG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0cyB0aGUgdG9vbHRpcCBwb3NpdGlvbiBuZWFyZXN0IG9mIHRoZSBpdGVtIG5lYXJlc3QgdG8gdGhlIGV2ZW50IHBvc2l0aW9uXG5cdCAqIEBmdW5jdGlvbiBDaGFydC5Ub29sdGlwLnBvc2l0aW9uZXJzLm5lYXJlc3Rcblx0ICogQHBhcmFtIGVsZW1lbnRzIHtDaGFydC5FbGVtZW50W119IHRoZSB0b29sdGlwIGVsZW1lbnRzXG5cdCAqIEBwYXJhbSBldmVudFBvc2l0aW9uIHtvYmplY3R9IHRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgaW4gY2FudmFzIGNvb3JkaW5hdGVzXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSB0b29sdGlwIHBvc2l0aW9uXG5cdCAqL1xuXHRuZWFyZXN0OiBmdW5jdGlvbihlbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuXHRcdHZhciB4ID0gZXZlbnRQb3NpdGlvbi54O1xuXHRcdHZhciB5ID0gZXZlbnRQb3NpdGlvbi55O1xuXHRcdHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHR2YXIgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHR2YXIgZWwgPSBlbGVtZW50c1tpXTtcblx0XHRcdGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG5cdFx0XHRcdHZhciBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuXHRcdFx0XHR2YXIgZCA9IGhlbHBlcnMkMS5kaXN0YW5jZUJldHdlZW5Qb2ludHMoZXZlbnRQb3NpdGlvbiwgY2VudGVyKTtcblxuXHRcdFx0XHRpZiAoZCA8IG1pbkRpc3RhbmNlKSB7XG5cdFx0XHRcdFx0bWluRGlzdGFuY2UgPSBkO1xuXHRcdFx0XHRcdG5lYXJlc3RFbGVtZW50ID0gZWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobmVhcmVzdEVsZW1lbnQpIHtcblx0XHRcdHZhciB0cCA9IG5lYXJlc3RFbGVtZW50LnRvb2x0aXBQb3NpdGlvbigpO1xuXHRcdFx0eCA9IHRwLng7XG5cdFx0XHR5ID0gdHAueTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogeCxcblx0XHRcdHk6IHlcblx0XHR9O1xuXHR9XG59O1xuXG4vLyBIZWxwZXIgdG8gcHVzaCBvciBjb25jYXQgYmFzZWQgb24gaWYgdGhlIDJuZCBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb3Igbm90XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG5cdGlmICh0b1B1c2gpIHtcblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkodG9QdXNoKSkge1xuXHRcdFx0Ly8gYmFzZSA9IGJhc2UuY29uY2F0KHRvUHVzaCk7XG5cdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRiYXNlLnB1c2godG9QdXNoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYmFzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFycmF5IG9mIHN0cmluZ3Mgc3BsaXQgYnkgbmV3bGluZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNwbGl0IGJ5IG5ld2xpbmUuXG4gKiBAcmV0dXJucyB7c3RyaW5nW119IHZhbHVlIGlmIG5ld2xpbmUgcHJlc2VudCAtIFJldHVybmVkIGZyb20gU3RyaW5nIHNwbGl0KCkgbWV0aG9kXG4gKiBAZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcblx0aWYgKCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cblxuXG4vKipcbiAqIFByaXZhdGUgaGVscGVyIHRvIGNyZWF0ZSBhIHRvb2x0aXAgaXRlbSBtb2RlbFxuICogQHBhcmFtIGVsZW1lbnQgLSB0aGUgY2hhcnQgZWxlbWVudCAocG9pbnQsIGFyYywgYmFyKSB0byBjcmVhdGUgdGhlIHRvb2x0aXAgaXRlbSBmb3JcbiAqIEByZXR1cm4gbmV3IHRvb2x0aXAgaXRlbVxuICovXG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwSXRlbShlbGVtZW50KSB7XG5cdHZhciB4U2NhbGUgPSBlbGVtZW50Ll94U2NhbGU7XG5cdHZhciB5U2NhbGUgPSBlbGVtZW50Ll95U2NhbGUgfHwgZWxlbWVudC5fc2NhbGU7IC8vIGhhbmRsZSByYWRhciB8fCBwb2xhckFyZWEgY2hhcnRzXG5cdHZhciBpbmRleCA9IGVsZW1lbnQuX2luZGV4O1xuXHR2YXIgZGF0YXNldEluZGV4ID0gZWxlbWVudC5fZGF0YXNldEluZGV4O1xuXHR2YXIgY29udHJvbGxlciA9IGVsZW1lbnQuX2NoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcblx0dmFyIGluZGV4U2NhbGUgPSBjb250cm9sbGVyLl9nZXRJbmRleFNjYWxlKCk7XG5cdHZhciB2YWx1ZVNjYWxlID0gY29udHJvbGxlci5fZ2V0VmFsdWVTY2FsZSgpO1xuXG5cdHJldHVybiB7XG5cdFx0eExhYmVsOiB4U2NhbGUgPyB4U2NhbGUuZ2V0TGFiZWxGb3JJbmRleChpbmRleCwgZGF0YXNldEluZGV4KSA6ICcnLFxuXHRcdHlMYWJlbDogeVNjYWxlID8geVNjYWxlLmdldExhYmVsRm9ySW5kZXgoaW5kZXgsIGRhdGFzZXRJbmRleCkgOiAnJyxcblx0XHRsYWJlbDogaW5kZXhTY2FsZSA/ICcnICsgaW5kZXhTY2FsZS5nZXRMYWJlbEZvckluZGV4KGluZGV4LCBkYXRhc2V0SW5kZXgpIDogJycsXG5cdFx0dmFsdWU6IHZhbHVlU2NhbGUgPyAnJyArIHZhbHVlU2NhbGUuZ2V0TGFiZWxGb3JJbmRleChpbmRleCwgZGF0YXNldEluZGV4KSA6ICcnLFxuXHRcdGluZGV4OiBpbmRleCxcblx0XHRkYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCxcblx0XHR4OiBlbGVtZW50Ll9tb2RlbC54LFxuXHRcdHk6IGVsZW1lbnQuX21vZGVsLnlcblx0fTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IHRoZSByZXNldCBtb2RlbCBmb3IgdGhlIHRvb2x0aXBcbiAqIEBwYXJhbSB0b29sdGlwT3B0cyB7b2JqZWN0fSB0aGUgdG9vbHRpcCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGdldEJhc2VNb2RlbCh0b29sdGlwT3B0cykge1xuXHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblxuXHRyZXR1cm4ge1xuXHRcdC8vIFBvc2l0aW9uaW5nXG5cdFx0eFBhZGRpbmc6IHRvb2x0aXBPcHRzLnhQYWRkaW5nLFxuXHRcdHlQYWRkaW5nOiB0b29sdGlwT3B0cy55UGFkZGluZyxcblx0XHR4QWxpZ246IHRvb2x0aXBPcHRzLnhBbGlnbixcblx0XHR5QWxpZ246IHRvb2x0aXBPcHRzLnlBbGlnbixcblxuXHRcdC8vIERyYXdpbmcgZGlyZWN0aW9uIGFuZCB0ZXh0IGRpcmVjdGlvblxuXHRcdHJ0bDogdG9vbHRpcE9wdHMucnRsLFxuXHRcdHRleHREaXJlY3Rpb246IHRvb2x0aXBPcHRzLnRleHREaXJlY3Rpb24sXG5cblx0XHQvLyBCb2R5XG5cdFx0Ym9keUZvbnRDb2xvcjogdG9vbHRpcE9wdHMuYm9keUZvbnRDb2xvcixcblx0XHRfYm9keUZvbnRGYW1pbHk6IHZhbHVlT3JEZWZhdWx0JDgodG9vbHRpcE9wdHMuYm9keUZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KSxcblx0XHRfYm9keUZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy5ib2R5Rm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKSxcblx0XHRfYm9keUFsaWduOiB0b29sdGlwT3B0cy5ib2R5QWxpZ24sXG5cdFx0Ym9keUZvbnRTaXplOiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmJvZHlGb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKSxcblx0XHRib2R5U3BhY2luZzogdG9vbHRpcE9wdHMuYm9keVNwYWNpbmcsXG5cblx0XHQvLyBUaXRsZVxuXHRcdHRpdGxlRm9udENvbG9yOiB0b29sdGlwT3B0cy50aXRsZUZvbnRDb2xvcixcblx0XHRfdGl0bGVGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLnRpdGxlRm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpLFxuXHRcdF90aXRsZUZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy50aXRsZUZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0dGl0bGVGb250U2l6ZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy50aXRsZUZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpLFxuXHRcdF90aXRsZUFsaWduOiB0b29sdGlwT3B0cy50aXRsZUFsaWduLFxuXHRcdHRpdGxlU3BhY2luZzogdG9vbHRpcE9wdHMudGl0bGVTcGFjaW5nLFxuXHRcdHRpdGxlTWFyZ2luQm90dG9tOiB0b29sdGlwT3B0cy50aXRsZU1hcmdpbkJvdHRvbSxcblxuXHRcdC8vIEZvb3RlclxuXHRcdGZvb3RlckZvbnRDb2xvcjogdG9vbHRpcE9wdHMuZm9vdGVyRm9udENvbG9yLFxuXHRcdF9mb290ZXJGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmZvb3RlckZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KSxcblx0XHRfZm9vdGVyRm9udFN0eWxlOiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmZvb3RlckZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0Zm9vdGVyRm9udFNpemU6IHZhbHVlT3JEZWZhdWx0JDgodG9vbHRpcE9wdHMuZm9vdGVyRm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSksXG5cdFx0X2Zvb3RlckFsaWduOiB0b29sdGlwT3B0cy5mb290ZXJBbGlnbixcblx0XHRmb290ZXJTcGFjaW5nOiB0b29sdGlwT3B0cy5mb290ZXJTcGFjaW5nLFxuXHRcdGZvb3Rlck1hcmdpblRvcDogdG9vbHRpcE9wdHMuZm9vdGVyTWFyZ2luVG9wLFxuXG5cdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdGNhcmV0U2l6ZTogdG9vbHRpcE9wdHMuY2FyZXRTaXplLFxuXHRcdGNvcm5lclJhZGl1czogdG9vbHRpcE9wdHMuY29ybmVyUmFkaXVzLFxuXHRcdGJhY2tncm91bmRDb2xvcjogdG9vbHRpcE9wdHMuYmFja2dyb3VuZENvbG9yLFxuXHRcdG9wYWNpdHk6IDAsXG5cdFx0bGVnZW5kQ29sb3JCYWNrZ3JvdW5kOiB0b29sdGlwT3B0cy5tdWx0aUtleUJhY2tncm91bmQsXG5cdFx0ZGlzcGxheUNvbG9yczogdG9vbHRpcE9wdHMuZGlzcGxheUNvbG9ycyxcblx0XHRib3JkZXJDb2xvcjogdG9vbHRpcE9wdHMuYm9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyV2lkdGg6IHRvb2x0aXBPcHRzLmJvcmRlcldpZHRoXG5cdH07XG59XG5cbi8qKlxuICogR2V0IHRoZSBzaXplIG9mIHRoZSB0b29sdGlwXG4gKi9cbmZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG1vZGVsKSB7XG5cdHZhciBjdHggPSB0b29sdGlwLl9jaGFydC5jdHg7XG5cblx0dmFyIGhlaWdodCA9IG1vZGVsLnlQYWRkaW5nICogMjsgLy8gVG9vbHRpcCBQYWRkaW5nXG5cdHZhciB3aWR0aCA9IDA7XG5cblx0Ly8gQ291bnQgb2YgYWxsIGxpbmVzIGluIHRoZSBib2R5XG5cdHZhciBib2R5ID0gbW9kZWwuYm9keTtcblx0dmFyIGNvbWJpbmVkQm9keUxlbmd0aCA9IGJvZHkucmVkdWNlKGZ1bmN0aW9uKGNvdW50LCBib2R5SXRlbSkge1xuXHRcdHJldHVybiBjb3VudCArIGJvZHlJdGVtLmJlZm9yZS5sZW5ndGggKyBib2R5SXRlbS5saW5lcy5sZW5ndGggKyBib2R5SXRlbS5hZnRlci5sZW5ndGg7XG5cdH0sIDApO1xuXHRjb21iaW5lZEJvZHlMZW5ndGggKz0gbW9kZWwuYmVmb3JlQm9keS5sZW5ndGggKyBtb2RlbC5hZnRlckJvZHkubGVuZ3RoO1xuXG5cdHZhciB0aXRsZUxpbmVDb3VudCA9IG1vZGVsLnRpdGxlLmxlbmd0aDtcblx0dmFyIGZvb3RlckxpbmVDb3VudCA9IG1vZGVsLmZvb3Rlci5sZW5ndGg7XG5cdHZhciB0aXRsZUZvbnRTaXplID0gbW9kZWwudGl0bGVGb250U2l6ZTtcblx0dmFyIGJvZHlGb250U2l6ZSA9IG1vZGVsLmJvZHlGb250U2l6ZTtcblx0dmFyIGZvb3RlckZvbnRTaXplID0gbW9kZWwuZm9vdGVyRm9udFNpemU7XG5cblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ICogdGl0bGVGb250U2l6ZTsgLy8gVGl0bGUgTGluZXNcblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ID8gKHRpdGxlTGluZUNvdW50IC0gMSkgKiBtb2RlbC50aXRsZVNwYWNpbmcgOiAwOyAvLyBUaXRsZSBMaW5lIFNwYWNpbmdcblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ID8gbW9kZWwudGl0bGVNYXJnaW5Cb3R0b20gOiAwOyAvLyBUaXRsZSdzIGJvdHRvbSBNYXJnaW5cblx0aGVpZ2h0ICs9IGNvbWJpbmVkQm9keUxlbmd0aCAqIGJvZHlGb250U2l6ZTsgLy8gQm9keSBMaW5lc1xuXHRoZWlnaHQgKz0gY29tYmluZWRCb2R5TGVuZ3RoID8gKGNvbWJpbmVkQm9keUxlbmd0aCAtIDEpICogbW9kZWwuYm9keVNwYWNpbmcgOiAwOyAvLyBCb2R5IExpbmUgU3BhY2luZ1xuXHRoZWlnaHQgKz0gZm9vdGVyTGluZUNvdW50ID8gbW9kZWwuZm9vdGVyTWFyZ2luVG9wIDogMDsgLy8gRm9vdGVyIE1hcmdpblxuXHRoZWlnaHQgKz0gZm9vdGVyTGluZUNvdW50ICogKGZvb3RlckZvbnRTaXplKTsgLy8gRm9vdGVyIExpbmVzXG5cdGhlaWdodCArPSBmb290ZXJMaW5lQ291bnQgPyAoZm9vdGVyTGluZUNvdW50IC0gMSkgKiBtb2RlbC5mb290ZXJTcGFjaW5nIDogMDsgLy8gRm9vdGVyIExpbmUgU3BhY2luZ1xuXG5cdC8vIFRpdGxlIHdpZHRoXG5cdHZhciB3aWR0aFBhZGRpbmcgPSAwO1xuXHR2YXIgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuXHRcdHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG5cdH07XG5cblx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyh0aXRsZUZvbnRTaXplLCBtb2RlbC5fdGl0bGVGb250U3R5bGUsIG1vZGVsLl90aXRsZUZvbnRGYW1pbHkpO1xuXHRoZWxwZXJzJDEuZWFjaChtb2RlbC50aXRsZSwgbWF4TGluZVdpZHRoKTtcblxuXHQvLyBCb2R5IHdpZHRoXG5cdGN0eC5mb250ID0gaGVscGVycyQxLmZvbnRTdHJpbmcoYm9keUZvbnRTaXplLCBtb2RlbC5fYm9keUZvbnRTdHlsZSwgbW9kZWwuX2JvZHlGb250RmFtaWx5KTtcblx0aGVscGVycyQxLmVhY2gobW9kZWwuYmVmb3JlQm9keS5jb25jYXQobW9kZWwuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcblxuXHQvLyBCb2R5IGxpbmVzIG1heSBpbmNsdWRlIHNvbWUgZXh0cmEgd2lkdGggZHVlIHRvIHRoZSBjb2xvciBib3hcblx0d2lkdGhQYWRkaW5nID0gbW9kZWwuZGlzcGxheUNvbG9ycyA/IChib2R5Rm9udFNpemUgKyAyKSA6IDA7XG5cdGhlbHBlcnMkMS5lYWNoKGJvZHksIGZ1bmN0aW9uKGJvZHlJdGVtKSB7XG5cdFx0aGVscGVycyQxLmVhY2goYm9keUl0ZW0uYmVmb3JlLCBtYXhMaW5lV2lkdGgpO1xuXHRcdGhlbHBlcnMkMS5lYWNoKGJvZHlJdGVtLmxpbmVzLCBtYXhMaW5lV2lkdGgpO1xuXHRcdGhlbHBlcnMkMS5lYWNoKGJvZHlJdGVtLmFmdGVyLCBtYXhMaW5lV2lkdGgpO1xuXHR9KTtcblxuXHQvLyBSZXNldCBiYWNrIHRvIDBcblx0d2lkdGhQYWRkaW5nID0gMDtcblxuXHQvLyBGb290ZXIgd2lkdGhcblx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyhmb290ZXJGb250U2l6ZSwgbW9kZWwuX2Zvb3RlckZvbnRTdHlsZSwgbW9kZWwuX2Zvb3RlckZvbnRGYW1pbHkpO1xuXHRoZWxwZXJzJDEuZWFjaChtb2RlbC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG5cblx0Ly8gQWRkIHBhZGRpbmdcblx0d2lkdGggKz0gMiAqIG1vZGVsLnhQYWRkaW5nO1xuXG5cdHJldHVybiB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0XG5cdH07XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCB0aGUgYWxpZ25tZW50IG9mIGEgdG9vbHRpcCBnaXZlbiB0aGUgc2l6ZVxuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQodG9vbHRpcCwgc2l6ZSkge1xuXHR2YXIgbW9kZWwgPSB0b29sdGlwLl9tb2RlbDtcblx0dmFyIGNoYXJ0ID0gdG9vbHRpcC5fY2hhcnQ7XG5cdHZhciBjaGFydEFyZWEgPSB0b29sdGlwLl9jaGFydC5jaGFydEFyZWE7XG5cdHZhciB4QWxpZ24gPSAnY2VudGVyJztcblx0dmFyIHlBbGlnbiA9ICdjZW50ZXInO1xuXG5cdGlmIChtb2RlbC55IDwgc2l6ZS5oZWlnaHQpIHtcblx0XHR5QWxpZ24gPSAndG9wJztcblx0fSBlbHNlIGlmIChtb2RlbC55ID4gKGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KSkge1xuXHRcdHlBbGlnbiA9ICdib3R0b20nO1xuXHR9XG5cblx0dmFyIGxmLCByZjsgLy8gZnVuY3Rpb25zIHRvIGRldGVybWluZSBsZWZ0LCByaWdodCBhbGlnbm1lbnRcblx0dmFyIG9sZiwgb3JmOyAvLyBmdW5jdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIGxlZnQvcmlnaHQgYWxpZ25tZW50IGNhdXNlcyB0b29sdGlwIHRvIGdvIG91dHNpZGUgY2hhcnRcblx0dmFyIHlmOyAvLyBmdW5jdGlvbiB0byBnZXQgdGhlIHkgYWxpZ25tZW50IGlmIHRoZSB0b29sdGlwIGdvZXMgb3V0c2lkZSBvZiB0aGUgbGVmdCBvciByaWdodCBlZGdlc1xuXHR2YXIgbWlkWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuXHR2YXIgbWlkWSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyO1xuXG5cdGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0bGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA8PSBtaWRYO1xuXHRcdH07XG5cdFx0cmYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA+IG1pZFg7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRsZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiB4IDw9IChzaXplLndpZHRoIC8gMik7XG5cdFx0fTtcblx0XHRyZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiB4ID49IChjaGFydC53aWR0aCAtIChzaXplLndpZHRoIC8gMikpO1xuXHRcdH07XG5cdH1cblxuXHRvbGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0cmV0dXJuIHggKyBzaXplLndpZHRoICsgbW9kZWwuY2FyZXRTaXplICsgbW9kZWwuY2FyZXRQYWRkaW5nID4gY2hhcnQud2lkdGg7XG5cdH07XG5cdG9yZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRyZXR1cm4geCAtIHNpemUud2lkdGggLSBtb2RlbC5jYXJldFNpemUgLSBtb2RlbC5jYXJldFBhZGRpbmcgPCAwO1xuXHR9O1xuXHR5ZiA9IGZ1bmN0aW9uKHkpIHtcblx0XHRyZXR1cm4geSA8PSBtaWRZID8gJ3RvcCcgOiAnYm90dG9tJztcblx0fTtcblxuXHRpZiAobGYobW9kZWwueCkpIHtcblx0XHR4QWxpZ24gPSAnbGVmdCc7XG5cblx0XHQvLyBJcyB0b29sdGlwIHRvbyB3aWRlIGFuZCBnb2VzIG92ZXIgdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGNoYXJ0Lj9cblx0XHRpZiAob2xmKG1vZGVsLngpKSB7XG5cdFx0XHR4QWxpZ24gPSAnY2VudGVyJztcblx0XHRcdHlBbGlnbiA9IHlmKG1vZGVsLnkpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChyZihtb2RlbC54KSkge1xuXHRcdHhBbGlnbiA9ICdyaWdodCc7XG5cblx0XHQvLyBJcyB0b29sdGlwIHRvbyB3aWRlIGFuZCBnb2VzIG91dHNpZGUgbGVmdCBlZGdlIG9mIGNhbnZhcz9cblx0XHRpZiAob3JmKG1vZGVsLngpKSB7XG5cdFx0XHR4QWxpZ24gPSAnY2VudGVyJztcblx0XHRcdHlBbGlnbiA9IHlmKG1vZGVsLnkpO1xuXHRcdH1cblx0fVxuXG5cdHZhciBvcHRzID0gdG9vbHRpcC5fb3B0aW9ucztcblx0cmV0dXJuIHtcblx0XHR4QWxpZ246IG9wdHMueEFsaWduID8gb3B0cy54QWxpZ24gOiB4QWxpZ24sXG5cdFx0eUFsaWduOiBvcHRzLnlBbGlnbiA/IG9wdHMueUFsaWduIDogeUFsaWduXG5cdH07XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCB0aGUgbG9jYXRpb24gYSB0b29sdGlwIG5lZWRzIHRvIGJlIHBsYWNlZCBhdCBnaXZlbiB0aGUgaW5pdGlhbCBwb3NpdGlvbiAodmlhIHRoZSB2bSkgYW5kIHRoZSBzaXplIGFuZCBhbGlnbm1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0QmFja2dyb3VuZFBvaW50KHZtLCBzaXplLCBhbGlnbm1lbnQsIGNoYXJ0KSB7XG5cdC8vIEJhY2tncm91bmQgUG9zaXRpb25cblx0dmFyIHggPSB2bS54O1xuXHR2YXIgeSA9IHZtLnk7XG5cblx0dmFyIGNhcmV0U2l6ZSA9IHZtLmNhcmV0U2l6ZTtcblx0dmFyIGNhcmV0UGFkZGluZyA9IHZtLmNhcmV0UGFkZGluZztcblx0dmFyIGNvcm5lclJhZGl1cyA9IHZtLmNvcm5lclJhZGl1cztcblx0dmFyIHhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG5cdHZhciB5QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuXHR2YXIgcGFkZGluZ0FuZFNpemUgPSBjYXJldFNpemUgKyBjYXJldFBhZGRpbmc7XG5cdHZhciByYWRpdXNBbmRQYWRkaW5nID0gY29ybmVyUmFkaXVzICsgY2FyZXRQYWRkaW5nO1xuXG5cdGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHR4IC09IHNpemUud2lkdGg7XG5cdH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuXHRcdHggLT0gKHNpemUud2lkdGggLyAyKTtcblx0XHRpZiAoeCArIHNpemUud2lkdGggPiBjaGFydC53aWR0aCkge1xuXHRcdFx0eCA9IGNoYXJ0LndpZHRoIC0gc2l6ZS53aWR0aDtcblx0XHR9XG5cdFx0aWYgKHggPCAwKSB7XG5cdFx0XHR4ID0gMDtcblx0XHR9XG5cdH1cblxuXHRpZiAoeUFsaWduID09PSAndG9wJykge1xuXHRcdHkgKz0gcGFkZGluZ0FuZFNpemU7XG5cdH0gZWxzZSBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuXHRcdHkgLT0gc2l6ZS5oZWlnaHQgKyBwYWRkaW5nQW5kU2l6ZTtcblx0fSBlbHNlIHtcblx0XHR5IC09IChzaXplLmhlaWdodCAvIDIpO1xuXHR9XG5cblx0aWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHRpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcblx0XHRcdHggKz0gcGFkZGluZ0FuZFNpemU7XG5cdFx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHRcdHggLT0gcGFkZGluZ0FuZFNpemU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0eCAtPSByYWRpdXNBbmRQYWRkaW5nO1xuXHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdHggKz0gcmFkaXVzQW5kUGFkZGluZztcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0eDogeCxcblx0XHR5OiB5XG5cdH07XG59XG5cbmZ1bmN0aW9uIGdldEFsaWduZWRYKHZtLCBhbGlnbikge1xuXHRyZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInXG5cdFx0PyB2bS54ICsgdm0ud2lkdGggLyAyXG5cdFx0OiBhbGlnbiA9PT0gJ3JpZ2h0J1xuXHRcdFx0PyB2bS54ICsgdm0ud2lkdGggLSB2bS54UGFkZGluZ1xuXHRcdFx0OiB2bS54ICsgdm0ueFBhZGRpbmc7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGJ1aWxkIGJlZm9yZSBhbmQgYWZ0ZXIgYm9keSBsaW5lc1xuICovXG5mdW5jdGlvbiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhjYWxsYmFjaykge1xuXHRyZXR1cm4gcHVzaE9yQ29uY2F0KFtdLCBzcGxpdE5ld2xpbmVzKGNhbGxiYWNrKSk7XG59XG5cbnZhciBleHBvcnRzJDQgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fbW9kZWwgPSBnZXRCYXNlTW9kZWwodGhpcy5fb3B0aW9ucyk7XG5cdFx0dGhpcy5fbGFzdEFjdGl2ZSA9IFtdO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgdGl0bGVcblx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0Z2V0VGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5fb3B0aW9ucztcblx0XHR2YXIgY2FsbGJhY2tzID0gb3B0cy5jYWxsYmFja3M7XG5cblx0XHR2YXIgYmVmb3JlVGl0bGUgPSBjYWxsYmFja3MuYmVmb3JlVGl0bGUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdFx0dmFyIHRpdGxlID0gY2FsbGJhY2tzLnRpdGxlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBhZnRlclRpdGxlID0gY2FsbGJhY2tzLmFmdGVyVGl0bGUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHR2YXIgbGluZXMgPSBbXTtcblx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVUaXRsZSkpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKHRpdGxlKSk7XG5cdFx0bGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuXG5cdFx0cmV0dXJuIGxpbmVzO1xuXHR9LFxuXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldEJlZm9yZUJvZHk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyh0aGlzLl9vcHRpb25zLmNhbGxiYWNrcy5iZWZvcmVCb2R5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHR9LFxuXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldEJvZHk6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtcywgZGF0YSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNhbGxiYWNrcyA9IG1lLl9vcHRpb25zLmNhbGxiYWNrcztcblx0XHR2YXIgYm9keUl0ZW1zID0gW107XG5cblx0XHRoZWxwZXJzJDEuZWFjaCh0b29sdGlwSXRlbXMsIGZ1bmN0aW9uKHRvb2x0aXBJdGVtKSB7XG5cdFx0XHR2YXIgYm9keUl0ZW0gPSB7XG5cdFx0XHRcdGJlZm9yZTogW10sXG5cdFx0XHRcdGxpbmVzOiBbXSxcblx0XHRcdFx0YWZ0ZXI6IFtdXG5cdFx0XHR9O1xuXHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmJlZm9yZSwgc3BsaXROZXdsaW5lcyhjYWxsYmFja3MuYmVmb3JlTGFiZWwuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIGRhdGEpKSk7XG5cdFx0XHRwdXNoT3JDb25jYXQoYm9keUl0ZW0ubGluZXMsIGNhbGxiYWNrcy5sYWJlbC5jYWxsKG1lLCB0b29sdGlwSXRlbSwgZGF0YSkpO1xuXHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmFmdGVyLCBzcGxpdE5ld2xpbmVzKGNhbGxiYWNrcy5hZnRlckxhYmVsLmNhbGwobWUsIHRvb2x0aXBJdGVtLCBkYXRhKSkpO1xuXG5cdFx0XHRib2R5SXRlbXMucHVzaChib2R5SXRlbSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gYm9keUl0ZW1zO1xuXHR9LFxuXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldEFmdGVyQm9keTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKHRoaXMuX29wdGlvbnMuY2FsbGJhY2tzLmFmdGVyQm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIGZvb3RlciBhbmQgYmVmb3JlRm9vdGVyIGFuZCBhZnRlckZvb3RlciBsaW5lc1xuXHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRnZXRGb290ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNhbGxiYWNrcyA9IG1lLl9vcHRpb25zLmNhbGxiYWNrcztcblxuXHRcdHZhciBiZWZvcmVGb290ZXIgPSBjYWxsYmFja3MuYmVmb3JlRm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBmb290ZXIgPSBjYWxsYmFja3MuZm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBhZnRlckZvb3RlciA9IGNhbGxiYWNrcy5hZnRlckZvb3Rlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdHZhciBsaW5lcyA9IFtdO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGZvb3RlcikpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyRm9vdGVyKSk7XG5cblx0XHRyZXR1cm4gbGluZXM7XG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbihjaGFuZ2VkKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLl9vcHRpb25zO1xuXG5cdFx0Ly8gTmVlZCB0byByZWdlbmVyYXRlIHRoZSBtb2RlbCBiZWNhdXNlIGl0cyBmYXN0ZXIgdGhhbiB1c2luZyBleHRlbmQgYW5kIGl0IGlzIG5lY2Vzc2FyeSBkdWUgdG8gdGhlIG9wdGltaXphdGlvbiBpbiBDaGFydC5FbGVtZW50LnRyYW5zaXRpb25cblx0XHQvLyB0aGF0IGRvZXMgX3ZpZXcgPSBfbW9kZWwgaWYgZWFzZSA9PT0gMS4gVGhpcyBjYXVzZXMgdGhlIDJuZCB0b29sdGlwIHVwZGF0ZSB0byBzZXQgcHJvcGVydGllcyBpbiBib3RoIHRoZSB2aWV3IGFuZCBtb2RlbCBhdCB0aGUgc2FtZSB0aW1lXG5cdFx0Ly8gd2hpY2ggYnJlYWtzIGFueSBhbmltYXRpb25zLlxuXHRcdHZhciBleGlzdGluZ01vZGVsID0gbWUuX21vZGVsO1xuXHRcdHZhciBtb2RlbCA9IG1lLl9tb2RlbCA9IGdldEJhc2VNb2RlbChvcHRzKTtcblx0XHR2YXIgYWN0aXZlID0gbWUuX2FjdGl2ZTtcblxuXHRcdHZhciBkYXRhID0gbWUuX2RhdGE7XG5cblx0XHQvLyBJbiB0aGUgY2FzZSB3aGVyZSBhY3RpdmUubGVuZ3RoID09PSAwIHdlIG5lZWQgdG8ga2VlcCB0aGVzZSBhdCBleGlzdGluZyB2YWx1ZXMgZm9yIGdvb2QgYW5pbWF0aW9uc1xuXHRcdHZhciBhbGlnbm1lbnQgPSB7XG5cdFx0XHR4QWxpZ246IGV4aXN0aW5nTW9kZWwueEFsaWduLFxuXHRcdFx0eUFsaWduOiBleGlzdGluZ01vZGVsLnlBbGlnblxuXHRcdH07XG5cdFx0dmFyIGJhY2tncm91bmRQb2ludCA9IHtcblx0XHRcdHg6IGV4aXN0aW5nTW9kZWwueCxcblx0XHRcdHk6IGV4aXN0aW5nTW9kZWwueVxuXHRcdH07XG5cdFx0dmFyIHRvb2x0aXBTaXplID0ge1xuXHRcdFx0d2lkdGg6IGV4aXN0aW5nTW9kZWwud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGV4aXN0aW5nTW9kZWwuaGVpZ2h0XG5cdFx0fTtcblx0XHR2YXIgdG9vbHRpcFBvc2l0aW9uID0ge1xuXHRcdFx0eDogZXhpc3RpbmdNb2RlbC5jYXJldFgsXG5cdFx0XHR5OiBleGlzdGluZ01vZGVsLmNhcmV0WVxuXHRcdH07XG5cblx0XHR2YXIgaSwgbGVuO1xuXG5cdFx0aWYgKGFjdGl2ZS5sZW5ndGgpIHtcblx0XHRcdG1vZGVsLm9wYWNpdHkgPSAxO1xuXG5cdFx0XHR2YXIgbGFiZWxDb2xvcnMgPSBbXTtcblx0XHRcdHZhciBsYWJlbFRleHRDb2xvcnMgPSBbXTtcblx0XHRcdHRvb2x0aXBQb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdHMucG9zaXRpb25dLmNhbGwobWUsIGFjdGl2ZSwgbWUuX2V2ZW50UG9zaXRpb24pO1xuXG5cdFx0XHR2YXIgdG9vbHRpcEl0ZW1zID0gW107XG5cdFx0XHRmb3IgKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0dG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0oYWN0aXZlW2ldKSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZSB1c2VyIHByb3ZpZGVkIGEgZmlsdGVyIGZ1bmN0aW9uLCB1c2UgaXQgdG8gbW9kaWZ5IHRoZSB0b29sdGlwIGl0ZW1zXG5cdFx0XHRpZiAob3B0cy5maWx0ZXIpIHtcblx0XHRcdFx0dG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcihmdW5jdGlvbihhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdHMuZmlsdGVyKGEsIGRhdGEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhlIHVzZXIgcHJvdmlkZWQgYSBzb3J0aW5nIGZ1bmN0aW9uLCB1c2UgaXQgdG8gbW9kaWZ5IHRoZSB0b29sdGlwIGl0ZW1zXG5cdFx0XHRpZiAob3B0cy5pdGVtU29ydCkge1xuXHRcdFx0XHR0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdHMuaXRlbVNvcnQoYSwgYiwgZGF0YSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXRlcm1pbmUgY29sb3JzIGZvciBib3hlc1xuXHRcdFx0aGVscGVycyQxLmVhY2godG9vbHRpcEl0ZW1zLCBmdW5jdGlvbih0b29sdGlwSXRlbSkge1xuXHRcdFx0XHRsYWJlbENvbG9ycy5wdXNoKG9wdHMuY2FsbGJhY2tzLmxhYmVsQ29sb3IuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIG1lLl9jaGFydCkpO1xuXHRcdFx0XHRsYWJlbFRleHRDb2xvcnMucHVzaChvcHRzLmNhbGxiYWNrcy5sYWJlbFRleHRDb2xvci5jYWxsKG1lLCB0b29sdGlwSXRlbSwgbWUuX2NoYXJ0KSk7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHQvLyBCdWlsZCB0aGUgVGV4dCBMaW5lc1xuXHRcdFx0bW9kZWwudGl0bGUgPSBtZS5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIGRhdGEpO1xuXHRcdFx0bW9kZWwuYmVmb3JlQm9keSA9IG1lLmdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblx0XHRcdG1vZGVsLmJvZHkgPSBtZS5nZXRCb2R5KHRvb2x0aXBJdGVtcywgZGF0YSk7XG5cdFx0XHRtb2RlbC5hZnRlckJvZHkgPSBtZS5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblx0XHRcdG1vZGVsLmZvb3RlciA9IG1lLmdldEZvb3Rlcih0b29sdGlwSXRlbXMsIGRhdGEpO1xuXG5cdFx0XHQvLyBJbml0aWFsIHBvc2l0aW9uaW5nIGFuZCBjb2xvcnNcblx0XHRcdG1vZGVsLnggPSB0b29sdGlwUG9zaXRpb24ueDtcblx0XHRcdG1vZGVsLnkgPSB0b29sdGlwUG9zaXRpb24ueTtcblx0XHRcdG1vZGVsLmNhcmV0UGFkZGluZyA9IG9wdHMuY2FyZXRQYWRkaW5nO1xuXHRcdFx0bW9kZWwubGFiZWxDb2xvcnMgPSBsYWJlbENvbG9ycztcblx0XHRcdG1vZGVsLmxhYmVsVGV4dENvbG9ycyA9IGxhYmVsVGV4dENvbG9ycztcblxuXHRcdFx0Ly8gZGF0YSBwb2ludHNcblx0XHRcdG1vZGVsLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG5cblx0XHRcdC8vIFdlIG5lZWQgdG8gZGV0ZXJtaW5lIGFsaWdubWVudCBvZiB0aGUgdG9vbHRpcFxuXHRcdFx0dG9vbHRpcFNpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBtb2RlbCk7XG5cdFx0XHRhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcywgdG9vbHRpcFNpemUpO1xuXHRcdFx0Ly8gRmluYWwgU2l6ZSBhbmQgUG9zaXRpb25cblx0XHRcdGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChtb2RlbCwgdG9vbHRpcFNpemUsIGFsaWdubWVudCwgbWUuX2NoYXJ0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bW9kZWwub3BhY2l0eSA9IDA7XG5cdFx0fVxuXG5cdFx0bW9kZWwueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcblx0XHRtb2RlbC55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuXHRcdG1vZGVsLnggPSBiYWNrZ3JvdW5kUG9pbnQueDtcblx0XHRtb2RlbC55ID0gYmFja2dyb3VuZFBvaW50Lnk7XG5cdFx0bW9kZWwud2lkdGggPSB0b29sdGlwU2l6ZS53aWR0aDtcblx0XHRtb2RlbC5oZWlnaHQgPSB0b29sdGlwU2l6ZS5oZWlnaHQ7XG5cblx0XHQvLyBQb2ludCB3aGVyZSB0aGUgY2FyZXQgb24gdGhlIHRvb2x0aXAgcG9pbnRzIHRvXG5cdFx0bW9kZWwuY2FyZXRYID0gdG9vbHRpcFBvc2l0aW9uLng7XG5cdFx0bW9kZWwuY2FyZXRZID0gdG9vbHRpcFBvc2l0aW9uLnk7XG5cblx0XHRtZS5fbW9kZWwgPSBtb2RlbDtcblxuXHRcdGlmIChjaGFuZ2VkICYmIG9wdHMuY3VzdG9tKSB7XG5cdFx0XHRvcHRzLmN1c3RvbS5jYWxsKG1lLCBtb2RlbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdGRyYXdDYXJldDogZnVuY3Rpb24odG9vbHRpcFBvaW50LCBzaXplKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgdm0pO1xuXG5cdFx0Y3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngxLCBjYXJldFBvc2l0aW9uLnkxKTtcblx0XHRjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDIsIGNhcmV0UG9zaXRpb24ueTIpO1xuXHRcdGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MywgY2FyZXRQb3NpdGlvbi55Myk7XG5cdH0sXG5cdGdldENhcmV0UG9zaXRpb246IGZ1bmN0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgdm0pIHtcblx0XHR2YXIgeDEsIHgyLCB4MywgeTEsIHkyLCB5Mztcblx0XHR2YXIgY2FyZXRTaXplID0gdm0uY2FyZXRTaXplO1xuXHRcdHZhciBjb3JuZXJSYWRpdXMgPSB2bS5jb3JuZXJSYWRpdXM7XG5cdFx0dmFyIHhBbGlnbiA9IHZtLnhBbGlnbjtcblx0XHR2YXIgeUFsaWduID0gdm0ueUFsaWduO1xuXHRcdHZhciBwdFggPSB0b29sdGlwUG9pbnQueDtcblx0XHR2YXIgcHRZID0gdG9vbHRpcFBvaW50Lnk7XG5cdFx0dmFyIHdpZHRoID0gc2l6ZS53aWR0aDtcblx0XHR2YXIgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cblx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuXHRcdFx0eTIgPSBwdFkgKyAoaGVpZ2h0IC8gMik7XG5cblx0XHRcdGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0XHR4MSA9IHB0WDtcblx0XHRcdFx0eDIgPSB4MSAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MTtcblxuXHRcdFx0XHR5MSA9IHkyICsgY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkyIC0gY2FyZXRTaXplO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eDEgPSBwdFggKyB3aWR0aDtcblx0XHRcdFx0eDIgPSB4MSArIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MTtcblxuXHRcdFx0XHR5MSA9IHkyIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkyICsgY2FyZXRTaXplO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcblx0XHRcdFx0eDIgPSBwdFggKyBjb3JuZXJSYWRpdXMgKyAoY2FyZXRTaXplKTtcblx0XHRcdFx0eDEgPSB4MiAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MiArIGNhcmV0U2l6ZTtcblx0XHRcdH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0XHRcdHgyID0gcHRYICsgd2lkdGggLSBjb3JuZXJSYWRpdXMgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgxID0geDIgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR4MiA9IHZtLmNhcmV0WDtcblx0XHRcdFx0eDEgPSB4MiAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MiArIGNhcmV0U2l6ZTtcblx0XHRcdH1cblx0XHRcdGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG5cdFx0XHRcdHkxID0gcHRZO1xuXHRcdFx0XHR5MiA9IHkxIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkxO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eTEgPSBwdFkgKyBoZWlnaHQ7XG5cdFx0XHRcdHkyID0geTEgKyBjYXJldFNpemU7XG5cdFx0XHRcdHkzID0geTE7XG5cdFx0XHRcdC8vIGludmVydCBkcmF3aW5nIG9yZGVyXG5cdFx0XHRcdHZhciB0bXAgPSB4Mztcblx0XHRcdFx0eDMgPSB4MTtcblx0XHRcdFx0eDEgPSB0bXA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7eDE6IHgxLCB4MjogeDIsIHgzOiB4MywgeTE6IHkxLCB5MjogeTIsIHkzOiB5M307XG5cdH0sXG5cblx0ZHJhd1RpdGxlOiBmdW5jdGlvbihwdCwgdm0sIGN0eCkge1xuXHRcdHZhciB0aXRsZSA9IHZtLnRpdGxlO1xuXHRcdHZhciBsZW5ndGggPSB0aXRsZS5sZW5ndGg7XG5cdFx0dmFyIHRpdGxlRm9udFNpemUsIHRpdGxlU3BhY2luZywgaTtcblxuXHRcdGlmIChsZW5ndGgpIHtcblx0XHRcdHZhciBydGxIZWxwZXIgPSBnZXRSdGxIZWxwZXIodm0ucnRsLCB2bS54LCB2bS53aWR0aCk7XG5cblx0XHRcdHB0LnggPSBnZXRBbGlnbmVkWCh2bSwgdm0uX3RpdGxlQWxpZ24pO1xuXG5cdFx0XHRjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbih2bS5fdGl0bGVBbGlnbik7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0XHRcdHRpdGxlRm9udFNpemUgPSB2bS50aXRsZUZvbnRTaXplO1xuXHRcdFx0dGl0bGVTcGFjaW5nID0gdm0udGl0bGVTcGFjaW5nO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdm0udGl0bGVGb250Q29sb3I7XG5cdFx0XHRjdHguZm9udCA9IGhlbHBlcnMkMS5mb250U3RyaW5nKHRpdGxlRm9udFNpemUsIHZtLl90aXRsZUZvbnRTdHlsZSwgdm0uX3RpdGxlRm9udEZhbWlseSk7XG5cblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdFx0XHRjdHguZmlsbFRleHQodGl0bGVbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgdGl0bGVGb250U2l6ZSAvIDIpO1xuXHRcdFx0XHRwdC55ICs9IHRpdGxlRm9udFNpemUgKyB0aXRsZVNwYWNpbmc7IC8vIExpbmUgSGVpZ2h0IGFuZCBzcGFjaW5nXG5cblx0XHRcdFx0aWYgKGkgKyAxID09PSBsZW5ndGgpIHtcblx0XHRcdFx0XHRwdC55ICs9IHZtLnRpdGxlTWFyZ2luQm90dG9tIC0gdGl0bGVTcGFjaW5nOyAvLyBJZiBMYXN0LCBhZGQgbWFyZ2luLCByZW1vdmUgc3BhY2luZ1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGRyYXdCb2R5OiBmdW5jdGlvbihwdCwgdm0sIGN0eCkge1xuXHRcdHZhciBib2R5Rm9udFNpemUgPSB2bS5ib2R5Rm9udFNpemU7XG5cdFx0dmFyIGJvZHlTcGFjaW5nID0gdm0uYm9keVNwYWNpbmc7XG5cdFx0dmFyIGJvZHlBbGlnbiA9IHZtLl9ib2R5QWxpZ247XG5cdFx0dmFyIGJvZHkgPSB2bS5ib2R5O1xuXHRcdHZhciBkcmF3Q29sb3JCb3hlcyA9IHZtLmRpc3BsYXlDb2xvcnM7XG5cdFx0dmFyIHhMaW5lUGFkZGluZyA9IDA7XG5cdFx0dmFyIGNvbG9yWCA9IGRyYXdDb2xvckJveGVzID8gZ2V0QWxpZ25lZFgodm0sICdsZWZ0JykgOiAwO1xuXG5cdFx0dmFyIHJ0bEhlbHBlciA9IGdldFJ0bEhlbHBlcih2bS5ydGwsIHZtLngsIHZtLndpZHRoKTtcblxuXHRcdHZhciBmaWxsTGluZU9mVGV4dCA9IGZ1bmN0aW9uKGxpbmUpIHtcblx0XHRcdGN0eC5maWxsVGV4dChsaW5lLCBydGxIZWxwZXIueChwdC54ICsgeExpbmVQYWRkaW5nKSwgcHQueSArIGJvZHlGb250U2l6ZSAvIDIpO1xuXHRcdFx0cHQueSArPSBib2R5Rm9udFNpemUgKyBib2R5U3BhY2luZztcblx0XHR9O1xuXG5cdFx0dmFyIGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxhYmVsQ29sb3JzLCBsaW5lcywgaSwgaiwgaWxlbiwgamxlbjtcblx0XHR2YXIgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gPSBydGxIZWxwZXIudGV4dEFsaWduKGJvZHlBbGlnbik7XG5cblx0XHRjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRjdHguZm9udCA9IGhlbHBlcnMkMS5mb250U3RyaW5nKGJvZHlGb250U2l6ZSwgdm0uX2JvZHlGb250U3R5bGUsIHZtLl9ib2R5Rm9udEZhbWlseSk7XG5cblx0XHRwdC54ID0gZ2V0QWxpZ25lZFgodm0sIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uKTtcblxuXHRcdC8vIEJlZm9yZSBib2R5IGxpbmVzXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJvZHlGb250Q29sb3I7XG5cdFx0aGVscGVycyQxLmVhY2godm0uYmVmb3JlQm9keSwgZmlsbExpbmVPZlRleHQpO1xuXG5cdFx0eExpbmVQYWRkaW5nID0gZHJhd0NvbG9yQm94ZXMgJiYgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gIT09ICdyaWdodCdcblx0XHRcdD8gYm9keUFsaWduID09PSAnY2VudGVyJyA/IChib2R5Rm9udFNpemUgLyAyICsgMSkgOiAoYm9keUZvbnRTaXplICsgMilcblx0XHRcdDogMDtcblxuXHRcdC8vIERyYXcgYm9keSBsaW5lcyBub3dcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYm9keS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGJvZHlJdGVtID0gYm9keVtpXTtcblx0XHRcdHRleHRDb2xvciA9IHZtLmxhYmVsVGV4dENvbG9yc1tpXTtcblx0XHRcdGxhYmVsQ29sb3JzID0gdm0ubGFiZWxDb2xvcnNbaV07XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG5cdFx0XHRoZWxwZXJzJDEuZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcblxuXHRcdFx0bGluZXMgPSBib2R5SXRlbS5saW5lcztcblx0XHRcdGZvciAoaiA9IDAsIGpsZW4gPSBsaW5lcy5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0Ly8gRHJhdyBMZWdlbmQtbGlrZSBib3hlcyBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKGRyYXdDb2xvckJveGVzKSB7XG5cdFx0XHRcdFx0dmFyIHJ0bENvbG9yWCA9IHJ0bEhlbHBlci54KGNvbG9yWCk7XG5cblx0XHRcdFx0XHQvLyBGaWxsIGEgd2hpdGUgcmVjdCBzbyB0aGF0IGNvbG91cnMgbWVyZ2UgbmljZWx5IGlmIHRoZSBvcGFjaXR5IGlzIDwgMVxuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB2bS5sZWdlbmRDb2xvckJhY2tncm91bmQ7XG5cdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm9keUZvbnRTaXplKSwgcHQueSwgYm9keUZvbnRTaXplLCBib2R5Rm9udFNpemUpO1xuXG5cdFx0XHRcdFx0Ly8gQm9yZGVyXG5cdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDE7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnMuYm9yZGVyQ29sb3I7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVJlY3QocnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib2R5Rm9udFNpemUpLCBwdC55LCBib2R5Rm9udFNpemUsIGJvZHlGb250U2l6ZSk7XG5cblx0XHRcdFx0XHQvLyBJbm5lciBzcXVhcmVcblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRcdGN0eC5maWxsUmVjdChydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueFBsdXMocnRsQ29sb3JYLCAxKSwgYm9keUZvbnRTaXplIC0gMiksIHB0LnkgKyAxLCBib2R5Rm9udFNpemUgLSAyLCBib2R5Rm9udFNpemUgLSAyKTtcblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmlsbExpbmVPZlRleHQobGluZXNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzJDEuZWFjaChib2R5SXRlbS5hZnRlciwgZmlsbExpbmVPZlRleHQpO1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IGJhY2sgdG8gMCBmb3IgYWZ0ZXIgYm9keVxuXHRcdHhMaW5lUGFkZGluZyA9IDA7XG5cblx0XHQvLyBBZnRlciBib2R5IGxpbmVzXG5cdFx0aGVscGVycyQxLmVhY2godm0uYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG5cdFx0cHQueSAtPSBib2R5U3BhY2luZzsgLy8gUmVtb3ZlIGxhc3QgYm9keSBzcGFjaW5nXG5cdH0sXG5cblx0ZHJhd0Zvb3RlcjogZnVuY3Rpb24ocHQsIHZtLCBjdHgpIHtcblx0XHR2YXIgZm9vdGVyID0gdm0uZm9vdGVyO1xuXHRcdHZhciBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuXHRcdHZhciBmb290ZXJGb250U2l6ZSwgaTtcblxuXHRcdGlmIChsZW5ndGgpIHtcblx0XHRcdHZhciBydGxIZWxwZXIgPSBnZXRSdGxIZWxwZXIodm0ucnRsLCB2bS54LCB2bS53aWR0aCk7XG5cblx0XHRcdHB0LnggPSBnZXRBbGlnbmVkWCh2bSwgdm0uX2Zvb3RlckFsaWduKTtcblx0XHRcdHB0LnkgKz0gdm0uZm9vdGVyTWFyZ2luVG9wO1xuXG5cdFx0XHRjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbih2bS5fZm9vdGVyQWxpZ24pO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXG5cdFx0XHRmb290ZXJGb250U2l6ZSA9IHZtLmZvb3RlckZvbnRTaXplO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdm0uZm9vdGVyRm9udENvbG9yO1xuXHRcdFx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyhmb290ZXJGb250U2l6ZSwgdm0uX2Zvb3RlckZvbnRTdHlsZSwgdm0uX2Zvb3RlckZvbnRGYW1pbHkpO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KGZvb3RlcltpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyBmb290ZXJGb250U2l6ZSAvIDIpO1xuXHRcdFx0XHRwdC55ICs9IGZvb3RlckZvbnRTaXplICsgdm0uZm9vdGVyU3BhY2luZztcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0ZHJhd0JhY2tncm91bmQ6IGZ1bmN0aW9uKHB0LCB2bSwgY3R4LCB0b29sdGlwU2l6ZSkge1xuXHRcdGN0eC5maWxsU3R5bGUgPSB2bS5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdm0uYm9yZGVyQ29sb3I7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZtLmJvcmRlcldpZHRoO1xuXHRcdHZhciB4QWxpZ24gPSB2bS54QWxpZ247XG5cdFx0dmFyIHlBbGlnbiA9IHZtLnlBbGlnbjtcblx0XHR2YXIgeCA9IHB0Lng7XG5cdFx0dmFyIHkgPSBwdC55O1xuXHRcdHZhciB3aWR0aCA9IHRvb2x0aXBTaXplLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSB0b29sdGlwU2l6ZS5oZWlnaHQ7XG5cdFx0dmFyIHJhZGl1cyA9IHZtLmNvcm5lclJhZGl1cztcblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHgubW92ZVRvKHggKyByYWRpdXMsIHkpO1xuXHRcdGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG5cdFx0XHR0aGlzLmRyYXdDYXJldChwdCwgdG9vbHRpcFNpemUpO1xuXHRcdH1cblx0XHRjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XG5cdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyByYWRpdXMpO1xuXHRcdGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuXHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4ICsgcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcblx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgcmFkaXVzLCB5KTtcblx0XHRjdHguY2xvc2VQYXRoKCk7XG5cblx0XHRjdHguZmlsbCgpO1xuXG5cdFx0aWYgKHZtLmJvcmRlcldpZHRoID4gMCkge1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5fY2hhcnQuY3R4O1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRpZiAodm0ub3BhY2l0eSA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciB0b29sdGlwU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiB2bS53aWR0aCxcblx0XHRcdGhlaWdodDogdm0uaGVpZ2h0XG5cdFx0fTtcblx0XHR2YXIgcHQgPSB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueVxuXHRcdH07XG5cblx0XHQvLyBJRTExL0VkZ2UgZG9lcyBub3QgbGlrZSB2ZXJ5IHNtYWxsIG9wYWNpdGllcywgc28gc25hcCB0byAwXG5cdFx0dmFyIG9wYWNpdHkgPSBNYXRoLmFicyh2bS5vcGFjaXR5IDwgMWUtMykgPyAwIDogdm0ub3BhY2l0eTtcblxuXHRcdC8vIFRydXRoeS9mYWxzZXkgdmFsdWUgZm9yIGVtcHR5IHRvb2x0aXBcblx0XHR2YXIgaGFzVG9vbHRpcENvbnRlbnQgPSB2bS50aXRsZS5sZW5ndGggfHwgdm0uYmVmb3JlQm9keS5sZW5ndGggfHwgdm0uYm9keS5sZW5ndGggfHwgdm0uYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB2bS5mb290ZXIubGVuZ3RoO1xuXG5cdFx0aWYgKHRoaXMuX29wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuXHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG5cblx0XHRcdC8vIERyYXcgQmFja2dyb3VuZFxuXHRcdFx0dGhpcy5kcmF3QmFja2dyb3VuZChwdCwgdm0sIGN0eCwgdG9vbHRpcFNpemUpO1xuXG5cdFx0XHQvLyBEcmF3IFRpdGxlLCBCb2R5LCBhbmQgRm9vdGVyXG5cdFx0XHRwdC55ICs9IHZtLnlQYWRkaW5nO1xuXG5cdFx0XHRoZWxwZXJzJDEucnRsLm92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIHZtLnRleHREaXJlY3Rpb24pO1xuXG5cdFx0XHQvLyBUaXRsZXNcblx0XHRcdHRoaXMuZHJhd1RpdGxlKHB0LCB2bSwgY3R4KTtcblxuXHRcdFx0Ly8gQm9keVxuXHRcdFx0dGhpcy5kcmF3Qm9keShwdCwgdm0sIGN0eCk7XG5cblx0XHRcdC8vIEZvb3RlclxuXHRcdFx0dGhpcy5kcmF3Rm9vdGVyKHB0LCB2bSwgY3R4KTtcblxuXHRcdFx0aGVscGVycyQxLnJ0bC5yZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIHZtLnRleHREaXJlY3Rpb24pO1xuXG5cdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGFuZGxlIGFuIGV2ZW50XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7SUV2ZW50fSBldmVudCAtIFRoZSBldmVudCB0byBoYW5kbGVcblx0ICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIHRvb2x0aXAgY2hhbmdlZFxuXHQgKi9cblx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUuX29wdGlvbnM7XG5cdFx0dmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdG1lLl9sYXN0QWN0aXZlID0gbWUuX2xhc3RBY3RpdmUgfHwgW107XG5cblx0XHQvLyBGaW5kIEFjdGl2ZSBFbGVtZW50cyBmb3IgdG9vbHRpcHNcblx0XHRpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG5cdFx0XHRtZS5fYWN0aXZlID0gW107XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLl9hY3RpdmUgPSBtZS5fY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBvcHRpb25zLm1vZGUsIG9wdGlvbnMpO1xuXHRcdFx0aWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuXHRcdFx0XHRtZS5fYWN0aXZlLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciBMYXN0IEFjdGl2ZXNcblx0XHRjaGFuZ2VkID0gIWhlbHBlcnMkMS5hcnJheUVxdWFscyhtZS5fYWN0aXZlLCBtZS5fbGFzdEFjdGl2ZSk7XG5cblx0XHQvLyBPbmx5IGhhbmRsZSB0YXJnZXQgZXZlbnQgb24gdG9vbHRpcCBjaGFuZ2Vcblx0XHRpZiAoY2hhbmdlZCkge1xuXHRcdFx0bWUuX2xhc3RBY3RpdmUgPSBtZS5fYWN0aXZlO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5lbmFibGVkIHx8IG9wdGlvbnMuY3VzdG9tKSB7XG5cdFx0XHRcdG1lLl9ldmVudFBvc2l0aW9uID0ge1xuXHRcdFx0XHRcdHg6IGUueCxcblx0XHRcdFx0XHR5OiBlLnlcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRtZS51cGRhdGUodHJ1ZSk7XG5cdFx0XHRcdG1lLnBpdm90KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdH1cbn0pO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuVG9vbHRpcC5wb3NpdGlvbmVyc1xuICovXG52YXIgcG9zaXRpb25lcnNfMSA9IHBvc2l0aW9uZXJzO1xuXG52YXIgY29yZV90b29sdGlwID0gZXhwb3J0cyQ0O1xuY29yZV90b29sdGlwLnBvc2l0aW9uZXJzID0gcG9zaXRpb25lcnNfMTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDkgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRlbGVtZW50czoge30sXG5cdGV2ZW50czogW1xuXHRcdCdtb3VzZW1vdmUnLFxuXHRcdCdtb3VzZW91dCcsXG5cdFx0J2NsaWNrJyxcblx0XHQndG91Y2hzdGFydCcsXG5cdFx0J3RvdWNobW92ZSdcblx0XSxcblx0aG92ZXI6IHtcblx0XHRvbkhvdmVyOiBudWxsLFxuXHRcdG1vZGU6ICduZWFyZXN0Jyxcblx0XHRpbnRlcnNlY3Q6IHRydWUsXG5cdFx0YW5pbWF0aW9uRHVyYXRpb246IDQwMFxuXHR9LFxuXHRvbkNsaWNrOiBudWxsLFxuXHRtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxuXHRyZXNwb25zaXZlOiB0cnVlLFxuXHRyZXNwb25zaXZlQW5pbWF0aW9uRHVyYXRpb246IDBcbn0pO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IG1lcmdlIHRoZSBnaXZlbiBjb25maWcgb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGBzY2FsZXNgIG9wdGlvblxuICogYnkgaW5jb3Jwb3JhdGluZyBzY2FsZSBkZWZhdWx0cyBpbiBgeEF4ZXNgIGFuZCBgeUF4ZXNgIGFycmF5IGl0ZW1zLCB0aGVuXG4gKiByZXR1cm5zIGEgZGVlcCBjb3B5IG9mIHRoZSByZXN1bHQsIHRodXMgZG9lc24ndCBhbHRlciBpbnB1dHMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlU2NhbGVDb25maWcoLyogY29uZmlnIG9iamVjdHMgLi4uICovKSB7XG5cdHJldHVybiBoZWxwZXJzJDEubWVyZ2Uoe30sIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSwge1xuXHRcdG1lcmdlcjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdFx0aWYgKGtleSA9PT0gJ3hBeGVzJyB8fCBrZXkgPT09ICd5QXhlcycpIHtcblx0XHRcdFx0dmFyIHNsZW4gPSBzb3VyY2Vba2V5XS5sZW5ndGg7XG5cdFx0XHRcdHZhciBpLCB0eXBlLCBzY2FsZTtcblxuXHRcdFx0XHRpZiAoIXRhcmdldFtrZXldKSB7XG5cdFx0XHRcdFx0dGFyZ2V0W2tleV0gPSBbXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBzbGVuOyArK2kpIHtcblx0XHRcdFx0XHRzY2FsZSA9IHNvdXJjZVtrZXldW2ldO1xuXHRcdFx0XHRcdHR5cGUgPSB2YWx1ZU9yRGVmYXVsdCQ5KHNjYWxlLnR5cGUsIGtleSA9PT0gJ3hBeGVzJyA/ICdjYXRlZ29yeScgOiAnbGluZWFyJyk7XG5cblx0XHRcdFx0XHRpZiAoaSA+PSB0YXJnZXRba2V5XS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHRhcmdldFtrZXldLnB1c2goe30pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghdGFyZ2V0W2tleV1baV0udHlwZSB8fCAoc2NhbGUudHlwZSAmJiBzY2FsZS50eXBlICE9PSB0YXJnZXRba2V5XVtpXS50eXBlKSkge1xuXHRcdFx0XHRcdFx0Ly8gbmV3L3VudHlwZWQgc2NhbGUgb3IgdHlwZSBjaGFuZ2VkOiBsZXQncyBhcHBseSB0aGUgbmV3IGRlZmF1bHRzXG5cdFx0XHRcdFx0XHQvLyB0aGVuIG1lcmdlIHNvdXJjZSBzY2FsZSB0byBjb3JyZWN0bHkgb3ZlcndyaXRlIHRoZSBkZWZhdWx0cy5cblx0XHRcdFx0XHRcdGhlbHBlcnMkMS5tZXJnZSh0YXJnZXRba2V5XVtpXSwgW2NvcmVfc2NhbGVTZXJ2aWNlLmdldFNjYWxlRGVmYXVsdHModHlwZSksIHNjYWxlXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIHNjYWxlcyB0eXBlIGFyZSB0aGUgc2FtZVxuXHRcdFx0XHRcdFx0aGVscGVycyQxLm1lcmdlKHRhcmdldFtrZXldW2ldLCBzY2FsZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWxwZXJzJDEuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IG1lcmdlIHRoZSBnaXZlbiBjb25maWcgb2JqZWN0cyBhcyB0aGUgcm9vdCBvcHRpb25zIGJ5IGhhbmRsaW5nXG4gKiBkZWZhdWx0IHNjYWxlIG9wdGlvbnMgZm9yIHRoZSBgc2NhbGVzYCBhbmQgYHNjYWxlYCBwcm9wZXJ0aWVzLCB0aGVuIHJldHVybnNcbiAqIGEgZGVlcCBjb3B5IG9mIHRoZSByZXN1bHQsIHRodXMgZG9lc24ndCBhbHRlciBpbnB1dHMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZmlnKC8qIGNvbmZpZyBvYmplY3RzIC4uLiAqLykge1xuXHRyZXR1cm4gaGVscGVycyQxLm1lcmdlKHt9LCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyksIHtcblx0XHRtZXJnZXI6IGZ1bmN0aW9uKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHRcdHZhciB0dmFsID0gdGFyZ2V0W2tleV0gfHwge307XG5cdFx0XHR2YXIgc3ZhbCA9IHNvdXJjZVtrZXldO1xuXG5cdFx0XHRpZiAoa2V5ID09PSAnc2NhbGVzJykge1xuXHRcdFx0XHQvLyBzY2FsZSBjb25maWcgbWVyZ2luZyBpcyBjb21wbGV4LiBBZGQgb3VyIG93biBmdW5jdGlvbiBoZXJlIGZvciB0aGF0XG5cdFx0XHRcdHRhcmdldFtrZXldID0gbWVyZ2VTY2FsZUNvbmZpZyh0dmFsLCBzdmFsKTtcblx0XHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnc2NhbGUnKSB7XG5cdFx0XHRcdC8vIHVzZWQgaW4gcG9sYXIgYXJlYSAmIHJhZGFyIGNoYXJ0cyBzaW5jZSB0aGVyZSBpcyBvbmx5IG9uZSBzY2FsZVxuXHRcdFx0XHR0YXJnZXRba2V5XSA9IGhlbHBlcnMkMS5tZXJnZSh0dmFsLCBbY29yZV9zY2FsZVNlcnZpY2UuZ2V0U2NhbGVEZWZhdWx0cyhzdmFsLnR5cGUpLCBzdmFsXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWxwZXJzJDEuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBpbml0Q29uZmlnKGNvbmZpZykge1xuXHRjb25maWcgPSBjb25maWcgfHwge307XG5cblx0Ly8gRG8gTk9UIHVzZSBtZXJnZUNvbmZpZyBmb3IgdGhlIGRhdGEgb2JqZWN0IGJlY2F1c2UgdGhpcyBtZXRob2QgbWVyZ2VzIGFycmF5c1xuXHQvLyBhbmQgc28gd291bGQgY2hhbmdlIHJlZmVyZW5jZXMgdG8gbGFiZWxzIGFuZCBkYXRhc2V0cywgcHJldmVudGluZyBkYXRhIHVwZGF0ZXMuXG5cdHZhciBkYXRhID0gY29uZmlnLmRhdGEgPSBjb25maWcuZGF0YSB8fCB7fTtcblx0ZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG5cdGRhdGEubGFiZWxzID0gZGF0YS5sYWJlbHMgfHwgW107XG5cblx0Y29uZmlnLm9wdGlvbnMgPSBtZXJnZUNvbmZpZyhcblx0XHRjb3JlX2RlZmF1bHRzLmdsb2JhbCxcblx0XHRjb3JlX2RlZmF1bHRzW2NvbmZpZy50eXBlXSxcblx0XHRjb25maWcub3B0aW9ucyB8fCB7fSk7XG5cblx0cmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29uZmlnKGNoYXJ0KSB7XG5cdHZhciBuZXdPcHRpb25zID0gY2hhcnQub3B0aW9ucztcblxuXHRoZWxwZXJzJDEuZWFjaChjaGFydC5zY2FsZXMsIGZ1bmN0aW9uKHNjYWxlKSB7XG5cdFx0Y29yZV9sYXlvdXRzLnJlbW92ZUJveChjaGFydCwgc2NhbGUpO1xuXHR9KTtcblxuXHRuZXdPcHRpb25zID0gbWVyZ2VDb25maWcoXG5cdFx0Y29yZV9kZWZhdWx0cy5nbG9iYWwsXG5cdFx0Y29yZV9kZWZhdWx0c1tjaGFydC5jb25maWcudHlwZV0sXG5cdFx0bmV3T3B0aW9ucyk7XG5cblx0Y2hhcnQub3B0aW9ucyA9IGNoYXJ0LmNvbmZpZy5vcHRpb25zID0gbmV3T3B0aW9ucztcblx0Y2hhcnQuZW5zdXJlU2NhbGVzSGF2ZUlEcygpO1xuXHRjaGFydC5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG5cblx0Ly8gVG9vbHRpcFxuXHRjaGFydC50b29sdGlwLl9vcHRpb25zID0gbmV3T3B0aW9ucy50b29sdGlwcztcblx0Y2hhcnQudG9vbHRpcC5pbml0aWFsaXplKCk7XG59XG5cbmZ1bmN0aW9uIG5leHRBdmFpbGFibGVTY2FsZUlkKGF4ZXNPcHRzLCBwcmVmaXgsIGluZGV4KSB7XG5cdHZhciBpZDtcblx0dmFyIGhhc0lkID0gZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIG9iai5pZCA9PT0gaWQ7XG5cdH07XG5cblx0ZG8ge1xuXHRcdGlkID0gcHJlZml4ICsgaW5kZXgrKztcblx0fSB3aGlsZSAoaGVscGVycyQxLmZpbmRJbmRleChheGVzT3B0cywgaGFzSWQpID49IDApO1xuXG5cdHJldHVybiBpZDtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb25Jc0hvcml6b250YWwocG9zaXRpb24pIHtcblx0cmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmUyTGV2ZWwobDEsIGwyKSB7XG5cdHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG5cdFx0cmV0dXJuIGFbbDFdID09PSBiW2wxXVxuXHRcdFx0PyBhW2wyXSAtIGJbbDJdXG5cdFx0XHQ6IGFbbDFdIC0gYltsMV07XG5cdH07XG59XG5cbnZhciBDaGFydCA9IGZ1bmN0aW9uKGl0ZW0sIGNvbmZpZykge1xuXHR0aGlzLmNvbnN0cnVjdChpdGVtLCBjb25maWcpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmhlbHBlcnMkMS5leHRlbmQoQ2hhcnQucHJvdG90eXBlLCAvKiogQGxlbmRzIENoYXJ0ICovIHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGl0ZW0sIGNvbmZpZykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRjb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG5cblx0XHR2YXIgY29udGV4dCA9IHBsYXRmb3JtLmFjcXVpcmVDb250ZXh0KGl0ZW0sIGNvbmZpZyk7XG5cdFx0dmFyIGNhbnZhcyA9IGNvbnRleHQgJiYgY29udGV4dC5jYW52YXM7XG5cdFx0dmFyIGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuXHRcdHZhciB3aWR0aCA9IGNhbnZhcyAmJiBjYW52YXMud2lkdGg7XG5cblx0XHRtZS5pZCA9IGhlbHBlcnMkMS51aWQoKTtcblx0XHRtZS5jdHggPSBjb250ZXh0O1xuXHRcdG1lLmNhbnZhcyA9IGNhbnZhcztcblx0XHRtZS5jb25maWcgPSBjb25maWc7XG5cdFx0bWUud2lkdGggPSB3aWR0aDtcblx0XHRtZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0bWUuYXNwZWN0UmF0aW8gPSBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG5cdFx0bWUub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuXHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IGZhbHNlO1xuXHRcdG1lLl9sYXllcnMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBDaGFydCBhbmQgQ2hhcnQuQ29udHJvbGxlciBoYXZlIGJlZW4gbWVyZ2VkLFxuXHRcdCAqIHRoZSBcImluc3RhbmNlXCIgc3RpbGwgbmVlZCB0byBiZSBkZWZpbmVkIHNpbmNlIGl0IG1pZ2h0IGJlIGNhbGxlZCBmcm9tIHBsdWdpbnMuXG5cdFx0ICogQHByb3AgQ2hhcnQjY2hhcnRcblx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0bWUuY2hhcnQgPSBtZTtcblx0XHRtZS5jb250cm9sbGVyID0gbWU7IC8vIGNoYXJ0LmNoYXJ0LmNvbnRyb2xsZXIgI2luY2VwdGlvblxuXG5cdFx0Ly8gQWRkIHRoZSBjaGFydCBpbnN0YW5jZSB0byB0aGUgZ2xvYmFsIG5hbWVzcGFjZVxuXHRcdENoYXJ0Lmluc3RhbmNlc1ttZS5pZF0gPSBtZTtcblxuXHRcdC8vIERlZmluZSBhbGlhcyB0byB0aGUgY29uZmlnIGRhdGE6IGBjaGFydC5kYXRhID09PSBjaGFydC5jb25maWcuZGF0YWBcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobWUsICdkYXRhJywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1lLmNvbmZpZy5kYXRhO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0bWUuY29uZmlnLmRhdGEgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmICghY29udGV4dCB8fCAhY2FudmFzKSB7XG5cdFx0XHQvLyBUaGUgZ2l2ZW4gaXRlbSBpcyBub3QgYSBjb21wYXRpYmxlIGNvbnRleHQyZCBlbGVtZW50LCBsZXQncyByZXR1cm4gYmVmb3JlIGZpbmFsaXppbmdcblx0XHRcdC8vIHRoZSBjaGFydCBpbml0aWFsaXphdGlvbiBidXQgYWZ0ZXIgc2V0dGluZyBiYXNpYyBjaGFydCAvIGNvbnRyb2xsZXIgcHJvcGVydGllcyB0aGF0XG5cdFx0XHQvLyBjYW4gaGVscCB0byBmaWd1cmUgb3V0IHRoYXQgdGhlIGNoYXJ0IGlzIG5vdCB2YWxpZCAoZS5nIGNoYXJ0LmNhbnZhcyAhPT0gbnVsbCk7XG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjgwN1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1lLmluaXRpYWxpemUoKTtcblx0XHRtZS51cGRhdGUoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBCZWZvcmUgaW5pdCBwbHVnaW4gbm90aWZpY2F0aW9uXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUluaXQnKTtcblxuXHRcdGhlbHBlcnMkMS5yZXRpbmFTY2FsZShtZSwgbWUub3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdG1lLmJpbmRFdmVudHMoKTtcblxuXHRcdGlmIChtZS5vcHRpb25zLnJlc3BvbnNpdmUpIHtcblx0XHRcdC8vIEluaXRpYWwgcmVzaXplIGJlZm9yZSBjaGFydCBkcmF3cyAobXVzdCBiZSBzaWxlbnQgdG8gcHJlc2VydmUgaW5pdGlhbCBhbmltYXRpb25zKS5cblx0XHRcdG1lLnJlc2l6ZSh0cnVlKTtcblx0XHR9XG5cblx0XHRtZS5pbml0VG9vbFRpcCgpO1xuXG5cdFx0Ly8gQWZ0ZXIgaW5pdCBwbHVnaW4gbm90aWZpY2F0aW9uXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVySW5pdCcpO1xuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdGNsZWFyOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FudmFzLmNsZWFyKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdC8vIFN0b3BzIGFueSBjdXJyZW50IGFuaW1hdGlvbiBsb29wIG9jY3VycmluZ1xuXHRcdGNvcmVfYW5pbWF0aW9ucy5jYW5jZWxBbmltYXRpb24odGhpcyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVzaXplOiBmdW5jdGlvbihzaWxlbnQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgY2FudmFzID0gbWUuY2FudmFzO1xuXHRcdHZhciBhc3BlY3RSYXRpbyA9IChvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgbWUuYXNwZWN0UmF0aW8pIHx8IG51bGw7XG5cblx0XHQvLyB0aGUgY2FudmFzIHJlbmRlciB3aWR0aCBhbmQgaGVpZ2h0IHdpbGwgYmUgY2FzdGVkIHRvIGludGVnZXJzIHNvIG1ha2Ugc3VyZSB0aGF0XG5cdFx0Ly8gdGhlIGNhbnZhcyBkaXNwbGF5IHN0eWxlIHVzZXMgdGhlIHNhbWUgaW50ZWdlciB2YWx1ZXMgdG8gYXZvaWQgYmx1cnJpbmcgZWZmZWN0LlxuXG5cdFx0Ly8gU2V0IHRvIDAgaW5zdGVhZCBvZiBjYW52YXMuc2l6ZSBiZWNhdXNlIHRoZSBzaXplIGRlZmF1bHRzIHRvIDMwMHgxNTAgaWYgdGhlIGVsZW1lbnQgaXMgY29sbGFwc2VkXG5cdFx0dmFyIG5ld1dpZHRoID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihoZWxwZXJzJDEuZ2V0TWF4aW11bVdpZHRoKGNhbnZhcykpKTtcblx0XHR2YXIgbmV3SGVpZ2h0ID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihhc3BlY3RSYXRpbyA/IG5ld1dpZHRoIC8gYXNwZWN0UmF0aW8gOiBoZWxwZXJzJDEuZ2V0TWF4aW11bUhlaWdodChjYW52YXMpKSk7XG5cblx0XHRpZiAobWUud2lkdGggPT09IG5ld1dpZHRoICYmIG1lLmhlaWdodCA9PT0gbmV3SGVpZ2h0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y2FudmFzLndpZHRoID0gbWUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRjYW52YXMuaGVpZ2h0ID0gbWUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXHRcdGNhbnZhcy5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgJ3B4Jztcblx0XHRjYW52YXMuc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgJ3B4JztcblxuXHRcdGhlbHBlcnMkMS5yZXRpbmFTY2FsZShtZSwgb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdGlmICghc2lsZW50KSB7XG5cdFx0XHQvLyBOb3RpZnkgYW55IHBsdWdpbnMgYWJvdXQgdGhlIHJlc2l6ZVxuXHRcdFx0dmFyIG5ld1NpemUgPSB7d2lkdGg6IG5ld1dpZHRoLCBoZWlnaHQ6IG5ld0hlaWdodH07XG5cdFx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAncmVzaXplJywgW25ld1NpemVdKTtcblxuXHRcdFx0Ly8gTm90aWZ5IG9mIHJlc2l6ZVxuXHRcdFx0aWYgKG9wdGlvbnMub25SZXNpemUpIHtcblx0XHRcdFx0b3B0aW9ucy5vblJlc2l6ZShtZSwgbmV3U2l6ZSk7XG5cdFx0XHR9XG5cblx0XHRcdG1lLnN0b3AoKTtcblx0XHRcdG1lLnVwZGF0ZSh7XG5cdFx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLnJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvblxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdGVuc3VyZVNjYWxlc0hhdmVJRHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdHZhciBzY2FsZXNPcHRpb25zID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG5cdFx0dmFyIHNjYWxlT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGU7XG5cblx0XHRoZWxwZXJzJDEuZWFjaChzY2FsZXNPcHRpb25zLnhBeGVzLCBmdW5jdGlvbih4QXhpc09wdGlvbnMsIGluZGV4KSB7XG5cdFx0XHRpZiAoIXhBeGlzT3B0aW9ucy5pZCkge1xuXHRcdFx0XHR4QXhpc09wdGlvbnMuaWQgPSBuZXh0QXZhaWxhYmxlU2NhbGVJZChzY2FsZXNPcHRpb25zLnhBeGVzLCAneC1heGlzLScsIGluZGV4KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGhlbHBlcnMkMS5lYWNoKHNjYWxlc09wdGlvbnMueUF4ZXMsIGZ1bmN0aW9uKHlBeGlzT3B0aW9ucywgaW5kZXgpIHtcblx0XHRcdGlmICgheUF4aXNPcHRpb25zLmlkKSB7XG5cdFx0XHRcdHlBeGlzT3B0aW9ucy5pZCA9IG5leHRBdmFpbGFibGVTY2FsZUlkKHNjYWxlc09wdGlvbnMueUF4ZXMsICd5LWF4aXMtJywgaW5kZXgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKHNjYWxlT3B0aW9ucykge1xuXHRcdFx0c2NhbGVPcHRpb25zLmlkID0gc2NhbGVPcHRpb25zLmlkIHx8ICdzY2FsZSc7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBCdWlsZHMgYSBtYXAgb2Ygc2NhbGUgSUQgdG8gc2NhbGUgb2JqZWN0IGZvciBmdXR1cmUgbG9va3VwLlxuXHQgKi9cblx0YnVpbGRPclVwZGF0ZVNjYWxlczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHNjYWxlcyA9IG1lLnNjYWxlcyB8fCB7fTtcblx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHR2YXIgdXBkYXRlZCA9IE9iamVjdC5rZXlzKHNjYWxlcykucmVkdWNlKGZ1bmN0aW9uKG9iaiwgaWQpIHtcblx0XHRcdG9ialtpZF0gPSBmYWxzZTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fSwge30pO1xuXG5cdFx0aWYgKG9wdGlvbnMuc2NhbGVzKSB7XG5cdFx0XHRpdGVtcyA9IGl0ZW1zLmNvbmNhdChcblx0XHRcdFx0KG9wdGlvbnMuc2NhbGVzLnhBeGVzIHx8IFtdKS5tYXAoZnVuY3Rpb24oeEF4aXNPcHRpb25zKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtvcHRpb25zOiB4QXhpc09wdGlvbnMsIGR0eXBlOiAnY2F0ZWdvcnknLCBkcG9zaXRpb246ICdib3R0b20nfTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdChvcHRpb25zLnNjYWxlcy55QXhlcyB8fCBbXSkubWFwKGZ1bmN0aW9uKHlBeGlzT3B0aW9ucykge1xuXHRcdFx0XHRcdHJldHVybiB7b3B0aW9uczogeUF4aXNPcHRpb25zLCBkdHlwZTogJ2xpbmVhcicsIGRwb3NpdGlvbjogJ2xlZnQnfTtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMuc2NhbGUpIHtcblx0XHRcdGl0ZW1zLnB1c2goe1xuXHRcdFx0XHRvcHRpb25zOiBvcHRpb25zLnNjYWxlLFxuXHRcdFx0XHRkdHlwZTogJ3JhZGlhbExpbmVhcicsXG5cdFx0XHRcdGlzRGVmYXVsdDogdHJ1ZSxcblx0XHRcdFx0ZHBvc2l0aW9uOiAnY2hhcnRBcmVhJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aGVscGVycyQxLmVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdHZhciBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG5cdFx0XHR2YXIgaWQgPSBzY2FsZU9wdGlvbnMuaWQ7XG5cdFx0XHR2YXIgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQkOShzY2FsZU9wdGlvbnMudHlwZSwgaXRlbS5kdHlwZSk7XG5cblx0XHRcdGlmIChwb3NpdGlvbklzSG9yaXpvbnRhbChzY2FsZU9wdGlvbnMucG9zaXRpb24pICE9PSBwb3NpdGlvbklzSG9yaXpvbnRhbChpdGVtLmRwb3NpdGlvbikpIHtcblx0XHRcdFx0c2NhbGVPcHRpb25zLnBvc2l0aW9uID0gaXRlbS5kcG9zaXRpb247XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZWRbaWRdID0gdHJ1ZTtcblx0XHRcdHZhciBzY2FsZSA9IG51bGw7XG5cdFx0XHRpZiAoaWQgaW4gc2NhbGVzICYmIHNjYWxlc1tpZF0udHlwZSA9PT0gc2NhbGVUeXBlKSB7XG5cdFx0XHRcdHNjYWxlID0gc2NhbGVzW2lkXTtcblx0XHRcdFx0c2NhbGUub3B0aW9ucyA9IHNjYWxlT3B0aW9ucztcblx0XHRcdFx0c2NhbGUuY3R4ID0gbWUuY3R4O1xuXHRcdFx0XHRzY2FsZS5jaGFydCA9IG1lO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIHNjYWxlQ2xhc3MgPSBjb3JlX3NjYWxlU2VydmljZS5nZXRTY2FsZUNvbnN0cnVjdG9yKHNjYWxlVHlwZSk7XG5cdFx0XHRcdGlmICghc2NhbGVDbGFzcykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRzY2FsZSA9IG5ldyBzY2FsZUNsYXNzKHtcblx0XHRcdFx0XHRpZDogaWQsXG5cdFx0XHRcdFx0dHlwZTogc2NhbGVUeXBlLFxuXHRcdFx0XHRcdG9wdGlvbnM6IHNjYWxlT3B0aW9ucyxcblx0XHRcdFx0XHRjdHg6IG1lLmN0eCxcblx0XHRcdFx0XHRjaGFydDogbWVcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcblx0XHRcdH1cblxuXHRcdFx0c2NhbGUubWVyZ2VUaWNrc09wdGlvbnMoKTtcblxuXHRcdFx0Ly8gVE9ETyhTQik6IEkgdGhpbmsgd2Ugc2hvdWxkIGJlIGFibGUgdG8gcmVtb3ZlIHRoaXMgY3VzdG9tIGNhc2UgKG9wdGlvbnMuc2NhbGUpXG5cdFx0XHQvLyBhbmQgY29uc2lkZXIgaXQgYXMgYSByZWd1bGFyIHNjYWxlIHBhcnQgb2YgdGhlIFwic2NhbGVzXCJcIiBtYXAgb25seSEgVGhpcyB3b3VsZFxuXHRcdFx0Ly8gbWFrZSB0aGUgbG9naWMgZWFzaWVyIGFuZCByZW1vdmUgc29tZSB1c2VsZXNzPyBjdXN0b20gY29kZS5cblx0XHRcdGlmIChpdGVtLmlzRGVmYXVsdCkge1xuXHRcdFx0XHRtZS5zY2FsZSA9IHNjYWxlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIGNsZWFyIHVwIGRpc2NhcmRlZCBzY2FsZXNcblx0XHRoZWxwZXJzJDEuZWFjaCh1cGRhdGVkLCBmdW5jdGlvbihoYXNVcGRhdGVkLCBpZCkge1xuXHRcdFx0aWYgKCFoYXNVcGRhdGVkKSB7XG5cdFx0XHRcdGRlbGV0ZSBzY2FsZXNbaWRdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0bWUuc2NhbGVzID0gc2NhbGVzO1xuXG5cdFx0Y29yZV9zY2FsZVNlcnZpY2UuYWRkU2NhbGVzVG9MYXlvdXQodGhpcyk7XG5cdH0sXG5cblx0YnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBuZXdDb250cm9sbGVycyA9IFtdO1xuXHRcdHZhciBkYXRhc2V0cyA9IG1lLmRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0XHR2YXIgZGF0YXNldCA9IGRhdGFzZXRzW2ldO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdHZhciB0eXBlID0gZGF0YXNldC50eXBlIHx8IG1lLmNvbmZpZy50eXBlO1xuXG5cdFx0XHRpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuXHRcdFx0XHRtZS5kZXN0cm95RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdG1ldGEgPSBtZS5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdH1cblx0XHRcdG1ldGEudHlwZSA9IHR5cGU7XG5cdFx0XHRtZXRhLm9yZGVyID0gZGF0YXNldC5vcmRlciB8fCAwO1xuXHRcdFx0bWV0YS5pbmRleCA9IGk7XG5cblx0XHRcdGlmIChtZXRhLmNvbnRyb2xsZXIpIHtcblx0XHRcdFx0bWV0YS5jb250cm9sbGVyLnVwZGF0ZUluZGV4KGkpO1xuXHRcdFx0XHRtZXRhLmNvbnRyb2xsZXIubGlua1NjYWxlcygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIENvbnRyb2xsZXJDbGFzcyA9IGNvbnRyb2xsZXJzW21ldGEudHlwZV07XG5cdFx0XHRcdGlmIChDb250cm9sbGVyQ2xhc3MgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignXCInICsgbWV0YS50eXBlICsgJ1wiIGlzIG5vdCBhIGNoYXJ0IHR5cGUuJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKG1lLCBpKTtcblx0XHRcdFx0bmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBuZXdDb250cm9sbGVycztcblx0fSxcblxuXHQvKipcblx0ICogUmVzZXQgdGhlIGVsZW1lbnRzIG9mIGFsbCBkYXRhc2V0c1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cmVzZXRFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRoZWxwZXJzJDEuZWFjaChtZS5kYXRhLmRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdG1lLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlci5yZXNldCgpO1xuXHRcdH0sIG1lKTtcblx0fSxcblxuXHQvKipcblx0KiBSZXNldHMgdGhlIGNoYXJ0IGJhY2sgdG8gaXQncyBzdGF0ZSBiZWZvcmUgdGhlIGluaXRpYWwgYW5pbWF0aW9uXG5cdCovXG5cdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnJlc2V0RWxlbWVudHMoKTtcblx0XHR0aGlzLnRvb2x0aXAuaW5pdGlhbGl6ZSgpO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGlmICghY29uZmlnIHx8IHR5cGVvZiBjb25maWcgIT09ICdvYmplY3QnKSB7XG5cdFx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0Y29uZmlnID0ge1xuXHRcdFx0XHRkdXJhdGlvbjogY29uZmlnLFxuXHRcdFx0XHRsYXp5OiBhcmd1bWVudHNbMV1cblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dXBkYXRlQ29uZmlnKG1lKTtcblxuXHRcdC8vIHBsdWdpbnMgb3B0aW9ucyByZWZlcmVuY2VzIG1pZ2h0IGhhdmUgY2hhbmdlLCBsZXQncyBpbnZhbGlkYXRlIHRoZSBjYWNoZVxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81MTExI2lzc3VlY29tbWVudC0zNTU5MzQxNjdcblx0XHRjb3JlX3BsdWdpbnMuX2ludmFsaWRhdGUobWUpO1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVVcGRhdGUnKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJbiBjYXNlIHRoZSBlbnRpcmUgZGF0YSBvYmplY3QgY2hhbmdlZFxuXHRcdG1lLnRvb2x0aXAuX2RhdGEgPSBtZS5kYXRhO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGRhdGFzZXQgY29udHJvbGxlcnMgYXJlIHVwZGF0ZWQgYW5kIG5ldyBjb250cm9sbGVycyBhcmUgcmVzZXRcblx0XHR2YXIgbmV3Q29udHJvbGxlcnMgPSBtZS5idWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSBhbGwgZGF0YXNldCBjb250cm9sbGVycyBoYXZlIGNvcnJlY3QgbWV0YSBkYXRhIGNvdW50c1xuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBtZS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0bWUuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlci5idWlsZE9yVXBkYXRlRWxlbWVudHMoKTtcblx0XHR9XG5cblx0XHRtZS51cGRhdGVMYXlvdXQoKTtcblxuXHRcdC8vIENhbiBvbmx5IHJlc2V0IHRoZSBuZXcgY29udHJvbGxlcnMgYWZ0ZXIgdGhlIHNjYWxlcyBoYXZlIGJlZW4gdXBkYXRlZFxuXHRcdGlmIChtZS5vcHRpb25zLmFuaW1hdGlvbiAmJiBtZS5vcHRpb25zLmFuaW1hdGlvbi5kdXJhdGlvbikge1xuXHRcdFx0aGVscGVycyQxLmVhY2gobmV3Q29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y29udHJvbGxlci5yZXNldCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0bWUudXBkYXRlRGF0YXNldHMoKTtcblxuXHRcdC8vIE5lZWQgdG8gcmVzZXQgdG9vbHRpcCBpbiBjYXNlIGl0IGlzIGRpc3BsYXllZCB3aXRoIGVsZW1lbnRzIHRoYXQgYXJlIHJlbW92ZWRcblx0XHQvLyBhZnRlciB1cGRhdGUuXG5cdFx0bWUudG9vbHRpcC5pbml0aWFsaXplKCk7XG5cblx0XHQvLyBMYXN0IGFjdGl2ZSBjb250YWlucyBpdGVtcyB0aGF0IHdlcmUgcHJldmlvdXNseSBpbiB0aGUgdG9vbHRpcC5cblx0XHQvLyBXaGVuIHdlIHJlc2V0IHRoZSB0b29sdGlwLCB3ZSBuZWVkIHRvIGNsZWFyIGl0XG5cdFx0bWUubGFzdEFjdGl2ZSA9IFtdO1xuXG5cdFx0Ly8gRG8gdGhpcyBiZWZvcmUgcmVuZGVyIHNvIHRoYXQgYW55IHBsdWdpbnMgdGhhdCBuZWVkIGZpbmFsIHNjYWxlIHVwZGF0ZXMgY2FuIHVzZSBpdFxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclVwZGF0ZScpO1xuXG5cdFx0bWUuX2xheWVycy5zb3J0KGNvbXBhcmUyTGV2ZWwoJ3onLCAnX2lkeCcpKTtcblxuXHRcdGlmIChtZS5fYnVmZmVyZWRSZW5kZXIpIHtcblx0XHRcdG1lLl9idWZmZXJlZFJlcXVlc3QgPSB7XG5cdFx0XHRcdGR1cmF0aW9uOiBjb25maWcuZHVyYXRpb24sXG5cdFx0XHRcdGVhc2luZzogY29uZmlnLmVhc2luZyxcblx0XHRcdFx0bGF6eTogY29uZmlnLmxhenlcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLnJlbmRlcihjb25maWcpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgY2hhcnQgbGF5b3V0IHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVMYXlvdXRgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckxheW91dGAuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHR1cGRhdGVMYXlvdXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUxheW91dCcpID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvcmVfbGF5b3V0cy51cGRhdGUodGhpcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXG5cdFx0bWUuX2xheWVycyA9IFtdO1xuXHRcdGhlbHBlcnMkMS5lYWNoKG1lLmJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdC8vIF9jb25maWd1cmUgaXMgY2FsbGVkIHR3aWNlLCBvbmNlIGluIGNvcmUuc2NhbGUudXBkYXRlIGFuZCBvbmNlIGhlcmUuXG5cdFx0XHQvLyBIZXJlIHRoZSBib3hlcyBhcmUgZnVsbHkgdXBkYXRlZCBhbmQgYXQgdGhlaXIgZmluYWwgcG9zaXRpb25zLlxuXHRcdFx0aWYgKGJveC5fY29uZmlndXJlKSB7XG5cdFx0XHRcdGJveC5fY29uZmlndXJlKCk7XG5cdFx0XHR9XG5cdFx0XHRtZS5fbGF5ZXJzLnB1c2guYXBwbHkobWUuX2xheWVycywgYm94Ll9sYXllcnMoKSk7XG5cdFx0fSwgbWUpO1xuXG5cdFx0bWUuX2xheWVycy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG5cdFx0XHRpdGVtLl9pZHggPSBpbmRleDtcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgYGFmdGVyTGF5b3V0YCBpbnN0ZWFkLlxuXHRcdCAqIEBtZXRob2QgSVBsdWdpbiNhZnRlclNjYWxlVXBkYXRlXG5cdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjUuMFxuXHRcdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclNjYWxlVXBkYXRlJyk7XG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyTGF5b3V0Jyk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgYWxsIGRhdGFzZXRzIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0c1VwZGF0ZWBcblx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyRGF0YXNldHNVcGRhdGVgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dXBkYXRlRGF0YXNldHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRzVXBkYXRlJykgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBtZS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0bWUudXBkYXRlRGF0YXNldChpKTtcblx0XHR9XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGRhdGFzZXQgYXQgaW5kZXggdW5sZXNzIGEgcGx1Z2luIHJldHVybnMgYGZhbHNlYCB0byB0aGUgYGJlZm9yZURhdGFzZXRVcGRhdGVgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXRVcGRhdGVgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dXBkYXRlRGF0YXNldDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuXHRcdHZhciBhcmdzID0ge1xuXHRcdFx0bWV0YTogbWV0YSxcblx0XHRcdGluZGV4OiBpbmRleFxuXHRcdH07XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRVcGRhdGUnLCBbYXJnc10pID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1ldGEuY29udHJvbGxlci5fdXBkYXRlKCk7XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgW2FyZ3NdKTtcblx0fSxcblxuXHRyZW5kZXI6IGZ1bmN0aW9uKGNvbmZpZykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoIWNvbmZpZyB8fCB0eXBlb2YgY29uZmlnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGNvbmZpZyA9IHtcblx0XHRcdFx0ZHVyYXRpb246IGNvbmZpZyxcblx0XHRcdFx0bGF6eTogYXJndW1lbnRzWzFdXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHZhciBhbmltYXRpb25PcHRpb25zID0gbWUub3B0aW9ucy5hbmltYXRpb247XG5cdFx0dmFyIGR1cmF0aW9uID0gdmFsdWVPckRlZmF1bHQkOShjb25maWcuZHVyYXRpb24sIGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5kdXJhdGlvbik7XG5cdFx0dmFyIGxhenkgPSBjb25maWcubGF6eTtcblxuXHRcdGlmIChjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlUmVuZGVyJykgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbihhbmltYXRpb24pIHtcblx0XHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclJlbmRlcicpO1xuXHRcdFx0aGVscGVycyQxLmNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vbkNvbXBsZXRlLCBbYW5pbWF0aW9uXSwgbWUpO1xuXHRcdH07XG5cblx0XHRpZiAoYW5pbWF0aW9uT3B0aW9ucyAmJiBkdXJhdGlvbikge1xuXHRcdFx0dmFyIGFuaW1hdGlvbiA9IG5ldyBjb3JlX2FuaW1hdGlvbih7XG5cdFx0XHRcdG51bVN0ZXBzOiBkdXJhdGlvbiAvIDE2LjY2LCAvLyA2MCBmcHNcblx0XHRcdFx0ZWFzaW5nOiBjb25maWcuZWFzaW5nIHx8IGFuaW1hdGlvbk9wdGlvbnMuZWFzaW5nLFxuXG5cdFx0XHRcdHJlbmRlcjogZnVuY3Rpb24oY2hhcnQsIGFuaW1hdGlvbk9iamVjdCkge1xuXHRcdFx0XHRcdHZhciBlYXNpbmdGdW5jdGlvbiA9IGhlbHBlcnMkMS5lYXNpbmcuZWZmZWN0c1thbmltYXRpb25PYmplY3QuZWFzaW5nXTtcblx0XHRcdFx0XHR2YXIgY3VycmVudFN0ZXAgPSBhbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXA7XG5cdFx0XHRcdFx0dmFyIHN0ZXBEZWNpbWFsID0gY3VycmVudFN0ZXAgLyBhbmltYXRpb25PYmplY3QubnVtU3RlcHM7XG5cblx0XHRcdFx0XHRjaGFydC5kcmF3KGVhc2luZ0Z1bmN0aW9uKHN0ZXBEZWNpbWFsKSwgc3RlcERlY2ltYWwsIGN1cnJlbnRTdGVwKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRvbkFuaW1hdGlvblByb2dyZXNzOiBhbmltYXRpb25PcHRpb25zLm9uUHJvZ3Jlc3MsXG5cdFx0XHRcdG9uQW5pbWF0aW9uQ29tcGxldGU6IG9uQ29tcGxldGVcblx0XHRcdH0pO1xuXG5cdFx0XHRjb3JlX2FuaW1hdGlvbnMuYWRkQW5pbWF0aW9uKG1lLCBhbmltYXRpb24sIGR1cmF0aW9uLCBsYXp5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuZHJhdygpO1xuXG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM3ODFcblx0XHRcdG9uQ29tcGxldGUobmV3IGNvcmVfYW5pbWF0aW9uKHtudW1TdGVwczogMCwgY2hhcnQ6IG1lfSkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGksIGxheWVycztcblxuXHRcdG1lLmNsZWFyKCk7XG5cblx0XHRpZiAoaGVscGVycyQxLmlzTnVsbE9yVW5kZWYoZWFzaW5nVmFsdWUpKSB7XG5cdFx0XHRlYXNpbmdWYWx1ZSA9IDE7XG5cdFx0fVxuXG5cdFx0bWUudHJhbnNpdGlvbihlYXNpbmdWYWx1ZSk7XG5cblx0XHRpZiAobWUud2lkdGggPD0gMCB8fCBtZS5oZWlnaHQgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlRHJhdycsIFtlYXNpbmdWYWx1ZV0pID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEJlY2F1c2Ugb2YgcGx1Z2luIGhvb2tzIChiZWZvcmUvYWZ0ZXJEYXRhc2V0c0RyYXcpLCBkYXRhc2V0cyBjYW4ndFxuXHRcdC8vIGN1cnJlbnRseSBiZSBwYXJ0IG9mIGxheWVycy4gSW5zdGVhZCwgd2UgZHJhd1xuXHRcdC8vIGxheWVycyA8PSAwIGJlZm9yZShkZWZhdWx0LCBiYWNrd2FyZCBjb21wYXQpLCBhbmQgdGhlIHJlc3QgYWZ0ZXJcblx0XHRsYXllcnMgPSBtZS5fbGF5ZXJzO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoICYmIGxheWVyc1tpXS56IDw9IDA7ICsraSkge1xuXHRcdFx0bGF5ZXJzW2ldLmRyYXcobWUuY2hhcnRBcmVhKTtcblx0XHR9XG5cblx0XHRtZS5kcmF3RGF0YXNldHMoZWFzaW5nVmFsdWUpO1xuXG5cdFx0Ly8gUmVzdCBvZiBsYXllcnNcblx0XHRmb3IgKDsgaSA8IGxheWVycy5sZW5ndGg7ICsraSkge1xuXHRcdFx0bGF5ZXJzW2ldLmRyYXcobWUuY2hhcnRBcmVhKTtcblx0XHR9XG5cblx0XHRtZS5fZHJhd1Rvb2x0aXAoZWFzaW5nVmFsdWUpO1xuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRHJhdycsIFtlYXNpbmdWYWx1ZV0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dHJhbnNpdGlvbjogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSAobWUuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpZiAobWUuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRtZS5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1lLnRvb2x0aXAudHJhbnNpdGlvbihlYXNpbmdWYWx1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0U29ydGVkRGF0YXNldE1ldGFzOiBmdW5jdGlvbihmaWx0ZXJWaXNpYmxlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgZGF0YXNldHMgPSBtZS5kYXRhLmRhdGFzZXRzIHx8IFtdO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmICghZmlsdGVyVmlzaWJsZSB8fCBtZS5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKG1lLmdldERhdGFzZXRNZXRhKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXN1bHQuc29ydChjb21wYXJlMkxldmVsKCdvcmRlcicsICdpbmRleCcpKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhczogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFNvcnRlZERhdGFzZXRNZXRhcyh0cnVlKTtcblx0fSxcblxuXHQvKipcblx0ICogRHJhd3MgYWxsIGRhdGFzZXRzIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0c0RyYXdgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXRzRHJhd2AuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRkcmF3RGF0YXNldHM6IGZ1bmN0aW9uKGVhc2luZ1ZhbHVlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YXNldHMsIGk7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRzRHJhdycsIFtlYXNpbmdWYWx1ZV0pID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1ldGFzZXRzID0gbWUuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcblx0XHRmb3IgKGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuXHRcdFx0bWUuZHJhd0RhdGFzZXQobWV0YXNldHNbaV0sIGVhc2luZ1ZhbHVlKTtcblx0XHR9XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0c0RyYXcnLCBbZWFzaW5nVmFsdWVdKTtcblx0fSxcblxuXHQvKipcblx0ICogRHJhd3MgZGF0YXNldCBhdCBpbmRleCB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlRGF0YXNldERyYXdgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXREcmF3YC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGRyYXdEYXRhc2V0OiBmdW5jdGlvbihtZXRhLCBlYXNpbmdWYWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGFyZ3MgPSB7XG5cdFx0XHRtZXRhOiBtZXRhLFxuXHRcdFx0aW5kZXg6IG1ldGEuaW5kZXgsXG5cdFx0XHRlYXNpbmdWYWx1ZTogZWFzaW5nVmFsdWVcblx0XHR9O1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0RHJhdycsIFthcmdzXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bWV0YS5jb250cm9sbGVyLmRyYXcoZWFzaW5nVmFsdWUpO1xuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldERyYXcnLCBbYXJnc10pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0b29sdGlwIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVUb29sdGlwRHJhd2Bcblx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyVG9vbHRpcERyYXdgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdUb29sdGlwOiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRvb2x0aXAgPSBtZS50b29sdGlwO1xuXHRcdHZhciBhcmdzID0ge1xuXHRcdFx0dG9vbHRpcDogdG9vbHRpcCxcblx0XHRcdGVhc2luZ1ZhbHVlOiBlYXNpbmdWYWx1ZVxuXHRcdH07XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZVRvb2x0aXBEcmF3JywgW2FyZ3NdKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0b29sdGlwLmRyYXcoKTtcblxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclRvb2x0aXBEcmF3JywgW2FyZ3NdKTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0IHRoZSBzaW5nbGUgZWxlbWVudCB0aGF0IHdhcyBjbGlja2VkIG9uXG5cdCAqIEByZXR1cm4gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRhdGFzZXQgaW5kZXggYW5kIGVsZW1lbnQgaW5kZXggb2YgdGhlIG1hdGNoaW5nIGVsZW1lbnQuIEFsc28gY29udGFpbnMgdGhlIHJlY3RhbmdsZSB0aGF0IHdhcyBkcmF3XG5cdCAqL1xuXHRnZXRFbGVtZW50QXRFdmVudDogZnVuY3Rpb24oZSkge1xuXHRcdHJldHVybiBjb3JlX2ludGVyYWN0aW9uLm1vZGVzLnNpbmdsZSh0aGlzLCBlKTtcblx0fSxcblxuXHRnZXRFbGVtZW50c0F0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHRyZXR1cm4gY29yZV9pbnRlcmFjdGlvbi5tb2Rlcy5sYWJlbCh0aGlzLCBlLCB7aW50ZXJzZWN0OiB0cnVlfSk7XG5cdH0sXG5cblx0Z2V0RWxlbWVudHNBdFhBeGlzOiBmdW5jdGlvbihlKSB7XG5cdFx0cmV0dXJuIGNvcmVfaW50ZXJhY3Rpb24ubW9kZXNbJ3gtYXhpcyddKHRoaXMsIGUsIHtpbnRlcnNlY3Q6IHRydWV9KTtcblx0fSxcblxuXHRnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlOiBmdW5jdGlvbihlLCBtb2RlLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1ldGhvZCA9IGNvcmVfaW50ZXJhY3Rpb24ubW9kZXNbbW9kZV07XG5cdFx0aWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiBtZXRob2QodGhpcywgZSwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtdO1xuXHR9LFxuXG5cdGdldERhdGFzZXRBdEV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0cmV0dXJuIGNvcmVfaW50ZXJhY3Rpb24ubW9kZXMuZGF0YXNldCh0aGlzLCBlLCB7aW50ZXJzZWN0OiB0cnVlfSk7XG5cdH0sXG5cblx0Z2V0RGF0YXNldE1ldGE6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG5cdFx0aWYgKCFkYXRhc2V0Ll9tZXRhKSB7XG5cdFx0XHRkYXRhc2V0Ll9tZXRhID0ge307XG5cdFx0fVxuXG5cdFx0dmFyIG1ldGEgPSBkYXRhc2V0Ll9tZXRhW21lLmlkXTtcblx0XHRpZiAoIW1ldGEpIHtcblx0XHRcdG1ldGEgPSBkYXRhc2V0Ll9tZXRhW21lLmlkXSA9IHtcblx0XHRcdFx0dHlwZTogbnVsbCxcblx0XHRcdFx0ZGF0YTogW10sXG5cdFx0XHRcdGRhdGFzZXQ6IG51bGwsXG5cdFx0XHRcdGNvbnRyb2xsZXI6IG51bGwsXG5cdFx0XHRcdGhpZGRlbjogbnVsbCxcdFx0XHQvLyBTZWUgaXNEYXRhc2V0VmlzaWJsZSgpIGNvbW1lbnRcblx0XHRcdFx0eEF4aXNJRDogbnVsbCxcblx0XHRcdFx0eUF4aXNJRDogbnVsbCxcblx0XHRcdFx0b3JkZXI6IGRhdGFzZXQub3JkZXIgfHwgMCxcblx0XHRcdFx0aW5kZXg6IGRhdGFzZXRJbmRleFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWV0YTtcblx0fSxcblxuXHRnZXRWaXNpYmxlRGF0YXNldENvdW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY291bnQgPSAwO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0aWYgKHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY291bnQ7XG5cdH0sXG5cblx0aXNEYXRhc2V0VmlzaWJsZTogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0dmFyIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cblx0XHQvLyBtZXRhLmhpZGRlbiBpcyBhIHBlciBjaGFydCBkYXRhc2V0IGhpZGRlbiBmbGFnIG92ZXJyaWRlIHdpdGggMyBzdGF0ZXM6IGlmIHRydWUgb3IgZmFsc2UsXG5cdFx0Ly8gdGhlIGRhdGFzZXQuaGlkZGVuIHZhbHVlIGlzIGlnbm9yZWQsIGVsc2UgaWYgbnVsbCwgdGhlIGRhdGFzZXQgaGlkZGVuIHN0YXRlIGlzIHJldHVybmVkLlxuXHRcdHJldHVybiB0eXBlb2YgbWV0YS5oaWRkZW4gPT09ICdib29sZWFuJyA/ICFtZXRhLmhpZGRlbiA6ICF0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5oaWRkZW47XG5cdH0sXG5cblx0Z2VuZXJhdGVMZWdlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMubGVnZW5kQ2FsbGJhY2sodGhpcyk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRkZXN0cm95RGF0YXNldE1ldGE6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBpZCA9IHRoaXMuaWQ7XG5cdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcblx0XHR2YXIgbWV0YSA9IGRhdGFzZXQuX21ldGEgJiYgZGF0YXNldC5fbWV0YVtpZF07XG5cblx0XHRpZiAobWV0YSkge1xuXHRcdFx0bWV0YS5jb250cm9sbGVyLmRlc3Ryb3koKTtcblx0XHRcdGRlbGV0ZSBkYXRhc2V0Ll9tZXRhW2lkXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2FudmFzID0gbWUuY2FudmFzO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0bWUuc3RvcCgpO1xuXG5cdFx0Ly8gZGF0YXNldCBjb250cm9sbGVycyBuZWVkIHRvIGNsZWFudXAgYXNzb2NpYXRlZCBkYXRhXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IG1lLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZS5kZXN0cm95RGF0YXNldE1ldGEoaSk7XG5cdFx0fVxuXG5cdFx0aWYgKGNhbnZhcykge1xuXHRcdFx0bWUudW5iaW5kRXZlbnRzKCk7XG5cdFx0XHRoZWxwZXJzJDEuY2FudmFzLmNsZWFyKG1lKTtcblx0XHRcdHBsYXRmb3JtLnJlbGVhc2VDb250ZXh0KG1lLmN0eCk7XG5cdFx0XHRtZS5jYW52YXMgPSBudWxsO1xuXHRcdFx0bWUuY3R4ID0gbnVsbDtcblx0XHR9XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnZGVzdHJveScpO1xuXG5cdFx0ZGVsZXRlIENoYXJ0Lmluc3RhbmNlc1ttZS5pZF07XG5cdH0sXG5cblx0dG9CYXNlNjRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTC5hcHBseSh0aGlzLmNhbnZhcywgYXJndW1lbnRzKTtcblx0fSxcblxuXHRpbml0VG9vbFRpcDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRtZS50b29sdGlwID0gbmV3IGNvcmVfdG9vbHRpcCh7XG5cdFx0XHRfY2hhcnQ6IG1lLFxuXHRcdFx0X2NoYXJ0SW5zdGFuY2U6IG1lLCAvLyBkZXByZWNhdGVkLCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cdFx0XHRfZGF0YTogbWUuZGF0YSxcblx0XHRcdF9vcHRpb25zOiBtZS5vcHRpb25zLnRvb2x0aXBzXG5cdFx0fSwgbWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0YmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGlzdGVuZXJzID0gbWUuX2xpc3RlbmVycyA9IHt9O1xuXHRcdHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWUuZXZlbnRIYW5kbGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cblx0XHRoZWxwZXJzJDEuZWFjaChtZS5vcHRpb25zLmV2ZW50cywgZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0cGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihtZSwgdHlwZSwgbGlzdGVuZXIpO1xuXHRcdFx0bGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG5cdFx0fSk7XG5cblx0XHQvLyBFbGVtZW50cyB1c2VkIHRvIGRldGVjdCBzaXplIGNoYW5nZSBzaG91bGQgbm90IGJlIGluamVjdGVkIGZvciBub24gcmVzcG9uc2l2ZSBjaGFydHMuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yMjEwXG5cdFx0aWYgKG1lLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuXHRcdFx0bGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWUucmVzaXplKCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKG1lLCAncmVzaXplJywgbGlzdGVuZXIpO1xuXHRcdFx0bGlzdGVuZXJzLnJlc2l6ZSA9IGxpc3RlbmVyO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHVuYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGlzdGVuZXJzID0gbWUuX2xpc3RlbmVycztcblx0XHRpZiAoIWxpc3RlbmVycykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRlbGV0ZSBtZS5fbGlzdGVuZXJzO1xuXHRcdGhlbHBlcnMkMS5lYWNoKGxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIsIHR5cGUpIHtcblx0XHRcdHBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIobWUsIHR5cGUsIGxpc3RlbmVyKTtcblx0XHR9KTtcblx0fSxcblxuXHR1cGRhdGVIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50cywgbW9kZSwgZW5hYmxlZCkge1xuXHRcdHZhciBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcblx0XHR2YXIgZWxlbWVudCwgaSwgaWxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcblx0XHRcdGlmIChlbGVtZW50KSB7XG5cdFx0XHRcdHRoaXMuZ2V0RGF0YXNldE1ldGEoZWxlbWVudC5fZGF0YXNldEluZGV4KS5jb250cm9sbGVyW3ByZWZpeCArICdIb3ZlclN0eWxlJ10oZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG1vZGUgPT09ICdkYXRhc2V0Jykge1xuXHRcdFx0dGhpcy5nZXREYXRhc2V0TWV0YShlbGVtZW50c1swXS5fZGF0YXNldEluZGV4KS5jb250cm9sbGVyWydfJyArIHByZWZpeCArICdEYXRhc2V0SG92ZXJTdHlsZSddKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZXZlbnRIYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdG9vbHRpcCA9IG1lLnRvb2x0aXA7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUV2ZW50JywgW2VdKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBCdWZmZXIgYW55IHVwZGF0ZSBjYWxscyBzbyB0aGF0IHJlbmRlcnMgZG8gbm90IG9jY3VyXG5cdFx0bWUuX2J1ZmZlcmVkUmVuZGVyID0gdHJ1ZTtcblx0XHRtZS5fYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuXHRcdHZhciBjaGFuZ2VkID0gbWUuaGFuZGxlRXZlbnQoZSk7XG5cdFx0Ly8gZm9yIHNtb290aCB0b29sdGlwIGFuaW1hdGlvbnMgaXNzdWUgIzQ5ODlcblx0XHQvLyB0aGUgdG9vbHRpcCBzaG91bGQgYmUgdGhlIHNvdXJjZSBvZiBjaGFuZ2Vcblx0XHQvLyBBbmltYXRpb24gY2hlY2sgd29ya2Fyb3VuZDpcblx0XHQvLyB0b29sdGlwLl9zdGFydCB3aWxsIGJlIG51bGwgd2hlbiB0b29sdGlwIGlzbid0IGFuaW1hdGluZ1xuXHRcdGlmICh0b29sdGlwKSB7XG5cdFx0XHRjaGFuZ2VkID0gdG9vbHRpcC5fc3RhcnRcblx0XHRcdFx0PyB0b29sdGlwLmhhbmRsZUV2ZW50KGUpXG5cdFx0XHRcdDogY2hhbmdlZCB8IHRvb2x0aXAuaGFuZGxlRXZlbnQoZSk7XG5cdFx0fVxuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRXZlbnQnLCBbZV0pO1xuXG5cdFx0dmFyIGJ1ZmZlcmVkUmVxdWVzdCA9IG1lLl9idWZmZXJlZFJlcXVlc3Q7XG5cdFx0aWYgKGJ1ZmZlcmVkUmVxdWVzdCkge1xuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBhbiB1cGRhdGUgdGhhdCB3YXMgdHJpZ2dlcmVkLCB3ZSBuZWVkIHRvIGRvIGEgbm9ybWFsIHJlbmRlclxuXHRcdFx0bWUucmVuZGVyKGJ1ZmZlcmVkUmVxdWVzdCk7XG5cdFx0fSBlbHNlIGlmIChjaGFuZ2VkICYmICFtZS5hbmltYXRpbmcpIHtcblx0XHRcdC8vIElmIGVudGVyaW5nLCBsZWF2aW5nLCBvciBjaGFuZ2luZyBlbGVtZW50cywgYW5pbWF0ZSB0aGUgY2hhbmdlIHZpYSBwaXZvdFxuXHRcdFx0bWUuc3RvcCgpO1xuXG5cdFx0XHQvLyBXZSBvbmx5IG5lZWQgdG8gcmVuZGVyIGF0IHRoaXMgcG9pbnQuIFVwZGF0aW5nIHdpbGwgY2F1c2Ugc2NhbGVzIHRvIGJlXG5cdFx0XHQvLyByZWNvbXB1dGVkIGdlbmVyYXRpbmcgZmxpY2tlciAmIHVzaW5nIG1vcmUgbWVtb3J5IHRoYW4gbmVjZXNzYXJ5LlxuXHRcdFx0bWUucmVuZGVyKHtcblx0XHRcdFx0ZHVyYXRpb246IG1lLm9wdGlvbnMuaG92ZXIuYW5pbWF0aW9uRHVyYXRpb24sXG5cdFx0XHRcdGxhenk6IHRydWVcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IGZhbHNlO1xuXHRcdG1lLl9idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgYW4gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtJRXZlbnR9IGV2ZW50IHRoZSBldmVudCB0byBoYW5kbGVcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY2hhcnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cdCAqL1xuXHRoYW5kbGVFdmVudDogZnVuY3Rpb24oZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zIHx8IHt9O1xuXHRcdHZhciBob3Zlck9wdGlvbnMgPSBvcHRpb25zLmhvdmVyO1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRtZS5sYXN0QWN0aXZlID0gbWUubGFzdEFjdGl2ZSB8fCBbXTtcblxuXHRcdC8vIEZpbmQgQWN0aXZlIEVsZW1lbnRzIGZvciBob3ZlciBhbmQgdG9vbHRpcHNcblx0XHRpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG5cdFx0XHRtZS5hY3RpdmUgPSBbXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuYWN0aXZlID0gbWUuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zKTtcblx0XHR9XG5cblx0XHQvLyBJbnZva2Ugb25Ib3ZlciBob29rXG5cdFx0Ly8gTmVlZCB0byBjYWxsIHdpdGggbmF0aXZlIGV2ZW50IGhlcmUgdG8gbm90IGJyZWFrIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciB8fCBvcHRpb25zLmhvdmVyLm9uSG92ZXIsIFtlLm5hdGl2ZSwgbWUuYWN0aXZlXSwgbWUpO1xuXG5cdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0aWYgKG9wdGlvbnMub25DbGljaykge1xuXHRcdFx0XHQvLyBVc2UgZS5uYXRpdmUgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0b3B0aW9ucy5vbkNsaWNrLmNhbGwobWUsIGUubmF0aXZlLCBtZS5hY3RpdmUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBzdHlsaW5nIGZvciBsYXN0IGFjdGl2ZSAoZXZlbiBpZiBpdCBtYXkgc3RpbGwgYmUgYWN0aXZlKVxuXHRcdGlmIChtZS5sYXN0QWN0aXZlLmxlbmd0aCkge1xuXHRcdFx0bWUudXBkYXRlSG92ZXJTdHlsZShtZS5sYXN0QWN0aXZlLCBob3Zlck9wdGlvbnMubW9kZSwgZmFsc2UpO1xuXHRcdH1cblxuXHRcdC8vIEJ1aWx0IGluIGhvdmVyIHN0eWxpbmdcblx0XHRpZiAobWUuYWN0aXZlLmxlbmd0aCAmJiBob3Zlck9wdGlvbnMubW9kZSkge1xuXHRcdFx0bWUudXBkYXRlSG92ZXJTdHlsZShtZS5hY3RpdmUsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcblx0XHR9XG5cblx0XHRjaGFuZ2VkID0gIWhlbHBlcnMkMS5hcnJheUVxdWFscyhtZS5hY3RpdmUsIG1lLmxhc3RBY3RpdmUpO1xuXG5cdFx0Ly8gUmVtZW1iZXIgTGFzdCBBY3RpdmVzXG5cdFx0bWUubGFzdEFjdGl2ZSA9IG1lLmFjdGl2ZTtcblxuXHRcdHJldHVybiBjaGFuZ2VkO1xuXHR9XG59KTtcblxuLyoqXG4gKiBOT1RFKFNCKSBXZSBhY3R1YWxseSBkb24ndCB1c2UgdGhpcyBjb250YWluZXIgYW55bW9yZSBidXQgd2UgbmVlZCB0byBrZWVwIGl0XG4gKiBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gVGhvdWdoLCBpdCBjYW4gc3RpbGwgYmUgdXNlZnVsIGZvciBwbHVnaW5zIHRoYXRcbiAqIHdvdWxkIG5lZWQgdG8gd29yayBvbiBtdWx0aXBsZSBjaGFydHM/IVxuICovXG5DaGFydC5pbnN0YW5jZXMgPSB7fTtcblxudmFyIGNvcmVfY29udHJvbGxlciA9IENoYXJ0O1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0IGluc3RlYWQuXG4gKiBAY2xhc3MgQ2hhcnQuQ29udHJvbGxlclxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjZcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbkNoYXJ0LkNvbnRyb2xsZXIgPSBDaGFydDtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlLlxuICogQG5hbWVzcGFjZSBDaGFydFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjhcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbkNoYXJ0LnR5cGVzID0ge307XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZS5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5jb25maWdNZXJnZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycyQxLmNvbmZpZ01lcmdlID0gbWVyZ2VDb25maWc7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZS5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5zY2FsZU1lcmdlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzJDEuc2NhbGVNZXJnZSA9IG1lcmdlU2NhbGVDb25maWc7XG5cbnZhciBjb3JlX2hlbHBlcnMgPSBmdW5jdGlvbigpIHtcblxuXHQvLyAtLSBCYXNpYyBqcyB1dGlsaXR5IG1ldGhvZHNcblxuXHRoZWxwZXJzJDEud2hlcmUgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBmaWx0ZXJDYWxsYmFjaykge1xuXHRcdGlmIChoZWxwZXJzJDEuaXNBcnJheShjb2xsZWN0aW9uKSAmJiBBcnJheS5wcm90b3R5cGUuZmlsdGVyKSB7XG5cdFx0XHRyZXR1cm4gY29sbGVjdGlvbi5maWx0ZXIoZmlsdGVyQ2FsbGJhY2spO1xuXHRcdH1cblx0XHR2YXIgZmlsdGVyZWQgPSBbXTtcblxuXHRcdGhlbHBlcnMkMS5lYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmIChmaWx0ZXJDYWxsYmFjayhpdGVtKSkge1xuXHRcdFx0XHRmaWx0ZXJlZC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGZpbHRlcmVkO1xuXHR9O1xuXHRoZWxwZXJzJDEuZmluZEluZGV4ID0gQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCA/XG5cdFx0ZnVuY3Rpb24oYXJyYXksIGNhbGxiYWNrLCBzY29wZSkge1xuXHRcdFx0cmV0dXJuIGFycmF5LmZpbmRJbmRleChjYWxsYmFjaywgc2NvcGUpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKGFycmF5LCBjYWxsYmFjaywgc2NvcGUpIHtcblx0XHRcdHNjb3BlID0gc2NvcGUgPT09IHVuZGVmaW5lZCA/IGFycmF5IDogc2NvcGU7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAoY2FsbGJhY2suY2FsbChzY29wZSwgYXJyYXlbaV0sIGksIGFycmF5KSkge1xuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fTtcblx0aGVscGVycyQxLmZpbmROZXh0V2hlcmUgPSBmdW5jdGlvbihhcnJheVRvU2VhcmNoLCBmaWx0ZXJDYWxsYmFjaywgc3RhcnRJbmRleCkge1xuXHRcdC8vIERlZmF1bHQgdG8gc3RhcnQgb2YgdGhlIGFycmF5XG5cdFx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKHN0YXJ0SW5kZXgpKSB7XG5cdFx0XHRzdGFydEluZGV4ID0gLTE7XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSBzdGFydEluZGV4ICsgMTsgaSA8IGFycmF5VG9TZWFyY2gubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBjdXJyZW50SXRlbSA9IGFycmF5VG9TZWFyY2hbaV07XG5cdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soY3VycmVudEl0ZW0pKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50SXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGhlbHBlcnMkMS5maW5kUHJldmlvdXNXaGVyZSA9IGZ1bmN0aW9uKGFycmF5VG9TZWFyY2gsIGZpbHRlckNhbGxiYWNrLCBzdGFydEluZGV4KSB7XG5cdFx0Ly8gRGVmYXVsdCB0byBlbmQgb2YgdGhlIGFycmF5XG5cdFx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKHN0YXJ0SW5kZXgpKSB7XG5cdFx0XHRzdGFydEluZGV4ID0gYXJyYXlUb1NlYXJjaC5sZW5ndGg7XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSBzdGFydEluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdHZhciBjdXJyZW50SXRlbSA9IGFycmF5VG9TZWFyY2hbaV07XG5cdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soY3VycmVudEl0ZW0pKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50SXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gLS0gTWF0aCBtZXRob2RzXG5cdGhlbHBlcnMkMS5pc051bWJlciA9IGZ1bmN0aW9uKG4pIHtcblx0XHRyZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xuXHR9O1xuXHRoZWxwZXJzJDEuYWxtb3N0RXF1YWxzID0gZnVuY3Rpb24oeCwgeSwgZXBzaWxvbikge1xuXHRcdHJldHVybiBNYXRoLmFicyh4IC0geSkgPCBlcHNpbG9uO1xuXHR9O1xuXHRoZWxwZXJzJDEuYWxtb3N0V2hvbGUgPSBmdW5jdGlvbih4LCBlcHNpbG9uKSB7XG5cdFx0dmFyIHJvdW5kZWQgPSBNYXRoLnJvdW5kKHgpO1xuXHRcdHJldHVybiAoKHJvdW5kZWQgLSBlcHNpbG9uKSA8PSB4KSAmJiAoKHJvdW5kZWQgKyBlcHNpbG9uKSA+PSB4KTtcblx0fTtcblx0aGVscGVycyQxLm1heCA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cdFx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihtYXgsIHZhbHVlKSB7XG5cdFx0XHRpZiAoIWlzTmFOKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgobWF4LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF4O1xuXHRcdH0sIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG5cdH07XG5cdGhlbHBlcnMkMS5taW4gPSBmdW5jdGlvbihhcnJheSkge1xuXHRcdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24obWluLCB2YWx1ZSkge1xuXHRcdFx0aWYgKCFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgubWluKG1pbiwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1pbjtcblx0XHR9LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuXHR9O1xuXHRoZWxwZXJzJDEuc2lnbiA9IE1hdGguc2lnbiA/XG5cdFx0ZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIE1hdGguc2lnbih4KTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbih4KSB7XG5cdFx0XHR4ID0gK3g7IC8vIGNvbnZlcnQgdG8gYSBudW1iZXJcblx0XHRcdGlmICh4ID09PSAwIHx8IGlzTmFOKHgpKSB7XG5cdFx0XHRcdHJldHVybiB4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHggPiAwID8gMSA6IC0xO1xuXHRcdH07XG5cdGhlbHBlcnMkMS50b1JhZGlhbnMgPSBmdW5jdGlvbihkZWdyZWVzKSB7XG5cdFx0cmV0dXJuIGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MCk7XG5cdH07XG5cdGhlbHBlcnMkMS50b0RlZ3JlZXMgPSBmdW5jdGlvbihyYWRpYW5zKSB7XG5cdFx0cmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gTWF0aC5QSSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuXHQgKiBpLmUuIHRoZSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50LCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBOdW1iZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gQSBudW1iZXIuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRoZWxwZXJzJDEuX2RlY2ltYWxQbGFjZXMgPSBmdW5jdGlvbih4KSB7XG5cdFx0aWYgKCFoZWxwZXJzJDEuaXNGaW5pdGUoeCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGUgPSAxO1xuXHRcdHZhciBwID0gMDtcblx0XHR3aGlsZSAoTWF0aC5yb3VuZCh4ICogZSkgLyBlICE9PSB4KSB7XG5cdFx0XHRlICo9IDEwO1xuXHRcdFx0cCsrO1xuXHRcdH1cblx0XHRyZXR1cm4gcDtcblx0fTtcblxuXHQvLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuXHRoZWxwZXJzJDEuZ2V0QW5nbGVGcm9tUG9pbnQgPSBmdW5jdGlvbihjZW50cmVQb2ludCwgYW5nbGVQb2ludCkge1xuXHRcdHZhciBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueDtcblx0XHR2YXIgZGlzdGFuY2VGcm9tWUNlbnRlciA9IGFuZ2xlUG9pbnQueSAtIGNlbnRyZVBvaW50Lnk7XG5cdFx0dmFyIHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciA9IE1hdGguc3FydChkaXN0YW5jZUZyb21YQ2VudGVyICogZGlzdGFuY2VGcm9tWENlbnRlciArIGRpc3RhbmNlRnJvbVlDZW50ZXIgKiBkaXN0YW5jZUZyb21ZQ2VudGVyKTtcblxuXHRcdHZhciBhbmdsZSA9IE1hdGguYXRhbjIoZGlzdGFuY2VGcm9tWUNlbnRlciwgZGlzdGFuY2VGcm9tWENlbnRlcik7XG5cblx0XHRpZiAoYW5nbGUgPCAoLTAuNSAqIE1hdGguUEkpKSB7XG5cdFx0XHRhbmdsZSArPSAyLjAgKiBNYXRoLlBJOyAvLyBtYWtlIHN1cmUgdGhlIHJldHVybmVkIGFuZ2xlIGlzIGluIHRoZSByYW5nZSBvZiAoLVBJLzIsIDNQSS8yXVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbmdsZTogYW5nbGUsXG5cdFx0XHRkaXN0YW5jZTogcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyXG5cdFx0fTtcblx0fTtcblx0aGVscGVycyQxLmRpc3RhbmNlQmV0d2VlblBvaW50cyA9IGZ1bmN0aW9uKHB0MSwgcHQyKSB7XG5cdFx0cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwdDIueCAtIHB0MS54LCAyKSArIE1hdGgucG93KHB0Mi55IC0gcHQxLnksIDIpKTtcblx0fTtcblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZVxuXHQgKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5hbGlhc1BpeGVsXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcblx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHQgKi9cblx0aGVscGVycyQxLmFsaWFzUGl4ZWwgPSBmdW5jdGlvbihwaXhlbFdpZHRoKSB7XG5cdFx0cmV0dXJuIChwaXhlbFdpZHRoICUgMiA9PT0gMCkgPyAwIDogMC41O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhbGlnbmVkIHBpeGVsIHZhbHVlIHRvIGF2b2lkIGFudGktYWxpYXNpbmcgYmx1clxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsIC0gQSBwaXhlbCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50LlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYWxpZ25lZCBwaXhlbCB2YWx1ZS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGhlbHBlcnMkMS5fYWxpZ25QaXhlbCA9IGZ1bmN0aW9uKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcblx0XHR2YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuXHRcdHZhciBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoKHBpeGVsIC0gaGFsZldpZHRoKSAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbyArIGhhbGZXaWR0aDtcblx0fTtcblxuXHRoZWxwZXJzJDEuc3BsaW5lQ3VydmUgPSBmdW5jdGlvbihmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuXHRcdC8vIFByb3BzIHRvIFJvYiBTcGVuY2VyIGF0IHNjYWxlZCBpbm5vdmF0aW9uIGZvciBoaXMgcG9zdCBvbiBzcGxpbmluZyBiZXR3ZWVuIHBvaW50c1xuXHRcdC8vIGh0dHA6Ly9zY2FsZWRpbm5vdmF0aW9uLmNvbS9hbmFseXRpY3Mvc3BsaW5lcy9hYm91dFNwbGluZXMuaHRtbFxuXG5cdFx0Ly8gVGhpcyBmdW5jdGlvbiBtdXN0IGFsc28gcmVzcGVjdCBcInNraXBwZWRcIiBwb2ludHNcblxuXHRcdHZhciBwcmV2aW91cyA9IGZpcnN0UG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogZmlyc3RQb2ludDtcblx0XHR2YXIgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuXHRcdHZhciBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuXG5cdFx0dmFyIGQwMSA9IE1hdGguc3FydChNYXRoLnBvdyhjdXJyZW50LnggLSBwcmV2aW91cy54LCAyKSArIE1hdGgucG93KGN1cnJlbnQueSAtIHByZXZpb3VzLnksIDIpKTtcblx0XHR2YXIgZDEyID0gTWF0aC5zcXJ0KE1hdGgucG93KG5leHQueCAtIGN1cnJlbnQueCwgMikgKyBNYXRoLnBvdyhuZXh0LnkgLSBjdXJyZW50LnksIDIpKTtcblxuXHRcdHZhciBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcblx0XHR2YXIgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG5cblx0XHQvLyBJZiBhbGwgcG9pbnRzIGFyZSB0aGUgc2FtZSwgczAxICYgczAyIHdpbGwgYmUgaW5mXG5cdFx0czAxID0gaXNOYU4oczAxKSA/IDAgOiBzMDE7XG5cdFx0czEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG5cblx0XHR2YXIgZmEgPSB0ICogczAxOyAvLyBzY2FsaW5nIGZhY3RvciBmb3IgdHJpYW5nbGUgVGFcblx0XHR2YXIgZmIgPSB0ICogczEyO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHByZXZpb3VzOiB7XG5cdFx0XHRcdHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuXHRcdFx0XHR5OiBjdXJyZW50LnkgLSBmYSAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuXHRcdFx0fSxcblx0XHRcdG5leHQ6IHtcblx0XHRcdFx0eDogY3VycmVudC54ICsgZmIgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG5cdFx0XHRcdHk6IGN1cnJlbnQueSArIGZiICogKG5leHQueSAtIHByZXZpb3VzLnkpXG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0aGVscGVycyQxLkVQU0lMT04gPSBOdW1iZXIuRVBTSUxPTiB8fCAxZS0xNDtcblx0aGVscGVycyQxLnNwbGluZUN1cnZlTW9ub3RvbmUgPSBmdW5jdGlvbihwb2ludHMpIHtcblx0XHQvLyBUaGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgQsOpemllciBjb250cm9sIHBvaW50cyBpbiBhIHNpbWlsYXIgd2F5IHRoYW4gfHNwbGluZUN1cnZlfCxcblx0XHQvLyBidXQgcHJlc2VydmVzIG1vbm90b25pY2l0eSBvZiB0aGUgcHJvdmlkZWQgZGF0YSBhbmQgZW5zdXJlcyBubyBsb2NhbCBleHRyZW11bXMgYXJlIGFkZGVkXG5cdFx0Ly8gYmV0d2VlbiB0aGUgZGF0YXNldCBkaXNjcmV0ZSBwb2ludHMgZHVlIHRvIHRoZSBpbnRlcnBvbGF0aW9uLlxuXHRcdC8vIFNlZSA6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vbm90b25lX2N1YmljX2ludGVycG9sYXRpb25cblxuXHRcdHZhciBwb2ludHNXaXRoVGFuZ2VudHMgPSAocG9pbnRzIHx8IFtdKS5tYXAoZnVuY3Rpb24ocG9pbnQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG1vZGVsOiBwb2ludC5fbW9kZWwsXG5cdFx0XHRcdGRlbHRhSzogMCxcblx0XHRcdFx0bUs6IDBcblx0XHRcdH07XG5cdFx0fSk7XG5cblx0XHQvLyBDYWxjdWxhdGUgc2xvcGVzIChkZWx0YUspIGFuZCBpbml0aWFsaXplIHRhbmdlbnRzIChtSylcblx0XHR2YXIgcG9pbnRzTGVuID0gcG9pbnRzV2l0aFRhbmdlbnRzLmxlbmd0aDtcblx0XHR2YXIgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudCwgcG9pbnRBZnRlcjtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcblx0XHRcdHBvaW50Q3VycmVudCA9IHBvaW50c1dpdGhUYW5nZW50c1tpXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0cG9pbnRCZWZvcmUgPSBpID4gMCA/IHBvaW50c1dpdGhUYW5nZW50c1tpIC0gMV0gOiBudWxsO1xuXHRcdFx0cG9pbnRBZnRlciA9IGkgPCBwb2ludHNMZW4gLSAxID8gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXSA6IG51bGw7XG5cdFx0XHRpZiAocG9pbnRBZnRlciAmJiAhcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdHZhciBzbG9wZURlbHRhWCA9IChwb2ludEFmdGVyLm1vZGVsLnggLSBwb2ludEN1cnJlbnQubW9kZWwueCk7XG5cblx0XHRcdFx0Ly8gSW4gdGhlIGNhc2Ugb2YgdHdvIHBvaW50cyB0aGF0IGFwcGVhciBhdCB0aGUgc2FtZSB4IHBpeGVsLCBzbG9wZURlbHRhWCBpcyAwXG5cdFx0XHRcdHBvaW50Q3VycmVudC5kZWx0YUsgPSBzbG9wZURlbHRhWCAhPT0gMCA/IChwb2ludEFmdGVyLm1vZGVsLnkgLSBwb2ludEN1cnJlbnQubW9kZWwueSkgLyBzbG9wZURlbHRhWCA6IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghcG9pbnRCZWZvcmUgfHwgcG9pbnRCZWZvcmUubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdFx0fSBlbHNlIGlmICghcG9pbnRBZnRlciB8fCBwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gcG9pbnRCZWZvcmUuZGVsdGFLO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnNpZ24ocG9pbnRCZWZvcmUuZGVsdGFLKSAhPT0gdGhpcy5zaWduKHBvaW50Q3VycmVudC5kZWx0YUspKSB7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tSyA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSAocG9pbnRCZWZvcmUuZGVsdGFLICsgcG9pbnRDdXJyZW50LmRlbHRhSykgLyAyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkanVzdCB0YW5nZW50cyB0byBlbnN1cmUgbW9ub3RvbmljIHByb3BlcnRpZXNcblx0XHR2YXIgYWxwaGFLLCBiZXRhSywgdGF1Sywgc3F1YXJlZE1hZ25pdHVkZTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuIC0gMTsgKytpKSB7XG5cdFx0XHRwb2ludEN1cnJlbnQgPSBwb2ludHNXaXRoVGFuZ2VudHNbaV07XG5cdFx0XHRwb2ludEFmdGVyID0gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCB8fCBwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChoZWxwZXJzJDEuYWxtb3N0RXF1YWxzKHBvaW50Q3VycmVudC5kZWx0YUssIDAsIHRoaXMuRVBTSUxPTikpIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gcG9pbnRBZnRlci5tSyA9IDA7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRhbHBoYUsgPSBwb2ludEN1cnJlbnQubUsgLyBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdFx0YmV0YUsgPSBwb2ludEFmdGVyLm1LIC8gcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdHNxdWFyZWRNYWduaXR1ZGUgPSBNYXRoLnBvdyhhbHBoYUssIDIpICsgTWF0aC5wb3coYmV0YUssIDIpO1xuXHRcdFx0aWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dGF1SyA9IDMgLyBNYXRoLnNxcnQoc3F1YXJlZE1hZ25pdHVkZSk7XG5cdFx0XHRwb2ludEN1cnJlbnQubUsgPSBhbHBoYUsgKiB0YXVLICogcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdHBvaW50QWZ0ZXIubUsgPSBiZXRhSyAqIHRhdUsgKiBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGUgY29udHJvbCBwb2ludHNcblx0XHR2YXIgZGVsdGFYO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSkge1xuXHRcdFx0cG9pbnRDdXJyZW50ID0gcG9pbnRzV2l0aFRhbmdlbnRzW2ldO1xuXHRcdFx0aWYgKHBvaW50Q3VycmVudC5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRwb2ludEJlZm9yZSA9IGkgPiAwID8gcG9pbnRzV2l0aFRhbmdlbnRzW2kgLSAxXSA6IG51bGw7XG5cdFx0XHRwb2ludEFmdGVyID0gaSA8IHBvaW50c0xlbiAtIDEgPyBwb2ludHNXaXRoVGFuZ2VudHNbaSArIDFdIDogbnVsbDtcblx0XHRcdGlmIChwb2ludEJlZm9yZSAmJiAhcG9pbnRCZWZvcmUubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRkZWx0YVggPSAocG9pbnRDdXJyZW50Lm1vZGVsLnggLSBwb2ludEJlZm9yZS5tb2RlbC54KSAvIDM7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBwb2ludEN1cnJlbnQubW9kZWwueCAtIGRlbHRhWDtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IHBvaW50Q3VycmVudC5tb2RlbC55IC0gZGVsdGFYICogcG9pbnRDdXJyZW50Lm1LO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBvaW50QWZ0ZXIgJiYgIXBvaW50QWZ0ZXIubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRkZWx0YVggPSAocG9pbnRBZnRlci5tb2RlbC54IC0gcG9pbnRDdXJyZW50Lm1vZGVsLngpIC8gMztcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1vZGVsLmNvbnRyb2xQb2ludE5leHRYID0gcG9pbnRDdXJyZW50Lm1vZGVsLnggKyBkZWx0YVg7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IHBvaW50Q3VycmVudC5tb2RlbC55ICsgZGVsdGFYICogcG9pbnRDdXJyZW50Lm1LO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aGVscGVycyQxLm5leHRJdGVtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgaW5kZXgsIGxvb3ApIHtcblx0XHRpZiAobG9vcCkge1xuXHRcdFx0cmV0dXJuIGluZGV4ID49IGNvbGxlY3Rpb24ubGVuZ3RoIC0gMSA/IGNvbGxlY3Rpb25bMF0gOiBjb2xsZWN0aW9uW2luZGV4ICsgMV07XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleCA+PSBjb2xsZWN0aW9uLmxlbmd0aCAtIDEgPyBjb2xsZWN0aW9uW2NvbGxlY3Rpb24ubGVuZ3RoIC0gMV0gOiBjb2xsZWN0aW9uW2luZGV4ICsgMV07XG5cdH07XG5cdGhlbHBlcnMkMS5wcmV2aW91c0l0ZW0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBpbmRleCwgbG9vcCkge1xuXHRcdGlmIChsb29wKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggPD0gMCA/IGNvbGxlY3Rpb25bY29sbGVjdGlvbi5sZW5ndGggLSAxXSA6IGNvbGxlY3Rpb25baW5kZXggLSAxXTtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4IDw9IDAgPyBjb2xsZWN0aW9uWzBdIDogY29sbGVjdGlvbltpbmRleCAtIDFdO1xuXHR9O1xuXHQvLyBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgbmljZSBudW1iZXIgYWxnb3JpdGhtIHVzZWQgaW4gZGV0ZXJtaW5pbmcgd2hlcmUgYXhpcyBsYWJlbHMgd2lsbCBnb1xuXHRoZWxwZXJzJDEubmljZU51bSA9IGZ1bmN0aW9uKHJhbmdlLCByb3VuZCkge1xuXHRcdHZhciBleHBvbmVudCA9IE1hdGguZmxvb3IoaGVscGVycyQxLmxvZzEwKHJhbmdlKSk7XG5cdFx0dmFyIGZyYWN0aW9uID0gcmFuZ2UgLyBNYXRoLnBvdygxMCwgZXhwb25lbnQpO1xuXHRcdHZhciBuaWNlRnJhY3Rpb247XG5cblx0XHRpZiAocm91bmQpIHtcblx0XHRcdGlmIChmcmFjdGlvbiA8IDEuNSkge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSAxO1xuXHRcdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8IDMpIHtcblx0XHRcdFx0bmljZUZyYWN0aW9uID0gMjtcblx0XHRcdH0gZWxzZSBpZiAoZnJhY3Rpb24gPCA3KSB7XG5cdFx0XHRcdG5pY2VGcmFjdGlvbiA9IDU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSAxMDtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDw9IDEuMCkge1xuXHRcdFx0bmljZUZyYWN0aW9uID0gMTtcblx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDw9IDIpIHtcblx0XHRcdG5pY2VGcmFjdGlvbiA9IDI7XG5cdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8PSA1KSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSA1O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSAxMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmljZUZyYWN0aW9uICogTWF0aC5wb3coMTAsIGV4cG9uZW50KTtcblx0fTtcblx0Ly8gUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGwgLSBodHRwczovL3d3dy5wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG5cdGhlbHBlcnMkMS5yZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0ZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuXHRcdFx0fTtcblx0fSgpKTtcblx0Ly8gLS0gRE9NIG1ldGhvZHNcblx0aGVscGVycyQxLmdldFJlbGF0aXZlUG9zaXRpb24gPSBmdW5jdGlvbihldnQsIGNoYXJ0KSB7XG5cdFx0dmFyIG1vdXNlWCwgbW91c2VZO1xuXHRcdHZhciBlID0gZXZ0Lm9yaWdpbmFsRXZlbnQgfHwgZXZ0O1xuXHRcdHZhciBjYW52YXMgPSBldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50O1xuXHRcdHZhciBib3VuZGluZ1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR2YXIgdG91Y2hlcyA9IGUudG91Y2hlcztcblx0XHRpZiAodG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdG1vdXNlWCA9IHRvdWNoZXNbMF0uY2xpZW50WDtcblx0XHRcdG1vdXNlWSA9IHRvdWNoZXNbMF0uY2xpZW50WTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtb3VzZVggPSBlLmNsaWVudFg7XG5cdFx0XHRtb3VzZVkgPSBlLmNsaWVudFk7XG5cdFx0fVxuXG5cdFx0Ly8gU2NhbGUgbW91c2UgY29vcmRpbmF0ZXMgaW50byBjYW52YXMgY29vcmRpbmF0ZXNcblx0XHQvLyBieSBmb2xsb3dpbmcgdGhlIHBhdHRlcm4gbGFpZCBvdXQgYnkgJ2plcnJ5aicgaW4gdGhlIGNvbW1lbnRzIG9mXG5cdFx0Ly8gaHR0cHM6Ly93d3cuaHRtbDVjYW52YXN0dXRvcmlhbHMuY29tL2FkdmFuY2VkL2h0bWw1LWNhbnZhcy1tb3VzZS1jb29yZGluYXRlcy9cblx0XHR2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KGhlbHBlcnMkMS5nZXRTdHlsZShjYW52YXMsICdwYWRkaW5nLWxlZnQnKSk7XG5cdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KGhlbHBlcnMkMS5nZXRTdHlsZShjYW52YXMsICdwYWRkaW5nLXRvcCcpKTtcblx0XHR2YXIgcGFkZGluZ1JpZ2h0ID0gcGFyc2VGbG9hdChoZWxwZXJzJDEuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy1yaWdodCcpKTtcblx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQoaGVscGVycyQxLmdldFN0eWxlKGNhbnZhcywgJ3BhZGRpbmctYm90dG9tJykpO1xuXHRcdHZhciB3aWR0aCA9IGJvdW5kaW5nUmVjdC5yaWdodCAtIGJvdW5kaW5nUmVjdC5sZWZ0IC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHQ7XG5cdFx0dmFyIGhlaWdodCA9IGJvdW5kaW5nUmVjdC5ib3R0b20gLSBib3VuZGluZ1JlY3QudG9wIC0gcGFkZGluZ1RvcCAtIHBhZGRpbmdCb3R0b207XG5cblx0XHQvLyBXZSBkaXZpZGUgYnkgdGhlIGN1cnJlbnQgZGV2aWNlIHBpeGVsIHJhdGlvLCBiZWNhdXNlIHRoZSBjYW52YXMgaXMgc2NhbGVkIHVwIGJ5IHRoYXQgYW1vdW50IGluIGVhY2ggZGlyZWN0aW9uLiBIb3dldmVyXG5cdFx0Ly8gdGhlIGJhY2tlbmQgbW9kZWwgaXMgaW4gdW5zY2FsZWQgY29vcmRpbmF0ZXMuIFNpbmNlIHdlIGFyZSBnb2luZyB0byBkZWFsIHdpdGggb3VyIG1vZGVsIGNvb3JkaW5hdGVzLCB3ZSBnbyBiYWNrIGhlcmVcblx0XHRtb3VzZVggPSBNYXRoLnJvdW5kKChtb3VzZVggLSBib3VuZGluZ1JlY3QubGVmdCAtIHBhZGRpbmdMZWZ0KSAvICh3aWR0aCkgKiBjYW52YXMud2lkdGggLyBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyk7XG5cdFx0bW91c2VZID0gTWF0aC5yb3VuZCgobW91c2VZIC0gYm91bmRpbmdSZWN0LnRvcCAtIHBhZGRpbmdUb3ApIC8gKGhlaWdodCkgKiBjYW52YXMuaGVpZ2h0IC8gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IG1vdXNlWCxcblx0XHRcdHk6IG1vdXNlWVxuXHRcdH07XG5cblx0fTtcblxuXHQvLyBQcml2YXRlIGhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IG1heC13aWR0aC9tYXgtaGVpZ2h0IHZhbHVlcyB0aGF0IG1heSBiZSBwZXJjZW50YWdlcyBpbnRvIGEgbnVtYmVyXG5cdGZ1bmN0aW9uIHBhcnNlTWF4U3R5bGUoc3R5bGVWYWx1ZSwgbm9kZSwgcGFyZW50UHJvcGVydHkpIHtcblx0XHR2YXIgdmFsdWVJblBpeGVscztcblx0XHRpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR2YWx1ZUluUGl4ZWxzID0gcGFyc2VJbnQoc3R5bGVWYWx1ZSwgMTApO1xuXG5cdFx0XHRpZiAoc3R5bGVWYWx1ZS5pbmRleE9mKCclJykgIT09IC0xKSB7XG5cdFx0XHRcdC8vIHBlcmNlbnRhZ2UgKiBzaXplIGluIGRpbWVuc2lvblxuXHRcdFx0XHR2YWx1ZUluUGl4ZWxzID0gdmFsdWVJblBpeGVscyAvIDEwMCAqIG5vZGUucGFyZW50Tm9kZVtwYXJlbnRQcm9wZXJ0eV07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhbHVlSW5QaXhlbHMgPSBzdHlsZVZhbHVlO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZUluUGl4ZWxzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgaWYgdGhlIGdpdmVuIHZhbHVlIGNvbnRhaW5zIGFuIGVmZmVjdGl2ZSBjb25zdHJhaW50LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNDb25zdHJhaW5lZFZhbHVlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09ICdub25lJztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtYXggd2lkdGggb3IgaGVpZ2h0IG9mIHRoZSBnaXZlbiBET00gbm9kZSBpbiBhIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJsZSBmYXNoaW9uXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRvbU5vZGUgLSB0aGUgbm9kZSB0byBjaGVjayB0aGUgY29uc3RyYWludCBvblxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWF4U3R5bGUgLSB0aGUgc3R5bGUgdGhhdCBkZWZpbmVzIHRoZSBtYXhpbXVtIGZvciB0aGUgZGlyZWN0aW9uIHdlIGFyZSB1c2luZyAoJ21heC13aWR0aCcgLyAnbWF4LWhlaWdodCcpXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwZXJjZW50YWdlUHJvcGVydHkgLSBwcm9wZXJ0eSBvZiBwYXJlbnQgdG8gdXNlIHdoZW4gY2FsY3VsYXRpbmcgd2lkdGggYXMgYSBwZXJjZW50YWdlXG5cdCAqIEBzZWUge0BsaW5rIGh0dHBzOi8vd3d3Lm5hdGhhbmFlbGpvbmVzLmNvbS9ibG9nLzIwMTMvcmVhZGluZy1tYXgtd2lkdGgtY3Jvc3MtYnJvd3Nlcn1cblx0ICovXG5cdGZ1bmN0aW9uIGdldENvbnN0cmFpbnREaW1lbnNpb24oZG9tTm9kZSwgbWF4U3R5bGUsIHBlcmNlbnRhZ2VQcm9wZXJ0eSkge1xuXHRcdHZhciB2aWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0dmFyIHBhcmVudE5vZGUgPSBoZWxwZXJzJDEuX2dldFBhcmVudE5vZGUoZG9tTm9kZSk7XG5cdFx0dmFyIGNvbnN0cmFpbmVkTm9kZSA9IHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShkb21Ob2RlKVttYXhTdHlsZV07XG5cdFx0dmFyIGNvbnN0cmFpbmVkQ29udGFpbmVyID0gdmlldy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudE5vZGUpW21heFN0eWxlXTtcblx0XHR2YXIgaGFzQ05vZGUgPSBpc0NvbnN0cmFpbmVkVmFsdWUoY29uc3RyYWluZWROb2RlKTtcblx0XHR2YXIgaGFzQ0NvbnRhaW5lciA9IGlzQ29uc3RyYWluZWRWYWx1ZShjb25zdHJhaW5lZENvbnRhaW5lcik7XG5cdFx0dmFyIGluZmluaXR5ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG5cdFx0aWYgKGhhc0NOb2RlIHx8IGhhc0NDb250YWluZXIpIHtcblx0XHRcdHJldHVybiBNYXRoLm1pbihcblx0XHRcdFx0aGFzQ05vZGUgPyBwYXJzZU1heFN0eWxlKGNvbnN0cmFpbmVkTm9kZSwgZG9tTm9kZSwgcGVyY2VudGFnZVByb3BlcnR5KSA6IGluZmluaXR5LFxuXHRcdFx0XHRoYXNDQ29udGFpbmVyID8gcGFyc2VNYXhTdHlsZShjb25zdHJhaW5lZENvbnRhaW5lciwgcGFyZW50Tm9kZSwgcGVyY2VudGFnZVByb3BlcnR5KSA6IGluZmluaXR5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gJ25vbmUnO1xuXHR9XG5cdC8vIHJldHVybnMgTnVtYmVyIG9yIHVuZGVmaW5lZCBpZiBubyBjb25zdHJhaW50XG5cdGhlbHBlcnMkMS5nZXRDb25zdHJhaW50V2lkdGggPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0cmV0dXJuIGdldENvbnN0cmFpbnREaW1lbnNpb24oZG9tTm9kZSwgJ21heC13aWR0aCcsICdjbGllbnRXaWR0aCcpO1xuXHR9O1xuXHQvLyByZXR1cm5zIE51bWJlciBvciB1bmRlZmluZWQgaWYgbm8gY29uc3RyYWludFxuXHRoZWxwZXJzJDEuZ2V0Q29uc3RyYWludEhlaWdodCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHRyZXR1cm4gZ2V0Q29uc3RyYWludERpbWVuc2lvbihkb21Ob2RlLCAnbWF4LWhlaWdodCcsICdjbGllbnRIZWlnaHQnKTtcblx0fTtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG4gXHQgKi9cblx0aGVscGVycyQxLl9jYWxjdWxhdGVQYWRkaW5nID0gZnVuY3Rpb24oY29udGFpbmVyLCBwYWRkaW5nLCBwYXJlbnREaW1lbnNpb24pIHtcblx0XHRwYWRkaW5nID0gaGVscGVycyQxLmdldFN0eWxlKGNvbnRhaW5lciwgcGFkZGluZyk7XG5cblx0XHRyZXR1cm4gcGFkZGluZy5pbmRleE9mKCclJykgPiAtMSA/IHBhcmVudERpbWVuc2lvbiAqIHBhcnNlSW50KHBhZGRpbmcsIDEwKSAvIDEwMCA6IHBhcnNlSW50KHBhZGRpbmcsIDEwKTtcblx0fTtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRoZWxwZXJzJDEuX2dldFBhcmVudE5vZGUgPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0dmFyIHBhcmVudCA9IGRvbU5vZGUucGFyZW50Tm9kZTtcblx0XHRpZiAocGFyZW50ICYmIHBhcmVudC50b1N0cmluZygpID09PSAnW29iamVjdCBTaGFkb3dSb290XScpIHtcblx0XHRcdHBhcmVudCA9IHBhcmVudC5ob3N0O1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyZW50O1xuXHR9O1xuXHRoZWxwZXJzJDEuZ2V0TWF4aW11bVdpZHRoID0gZnVuY3Rpb24oZG9tTm9kZSkge1xuXHRcdHZhciBjb250YWluZXIgPSBoZWxwZXJzJDEuX2dldFBhcmVudE5vZGUoZG9tTm9kZSk7XG5cdFx0aWYgKCFjb250YWluZXIpIHtcblx0XHRcdHJldHVybiBkb21Ob2RlLmNsaWVudFdpZHRoO1xuXHRcdH1cblxuXHRcdHZhciBjbGllbnRXaWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcblx0XHR2YXIgcGFkZGluZ0xlZnQgPSBoZWxwZXJzJDEuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy1sZWZ0JywgY2xpZW50V2lkdGgpO1xuXHRcdHZhciBwYWRkaW5nUmlnaHQgPSBoZWxwZXJzJDEuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy1yaWdodCcsIGNsaWVudFdpZHRoKTtcblxuXHRcdHZhciB3ID0gY2xpZW50V2lkdGggLSBwYWRkaW5nTGVmdCAtIHBhZGRpbmdSaWdodDtcblx0XHR2YXIgY3cgPSBoZWxwZXJzJDEuZ2V0Q29uc3RyYWludFdpZHRoKGRvbU5vZGUpO1xuXHRcdHJldHVybiBpc05hTihjdykgPyB3IDogTWF0aC5taW4odywgY3cpO1xuXHR9O1xuXHRoZWxwZXJzJDEuZ2V0TWF4aW11bUhlaWdodCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHR2YXIgY29udGFpbmVyID0gaGVscGVycyQxLl9nZXRQYXJlbnROb2RlKGRvbU5vZGUpO1xuXHRcdGlmICghY29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gZG9tTm9kZS5jbGllbnRIZWlnaHQ7XG5cdFx0fVxuXG5cdFx0dmFyIGNsaWVudEhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cdFx0dmFyIHBhZGRpbmdUb3AgPSBoZWxwZXJzJDEuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy10b3AnLCBjbGllbnRIZWlnaHQpO1xuXHRcdHZhciBwYWRkaW5nQm90dG9tID0gaGVscGVycyQxLl9jYWxjdWxhdGVQYWRkaW5nKGNvbnRhaW5lciwgJ3BhZGRpbmctYm90dG9tJywgY2xpZW50SGVpZ2h0KTtcblxuXHRcdHZhciBoID0gY2xpZW50SGVpZ2h0IC0gcGFkZGluZ1RvcCAtIHBhZGRpbmdCb3R0b207XG5cdFx0dmFyIGNoID0gaGVscGVycyQxLmdldENvbnN0cmFpbnRIZWlnaHQoZG9tTm9kZSk7XG5cdFx0cmV0dXJuIGlzTmFOKGNoKSA/IGggOiBNYXRoLm1pbihoLCBjaCk7XG5cdH07XG5cdGhlbHBlcnMkMS5nZXRTdHlsZSA9IGZ1bmN0aW9uKGVsLCBwcm9wZXJ0eSkge1xuXHRcdHJldHVybiBlbC5jdXJyZW50U3R5bGUgP1xuXHRcdFx0ZWwuY3VycmVudFN0eWxlW3Byb3BlcnR5XSA6XG5cdFx0XHRkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcblx0fTtcblx0aGVscGVycyQxLnJldGluYVNjYWxlID0gZnVuY3Rpb24oY2hhcnQsIGZvcmNlUmF0aW8pIHtcblx0XHR2YXIgcGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gZm9yY2VSYXRpbyB8fCAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8pIHx8IDE7XG5cdFx0aWYgKHBpeGVsUmF0aW8gPT09IDEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuXHRcdHZhciBoZWlnaHQgPSBjaGFydC5oZWlnaHQ7XG5cdFx0dmFyIHdpZHRoID0gY2hhcnQud2lkdGg7XG5cblx0XHRjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogcGl4ZWxSYXRpbztcblx0XHRjYW52YXMud2lkdGggPSB3aWR0aCAqIHBpeGVsUmF0aW87XG5cdFx0Y2hhcnQuY3R4LnNjYWxlKHBpeGVsUmF0aW8sIHBpeGVsUmF0aW8pO1xuXG5cdFx0Ly8gSWYgbm8gc3R5bGUgaGFzIGJlZW4gc2V0IG9uIHRoZSBjYW52YXMsIHRoZSByZW5kZXIgc2l6ZSBpcyB1c2VkIGFzIGRpc3BsYXkgc2l6ZSxcblx0XHQvLyBtYWtpbmcgdGhlIGNoYXJ0IHZpc3VhbGx5IGJpZ2dlciwgc28gbGV0J3MgZW5mb3JjZSBpdCB0byB0aGUgXCJjb3JyZWN0XCIgdmFsdWVzLlxuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMzU3NVxuXHRcdGlmICghY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSB7XG5cdFx0XHRjYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4Jztcblx0XHRcdGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHR9XG5cdH07XG5cdC8vIC0tIENhbnZhcyBtZXRob2RzXG5cdGhlbHBlcnMkMS5mb250U3RyaW5nID0gZnVuY3Rpb24ocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcblx0XHRyZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xuXHR9O1xuXHRoZWxwZXJzJDEubG9uZ2VzdFRleHQgPSBmdW5jdGlvbihjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG5cdFx0Y2FjaGUgPSBjYWNoZSB8fCB7fTtcblx0XHR2YXIgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuXHRcdHZhciBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG5cblx0XHRpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuXHRcdFx0ZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcblx0XHRcdGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBbXTtcblx0XHRcdGNhY2hlLmZvbnQgPSBmb250O1xuXHRcdH1cblxuXHRcdGN0eC5mb250ID0gZm9udDtcblx0XHR2YXIgbG9uZ2VzdCA9IDA7XG5cdFx0dmFyIGlsZW4gPSBhcnJheU9mVGhpbmdzLmxlbmd0aDtcblx0XHR2YXIgaSwgaiwgamxlbiwgdGhpbmcsIG5lc3RlZFRoaW5nO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdHRoaW5nID0gYXJyYXlPZlRoaW5nc1tpXTtcblxuXHRcdFx0Ly8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0XHRpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiBoZWxwZXJzJDEuaXNBcnJheSh0aGluZykgIT09IHRydWUpIHtcblx0XHRcdFx0bG9uZ2VzdCA9IGhlbHBlcnMkMS5tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCB0aGluZyk7XG5cdFx0XHR9IGVsc2UgaWYgKGhlbHBlcnMkMS5pc0FycmF5KHRoaW5nKSkge1xuXHRcdFx0XHQvLyBpZiBpdCBpcyBhbiBhcnJheSBsZXRzIG1lYXN1cmUgZWFjaCBlbGVtZW50XG5cdFx0XHRcdC8vIHRvIGRvIG1heWJlIHNpbXBsaWZ5IHRoaXMgZnVuY3Rpb24gYSBiaXQgc28gd2UgY2FuIGRvIHRoaXMgbW9yZSByZWN1cnNpdmVseT9cblx0XHRcdFx0Zm9yIChqID0gMCwgamxlbiA9IHRoaW5nLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuXHRcdFx0XHRcdG5lc3RlZFRoaW5nID0gdGhpbmdbal07XG5cdFx0XHRcdFx0Ly8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0XHRcdFx0aWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWhlbHBlcnMkMS5pc0FycmF5KG5lc3RlZFRoaW5nKSkge1xuXHRcdFx0XHRcdFx0bG9uZ2VzdCA9IGhlbHBlcnMkMS5tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBuZXN0ZWRUaGluZyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcblx0XHRpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGdjTGVuOyBpKyspIHtcblx0XHRcdFx0ZGVsZXRlIGRhdGFbZ2NbaV1dO1xuXHRcdFx0fVxuXHRcdFx0Z2Muc3BsaWNlKDAsIGdjTGVuKTtcblx0XHR9XG5cdFx0cmV0dXJuIGxvbmdlc3Q7XG5cdH07XG5cdGhlbHBlcnMkMS5tZWFzdXJlVGV4dCA9IGZ1bmN0aW9uKGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHN0cmluZykge1xuXHRcdHZhciB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ107XG5cdFx0aWYgKCF0ZXh0V2lkdGgpIHtcblx0XHRcdHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuXHRcdFx0Z2MucHVzaChzdHJpbmcpO1xuXHRcdH1cblx0XHRpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuXHRcdFx0bG9uZ2VzdCA9IHRleHRXaWR0aDtcblx0XHR9XG5cdFx0cmV0dXJuIGxvbmdlc3Q7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqL1xuXHRoZWxwZXJzJDEubnVtYmVyT2ZMYWJlbExpbmVzID0gZnVuY3Rpb24oYXJyYXlPZlRoaW5ncykge1xuXHRcdHZhciBudW1iZXJPZkxpbmVzID0gMTtcblx0XHRoZWxwZXJzJDEuZWFjaChhcnJheU9mVGhpbmdzLCBmdW5jdGlvbih0aGluZykge1xuXHRcdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KHRoaW5nKSkge1xuXHRcdFx0XHRpZiAodGhpbmcubGVuZ3RoID4gbnVtYmVyT2ZMaW5lcykge1xuXHRcdFx0XHRcdG51bWJlck9mTGluZXMgPSB0aGluZy5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gbnVtYmVyT2ZMaW5lcztcblx0fTtcblxuXHRoZWxwZXJzJDEuY29sb3IgPSAhY2hhcnRqc0NvbG9yID9cblx0XHRmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignQ29sb3IuanMgbm90IGZvdW5kIScpO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHQvKiBnbG9iYWwgQ2FudmFzR3JhZGllbnQgKi9cblx0XHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIENhbnZhc0dyYWRpZW50KSB7XG5cdFx0XHRcdHZhbHVlID0gY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY2hhcnRqc0NvbG9yKHZhbHVlKTtcblx0XHR9O1xuXG5cdGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yID0gZnVuY3Rpb24oY29sb3JWYWx1ZSkge1xuXHRcdC8qIGdsb2JhbCBDYW52YXNQYXR0ZXJuICovXG5cdFx0cmV0dXJuIChjb2xvclZhbHVlIGluc3RhbmNlb2YgQ2FudmFzUGF0dGVybiB8fCBjb2xvclZhbHVlIGluc3RhbmNlb2YgQ2FudmFzR3JhZGllbnQpID9cblx0XHRcdGNvbG9yVmFsdWUgOlxuXHRcdFx0aGVscGVycyQxLmNvbG9yKGNvbG9yVmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkucmdiU3RyaW5nKCk7XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhYnN0cmFjdCgpIHtcblx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdCdUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQ6IGVpdGhlciBubyBhZGFwdGVyIGNhbiAnICtcblx0XHQnYmUgZm91bmQgb3IgYW4gaW5jb21wbGV0ZSBpbnRlZ3JhdGlvbiB3YXMgcHJvdmlkZWQuJ1xuXHQpO1xufVxuXG4vKipcbiAqIERhdGUgYWRhcHRlciAoY3VycmVudCB1c2VkIGJ5IHRoZSB0aW1lIHNjYWxlKVxuICogQG5hbWVzcGFjZSBDaGFydC5fYWRhcHRlcnMuX2RhdGVcbiAqIEBtZW1iZXJvZiBDaGFydC5fYWRhcHRlcnNcbiAqIEBwcml2YXRlXG4gKi9cblxuLyoqXG4gKiBDdXJyZW50bHkgc3VwcG9ydGVkIHVuaXQgc3RyaW5nIHZhbHVlcy5cbiAqIEB0eXBlZGVmIHsoJ21pbGxpc2Vjb25kJ3wnc2Vjb25kJ3wnbWludXRlJ3wnaG91cid8J2RheSd8J3dlZWsnfCdtb250aCd8J3F1YXJ0ZXInfCd5ZWFyJyl9XG4gKiBAbWVtYmVyb2YgQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlXG4gKiBAbmFtZSBVbml0XG4gKi9cblxuLyoqXG4gKiBAY2xhc3NcbiAqL1xuZnVuY3Rpb24gRGF0ZUFkYXB0ZXIob3B0aW9ucykge1xuXHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xufVxuXG5oZWxwZXJzJDEuZXh0ZW5kKERhdGVBZGFwdGVyLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBEYXRlQWRhcHRlciAqLyB7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbWFwIG9mIHRpbWUgZm9ybWF0cyBmb3IgdGhlIHN1cHBvcnRlZCBmb3JtYXR0aW5nIHVuaXRzIGRlZmluZWRcblx0ICogaW4gVW5pdCBhcyB3ZWxsIGFzICdkYXRldGltZScgcmVwcmVzZW50aW5nIGEgZGV0YWlsZWQgZGF0ZS90aW1lIHN0cmluZy5cblx0ICogQHJldHVybnMge3tzdHJpbmc6IHN0cmluZ319XG5cdCAqL1xuXHRmb3JtYXRzOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUGFyc2VzIHRoZSBnaXZlbiBgdmFsdWVgIGFuZCByZXR1cm4gdGhlIGFzc29jaWF0ZWQgdGltZXN0YW1wLlxuXHQgKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gcGFyc2UgKHVzdWFsbHkgY29tZXMgZnJvbSB0aGUgZGF0YSlcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtmb3JtYXRdIC0gdGhlIGV4cGVjdGVkIGRhdGEgZm9ybWF0XG5cdCAqIEByZXR1cm5zIHsobnVtYmVyfG51bGwpfVxuXHQgKiBAZnVuY3Rpb25cblx0ICovXG5cdHBhcnNlOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZm9ybWF0dGVkIGRhdGUgaW4gdGhlIHNwZWNpZmllZCBgZm9ybWF0YCBmb3IgYSBnaXZlbiBgdGltZXN0YW1wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIHRoZSB0aW1lc3RhbXAgdG8gZm9ybWF0XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSB0aGUgZGF0ZS90aW1lIHRva2VuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRmb3JtYXQ6IGFic3RyYWN0LFxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBzcGVjaWZpZWQgYGFtb3VudGAgb2YgYHVuaXRgIHRvIHRoZSBnaXZlbiBgdGltZXN0YW1wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIHRoZSBpbnB1dCB0aW1lc3RhbXBcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgdG8gYWRkXG5cdCAqIEBwYXJhbSB7VW5pdH0gdW5pdCAtIHRoZSB1bml0IGFzIHN0cmluZ1xuXHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0YWRkOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGB1bml0YCBiZXR3ZWVuIHRoZSBnaXZlbiB0aW1lc3RhbXBzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gdGhlIGlucHV0IHRpbWVzdGFtcCAocmVmZXJlbmNlKVxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gdGhlIHRpbWVzdGFtcCB0byBzdWJzdHJhY3Rcblx0ICogQHBhcmFtIHtVbml0fSB1bml0IC0gdGhlIHVuaXQgYXMgc3RyaW5nXG5cdCAqIEByZXR1cm4ge251bWJlcn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRkaWZmOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUmV0dXJucyBzdGFydCBvZiBgdW5pdGAgZm9yIHRoZSBnaXZlbiBgdGltZXN0YW1wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIHRoZSBpbnB1dCB0aW1lc3RhbXBcblx0ICogQHBhcmFtIHtVbml0fSB1bml0IC0gdGhlIHVuaXQgYXMgc3RyaW5nXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd2Vla2RheV0gLSB0aGUgSVNPIGRheSBvZiB0aGUgd2VlayB3aXRoIDEgYmVpbmcgTW9uZGF5XG5cdCAqIGFuZCA3IGJlaW5nIFN1bmRheSAob25seSBuZWVkZWQgaWYgcGFyYW0gKnVuaXQqIGlzIGBpc29XZWVrYCkuXG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0c3RhcnRPZjogYWJzdHJhY3QsXG5cblx0LyoqXG5cdCAqIFJldHVybnMgZW5kIG9mIGB1bml0YCBmb3IgdGhlIGdpdmVuIGB0aW1lc3RhbXBgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wIC0gdGhlIGlucHV0IHRpbWVzdGFtcFxuXHQgKiBAcGFyYW0ge1VuaXR9IHVuaXQgLSB0aGUgdW5pdCBhcyBzdHJpbmdcblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRlbmRPZjogYWJzdHJhY3QsXG5cblx0Ly8gREVQUkVDQVRJT05TXG5cblx0LyoqXG5cdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGZvciBzY2FsZS5nZXRWYWx1ZUZvclBpeGVsKCksXG5cdCAqIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVycmlkZGVuIG9ubHkgYnkgdGhlIG1vbWVudCBhZGFwdGVyLlxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG5cdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG59KTtcblxuRGF0ZUFkYXB0ZXIub3ZlcnJpZGUgPSBmdW5jdGlvbihtZW1iZXJzKSB7XG5cdGhlbHBlcnMkMS5leHRlbmQoRGF0ZUFkYXB0ZXIucHJvdG90eXBlLCBtZW1iZXJzKTtcbn07XG5cbnZhciBfZGF0ZSA9IERhdGVBZGFwdGVyO1xuXG52YXIgY29yZV9hZGFwdGVycyA9IHtcblx0X2RhdGU6IF9kYXRlXG59O1xuXG4vKipcbiAqIE5hbWVzcGFjZSB0byBob2xkIHN0YXRpYyB0aWNrIGdlbmVyYXRpb24gZnVuY3Rpb25zXG4gKiBAbmFtZXNwYWNlIENoYXJ0LlRpY2tzXG4gKi9cbnZhciBjb3JlX3RpY2tzID0ge1xuXHQvKipcblx0ICogTmFtZXNwYWNlIHRvIGhvbGQgZm9ybWF0dGVycyBmb3IgZGlmZmVyZW50IHR5cGVzIG9mIHRpY2tzXG5cdCAqIEBuYW1lc3BhY2UgQ2hhcnQuVGlja3MuZm9ybWF0dGVyc1xuXHQgKi9cblx0Zm9ybWF0dGVyczoge1xuXHRcdC8qKlxuXHRcdCAqIEZvcm1hdHRlciBmb3IgdmFsdWUgbGFiZWxzXG5cdFx0ICogQG1ldGhvZCBDaGFydC5UaWNrcy5mb3JtYXR0ZXJzLnZhbHVlc1xuXHRcdCAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gZGlzcGxheVxuXHRcdCAqIEByZXR1cm4ge3N0cmluZ3xzdHJpbmdbXX0gdGhlIGxhYmVsIHRvIGRpc3BsYXlcblx0XHQgKi9cblx0XHR2YWx1ZXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaGVscGVycyQxLmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiAnJyArIHZhbHVlO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGb3JtYXR0ZXIgZm9yIGxpbmVhciBudW1lcmljIHRpY2tzXG5cdFx0ICogQG1ldGhvZCBDaGFydC5UaWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHRcdCAqIEBwYXJhbSB0aWNrVmFsdWUge251bWJlcn0gdGhlIHZhbHVlIHRvIGJlIGZvcm1hdHRlZFxuXHRcdCAqIEBwYXJhbSBpbmRleCB7bnVtYmVyfSB0aGUgcG9zaXRpb24gb2YgdGhlIHRpY2tWYWx1ZSBwYXJhbWV0ZXIgaW4gdGhlIHRpY2tzIGFycmF5XG5cdFx0ICogQHBhcmFtIHRpY2tzIHtudW1iZXJbXX0gdGhlIGxpc3Qgb2YgdGlja3MgYmVpbmcgY29udmVydGVkXG5cdFx0ICogQHJldHVybiB7c3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRpY2tWYWx1ZSBwYXJhbWV0ZXJcblx0XHQgKi9cblx0XHRsaW5lYXI6IGZ1bmN0aW9uKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGxvdHMgb2YgdGlja3MsIGRvbid0IHVzZSB0aGUgb25lc1xuXHRcdFx0dmFyIGRlbHRhID0gdGlja3MubGVuZ3RoID4gMyA/IHRpY2tzWzJdIC0gdGlja3NbMV0gOiB0aWNrc1sxXSAtIHRpY2tzWzBdO1xuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGEgbnVtYmVyIGxpa2UgMi41IGFzIHRoZSBkZWx0YSwgZmlndXJlIG91dCBob3cgbWFueSBkZWNpbWFsIHBsYWNlcyB3ZSBuZWVkXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEpID4gMSkge1xuXHRcdFx0XHRpZiAodGlja1ZhbHVlICE9PSBNYXRoLmZsb29yKHRpY2tWYWx1ZSkpIHtcblx0XHRcdFx0XHQvLyBub3QgYW4gaW50ZWdlclxuXHRcdFx0XHRcdGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBsb2dEZWx0YSA9IGhlbHBlcnMkMS5sb2cxMChNYXRoLmFicyhkZWx0YSkpO1xuXHRcdFx0dmFyIHRpY2tTdHJpbmcgPSAnJztcblxuXHRcdFx0aWYgKHRpY2tWYWx1ZSAhPT0gMCkge1xuXHRcdFx0XHR2YXIgbWF4VGljayA9IE1hdGgubWF4KE1hdGguYWJzKHRpY2tzWzBdKSwgTWF0aC5hYnModGlja3NbdGlja3MubGVuZ3RoIC0gMV0pKTtcblx0XHRcdFx0aWYgKG1heFRpY2sgPCAxZS00KSB7IC8vIGFsbCB0aWNrcyBhcmUgc21hbGwgbnVtYmVyczsgdXNlIHNjaWVudGlmaWMgbm90YXRpb25cblx0XHRcdFx0XHR2YXIgbG9nVGljayA9IGhlbHBlcnMkMS5sb2cxMChNYXRoLmFicyh0aWNrVmFsdWUpKTtcblx0XHRcdFx0XHR2YXIgbnVtRXhwb25lbnRpYWwgPSBNYXRoLmZsb29yKGxvZ1RpY2spIC0gTWF0aC5mbG9vcihsb2dEZWx0YSk7XG5cdFx0XHRcdFx0bnVtRXhwb25lbnRpYWwgPSBNYXRoLm1heChNYXRoLm1pbihudW1FeHBvbmVudGlhbCwgMjApLCAwKTtcblx0XHRcdFx0XHR0aWNrU3RyaW5nID0gdGlja1ZhbHVlLnRvRXhwb25lbnRpYWwobnVtRXhwb25lbnRpYWwpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBudW1EZWNpbWFsID0gLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKTtcblx0XHRcdFx0XHRudW1EZWNpbWFsID0gTWF0aC5tYXgoTWF0aC5taW4obnVtRGVjaW1hbCwgMjApLCAwKTsgLy8gdG9GaXhlZCBoYXMgYSBtYXggb2YgMjAgZGVjaW1hbCBwbGFjZXNcblx0XHRcdFx0XHR0aWNrU3RyaW5nID0gdGlja1ZhbHVlLnRvRml4ZWQobnVtRGVjaW1hbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRpY2tTdHJpbmcgPSAnMCc7IC8vIG5ldmVyIHNob3cgZGVjaW1hbCBwbGFjZXMgZm9yIDBcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRpY2tTdHJpbmc7XG5cdFx0fSxcblxuXHRcdGxvZ2FyaXRobWljOiBmdW5jdGlvbih0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuXHRcdFx0dmFyIHJlbWFpbiA9IHRpY2tWYWx1ZSAvIChNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihoZWxwZXJzJDEubG9nMTAodGlja1ZhbHVlKSkpKTtcblxuXHRcdFx0aWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gJzAnO1xuXHRcdFx0fSBlbHNlIGlmIChyZW1haW4gPT09IDEgfHwgcmVtYWluID09PSAyIHx8IHJlbWFpbiA9PT0gNSB8fCBpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gdGlja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRyZXR1cm4gdGlja1ZhbHVlLnRvRXhwb25lbnRpYWwoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn07XG5cbnZhciBpc0FycmF5ID0gaGVscGVycyQxLmlzQXJyYXk7XG52YXIgaXNOdWxsT3JVbmRlZiA9IGhlbHBlcnMkMS5pc051bGxPclVuZGVmO1xudmFyIHZhbHVlT3JEZWZhdWx0JGEgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgdmFsdWVBdEluZGV4T3JEZWZhdWx0ID0gaGVscGVycyQxLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdzY2FsZScsIHtcblx0ZGlzcGxheTogdHJ1ZSxcblx0cG9zaXRpb246ICdsZWZ0Jyxcblx0b2Zmc2V0OiBmYWxzZSxcblxuXHQvLyBncmlkIGxpbmUgc2V0dGluZ3Ncblx0Z3JpZExpbmVzOiB7XG5cdFx0ZGlzcGxheTogdHJ1ZSxcblx0XHRjb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG5cdFx0bGluZVdpZHRoOiAxLFxuXHRcdGRyYXdCb3JkZXI6IHRydWUsXG5cdFx0ZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuXHRcdGRyYXdUaWNrczogdHJ1ZSxcblx0XHR0aWNrTWFya0xlbmd0aDogMTAsXG5cdFx0emVyb0xpbmVXaWR0aDogMSxcblx0XHR6ZXJvTGluZUNvbG9yOiAncmdiYSgwLDAsMCwwLjI1KScsXG5cdFx0emVyb0xpbmVCb3JkZXJEYXNoOiBbXSxcblx0XHR6ZXJvTGluZUJvcmRlckRhc2hPZmZzZXQ6IDAuMCxcblx0XHRvZmZzZXRHcmlkTGluZXM6IGZhbHNlLFxuXHRcdGJvcmRlckRhc2g6IFtdLFxuXHRcdGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuXHR9LFxuXG5cdC8vIHNjYWxlIGxhYmVsXG5cdHNjYWxlTGFiZWw6IHtcblx0XHQvLyBkaXNwbGF5IHByb3BlcnR5XG5cdFx0ZGlzcGxheTogZmFsc2UsXG5cblx0XHQvLyBhY3R1YWwgbGFiZWxcblx0XHRsYWJlbFN0cmluZzogJycsXG5cblx0XHQvLyB0b3AvYm90dG9tIHBhZGRpbmdcblx0XHRwYWRkaW5nOiB7XG5cdFx0XHR0b3A6IDQsXG5cdFx0XHRib3R0b206IDRcblx0XHR9XG5cdH0sXG5cblx0Ly8gbGFiZWwgc2V0dGluZ3Ncblx0dGlja3M6IHtcblx0XHRiZWdpbkF0WmVybzogZmFsc2UsXG5cdFx0bWluUm90YXRpb246IDAsXG5cdFx0bWF4Um90YXRpb246IDUwLFxuXHRcdG1pcnJvcjogZmFsc2UsXG5cdFx0cGFkZGluZzogMCxcblx0XHRyZXZlcnNlOiBmYWxzZSxcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdGF1dG9Ta2lwOiB0cnVlLFxuXHRcdGF1dG9Ta2lwUGFkZGluZzogMCxcblx0XHRsYWJlbE9mZnNldDogMCxcblx0XHQvLyBXZSBwYXNzIHRocm91Z2ggYXJyYXlzIHRvIGJlIHJlbmRlcmVkIGFzIG11bHRpbGluZSBsYWJlbHMsIHdlIGNvbnZlcnQgT3RoZXJzIHRvIHN0cmluZ3MgaGVyZS5cblx0XHRjYWxsYmFjazogY29yZV90aWNrcy5mb3JtYXR0ZXJzLnZhbHVlcyxcblx0XHRtaW5vcjoge30sXG5cdFx0bWFqb3I6IHt9XG5cdH1cbn0pO1xuXG4vKiogUmV0dXJucyBhIG5ldyBhcnJheSBjb250YWluaW5nIG51bUl0ZW1zIGZyb20gYXJyICovXG5mdW5jdGlvbiBzYW1wbGUoYXJyLCBudW1JdGVtcykge1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdHZhciBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG5cdHZhciBpID0gMDtcblx0dmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cblx0Zm9yICg7IGkgPCBsZW47IGkgKz0gaW5jcmVtZW50KSB7XG5cdFx0cmVzdWx0LnB1c2goYXJyW01hdGguZmxvb3IoaSldKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRQaXhlbEZvckdyaWRMaW5lKHNjYWxlLCBpbmRleCwgb2Zmc2V0R3JpZExpbmVzKSB7XG5cdHZhciBsZW5ndGggPSBzY2FsZS5nZXRUaWNrcygpLmxlbmd0aDtcblx0dmFyIHZhbGlkSW5kZXggPSBNYXRoLm1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG5cdHZhciBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCk7XG5cdHZhciBzdGFydCA9IHNjYWxlLl9zdGFydFBpeGVsO1xuXHR2YXIgZW5kID0gc2NhbGUuX2VuZFBpeGVsO1xuXHR2YXIgZXBzaWxvbiA9IDFlLTY7IC8vIDFlLTYgaXMgbWFyZ2luIGluIHBpeGVscyBmb3IgYWNjdW11bGF0ZWQgZXJyb3IuXG5cdHZhciBvZmZzZXQ7XG5cblx0aWYgKG9mZnNldEdyaWRMaW5lcykge1xuXHRcdGlmIChsZW5ndGggPT09IDEpIHtcblx0XHRcdG9mZnNldCA9IE1hdGgubWF4KGxpbmVWYWx1ZSAtIHN0YXJ0LCBlbmQgLSBsaW5lVmFsdWUpO1xuXHRcdH0gZWxzZSBpZiAoaW5kZXggPT09IDApIHtcblx0XHRcdG9mZnNldCA9IChzY2FsZS5nZXRQaXhlbEZvclRpY2soMSkgLSBsaW5lVmFsdWUpIC8gMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gKGxpbmVWYWx1ZSAtIHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4IC0gMSkpIC8gMjtcblx0XHR9XG5cdFx0bGluZVZhbHVlICs9IHZhbGlkSW5kZXggPCBpbmRleCA/IG9mZnNldCA6IC1vZmZzZXQ7XG5cblx0XHQvLyBSZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSBwaXhlbCBpcyBvdXQgb2YgdGhlIHJhbmdlXG5cdFx0aWYgKGxpbmVWYWx1ZSA8IHN0YXJ0IC0gZXBzaWxvbiB8fCBsaW5lVmFsdWUgPiBlbmQgKyBlcHNpbG9uKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cdHJldHVybiBsaW5lVmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKSB7XG5cdGhlbHBlcnMkMS5lYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUpIHtcblx0XHR2YXIgZ2MgPSBjYWNoZS5nYztcblx0XHR2YXIgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuXHRcdHZhciBpO1xuXHRcdGlmIChnY0xlbiA+IGxlbmd0aCkge1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGdjTGVuOyArK2kpIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuXHRcdFx0fVxuXHRcdFx0Z2Muc3BsaWNlKDAsIGdjTGVuKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMge3dpZHRoLCBoZWlnaHQsIG9mZnNldH0gb2JqZWN0cyBmb3IgdGhlIGZpcnN0LCBsYXN0LCB3aWRlc3QsIGhpZ2hlc3QgdGlja1xuICogbGFiZWxzIHdoZXJlIG9mZnNldCBpbmRpY2F0ZXMgdGhlIGFuY2hvciBwb2ludCBvZmZzZXQgZnJvbSB0aGUgdG9wIGluIHBpeGVscy5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUxhYmVsU2l6ZXMoY3R4LCB0aWNrRm9udHMsIHRpY2tzLCBjYWNoZXMpIHtcblx0dmFyIGxlbmd0aCA9IHRpY2tzLmxlbmd0aDtcblx0dmFyIHdpZHRocyA9IFtdO1xuXHR2YXIgaGVpZ2h0cyA9IFtdO1xuXHR2YXIgb2Zmc2V0cyA9IFtdO1xuXHR2YXIgaSwgaiwgamxlbiwgbGFiZWwsIHRpY2tGb250LCBmb250U3RyaW5nLCBjYWNoZSwgbGluZUhlaWdodCwgd2lkdGgsIGhlaWdodCwgbmVzdGVkTGFiZWwsIHdpZGVzdCwgaGlnaGVzdDtcblxuXHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRsYWJlbCA9IHRpY2tzW2ldLmxhYmVsO1xuXHRcdHRpY2tGb250ID0gdGlja3NbaV0ubWFqb3IgPyB0aWNrRm9udHMubWFqb3IgOiB0aWNrRm9udHMubWlub3I7XG5cdFx0Y3R4LmZvbnQgPSBmb250U3RyaW5nID0gdGlja0ZvbnQuc3RyaW5nO1xuXHRcdGNhY2hlID0gY2FjaGVzW2ZvbnRTdHJpbmddID0gY2FjaGVzW2ZvbnRTdHJpbmddIHx8IHtkYXRhOiB7fSwgZ2M6IFtdfTtcblx0XHRsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcblx0XHR3aWR0aCA9IGhlaWdodCA9IDA7XG5cdFx0Ly8gVW5kZWZpbmVkIGxhYmVscyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcblx0XHRpZiAoIWlzTnVsbE9yVW5kZWYobGFiZWwpICYmICFpc0FycmF5KGxhYmVsKSkge1xuXHRcdFx0d2lkdGggPSBoZWxwZXJzJDEubWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIGxhYmVsKTtcblx0XHRcdGhlaWdodCA9IGxpbmVIZWlnaHQ7XG5cdFx0fSBlbHNlIGlmIChpc0FycmF5KGxhYmVsKSkge1xuXHRcdFx0Ly8gaWYgaXQgaXMgYW4gYXJyYXkgbGV0J3MgbWVhc3VyZSBlYWNoIGVsZW1lbnRcblx0XHRcdGZvciAoaiA9IDAsIGpsZW4gPSBsYWJlbC5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0bmVzdGVkTGFiZWwgPSBsYWJlbFtqXTtcblx0XHRcdFx0Ly8gVW5kZWZpbmVkIGxhYmVscyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcblx0XHRcdFx0aWYgKCFpc051bGxPclVuZGVmKG5lc3RlZExhYmVsKSAmJiAhaXNBcnJheShuZXN0ZWRMYWJlbCkpIHtcblx0XHRcdFx0XHR3aWR0aCA9IGhlbHBlcnMkMS5tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbmVzdGVkTGFiZWwpO1xuXHRcdFx0XHRcdGhlaWdodCArPSBsaW5lSGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdpZHRocy5wdXNoKHdpZHRoKTtcblx0XHRoZWlnaHRzLnB1c2goaGVpZ2h0KTtcblx0XHRvZmZzZXRzLnB1c2gobGluZUhlaWdodCAvIDIpO1xuXHR9XG5cdGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcblxuXHR3aWRlc3QgPSB3aWR0aHMuaW5kZXhPZihNYXRoLm1heC5hcHBseShudWxsLCB3aWR0aHMpKTtcblx0aGlnaGVzdCA9IGhlaWdodHMuaW5kZXhPZihNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKSk7XG5cblx0ZnVuY3Rpb24gdmFsdWVBdChpZHgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IHdpZHRoc1tpZHhdIHx8IDAsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodHNbaWR4XSB8fCAwLFxuXHRcdFx0b2Zmc2V0OiBvZmZzZXRzW2lkeF0gfHwgMFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGZpcnN0OiB2YWx1ZUF0KDApLFxuXHRcdGxhc3Q6IHZhbHVlQXQobGVuZ3RoIC0gMSksXG5cdFx0d2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG5cdFx0aGlnaGVzdDogdmFsdWVBdChoaWdoZXN0KVxuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zKSB7XG5cdHJldHVybiBvcHRpb25zLmRyYXdUaWNrcyA/IG9wdGlvbnMudGlja01hcmtMZW5ndGggOiAwO1xufVxuXG5mdW5jdGlvbiBnZXRTY2FsZUxhYmVsSGVpZ2h0KG9wdGlvbnMpIHtcblx0dmFyIGZvbnQsIHBhZGRpbmc7XG5cblx0aWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvbnQgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KG9wdGlvbnMpO1xuXHRwYWRkaW5nID0gaGVscGVycyQxLm9wdGlvbnMudG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG5cblx0cmV0dXJuIGZvbnQubGluZUhlaWdodCArIHBhZGRpbmcuaGVpZ2h0O1xufVxuXG5mdW5jdGlvbiBwYXJzZUZvbnRPcHRpb25zKG9wdGlvbnMsIG5lc3RlZE9wdHMpIHtcblx0cmV0dXJuIGhlbHBlcnMkMS5leHRlbmQoaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udCh7XG5cdFx0Zm9udEZhbWlseTogdmFsdWVPckRlZmF1bHQkYShuZXN0ZWRPcHRzLmZvbnRGYW1pbHksIG9wdGlvbnMuZm9udEZhbWlseSksXG5cdFx0Zm9udFNpemU6IHZhbHVlT3JEZWZhdWx0JGEobmVzdGVkT3B0cy5mb250U2l6ZSwgb3B0aW9ucy5mb250U2l6ZSksXG5cdFx0Zm9udFN0eWxlOiB2YWx1ZU9yRGVmYXVsdCRhKG5lc3RlZE9wdHMuZm9udFN0eWxlLCBvcHRpb25zLmZvbnRTdHlsZSksXG5cdFx0bGluZUhlaWdodDogdmFsdWVPckRlZmF1bHQkYShuZXN0ZWRPcHRzLmxpbmVIZWlnaHQsIG9wdGlvbnMubGluZUhlaWdodClcblx0fSksIHtcblx0XHRjb2xvcjogaGVscGVycyQxLm9wdGlvbnMucmVzb2x2ZShbbmVzdGVkT3B0cy5mb250Q29sb3IsIG9wdGlvbnMuZm9udENvbG9yLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udENvbG9yXSlcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGlja0ZvbnRPcHRpb25zKG9wdGlvbnMpIHtcblx0dmFyIG1pbm9yID0gcGFyc2VGb250T3B0aW9ucyhvcHRpb25zLCBvcHRpb25zLm1pbm9yKTtcblx0dmFyIG1ham9yID0gb3B0aW9ucy5tYWpvci5lbmFibGVkID8gcGFyc2VGb250T3B0aW9ucyhvcHRpb25zLCBvcHRpb25zLm1ham9yKSA6IG1pbm9yO1xuXG5cdHJldHVybiB7bWlub3I6IG1pbm9yLCBtYWpvcjogbWFqb3J9O1xufVxuXG5mdW5jdGlvbiBub25Ta2lwcGVkKHRpY2tzVG9GaWx0ZXIpIHtcblx0dmFyIGZpbHRlcmVkID0gW107XG5cdHZhciBpdGVtLCBpbmRleCwgbGVuO1xuXHRmb3IgKGluZGV4ID0gMCwgbGVuID0gdGlja3NUb0ZpbHRlci5sZW5ndGg7IGluZGV4IDwgbGVuOyArK2luZGV4KSB7XG5cdFx0aXRlbSA9IHRpY2tzVG9GaWx0ZXJbaW5kZXhdO1xuXHRcdGlmICh0eXBlb2YgaXRlbS5faW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRmaWx0ZXJlZC5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmlsdGVyZWQ7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW5TcGFjaW5nKGFycikge1xuXHR2YXIgbGVuID0gYXJyLmxlbmd0aDtcblx0dmFyIGksIGRpZmY7XG5cblx0aWYgKGxlbiA8IDIpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmb3IgKGRpZmYgPSBhcnJbMF0sIGkgPSAxOyBpIDwgbGVuOyArK2kpIHtcblx0XHRpZiAoYXJyW2ldIC0gYXJyW2kgLSAxXSAhPT0gZGlmZikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGlmZjtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCBheGlzTGVuZ3RoLCB0aWNrc0xpbWl0KSB7XG5cdHZhciBldmVuTWFqb3JTcGFjaW5nID0gZ2V0RXZlblNwYWNpbmcobWFqb3JJbmRpY2VzKTtcblx0dmFyIHNwYWNpbmcgPSAodGlja3MubGVuZ3RoIC0gMSkgLyB0aWNrc0xpbWl0O1xuXHR2YXIgZmFjdG9ycywgZmFjdG9yLCBpLCBpbGVuO1xuXG5cdC8vIElmIHRoZSBtYWpvciB0aWNrcyBhcmUgZXZlbmx5IHNwYWNlZCBhcGFydCwgcGxhY2UgdGhlIG1pbm9yIHRpY2tzXG5cdC8vIHNvIHRoYXQgdGhleSBkaXZpZGUgdGhlIG1ham9yIHRpY2tzIGludG8gZXZlbiBjaHVua3Ncblx0aWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xuXHR9XG5cblx0ZmFjdG9ycyA9IGhlbHBlcnMkMS5tYXRoLl9mYWN0b3JpemUoZXZlbk1ham9yU3BhY2luZyk7XG5cdGZvciAoaSA9IDAsIGlsZW4gPSBmYWN0b3JzLmxlbmd0aCAtIDE7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRmYWN0b3IgPSBmYWN0b3JzW2ldO1xuXHRcdGlmIChmYWN0b3IgPiBzcGFjaW5nKSB7XG5cdFx0XHRyZXR1cm4gZmFjdG9yO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG59XG5cbmZ1bmN0aW9uIGdldE1ham9ySW5kaWNlcyh0aWNrcykge1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdHZhciBpLCBpbGVuO1xuXHRmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0aWYgKHRpY2tzW2ldLm1ham9yKSB7XG5cdFx0XHRyZXN1bHQucHVzaChpKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbWFqb3JJbmRpY2VzLCBzcGFjaW5nKSB7XG5cdHZhciBjb3VudCA9IDA7XG5cdHZhciBuZXh0ID0gbWFqb3JJbmRpY2VzWzBdO1xuXHR2YXIgaSwgdGljaztcblxuXHRzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuXHRmb3IgKGkgPSAwOyBpIDwgdGlja3MubGVuZ3RoOyBpKyspIHtcblx0XHR0aWNrID0gdGlja3NbaV07XG5cdFx0aWYgKGkgPT09IG5leHQpIHtcblx0XHRcdHRpY2suX2luZGV4ID0gaTtcblx0XHRcdGNvdW50Kys7XG5cdFx0XHRuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSB0aWNrLmxhYmVsO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBza2lwKHRpY2tzLCBzcGFjaW5nLCBtYWpvclN0YXJ0LCBtYWpvckVuZCkge1xuXHR2YXIgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdCRhKG1ham9yU3RhcnQsIDApO1xuXHR2YXIgZW5kID0gTWF0aC5taW4odmFsdWVPckRlZmF1bHQkYShtYWpvckVuZCwgdGlja3MubGVuZ3RoKSwgdGlja3MubGVuZ3RoKTtcblx0dmFyIGNvdW50ID0gMDtcblx0dmFyIGxlbmd0aCwgaSwgdGljaywgbmV4dDtcblxuXHRzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuXHRpZiAobWFqb3JFbmQpIHtcblx0XHRsZW5ndGggPSBtYWpvckVuZCAtIG1ham9yU3RhcnQ7XG5cdFx0c3BhY2luZyA9IGxlbmd0aCAvIE1hdGguZmxvb3IobGVuZ3RoIC8gc3BhY2luZyk7XG5cdH1cblxuXHRuZXh0ID0gc3RhcnQ7XG5cblx0d2hpbGUgKG5leHQgPCAwKSB7XG5cdFx0Y291bnQrKztcblx0XHRuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG5cdH1cblxuXHRmb3IgKGkgPSBNYXRoLm1heChzdGFydCwgMCk7IGkgPCBlbmQ7IGkrKykge1xuXHRcdHRpY2sgPSB0aWNrc1tpXTtcblx0XHRpZiAoaSA9PT0gbmV4dCkge1xuXHRcdFx0dGljay5faW5kZXggPSBpO1xuXHRcdFx0Y291bnQrKztcblx0XHRcdG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVsZXRlIHRpY2subGFiZWw7XG5cdFx0fVxuXHR9XG59XG5cbnZhciBTY2FsZSA9IGNvcmVfZWxlbWVudC5leHRlbmQoe1xuXG5cdHplcm9MaW5lSW5kZXg6IDAsXG5cblx0LyoqXG5cdCAqIEdldCB0aGUgcGFkZGluZyBuZWVkZWQgZm9yIHRoZSBzY2FsZVxuXHQgKiBAbWV0aG9kIGdldFBhZGRpbmdcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybnMge1BhZGRpbmd9IHRoZSBuZWNlc3NhcnkgcGFkZGluZ1xuXHQgKi9cblx0Z2V0UGFkZGluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRyZXR1cm4ge1xuXHRcdFx0bGVmdDogbWUucGFkZGluZ0xlZnQgfHwgMCxcblx0XHRcdHRvcDogbWUucGFkZGluZ1RvcCB8fCAwLFxuXHRcdFx0cmlnaHQ6IG1lLnBhZGRpbmdSaWdodCB8fCAwLFxuXHRcdFx0Ym90dG9tOiBtZS5wYWRkaW5nQm90dG9tIHx8IDBcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzY2FsZSB0aWNrIG9iamVjdHMgKHtsYWJlbCwgbWFqb3J9KVxuXHQgKiBAc2luY2UgMi43XG5cdCAqL1xuXHRnZXRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3RpY2tzO1xuXHR9LFxuXG5cdC8qKlxuXHQqIEBwcml2YXRlXG5cdCovXG5cdF9nZXRMYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMubGFiZWxzIHx8ICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gZGF0YS54TGFiZWxzIDogZGF0YS55TGFiZWxzKSB8fCBkYXRhLmxhYmVscyB8fCBbXTtcblx0fSxcblxuXHQvLyBUaGVzZSBtZXRob2RzIGFyZSBvcmRlcmVkIGJ5IGxpZmVjeWxlLiBVdGlsaXRpZXMgdGhlbiBmb2xsb3cuXG5cdC8vIEFueSBmdW5jdGlvbiBkZWZpbmVkIGhlcmUgaXMgaW5oZXJpdGVkIGJ5IGFsbCBzY2FsZSB0eXBlcy5cblx0Ly8gQW55IGZ1bmN0aW9uIGNhbiBiZSBleHRlbmRlZCBieSB0aGUgc2NhbGUgdHlwZVxuXG5cdC8qKlxuXHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlXG5cdCAqIEBmdW5jdGlvbiBDaGFydC5TY2FsZS5tZXJnZVRpY2tzT3B0aW9uc1xuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG5cdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0ICovXG5cdG1lcmdlVGlja3NPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHQvLyBub29wXG5cdH0sXG5cblx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW3RoaXNdKTtcblx0fSxcblxuXHQvKipcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heFdpZHRoIC0gdGhlIG1heCB3aWR0aCBpbiBwaXhlbHNcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heEhlaWdodCAtIHRoZSBtYXggaGVpZ2h0IGluIHBpeGVsc1xuXHQgKiBAcGFyYW0ge29iamVjdH0gbWFyZ2lucyAtIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBlZGdlIG9mIHRoZSBvdGhlciBzY2FsZXMgYW5kIGVkZ2Ugb2YgdGhlIGNoYXJ0XG5cdCAqICAgVGhpcyBzcGFjZSBjb21lcyBmcm9tIHR3byBzb3VyY2VzOlxuXHQgKiAgICAgLSBwYWRkaW5nIC0gc3BhY2UgdGhhdCdzIHJlcXVpcmVkIHRvIHNob3cgdGhlIGxhYmVscyBhdCB0aGUgZWRnZXMgb2YgdGhlIHNjYWxlXG5cdCAqICAgICAtIHRoaWNrbmVzcyBvZiBzY2FsZXMgb3IgbGVnZW5kcyBpbiBhbm90aGVyIG9yaWVudGF0aW9uXG5cdCAqL1xuXHR1cGRhdGU6IGZ1bmN0aW9uKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHNhbXBsZVNpemUgPSB0aWNrT3B0cy5zYW1wbGVTaXplO1xuXHRcdHZhciBpLCBpbGVuLCBsYWJlbHMsIHRpY2tzLCBzYW1wbGluZ0VuYWJsZWQ7XG5cblx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0bWUubWFyZ2lucyA9IGhlbHBlcnMkMS5leHRlbmQoe1xuXHRcdFx0bGVmdDogMCxcblx0XHRcdHJpZ2h0OiAwLFxuXHRcdFx0dG9wOiAwLFxuXHRcdFx0Ym90dG9tOiAwXG5cdFx0fSwgbWFyZ2lucyk7XG5cblx0XHRtZS5fdGlja3MgPSBudWxsO1xuXHRcdG1lLnRpY2tzID0gbnVsbDtcblx0XHRtZS5fbGFiZWxTaXplcyA9IG51bGw7XG5cdFx0bWUuX21heExhYmVsTGluZXMgPSAwO1xuXHRcdG1lLmxvbmdlc3RMYWJlbFdpZHRoID0gMDtcblx0XHRtZS5sb25nZXN0VGV4dENhY2hlID0gbWUubG9uZ2VzdFRleHRDYWNoZSB8fCB7fTtcblx0XHRtZS5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG5cdFx0bWUuX2xhYmVsSXRlbXMgPSBudWxsO1xuXG5cdFx0Ly8gRGltZW5zaW9uc1xuXHRcdG1lLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5zZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG5cblx0XHQvLyBEYXRhIG1pbi9tYXhcblx0XHRtZS5iZWZvcmVEYXRhTGltaXRzKCk7XG5cdFx0bWUuZGV0ZXJtaW5lRGF0YUxpbWl0cygpO1xuXHRcdG1lLmFmdGVyRGF0YUxpbWl0cygpO1xuXG5cdFx0Ly8gVGlja3MgLSBgdGhpcy50aWNrc2AgaXMgbm93IERFUFJFQ0FURUQhXG5cdFx0Ly8gSW50ZXJuYWwgdGlja3MgYXJlIG5vdyBzdG9yZWQgYXMgb2JqZWN0cyBpbiB0aGUgUFJJVkFURSBgdGhpcy5fdGlja3NgIG1lbWJlclxuXHRcdC8vIGFuZCBtdXN0IG5vdCBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIG91dHNpZGUgdGhpcyBjbGFzcy4gYHRoaXMudGlja3NgIGJlaW5nXG5cdFx0Ly8gYXJvdW5kIGZvciBsb25nIHRpbWUgYW5kIG5vdCBtYXJrZWQgYXMgcHJpdmF0ZSwgd2UgY2FuJ3QgY2hhbmdlIGl0cyBzdHJ1Y3R1cmVcblx0XHQvLyB3aXRob3V0IHVuZXhwZWN0ZWQgYnJlYWtpbmcgY2hhbmdlcy4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzY2FsZSB0aWNrcyxcblx0XHQvLyB1c2Ugc2NhbGUuZ2V0VGlja3MoKSBpbnN0ZWFkLlxuXG5cdFx0bWUuYmVmb3JlQnVpbGRUaWNrcygpO1xuXG5cdFx0Ly8gTmV3IGltcGxlbWVudGF0aW9ucyBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIG9iamVjdHMgYnV0IGZvciBCQUNLV0FSRCBDT01QQVQsXG5cdFx0Ly8gd2Ugc3RpbGwgc3VwcG9ydCBubyByZXR1cm4gKGB0aGlzLnRpY2tzYCBpbnRlcm5hbGx5IHNldCBieSBjYWxsaW5nIHRoaXMgbWV0aG9kKS5cblx0XHR0aWNrcyA9IG1lLmJ1aWxkVGlja3MoKSB8fCBbXTtcblxuXHRcdC8vIEFsbG93IG1vZGlmaWNhdGlvbiBvZiB0aWNrcyBpbiBjYWxsYmFjay5cblx0XHR0aWNrcyA9IG1lLmFmdGVyQnVpbGRUaWNrcyh0aWNrcykgfHwgdGlja3M7XG5cblx0XHQvLyBFbnN1cmUgdGlja3MgY29udGFpbnMgdGlja3MgaW4gbmV3IHRpY2sgZm9ybWF0XG5cdFx0aWYgKCghdGlja3MgfHwgIXRpY2tzLmxlbmd0aCkgJiYgbWUudGlja3MpIHtcblx0XHRcdHRpY2tzID0gW107XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gbWUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdHRpY2tzLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtZS50aWNrc1tpXSxcblx0XHRcdFx0XHRtYWpvcjogZmFsc2Vcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWUuX3RpY2tzID0gdGlja3M7XG5cblx0XHQvLyBDb21wdXRlIHRpY2sgcm90YXRpb24gYW5kIGZpdCB1c2luZyBhIHNhbXBsZWQgc3Vic2V0IG9mIGxhYmVsc1xuXHRcdC8vIFdlIGdlbmVyYWxseSBkb24ndCBuZWVkIHRvIGNvbXB1dGUgdGhlIHNpemUgb2YgZXZlcnkgc2luZ2xlIGxhYmVsIGZvciBkZXRlcm1pbmluZyBzY2FsZSBzaXplXG5cdFx0c2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aDtcblx0XHRsYWJlbHMgPSBtZS5fY29udmVydFRpY2tzVG9MYWJlbHMoc2FtcGxpbmdFbmFibGVkID8gc2FtcGxlKHRpY2tzLCBzYW1wbGVTaXplKSA6IHRpY2tzKTtcblxuXHRcdC8vIF9jb25maWd1cmUgaXMgY2FsbGVkIHR3aWNlLCBvbmNlIGhlcmUsIG9uY2UgZnJvbSBjb3JlLmNvbnRyb2xsZXIudXBkYXRlTGF5b3V0LlxuXHRcdC8vIEhlcmUgd2UgaGF2ZW4ndCBiZWVuIHBvc2l0aW9uZWQgeWV0LCBidXQgZGltZW5zaW9ucyBhcmUgY29ycmVjdC5cblx0XHQvLyBWYXJpYWJsZXMgc2V0IGluIF9jb25maWd1cmUgYXJlIG5lZWRlZCBmb3IgY2FsY3VsYXRlVGlja1JvdGF0aW9uLCBhbmRcblx0XHQvLyBpdCdzIG9rIHRoYXQgY29vcmRpbmF0ZXMgYXJlIG5vdCBjb3JyZWN0IHRoZXJlLCBvbmx5IGRpbWVuc2lvbnMgbWF0dGVyLlxuXHRcdG1lLl9jb25maWd1cmUoKTtcblxuXHRcdC8vIFRpY2sgUm90YXRpb25cblx0XHRtZS5iZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblx0XHRtZS5jYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblx0XHRtZS5hZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbigpO1xuXG5cdFx0bWUuYmVmb3JlRml0KCk7XG5cdFx0bWUuZml0KCk7XG5cdFx0bWUuYWZ0ZXJGaXQoKTtcblxuXHRcdC8vIEF1dG8tc2tpcFxuXHRcdG1lLl90aWNrc1RvRHJhdyA9IHRpY2tPcHRzLmRpc3BsYXkgJiYgKHRpY2tPcHRzLmF1dG9Ta2lwIHx8IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2F1dG8nKSA/IG1lLl9hdXRvU2tpcCh0aWNrcykgOiB0aWNrcztcblxuXHRcdGlmIChzYW1wbGluZ0VuYWJsZWQpIHtcblx0XHRcdC8vIEdlbmVyYXRlIGxhYmVscyB1c2luZyBhbGwgbm9uLXNraXBwZWQgdGlja3Ncblx0XHRcdGxhYmVscyA9IG1lLl9jb252ZXJ0VGlja3NUb0xhYmVscyhtZS5fdGlja3NUb0RyYXcpO1xuXHRcdH1cblxuXHRcdG1lLnRpY2tzID0gbGFiZWxzOyAgIC8vIEJBQ0tXQVJEIENPTVBBVElCSUxJVFlcblxuXHRcdC8vIElNUE9SVEFOVDogYWZ0ZXIgdGhpcyBwb2ludCwgd2UgY29uc2lkZXIgdGhhdCBgdGhpcy50aWNrc2Agd2lsbCBORVZFUiBjaGFuZ2UhXG5cblx0XHRtZS5hZnRlclVwZGF0ZSgpO1xuXG5cdFx0Ly8gVE9ETyh2Myk6IHJlbW92ZSBtaW5TaXplIGFzIGEgcHVibGljIHByb3BlcnR5IGFuZCByZXR1cm4gdmFsdWUgZnJvbSBhbGwgbGF5b3V0IGJveGVzLiBJdCBpcyB1bnVzZWRcblx0XHQvLyBtYWtlIG1heFdpZHRoIGFuZCBtYXhIZWlnaHQgcHJpdmF0ZVxuXHRcdHJldHVybiBtZS5taW5TaXplO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NvbmZpZ3VyZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgcmV2ZXJzZVBpeGVscyA9IG1lLm9wdGlvbnMudGlja3MucmV2ZXJzZTtcblx0XHR2YXIgc3RhcnRQaXhlbCwgZW5kUGl4ZWw7XG5cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHN0YXJ0UGl4ZWwgPSBtZS5sZWZ0O1xuXHRcdFx0ZW5kUGl4ZWwgPSBtZS5yaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RhcnRQaXhlbCA9IG1lLnRvcDtcblx0XHRcdGVuZFBpeGVsID0gbWUuYm90dG9tO1xuXHRcdFx0Ly8gYnkgZGVmYXVsdCB2ZXJ0aWNhbCBzY2FsZXMgYXJlIGZyb20gYm90dG9tIHRvIHRvcCwgc28gcGl4ZWxzIGFyZSByZXZlcnNlZFxuXHRcdFx0cmV2ZXJzZVBpeGVscyA9ICFyZXZlcnNlUGl4ZWxzO1xuXHRcdH1cblx0XHRtZS5fc3RhcnRQaXhlbCA9IHN0YXJ0UGl4ZWw7XG5cdFx0bWUuX2VuZFBpeGVsID0gZW5kUGl4ZWw7XG5cdFx0bWUuX3JldmVyc2VQaXhlbHMgPSByZXZlcnNlUGl4ZWxzO1xuXHRcdG1lLl9sZW5ndGggPSBlbmRQaXhlbCAtIHN0YXJ0UGl4ZWw7XG5cdH0sXG5cblx0YWZ0ZXJVcGRhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJVcGRhdGUsIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblxuXHRiZWZvcmVTZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVNldERpbWVuc2lvbnMsIFt0aGlzXSk7XG5cdH0sXG5cdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gU2V0IHRoZSB1bmNvbnN0cmFpbmVkIGRpbWVuc2lvbiBiZWZvcmUgbGFiZWwgcm90YXRpb25cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0bWUud2lkdGggPSBtZS5tYXhXaWR0aDtcblx0XHRcdG1lLmxlZnQgPSAwO1xuXHRcdFx0bWUucmlnaHQgPSBtZS53aWR0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLnRvcCA9IDA7XG5cdFx0XHRtZS5ib3R0b20gPSBtZS5oZWlnaHQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgcGFkZGluZ1xuXHRcdG1lLnBhZGRpbmdMZWZ0ID0gMDtcblx0XHRtZS5wYWRkaW5nVG9wID0gMDtcblx0XHRtZS5wYWRkaW5nUmlnaHQgPSAwO1xuXHRcdG1lLnBhZGRpbmdCb3R0b20gPSAwO1xuXHR9LFxuXHRhZnRlclNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuXHR9LFxuXG5cdC8vIERhdGEgbGltaXRzXG5cdGJlZm9yZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRGF0YUxpbWl0cywgW3RoaXNdKTtcblx0fSxcblx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogaGVscGVycyQxLm5vb3AsXG5cdGFmdGVyRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckRhdGFMaW1pdHMsIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblx0YmVmb3JlQnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVCdWlsZFRpY2tzLCBbdGhpc10pO1xuXHR9LFxuXHRidWlsZFRpY2tzOiBoZWxwZXJzJDEubm9vcCxcblx0YWZ0ZXJCdWlsZFRpY2tzOiBmdW5jdGlvbih0aWNrcykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gdGlja3MgaXMgZW1wdHkgZm9yIG9sZCBheGlzIGltcGxlbWVudGF0aW9ucyBoZXJlXG5cdFx0aWYgKGlzQXJyYXkodGlja3MpICYmIHRpY2tzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGhlbHBlcnMkMS5jYWxsYmFjayhtZS5vcHRpb25zLmFmdGVyQnVpbGRUaWNrcywgW21lLCB0aWNrc10pO1xuXHRcdH1cblx0XHQvLyBTdXBwb3J0IG9sZCBpbXBsZW1lbnRhdGlvbnMgKHRoYXQgbW9kaWZpZWQgYHRoaXMudGlja3NgIGRpcmVjdGx5IGluIGJ1aWxkVGlja3MpXG5cdFx0bWUudGlja3MgPSBoZWxwZXJzJDEuY2FsbGJhY2sobWUub3B0aW9ucy5hZnRlckJ1aWxkVGlja3MsIFttZSwgbWUudGlja3NdKSB8fCBtZS50aWNrcztcblx0XHRyZXR1cm4gdGlja3M7XG5cdH0sXG5cblx0YmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcblx0fSxcblx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gQ29udmVydCB0aWNrcyB0byBzdHJpbmdzXG5cdFx0dmFyIHRpY2tPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHRtZS50aWNrcyA9IG1lLnRpY2tzLm1hcCh0aWNrT3B0cy51c2VyQ2FsbGJhY2sgfHwgdGlja09wdHMuY2FsbGJhY2ssIHRoaXMpO1xuXHR9LFxuXHRhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcblx0fSxcblxuXHQvL1xuXG5cdGJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb24sIFt0aGlzXSk7XG5cdH0sXG5cdGNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcblx0XHR2YXIgbnVtVGlja3MgPSBtZS5nZXRUaWNrcygpLmxlbmd0aDtcblx0XHR2YXIgbWluUm90YXRpb24gPSB0aWNrT3B0cy5taW5Sb3RhdGlvbiB8fCAwO1xuXHRcdHZhciBtYXhSb3RhdGlvbiA9IHRpY2tPcHRzLm1heFJvdGF0aW9uO1xuXHRcdHZhciBsYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG5cdFx0dmFyIGxhYmVsU2l6ZXMsIG1heExhYmVsV2lkdGgsIG1heExhYmVsSGVpZ2h0LCBtYXhXaWR0aCwgdGlja1dpZHRoLCBtYXhIZWlnaHQsIG1heExhYmVsRGlhZ29uYWw7XG5cblx0XHRpZiAoIW1lLl9pc1Zpc2libGUoKSB8fCAhdGlja09wdHMuZGlzcGxheSB8fCBtaW5Sb3RhdGlvbiA+PSBtYXhSb3RhdGlvbiB8fCBudW1UaWNrcyA8PSAxIHx8ICFtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0bWUubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGxhYmVsU2l6ZXMgPSBtZS5fZ2V0TGFiZWxTaXplcygpO1xuXHRcdG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcblx0XHRtYXhMYWJlbEhlaWdodCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLSBsYWJlbFNpemVzLmhpZ2hlc3Qub2Zmc2V0O1xuXG5cdFx0Ly8gRXN0aW1hdGUgdGhlIHdpZHRoIG9mIGVhY2ggZ3JpZCBiYXNlZCBvbiB0aGUgY2FudmFzIHdpZHRoLCB0aGUgbWF4aW11bVxuXHRcdC8vIGxhYmVsIHdpZHRoIGFuZCB0aGUgbnVtYmVyIG9mIHRpY2sgaW50ZXJ2YWxzXG5cdFx0bWF4V2lkdGggPSBNYXRoLm1pbihtZS5tYXhXaWR0aCwgbWUuY2hhcnQud2lkdGggLSBtYXhMYWJlbFdpZHRoKTtcblx0XHR0aWNrV2lkdGggPSBvcHRpb25zLm9mZnNldCA/IG1lLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuXG5cdFx0Ly8gQWxsb3cgMyBwaXhlbHMgeDIgcGFkZGluZyBlaXRoZXIgc2lkZSBmb3IgbGFiZWwgcmVhZGFiaWxpdHlcblx0XHRpZiAobWF4TGFiZWxXaWR0aCArIDYgPiB0aWNrV2lkdGgpIHtcblx0XHRcdHRpY2tXaWR0aCA9IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gKG9wdGlvbnMub2Zmc2V0ID8gMC41IDogMSkpO1xuXHRcdFx0bWF4SGVpZ2h0ID0gbWUubWF4SGVpZ2h0IC0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkTGluZXMpXG5cdFx0XHRcdC0gdGlja09wdHMucGFkZGluZyAtIGdldFNjYWxlTGFiZWxIZWlnaHQob3B0aW9ucy5zY2FsZUxhYmVsKTtcblx0XHRcdG1heExhYmVsRGlhZ29uYWwgPSBNYXRoLnNxcnQobWF4TGFiZWxXaWR0aCAqIG1heExhYmVsV2lkdGggKyBtYXhMYWJlbEhlaWdodCAqIG1heExhYmVsSGVpZ2h0KTtcblx0XHRcdGxhYmVsUm90YXRpb24gPSBoZWxwZXJzJDEudG9EZWdyZWVzKE1hdGgubWluKFxuXHRcdFx0XHRNYXRoLmFzaW4oTWF0aC5taW4oKGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyA2KSAvIHRpY2tXaWR0aCwgMSkpLFxuXHRcdFx0XHRNYXRoLmFzaW4oTWF0aC5taW4obWF4SGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgMSkpIC0gTWF0aC5hc2luKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbClcblx0XHRcdCkpO1xuXHRcdFx0bGFiZWxSb3RhdGlvbiA9IE1hdGgubWF4KG1pblJvdGF0aW9uLCBNYXRoLm1pbihtYXhSb3RhdGlvbiwgbGFiZWxSb3RhdGlvbikpO1xuXHRcdH1cblxuXHRcdG1lLmxhYmVsUm90YXRpb24gPSBsYWJlbFJvdGF0aW9uO1xuXHR9LFxuXHRhZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbiwgW3RoaXNdKTtcblx0fSxcblxuXHQvL1xuXG5cdGJlZm9yZUZpdDogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsIFt0aGlzXSk7XG5cdH0sXG5cdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHQvLyBSZXNldFxuXHRcdHZhciBtaW5TaXplID0gbWUubWluU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiAwLFxuXHRcdFx0aGVpZ2h0OiAwXG5cdFx0fTtcblxuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXHRcdHZhciBzY2FsZUxhYmVsT3B0cyA9IG9wdHMuc2NhbGVMYWJlbDtcblx0XHR2YXIgZ3JpZExpbmVPcHRzID0gb3B0cy5ncmlkTGluZXM7XG5cdFx0dmFyIGRpc3BsYXkgPSBtZS5faXNWaXNpYmxlKCk7XG5cdFx0dmFyIGlzQm90dG9tID0gb3B0cy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0Ly8gV2lkdGhcblx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRtaW5TaXplLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0fSBlbHNlIGlmIChkaXNwbGF5KSB7XG5cdFx0XHRtaW5TaXplLndpZHRoID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZExpbmVPcHRzKSArIGdldFNjYWxlTGFiZWxIZWlnaHQoc2NhbGVMYWJlbE9wdHMpO1xuXHRcdH1cblxuXHRcdC8vIGhlaWdodFxuXHRcdGlmICghaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IG1lLm1heEhlaWdodDsgLy8gZmlsbCBhbGwgdGhlIGhlaWdodFxuXHRcdH0gZWxzZSBpZiAoZGlzcGxheSkge1xuXHRcdFx0bWluU2l6ZS5oZWlnaHQgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkTGluZU9wdHMpICsgZ2V0U2NhbGVMYWJlbEhlaWdodChzY2FsZUxhYmVsT3B0cyk7XG5cdFx0fVxuXG5cdFx0Ly8gRG9uJ3QgYm90aGVyIGZpdHRpbmcgdGhlIHRpY2tzIGlmIHdlIGFyZSBub3Qgc2hvd2luZyB0aGUgbGFiZWxzXG5cdFx0aWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgZGlzcGxheSkge1xuXHRcdFx0dmFyIHRpY2tGb250cyA9IHBhcnNlVGlja0ZvbnRPcHRpb25zKHRpY2tPcHRzKTtcblx0XHRcdHZhciBsYWJlbFNpemVzID0gbWUuX2dldExhYmVsU2l6ZXMoKTtcblx0XHRcdHZhciBmaXJzdExhYmVsU2l6ZSA9IGxhYmVsU2l6ZXMuZmlyc3Q7XG5cdFx0XHR2YXIgbGFzdExhYmVsU2l6ZSA9IGxhYmVsU2l6ZXMubGFzdDtcblx0XHRcdHZhciB3aWRlc3RMYWJlbFNpemUgPSBsYWJlbFNpemVzLndpZGVzdDtcblx0XHRcdHZhciBoaWdoZXN0TGFiZWxTaXplID0gbGFiZWxTaXplcy5oaWdoZXN0O1xuXHRcdFx0dmFyIGxpbmVTcGFjZSA9IHRpY2tGb250cy5taW5vci5saW5lSGVpZ2h0ICogMC40O1xuXHRcdFx0dmFyIHRpY2tQYWRkaW5nID0gdGlja09wdHMucGFkZGluZztcblxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHQvLyBBIGhvcml6b250YWwgYXhpcyBpcyBtb3JlIGNvbnN0cmFpbmVkIGJ5IHRoZSBoZWlnaHQuXG5cdFx0XHRcdHZhciBpc1JvdGF0ZWQgPSBtZS5sYWJlbFJvdGF0aW9uICE9PSAwO1xuXHRcdFx0XHR2YXIgYW5nbGVSYWRpYW5zID0gaGVscGVycyQxLnRvUmFkaWFucyhtZS5sYWJlbFJvdGF0aW9uKTtcblx0XHRcdFx0dmFyIGNvc1JvdGF0aW9uID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcblx0XHRcdFx0dmFyIHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcblxuXHRcdFx0XHR2YXIgbGFiZWxIZWlnaHQgPSBzaW5Sb3RhdGlvbiAqIHdpZGVzdExhYmVsU2l6ZS53aWR0aFxuXHRcdFx0XHRcdCsgY29zUm90YXRpb24gKiAoaGlnaGVzdExhYmVsU2l6ZS5oZWlnaHQgLSAoaXNSb3RhdGVkID8gaGlnaGVzdExhYmVsU2l6ZS5vZmZzZXQgOiAwKSlcblx0XHRcdFx0XHQrIChpc1JvdGF0ZWQgPyAwIDogbGluZVNwYWNlKTsgLy8gcGFkZGluZ1xuXG5cdFx0XHRcdG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4obWUubWF4SGVpZ2h0LCBtaW5TaXplLmhlaWdodCArIGxhYmVsSGVpZ2h0ICsgdGlja1BhZGRpbmcpO1xuXG5cdFx0XHRcdHZhciBvZmZzZXRMZWZ0ID0gbWUuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gbWUubGVmdDtcblx0XHRcdFx0dmFyIG9mZnNldFJpZ2h0ID0gbWUucmlnaHQgLSBtZS5nZXRQaXhlbEZvclRpY2sobWUuZ2V0VGlja3MoKS5sZW5ndGggLSAxKTtcblx0XHRcdFx0dmFyIHBhZGRpbmdMZWZ0LCBwYWRkaW5nUmlnaHQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoYXQgb3VyIHRpY2tzIGFyZSBhbHdheXMgaW5zaWRlIHRoZSBjYW52YXMuIFdoZW4gcm90YXRlZCwgdGlja3MgYXJlIHJpZ2h0IGFsaWduZWRcblx0XHRcdFx0Ly8gd2hpY2ggbWVhbnMgdGhhdCB0aGUgcmlnaHQgcGFkZGluZyBpcyBkb21pbmF0ZWQgYnkgdGhlIGZvbnQgaGVpZ2h0XG5cdFx0XHRcdGlmIChpc1JvdGF0ZWQpIHtcblx0XHRcdFx0XHRwYWRkaW5nTGVmdCA9IGlzQm90dG9tID9cblx0XHRcdFx0XHRcdGNvc1JvdGF0aW9uICogZmlyc3RMYWJlbFNpemUud2lkdGggKyBzaW5Sb3RhdGlvbiAqIGZpcnN0TGFiZWxTaXplLm9mZnNldCA6XG5cdFx0XHRcdFx0XHRzaW5Sb3RhdGlvbiAqIChmaXJzdExhYmVsU2l6ZS5oZWlnaHQgLSBmaXJzdExhYmVsU2l6ZS5vZmZzZXQpO1xuXHRcdFx0XHRcdHBhZGRpbmdSaWdodCA9IGlzQm90dG9tID9cblx0XHRcdFx0XHRcdHNpblJvdGF0aW9uICogKGxhc3RMYWJlbFNpemUuaGVpZ2h0IC0gbGFzdExhYmVsU2l6ZS5vZmZzZXQpIDpcblx0XHRcdFx0XHRcdGNvc1JvdGF0aW9uICogbGFzdExhYmVsU2l6ZS53aWR0aCArIHNpblJvdGF0aW9uICogbGFzdExhYmVsU2l6ZS5vZmZzZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGFkZGluZ0xlZnQgPSBmaXJzdExhYmVsU2l6ZS53aWR0aCAvIDI7XG5cdFx0XHRcdFx0cGFkZGluZ1JpZ2h0ID0gbGFzdExhYmVsU2l6ZS53aWR0aCAvIDI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGp1c3QgcGFkZGluZyB0YWtpbmcgaW50byBhY2NvdW50IGNoYW5nZXMgaW4gb2Zmc2V0c1xuXHRcdFx0XHQvLyBhbmQgYWRkIDMgcHggdG8gbW92ZSBhd2F5IGZyb20gY2FudmFzIGVkZ2VzXG5cdFx0XHRcdG1lLnBhZGRpbmdMZWZ0ID0gTWF0aC5tYXgoKHBhZGRpbmdMZWZ0IC0gb2Zmc2V0TGVmdCkgKiBtZS53aWR0aCAvIChtZS53aWR0aCAtIG9mZnNldExlZnQpLCAwKSArIDM7XG5cdFx0XHRcdG1lLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KChwYWRkaW5nUmlnaHQgLSBvZmZzZXRSaWdodCkgKiBtZS53aWR0aCAvIChtZS53aWR0aCAtIG9mZnNldFJpZ2h0KSwgMCkgKyAzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gQSB2ZXJ0aWNhbCBheGlzIGlzIG1vcmUgY29uc3RyYWluZWQgYnkgdGhlIHdpZHRoLiBMYWJlbHMgYXJlIHRoZVxuXHRcdFx0XHQvLyBkb21pbmFudCBmYWN0b3IgaGVyZSwgc28gZ2V0IHRoYXQgbGVuZ3RoIGZpcnN0IGFuZCBhY2NvdW50IGZvciBwYWRkaW5nXG5cdFx0XHRcdHZhciBsYWJlbFdpZHRoID0gdGlja09wdHMubWlycm9yID8gMCA6XG5cdFx0XHRcdFx0Ly8gdXNlIGxpbmVTcGFjZSBmb3IgY29uc2lzdGVuY3kgd2l0aCBob3Jpem9udGFsIGF4aXNcblx0XHRcdFx0XHQvLyB0aWNrUGFkZGluZyBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIGhvcml6b250YWxcblx0XHRcdFx0XHR3aWRlc3RMYWJlbFNpemUud2lkdGggKyB0aWNrUGFkZGluZyArIGxpbmVTcGFjZTtcblxuXHRcdFx0XHRtaW5TaXplLndpZHRoID0gTWF0aC5taW4obWUubWF4V2lkdGgsIG1pblNpemUud2lkdGggKyBsYWJlbFdpZHRoKTtcblxuXHRcdFx0XHRtZS5wYWRkaW5nVG9wID0gZmlyc3RMYWJlbFNpemUuaGVpZ2h0IC8gMjtcblx0XHRcdFx0bWUucGFkZGluZ0JvdHRvbSA9IGxhc3RMYWJlbFNpemUuaGVpZ2h0IC8gMjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5oYW5kbGVNYXJnaW5zKCk7XG5cblx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRtZS53aWR0aCA9IG1lLl9sZW5ndGggPSBjaGFydC53aWR0aCAtIG1lLm1hcmdpbnMubGVmdCAtIG1lLm1hcmdpbnMucmlnaHQ7XG5cdFx0XHRtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUud2lkdGggPSBtaW5TaXplLndpZHRoO1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWUuX2xlbmd0aCA9IGNoYXJ0LmhlaWdodCAtIG1lLm1hcmdpbnMudG9wIC0gbWUubWFyZ2lucy5ib3R0b207XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgbWFyZ2lucyBhbmQgcGFkZGluZyBpbnRlcmFjdGlvbnNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGhhbmRsZU1hcmdpbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0aWYgKG1lLm1hcmdpbnMpIHtcblx0XHRcdG1lLm1hcmdpbnMubGVmdCA9IE1hdGgubWF4KG1lLnBhZGRpbmdMZWZ0LCBtZS5tYXJnaW5zLmxlZnQpO1xuXHRcdFx0bWUubWFyZ2lucy50b3AgPSBNYXRoLm1heChtZS5wYWRkaW5nVG9wLCBtZS5tYXJnaW5zLnRvcCk7XG5cdFx0XHRtZS5tYXJnaW5zLnJpZ2h0ID0gTWF0aC5tYXgobWUucGFkZGluZ1JpZ2h0LCBtZS5tYXJnaW5zLnJpZ2h0KTtcblx0XHRcdG1lLm1hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgobWUucGFkZGluZ0JvdHRvbSwgbWUubWFyZ2lucy5ib3R0b20pO1xuXHRcdH1cblx0fSxcblxuXHRhZnRlckZpdDogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW3RoaXNdKTtcblx0fSxcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG5cdFx0cmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcblx0fSxcblx0aXNGdWxsV2lkdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuZnVsbFdpZHRoO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgY29ycmVjdCB2YWx1ZS4gTmFOIGJhZCBpbnB1dHMsIElmIHRoZSB2YWx1ZSB0eXBlIGlzIG9iamVjdCBnZXQgdGhlIHggb3IgeSBiYXNlZCBvbiB3aGV0aGVyIHdlIGFyZSBob3Jpem9udGFsIG9yIG5vdFxuXHRnZXRSaWdodFZhbHVlOiBmdW5jdGlvbihyYXdWYWx1ZSkge1xuXHRcdC8vIE51bGwgYW5kIHVuZGVmaW5lZCB2YWx1ZXMgZmlyc3Rcblx0XHRpZiAoaXNOdWxsT3JVbmRlZihyYXdWYWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fVxuXHRcdC8vIGlzTmFOKG9iamVjdCkgcmV0dXJucyB0cnVlLCBzbyBtYWtlIHN1cmUgTmFOIGlzIGNoZWNraW5nIGZvciBhIG51bWJlcjsgRGlzY2FyZCBJbmZpbml0ZSB2YWx1ZXNcblx0XHRpZiAoKHR5cGVvZiByYXdWYWx1ZSA9PT0gJ251bWJlcicgfHwgcmF3VmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZShyYXdWYWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgaXQgaXMgaW4gZmFjdCBhbiBvYmplY3QsIGRpdmUgaW4gb25lIG1vcmUgbGV2ZWxcblx0XHRpZiAocmF3VmFsdWUpIHtcblx0XHRcdGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdGlmIChyYXdWYWx1ZS54ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlLngpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHJhd1ZhbHVlLnkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlLnkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFZhbHVlIGlzIGdvb2QsIHJldHVybiBpdFxuXHRcdHJldHVybiByYXdWYWx1ZTtcblx0fSxcblxuXHRfY29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKHRpY2tzKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGFiZWxzLCBpLCBpbGVuO1xuXG5cdFx0bWUudGlja3MgPSB0aWNrcy5tYXAoZnVuY3Rpb24odGljaykge1xuXHRcdFx0cmV0dXJuIHRpY2sudmFsdWU7XG5cdFx0fSk7XG5cblx0XHRtZS5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcblxuXHRcdC8vIE5ldyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHJldHVybiB0aGUgZm9ybWF0dGVkIHRpY2sgbGFiZWxzIGJ1dCBmb3IgQkFDS1dBUkRcblx0XHQvLyBDT01QQVQsIHdlIHN0aWxsIHN1cHBvcnQgbm8gcmV0dXJuIChgdGhpcy50aWNrc2AgaW50ZXJuYWxseSBjaGFuZ2VkIGJ5IGNhbGxpbmdcblx0XHQvLyB0aGlzIG1ldGhvZCBhbmQgc3VwcG9zZWQgdG8gY29udGFpbiBvbmx5IHN0cmluZyB2YWx1ZXMpLlxuXHRcdGxhYmVscyA9IG1lLmNvbnZlcnRUaWNrc1RvTGFiZWxzKHRpY2tzKSB8fCBtZS50aWNrcztcblxuXHRcdG1lLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG5cblx0XHQvLyBCQUNLV0FSRCBDT01QQVQ6IHN5bmNocm9uaXplIGBfdGlja3NgIHdpdGggbGFiZWxzIChzbyBwb3RlbnRpYWxseSBgdGhpcy50aWNrc2ApXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0dGlja3NbaV0ubGFiZWwgPSBsYWJlbHNbaV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxhYmVscztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRMYWJlbFNpemVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbFNpemVzID0gbWUuX2xhYmVsU2l6ZXM7XG5cblx0XHRpZiAoIWxhYmVsU2l6ZXMpIHtcblx0XHRcdG1lLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IGNvbXB1dGVMYWJlbFNpemVzKG1lLmN0eCwgcGFyc2VUaWNrRm9udE9wdGlvbnMobWUub3B0aW9ucy50aWNrcyksIG1lLmdldFRpY2tzKCksIG1lLmxvbmdlc3RUZXh0Q2FjaGUpO1xuXHRcdFx0bWUubG9uZ2VzdExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGFiZWxTaXplcztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9wYXJzZVZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBzdGFydCwgZW5kLCBtaW4sIG1heDtcblxuXHRcdGlmIChpc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0c3RhcnQgPSArdGhpcy5nZXRSaWdodFZhbHVlKHZhbHVlWzBdKTtcblx0XHRcdGVuZCA9ICt0aGlzLmdldFJpZ2h0VmFsdWUodmFsdWVbMV0pO1xuXHRcdFx0bWluID0gTWF0aC5taW4oc3RhcnQsIGVuZCk7XG5cdFx0XHRtYXggPSBNYXRoLm1heChzdGFydCwgZW5kKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsdWUgPSArdGhpcy5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdHN0YXJ0ID0gdW5kZWZpbmVkO1xuXHRcdFx0ZW5kID0gdmFsdWU7XG5cdFx0XHRtaW4gPSB2YWx1ZTtcblx0XHRcdG1heCA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRtaW46IG1pbixcblx0XHRcdG1heDogbWF4LFxuXHRcdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdFx0ZW5kOiBlbmRcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQqIEBwcml2YXRlXG5cdCovXG5cdF9nZXRTY2FsZUxhYmVsOiBmdW5jdGlvbihyYXdWYWx1ZSkge1xuXHRcdHZhciB2ID0gdGhpcy5fcGFyc2VWYWx1ZShyYXdWYWx1ZSk7XG5cdFx0aWYgKHYuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICdbJyArIHYuc3RhcnQgKyAnLCAnICsgdi5lbmQgKyAnXSc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICt0aGlzLmdldFJpZ2h0VmFsdWUocmF3VmFsdWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGdldCB0aGUgdmFsdWUgdG8gZGlzcGxheSBpbiB0aGUgdG9vbHRpcCBmb3IgdGhlIGRhdGEgYXQgdGhlIGdpdmVuIGluZGV4XG5cdCAqIEBwYXJhbSBpbmRleFxuXHQgKiBAcGFyYW0gZGF0YXNldEluZGV4XG5cdCAqL1xuXHRnZXRMYWJlbEZvckluZGV4OiBoZWxwZXJzJDEubm9vcCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbG9jYXRpb24gb2YgdGhlIGdpdmVuIGRhdGEgcG9pbnQuIFZhbHVlIGNhbiBlaXRoZXIgYmUgYW4gaW5kZXggb3IgYSBudW1lcmljYWwgdmFsdWVcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqIEBwYXJhbSB2YWx1ZVxuXHQgKiBAcGFyYW0gaW5kZXhcblx0ICogQHBhcmFtIGRhdGFzZXRJbmRleFxuXHQgKi9cblx0Z2V0UGl4ZWxGb3JWYWx1ZTogaGVscGVycyQxLm5vb3AsXG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gZ2V0IHRoZSBkYXRhIHZhbHVlIGZyb20gYSBnaXZlbiBwaXhlbC4gVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBnZXRQaXhlbEZvclZhbHVlXG5cdCAqIFRoZSBjb29yZGluYXRlICgwLCAwKSBpcyBhdCB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhc1xuXHQgKiBAcGFyYW0gcGl4ZWxcblx0ICovXG5cdGdldFZhbHVlRm9yUGl4ZWw6IGhlbHBlcnMkMS5ub29wLFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBsb2NhdGlvbiBvZiB0aGUgdGljayBhdCB0aGUgZ2l2ZW4gaW5kZXhcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqL1xuXHRnZXRQaXhlbEZvclRpY2s6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb2Zmc2V0ID0gbWUub3B0aW9ucy5vZmZzZXQ7XG5cdFx0dmFyIG51bVRpY2tzID0gbWUuX3RpY2tzLmxlbmd0aDtcblx0XHR2YXIgdGlja1dpZHRoID0gMSAvIE1hdGgubWF4KG51bVRpY2tzIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG5cblx0XHRyZXR1cm4gaW5kZXggPCAwIHx8IGluZGV4ID4gbnVtVGlja3MgLSAxXG5cdFx0XHQ/IG51bGxcblx0XHRcdDogbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKGluZGV4ICogdGlja1dpZHRoICsgKG9mZnNldCA/IHRpY2tXaWR0aCAvIDIgOiAwKSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFV0aWxpdHkgZm9yIGdldHRpbmcgdGhlIHBpeGVsIGxvY2F0aW9uIG9mIGEgcGVyY2VudGFnZSBvZiBzY2FsZVxuXHQgKiBUaGUgY29vcmRpbmF0ZSAoMCwgMCkgaXMgYXQgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBjYW52YXNcblx0ICovXG5cdGdldFBpeGVsRm9yRGVjaW1hbDogZnVuY3Rpb24oZGVjaW1hbCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAobWUuX3JldmVyc2VQaXhlbHMpIHtcblx0XHRcdGRlY2ltYWwgPSAxIC0gZGVjaW1hbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWUuX3N0YXJ0UGl4ZWwgKyBkZWNpbWFsICogbWUuX2xlbmd0aDtcblx0fSxcblxuXHRnZXREZWNpbWFsRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0dmFyIGRlY2ltYWwgPSAocGl4ZWwgLSB0aGlzLl9zdGFydFBpeGVsKSAvIHRoaXMuX2xlbmd0aDtcblx0XHRyZXR1cm4gdGhpcy5fcmV2ZXJzZVBpeGVscyA/IDEgLSBkZWNpbWFsIDogZGVjaW1hbDtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcGl4ZWwgZm9yIHRoZSBtaW5pbXVtIGNoYXJ0IHZhbHVlXG5cdCAqIFRoZSBjb29yZGluYXRlICgwLCAwKSBpcyBhdCB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhc1xuXHQgKi9cblx0Z2V0QmFzZVBpeGVsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuXHR9LFxuXG5cdGdldEJhc2VWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWluID0gbWUubWluO1xuXHRcdHZhciBtYXggPSBtZS5tYXg7XG5cblx0XHRyZXR1cm4gbWUuYmVnaW5BdFplcm8gPyAwIDpcblx0XHRcdG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6XG5cdFx0XHRtaW4gPiAwICYmIG1heCA+IDAgPyBtaW4gOlxuXHRcdFx0MDtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhIHN1YnNldCBvZiB0aWNrcyB0byBiZSBwbG90dGVkIHRvIGF2b2lkIG92ZXJsYXBwaW5nIGxhYmVscy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9hdXRvU2tpcDogZnVuY3Rpb24odGlja3MpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIGF4aXNMZW5ndGggPSBtZS5fbGVuZ3RoO1xuXHRcdHZhciB0aWNrc0xpbWl0ID0gdGlja09wdHMubWF4VGlja3NMaW1pdCB8fCBheGlzTGVuZ3RoIC8gbWUuX3RpY2tTaXplKCkgKyAxO1xuXHRcdHZhciBtYWpvckluZGljZXMgPSB0aWNrT3B0cy5tYWpvci5lbmFibGVkID8gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSA6IFtdO1xuXHRcdHZhciBudW1NYWpvckluZGljZXMgPSBtYWpvckluZGljZXMubGVuZ3RoO1xuXHRcdHZhciBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcblx0XHR2YXIgbGFzdCA9IG1ham9ySW5kaWNlc1tudW1NYWpvckluZGljZXMgLSAxXTtcblx0XHR2YXIgaSwgaWxlbiwgc3BhY2luZywgYXZnTWFqb3JTcGFjaW5nO1xuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIHRvbyBtYW55IG1ham9yIHRpY2tzIHRvIGRpc3BsYXkgdGhlbSBhbGxcblx0XHRpZiAobnVtTWFqb3JJbmRpY2VzID4gdGlja3NMaW1pdCkge1xuXHRcdFx0c2tpcE1ham9ycyh0aWNrcywgbWFqb3JJbmRpY2VzLCBudW1NYWpvckluZGljZXMgLyB0aWNrc0xpbWl0KTtcblx0XHRcdHJldHVybiBub25Ta2lwcGVkKHRpY2tzKTtcblx0XHR9XG5cblx0XHRzcGFjaW5nID0gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCBheGlzTGVuZ3RoLCB0aWNrc0xpbWl0KTtcblxuXHRcdGlmIChudW1NYWpvckluZGljZXMgPiAwKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gbnVtTWFqb3JJbmRpY2VzIC0gMTsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0XHRza2lwKHRpY2tzLCBzcGFjaW5nLCBtYWpvckluZGljZXNbaV0sIG1ham9ySW5kaWNlc1tpICsgMV0pO1xuXHRcdFx0fVxuXHRcdFx0YXZnTWFqb3JTcGFjaW5nID0gbnVtTWFqb3JJbmRpY2VzID4gMSA/IChsYXN0IC0gZmlyc3QpIC8gKG51bU1ham9ySW5kaWNlcyAtIDEpIDogbnVsbDtcblx0XHRcdHNraXAodGlja3MsIHNwYWNpbmcsIGhlbHBlcnMkMS5pc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyAwIDogZmlyc3QgLSBhdmdNYWpvclNwYWNpbmcsIGZpcnN0KTtcblx0XHRcdHNraXAodGlja3MsIHNwYWNpbmcsIGxhc3QsIGhlbHBlcnMkMS5pc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyB0aWNrcy5sZW5ndGggOiBsYXN0ICsgYXZnTWFqb3JTcGFjaW5nKTtcblx0XHRcdHJldHVybiBub25Ta2lwcGVkKHRpY2tzKTtcblx0XHR9XG5cdFx0c2tpcCh0aWNrcywgc3BhY2luZyk7XG5cdFx0cmV0dXJuIG5vblNraXBwZWQodGlja3MpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3RpY2tTaXplOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25UaWNrcyA9IG1lLm9wdGlvbnMudGlja3M7XG5cblx0XHQvLyBDYWxjdWxhdGUgc3BhY2UgbmVlZGVkIGJ5IGxhYmVsIGluIGF4aXMgZGlyZWN0aW9uLlxuXHRcdHZhciByb3QgPSBoZWxwZXJzJDEudG9SYWRpYW5zKG1lLmxhYmVsUm90YXRpb24pO1xuXHRcdHZhciBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhyb3QpKTtcblx0XHR2YXIgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4ocm90KSk7XG5cblx0XHR2YXIgbGFiZWxTaXplcyA9IG1lLl9nZXRMYWJlbFNpemVzKCk7XG5cdFx0dmFyIHBhZGRpbmcgPSBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcgfHwgMDtcblx0XHR2YXIgdyA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLndpZGVzdC53aWR0aCArIHBhZGRpbmcgOiAwO1xuXHRcdHZhciBoID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBwYWRkaW5nIDogMDtcblxuXHRcdC8vIENhbGN1bGF0ZSBzcGFjZSBuZWVkZWQgZm9yIDEgdGljayBpbiBheGlzIGRpcmVjdGlvbi5cblx0XHRyZXR1cm4gbWUuaXNIb3Jpem9udGFsKClcblx0XHRcdD8gaCAqIGNvcyA+IHcgKiBzaW4gPyB3IC8gY29zIDogaCAvIHNpblxuXHRcdFx0OiBoICogc2luIDwgdyAqIGNvcyA/IGggLyBjb3MgOiB3IC8gc2luO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2lzVmlzaWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgZGlzcGxheSA9IG1lLm9wdGlvbnMuZGlzcGxheTtcblx0XHR2YXIgaSwgaWxlbiwgbWV0YTtcblxuXHRcdGlmIChkaXNwbGF5ICE9PSAnYXV0bycpIHtcblx0XHRcdHJldHVybiAhIWRpc3BsYXk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiAnYXV0bycsIHRoZSBzY2FsZSBpcyB2aXNpYmxlIGlmIGF0IGxlYXN0IG9uZSBhc3NvY2lhdGVkIGRhdGFzZXQgaXMgdmlzaWJsZS5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdFx0aWYgKG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgfHwgbWV0YS55QXhpc0lEID09PSBtZS5pZCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NvbXB1dGVHcmlkTGluZUl0ZW1zOiBmdW5jdGlvbihjaGFydEFyZWEpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgZ3JpZExpbmVzID0gb3B0aW9ucy5ncmlkTGluZXM7XG5cdFx0dmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcblx0XHR2YXIgb2Zmc2V0R3JpZExpbmVzID0gZ3JpZExpbmVzLm9mZnNldEdyaWRMaW5lcztcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIHRpY2tzID0gbWUuX3RpY2tzVG9EcmF3O1xuXHRcdHZhciB0aWNrc0xlbmd0aCA9IHRpY2tzLmxlbmd0aCArIChvZmZzZXRHcmlkTGluZXMgPyAxIDogMCk7XG5cblx0XHR2YXIgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkTGluZXMpO1xuXHRcdHZhciBpdGVtcyA9IFtdO1xuXHRcdHZhciBheGlzV2lkdGggPSBncmlkTGluZXMuZHJhd0JvcmRlciA/IHZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZXMubGluZVdpZHRoLCAwLCAwKSA6IDA7XG5cdFx0dmFyIGF4aXNIYWxmV2lkdGggPSBheGlzV2lkdGggLyAyO1xuXHRcdHZhciBhbGlnblBpeGVsID0gaGVscGVycyQxLl9hbGlnblBpeGVsO1xuXHRcdHZhciBhbGlnbkJvcmRlclZhbHVlID0gZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHRcdHJldHVybiBhbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgYXhpc1dpZHRoKTtcblx0XHR9O1xuXHRcdHZhciBib3JkZXJWYWx1ZSwgaSwgdGljaywgbGluZVZhbHVlLCBhbGlnbmVkTGluZVZhbHVlO1xuXHRcdHZhciB0eDEsIHR5MSwgdHgyLCB0eTIsIHgxLCB5MSwgeDIsIHkyLCBsaW5lV2lkdGgsIGxpbmVDb2xvciwgYm9yZGVyRGFzaCwgYm9yZGVyRGFzaE9mZnNldDtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcblx0XHRcdGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZShtZS5ib3R0b20pO1xuXHRcdFx0dHkxID0gbWUuYm90dG9tIC0gdGw7XG5cdFx0XHR0eTIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR5MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnRvcCkgKyBheGlzSGFsZldpZHRoO1xuXHRcdFx0eTIgPSBjaGFydEFyZWEuYm90dG9tO1xuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG5cdFx0XHRib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUobWUudG9wKTtcblx0XHRcdHkxID0gY2hhcnRBcmVhLnRvcDtcblx0XHRcdHkyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEuYm90dG9tKSAtIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR0eTIgPSBtZS50b3AgKyB0bDtcblx0XHR9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcblx0XHRcdGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZShtZS5yaWdodCk7XG5cdFx0XHR0eDEgPSBtZS5yaWdodCAtIHRsO1xuXHRcdFx0dHgyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuXHRcdFx0eDEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5sZWZ0KSArIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR4MiA9IGNoYXJ0QXJlYS5yaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ym9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKG1lLmxlZnQpO1xuXHRcdFx0eDEgPSBjaGFydEFyZWEubGVmdDtcblx0XHRcdHgyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEucmlnaHQpIC0gYXhpc0hhbGZXaWR0aDtcblx0XHRcdHR4MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcblx0XHRcdHR4MiA9IG1lLmxlZnQgKyB0bDtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgdGlja3NMZW5ndGg7ICsraSkge1xuXHRcdFx0dGljayA9IHRpY2tzW2ldIHx8IHt9O1xuXG5cdFx0XHQvLyBhdXRvc2tpcHBlciBza2lwcGVkIHRoaXMgdGljayAoIzQ2MzUpXG5cdFx0XHRpZiAoaXNOdWxsT3JVbmRlZih0aWNrLmxhYmVsKSAmJiBpIDwgdGlja3MubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaSA9PT0gbWUuemVyb0xpbmVJbmRleCAmJiBvcHRpb25zLm9mZnNldCA9PT0gb2Zmc2V0R3JpZExpbmVzKSB7XG5cdFx0XHRcdC8vIERyYXcgdGhlIGZpcnN0IGluZGV4IHNwZWNpYWxseVxuXHRcdFx0XHRsaW5lV2lkdGggPSBncmlkTGluZXMuemVyb0xpbmVXaWR0aDtcblx0XHRcdFx0bGluZUNvbG9yID0gZ3JpZExpbmVzLnplcm9MaW5lQ29sb3I7XG5cdFx0XHRcdGJvcmRlckRhc2ggPSBncmlkTGluZXMuemVyb0xpbmVCb3JkZXJEYXNoIHx8IFtdO1xuXHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0ID0gZ3JpZExpbmVzLnplcm9MaW5lQm9yZGVyRGFzaE9mZnNldCB8fCAwLjA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsaW5lV2lkdGggPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmxpbmVXaWR0aCwgaSwgMSk7XG5cdFx0XHRcdGxpbmVDb2xvciA9IHZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZXMuY29sb3IsIGksICdyZ2JhKDAsMCwwLDAuMSknKTtcblx0XHRcdFx0Ym9yZGVyRGFzaCA9IGdyaWRMaW5lcy5ib3JkZXJEYXNoIHx8IFtdO1xuXHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0ID0gZ3JpZExpbmVzLmJvcmRlckRhc2hPZmZzZXQgfHwgMC4wO1xuXHRcdFx0fVxuXG5cdFx0XHRsaW5lVmFsdWUgPSBnZXRQaXhlbEZvckdyaWRMaW5lKG1lLCB0aWNrLl9pbmRleCB8fCBpLCBvZmZzZXRHcmlkTGluZXMpO1xuXG5cdFx0XHQvLyBTa2lwIGlmIHRoZSBwaXhlbCBpcyBvdXQgb2YgdGhlIHJhbmdlXG5cdFx0XHRpZiAobGluZVZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGFsaWduZWRMaW5lVmFsdWUgPSBhbGlnblBpeGVsKGNoYXJ0LCBsaW5lVmFsdWUsIGxpbmVXaWR0aCk7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0dHgxID0gdHgyID0geDEgPSB4MiA9IGFsaWduZWRMaW5lVmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0eTEgPSB0eTIgPSB5MSA9IHkyID0gYWxpZ25lZExpbmVWYWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0aXRlbXMucHVzaCh7XG5cdFx0XHRcdHR4MTogdHgxLFxuXHRcdFx0XHR0eTE6IHR5MSxcblx0XHRcdFx0dHgyOiB0eDIsXG5cdFx0XHRcdHR5MjogdHkyLFxuXHRcdFx0XHR4MTogeDEsXG5cdFx0XHRcdHkxOiB5MSxcblx0XHRcdFx0eDI6IHgyLFxuXHRcdFx0XHR5MjogeTIsXG5cdFx0XHRcdHdpZHRoOiBsaW5lV2lkdGgsXG5cdFx0XHRcdGNvbG9yOiBsaW5lQ29sb3IsXG5cdFx0XHRcdGJvcmRlckRhc2g6IGJvcmRlckRhc2gsXG5cdFx0XHRcdGJvcmRlckRhc2hPZmZzZXQ6IGJvcmRlckRhc2hPZmZzZXQsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpdGVtcy50aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuXHRcdGl0ZW1zLmJvcmRlclZhbHVlID0gYm9yZGVyVmFsdWU7XG5cblx0XHRyZXR1cm4gaXRlbXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY29tcHV0ZUxhYmVsSXRlbXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBvcHRpb25UaWNrcyA9IG9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcblx0XHR2YXIgaXNNaXJyb3JlZCA9IG9wdGlvblRpY2tzLm1pcnJvcjtcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIHRpY2tzID0gbWUuX3RpY2tzVG9EcmF3O1xuXHRcdHZhciBmb250cyA9IHBhcnNlVGlja0ZvbnRPcHRpb25zKG9wdGlvblRpY2tzKTtcblx0XHR2YXIgdGlja1BhZGRpbmcgPSBvcHRpb25UaWNrcy5wYWRkaW5nO1xuXHRcdHZhciB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZExpbmVzKTtcblx0XHR2YXIgcm90YXRpb24gPSAtaGVscGVycyQxLnRvUmFkaWFucyhtZS5sYWJlbFJvdGF0aW9uKTtcblx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHR2YXIgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcblx0XHRcdHkgPSBtZS5ib3R0b20gLSB0bCAtIHRpY2tQYWRkaW5nO1xuXHRcdFx0dGV4dEFsaWduID0gIXJvdGF0aW9uID8gJ2NlbnRlcicgOiAnbGVmdCc7XG5cdFx0fSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcblx0XHRcdHkgPSBtZS50b3AgKyB0bCArIHRpY2tQYWRkaW5nO1xuXHRcdFx0dGV4dEFsaWduID0gIXJvdGF0aW9uID8gJ2NlbnRlcicgOiAncmlnaHQnO1xuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuXHRcdFx0eCA9IG1lLnJpZ2h0IC0gKGlzTWlycm9yZWQgPyAwIDogdGwpIC0gdGlja1BhZGRpbmc7XG5cdFx0XHR0ZXh0QWxpZ24gPSBpc01pcnJvcmVkID8gJ2xlZnQnIDogJ3JpZ2h0Jztcblx0XHR9IGVsc2Uge1xuXHRcdFx0eCA9IG1lLmxlZnQgKyAoaXNNaXJyb3JlZCA/IDAgOiB0bCkgKyB0aWNrUGFkZGluZztcblx0XHRcdHRleHRBbGlnbiA9IGlzTWlycm9yZWQgPyAncmlnaHQnIDogJ2xlZnQnO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHRpY2sgPSB0aWNrc1tpXTtcblx0XHRcdGxhYmVsID0gdGljay5sYWJlbDtcblxuXHRcdFx0Ly8gYXV0b3NraXBwZXIgc2tpcHBlZCB0aGlzIHRpY2sgKCM0NjM1KVxuXHRcdFx0aWYgKGlzTnVsbE9yVW5kZWYobGFiZWwpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRwaXhlbCA9IG1lLmdldFBpeGVsRm9yVGljayh0aWNrLl9pbmRleCB8fCBpKSArIG9wdGlvblRpY2tzLmxhYmVsT2Zmc2V0O1xuXHRcdFx0Zm9udCA9IHRpY2subWFqb3IgPyBmb250cy5tYWpvciA6IGZvbnRzLm1pbm9yO1xuXHRcdFx0bGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodDtcblx0XHRcdGxpbmVDb3VudCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwubGVuZ3RoIDogMTtcblxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHR4ID0gcGl4ZWw7XG5cdFx0XHRcdHRleHRPZmZzZXQgPSBwb3NpdGlvbiA9PT0gJ3RvcCdcblx0XHRcdFx0XHQ/ICgoIXJvdGF0aW9uID8gMC41IDogMSkgLSBsaW5lQ291bnQpICogbGluZUhlaWdodFxuXHRcdFx0XHRcdDogKCFyb3RhdGlvbiA/IDAuNSA6IDApICogbGluZUhlaWdodDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHkgPSBwaXhlbDtcblx0XHRcdFx0dGV4dE9mZnNldCA9ICgxIC0gbGluZUNvdW50KSAqIGxpbmVIZWlnaHQgLyAyO1xuXHRcdFx0fVxuXG5cdFx0XHRpdGVtcy5wdXNoKHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeSxcblx0XHRcdFx0cm90YXRpb246IHJvdGF0aW9uLFxuXHRcdFx0XHRsYWJlbDogbGFiZWwsXG5cdFx0XHRcdGZvbnQ6IGZvbnQsXG5cdFx0XHRcdHRleHRPZmZzZXQ6IHRleHRPZmZzZXQsXG5cdFx0XHRcdHRleHRBbGlnbjogdGV4dEFsaWduXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaXRlbXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0dyaWQ6IGZ1bmN0aW9uKGNoYXJ0QXJlYSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGdyaWRMaW5lcyA9IG1lLm9wdGlvbnMuZ3JpZExpbmVzO1xuXG5cdFx0aWYgKCFncmlkTGluZXMuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGFsaWduUGl4ZWwgPSBoZWxwZXJzJDEuX2FsaWduUGl4ZWw7XG5cdFx0dmFyIGF4aXNXaWR0aCA9IGdyaWRMaW5lcy5kcmF3Qm9yZGVyID8gdmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5saW5lV2lkdGgsIDAsIDApIDogMDtcblx0XHR2YXIgaXRlbXMgPSBtZS5fZ3JpZExpbmVJdGVtcyB8fCAobWUuX2dyaWRMaW5lSXRlbXMgPSBtZS5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG5cdFx0dmFyIHdpZHRoLCBjb2xvciwgaSwgaWxlbiwgaXRlbTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdHdpZHRoID0gaXRlbS53aWR0aDtcblx0XHRcdGNvbG9yID0gaXRlbS5jb2xvcjtcblxuXHRcdFx0aWYgKHdpZHRoICYmIGNvbG9yKSB7XG5cdFx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSB3aWR0aDtcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG5cdFx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0XHRjdHguc2V0TGluZURhc2goaXRlbS5ib3JkZXJEYXNoKTtcblx0XHRcdFx0XHRjdHgubGluZURhc2hPZmZzZXQgPSBpdGVtLmJvcmRlckRhc2hPZmZzZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRcdFx0aWYgKGdyaWRMaW5lcy5kcmF3VGlja3MpIHtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGl0ZW0udHgxLCBpdGVtLnR5MSk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyhpdGVtLnR4MiwgaXRlbS50eTIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGdyaWRMaW5lcy5kcmF3T25DaGFydEFyZWEpIHtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGl0ZW0ueDEsIGl0ZW0ueTEpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oaXRlbS54MiwgaXRlbS55Mik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGF4aXNXaWR0aCkge1xuXHRcdFx0Ly8gRHJhdyB0aGUgbGluZSBhdCB0aGUgZWRnZSBvZiB0aGUgYXhpc1xuXHRcdFx0dmFyIGZpcnN0TGluZVdpZHRoID0gYXhpc1dpZHRoO1xuXHRcdFx0dmFyIGxhc3RMaW5lV2lkdGggPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmxpbmVXaWR0aCwgaXRlbXMudGlja3NMZW5ndGggLSAxLCAxKTtcblx0XHRcdHZhciBib3JkZXJWYWx1ZSA9IGl0ZW1zLmJvcmRlclZhbHVlO1xuXHRcdFx0dmFyIHgxLCB4MiwgeTEsIHkyO1xuXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0eDEgPSBhbGlnblBpeGVsKGNoYXJ0LCBtZS5sZWZ0LCBmaXJzdExpbmVXaWR0aCkgLSBmaXJzdExpbmVXaWR0aCAvIDI7XG5cdFx0XHRcdHgyID0gYWxpZ25QaXhlbChjaGFydCwgbWUucmlnaHQsIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG5cdFx0XHRcdHkxID0geTIgPSBib3JkZXJWYWx1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHkxID0gYWxpZ25QaXhlbChjaGFydCwgbWUudG9wLCBmaXJzdExpbmVXaWR0aCkgLSBmaXJzdExpbmVXaWR0aCAvIDI7XG5cdFx0XHRcdHkyID0gYWxpZ25QaXhlbChjaGFydCwgbWUuYm90dG9tLCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuXHRcdFx0XHR4MSA9IHgyID0gYm9yZGVyVmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5saW5lV2lkdGggPSBheGlzV2lkdGg7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmNvbG9yLCAwKTtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8oeDEsIHkxKTtcblx0XHRcdGN0eC5saW5lVG8oeDIsIHkyKTtcblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9uVGlja3MgPSBtZS5vcHRpb25zLnRpY2tzO1xuXG5cdFx0aWYgKCFvcHRpb25UaWNrcy5kaXNwbGF5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgaXRlbXMgPSBtZS5fbGFiZWxJdGVtcyB8fCAobWUuX2xhYmVsSXRlbXMgPSBtZS5fY29tcHV0ZUxhYmVsSXRlbXMoKSk7XG5cdFx0dmFyIGksIGosIGlsZW4sIGpsZW4sIGl0ZW0sIHRpY2tGb250LCBsYWJlbCwgeTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdHRpY2tGb250ID0gaXRlbS5mb250O1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2UgZHJhdyB0ZXh0IGluIHRoZSBjb3JyZWN0IGNvbG9yIGFuZCBmb250XG5cdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0Y3R4LnRyYW5zbGF0ZShpdGVtLngsIGl0ZW0ueSk7XG5cdFx0XHRjdHgucm90YXRlKGl0ZW0ucm90YXRpb24pO1xuXHRcdFx0Y3R4LmZvbnQgPSB0aWNrRm9udC5zdHJpbmc7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdGlja0ZvbnQuY29sb3I7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gaXRlbS50ZXh0QWxpZ247XG5cblx0XHRcdGxhYmVsID0gaXRlbS5sYWJlbDtcblx0XHRcdHkgPSBpdGVtLnRleHRPZmZzZXQ7XG5cdFx0XHRpZiAoaXNBcnJheShsYWJlbCkpIHtcblx0XHRcdFx0Zm9yIChqID0gMCwgamxlbiA9IGxhYmVsLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuXHRcdFx0XHRcdC8vIFdlIGp1c3QgbWFrZSBzdXJlIHRoZSBtdWx0aWxpbmUgZWxlbWVudCBpcyBhIHN0cmluZyBoZXJlLi5cblx0XHRcdFx0XHRjdHguZmlsbFRleHQoJycgKyBsYWJlbFtqXSwgMCwgeSk7XG5cdFx0XHRcdFx0eSArPSB0aWNrRm9udC5saW5lSGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHguZmlsbFRleHQobGFiZWwsIDAsIHkpO1xuXHRcdFx0fVxuXHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd1RpdGxlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBzY2FsZUxhYmVsID0gb3B0aW9ucy5zY2FsZUxhYmVsO1xuXG5cdFx0aWYgKCFzY2FsZUxhYmVsLmRpc3BsYXkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgc2NhbGVMYWJlbEZvbnRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JGEoc2NhbGVMYWJlbC5mb250Q29sb3IsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdHZhciBzY2FsZUxhYmVsRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQoc2NhbGVMYWJlbCk7XG5cdFx0dmFyIHNjYWxlTGFiZWxQYWRkaW5nID0gaGVscGVycyQxLm9wdGlvbnMudG9QYWRkaW5nKHNjYWxlTGFiZWwucGFkZGluZyk7XG5cdFx0dmFyIGhhbGZMaW5lSGVpZ2h0ID0gc2NhbGVMYWJlbEZvbnQubGluZUhlaWdodCAvIDI7XG5cdFx0dmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcblx0XHR2YXIgcm90YXRpb24gPSAwO1xuXHRcdHZhciBzY2FsZUxhYmVsWCwgc2NhbGVMYWJlbFk7XG5cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHNjYWxlTGFiZWxYID0gbWUubGVmdCArIG1lLndpZHRoIC8gMjsgLy8gbWlkcG9pbnQgb2YgdGhlIHdpZHRoXG5cdFx0XHRzY2FsZUxhYmVsWSA9IHBvc2l0aW9uID09PSAnYm90dG9tJ1xuXHRcdFx0XHQ/IG1lLmJvdHRvbSAtIGhhbGZMaW5lSGVpZ2h0IC0gc2NhbGVMYWJlbFBhZGRpbmcuYm90dG9tXG5cdFx0XHRcdDogbWUudG9wICsgaGFsZkxpbmVIZWlnaHQgKyBzY2FsZUxhYmVsUGFkZGluZy50b3A7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBpc0xlZnQgPSBwb3NpdGlvbiA9PT0gJ2xlZnQnO1xuXHRcdFx0c2NhbGVMYWJlbFggPSBpc0xlZnRcblx0XHRcdFx0PyBtZS5sZWZ0ICsgaGFsZkxpbmVIZWlnaHQgKyBzY2FsZUxhYmVsUGFkZGluZy50b3Bcblx0XHRcdFx0OiBtZS5yaWdodCAtIGhhbGZMaW5lSGVpZ2h0IC0gc2NhbGVMYWJlbFBhZGRpbmcudG9wO1xuXHRcdFx0c2NhbGVMYWJlbFkgPSBtZS50b3AgKyBtZS5oZWlnaHQgLyAyO1xuXHRcdFx0cm90YXRpb24gPSBpc0xlZnQgPyAtMC41ICogTWF0aC5QSSA6IDAuNSAqIE1hdGguUEk7XG5cdFx0fVxuXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHgudHJhbnNsYXRlKHNjYWxlTGFiZWxYLCBzY2FsZUxhYmVsWSk7XG5cdFx0Y3R4LnJvdGF0ZShyb3RhdGlvbik7XG5cdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRjdHguZmlsbFN0eWxlID0gc2NhbGVMYWJlbEZvbnRDb2xvcjsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0Y3R4LmZvbnQgPSBzY2FsZUxhYmVsRm9udC5zdHJpbmc7XG5cdFx0Y3R4LmZpbGxUZXh0KHNjYWxlTGFiZWwubGFiZWxTdHJpbmcsIDAsIDApO1xuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oY2hhcnRBcmVhKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdGlmICghbWUuX2lzVmlzaWJsZSgpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bWUuX2RyYXdHcmlkKGNoYXJ0QXJlYSk7XG5cdFx0bWUuX2RyYXdUaXRsZSgpO1xuXHRcdG1lLl9kcmF3TGFiZWxzKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfbGF5ZXJzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdHogPSBvcHRzLnRpY2tzICYmIG9wdHMudGlja3MueiB8fCAwO1xuXHRcdHZhciBneiA9IG9wdHMuZ3JpZExpbmVzICYmIG9wdHMuZ3JpZExpbmVzLnogfHwgMDtcblxuXHRcdGlmICghbWUuX2lzVmlzaWJsZSgpIHx8IHR6ID09PSBneiB8fCBtZS5kcmF3ICE9PSBtZS5fZHJhdykge1xuXHRcdFx0Ly8gYmFja3dhcmQgY29tcGF0aWJpbGl0eTogZHJhdyBoYXMgYmVlbiBvdmVycmlkZGVuIGJ5IGN1c3RvbSBzY2FsZVxuXHRcdFx0cmV0dXJuIFt7XG5cdFx0XHRcdHo6IHR6LFxuXHRcdFx0XHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZS5kcmF3LmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XTtcblx0XHR9XG5cblx0XHRyZXR1cm4gW3tcblx0XHRcdHo6IGd6LFxuXHRcdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1lLl9kcmF3R3JpZC5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdFx0bWUuX2RyYXdUaXRsZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHR6OiB0eixcblx0XHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZS5fZHJhd0xhYmVscy5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9XTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRNYXRjaGluZ1Zpc2libGVNZXRhczogZnVuY3Rpb24odHlwZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdHJldHVybiBtZS5jaGFydC5fZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpXG5cdFx0XHQuZmlsdGVyKGZ1bmN0aW9uKG1ldGEpIHtcblx0XHRcdFx0cmV0dXJuICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpXG5cdFx0XHRcdFx0JiYgKGlzSG9yaXpvbnRhbCA/IG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgOiBtZXRhLnlBeGlzSUQgPT09IG1lLmlkKTtcblx0XHRcdH0pO1xuXHR9XG59KTtcblxuU2NhbGUucHJvdG90eXBlLl9kcmF3ID0gU2NhbGUucHJvdG90eXBlLmRyYXc7XG5cbnZhciBjb3JlX3NjYWxlID0gU2NhbGU7XG5cbnZhciBpc051bGxPclVuZGVmJDEgPSBoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZjtcblxudmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdHBvc2l0aW9uOiAnYm90dG9tJ1xufTtcblxudmFyIHNjYWxlX2NhdGVnb3J5ID0gY29yZV9zY2FsZS5leHRlbmQoe1xuXHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cdFx0dmFyIHRpY2tzT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIG1pbiA9IHRpY2tzT3B0cy5taW47XG5cdFx0dmFyIG1heCA9IHRpY2tzT3B0cy5tYXg7XG5cdFx0dmFyIG1pbkluZGV4ID0gMDtcblx0XHR2YXIgbWF4SW5kZXggPSBsYWJlbHMubGVuZ3RoIC0gMTtcblx0XHR2YXIgZmluZEluZGV4O1xuXG5cdFx0aWYgKG1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyB1c2VyIHNwZWNpZmllZCBtaW4gdmFsdWVcblx0XHRcdGZpbmRJbmRleCA9IGxhYmVscy5pbmRleE9mKG1pbik7XG5cdFx0XHRpZiAoZmluZEluZGV4ID49IDApIHtcblx0XHRcdFx0bWluSW5kZXggPSBmaW5kSW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyB1c2VyIHNwZWNpZmllZCBtYXggdmFsdWVcblx0XHRcdGZpbmRJbmRleCA9IGxhYmVscy5pbmRleE9mKG1heCk7XG5cdFx0XHRpZiAoZmluZEluZGV4ID49IDApIHtcblx0XHRcdFx0bWF4SW5kZXggPSBmaW5kSW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWUubWluSW5kZXggPSBtaW5JbmRleDtcblx0XHRtZS5tYXhJbmRleCA9IG1heEluZGV4O1xuXHRcdG1lLm1pbiA9IGxhYmVsc1ttaW5JbmRleF07XG5cdFx0bWUubWF4ID0gbGFiZWxzW21heEluZGV4XTtcblx0fSxcblxuXHRidWlsZFRpY2tzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cdFx0dmFyIG1pbkluZGV4ID0gbWUubWluSW5kZXg7XG5cdFx0dmFyIG1heEluZGV4ID0gbWUubWF4SW5kZXg7XG5cblx0XHQvLyBJZiB3ZSBhcmUgdmlld2luZyBzb21lIHN1YnNldCBvZiBsYWJlbHMsIHNsaWNlIHRoZSBvcmlnaW5hbCBhcnJheVxuXHRcdG1lLnRpY2tzID0gKG1pbkluZGV4ID09PSAwICYmIG1heEluZGV4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSkgPyBsYWJlbHMgOiBsYWJlbHMuc2xpY2UobWluSW5kZXgsIG1heEluZGV4ICsgMSk7XG5cdH0sXG5cblx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cblx0XHRpZiAoY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyLl9nZXRWYWx1ZVNjYWxlSWQoKSA9PT0gbWUuaWQpIHtcblx0XHRcdHJldHVybiBtZS5nZXRSaWdodFZhbHVlKGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1lLl9nZXRMYWJlbHMoKVtpbmRleF07XG5cdH0sXG5cblx0X2NvbmZpZ3VyZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb2Zmc2V0ID0gbWUub3B0aW9ucy5vZmZzZXQ7XG5cdFx0dmFyIHRpY2tzID0gbWUudGlja3M7XG5cblx0XHRjb3JlX3NjYWxlLnByb3RvdHlwZS5fY29uZmlndXJlLmNhbGwobWUpO1xuXG5cdFx0aWYgKCFtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0Ly8gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHZlcnRpY2FsIGNhdGVnb3J5IHNjYWxlIHJldmVyc2UgaXMgaW52ZXJ0ZWQuXG5cdFx0XHRtZS5fcmV2ZXJzZVBpeGVscyA9ICFtZS5fcmV2ZXJzZVBpeGVscztcblx0XHR9XG5cblx0XHRpZiAoIXRpY2tzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bWUuX3N0YXJ0VmFsdWUgPSBtZS5taW5JbmRleCAtIChvZmZzZXQgPyAwLjUgOiAwKTtcblx0XHRtZS5fdmFsdWVSYW5nZSA9IE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIChvZmZzZXQgPyAwIDogMSksIDEpO1xuXHR9LFxuXG5cdC8vIFVzZWQgdG8gZ2V0IGRhdGEgdmFsdWUgbG9jYXRpb25zLiAgVmFsdWUgY2FuIGVpdGhlciBiZSBhbiBpbmRleCBvciBhIG51bWVyaWNhbCB2YWx1ZVxuXHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHZhbHVlQ2F0ZWdvcnksIGxhYmVscywgaWR4O1xuXG5cdFx0aWYgKCFpc051bGxPclVuZGVmJDEoaW5kZXgpICYmICFpc051bGxPclVuZGVmJDEoZGF0YXNldEluZGV4KSkge1xuXHRcdFx0dmFsdWUgPSBtZS5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF07XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdmFsdWUgaXMgYSBkYXRhIG9iamVjdCwgdGhlbiBpbmRleCBpcyB0aGUgaW5kZXggaW4gdGhlIGRhdGEgYXJyYXksXG5cdFx0Ly8gbm90IHRoZSBpbmRleCBvZiB0aGUgc2NhbGUuIFdlIG5lZWQgdG8gY2hhbmdlIHRoYXQuXG5cdFx0aWYgKCFpc051bGxPclVuZGVmJDEodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZUNhdGVnb3J5ID0gbWUuaXNIb3Jpem9udGFsKCkgPyB2YWx1ZS54IDogdmFsdWUueTtcblx0XHR9XG5cdFx0aWYgKHZhbHVlQ2F0ZWdvcnkgIT09IHVuZGVmaW5lZCB8fCAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiBpc05hTihpbmRleCkpKSB7XG5cdFx0XHRsYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cdFx0XHR2YWx1ZSA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdCh2YWx1ZUNhdGVnb3J5LCB2YWx1ZSk7XG5cdFx0XHRpZHggPSBsYWJlbHMuaW5kZXhPZih2YWx1ZSk7XG5cdFx0XHRpbmRleCA9IGlkeCAhPT0gLTEgPyBpZHggOiBpbmRleDtcblx0XHRcdGlmIChpc05hTihpbmRleCkpIHtcblx0XHRcdFx0aW5kZXggPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1lLmdldFBpeGVsRm9yRGVjaW1hbCgoaW5kZXggLSBtZS5fc3RhcnRWYWx1ZSkgLyBtZS5fdmFsdWVSYW5nZSk7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMudGlja3M7XG5cdFx0cmV0dXJuIGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDFcblx0XHRcdD8gbnVsbFxuXHRcdFx0OiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLCBpbmRleCArIHRoaXMubWluSW5kZXgpO1xuXHR9LFxuXG5cdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdmFsdWUgPSBNYXRoLnJvdW5kKG1lLl9zdGFydFZhbHVlICsgbWUuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIG1lLl92YWx1ZVJhbmdlKTtcblx0XHRyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIDApLCBtZS50aWNrcy5sZW5ndGggLSAxKTtcblx0fSxcblxuXHRnZXRCYXNlUGl4ZWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmJvdHRvbTtcblx0fVxufSk7XG5cbi8vIElOVEVSTkFMOiBzdGF0aWMgZGVmYXVsdCBvcHRpb25zLCByZWdpc3RlcmVkIGluIHNyYy9pbmRleC5qc1xudmFyIF9kZWZhdWx0cyA9IGRlZmF1bHRDb25maWc7XG5zY2FsZV9jYXRlZ29yeS5fZGVmYXVsdHMgPSBfZGVmYXVsdHM7XG5cbnZhciBub29wID0gaGVscGVycyQxLm5vb3A7XG52YXIgaXNOdWxsT3JVbmRlZiQyID0gaGVscGVycyQxLmlzTnVsbE9yVW5kZWY7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzZXQgb2YgbGluZWFyIHRpY2tzXG4gKiBAcGFyYW0gZ2VuZXJhdGlvbk9wdGlvbnMgdGhlIG9wdGlvbnMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgdGlja3NcbiAqIEBwYXJhbSBkYXRhUmFuZ2UgdGhlIHJhbmdlIG9mIHRoZSBkYXRhXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IGFycmF5IG9mIHRpY2sgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuXHR2YXIgdGlja3MgPSBbXTtcblx0Ly8gVG8gZ2V0IGEgXCJuaWNlXCIgdmFsdWUgZm9yIHRoZSB0aWNrIHNwYWNpbmcsIHdlIHdpbGwgdXNlIHRoZSBhcHByb3ByaWF0ZWx5IG5hbWVkXG5cdC8vIFwibmljZSBudW1iZXJcIiBhbGdvcml0aG0uIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NTA2ODgxL25pY2UtbGFiZWwtYWxnb3JpdGhtLWZvci1jaGFydHMtd2l0aC1taW5pbXVtLXRpY2tzXG5cdC8vIGZvciBkZXRhaWxzLlxuXG5cdHZhciBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuXHR2YXIgc3RlcFNpemUgPSBnZW5lcmF0aW9uT3B0aW9ucy5zdGVwU2l6ZTtcblx0dmFyIHVuaXQgPSBzdGVwU2l6ZSB8fCAxO1xuXHR2YXIgbWF4TnVtU3BhY2VzID0gZ2VuZXJhdGlvbk9wdGlvbnMubWF4VGlja3MgLSAxO1xuXHR2YXIgbWluID0gZ2VuZXJhdGlvbk9wdGlvbnMubWluO1xuXHR2YXIgbWF4ID0gZ2VuZXJhdGlvbk9wdGlvbnMubWF4O1xuXHR2YXIgcHJlY2lzaW9uID0gZ2VuZXJhdGlvbk9wdGlvbnMucHJlY2lzaW9uO1xuXHR2YXIgcm1pbiA9IGRhdGFSYW5nZS5taW47XG5cdHZhciBybWF4ID0gZGF0YVJhbmdlLm1heDtcblx0dmFyIHNwYWNpbmcgPSBoZWxwZXJzJDEubmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4TnVtU3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuXHR2YXIgZmFjdG9yLCBuaWNlTWluLCBuaWNlTWF4LCBudW1TcGFjZXM7XG5cblx0Ly8gQmV5b25kIE1JTl9TUEFDSU5HIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgYmVpbmcgdG8gbG9zZSBwcmVjaXNpb25cblx0Ly8gc3VjaCB0aGF0IHdlIGNhbid0IGRvIHRoZSBtYXRoIG5lY2Vzc2FyeSB0byBnZW5lcmF0ZSB0aWNrc1xuXHRpZiAoc3BhY2luZyA8IE1JTl9TUEFDSU5HICYmIGlzTnVsbE9yVW5kZWYkMihtaW4pICYmIGlzTnVsbE9yVW5kZWYkMihtYXgpKSB7XG5cdFx0cmV0dXJuIFtybWluLCBybWF4XTtcblx0fVxuXG5cdG51bVNwYWNlcyA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgLSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKTtcblx0aWYgKG51bVNwYWNlcyA+IG1heE51bVNwYWNlcykge1xuXHRcdC8vIElmIHRoZSBjYWxjdWxhdGVkIG51bSBvZiBzcGFjZXMgZXhjZWVkcyBtYXhOdW1TcGFjZXMsIHJlY2FsY3VsYXRlIGl0XG5cdFx0c3BhY2luZyA9IGhlbHBlcnMkMS5uaWNlTnVtKG51bVNwYWNlcyAqIHNwYWNpbmcgLyBtYXhOdW1TcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG5cdH1cblxuXHRpZiAoc3RlcFNpemUgfHwgaXNOdWxsT3JVbmRlZiQyKHByZWNpc2lvbikpIHtcblx0XHQvLyBJZiBhIHByZWNpc2lvbiBpcyBub3Qgc3BlY2lmaWVkLCBjYWxjdWxhdGUgZmFjdG9yIGJhc2VkIG9uIHNwYWNpbmdcblx0XHRmYWN0b3IgPSBNYXRoLnBvdygxMCwgaGVscGVycyQxLl9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpKTtcblx0fSBlbHNlIHtcblx0XHQvLyBJZiB0aGUgdXNlciBzcGVjaWZpZWQgYSBwcmVjaXNpb24sIHJvdW5kIHRvIHRoYXQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG5cdFx0ZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG5cdFx0c3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nICogZmFjdG9yKSAvIGZhY3Rvcjtcblx0fVxuXG5cdG5pY2VNaW4gPSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG5cdG5pY2VNYXggPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpICogc3BhY2luZztcblxuXHQvLyBJZiBtaW4sIG1heCBhbmQgc3RlcFNpemUgaXMgc2V0IGFuZCB0aGV5IG1ha2UgYW4gZXZlbmx5IHNwYWNlZCBzY2FsZSB1c2UgaXQuXG5cdGlmIChzdGVwU2l6ZSkge1xuXHRcdC8vIElmIHZlcnkgY2xvc2UgdG8gb3VyIHdob2xlIG51bWJlciwgdXNlIGl0LlxuXHRcdGlmICghaXNOdWxsT3JVbmRlZiQyKG1pbikgJiYgaGVscGVycyQxLmFsbW9zdFdob2xlKG1pbiAvIHNwYWNpbmcsIHNwYWNpbmcgLyAxMDAwKSkge1xuXHRcdFx0bmljZU1pbiA9IG1pbjtcblx0XHR9XG5cdFx0aWYgKCFpc051bGxPclVuZGVmJDIobWF4KSAmJiBoZWxwZXJzJDEuYWxtb3N0V2hvbGUobWF4IC8gc3BhY2luZywgc3BhY2luZyAvIDEwMDApKSB7XG5cdFx0XHRuaWNlTWF4ID0gbWF4O1xuXHRcdH1cblx0fVxuXG5cdG51bVNwYWNlcyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBzcGFjaW5nO1xuXHQvLyBJZiB2ZXJ5IGNsb3NlIHRvIG91ciByb3VuZGVkIHZhbHVlLCB1c2UgaXQuXG5cdGlmIChoZWxwZXJzJDEuYWxtb3N0RXF1YWxzKG51bVNwYWNlcywgTWF0aC5yb3VuZChudW1TcGFjZXMpLCBzcGFjaW5nIC8gMTAwMCkpIHtcblx0XHRudW1TcGFjZXMgPSBNYXRoLnJvdW5kKG51bVNwYWNlcyk7XG5cdH0gZWxzZSB7XG5cdFx0bnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG5cdH1cblxuXHRuaWNlTWluID0gTWF0aC5yb3VuZChuaWNlTWluICogZmFjdG9yKSAvIGZhY3Rvcjtcblx0bmljZU1heCA9IE1hdGgucm91bmQobmljZU1heCAqIGZhY3RvcikgLyBmYWN0b3I7XG5cdHRpY2tzLnB1c2goaXNOdWxsT3JVbmRlZiQyKG1pbikgPyBuaWNlTWluIDogbWluKTtcblx0Zm9yICh2YXIgaiA9IDE7IGogPCBudW1TcGFjZXM7ICsraikge1xuXHRcdHRpY2tzLnB1c2goTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3IpO1xuXHR9XG5cdHRpY2tzLnB1c2goaXNOdWxsT3JVbmRlZiQyKG1heCkgPyBuaWNlTWF4IDogbWF4KTtcblxuXHRyZXR1cm4gdGlja3M7XG59XG5cbnZhciBzY2FsZV9saW5lYXJiYXNlID0gY29yZV9zY2FsZS5leHRlbmQoe1xuXHRnZXRSaWdodFZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gK3ZhbHVlO1xuXHRcdH1cblx0XHRyZXR1cm4gY29yZV9zY2FsZS5wcm90b3R5cGUuZ2V0UmlnaHRWYWx1ZS5jYWxsKHRoaXMsIHZhbHVlKTtcblx0fSxcblxuXHRoYW5kbGVUaWNrUmFuZ2VPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXG5cdFx0Ly8gSWYgd2UgYXJlIGZvcmNpbmcgaXQgdG8gYmVnaW4gYXQgMCwgYnV0IDAgd2lsbCBhbHJlYWR5IGJlIHJlbmRlcmVkIG9uIHRoZSBjaGFydCxcblx0XHQvLyBkbyBub3RoaW5nIHNpbmNlIHRoYXQgd291bGQgbWFrZSB0aGUgY2hhcnQgd2VpcmQuIElmIHRoZSB1c2VyIHJlYWxseSB3YW50cyBhIHdlaXJkIGNoYXJ0XG5cdFx0Ly8gYXhpcywgdGhleSBjYW4gbWFudWFsbHkgb3ZlcnJpZGUgaXRcblx0XHRpZiAodGlja09wdHMuYmVnaW5BdFplcm8pIHtcblx0XHRcdHZhciBtaW5TaWduID0gaGVscGVycyQxLnNpZ24obWUubWluKTtcblx0XHRcdHZhciBtYXhTaWduID0gaGVscGVycyQxLnNpZ24obWUubWF4KTtcblxuXHRcdFx0aWYgKG1pblNpZ24gPCAwICYmIG1heFNpZ24gPCAwKSB7XG5cdFx0XHRcdC8vIG1vdmUgdGhlIHRvcCB1cCB0byAwXG5cdFx0XHRcdG1lLm1heCA9IDA7XG5cdFx0XHR9IGVsc2UgaWYgKG1pblNpZ24gPiAwICYmIG1heFNpZ24gPiAwKSB7XG5cdFx0XHRcdC8vIG1vdmUgdGhlIGJvdHRvbSBkb3duIHRvIDBcblx0XHRcdFx0bWUubWluID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgc2V0TWluID0gdGlja09wdHMubWluICE9PSB1bmRlZmluZWQgfHwgdGlja09wdHMuc3VnZ2VzdGVkTWluICE9PSB1bmRlZmluZWQ7XG5cdFx0dmFyIHNldE1heCA9IHRpY2tPcHRzLm1heCAhPT0gdW5kZWZpbmVkIHx8IHRpY2tPcHRzLnN1Z2dlc3RlZE1heCAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0aWYgKHRpY2tPcHRzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRtZS5taW4gPSB0aWNrT3B0cy5taW47XG5cdFx0fSBlbHNlIGlmICh0aWNrT3B0cy5zdWdnZXN0ZWRNaW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKG1lLm1pbiA9PT0gbnVsbCkge1xuXHRcdFx0XHRtZS5taW4gPSB0aWNrT3B0cy5zdWdnZXN0ZWRNaW47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5taW4gPSBNYXRoLm1pbihtZS5taW4sIHRpY2tPcHRzLnN1Z2dlc3RlZE1pbik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRpY2tPcHRzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRtZS5tYXggPSB0aWNrT3B0cy5tYXg7XG5cdFx0fSBlbHNlIGlmICh0aWNrT3B0cy5zdWdnZXN0ZWRNYXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKG1lLm1heCA9PT0gbnVsbCkge1xuXHRcdFx0XHRtZS5tYXggPSB0aWNrT3B0cy5zdWdnZXN0ZWRNYXg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5tYXggPSBNYXRoLm1heChtZS5tYXgsIHRpY2tPcHRzLnN1Z2dlc3RlZE1heCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHNldE1pbiAhPT0gc2V0TWF4KSB7XG5cdFx0XHQvLyBXZSBzZXQgdGhlIG1pbiBvciB0aGUgbWF4IGJ1dCBub3QgYm90aC5cblx0XHRcdC8vIFNvIGVuc3VyZSB0aGF0IG91ciByYW5nZSBpcyBnb29kXG5cdFx0XHQvLyBJbnZlcnRlZCBvciAwIGxlbmd0aCByYW5nZSBjYW4gaGFwcGVuIHdoZW5cblx0XHRcdC8vIHRpY2tzLm1pbiBpcyBzZXQsIGFuZCBubyBkYXRhc2V0cyBhcmUgdmlzaWJsZVxuXHRcdFx0aWYgKG1lLm1pbiA+PSBtZS5tYXgpIHtcblx0XHRcdFx0aWYgKHNldE1pbikge1xuXHRcdFx0XHRcdG1lLm1heCA9IG1lLm1pbiArIDE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWUubWluID0gbWUubWF4IC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChtZS5taW4gPT09IG1lLm1heCkge1xuXHRcdFx0bWUubWF4Kys7XG5cblx0XHRcdGlmICghdGlja09wdHMuYmVnaW5BdFplcm8pIHtcblx0XHRcdFx0bWUubWluLS07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGdldFRpY2tMaW1pdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXHRcdHZhciBzdGVwU2l6ZSA9IHRpY2tPcHRzLnN0ZXBTaXplO1xuXHRcdHZhciBtYXhUaWNrc0xpbWl0ID0gdGlja09wdHMubWF4VGlja3NMaW1pdDtcblx0XHR2YXIgbWF4VGlja3M7XG5cblx0XHRpZiAoc3RlcFNpemUpIHtcblx0XHRcdG1heFRpY2tzID0gTWF0aC5jZWlsKG1lLm1heCAvIHN0ZXBTaXplKSAtIE1hdGguZmxvb3IobWUubWluIC8gc3RlcFNpemUpICsgMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF4VGlja3MgPSBtZS5fY29tcHV0ZVRpY2tMaW1pdCgpO1xuXHRcdFx0bWF4VGlja3NMaW1pdCA9IG1heFRpY2tzTGltaXQgfHwgMTE7XG5cdFx0fVxuXG5cdFx0aWYgKG1heFRpY2tzTGltaXQpIHtcblx0XHRcdG1heFRpY2tzID0gTWF0aC5taW4obWF4VGlja3NMaW1pdCwgbWF4VGlja3MpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXhUaWNrcztcblx0fSxcblxuXHRfY29tcHV0ZVRpY2tMaW1pdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0fSxcblxuXHRoYW5kbGVEaXJlY3Rpb25hbENoYW5nZXM6IG5vb3AsXG5cblx0YnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpY2tPcHRzID0gb3B0cy50aWNrcztcblxuXHRcdC8vIEZpZ3VyZSBvdXQgd2hhdCB0aGUgbWF4IG51bWJlciBvZiB0aWNrcyB3ZSBjYW4gc3VwcG9ydCBpdCBpcyBiYXNlZCBvbiB0aGUgc2l6ZSBvZlxuXHRcdC8vIHRoZSBheGlzIGFyZWEuIEZvciBub3csIHdlIHNheSB0aGF0IHRoZSBtaW5pbXVtIHRpY2sgc3BhY2luZyBpbiBwaXhlbHMgbXVzdCBiZSA0MFxuXHRcdC8vIFdlIGFsc28gbGltaXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRpY2tzIHRvIDExIHdoaWNoIGdpdmVzIGEgbmljZSAxMCBzcXVhcmVzIG9uXG5cdFx0Ly8gdGhlIGdyYXBoLiBNYWtlIHN1cmUgd2UgYWx3YXlzIGhhdmUgYXQgbGVhc3QgMiB0aWNrc1xuXHRcdHZhciBtYXhUaWNrcyA9IG1lLmdldFRpY2tMaW1pdCgpO1xuXHRcdG1heFRpY2tzID0gTWF0aC5tYXgoMiwgbWF4VGlja3MpO1xuXG5cdFx0dmFyIG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuXHRcdFx0bWF4VGlja3M6IG1heFRpY2tzLFxuXHRcdFx0bWluOiB0aWNrT3B0cy5taW4sXG5cdFx0XHRtYXg6IHRpY2tPcHRzLm1heCxcblx0XHRcdHByZWNpc2lvbjogdGlja09wdHMucHJlY2lzaW9uLFxuXHRcdFx0c3RlcFNpemU6IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5maXhlZFN0ZXBTaXplLCB0aWNrT3B0cy5zdGVwU2l6ZSlcblx0XHR9O1xuXHRcdHZhciB0aWNrcyA9IG1lLnRpY2tzID0gZ2VuZXJhdGVUaWNrcyhudW1lcmljR2VuZXJhdG9yT3B0aW9ucywgbWUpO1xuXG5cdFx0bWUuaGFuZGxlRGlyZWN0aW9uYWxDaGFuZ2VzKCk7XG5cblx0XHQvLyBBdCB0aGlzIHBvaW50LCB3ZSBuZWVkIHRvIHVwZGF0ZSBvdXIgbWF4IGFuZCBtaW4gZ2l2ZW4gdGhlIHRpY2sgdmFsdWVzIHNpbmNlIHdlIGhhdmUgZXhwYW5kZWQgdGhlXG5cdFx0Ly8gcmFuZ2Ugb2YgdGhlIHNjYWxlXG5cdFx0bWUubWF4ID0gaGVscGVycyQxLm1heCh0aWNrcyk7XG5cdFx0bWUubWluID0gaGVscGVycyQxLm1pbih0aWNrcyk7XG5cblx0XHRpZiAodGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0dGlja3MucmV2ZXJzZSgpO1xuXG5cdFx0XHRtZS5zdGFydCA9IG1lLm1heDtcblx0XHRcdG1lLmVuZCA9IG1lLm1pbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuc3RhcnQgPSBtZS5taW47XG5cdFx0XHRtZS5lbmQgPSBtZS5tYXg7XG5cdFx0fVxuXHR9LFxuXG5cdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdG1lLnRpY2tzQXNOdW1iZXJzID0gbWUudGlja3Muc2xpY2UoKTtcblx0XHRtZS56ZXJvTGluZUluZGV4ID0gbWUudGlja3MuaW5kZXhPZigwKTtcblxuXHRcdGNvcmVfc2NhbGUucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwobWUpO1xuXHR9LFxuXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tzID0gbWUuZ2V0VGlja3MoKTtcblx0XHR2YXIgc3RhcnQgPSBtZS5taW47XG5cdFx0dmFyIGVuZCA9IG1lLm1heDtcblx0XHR2YXIgb2Zmc2V0O1xuXG5cdFx0Y29yZV9zY2FsZS5wcm90b3R5cGUuX2NvbmZpZ3VyZS5jYWxsKG1lKTtcblxuXHRcdGlmIChtZS5vcHRpb25zLm9mZnNldCAmJiB0aWNrcy5sZW5ndGgpIHtcblx0XHRcdG9mZnNldCA9IChlbmQgLSBzdGFydCkgLyBNYXRoLm1heCh0aWNrcy5sZW5ndGggLSAxLCAxKSAvIDI7XG5cdFx0XHRzdGFydCAtPSBvZmZzZXQ7XG5cdFx0XHRlbmQgKz0gb2Zmc2V0O1xuXHRcdH1cblx0XHRtZS5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuXHRcdG1lLl9lbmRWYWx1ZSA9IGVuZDtcblx0XHRtZS5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuXHR9XG59KTtcblxudmFyIGRlZmF1bHRDb25maWckMSA9IHtcblx0cG9zaXRpb246ICdsZWZ0Jyxcblx0dGlja3M6IHtcblx0XHRjYWxsYmFjazogY29yZV90aWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHR9XG59O1xuXG52YXIgREVGQVVMVF9NSU4gPSAwO1xudmFyIERFRkFVTFRfTUFYID0gMTtcblxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrZWQsIG1ldGEpIHtcblx0dmFyIGtleSA9IFtcblx0XHRtZXRhLnR5cGUsXG5cdFx0Ly8gd2UgaGF2ZSBhIHNlcGFyYXRlIHN0YWNrIGZvciBzdGFjaz11bmRlZmluZWQgZGF0YXNldHMgd2hlbiB0aGUgb3B0cy5zdGFja2VkIGlzIHVuZGVmaW5lZFxuXHRcdHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrID09PSB1bmRlZmluZWQgPyBtZXRhLmluZGV4IDogJycsXG5cdFx0bWV0YS5zdGFja1xuXHRdLmpvaW4oJy4nKTtcblxuXHRpZiAoc3RhY2tzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdHN0YWNrc1trZXldID0ge1xuXHRcdFx0cG9zOiBbXSxcblx0XHRcdG5lZzogW11cblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHN0YWNrc1trZXldO1xufVxuXG5mdW5jdGlvbiBzdGFja0RhdGEoc2NhbGUsIHN0YWNrcywgbWV0YSwgZGF0YSkge1xuXHR2YXIgb3B0cyA9IHNjYWxlLm9wdGlvbnM7XG5cdHZhciBzdGFja2VkID0gb3B0cy5zdGFja2VkO1xuXHR2YXIgc3RhY2sgPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywgc3RhY2tlZCwgbWV0YSk7XG5cdHZhciBwb3MgPSBzdGFjay5wb3M7XG5cdHZhciBuZWcgPSBzdGFjay5uZWc7XG5cdHZhciBpbGVuID0gZGF0YS5sZW5ndGg7XG5cdHZhciBpLCB2YWx1ZTtcblxuXHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0dmFsdWUgPSBzY2FsZS5fcGFyc2VWYWx1ZShkYXRhW2ldKTtcblx0XHRpZiAoaXNOYU4odmFsdWUubWluKSB8fCBpc05hTih2YWx1ZS5tYXgpIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHBvc1tpXSA9IHBvc1tpXSB8fCAwO1xuXHRcdG5lZ1tpXSA9IG5lZ1tpXSB8fCAwO1xuXG5cdFx0aWYgKG9wdHMucmVsYXRpdmVQb2ludHMpIHtcblx0XHRcdHBvc1tpXSA9IDEwMDtcblx0XHR9IGVsc2UgaWYgKHZhbHVlLm1pbiA8IDAgfHwgdmFsdWUubWF4IDwgMCkge1xuXHRcdFx0bmVnW2ldICs9IHZhbHVlLm1pbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cG9zW2ldICs9IHZhbHVlLm1heDtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTWluTWF4KHNjYWxlLCBtZXRhLCBkYXRhKSB7XG5cdHZhciBpbGVuID0gZGF0YS5sZW5ndGg7XG5cdHZhciBpLCB2YWx1ZTtcblxuXHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0dmFsdWUgPSBzY2FsZS5fcGFyc2VWYWx1ZShkYXRhW2ldKTtcblx0XHRpZiAoaXNOYU4odmFsdWUubWluKSB8fCBpc05hTih2YWx1ZS5tYXgpIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHNjYWxlLm1pbiA9IE1hdGgubWluKHNjYWxlLm1pbiwgdmFsdWUubWluKTtcblx0XHRzY2FsZS5tYXggPSBNYXRoLm1heChzY2FsZS5tYXgsIHZhbHVlLm1heCk7XG5cdH1cbn1cblxudmFyIHNjYWxlX2xpbmVhciA9IHNjYWxlX2xpbmVhcmJhc2UuZXh0ZW5kKHtcblx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbWV0YXNldHMgPSBtZS5fZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtcblx0XHR2YXIgaGFzU3RhY2tzID0gb3B0cy5zdGFja2VkO1xuXHRcdHZhciBzdGFja3MgPSB7fTtcblx0XHR2YXIgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDtcblx0XHR2YXIgaSwgbWV0YSwgZGF0YSwgdmFsdWVzO1xuXG5cdFx0bWUubWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXHRcdG1lLm1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblxuXHRcdGlmIChoYXNTdGFja3MgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Zm9yIChpID0gMDsgIWhhc1N0YWNrcyAmJiBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXTtcblx0XHRcdFx0aGFzU3RhY2tzID0gbWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXTtcblx0XHRcdGRhdGEgPSBkYXRhc2V0c1ttZXRhLmluZGV4XS5kYXRhO1xuXHRcdFx0aWYgKGhhc1N0YWNrcykge1xuXHRcdFx0XHRzdGFja0RhdGEobWUsIHN0YWNrcywgbWV0YSwgZGF0YSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cGRhdGVNaW5NYXgobWUsIG1ldGEsIGRhdGEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhlbHBlcnMkMS5lYWNoKHN0YWNrcywgZnVuY3Rpb24oc3RhY2tWYWx1ZXMpIHtcblx0XHRcdHZhbHVlcyA9IHN0YWNrVmFsdWVzLnBvcy5jb25jYXQoc3RhY2tWYWx1ZXMubmVnKTtcblx0XHRcdG1lLm1pbiA9IE1hdGgubWluKG1lLm1pbiwgaGVscGVycyQxLm1pbih2YWx1ZXMpKTtcblx0XHRcdG1lLm1heCA9IE1hdGgubWF4KG1lLm1heCwgaGVscGVycyQxLm1heCh2YWx1ZXMpKTtcblx0XHR9KTtcblxuXHRcdG1lLm1pbiA9IGhlbHBlcnMkMS5pc0Zpbml0ZShtZS5taW4pICYmICFpc05hTihtZS5taW4pID8gbWUubWluIDogREVGQVVMVF9NSU47XG5cdFx0bWUubWF4ID0gaGVscGVycyQxLmlzRmluaXRlKG1lLm1heCkgJiYgIWlzTmFOKG1lLm1heCkgPyBtZS5tYXggOiBERUZBVUxUX01BWDtcblxuXHRcdC8vIENvbW1vbiBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSB0aWNrcy5taW4sIHRpY2tzLm1heCwgdGlja3MuYmVnaW5BdFplcm9cblx0XHRtZS5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG5cdH0sXG5cblx0Ly8gUmV0dXJucyB0aGUgbWF4aW11bSBudW1iZXIgb2YgdGlja3MgYmFzZWQgb24gdGhlIHNjYWxlIGRpbWVuc2lvblxuXHRfY29tcHV0ZVRpY2tMaW1pdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja0ZvbnQ7XG5cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHJldHVybiBNYXRoLmNlaWwobWUud2lkdGggLyA0MCk7XG5cdFx0fVxuXHRcdHRpY2tGb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChtZS5vcHRpb25zLnRpY2tzKTtcblx0XHRyZXR1cm4gTWF0aC5jZWlsKG1lLmhlaWdodCAvIHRpY2tGb250LmxpbmVIZWlnaHQpO1xuXHR9LFxuXG5cdC8vIENhbGxlZCBhZnRlciB0aGUgdGlja3MgYXJlIGJ1aWx0LiBXZSBuZWVkXG5cdGhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlczogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHQvLyBXZSBhcmUgaW4gYSB2ZXJ0aWNhbCBvcmllbnRhdGlvbi4gVGhlIHRvcCB2YWx1ZSBpcyB0aGUgaGlnaGVzdC4gU28gcmV2ZXJzZSB0aGUgYXJyYXlcblx0XHRcdHRoaXMudGlja3MucmV2ZXJzZSgpO1xuXHRcdH1cblx0fSxcblxuXHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFNjYWxlTGFiZWwodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHR9LFxuXG5cdC8vIFV0aWxzXG5cdGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKCgrbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSkgLSBtZS5fc3RhcnRWYWx1ZSkgLyBtZS5fdmFsdWVSYW5nZSk7XG5cdH0sXG5cblx0Z2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHRyZXR1cm4gdGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2U7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMudGlja3NBc051bWJlcnM7XG5cdFx0aWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XSk7XG5cdH1cbn0pO1xuXG4vLyBJTlRFUk5BTDogc3RhdGljIGRlZmF1bHQgb3B0aW9ucywgcmVnaXN0ZXJlZCBpbiBzcmMvaW5kZXguanNcbnZhciBfZGVmYXVsdHMkMSA9IGRlZmF1bHRDb25maWckMTtcbnNjYWxlX2xpbmVhci5fZGVmYXVsdHMgPSBfZGVmYXVsdHMkMTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JGIgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgbG9nMTAgPSBoZWxwZXJzJDEubWF0aC5sb2cxMDtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHNldCBvZiBsb2dhcml0aG1pYyB0aWNrc1xuICogQHBhcmFtIGdlbmVyYXRpb25PcHRpb25zIHRoZSBvcHRpb25zIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHRpY2tzXG4gKiBAcGFyYW0gZGF0YVJhbmdlIHRoZSByYW5nZSBvZiB0aGUgZGF0YVxuICogQHJldHVybnMge251bWJlcltdfSBhcnJheSBvZiB0aWNrIHZhbHVlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuXHR2YXIgdGlja3MgPSBbXTtcblxuXHR2YXIgdGlja1ZhbCA9IHZhbHVlT3JEZWZhdWx0JGIoZ2VuZXJhdGlvbk9wdGlvbnMubWluLCBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWluKSkpKTtcblxuXHR2YXIgZW5kRXhwID0gTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWF4KSk7XG5cdHZhciBlbmRTaWduaWZpY2FuZCA9IE1hdGguY2VpbChkYXRhUmFuZ2UubWF4IC8gTWF0aC5wb3coMTAsIGVuZEV4cCkpO1xuXHR2YXIgZXhwLCBzaWduaWZpY2FuZDtcblxuXHRpZiAodGlja1ZhbCA9PT0gMCkge1xuXHRcdGV4cCA9IE1hdGguZmxvb3IobG9nMTAoZGF0YVJhbmdlLm1pbk5vdFplcm8pKTtcblx0XHRzaWduaWZpY2FuZCA9IE1hdGguZmxvb3IoZGF0YVJhbmdlLm1pbk5vdFplcm8gLyBNYXRoLnBvdygxMCwgZXhwKSk7XG5cblx0XHR0aWNrcy5wdXNoKHRpY2tWYWwpO1xuXHRcdHRpY2tWYWwgPSBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApO1xuXHR9IGVsc2Uge1xuXHRcdGV4cCA9IE1hdGguZmxvb3IobG9nMTAodGlja1ZhbCkpO1xuXHRcdHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcih0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuXHR9XG5cdHZhciBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcblxuXHRkbyB7XG5cdFx0dGlja3MucHVzaCh0aWNrVmFsKTtcblxuXHRcdCsrc2lnbmlmaWNhbmQ7XG5cdFx0aWYgKHNpZ25pZmljYW5kID09PSAxMCkge1xuXHRcdFx0c2lnbmlmaWNhbmQgPSAxO1xuXHRcdFx0KytleHA7XG5cdFx0XHRwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG5cdFx0fVxuXG5cdFx0dGlja1ZhbCA9IE1hdGgucm91bmQoc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG5cdH0gd2hpbGUgKGV4cCA8IGVuZEV4cCB8fCAoZXhwID09PSBlbmRFeHAgJiYgc2lnbmlmaWNhbmQgPCBlbmRTaWduaWZpY2FuZCkpO1xuXG5cdHZhciBsYXN0VGljayA9IHZhbHVlT3JEZWZhdWx0JGIoZ2VuZXJhdGlvbk9wdGlvbnMubWF4LCB0aWNrVmFsKTtcblx0dGlja3MucHVzaChsYXN0VGljayk7XG5cblx0cmV0dXJuIHRpY2tzO1xufVxuXG52YXIgZGVmYXVsdENvbmZpZyQyID0ge1xuXHRwb3NpdGlvbjogJ2xlZnQnLFxuXG5cdC8vIGxhYmVsIHNldHRpbmdzXG5cdHRpY2tzOiB7XG5cdFx0Y2FsbGJhY2s6IGNvcmVfdGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pY1xuXHR9XG59O1xuXG4vLyBUT0RPKHYzKTogY2hhbmdlIHRoaXMgdG8gcG9zaXRpdmVPckRlZmF1bHRcbmZ1bmN0aW9uIG5vbk5lZ2F0aXZlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcblx0cmV0dXJuIGhlbHBlcnMkMS5pc0Zpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG52YXIgc2NhbGVfbG9nYXJpdGhtaWMgPSBjb3JlX3NjYWxlLmV4dGVuZCh7XG5cdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdGZ1bmN0aW9uIElETWF0Y2hlcyhtZXRhKSB7XG5cdFx0XHRyZXR1cm4gaXNIb3Jpem9udGFsID8gbWV0YS54QXhpc0lEID09PSBtZS5pZCA6IG1ldGEueUF4aXNJRCA9PT0gbWUuaWQ7XG5cdFx0fVxuXHRcdHZhciBkYXRhc2V0SW5kZXgsIG1ldGEsIHZhbHVlLCBkYXRhLCBpLCBpbGVuO1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIFJhbmdlXG5cdFx0bWUubWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXHRcdG1lLm1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblx0XHRtZS5taW5Ob3RaZXJvID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG5cdFx0dmFyIGhhc1N0YWNrcyA9IG9wdHMuc3RhY2tlZDtcblx0XHRpZiAoaGFzU3RhY2tzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGZvciAoZGF0YXNldEluZGV4ID0gMDsgZGF0YXNldEluZGV4IDwgZGF0YXNldHMubGVuZ3RoOyBkYXRhc2V0SW5kZXgrKykge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSAmJiBJRE1hdGNoZXMobWV0YSkgJiZcblx0XHRcdFx0XHRtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRoYXNTdGFja3MgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG9wdHMuc3RhY2tlZCB8fCBoYXNTdGFja3MpIHtcblx0XHRcdHZhciB2YWx1ZXNQZXJTdGFjayA9IHt9O1xuXG5cdFx0XHRmb3IgKGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IGRhdGFzZXRzLmxlbmd0aDsgZGF0YXNldEluZGV4KyspIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdHZhciBrZXkgPSBbXG5cdFx0XHRcdFx0bWV0YS50eXBlLFxuXHRcdFx0XHRcdC8vIHdlIGhhdmUgYSBzZXBhcmF0ZSBzdGFjayBmb3Igc3RhY2s9dW5kZWZpbmVkIGRhdGFzZXRzIHdoZW4gdGhlIG9wdHMuc3RhY2tlZCBpcyB1bmRlZmluZWRcblx0XHRcdFx0XHQoKG9wdHMuc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgPT09IHVuZGVmaW5lZCkgPyBkYXRhc2V0SW5kZXggOiAnJyksXG5cdFx0XHRcdFx0bWV0YS5zdGFja1xuXHRcdFx0XHRdLmpvaW4oJy4nKTtcblxuXHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdGlmICh2YWx1ZXNQZXJTdGFja1trZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHZhbHVlc1BlclN0YWNrW2tleV0gPSBbXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkYXRhID0gZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhO1xuXHRcdFx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlcyA9IHZhbHVlc1BlclN0YWNrW2tleV07XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IG1lLl9wYXJzZVZhbHVlKGRhdGFbaV0pO1xuXHRcdFx0XHRcdFx0Ly8gaW52YWxpZCwgaGlkZGVuIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGlnbm9yZWRcblx0XHRcdFx0XHRcdGlmIChpc05hTih2YWx1ZS5taW4pIHx8IGlzTmFOKHZhbHVlLm1heCkgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbiB8fCB2YWx1ZS5taW4gPCAwIHx8IHZhbHVlLm1heCA8IDApIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YWx1ZXNbaV0gPSB2YWx1ZXNbaV0gfHwgMDtcblx0XHRcdFx0XHRcdHZhbHVlc1tpXSArPSB2YWx1ZS5tYXg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGhlbHBlcnMkMS5lYWNoKHZhbHVlc1BlclN0YWNrLCBmdW5jdGlvbih2YWx1ZXNGb3JUeXBlKSB7XG5cdFx0XHRcdGlmICh2YWx1ZXNGb3JUeXBlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgbWluVmFsID0gaGVscGVycyQxLm1pbih2YWx1ZXNGb3JUeXBlKTtcblx0XHRcdFx0XHR2YXIgbWF4VmFsID0gaGVscGVycyQxLm1heCh2YWx1ZXNGb3JUeXBlKTtcblx0XHRcdFx0XHRtZS5taW4gPSBNYXRoLm1pbihtZS5taW4sIG1pblZhbCk7XG5cdFx0XHRcdFx0bWUubWF4ID0gTWF0aC5tYXgobWUubWF4LCBtYXhWYWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IGRhdGFzZXRzLmxlbmd0aDsgZGF0YXNldEluZGV4KyspIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkgJiYgSURNYXRjaGVzKG1ldGEpKSB7XG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdFx0XHRcdHZhbHVlID0gbWUuX3BhcnNlVmFsdWUoZGF0YVtpXSk7XG5cdFx0XHRcdFx0XHQvLyBpbnZhbGlkLCBoaWRkZW4gYW5kIG5lZ2F0aXZlIHZhbHVlcyBhcmUgaWdub3JlZFxuXHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlLm1pbikgfHwgaXNOYU4odmFsdWUubWF4KSB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuIHx8IHZhbHVlLm1pbiA8IDAgfHwgdmFsdWUubWF4IDwgMCkge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWUubWluID0gTWF0aC5taW4odmFsdWUubWluLCBtZS5taW4pO1xuXHRcdFx0XHRcdFx0bWUubWF4ID0gTWF0aC5tYXgodmFsdWUubWF4LCBtZS5tYXgpO1xuXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUubWluICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdG1lLm1pbk5vdFplcm8gPSBNYXRoLm1pbih2YWx1ZS5taW4sIG1lLm1pbk5vdFplcm8pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1lLm1pbiA9IGhlbHBlcnMkMS5pc0Zpbml0ZShtZS5taW4pID8gbWUubWluIDogbnVsbDtcblx0XHRtZS5tYXggPSBoZWxwZXJzJDEuaXNGaW5pdGUobWUubWF4KSA/IG1lLm1heCA6IG51bGw7XG5cdFx0bWUubWluTm90WmVybyA9IGhlbHBlcnMkMS5pc0Zpbml0ZShtZS5taW5Ob3RaZXJvKSA/IG1lLm1pbk5vdFplcm8gOiBudWxsO1xuXG5cdFx0Ly8gQ29tbW9uIGJhc2UgaW1wbGVtZW50YXRpb24gdG8gaGFuZGxlIHRpY2tzLm1pbiwgdGlja3MubWF4XG5cdFx0dGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG5cdH0sXG5cblx0aGFuZGxlVGlja1JhbmdlT3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXHRcdHZhciBERUZBVUxUX01JTiA9IDE7XG5cdFx0dmFyIERFRkFVTFRfTUFYID0gMTA7XG5cblx0XHRtZS5taW4gPSBub25OZWdhdGl2ZU9yRGVmYXVsdCh0aWNrT3B0cy5taW4sIG1lLm1pbik7XG5cdFx0bWUubWF4ID0gbm9uTmVnYXRpdmVPckRlZmF1bHQodGlja09wdHMubWF4LCBtZS5tYXgpO1xuXG5cdFx0aWYgKG1lLm1pbiA9PT0gbWUubWF4KSB7XG5cdFx0XHRpZiAobWUubWluICE9PSAwICYmIG1lLm1pbiAhPT0gbnVsbCkge1xuXHRcdFx0XHRtZS5taW4gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5taW4pKSAtIDEpO1xuXHRcdFx0XHRtZS5tYXggPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5tYXgpKSArIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUubWluID0gREVGQVVMVF9NSU47XG5cdFx0XHRcdG1lLm1heCA9IERFRkFVTFRfTUFYO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAobWUubWluID09PSBudWxsKSB7XG5cdFx0XHRtZS5taW4gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5tYXgpKSAtIDEpO1xuXHRcdH1cblx0XHRpZiAobWUubWF4ID09PSBudWxsKSB7XG5cdFx0XHRtZS5tYXggPSBtZS5taW4gIT09IDBcblx0XHRcdFx0PyBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5taW4pKSArIDEpXG5cdFx0XHRcdDogREVGQVVMVF9NQVg7XG5cdFx0fVxuXHRcdGlmIChtZS5taW5Ob3RaZXJvID09PSBudWxsKSB7XG5cdFx0XHRpZiAobWUubWluID4gMCkge1xuXHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gbWUubWluO1xuXHRcdFx0fSBlbHNlIGlmIChtZS5tYXggPCAxKSB7XG5cdFx0XHRcdG1lLm1pbk5vdFplcm8gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5tYXgpKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gREVGQVVMVF9NSU47XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHR2YXIgcmV2ZXJzZSA9ICFtZS5pc0hvcml6b250YWwoKTtcblxuXHRcdHZhciBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcblx0XHRcdG1pbjogbm9uTmVnYXRpdmVPckRlZmF1bHQodGlja09wdHMubWluKSxcblx0XHRcdG1heDogbm9uTmVnYXRpdmVPckRlZmF1bHQodGlja09wdHMubWF4KVxuXHRcdH07XG5cdFx0dmFyIHRpY2tzID0gbWUudGlja3MgPSBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIG1lKTtcblxuXHRcdC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5lZWQgdG8gdXBkYXRlIG91ciBtYXggYW5kIG1pbiBnaXZlbiB0aGUgdGljayB2YWx1ZXMgc2luY2Ugd2UgaGF2ZSBleHBhbmRlZCB0aGVcblx0XHQvLyByYW5nZSBvZiB0aGUgc2NhbGVcblx0XHRtZS5tYXggPSBoZWxwZXJzJDEubWF4KHRpY2tzKTtcblx0XHRtZS5taW4gPSBoZWxwZXJzJDEubWluKHRpY2tzKTtcblxuXHRcdGlmICh0aWNrT3B0cy5yZXZlcnNlKSB7XG5cdFx0XHRyZXZlcnNlID0gIXJldmVyc2U7XG5cdFx0XHRtZS5zdGFydCA9IG1lLm1heDtcblx0XHRcdG1lLmVuZCA9IG1lLm1pbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuc3RhcnQgPSBtZS5taW47XG5cdFx0XHRtZS5lbmQgPSBtZS5tYXg7XG5cdFx0fVxuXHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHR0aWNrcy5yZXZlcnNlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnRpY2tWYWx1ZXMgPSB0aGlzLnRpY2tzLnNsaWNlKCk7XG5cblx0XHRjb3JlX3NjYWxlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKHRoaXMpO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgY29ycmVjdCB0b29sdGlwIGxhYmVsXG5cdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0U2NhbGVMYWJlbCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMudGlja1ZhbHVlcztcblx0XHRpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdKTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHRpY2suXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBtaW5pbXVtIG5vdCB6ZXJvIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBmaXJzdCB0aWNrIHZhbHVlLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEZpcnN0VGlja1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBleHAgPSBNYXRoLmZsb29yKGxvZzEwKHZhbHVlKSk7XG5cdFx0dmFyIHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcih2YWx1ZSAvIE1hdGgucG93KDEwLCBleHApKTtcblxuXHRcdHJldHVybiBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApO1xuXHR9LFxuXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHN0YXJ0ID0gbWUubWluO1xuXHRcdHZhciBvZmZzZXQgPSAwO1xuXG5cdFx0Y29yZV9zY2FsZS5wcm90b3R5cGUuX2NvbmZpZ3VyZS5jYWxsKG1lKTtcblxuXHRcdGlmIChzdGFydCA9PT0gMCkge1xuXHRcdFx0c3RhcnQgPSBtZS5fZ2V0Rmlyc3RUaWNrVmFsdWUobWUubWluTm90WmVybyk7XG5cdFx0XHRvZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdCRiKG1lLm9wdGlvbnMudGlja3MuZm9udFNpemUsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSkgLyBtZS5fbGVuZ3RoO1xuXHRcdH1cblxuXHRcdG1lLl9zdGFydFZhbHVlID0gbG9nMTAoc3RhcnQpO1xuXHRcdG1lLl92YWx1ZU9mZnNldCA9IG9mZnNldDtcblx0XHRtZS5fdmFsdWVSYW5nZSA9IChsb2cxMChtZS5tYXgpIC0gbG9nMTAoc3RhcnQpKSAvICgxIC0gb2Zmc2V0KTtcblx0fSxcblxuXHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGRlY2ltYWwgPSAwO1xuXG5cdFx0dmFsdWUgPSArbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cblx0XHRpZiAodmFsdWUgPiBtZS5taW4gJiYgdmFsdWUgPiAwKSB7XG5cdFx0XHRkZWNpbWFsID0gKGxvZzEwKHZhbHVlKSAtIG1lLl9zdGFydFZhbHVlKSAvIG1lLl92YWx1ZVJhbmdlICsgbWUuX3ZhbHVlT2Zmc2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKGRlY2ltYWwpO1xuXHR9LFxuXG5cdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgZGVjaW1hbCA9IG1lLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCk7XG5cdFx0cmV0dXJuIGRlY2ltYWwgPT09IDAgJiYgbWUubWluID09PSAwXG5cdFx0XHQ/IDBcblx0XHRcdDogTWF0aC5wb3coMTAsIG1lLl9zdGFydFZhbHVlICsgKGRlY2ltYWwgLSBtZS5fdmFsdWVPZmZzZXQpICogbWUuX3ZhbHVlUmFuZ2UpO1xuXHR9XG59KTtcblxuLy8gSU5URVJOQUw6IHN0YXRpYyBkZWZhdWx0IG9wdGlvbnMsIHJlZ2lzdGVyZWQgaW4gc3JjL2luZGV4LmpzXG52YXIgX2RlZmF1bHRzJDIgPSBkZWZhdWx0Q29uZmlnJDI7XG5zY2FsZV9sb2dhcml0aG1pYy5fZGVmYXVsdHMgPSBfZGVmYXVsdHMkMjtcblxudmFyIHZhbHVlT3JEZWZhdWx0JGMgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgdmFsdWVBdEluZGV4T3JEZWZhdWx0JDEgPSBoZWxwZXJzJDEudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xudmFyIHJlc29sdmUkNCA9IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmU7XG5cbnZhciBkZWZhdWx0Q29uZmlnJDMgPSB7XG5cdGRpc3BsYXk6IHRydWUsXG5cblx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSBzY2FsaW5nIHRoZSBjaGFydCBmcm9tIHRoZSBjZW50cmVcblx0YW5pbWF0ZTogdHJ1ZSxcblx0cG9zaXRpb246ICdjaGFydEFyZWEnLFxuXG5cdGFuZ2xlTGluZXM6IHtcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdGNvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcblx0XHRsaW5lV2lkdGg6IDEsXG5cdFx0Ym9yZGVyRGFzaDogW10sXG5cdFx0Ym9yZGVyRGFzaE9mZnNldDogMC4wXG5cdH0sXG5cblx0Z3JpZExpbmVzOiB7XG5cdFx0Y2lyY3VsYXI6IGZhbHNlXG5cdH0sXG5cblx0Ly8gbGFiZWwgc2V0dGluZ3Ncblx0dGlja3M6IHtcblx0XHQvLyBCb29sZWFuIC0gU2hvdyBhIGJhY2tkcm9wIHRvIHRoZSBzY2FsZSBsYWJlbFxuXHRcdHNob3dMYWJlbEJhY2tkcm9wOiB0cnVlLFxuXG5cdFx0Ly8gU3RyaW5nIC0gVGhlIGNvbG91ciBvZiB0aGUgbGFiZWwgYmFja2Ryb3Bcblx0XHRiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwwLjc1KScsXG5cblx0XHQvLyBOdW1iZXIgLSBUaGUgYmFja2Ryb3AgcGFkZGluZyBhYm92ZSAmIGJlbG93IHRoZSBsYWJlbCBpbiBwaXhlbHNcblx0XHRiYWNrZHJvcFBhZGRpbmdZOiAyLFxuXG5cdFx0Ly8gTnVtYmVyIC0gVGhlIGJhY2tkcm9wIHBhZGRpbmcgdG8gdGhlIHNpZGUgb2YgdGhlIGxhYmVsIGluIHBpeGVsc1xuXHRcdGJhY2tkcm9wUGFkZGluZ1g6IDIsXG5cblx0XHRjYWxsYmFjazogY29yZV90aWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHR9LFxuXG5cdHBvaW50TGFiZWxzOiB7XG5cdFx0Ly8gQm9vbGVhbiAtIGlmIHRydWUsIHNob3cgcG9pbnQgbGFiZWxzXG5cdFx0ZGlzcGxheTogdHJ1ZSxcblxuXHRcdC8vIE51bWJlciAtIFBvaW50IGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRmb250U2l6ZTogMTAsXG5cblx0XHQvLyBGdW5jdGlvbiAtIFVzZWQgdG8gY29udmVydCBwb2ludCBsYWJlbHNcblx0XHRjYWxsYmFjazogZnVuY3Rpb24obGFiZWwpIHtcblx0XHRcdHJldHVybiBsYWJlbDtcblx0XHR9XG5cdH1cbn07XG5cbmZ1bmN0aW9uIGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSB7XG5cdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cblx0aWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG5cdFx0cmV0dXJuIHZhbHVlT3JEZWZhdWx0JGModGlja09wdHMuZm9udFNpemUsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSkgKyB0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmdZICogMjtcblx0fVxuXHRyZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGxpbmVIZWlnaHQsIGxhYmVsKSB7XG5cdGlmIChoZWxwZXJzJDEuaXNBcnJheShsYWJlbCkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dzogaGVscGVycyQxLmxvbmdlc3RUZXh0KGN0eCwgY3R4LmZvbnQsIGxhYmVsKSxcblx0XHRcdGg6IGxhYmVsLmxlbmd0aCAqIGxpbmVIZWlnaHRcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR3OiBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoLFxuXHRcdGg6IGxpbmVIZWlnaHRcblx0fTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb3MsIHNpemUsIG1pbiwgbWF4KSB7XG5cdGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhcnQ6IHBvcyAtIChzaXplIC8gMiksXG5cdFx0XHRlbmQ6IHBvcyArIChzaXplIC8gMilcblx0XHR9O1xuXHR9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXJ0OiBwb3MgLSBzaXplLFxuXHRcdFx0ZW5kOiBwb3Ncblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzdGFydDogcG9zLFxuXHRcdGVuZDogcG9zICsgc2l6ZVxuXHR9O1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBmaXQgYSByYWRpYWwgbGluZWFyIHNjYWxlIHdpdGggcG9pbnQgbGFiZWxzXG4gKi9cbmZ1bmN0aW9uIGZpdFdpdGhQb2ludExhYmVscyhzY2FsZSkge1xuXG5cdC8vIFJpZ2h0LCB0aGlzIGlzIHJlYWxseSBjb25mdXNpbmcgYW5kIHRoZXJlIGlzIGEgbG90IG9mIG1hdGhzIGdvaW5nIG9uIGhlcmVcblx0Ly8gVGhlIGdpc3Qgb2YgdGhlIHByb2JsZW0gaXMgaGVyZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbm5uaWNrLzY5NmNjOWM1NWY0YjBiZWI4ZmU5XG5cdC8vXG5cdC8vIFJlYWN0aW9uOiBodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8zNDYwMTM2My90b29tdWNoc2NpZW5jZS5naWZcblx0Ly9cblx0Ly8gU29sdXRpb246XG5cdC8vXG5cdC8vIFdlIGFzc3VtZSB0aGUgcmFkaXVzIG9mIHRoZSBwb2x5Z29uIGlzIGhhbGYgdGhlIHNpemUgb2YgdGhlIGNhbnZhcyBhdCBmaXJzdFxuXHQvLyBhdCBlYWNoIGluZGV4IHdlIGNoZWNrIGlmIHRoZSB0ZXh0IG92ZXJsYXBzLlxuXHQvL1xuXHQvLyBXaGVyZSBpdCBkb2VzLCB3ZSBzdG9yZSB0aGF0IGFuZ2xlIGFuZCB0aGF0IGluZGV4LlxuXHQvL1xuXHQvLyBBZnRlciBmaW5kaW5nIHRoZSBsYXJnZXN0IGluZGV4IGFuZCBhbmdsZSB3ZSBjYWxjdWxhdGUgaG93IG11Y2ggd2UgbmVlZCB0byByZW1vdmVcblx0Ly8gZnJvbSB0aGUgc2hhcGUgcmFkaXVzIHRvIG1vdmUgdGhlIHBvaW50IGlud2FyZHMgYnkgdGhhdCB4LlxuXHQvL1xuXHQvLyBXZSBhdmVyYWdlIHRoZSBsZWZ0IGFuZCByaWdodCBkaXN0YW5jZXMgdG8gZ2V0IHRoZSBtYXhpbXVtIHNoYXBlIHJhZGl1cyB0aGF0IGNhbiBmaXQgaW4gdGhlIGJveFxuXHQvLyBhbG9uZyB3aXRoIGxhYmVscy5cblx0Ly9cblx0Ly8gT25jZSB3ZSBoYXZlIHRoYXQsIHdlIGNhbiBmaW5kIHRoZSBjZW50cmUgcG9pbnQgZm9yIHRoZSBjaGFydCwgYnkgdGFraW5nIHRoZSB4IHRleHQgcHJvdHJ1c2lvblxuXHQvLyBvbiBlYWNoIHNpZGUsIHJlbW92aW5nIHRoYXQgZnJvbSB0aGUgc2l6ZSwgaGFsdmluZyBpdCBhbmQgYWRkaW5nIHRoZSBsZWZ0IHggcHJvdHJ1c2lvbiB3aWR0aC5cblx0Ly9cblx0Ly8gVGhpcyB3aWxsIG1lYW4gd2UgaGF2ZSBhIHNoYXBlIGZpdHRlZCB0byB0aGUgY2FudmFzLCBhcyBsYXJnZSBhcyBpdCBjYW4gYmUgd2l0aCB0aGUgbGFiZWxzXG5cdC8vIGFuZCBwb3NpdGlvbiBpdCBpbiB0aGUgbW9zdCBzcGFjZSBlZmZpY2llbnQgbWFubmVyXG5cdC8vXG5cdC8vIGh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzM0NjAxMzYzL3llYWhzY2llbmNlLmdpZlxuXG5cdHZhciBwbEZvbnQgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KHNjYWxlLm9wdGlvbnMucG9pbnRMYWJlbHMpO1xuXG5cdC8vIEdldCBtYXhpbXVtIHJhZGl1cyBvZiB0aGUgcG9seWdvbi4gRWl0aGVyIGhhbGYgdGhlIGhlaWdodCAobWludXMgdGhlIHRleHQgd2lkdGgpIG9yIGhhbGYgdGhlIHdpZHRoLlxuXHQvLyBVc2UgdGhpcyB0byBjYWxjdWxhdGUgdGhlIG9mZnNldCArIGNoYW5nZS4gLSBNYWtlIHN1cmUgTC9SIHByb3RydXNpb24gaXMgYXQgbGVhc3QgMCB0byBzdG9wIGlzc3VlcyB3aXRoIGNlbnRyZSBwb2ludHNcblx0dmFyIGZ1cnRoZXN0TGltaXRzID0ge1xuXHRcdGw6IDAsXG5cdFx0cjogc2NhbGUud2lkdGgsXG5cdFx0dDogMCxcblx0XHRiOiBzY2FsZS5oZWlnaHQgLSBzY2FsZS5wYWRkaW5nVG9wXG5cdH07XG5cdHZhciBmdXJ0aGVzdEFuZ2xlcyA9IHt9O1xuXHR2YXIgaSwgdGV4dFNpemUsIHBvaW50UG9zaXRpb247XG5cblx0c2NhbGUuY3R4LmZvbnQgPSBwbEZvbnQuc3RyaW5nO1xuXHRzY2FsZS5fcG9pbnRMYWJlbFNpemVzID0gW107XG5cblx0dmFyIHZhbHVlQ291bnQgPSBzY2FsZS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7XG5cdGZvciAoaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspIHtcblx0XHRwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBzY2FsZS5kcmF3aW5nQXJlYSArIDUpO1xuXHRcdHRleHRTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShzY2FsZS5jdHgsIHBsRm9udC5saW5lSGVpZ2h0LCBzY2FsZS5wb2ludExhYmVsc1tpXSk7XG5cdFx0c2NhbGUuX3BvaW50TGFiZWxTaXplc1tpXSA9IHRleHRTaXplO1xuXG5cdFx0Ly8gQWRkIHF1YXJ0ZXIgY2lyY2xlIHRvIG1ha2UgZGVncmVlIDAgbWVhbiB0b3Agb2YgY2lyY2xlXG5cdFx0dmFyIGFuZ2xlUmFkaWFucyA9IHNjYWxlLmdldEluZGV4QW5nbGUoaSk7XG5cdFx0dmFyIGFuZ2xlID0gaGVscGVycyQxLnRvRGVncmVlcyhhbmdsZVJhZGlhbnMpICUgMzYwO1xuXHRcdHZhciBoTGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLngsIHRleHRTaXplLncsIDAsIDE4MCk7XG5cdFx0dmFyIHZMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueSwgdGV4dFNpemUuaCwgOTAsIDI3MCk7XG5cblx0XHRpZiAoaExpbWl0cy5zdGFydCA8IGZ1cnRoZXN0TGltaXRzLmwpIHtcblx0XHRcdGZ1cnRoZXN0TGltaXRzLmwgPSBoTGltaXRzLnN0YXJ0O1xuXHRcdFx0ZnVydGhlc3RBbmdsZXMubCA9IGFuZ2xlUmFkaWFucztcblx0XHR9XG5cblx0XHRpZiAoaExpbWl0cy5lbmQgPiBmdXJ0aGVzdExpbWl0cy5yKSB7XG5cdFx0XHRmdXJ0aGVzdExpbWl0cy5yID0gaExpbWl0cy5lbmQ7XG5cdFx0XHRmdXJ0aGVzdEFuZ2xlcy5yID0gYW5nbGVSYWRpYW5zO1xuXHRcdH1cblxuXHRcdGlmICh2TGltaXRzLnN0YXJ0IDwgZnVydGhlc3RMaW1pdHMudCkge1xuXHRcdFx0ZnVydGhlc3RMaW1pdHMudCA9IHZMaW1pdHMuc3RhcnQ7XG5cdFx0XHRmdXJ0aGVzdEFuZ2xlcy50ID0gYW5nbGVSYWRpYW5zO1xuXHRcdH1cblxuXHRcdGlmICh2TGltaXRzLmVuZCA+IGZ1cnRoZXN0TGltaXRzLmIpIHtcblx0XHRcdGZ1cnRoZXN0TGltaXRzLmIgPSB2TGltaXRzLmVuZDtcblx0XHRcdGZ1cnRoZXN0QW5nbGVzLmIgPSBhbmdsZVJhZGlhbnM7XG5cdFx0fVxuXHR9XG5cblx0c2NhbGUuc2V0UmVkdWN0aW9ucyhzY2FsZS5kcmF3aW5nQXJlYSwgZnVydGhlc3RMaW1pdHMsIGZ1cnRoZXN0QW5nbGVzKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpIHtcblx0aWYgKGFuZ2xlID09PSAwIHx8IGFuZ2xlID09PSAxODApIHtcblx0XHRyZXR1cm4gJ2NlbnRlcic7XG5cdH0gZWxzZSBpZiAoYW5nbGUgPCAxODApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9XG5cblx0cmV0dXJuICdyaWdodCc7XG59XG5cbmZ1bmN0aW9uIGZpbGxUZXh0KGN0eCwgdGV4dCwgcG9zaXRpb24sIGxpbmVIZWlnaHQpIHtcblx0dmFyIHkgPSBwb3NpdGlvbi55ICsgbGluZUhlaWdodCAvIDI7XG5cdHZhciBpLCBpbGVuO1xuXG5cdGlmIChoZWxwZXJzJDEuaXNBcnJheSh0ZXh0KSkge1xuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0ZXh0Lmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0Y3R4LmZpbGxUZXh0KHRleHRbaV0sIHBvc2l0aW9uLngsIHkpO1xuXHRcdFx0eSArPSBsaW5lSGVpZ2h0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRjdHguZmlsbFRleHQodGV4dCwgcG9zaXRpb24ueCwgeSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gYWRqdXN0UG9pbnRQb3NpdGlvbkZvckxhYmVsSGVpZ2h0KGFuZ2xlLCB0ZXh0U2l6ZSwgcG9zaXRpb24pIHtcblx0aWYgKGFuZ2xlID09PSA5MCB8fCBhbmdsZSA9PT0gMjcwKSB7XG5cdFx0cG9zaXRpb24ueSAtPSAodGV4dFNpemUuaCAvIDIpO1xuXHR9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcblx0XHRwb3NpdGlvbi55IC09IHRleHRTaXplLmg7XG5cdH1cbn1cblxuZnVuY3Rpb24gZHJhd1BvaW50TGFiZWxzKHNjYWxlKSB7XG5cdHZhciBjdHggPSBzY2FsZS5jdHg7XG5cdHZhciBvcHRzID0gc2NhbGUub3B0aW9ucztcblx0dmFyIHBvaW50TGFiZWxPcHRzID0gb3B0cy5wb2ludExhYmVscztcblx0dmFyIHRpY2tCYWNrZHJvcEhlaWdodCA9IGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKTtcblx0dmFyIG91dGVyRGlzdGFuY2UgPSBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXgpO1xuXHR2YXIgcGxGb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChwb2ludExhYmVsT3B0cyk7XG5cblx0Y3R4LnNhdmUoKTtcblxuXHRjdHguZm9udCA9IHBsRm9udC5zdHJpbmc7XG5cdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuXHRmb3IgKHZhciBpID0gc2NhbGUuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHQvLyBFeHRyYSBwaXhlbHMgb3V0IGZvciBzb21lIGxhYmVsIHNwYWNpbmdcblx0XHR2YXIgZXh0cmEgPSAoaSA9PT0gMCA/IHRpY2tCYWNrZHJvcEhlaWdodCAvIDIgOiAwKTtcblx0XHR2YXIgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlICsgZXh0cmEgKyA1KTtcblxuXHRcdC8vIEtlZXAgdGhpcyBpbiBsb29wIHNpbmNlIHdlIG1heSBzdXBwb3J0IGFycmF5IHByb3BlcnRpZXMgaGVyZVxuXHRcdHZhciBwb2ludExhYmVsRm9udENvbG9yID0gdmFsdWVBdEluZGV4T3JEZWZhdWx0JDEocG9pbnRMYWJlbE9wdHMuZm9udENvbG9yLCBpLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHRjdHguZmlsbFN0eWxlID0gcG9pbnRMYWJlbEZvbnRDb2xvcjtcblxuXHRcdHZhciBhbmdsZVJhZGlhbnMgPSBzY2FsZS5nZXRJbmRleEFuZ2xlKGkpO1xuXHRcdHZhciBhbmdsZSA9IGhlbHBlcnMkMS50b0RlZ3JlZXMoYW5nbGVSYWRpYW5zKTtcblx0XHRjdHgudGV4dEFsaWduID0gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpO1xuXHRcdGFkanVzdFBvaW50UG9zaXRpb25Gb3JMYWJlbEhlaWdodChhbmdsZSwgc2NhbGUuX3BvaW50TGFiZWxTaXplc1tpXSwgcG9pbnRMYWJlbFBvc2l0aW9uKTtcblx0XHRmaWxsVGV4dChjdHgsIHNjYWxlLnBvaW50TGFiZWxzW2ldLCBwb2ludExhYmVsUG9zaXRpb24sIHBsRm9udC5saW5lSGVpZ2h0KTtcblx0fVxuXHRjdHgucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiBkcmF3UmFkaXVzTGluZShzY2FsZSwgZ3JpZExpbmVPcHRzLCByYWRpdXMsIGluZGV4KSB7XG5cdHZhciBjdHggPSBzY2FsZS5jdHg7XG5cdHZhciBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcblx0dmFyIHZhbHVlQ291bnQgPSBzY2FsZS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7XG5cdHZhciBsaW5lQ29sb3IgPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQkMShncmlkTGluZU9wdHMuY29sb3IsIGluZGV4IC0gMSk7XG5cdHZhciBsaW5lV2lkdGggPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQkMShncmlkTGluZU9wdHMubGluZVdpZHRoLCBpbmRleCAtIDEpO1xuXHR2YXIgcG9pbnRQb3NpdGlvbjtcblxuXHRpZiAoKCFjaXJjdWxhciAmJiAhdmFsdWVDb3VudCkgfHwgIWxpbmVDb2xvciB8fCAhbGluZVdpZHRoKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y3R4LnNhdmUoKTtcblx0Y3R4LnN0cm9rZVN0eWxlID0gbGluZUNvbG9yO1xuXHRjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuXHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0Y3R4LnNldExpbmVEYXNoKGdyaWRMaW5lT3B0cy5ib3JkZXJEYXNoIHx8IFtdKTtcblx0XHRjdHgubGluZURhc2hPZmZzZXQgPSBncmlkTGluZU9wdHMuYm9yZGVyRGFzaE9mZnNldCB8fCAwLjA7XG5cdH1cblxuXHRjdHguYmVnaW5QYXRoKCk7XG5cdGlmIChjaXJjdWxhcikge1xuXHRcdC8vIERyYXcgY2lyY3VsYXIgYXJjcyBiZXR3ZWVuIHRoZSBwb2ludHNcblx0XHRjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIERyYXcgc3RyYWlnaHQgbGluZXMgY29ubmVjdGluZyBlYWNoIGluZGV4XG5cdFx0cG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcblx0XHRjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG5cdFx0XHRwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCByYWRpdXMpO1xuXHRcdFx0Y3R4LmxpbmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG5cdFx0fVxuXHR9XG5cdGN0eC5jbG9zZVBhdGgoKTtcblx0Y3R4LnN0cm9rZSgpO1xuXHRjdHgucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiBudW1iZXJPclplcm8ocGFyYW0pIHtcblx0cmV0dXJuIGhlbHBlcnMkMS5pc051bWJlcihwYXJhbSkgPyBwYXJhbSA6IDA7XG59XG5cbnZhciBzY2FsZV9yYWRpYWxMaW5lYXIgPSBzY2FsZV9saW5lYXJiYXNlLmV4dGVuZCh7XG5cdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXHRcdG1lLnBhZGRpbmdUb3AgPSBnZXRUaWNrQmFja2Ryb3BIZWlnaHQobWUub3B0aW9ucykgLyAyO1xuXHRcdG1lLnhDZW50ZXIgPSBNYXRoLmZsb29yKG1lLndpZHRoIC8gMik7XG5cdFx0bWUueUNlbnRlciA9IE1hdGguZmxvb3IoKG1lLmhlaWdodCAtIG1lLnBhZGRpbmdUb3ApIC8gMik7XG5cdFx0bWUuZHJhd2luZ0FyZWEgPSBNYXRoLm1pbihtZS5oZWlnaHQgLSBtZS5wYWRkaW5nVG9wLCBtZS53aWR0aCkgLyAyO1xuXHR9LFxuXG5cdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHR2YXIgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG5cdFx0aGVscGVycyQxLmVhY2goY2hhcnQuZGF0YS5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpKSB7XG5cdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblxuXHRcdFx0XHRoZWxwZXJzJDEuZWFjaChkYXRhc2V0LmRhdGEsIGZ1bmN0aW9uKHJhd1ZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlKTtcblx0XHRcdFx0XHRpZiAoaXNOYU4odmFsdWUpIHx8IG1ldGEuZGF0YVtpbmRleF0uaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWluID0gTWF0aC5taW4odmFsdWUsIG1pbik7XG5cdFx0XHRcdFx0bWF4ID0gTWF0aC5tYXgodmFsdWUsIG1heCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0bWUubWluID0gKG1pbiA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID8gMCA6IG1pbik7XG5cdFx0bWUubWF4ID0gKG1heCA9PT0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID8gMCA6IG1heCk7XG5cblx0XHQvLyBDb21tb24gYmFzZSBpbXBsZW1lbnRhdGlvbiB0byBoYW5kbGUgdGlja3MubWluLCB0aWNrcy5tYXgsIHRpY2tzLmJlZ2luQXRaZXJvXG5cdFx0bWUuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuXHR9LFxuXG5cdC8vIFJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRpY2tzIGJhc2VkIG9uIHRoZSBzY2FsZSBkaW1lbnNpb25cblx0X2NvbXB1dGVUaWNrTGltaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBNYXRoLmNlaWwodGhpcy5kcmF3aW5nQXJlYSAvIGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpKTtcblx0fSxcblxuXHRjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdHNjYWxlX2xpbmVhcmJhc2UucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwobWUpO1xuXG5cdFx0Ly8gUG9pbnQgbGFiZWxzXG5cdFx0bWUucG9pbnRMYWJlbHMgPSBtZS5jaGFydC5kYXRhLmxhYmVscy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFiZWwgPSBoZWxwZXJzJDEuY2FsbGJhY2sobWUub3B0aW9ucy5wb2ludExhYmVscy5jYWxsYmFjaywgYXJndW1lbnRzLCBtZSk7XG5cdFx0XHRyZXR1cm4gbGFiZWwgfHwgbGFiZWwgPT09IDAgPyBsYWJlbCA6ICcnO1xuXHRcdH0pO1xuXHR9LFxuXG5cdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRyZXR1cm4gK3RoaXMuZ2V0UmlnaHRWYWx1ZSh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdH0sXG5cblx0Zml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblxuXHRcdGlmIChvcHRzLmRpc3BsYXkgJiYgb3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG5cdFx0XHRmaXRXaXRoUG9pbnRMYWJlbHMobWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5zZXRDZW50ZXJQb2ludCgwLCAwLCAwLCAwKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldCByYWRpdXMgcmVkdWN0aW9ucyBhbmQgZGV0ZXJtaW5lIG5ldyByYWRpdXMgYW5kIGNlbnRlciBwb2ludFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0c2V0UmVkdWN0aW9uczogZnVuY3Rpb24obGFyZ2VzdFBvc3NpYmxlUmFkaXVzLCBmdXJ0aGVzdExpbWl0cywgZnVydGhlc3RBbmdsZXMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciByYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gZnVydGhlc3RMaW1pdHMubCAvIE1hdGguc2luKGZ1cnRoZXN0QW5nbGVzLmwpO1xuXHRcdHZhciByYWRpdXNSZWR1Y3Rpb25SaWdodCA9IE1hdGgubWF4KGZ1cnRoZXN0TGltaXRzLnIgLSBtZS53aWR0aCwgMCkgLyBNYXRoLnNpbihmdXJ0aGVzdEFuZ2xlcy5yKTtcblx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uVG9wID0gLWZ1cnRoZXN0TGltaXRzLnQgLyBNYXRoLmNvcyhmdXJ0aGVzdEFuZ2xlcy50KTtcblx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uQm90dG9tID0gLU1hdGgubWF4KGZ1cnRoZXN0TGltaXRzLmIgLSAobWUuaGVpZ2h0IC0gbWUucGFkZGluZ1RvcCksIDApIC8gTWF0aC5jb3MoZnVydGhlc3RBbmdsZXMuYik7XG5cblx0XHRyYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvbkxlZnQpO1xuXHRcdHJhZGl1c1JlZHVjdGlvblJpZ2h0ID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvblJpZ2h0KTtcblx0XHRyYWRpdXNSZWR1Y3Rpb25Ub3AgPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uVG9wKTtcblx0XHRyYWRpdXNSZWR1Y3Rpb25Cb3R0b20gPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uQm90dG9tKTtcblxuXHRcdG1lLmRyYXdpbmdBcmVhID0gTWF0aC5taW4oXG5cdFx0XHRNYXRoLmZsb29yKGxhcmdlc3RQb3NzaWJsZVJhZGl1cyAtIChyYWRpdXNSZWR1Y3Rpb25MZWZ0ICsgcmFkaXVzUmVkdWN0aW9uUmlnaHQpIC8gMiksXG5cdFx0XHRNYXRoLmZsb29yKGxhcmdlc3RQb3NzaWJsZVJhZGl1cyAtIChyYWRpdXNSZWR1Y3Rpb25Ub3AgKyByYWRpdXNSZWR1Y3Rpb25Cb3R0b20pIC8gMikpO1xuXHRcdG1lLnNldENlbnRlclBvaW50KHJhZGl1c1JlZHVjdGlvbkxlZnQsIHJhZGl1c1JlZHVjdGlvblJpZ2h0LCByYWRpdXNSZWR1Y3Rpb25Ub3AsIHJhZGl1c1JlZHVjdGlvbkJvdHRvbSk7XG5cdH0sXG5cblx0c2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uKGxlZnRNb3ZlbWVudCwgcmlnaHRNb3ZlbWVudCwgdG9wTW92ZW1lbnQsIGJvdHRvbU1vdmVtZW50KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWF4UmlnaHQgPSBtZS53aWR0aCAtIHJpZ2h0TW92ZW1lbnQgLSBtZS5kcmF3aW5nQXJlYTtcblx0XHR2YXIgbWF4TGVmdCA9IGxlZnRNb3ZlbWVudCArIG1lLmRyYXdpbmdBcmVhO1xuXHRcdHZhciBtYXhUb3AgPSB0b3BNb3ZlbWVudCArIG1lLmRyYXdpbmdBcmVhO1xuXHRcdHZhciBtYXhCb3R0b20gPSAobWUuaGVpZ2h0IC0gbWUucGFkZGluZ1RvcCkgLSBib3R0b21Nb3ZlbWVudCAtIG1lLmRyYXdpbmdBcmVhO1xuXG5cdFx0bWUueENlbnRlciA9IE1hdGguZmxvb3IoKChtYXhMZWZ0ICsgbWF4UmlnaHQpIC8gMikgKyBtZS5sZWZ0KTtcblx0XHRtZS55Q2VudGVyID0gTWF0aC5mbG9vcigoKG1heFRvcCArIG1heEJvdHRvbSkgLyAyKSArIG1lLnRvcCArIG1lLnBhZGRpbmdUb3ApO1xuXHR9LFxuXG5cdGdldEluZGV4QW5nbGU6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIGNoYXJ0ID0gdGhpcy5jaGFydDtcblx0XHR2YXIgYW5nbGVNdWx0aXBsaWVyID0gMzYwIC8gY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoO1xuXHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucyB8fCB7fTtcblx0XHR2YXIgc3RhcnRBbmdsZSA9IG9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuXG5cdFx0Ly8gU3RhcnQgZnJvbSB0aGUgdG9wIGluc3RlYWQgb2YgcmlnaHQsIHNvIHJlbW92ZSBhIHF1YXJ0ZXIgb2YgdGhlIGNpcmNsZVxuXHRcdHZhciBhbmdsZSA9IChpbmRleCAqIGFuZ2xlTXVsdGlwbGllciArIHN0YXJ0QW5nbGUpICUgMzYwO1xuXG5cdFx0cmV0dXJuIChhbmdsZSA8IDAgPyBhbmdsZSArIDM2MCA6IGFuZ2xlKSAqIE1hdGguUEkgKiAyIC8gMzYwO1xuXHR9LFxuXG5cdGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoaGVscGVycyQxLmlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gTmFOO1xuXHRcdH1cblxuXHRcdC8vIFRha2UgaW50byBhY2NvdW50IGhhbGYgZm9udCBzaXplICsgdGhlIHlQYWRkaW5nIG9mIHRoZSB0b3AgdmFsdWVcblx0XHR2YXIgc2NhbGluZ0ZhY3RvciA9IG1lLmRyYXdpbmdBcmVhIC8gKG1lLm1heCAtIG1lLm1pbik7XG5cdFx0aWYgKG1lLm9wdGlvbnMudGlja3MucmV2ZXJzZSkge1xuXHRcdFx0cmV0dXJuIChtZS5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuXHRcdH1cblx0XHRyZXR1cm4gKHZhbHVlIC0gbWUubWluKSAqIHNjYWxpbmdGYWN0b3I7XG5cdH0sXG5cblx0Z2V0UG9pbnRQb3NpdGlvbjogZnVuY3Rpb24oaW5kZXgsIGRpc3RhbmNlRnJvbUNlbnRlcikge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRoaXNBbmdsZSA9IG1lLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gKE1hdGguUEkgLyAyKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogTWF0aC5jb3ModGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIG1lLnhDZW50ZXIsXG5cdFx0XHR5OiBNYXRoLnNpbih0aGlzQW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgbWUueUNlbnRlclxuXHRcdH07XG5cdH0sXG5cblx0Z2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlOiBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG5cdH0sXG5cblx0Z2V0QmFzZVBvc2l0aW9uOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1pbiA9IG1lLm1pbjtcblx0XHR2YXIgbWF4ID0gbWUubWF4O1xuXG5cdFx0cmV0dXJuIG1lLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLFxuXHRcdFx0bWUuYmVnaW5BdFplcm8gPyAwIDpcblx0XHRcdG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6XG5cdFx0XHRtaW4gPiAwICYmIG1heCA+IDAgPyBtaW4gOlxuXHRcdFx0MCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0dyaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGdyaWRMaW5lT3B0cyA9IG9wdHMuZ3JpZExpbmVzO1xuXHRcdHZhciBhbmdsZUxpbmVPcHRzID0gb3B0cy5hbmdsZUxpbmVzO1xuXHRcdHZhciBsaW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdCRjKGFuZ2xlTGluZU9wdHMubGluZVdpZHRoLCBncmlkTGluZU9wdHMubGluZVdpZHRoKTtcblx0XHR2YXIgbGluZUNvbG9yID0gdmFsdWVPckRlZmF1bHQkYyhhbmdsZUxpbmVPcHRzLmNvbG9yLCBncmlkTGluZU9wdHMuY29sb3IpO1xuXHRcdHZhciBpLCBvZmZzZXQsIHBvc2l0aW9uO1xuXG5cdFx0aWYgKG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuXHRcdFx0ZHJhd1BvaW50TGFiZWxzKG1lKTtcblx0XHR9XG5cblx0XHRpZiAoZ3JpZExpbmVPcHRzLmRpc3BsYXkpIHtcblx0XHRcdGhlbHBlcnMkMS5lYWNoKG1lLnRpY2tzLCBmdW5jdGlvbihsYWJlbCwgaW5kZXgpIHtcblx0XHRcdFx0aWYgKGluZGV4ICE9PSAwKSB7XG5cdFx0XHRcdFx0b2Zmc2V0ID0gbWUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUobWUudGlja3NBc051bWJlcnNbaW5kZXhdKTtcblx0XHRcdFx0XHRkcmF3UmFkaXVzTGluZShtZSwgZ3JpZExpbmVPcHRzLCBvZmZzZXQsIGluZGV4KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKGFuZ2xlTGluZU9wdHMuZGlzcGxheSAmJiBsaW5lV2lkdGggJiYgbGluZUNvbG9yKSB7XG5cdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGxpbmVDb2xvcjtcblx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKHJlc29sdmUkNChbYW5nbGVMaW5lT3B0cy5ib3JkZXJEYXNoLCBncmlkTGluZU9wdHMuYm9yZGVyRGFzaCwgW11dKSk7XG5cdFx0XHRcdGN0eC5saW5lRGFzaE9mZnNldCA9IHJlc29sdmUkNChbYW5nbGVMaW5lT3B0cy5ib3JkZXJEYXNoT2Zmc2V0LCBncmlkTGluZU9wdHMuYm9yZGVyRGFzaE9mZnNldCwgMC4wXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoaSA9IG1lLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdG9mZnNldCA9IG1lLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG9wdHMudGlja3MucmV2ZXJzZSA/IG1lLm1pbiA6IG1lLm1heCk7XG5cdFx0XHRcdHBvc2l0aW9uID0gbWUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGN0eC5tb3ZlVG8obWUueENlbnRlciwgbWUueUNlbnRlcik7XG5cdFx0XHRcdGN0eC5saW5lVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblxuXHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY3R4ID0gbWUuY3R4O1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXG5cdFx0aWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIHN0YXJ0QW5nbGUgPSBtZS5nZXRJbmRleEFuZ2xlKDApO1xuXHRcdHZhciB0aWNrRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQodGlja09wdHMpO1xuXHRcdHZhciB0aWNrRm9udENvbG9yID0gdmFsdWVPckRlZmF1bHQkYyh0aWNrT3B0cy5mb250Q29sb3IsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdHZhciBvZmZzZXQsIHdpZHRoO1xuXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguZm9udCA9IHRpY2tGb250LnN0cmluZztcblx0XHRjdHgudHJhbnNsYXRlKG1lLnhDZW50ZXIsIG1lLnlDZW50ZXIpO1xuXHRcdGN0eC5yb3RhdGUoc3RhcnRBbmdsZSk7XG5cdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuXHRcdGhlbHBlcnMkMS5lYWNoKG1lLnRpY2tzLCBmdW5jdGlvbihsYWJlbCwgaW5kZXgpIHtcblx0XHRcdGlmIChpbmRleCA9PT0gMCAmJiAhdGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdG9mZnNldCA9IG1lLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG1lLnRpY2tzQXNOdW1iZXJzW2luZGV4XSk7XG5cblx0XHRcdGlmICh0aWNrT3B0cy5zaG93TGFiZWxCYWNrZHJvcCkge1xuXHRcdFx0XHR3aWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aWNrT3B0cy5iYWNrZHJvcENvbG9yO1xuXG5cdFx0XHRcdGN0eC5maWxsUmVjdChcblx0XHRcdFx0XHQtd2lkdGggLyAyIC0gdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCxcblx0XHRcdFx0XHQtb2Zmc2V0IC0gdGlja0ZvbnQuc2l6ZSAvIDIgLSB0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmdZLFxuXHRcdFx0XHRcdHdpZHRoICsgdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCAqIDIsXG5cdFx0XHRcdFx0dGlja0ZvbnQuc2l6ZSArIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1kgKiAyXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aWNrRm9udENvbG9yO1xuXHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsLCAwLCAtb2Zmc2V0KTtcblx0XHR9KTtcblxuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd1RpdGxlOiBoZWxwZXJzJDEubm9vcFxufSk7XG5cbi8vIElOVEVSTkFMOiBzdGF0aWMgZGVmYXVsdCBvcHRpb25zLCByZWdpc3RlcmVkIGluIHNyYy9pbmRleC5qc1xudmFyIF9kZWZhdWx0cyQzID0gZGVmYXVsdENvbmZpZyQzO1xuc2NhbGVfcmFkaWFsTGluZWFyLl9kZWZhdWx0cyA9IF9kZWZhdWx0cyQzO1xuXG52YXIgZGVwcmVjYXRlZCQxID0gaGVscGVycyQxLl9kZXByZWNhdGVkO1xudmFyIHJlc29sdmUkNSA9IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmU7XG52YXIgdmFsdWVPckRlZmF1bHQkZCA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxuLy8gSW50ZWdlciBjb25zdGFudHMgYXJlIGZyb20gdGhlIEVTNiBzcGVjLlxudmFyIE1JTl9JTlRFR0VSID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIgfHwgLTkwMDcxOTkyNTQ3NDA5OTE7XG52YXIgTUFYX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCA5MDA3MTk5MjU0NzQwOTkxO1xuXG52YXIgSU5URVJWQUxTID0ge1xuXHRtaWxsaXNlY29uZDoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAxLFxuXHRcdHN0ZXBzOiAxMDAwXG5cdH0sXG5cdHNlY29uZDoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAxMDAwLFxuXHRcdHN0ZXBzOiA2MFxuXHR9LFxuXHRtaW51dGU6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogNjAwMDAsXG5cdFx0c3RlcHM6IDYwXG5cdH0sXG5cdGhvdXI6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogMzYwMDAwMCxcblx0XHRzdGVwczogMjRcblx0fSxcblx0ZGF5OiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDg2NDAwMDAwLFxuXHRcdHN0ZXBzOiAzMFxuXHR9LFxuXHR3ZWVrOiB7XG5cdFx0Y29tbW9uOiBmYWxzZSxcblx0XHRzaXplOiA2MDQ4MDAwMDAsXG5cdFx0c3RlcHM6IDRcblx0fSxcblx0bW9udGg6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogMi42MjhlOSxcblx0XHRzdGVwczogMTJcblx0fSxcblx0cXVhcnRlcjoge1xuXHRcdGNvbW1vbjogZmFsc2UsXG5cdFx0c2l6ZTogNy44ODRlOSxcblx0XHRzdGVwczogNFxuXHR9LFxuXHR5ZWFyOiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDMuMTU0ZTEwXG5cdH1cbn07XG5cbnZhciBVTklUUyA9IE9iamVjdC5rZXlzKElOVEVSVkFMUyk7XG5cbmZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG5cdHJldHVybiBhIC0gYjtcbn1cblxuZnVuY3Rpb24gYXJyYXlVbmlxdWUoaXRlbXMpIHtcblx0dmFyIGhhc2ggPSB7fTtcblx0dmFyIG91dCA9IFtdO1xuXHR2YXIgaSwgaWxlbiwgaXRlbTtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0aXRlbSA9IGl0ZW1zW2ldO1xuXHRcdGlmICghaGFzaFtpdGVtXSkge1xuXHRcdFx0aGFzaFtpdGVtXSA9IHRydWU7XG5cdFx0XHRvdXQucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBnZXRNaW4ob3B0aW9ucykge1xuXHRyZXR1cm4gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGltZS5taW4sIG9wdGlvbnMudGlja3MubWluKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWF4KG9wdGlvbnMpIHtcblx0cmV0dXJuIGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpbWUubWF4LCBvcHRpb25zLnRpY2tzLm1heCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiB7dGltZSwgcG9zfSBvYmplY3RzIHVzZWQgdG8gaW50ZXJwb2xhdGUgYSBzcGVjaWZpYyBgdGltZWAgb3IgcG9zaXRpb25cbiAqIChgcG9zYCkgb24gdGhlIHNjYWxlLCBieSBzZWFyY2hpbmcgZW50cmllcyBiZWZvcmUgYW5kIGFmdGVyIHRoZSByZXF1ZXN0ZWQgdmFsdWUuIGBwb3NgIGlzXG4gKiBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxOiAwIGJlaW5nIHRoZSBzdGFydCBvZiB0aGUgc2NhbGUgKGxlZnQgb3IgdG9wKSBhbmQgMSB0aGUgb3RoZXJcbiAqIGV4dHJlbWl0eSAobGVmdCArIHdpZHRoIG9yIHRvcCArIGhlaWdodCkuIE5vdGUgdGhhdCBpdCB3b3VsZCBiZSBtb3JlIG9wdGltaXplZCB0byBkaXJlY3RseVxuICogc3RvcmUgcHJlLWNvbXB1dGVkIHBpeGVscywgYnV0IHRoZSBzY2FsZSBkaW1lbnNpb25zIGFyZSBub3QgZ3VhcmFudGVlZCBhdCB0aGUgdGltZSB3ZSBuZWVkXG4gKiB0byBjcmVhdGUgdGhlIGxvb2t1cCB0YWJsZS4gVGhlIHRhYmxlIEFMV0FZUyBjb250YWlucyBhdCBsZWFzdCB0d28gaXRlbXM6IG1pbiBhbmQgbWF4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyW119IHRpbWVzdGFtcHMgLSB0aW1lc3RhbXBzIHNvcnRlZCBmcm9tIGxvd2VzdCB0byBoaWdoZXN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3RyaWJ1dGlvbiAtIElmICdsaW5lYXInLCB0aW1lc3RhbXBzIHdpbGwgYmUgc3ByZWFkIGxpbmVhcmx5IGFsb25nIHRoZSBtaW5cbiAqIGFuZCBtYXggcmFuZ2UsIHNvIGJhc2ljYWxseSwgdGhlIHRhYmxlIHdpbGwgY29udGFpbnMgb25seSB0d28gaXRlbXM6IHttaW4sIDB9IGFuZCB7bWF4LCAxfS5cbiAqIElmICdzZXJpZXMnLCB0aW1lc3RhbXBzIHdpbGwgYmUgcG9zaXRpb25lZCBhdCB0aGUgc2FtZSBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIuIEluIHRoaXNcbiAqIGNhc2UsIG9ubHkgdGltZXN0YW1wcyB0aGF0IGJyZWFrIHRoZSB0aW1lIGxpbmVhcml0eSBhcmUgcmVnaXN0ZXJlZCwgbWVhbmluZyB0aGF0IGluIHRoZVxuICogYmVzdCBjYXNlLCBhbGwgdGltZXN0YW1wcyBhcmUgbGluZWFyLCB0aGUgdGFibGUgY29udGFpbnMgb25seSBtaW4gYW5kIG1heC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzLCBtaW4sIG1heCwgZGlzdHJpYnV0aW9uKSB7XG5cdGlmIChkaXN0cmlidXRpb24gPT09ICdsaW5lYXInIHx8ICF0aW1lc3RhbXBzLmxlbmd0aCkge1xuXHRcdHJldHVybiBbXG5cdFx0XHR7dGltZTogbWluLCBwb3M6IDB9LFxuXHRcdFx0e3RpbWU6IG1heCwgcG9zOiAxfVxuXHRcdF07XG5cdH1cblxuXHR2YXIgdGFibGUgPSBbXTtcblx0dmFyIGl0ZW1zID0gW21pbl07XG5cdHZhciBpLCBpbGVuLCBwcmV2LCBjdXJyLCBuZXh0O1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSB0aW1lc3RhbXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuXHRcdGlmIChjdXJyID4gbWluICYmIGN1cnIgPCBtYXgpIHtcblx0XHRcdGl0ZW1zLnB1c2goY3Vycik7XG5cdFx0fVxuXHR9XG5cblx0aXRlbXMucHVzaChtYXgpO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRuZXh0ID0gaXRlbXNbaSArIDFdO1xuXHRcdHByZXYgPSBpdGVtc1tpIC0gMV07XG5cdFx0Y3VyciA9IGl0ZW1zW2ldO1xuXG5cdFx0Ly8gb25seSBhZGQgcG9pbnRzIHRoYXQgYnJlYWtzIHRoZSBzY2FsZSBsaW5lYXJpdHlcblx0XHRpZiAocHJldiA9PT0gdW5kZWZpbmVkIHx8IG5leHQgPT09IHVuZGVmaW5lZCB8fCBNYXRoLnJvdW5kKChuZXh0ICsgcHJldikgLyAyKSAhPT0gY3Vycikge1xuXHRcdFx0dGFibGUucHVzaCh7dGltZTogY3VyciwgcG9zOiBpIC8gKGlsZW4gLSAxKX0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0YWJsZTtcbn1cblxuLy8gQHNlZSBhZGFwdGVkIGZyb20gaHR0cHM6Ly93d3cuYW51amdha2hhci5jb20vMjAxNC8wMy8wMS9iaW5hcnktc2VhcmNoLWluLWphdmFzY3JpcHQvXG5mdW5jdGlvbiBsb29rdXAodGFibGUsIGtleSwgdmFsdWUpIHtcblx0dmFyIGxvID0gMDtcblx0dmFyIGhpID0gdGFibGUubGVuZ3RoIC0gMTtcblx0dmFyIG1pZCwgaTAsIGkxO1xuXG5cdHdoaWxlIChsbyA+PSAwICYmIGxvIDw9IGhpKSB7XG5cdFx0bWlkID0gKGxvICsgaGkpID4+IDE7XG5cdFx0aTAgPSB0YWJsZVttaWQgLSAxXSB8fCBudWxsO1xuXHRcdGkxID0gdGFibGVbbWlkXTtcblxuXHRcdGlmICghaTApIHtcblx0XHRcdC8vIGdpdmVuIHZhbHVlIGlzIG91dHNpZGUgdGFibGUgKGJlZm9yZSBmaXJzdCBpdGVtKVxuXHRcdFx0cmV0dXJuIHtsbzogbnVsbCwgaGk6IGkxfTtcblx0XHR9IGVsc2UgaWYgKGkxW2tleV0gPCB2YWx1ZSkge1xuXHRcdFx0bG8gPSBtaWQgKyAxO1xuXHRcdH0gZWxzZSBpZiAoaTBba2V5XSA+IHZhbHVlKSB7XG5cdFx0XHRoaSA9IG1pZCAtIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB7bG86IGkwLCBoaTogaTF9O1xuXHRcdH1cblx0fVxuXG5cdC8vIGdpdmVuIHZhbHVlIGlzIG91dHNpZGUgdGFibGUgKGFmdGVyIGxhc3QgaXRlbSlcblx0cmV0dXJuIHtsbzogaTEsIGhpOiBudWxsfTtcbn1cblxuLyoqXG4gKiBMaW5lYXJseSBpbnRlcnBvbGF0ZXMgdGhlIGdpdmVuIHNvdXJjZSBgdmFsdWVgIHVzaW5nIHRoZSB0YWJsZSBpdGVtcyBgc2tleWAgdmFsdWVzIGFuZFxuICogcmV0dXJucyB0aGUgYXNzb2NpYXRlZCBgdGtleWAgdmFsdWUuIEZvciBleGFtcGxlLCBpbnRlcnBvbGF0ZSh0YWJsZSwgJ3RpbWUnLCA0MiwgJ3BvcycpXG4gKiByZXR1cm5zIHRoZSBwb3NpdGlvbiBmb3IgYSB0aW1lc3RhbXAgZXF1YWwgdG8gNDIuIElmIHZhbHVlIGlzIG91dCBvZiBib3VuZHMsIHZhbHVlcyBhdFxuICogaW5kZXggWzAsIDFdIG9yIFtuIC0gMSwgbl0gYXJlIHVzZWQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uLlxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSQxKHRhYmxlLCBza2V5LCBzdmFsLCB0a2V5KSB7XG5cdHZhciByYW5nZSA9IGxvb2t1cCh0YWJsZSwgc2tleSwgc3ZhbCk7XG5cblx0Ly8gTm90ZTogdGhlIGxvb2t1cCB0YWJsZSBBTFdBWVMgY29udGFpbnMgYXQgbGVhc3QgMiBpdGVtcyAobWluIGFuZCBtYXgpXG5cdHZhciBwcmV2ID0gIXJhbmdlLmxvID8gdGFibGVbMF0gOiAhcmFuZ2UuaGkgPyB0YWJsZVt0YWJsZS5sZW5ndGggLSAyXSA6IHJhbmdlLmxvO1xuXHR2YXIgbmV4dCA9ICFyYW5nZS5sbyA/IHRhYmxlWzFdIDogIXJhbmdlLmhpID8gdGFibGVbdGFibGUubGVuZ3RoIC0gMV0gOiByYW5nZS5oaTtcblxuXHR2YXIgc3BhbiA9IG5leHRbc2tleV0gLSBwcmV2W3NrZXldO1xuXHR2YXIgcmF0aW8gPSBzcGFuID8gKHN2YWwgLSBwcmV2W3NrZXldKSAvIHNwYW4gOiAwO1xuXHR2YXIgb2Zmc2V0ID0gKG5leHRbdGtleV0gLSBwcmV2W3RrZXldKSAqIHJhdGlvO1xuXG5cdHJldHVybiBwcmV2W3RrZXldICsgb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiB0b1RpbWVzdGFtcChzY2FsZSwgaW5wdXQpIHtcblx0dmFyIGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcblx0dmFyIG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zLnRpbWU7XG5cdHZhciBwYXJzZXIgPSBvcHRpb25zLnBhcnNlcjtcblx0dmFyIGZvcm1hdCA9IHBhcnNlciB8fCBvcHRpb25zLmZvcm1hdDtcblx0dmFyIHZhbHVlID0gaW5wdXQ7XG5cblx0aWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG5cdH1cblxuXHQvLyBPbmx5IHBhcnNlIGlmIGl0cyBub3QgYSB0aW1lc3RhbXAgYWxyZWFkeVxuXHRpZiAoIWhlbHBlcnMkMS5pc0Zpbml0ZSh2YWx1ZSkpIHtcblx0XHR2YWx1ZSA9IHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnXG5cdFx0XHQ/IGFkYXB0ZXIucGFyc2UodmFsdWUsIGZvcm1hdClcblx0XHRcdDogYWRhcHRlci5wYXJzZSh2YWx1ZSk7XG5cdH1cblxuXHRpZiAodmFsdWUgIT09IG51bGwpIHtcblx0XHRyZXR1cm4gK3ZhbHVlO1xuXHR9XG5cblx0Ly8gTGFiZWxzIGFyZSBpbiBhbiBpbmNvbXBhdGlibGUgZm9ybWF0IGFuZCBubyBgcGFyc2VyYCBoYXMgYmVlbiBwcm92aWRlZC5cblx0Ly8gVGhlIHVzZXIgbWlnaHQgc3RpbGwgdXNlIHRoZSBkZXByZWNhdGVkIGBmb3JtYXRgIG9wdGlvbiBmb3IgcGFyc2luZy5cblx0aWYgKCFwYXJzZXIgJiYgdHlwZW9mIGZvcm1hdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhbHVlID0gZm9ybWF0KGlucHV0KTtcblxuXHRcdC8vIGBmb3JtYXRgIGNvdWxkIHJldHVybiBzb21ldGhpbmcgZWxzZSB0aGFuIGEgdGltZXN0YW1wLCBpZiBzbywgcGFyc2UgaXRcblx0XHRpZiAoIWhlbHBlcnMkMS5pc0Zpbml0ZSh2YWx1ZSkpIHtcblx0XHRcdHZhbHVlID0gYWRhcHRlci5wYXJzZSh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcblx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKGlucHV0KSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zLnRpbWU7XG5cdHZhciB2YWx1ZSA9IHRvVGltZXN0YW1wKHNjYWxlLCBzY2FsZS5nZXRSaWdodFZhbHVlKGlucHV0KSk7XG5cdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdGlmIChvcHRpb25zLnJvdW5kKSB7XG5cdFx0dmFsdWUgPSArc2NhbGUuX2FkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgb3B0aW9ucy5yb3VuZCk7XG5cdH1cblxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogRmlndXJlcyBvdXQgd2hhdCB1bml0IHJlc3VsdHMgaW4gYW4gYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGF1dG8tZ2VuZXJhdGVkIHRpY2tzXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG5cdHZhciBpbGVuID0gVU5JVFMubGVuZ3RoO1xuXHR2YXIgaSwgaW50ZXJ2YWwsIGZhY3RvcjtcblxuXHRmb3IgKGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSkge1xuXHRcdGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcblx0XHRmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzIDogTUFYX0lOVEVHRVI7XG5cblx0XHRpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcblx0XHRcdHJldHVybiBVTklUU1tpXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IHdoYXQgdW5pdCB0byBmb3JtYXQgYSBzZXQgb2YgdGlja3Mgd2l0aFxuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyhzY2FsZSwgbnVtVGlja3MsIG1pblVuaXQsIG1pbiwgbWF4KSB7XG5cdHZhciBpLCB1bml0O1xuXG5cdGZvciAoaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKSB7XG5cdFx0dW5pdCA9IFVOSVRTW2ldO1xuXHRcdGlmIChJTlRFUlZBTFNbdW5pdF0uY29tbW9uICYmIHNjYWxlLl9hZGFwdGVyLmRpZmYobWF4LCBtaW4sIHVuaXQpID49IG51bVRpY2tzIC0gMSkge1xuXHRcdFx0cmV0dXJuIHVuaXQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFVOSVRTW21pblVuaXQgPyBVTklUUy5pbmRleE9mKG1pblVuaXQpIDogMF07XG59XG5cbmZ1bmN0aW9uIGRldGVybWluZU1ham9yVW5pdCh1bml0KSB7XG5cdGZvciAodmFyIGkgPSBVTklUUy5pbmRleE9mKHVuaXQpICsgMSwgaWxlbiA9IFVOSVRTLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGlmIChJTlRFUlZBTFNbVU5JVFNbaV1dLmNvbW1vbikge1xuXHRcdFx0cmV0dXJuIFVOSVRTW2ldO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG1heGltdW0gb2YgYGNhcGFjaXR5YCB0aW1lc3RhbXBzIGJldHdlZW4gbWluIGFuZCBtYXgsIHJvdW5kZWQgdG8gdGhlXG4gKiBgbWlub3JgIHVuaXQgdXNpbmcgdGhlIGdpdmVuIHNjYWxlIHRpbWUgYG9wdGlvbnNgLlxuICogSW1wb3J0YW50OiB0aGlzIG1ldGhvZCBjYW4gcmV0dXJuIHRpY2tzIG91dHNpZGUgdGhlIG1pbiBhbmQgbWF4IHJhbmdlLCBpdCdzIHRoZVxuICogcmVzcG9uc2liaWxpdHkgb2YgdGhlIGNhbGxpbmcgY29kZSB0byBjbGFtcCB2YWx1ZXMgaWYgbmVlZGVkLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZShzY2FsZSwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG5cdHZhciBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG5cdHZhciBvcHRpb25zID0gc2NhbGUub3B0aW9ucztcblx0dmFyIHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuXHR2YXIgbWlub3IgPSB0aW1lT3B0cy51bml0IHx8IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KTtcblx0dmFyIHN0ZXBTaXplID0gcmVzb2x2ZSQ1KFt0aW1lT3B0cy5zdGVwU2l6ZSwgdGltZU9wdHMudW5pdFN0ZXBTaXplLCAxXSk7XG5cdHZhciB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcblx0dmFyIGZpcnN0ID0gbWluO1xuXHR2YXIgdGlja3MgPSBbXTtcblx0dmFyIHRpbWU7XG5cblx0Ly8gRm9yICd3ZWVrJyB1bml0LCBoYW5kbGUgdGhlIGZpcnN0IGRheSBvZiB3ZWVrIG9wdGlvblxuXHRpZiAod2Vla2RheSkge1xuXHRcdGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcblx0fVxuXG5cdC8vIEFsaWduIGZpcnN0IHRpY2tzIG9uIHVuaXRcblx0Zmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCB3ZWVrZGF5ID8gJ2RheScgOiBtaW5vcik7XG5cblx0Ly8gUHJldmVudCBicm93c2VyIGZyb20gZnJlZXppbmcgaW4gY2FzZSB1c2VyIG9wdGlvbnMgcmVxdWVzdCBtaWxsaW9ucyBvZiBtaWxsaXNlY29uZHNcblx0aWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcblx0XHR0aHJvdyBtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yO1xuXHR9XG5cblx0Zm9yICh0aW1lID0gZmlyc3Q7IHRpbWUgPCBtYXg7IHRpbWUgPSArYWRhcHRlci5hZGQodGltZSwgc3RlcFNpemUsIG1pbm9yKSkge1xuXHRcdHRpY2tzLnB1c2godGltZSk7XG5cdH1cblxuXHRpZiAodGltZSA9PT0gbWF4IHx8IG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnKSB7XG5cdFx0dGlja3MucHVzaCh0aW1lKTtcblx0fVxuXG5cdHJldHVybiB0aWNrcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdGFydCBhbmQgZW5kIG9mZnNldHMgZnJvbSBlZGdlcyBpbiB0aGUgZm9ybSBvZiB7c3RhcnQsIGVuZH1cbiAqIHdoZXJlIGVhY2ggdmFsdWUgaXMgYSByZWxhdGl2ZSB3aWR0aCB0byB0aGUgc2NhbGUgYW5kIHJhbmdlcyBiZXR3ZWVuIDAgYW5kIDEuXG4gKiBUaGV5IGFkZCBleHRyYSBtYXJnaW5zIG9uIHRoZSBib3RoIHNpZGVzIGJ5IHNjYWxpbmcgZG93biB0aGUgb3JpZ2luYWwgc2NhbGUuXG4gKiBPZmZzZXRzIGFyZSBhZGRlZCB3aGVuIHRoZSBgb2Zmc2V0YCBvcHRpb24gaXMgdHJ1ZS5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZU9mZnNldHModGFibGUsIHRpY2tzLCBtaW4sIG1heCwgb3B0aW9ucykge1xuXHR2YXIgc3RhcnQgPSAwO1xuXHR2YXIgZW5kID0gMDtcblx0dmFyIGZpcnN0LCBsYXN0O1xuXG5cdGlmIChvcHRpb25zLm9mZnNldCAmJiB0aWNrcy5sZW5ndGgpIHtcblx0XHRmaXJzdCA9IGludGVycG9sYXRlJDEodGFibGUsICd0aW1lJywgdGlja3NbMF0sICdwb3MnKTtcblx0XHRpZiAodGlja3MubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRzdGFydCA9IDEgLSBmaXJzdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RhcnQgPSAoaW50ZXJwb2xhdGUkMSh0YWJsZSwgJ3RpbWUnLCB0aWNrc1sxXSwgJ3BvcycpIC0gZmlyc3QpIC8gMjtcblx0XHR9XG5cdFx0bGFzdCA9IGludGVycG9sYXRlJDEodGFibGUsICd0aW1lJywgdGlja3NbdGlja3MubGVuZ3RoIC0gMV0sICdwb3MnKTtcblx0XHRpZiAodGlja3MubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRlbmQgPSBsYXN0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbmQgPSAobGFzdCAtIGludGVycG9sYXRlJDEodGFibGUsICd0aW1lJywgdGlja3NbdGlja3MubGVuZ3RoIC0gMl0sICdwb3MnKSkgLyAyO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7c3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgZmFjdG9yOiAxIC8gKHN0YXJ0ICsgMSArIGVuZCl9O1xufVxuXG5mdW5jdGlvbiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpIHtcblx0dmFyIGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcblx0dmFyIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZih0aWNrc1swXS52YWx1ZSwgbWFqb3JVbml0KTtcblx0dmFyIGxhc3QgPSB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZTtcblx0dmFyIG1ham9yLCBpbmRleDtcblxuXHRmb3IgKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKSB7XG5cdFx0aW5kZXggPSBtYXBbbWFqb3JdO1xuXHRcdGlmIChpbmRleCA+PSAwKSB7XG5cdFx0XHR0aWNrc1tpbmRleF0ubWFqb3IgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGlja3M7XG59XG5cbmZ1bmN0aW9uIHRpY2tzRnJvbVRpbWVzdGFtcHMoc2NhbGUsIHZhbHVlcywgbWFqb3JVbml0KSB7XG5cdHZhciB0aWNrcyA9IFtdO1xuXHR2YXIgbWFwID0ge307XG5cdHZhciBpbGVuID0gdmFsdWVzLmxlbmd0aDtcblx0dmFyIGksIHZhbHVlO1xuXG5cdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHR2YWx1ZSA9IHZhbHVlc1tpXTtcblx0XHRtYXBbdmFsdWVdID0gaTtcblxuXHRcdHRpY2tzLnB1c2goe1xuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0bWFqb3I6IGZhbHNlXG5cdFx0fSk7XG5cdH1cblxuXHQvLyBXZSBzZXQgdGhlIG1ham9yIHRpY2tzIHNlcGFyYXRlbHkgZnJvbSB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIGNhbGxpbmcgc3RhcnRPZiBmb3IgZXZlcnkgdGlja1xuXHQvLyBpcyBleHBlbnNpdmUgd2hlbiB0aGVyZSBpcyBhIGxhcmdlIG51bWJlciBvZiB0aWNrc1xuXHRyZXR1cm4gKGlsZW4gPT09IDAgfHwgIW1ham9yVW5pdCkgPyB0aWNrcyA6IHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCk7XG59XG5cbnZhciBkZWZhdWx0Q29uZmlnJDQgPSB7XG5cdHBvc2l0aW9uOiAnYm90dG9tJyxcblxuXHQvKipcblx0ICogRGF0YSBkaXN0cmlidXRpb24gYWxvbmcgdGhlIHNjYWxlOlxuXHQgKiAtICdsaW5lYXInOiBkYXRhIGFyZSBzcHJlYWQgYWNjb3JkaW5nIHRvIHRoZWlyIHRpbWUgKGRpc3RhbmNlcyBjYW4gdmFyeSksXG5cdCAqIC0gJ3Nlcmllcyc6IGRhdGEgYXJlIHNwcmVhZCBhdCB0aGUgc2FtZSBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIuXG5cdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTA3XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0ZGlzdHJpYnV0aW9uOiAnbGluZWFyJyxcblxuXHQvKipcblx0ICogU2NhbGUgYm91bmRhcnkgc3RyYXRlZ3kgKGJ5cGFzc2VkIGJ5IG1pbi9tYXggdGltZSBvcHRpb25zKVxuXHQgKiAtIGBkYXRhYDogbWFrZSBzdXJlIGRhdGEgYXJlIGZ1bGx5IHZpc2libGUsIHRpY2tzIG91dHNpZGUgYXJlIHJlbW92ZWRcblx0ICogLSBgdGlja3NgOiBtYWtlIHN1cmUgdGlja3MgYXJlIGZ1bGx5IHZpc2libGUsIGRhdGEgb3V0c2lkZSBhcmUgdHJ1bmNhdGVkXG5cdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTU2XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0Ym91bmRzOiAnZGF0YScsXG5cblx0YWRhcHRlcnM6IHt9LFxuXHR0aW1lOiB7XG5cdFx0cGFyc2VyOiBmYWxzZSwgLy8gZmFsc2UgPT0gYSBwYXR0ZXJuIHN0cmluZyBmcm9tIGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL3N0cmluZy1mb3JtYXQvIG9yIGEgY3VzdG9tIGNhbGxiYWNrIHRoYXQgY29udmVydHMgaXRzIGFyZ3VtZW50IHRvIGEgbW9tZW50XG5cdFx0dW5pdDogZmFsc2UsIC8vIGZhbHNlID09IGF1dG9tYXRpYyBvciBvdmVycmlkZSB3aXRoIHdlZWssIG1vbnRoLCB5ZWFyLCBldGMuXG5cdFx0cm91bmQ6IGZhbHNlLCAvLyBub25lLCBvciBvdmVycmlkZSB3aXRoIHdlZWssIG1vbnRoLCB5ZWFyLCBldGMuXG5cdFx0ZGlzcGxheUZvcm1hdDogZmFsc2UsIC8vIERFUFJFQ0FURURcblx0XHRpc29XZWVrZGF5OiBmYWxzZSwgLy8gb3ZlcnJpZGUgd2VlayBzdGFydCBkYXkgLSBzZWUgaHR0cHM6Ly9tb21lbnRqcy5jb20vZG9jcy8jL2dldC1zZXQvaXNvLXdlZWtkYXkvXG5cdFx0bWluVW5pdDogJ21pbGxpc2Vjb25kJyxcblx0XHRkaXNwbGF5Rm9ybWF0czoge31cblx0fSxcblx0dGlja3M6IHtcblx0XHRhdXRvU2tpcDogZmFsc2UsXG5cblx0XHQvKipcblx0XHQgKiBUaWNrcyBnZW5lcmF0aW9uIGlucHV0IHZhbHVlczpcblx0XHQgKiAtICdhdXRvJzogZ2VuZXJhdGVzIFwib3B0aW1hbFwiIHRpY2tzIGJhc2VkIG9uIHNjYWxlIHNpemUgYW5kIHRpbWUgb3B0aW9ucy5cblx0XHQgKiAtICdkYXRhJzogZ2VuZXJhdGVzIHRpY2tzIGZyb20gZGF0YSAoaW5jbHVkaW5nIGxhYmVscyBmcm9tIGRhdGEge3R8eHx5fSBvYmplY3RzKS5cblx0XHQgKiAtICdsYWJlbHMnOiBnZW5lcmF0ZXMgdGlja3MgZnJvbSB1c2VyIGdpdmVuIGBkYXRhLmxhYmVsc2AgdmFsdWVzIE9OTFkuXG5cdFx0ICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9wdWxsLzQ1MDdcblx0XHQgKiBAc2luY2UgMi43LjBcblx0XHQgKi9cblx0XHRzb3VyY2U6ICdhdXRvJyxcblxuXHRcdG1ham9yOiB7XG5cdFx0XHRlbmFibGVkOiBmYWxzZVxuXHRcdH1cblx0fVxufTtcblxudmFyIHNjYWxlX3RpbWUgPSBjb3JlX3NjYWxlLmV4dGVuZCh7XG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMubWVyZ2VUaWNrc09wdGlvbnMoKTtcblx0XHRjb3JlX3NjYWxlLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcyk7XG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGltZSA9IG9wdGlvbnMudGltZSB8fCAob3B0aW9ucy50aW1lID0ge30pO1xuXHRcdHZhciBhZGFwdGVyID0gbWUuX2FkYXB0ZXIgPSBuZXcgY29yZV9hZGFwdGVycy5fZGF0ZShvcHRpb25zLmFkYXB0ZXJzLmRhdGUpO1xuXG5cdFx0Ly8gREVQUkVDQVRJT05TOiBvdXRwdXQgYSBtZXNzYWdlIG9ubHkgb25lIHRpbWUgcGVyIHVwZGF0ZVxuXHRcdGRlcHJlY2F0ZWQkMSgndGltZSBzY2FsZScsIHRpbWUuZm9ybWF0LCAndGltZS5mb3JtYXQnLCAndGltZS5wYXJzZXInKTtcblx0XHRkZXByZWNhdGVkJDEoJ3RpbWUgc2NhbGUnLCB0aW1lLm1pbiwgJ3RpbWUubWluJywgJ3RpY2tzLm1pbicpO1xuXHRcdGRlcHJlY2F0ZWQkMSgndGltZSBzY2FsZScsIHRpbWUubWF4LCAndGltZS5tYXgnLCAndGlja3MubWF4Jyk7XG5cblx0XHQvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5OiBiZWZvcmUgaW50cm9kdWNpbmcgYWRhcHRlciwgYGRpc3BsYXlGb3JtYXRzYCB3YXNcblx0XHQvLyBzdXBwb3NlZCB0byBjb250YWluICphbGwqIHVuaXQvc3RyaW5nIHBhaXJzIGJ1dCB0aGlzIGNhbid0IGJlIHJlc29sdmVkXG5cdFx0Ly8gd2hlbiBsb2FkaW5nIHRoZSBzY2FsZSAoYWRhcHRlcnMgYXJlIGxvYWRlZCBhZnRlcndhcmQpLCBzbyBsZXQncyBwb3B1bGF0ZVxuXHRcdC8vIG1pc3NpbmcgZm9ybWF0cyBvbiB1cGRhdGVcblx0XHRoZWxwZXJzJDEubWVyZ2VJZih0aW1lLmRpc3BsYXlGb3JtYXRzLCBhZGFwdGVyLmZvcm1hdHMoKSk7XG5cblx0XHRyZXR1cm4gY29yZV9zY2FsZS5wcm90b3R5cGUudXBkYXRlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBBbGxvd3MgZGF0YSB0byBiZSByZWZlcmVuY2VkIHZpYSAndCcgYXR0cmlidXRlXG5cdCAqL1xuXHRnZXRSaWdodFZhbHVlOiBmdW5jdGlvbihyYXdWYWx1ZSkge1xuXHRcdGlmIChyYXdWYWx1ZSAmJiByYXdWYWx1ZS50ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJhd1ZhbHVlID0gcmF3VmFsdWUudDtcblx0XHR9XG5cdFx0cmV0dXJuIGNvcmVfc2NhbGUucHJvdG90eXBlLmdldFJpZ2h0VmFsdWUuY2FsbCh0aGlzLCByYXdWYWx1ZSk7XG5cdH0sXG5cblx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgYWRhcHRlciA9IG1lLl9hZGFwdGVyO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgdW5pdCA9IG9wdGlvbnMudGltZS51bml0IHx8ICdkYXknO1xuXHRcdHZhciBtaW4gPSBNQVhfSU5URUdFUjtcblx0XHR2YXIgbWF4ID0gTUlOX0lOVEVHRVI7XG5cdFx0dmFyIHRpbWVzdGFtcHMgPSBbXTtcblx0XHR2YXIgZGF0YXNldHMgPSBbXTtcblx0XHR2YXIgbGFiZWxzID0gW107XG5cdFx0dmFyIGksIGosIGlsZW4sIGpsZW4sIGRhdGEsIHRpbWVzdGFtcCwgbGFiZWxzQWRkZWQ7XG5cdFx0dmFyIGRhdGFMYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YUxhYmVscy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGxhYmVscy5wdXNoKHBhcnNlKG1lLCBkYXRhTGFiZWxzW2ldKSk7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdGRhdGEgPSBjaGFydC5kYXRhLmRhdGFzZXRzW2ldLmRhdGE7XG5cblx0XHRcdFx0Ly8gTGV0J3MgY29uc2lkZXIgdGhhdCBhbGwgZGF0YSBoYXZlIHRoZSBzYW1lIGZvcm1hdC5cblx0XHRcdFx0aWYgKGhlbHBlcnMkMS5pc09iamVjdChkYXRhWzBdKSkge1xuXHRcdFx0XHRcdGRhdGFzZXRzW2ldID0gW107XG5cblx0XHRcdFx0XHRmb3IgKGogPSAwLCBqbGVuID0gZGF0YS5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0XHRcdHRpbWVzdGFtcCA9IHBhcnNlKG1lLCBkYXRhW2pdKTtcblx0XHRcdFx0XHRcdHRpbWVzdGFtcHMucHVzaCh0aW1lc3RhbXApO1xuXHRcdFx0XHRcdFx0ZGF0YXNldHNbaV1bal0gPSB0aW1lc3RhbXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFzZXRzW2ldID0gbGFiZWxzLnNsaWNlKDApO1xuXHRcdFx0XHRcdGlmICghbGFiZWxzQWRkZWQpIHtcblx0XHRcdFx0XHRcdHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChsYWJlbHMpO1xuXHRcdFx0XHRcdFx0bGFiZWxzQWRkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YXNldHNbaV0gPSBbXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobGFiZWxzLmxlbmd0aCkge1xuXHRcdFx0bWluID0gTWF0aC5taW4obWluLCBsYWJlbHNbMF0pO1xuXHRcdFx0bWF4ID0gTWF0aC5tYXgobWF4LCBsYWJlbHNbbGFiZWxzLmxlbmd0aCAtIDFdKTtcblx0XHR9XG5cblx0XHRpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcblx0XHRcdHRpbWVzdGFtcHMgPSBpbGVuID4gMSA/IGFycmF5VW5pcXVlKHRpbWVzdGFtcHMpLnNvcnQoc29ydGVyKSA6IHRpbWVzdGFtcHMuc29ydChzb3J0ZXIpO1xuXHRcdFx0bWluID0gTWF0aC5taW4obWluLCB0aW1lc3RhbXBzWzBdKTtcblx0XHRcdG1heCA9IE1hdGgubWF4KG1heCwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdKTtcblx0XHR9XG5cblx0XHRtaW4gPSBwYXJzZShtZSwgZ2V0TWluKG9wdGlvbnMpKSB8fCBtaW47XG5cdFx0bWF4ID0gcGFyc2UobWUsIGdldE1heChvcHRpb25zKSkgfHwgbWF4O1xuXG5cdFx0Ly8gSW4gY2FzZSB0aGVyZSBpcyBubyB2YWxpZCBtaW4vbWF4LCBzZXQgbGltaXRzIGJhc2VkIG9uIHVuaXQgdGltZSBvcHRpb25cblx0XHRtaW4gPSBtaW4gPT09IE1BWF9JTlRFR0VSID8gK2FkYXB0ZXIuc3RhcnRPZihEYXRlLm5vdygpLCB1bml0KSA6IG1pbjtcblx0XHRtYXggPSBtYXggPT09IE1JTl9JTlRFR0VSID8gK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxIDogbWF4O1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbWF4IGlzIHN0cmljdGx5IGhpZ2hlciB0aGFuIG1pbiAocmVxdWlyZWQgYnkgdGhlIGxvb2t1cCB0YWJsZSlcblx0XHRtZS5taW4gPSBNYXRoLm1pbihtaW4sIG1heCk7XG5cdFx0bWUubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcblxuXHRcdC8vIFBSSVZBVEVcblx0XHRtZS5fdGFibGUgPSBbXTtcblx0XHRtZS5fdGltZXN0YW1wcyA9IHtcblx0XHRcdGRhdGE6IHRpbWVzdGFtcHMsXG5cdFx0XHRkYXRhc2V0czogZGF0YXNldHMsXG5cdFx0XHRsYWJlbHM6IGxhYmVsc1xuXHRcdH07XG5cdH0sXG5cblx0YnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWluID0gbWUubWluO1xuXHRcdHZhciBtYXggPSBtZS5tYXg7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuXHRcdHZhciB0aW1lc3RhbXBzID0gbWUuX3RpbWVzdGFtcHM7XG5cdFx0dmFyIHRpY2tzID0gW107XG5cdFx0dmFyIGNhcGFjaXR5ID0gbWUuZ2V0TGFiZWxDYXBhY2l0eShtaW4pO1xuXHRcdHZhciBzb3VyY2UgPSB0aWNrT3B0cy5zb3VyY2U7XG5cdFx0dmFyIGRpc3RyaWJ1dGlvbiA9IG9wdGlvbnMuZGlzdHJpYnV0aW9uO1xuXHRcdHZhciBpLCBpbGVuLCB0aW1lc3RhbXA7XG5cblx0XHRpZiAoc291cmNlID09PSAnZGF0YScgfHwgKHNvdXJjZSA9PT0gJ2F1dG8nICYmIGRpc3RyaWJ1dGlvbiA9PT0gJ3NlcmllcycpKSB7XG5cdFx0XHR0aW1lc3RhbXBzID0gdGltZXN0YW1wcy5kYXRhO1xuXHRcdH0gZWxzZSBpZiAoc291cmNlID09PSAnbGFiZWxzJykge1xuXHRcdFx0dGltZXN0YW1wcyA9IHRpbWVzdGFtcHMubGFiZWxzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aW1lc3RhbXBzID0gZ2VuZXJhdGUobWUsIG1pbiwgbWF4LCBjYXBhY2l0eSk7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG5cdFx0XHRtaW4gPSB0aW1lc3RhbXBzWzBdO1xuXHRcdFx0bWF4ID0gdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuXHRcdH1cblxuXHRcdC8vIEVuZm9yY2UgbGltaXRzIHdpdGggdXNlciBtaW4vbWF4IG9wdGlvbnNcblx0XHRtaW4gPSBwYXJzZShtZSwgZ2V0TWluKG9wdGlvbnMpKSB8fCBtaW47XG5cdFx0bWF4ID0gcGFyc2UobWUsIGdldE1heChvcHRpb25zKSkgfHwgbWF4O1xuXG5cdFx0Ly8gUmVtb3ZlIHRpY2tzIG91dHNpZGUgdGhlIG1pbi9tYXggcmFuZ2Vcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHRpbWVzdGFtcCA9IHRpbWVzdGFtcHNbaV07XG5cdFx0XHRpZiAodGltZXN0YW1wID49IG1pbiAmJiB0aW1lc3RhbXAgPD0gbWF4KSB7XG5cdFx0XHRcdHRpY2tzLnB1c2godGltZXN0YW1wKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5taW4gPSBtaW47XG5cdFx0bWUubWF4ID0gbWF4O1xuXG5cdFx0Ly8gUFJJVkFURVxuXHRcdC8vIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIHJlbGllcyBvbiB0aGUgbnVtYmVyIG9mIHRpY2tzIHNvIHdlIGRvbid0IHVzZSBpdCB3aGVuXG5cdFx0Ly8gYXV0b1NraXAgaXMgZW5hYmxlZCBiZWNhdXNlIHdlIGRvbid0IHlldCBrbm93IHdoYXQgdGhlIGZpbmFsIG51bWJlciBvZiB0aWNrcyB3aWxsIGJlXG5cdFx0bWUuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcFxuXHRcdFx0PyBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1lLm1pbiwgbWUubWF4LCBjYXBhY2l0eSlcblx0XHRcdDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcobWUsIHRpY2tzLmxlbmd0aCwgdGltZU9wdHMubWluVW5pdCwgbWUubWluLCBtZS5tYXgpKTtcblx0XHRtZS5fbWFqb3JVbml0ID0gIXRpY2tPcHRzLm1ham9yLmVuYWJsZWQgfHwgbWUuX3VuaXQgPT09ICd5ZWFyJyA/IHVuZGVmaW5lZFxuXHRcdFx0OiBkZXRlcm1pbmVNYWpvclVuaXQobWUuX3VuaXQpO1xuXHRcdG1lLl90YWJsZSA9IGJ1aWxkTG9va3VwVGFibGUobWUuX3RpbWVzdGFtcHMuZGF0YSwgbWluLCBtYXgsIGRpc3RyaWJ1dGlvbik7XG5cdFx0bWUuX29mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyhtZS5fdGFibGUsIHRpY2tzLCBtaW4sIG1heCwgb3B0aW9ucyk7XG5cblx0XHRpZiAodGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0dGlja3MucmV2ZXJzZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aWNrc0Zyb21UaW1lc3RhbXBzKG1lLCB0aWNrcywgbWUuX21ham9yVW5pdCk7XG5cdH0sXG5cblx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGFkYXB0ZXIgPSBtZS5fYWRhcHRlcjtcblx0XHR2YXIgZGF0YSA9IG1lLmNoYXJ0LmRhdGE7XG5cdFx0dmFyIHRpbWVPcHRzID0gbWUub3B0aW9ucy50aW1lO1xuXHRcdHZhciBsYWJlbCA9IGRhdGEubGFiZWxzICYmIGluZGV4IDwgZGF0YS5sYWJlbHMubGVuZ3RoID8gZGF0YS5sYWJlbHNbaW5kZXhdIDogJyc7XG5cdFx0dmFyIHZhbHVlID0gZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdO1xuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc09iamVjdCh2YWx1ZSkpIHtcblx0XHRcdGxhYmVsID0gbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cdFx0fVxuXHRcdGlmICh0aW1lT3B0cy50b29sdGlwRm9ybWF0KSB7XG5cdFx0XHRyZXR1cm4gYWRhcHRlci5mb3JtYXQodG9UaW1lc3RhbXAobWUsIGxhYmVsKSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0fVxuXHRcdHJldHVybiBhZGFwdGVyLmZvcm1hdCh0b1RpbWVzdGFtcChtZSwgbGFiZWwpLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEZ1bmN0aW9uIHRvIGZvcm1hdCBhbiBpbmRpdmlkdWFsIHRpY2sgbWFya1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dGlja0Zvcm1hdEZ1bmN0aW9uOiBmdW5jdGlvbih0aW1lLCBpbmRleCwgdGlja3MsIGZvcm1hdCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGFkYXB0ZXIgPSBtZS5fYWRhcHRlcjtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG5cdFx0dmFyIG1pbm9yRm9ybWF0ID0gZm9ybWF0c1ttZS5fdW5pdF07XG5cdFx0dmFyIG1ham9yVW5pdCA9IG1lLl9tYWpvclVuaXQ7XG5cdFx0dmFyIG1ham9yRm9ybWF0ID0gZm9ybWF0c1ttYWpvclVuaXRdO1xuXHRcdHZhciB0aWNrID0gdGlja3NbaW5kZXhdO1xuXHRcdHZhciB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG5cdFx0dmFyIG1ham9yID0gbWFqb3JVbml0ICYmIG1ham9yRm9ybWF0ICYmIHRpY2sgJiYgdGljay5tYWpvcjtcblx0XHR2YXIgbGFiZWwgPSBhZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgPyBmb3JtYXQgOiBtYWpvciA/IG1ham9yRm9ybWF0IDogbWlub3JGb3JtYXQpO1xuXHRcdHZhciBuZXN0ZWRUaWNrT3B0cyA9IG1ham9yID8gdGlja09wdHMubWFqb3IgOiB0aWNrT3B0cy5taW5vcjtcblx0XHR2YXIgZm9ybWF0dGVyID0gcmVzb2x2ZSQ1KFtcblx0XHRcdG5lc3RlZFRpY2tPcHRzLmNhbGxiYWNrLFxuXHRcdFx0bmVzdGVkVGlja09wdHMudXNlckNhbGxiYWNrLFxuXHRcdFx0dGlja09wdHMuY2FsbGJhY2ssXG5cdFx0XHR0aWNrT3B0cy51c2VyQ2FsbGJhY2tcblx0XHRdKTtcblxuXHRcdHJldHVybiBmb3JtYXR0ZXIgPyBmb3JtYXR0ZXIobGFiZWwsIGluZGV4LCB0aWNrcykgOiBsYWJlbDtcblx0fSxcblxuXHRjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24odGlja3MpIHtcblx0XHR2YXIgbGFiZWxzID0gW107XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRsYWJlbHMucHVzaCh0aGlzLnRpY2tGb3JtYXRGdW5jdGlvbih0aWNrc1tpXS52YWx1ZSwgaSwgdGlja3MpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGFiZWxzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0UGl4ZWxGb3JPZmZzZXQ6IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvZmZzZXRzID0gbWUuX29mZnNldHM7XG5cdFx0dmFyIHBvcyA9IGludGVycG9sYXRlJDEobWUuX3RhYmxlLCAndGltZScsIHRpbWUsICdwb3MnKTtcblx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKChvZmZzZXRzLnN0YXJ0ICsgcG9zKSAqIG9mZnNldHMuZmFjdG9yKTtcblx0fSxcblxuXHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpbWUgPSBudWxsO1xuXG5cdFx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgZGF0YXNldEluZGV4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRpbWUgPSBtZS5fdGltZXN0YW1wcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdW2luZGV4XTtcblx0XHR9XG5cblx0XHRpZiAodGltZSA9PT0gbnVsbCkge1xuXHRcdFx0dGltZSA9IHBhcnNlKG1lLCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRpbWUgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiBtZS5nZXRQaXhlbEZvck9mZnNldCh0aW1lKTtcblx0XHR9XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMuZ2V0VGlja3MoKTtcblx0XHRyZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHRpY2tzLmxlbmd0aCA/XG5cdFx0XHR0aGlzLmdldFBpeGVsRm9yT2Zmc2V0KHRpY2tzW2luZGV4XS52YWx1ZSkgOlxuXHRcdFx0bnVsbDtcblx0fSxcblxuXHRnZXRWYWx1ZUZvclBpeGVsOiBmdW5jdGlvbihwaXhlbCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9mZnNldHMgPSBtZS5fb2Zmc2V0cztcblx0XHR2YXIgcG9zID0gbWUuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG5cdFx0dmFyIHRpbWUgPSBpbnRlcnBvbGF0ZSQxKG1lLl90YWJsZSwgJ3BvcycsIHBvcywgJ3RpbWUnKTtcblxuXHRcdC8vIERFUFJFQ0FUSU9OLCB3ZSBzaG91bGQgcmV0dXJuIHRpbWUgZGlyZWN0bHlcblx0XHRyZXR1cm4gbWUuX2FkYXB0ZXIuX2NyZWF0ZSh0aW1lKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRMYWJlbFNpemU6IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja3NPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHR2YXIgdGlja0xhYmVsV2lkdGggPSBtZS5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuXHRcdHZhciBhbmdsZSA9IGhlbHBlcnMkMS50b1JhZGlhbnMobWUuaXNIb3Jpem9udGFsKCkgPyB0aWNrc09wdHMubWF4Um90YXRpb24gOiB0aWNrc09wdHMubWluUm90YXRpb24pO1xuXHRcdHZhciBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHR2YXIgc2luUm90YXRpb24gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0dmFyIHRpY2tGb250U2l6ZSA9IHZhbHVlT3JEZWZhdWx0JGQodGlja3NPcHRzLmZvbnRTaXplLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHc6ICh0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uKSArICh0aWNrRm9udFNpemUgKiBzaW5Sb3RhdGlvbiksXG5cdFx0XHRoOiAodGlja0xhYmVsV2lkdGggKiBzaW5Sb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogY29zUm90YXRpb24pXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogQ3J1ZGUgYXBwcm94aW1hdGlvbiBvZiB3aGF0IHRoZSBsYWJlbCB3aWR0aCBtaWdodCBiZVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0TGFiZWxXaWR0aDogZnVuY3Rpb24obGFiZWwpIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0TGFiZWxTaXplKGxhYmVsKS53O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0TGFiZWxDYXBhY2l0eTogZnVuY3Rpb24oZXhhbXBsZVRpbWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aW1lT3B0cyA9IG1lLm9wdGlvbnMudGltZTtcblx0XHR2YXIgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcblxuXHRcdC8vIHBpY2sgdGhlIGxvbmdlc3QgZm9ybWF0IChtaWxsaXNlY29uZHMpIGZvciBndWVzdGltYXRpb25cblx0XHR2YXIgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG5cdFx0dmFyIGV4YW1wbGVMYWJlbCA9IG1lLnRpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyhtZSwgW2V4YW1wbGVUaW1lXSwgbWUuX21ham9yVW5pdCksIGZvcm1hdCk7XG5cdFx0dmFyIHNpemUgPSBtZS5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG5cdFx0dmFyIGNhcGFjaXR5ID0gTWF0aC5mbG9vcihtZS5pc0hvcml6b250YWwoKSA/IG1lLndpZHRoIC8gc2l6ZS53IDogbWUuaGVpZ2h0IC8gc2l6ZS5oKTtcblxuXHRcdGlmIChtZS5vcHRpb25zLm9mZnNldCkge1xuXHRcdFx0Y2FwYWNpdHktLTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY2FwYWNpdHkgPiAwID8gY2FwYWNpdHkgOiAxO1xuXHR9XG59KTtcblxuLy8gSU5URVJOQUw6IHN0YXRpYyBkZWZhdWx0IG9wdGlvbnMsIHJlZ2lzdGVyZWQgaW4gc3JjL2luZGV4LmpzXG52YXIgX2RlZmF1bHRzJDQgPSBkZWZhdWx0Q29uZmlnJDQ7XG5zY2FsZV90aW1lLl9kZWZhdWx0cyA9IF9kZWZhdWx0cyQ0O1xuXG52YXIgc2NhbGVzID0ge1xuXHRjYXRlZ29yeTogc2NhbGVfY2F0ZWdvcnksXG5cdGxpbmVhcjogc2NhbGVfbGluZWFyLFxuXHRsb2dhcml0aG1pYzogc2NhbGVfbG9nYXJpdGhtaWMsXG5cdHJhZGlhbExpbmVhcjogc2NhbGVfcmFkaWFsTGluZWFyLFxuXHR0aW1lOiBzY2FsZV90aW1lXG59O1xuXG52YXIgRk9STUFUUyA9IHtcblx0ZGF0ZXRpbWU6ICdNTU0gRCwgWVlZWSwgaDptbTpzcyBhJyxcblx0bWlsbGlzZWNvbmQ6ICdoOm1tOnNzLlNTUyBhJyxcblx0c2Vjb25kOiAnaDptbTpzcyBhJyxcblx0bWludXRlOiAnaDptbSBhJyxcblx0aG91cjogJ2hBJyxcblx0ZGF5OiAnTU1NIEQnLFxuXHR3ZWVrOiAnbGwnLFxuXHRtb250aDogJ01NTSBZWVlZJyxcblx0cXVhcnRlcjogJ1tRXVEgLSBZWVlZJyxcblx0eWVhcjogJ1lZWVknXG59O1xuXG5jb3JlX2FkYXB0ZXJzLl9kYXRlLm92ZXJyaWRlKHR5cGVvZiBtb21lbnQgPT09ICdmdW5jdGlvbicgPyB7XG5cdF9pZDogJ21vbWVudCcsIC8vIERFQlVHIE9OTFlcblxuXHRmb3JtYXRzOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gRk9STUFUUztcblx0fSxcblxuXHRwYXJzZTogZnVuY3Rpb24odmFsdWUsIGZvcm1hdCkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR2YWx1ZSA9IG1vbWVudCh2YWx1ZSwgZm9ybWF0KTtcblx0XHR9IGVsc2UgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBtb21lbnQpKSB7XG5cdFx0XHR2YWx1ZSA9IG1vbWVudCh2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZS5pc1ZhbGlkKCkgPyB2YWx1ZS52YWx1ZU9mKCkgOiBudWxsO1xuXHR9LFxuXG5cdGZvcm1hdDogZnVuY3Rpb24odGltZSwgZm9ybWF0KSB7XG5cdFx0cmV0dXJuIG1vbWVudCh0aW1lKS5mb3JtYXQoZm9ybWF0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKHRpbWUsIGFtb3VudCwgdW5pdCkge1xuXHRcdHJldHVybiBtb21lbnQodGltZSkuYWRkKGFtb3VudCwgdW5pdCkudmFsdWVPZigpO1xuXHR9LFxuXG5cdGRpZmY6IGZ1bmN0aW9uKG1heCwgbWluLCB1bml0KSB7XG5cdFx0cmV0dXJuIG1vbWVudChtYXgpLmRpZmYobW9tZW50KG1pbiksIHVuaXQpO1xuXHR9LFxuXG5cdHN0YXJ0T2Y6IGZ1bmN0aW9uKHRpbWUsIHVuaXQsIHdlZWtkYXkpIHtcblx0XHR0aW1lID0gbW9tZW50KHRpbWUpO1xuXHRcdGlmICh1bml0ID09PSAnaXNvV2VlaycpIHtcblx0XHRcdHJldHVybiB0aW1lLmlzb1dlZWtkYXkod2Vla2RheSkudmFsdWVPZigpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGltZS5zdGFydE9mKHVuaXQpLnZhbHVlT2YoKTtcblx0fSxcblxuXHRlbmRPZjogZnVuY3Rpb24odGltZSwgdW5pdCkge1xuXHRcdHJldHVybiBtb21lbnQodGltZSkuZW5kT2YodW5pdCkudmFsdWVPZigpO1xuXHR9LFxuXG5cdC8vIERFUFJFQ0FUSU9OU1xuXG5cdC8qKlxuXHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIHNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoKS5cblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuXHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY3JlYXRlOiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0cmV0dXJuIG1vbWVudCh0aW1lKTtcblx0fSxcbn0gOiB7fSk7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRwbHVnaW5zOiB7XG5cdFx0ZmlsbGVyOiB7XG5cdFx0XHRwcm9wYWdhdGU6IHRydWVcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgbWFwcGVycyA9IHtcblx0ZGF0YXNldDogZnVuY3Rpb24oc291cmNlKSB7XG5cdFx0dmFyIGluZGV4ID0gc291cmNlLmZpbGw7XG5cdFx0dmFyIGNoYXJ0ID0gc291cmNlLmNoYXJ0O1xuXHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuXHRcdHZhciB2aXNpYmxlID0gbWV0YSAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KTtcblx0XHR2YXIgcG9pbnRzID0gKHZpc2libGUgJiYgbWV0YS5kYXRhc2V0Ll9jaGlsZHJlbikgfHwgW107XG5cdFx0dmFyIGxlbmd0aCA9IHBvaW50cy5sZW5ndGggfHwgMDtcblxuXHRcdHJldHVybiAhbGVuZ3RoID8gbnVsbCA6IGZ1bmN0aW9uKHBvaW50LCBpKSB7XG5cdFx0XHRyZXR1cm4gKGkgPCBsZW5ndGggJiYgcG9pbnRzW2ldLl92aWV3KSB8fCBudWxsO1xuXHRcdH07XG5cdH0sXG5cblx0Ym91bmRhcnk6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdHZhciBib3VuZGFyeSA9IHNvdXJjZS5ib3VuZGFyeTtcblx0XHR2YXIgeCA9IGJvdW5kYXJ5ID8gYm91bmRhcnkueCA6IG51bGw7XG5cdFx0dmFyIHkgPSBib3VuZGFyeSA/IGJvdW5kYXJ5LnkgOiBudWxsO1xuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KGJvdW5kYXJ5KSkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHBvaW50LCBpKSB7XG5cdFx0XHRcdHJldHVybiBib3VuZGFyeVtpXTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4OiB4ID09PSBudWxsID8gcG9pbnQueCA6IHgsXG5cdFx0XHRcdHk6IHkgPT09IG51bGwgPyBwb2ludC55IDogeSxcblx0XHRcdH07XG5cdFx0fTtcblx0fVxufTtcblxuLy8gQHRvZG8gaWYgKGZpbGxbMF0gPT09ICcjJylcbmZ1bmN0aW9uIGRlY29kZUZpbGwoZWwsIGluZGV4LCBjb3VudCkge1xuXHR2YXIgbW9kZWwgPSBlbC5fbW9kZWwgfHwge307XG5cdHZhciBmaWxsID0gbW9kZWwuZmlsbDtcblx0dmFyIHRhcmdldDtcblxuXHRpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ZmlsbCA9ICEhbW9kZWwuYmFja2dyb3VuZENvbG9yO1xuXHR9XG5cblx0aWYgKGZpbGwgPT09IGZhbHNlIHx8IGZpbGwgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoZmlsbCA9PT0gdHJ1ZSkge1xuXHRcdHJldHVybiAnb3JpZ2luJztcblx0fVxuXG5cdHRhcmdldCA9IHBhcnNlRmxvYXQoZmlsbCwgMTApO1xuXHRpZiAoaXNGaW5pdGUodGFyZ2V0KSAmJiBNYXRoLmZsb29yKHRhcmdldCkgPT09IHRhcmdldCkge1xuXHRcdGlmIChmaWxsWzBdID09PSAnLScgfHwgZmlsbFswXSA9PT0gJysnKSB7XG5cdFx0XHR0YXJnZXQgPSBpbmRleCArIHRhcmdldDtcblx0XHR9XG5cblx0XHRpZiAodGFyZ2V0ID09PSBpbmRleCB8fCB0YXJnZXQgPCAwIHx8IHRhcmdldCA+PSBjb3VudCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH1cblxuXHRzd2l0Y2ggKGZpbGwpIHtcblx0Ly8gY29tcGF0aWJpbGl0eVxuXHRjYXNlICdib3R0b20nOlxuXHRcdHJldHVybiAnc3RhcnQnO1xuXHRjYXNlICd0b3AnOlxuXHRcdHJldHVybiAnZW5kJztcblx0Y2FzZSAnemVybyc6XG5cdFx0cmV0dXJuICdvcmlnaW4nO1xuXHQvLyBzdXBwb3J0ZWQgYm91bmRhcmllc1xuXHRjYXNlICdvcmlnaW4nOlxuXHRjYXNlICdzdGFydCc6XG5cdGNhc2UgJ2VuZCc6XG5cdFx0cmV0dXJuIGZpbGw7XG5cdC8vIGludmFsaWQgZmlsbCB2YWx1ZXNcblx0ZGVmYXVsdDpcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSkge1xuXHR2YXIgbW9kZWwgPSBzb3VyY2UuZWwuX21vZGVsIHx8IHt9O1xuXHR2YXIgc2NhbGUgPSBzb3VyY2UuZWwuX3NjYWxlIHx8IHt9O1xuXHR2YXIgZmlsbCA9IHNvdXJjZS5maWxsO1xuXHR2YXIgdGFyZ2V0ID0gbnVsbDtcblx0dmFyIGhvcml6b250YWw7XG5cblx0aWYgKGlzRmluaXRlKGZpbGwpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5OiB1bnRpbCB2Mywgd2Ugc3RpbGwgbmVlZCB0byBzdXBwb3J0IGJvdW5kYXJ5IHZhbHVlcyBzZXQgb25cblx0Ly8gdGhlIG1vZGVsIChzY2FsZVRvcCwgc2NhbGVCb3R0b20gYW5kIHNjYWxlWmVybykgYmVjYXVzZSBzb21lIGV4dGVybmFsIHBsdWdpbnMgYW5kXG5cdC8vIGNvbnRyb2xsZXJzIG1pZ2h0IHN0aWxsIHVzZSBpdCAoZS5nLiB0aGUgU21pdGggY2hhcnQpLlxuXG5cdGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG5cdFx0dGFyZ2V0ID0gbW9kZWwuc2NhbGVCb3R0b20gPT09IHVuZGVmaW5lZCA/IHNjYWxlLmJvdHRvbSA6IG1vZGVsLnNjYWxlQm90dG9tO1xuXHR9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG5cdFx0dGFyZ2V0ID0gbW9kZWwuc2NhbGVUb3AgPT09IHVuZGVmaW5lZCA/IHNjYWxlLnRvcCA6IG1vZGVsLnNjYWxlVG9wO1xuXHR9IGVsc2UgaWYgKG1vZGVsLnNjYWxlWmVybyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dGFyZ2V0ID0gbW9kZWwuc2NhbGVaZXJvO1xuXHR9IGVsc2UgaWYgKHNjYWxlLmdldEJhc2VQaXhlbCkge1xuXHRcdHRhcmdldCA9IHNjYWxlLmdldEJhc2VQaXhlbCgpO1xuXHR9XG5cblx0aWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldCAhPT0gbnVsbCkge1xuXHRcdGlmICh0YXJnZXQueCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldC55ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc0Zpbml0ZSh0YXJnZXQpKSB7XG5cdFx0XHRob3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4OiBob3Jpem9udGFsID8gdGFyZ2V0IDogbnVsbCxcblx0XHRcdFx0eTogaG9yaXpvbnRhbCA/IG51bGwgOiB0YXJnZXRcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSkge1xuXHR2YXIgc2NhbGUgPSBzb3VyY2UuZWwuX3NjYWxlO1xuXHR2YXIgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG5cdHZhciBsZW5ndGggPSBzY2FsZS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB0YXJnZXQgPSBbXTtcblx0dmFyIHN0YXJ0LCBlbmQsIGNlbnRlciwgaSwgcG9pbnQ7XG5cblx0aWYgKCFsZW5ndGgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHN0YXJ0ID0gb3B0aW9ucy50aWNrcy5yZXZlcnNlID8gc2NhbGUubWF4IDogc2NhbGUubWluO1xuXHRlbmQgPSBvcHRpb25zLnRpY2tzLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXg7XG5cdGNlbnRlciA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSgwLCBzdGFydCk7XG5cdGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdHBvaW50ID0gZmlsbCA9PT0gJ3N0YXJ0JyB8fCBmaWxsID09PSAnZW5kJ1xuXHRcdFx0PyBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgZmlsbCA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogZW5kKVxuXHRcdFx0OiBzY2FsZS5nZXRCYXNlUG9zaXRpb24oaSk7XG5cdFx0aWYgKG9wdGlvbnMuZ3JpZExpbmVzLmNpcmN1bGFyKSB7XG5cdFx0XHRwb2ludC5jeCA9IGNlbnRlci54O1xuXHRcdFx0cG9pbnQuY3kgPSBjZW50ZXIueTtcblx0XHRcdHBvaW50LmFuZ2xlID0gc2NhbGUuZ2V0SW5kZXhBbmdsZShpKSAtIE1hdGguUEkgLyAyO1xuXHRcdH1cblx0XHR0YXJnZXQucHVzaChwb2ludCk7XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuXHR2YXIgc2NhbGUgPSBzb3VyY2UuZWwuX3NjYWxlIHx8IHt9O1xuXG5cdGlmIChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUpIHtcblx0XHRyZXR1cm4gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKTtcblx0fVxuXHRyZXR1cm4gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXQoc291cmNlcywgaW5kZXgsIHByb3BhZ2F0ZSkge1xuXHR2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB2aXNpdGVkID0gW2luZGV4XTtcblx0dmFyIHRhcmdldDtcblxuXHRpZiAoIXByb3BhZ2F0ZSkge1xuXHRcdHJldHVybiBmaWxsO1xuXHR9XG5cblx0d2hpbGUgKGZpbGwgIT09IGZhbHNlICYmIHZpc2l0ZWQuaW5kZXhPZihmaWxsKSA9PT0gLTEpIHtcblx0XHRpZiAoIWlzRmluaXRlKGZpbGwpKSB7XG5cdFx0XHRyZXR1cm4gZmlsbDtcblx0XHR9XG5cblx0XHR0YXJnZXQgPSBzb3VyY2VzW2ZpbGxdO1xuXHRcdGlmICghdGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHRhcmdldC52aXNpYmxlKSB7XG5cdFx0XHRyZXR1cm4gZmlsbDtcblx0XHR9XG5cblx0XHR2aXNpdGVkLnB1c2goZmlsbCk7XG5cdFx0ZmlsbCA9IHRhcmdldC5maWxsO1xuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXBwZXIoc291cmNlKSB7XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB0eXBlID0gJ2RhdGFzZXQnO1xuXG5cdGlmIChmaWxsID09PSBmYWxzZSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0aWYgKCFpc0Zpbml0ZShmaWxsKSkge1xuXHRcdHR5cGUgPSAnYm91bmRhcnknO1xuXHR9XG5cblx0cmV0dXJuIG1hcHBlcnNbdHlwZV0oc291cmNlKTtcbn1cblxuZnVuY3Rpb24gaXNEcmF3YWJsZShwb2ludCkge1xuXHRyZXR1cm4gcG9pbnQgJiYgIXBvaW50LnNraXA7XG59XG5cbmZ1bmN0aW9uIGRyYXdBcmVhKGN0eCwgY3VydmUwLCBjdXJ2ZTEsIGxlbjAsIGxlbjEpIHtcblx0dmFyIGksIGN4LCBjeSwgcjtcblxuXHRpZiAoIWxlbjAgfHwgIWxlbjEpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBidWlsZGluZyBmaXJzdCBhcmVhIGN1cnZlIChub3JtYWwpXG5cdGN0eC5tb3ZlVG8oY3VydmUwWzBdLngsIGN1cnZlMFswXS55KTtcblx0Zm9yIChpID0gMTsgaSA8IGxlbjA7ICsraSkge1xuXHRcdGhlbHBlcnMkMS5jYW52YXMubGluZVRvKGN0eCwgY3VydmUwW2kgLSAxXSwgY3VydmUwW2ldKTtcblx0fVxuXG5cdGlmIChjdXJ2ZTFbMF0uYW5nbGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdGN4ID0gY3VydmUxWzBdLmN4O1xuXHRcdGN5ID0gY3VydmUxWzBdLmN5O1xuXHRcdHIgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VydmUxWzBdLnggLSBjeCwgMikgKyBNYXRoLnBvdyhjdXJ2ZTFbMF0ueSAtIGN5LCAyKSk7XG5cdFx0Zm9yIChpID0gbGVuMSAtIDE7IGkgPiAwOyAtLWkpIHtcblx0XHRcdGN0eC5hcmMoY3gsIGN5LCByLCBjdXJ2ZTFbaV0uYW5nbGUsIGN1cnZlMVtpIC0gMV0uYW5nbGUsIHRydWUpO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBqb2luaW5nIHRoZSB0d28gYXJlYSBjdXJ2ZXNcblx0Y3R4LmxpbmVUbyhjdXJ2ZTFbbGVuMSAtIDFdLngsIGN1cnZlMVtsZW4xIC0gMV0ueSk7XG5cblx0Ly8gYnVpbGRpbmcgb3Bwb3NpdGUgYXJlYSBjdXJ2ZSAocmV2ZXJzZSlcblx0Zm9yIChpID0gbGVuMSAtIDE7IGkgPiAwOyAtLWkpIHtcblx0XHRoZWxwZXJzJDEuY2FudmFzLmxpbmVUbyhjdHgsIGN1cnZlMVtpXSwgY3VydmUxW2kgLSAxXSwgdHJ1ZSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9GaWxsKGN0eCwgcG9pbnRzLCBtYXBwZXIsIHZpZXcsIGNvbG9yLCBsb29wKSB7XG5cdHZhciBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG5cdHZhciBzcGFuID0gdmlldy5zcGFuR2Fwcztcblx0dmFyIGN1cnZlMCA9IFtdO1xuXHR2YXIgY3VydmUxID0gW107XG5cdHZhciBsZW4wID0gMDtcblx0dmFyIGxlbjEgPSAwO1xuXHR2YXIgaSwgaWxlbiwgaW5kZXgsIHAwLCBwMSwgZDAsIGQxLCBsb29wT2Zmc2V0O1xuXG5cdGN0eC5iZWdpblBhdGgoKTtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRpbmRleCA9IGkgJSBjb3VudDtcblx0XHRwMCA9IHBvaW50c1tpbmRleF0uX3ZpZXc7XG5cdFx0cDEgPSBtYXBwZXIocDAsIGluZGV4LCB2aWV3KTtcblx0XHRkMCA9IGlzRHJhd2FibGUocDApO1xuXHRcdGQxID0gaXNEcmF3YWJsZShwMSk7XG5cblx0XHRpZiAobG9vcCAmJiBsb29wT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgZDApIHtcblx0XHRcdGxvb3BPZmZzZXQgPSBpICsgMTtcblx0XHRcdGlsZW4gPSBjb3VudCArIGxvb3BPZmZzZXQ7XG5cdFx0fVxuXG5cdFx0aWYgKGQwICYmIGQxKSB7XG5cdFx0XHRsZW4wID0gY3VydmUwLnB1c2gocDApO1xuXHRcdFx0bGVuMSA9IGN1cnZlMS5wdXNoKHAxKTtcblx0XHR9IGVsc2UgaWYgKGxlbjAgJiYgbGVuMSkge1xuXHRcdFx0aWYgKCFzcGFuKSB7XG5cdFx0XHRcdGRyYXdBcmVhKGN0eCwgY3VydmUwLCBjdXJ2ZTEsIGxlbjAsIGxlbjEpO1xuXHRcdFx0XHRsZW4wID0gbGVuMSA9IDA7XG5cdFx0XHRcdGN1cnZlMCA9IFtdO1xuXHRcdFx0XHRjdXJ2ZTEgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChkMCkge1xuXHRcdFx0XHRcdGN1cnZlMC5wdXNoKHAwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZDEpIHtcblx0XHRcdFx0XHRjdXJ2ZTEucHVzaChwMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRkcmF3QXJlYShjdHgsIGN1cnZlMCwgY3VydmUxLCBsZW4wLCBsZW4xKTtcblxuXHRjdHguY2xvc2VQYXRoKCk7XG5cdGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcblx0Y3R4LmZpbGwoKTtcbn1cblxudmFyIHBsdWdpbl9maWxsZXIgPSB7XG5cdGlkOiAnZmlsbGVyJyxcblxuXHRhZnRlckRhdGFzZXRzVXBkYXRlOiBmdW5jdGlvbihjaGFydCwgb3B0aW9ucykge1xuXHRcdHZhciBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG5cdFx0dmFyIHByb3BhZ2F0ZSA9IG9wdGlvbnMucHJvcGFnYXRlO1xuXHRcdHZhciBzb3VyY2VzID0gW107XG5cdFx0dmFyIG1ldGEsIGksIGVsLCBzb3VyY2U7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0ZWwgPSBtZXRhLmRhdGFzZXQ7XG5cdFx0XHRzb3VyY2UgPSBudWxsO1xuXG5cdFx0XHRpZiAoZWwgJiYgZWwuX21vZGVsICYmIGVsIGluc3RhbmNlb2YgZWxlbWVudHMuTGluZSkge1xuXHRcdFx0XHRzb3VyY2UgPSB7XG5cdFx0XHRcdFx0dmlzaWJsZTogY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcblx0XHRcdFx0XHRmaWxsOiBkZWNvZGVGaWxsKGVsLCBpLCBjb3VudCksXG5cdFx0XHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0XHRcdGVsOiBlbFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG5cdFx0XHRzb3VyY2VzLnB1c2goc291cmNlKTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0c291cmNlID0gc291cmNlc1tpXTtcblx0XHRcdGlmICghc291cmNlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzb3VyY2UuZmlsbCA9IHJlc29sdmVUYXJnZXQoc291cmNlcywgaSwgcHJvcGFnYXRlKTtcblx0XHRcdHNvdXJjZS5ib3VuZGFyeSA9IGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpO1xuXHRcdFx0c291cmNlLm1hcHBlciA9IGNyZWF0ZU1hcHBlcihzb3VyY2UpO1xuXHRcdH1cblx0fSxcblxuXHRiZWZvcmVEYXRhc2V0c0RyYXc6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIG1ldGFzZXRzID0gY2hhcnQuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcblx0XHR2YXIgY3R4ID0gY2hhcnQuY3R4O1xuXHRcdHZhciBtZXRhLCBpLCBlbCwgdmlldywgcG9pbnRzLCBtYXBwZXIsIGNvbG9yO1xuXG5cdFx0Zm9yIChpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuXG5cdFx0XHRpZiAoIW1ldGEgfHwgIW1ldGEudmlzaWJsZSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0ZWwgPSBtZXRhLmVsO1xuXHRcdFx0dmlldyA9IGVsLl92aWV3O1xuXHRcdFx0cG9pbnRzID0gZWwuX2NoaWxkcmVuIHx8IFtdO1xuXHRcdFx0bWFwcGVyID0gbWV0YS5tYXBwZXI7XG5cdFx0XHRjb2xvciA9IHZpZXcuYmFja2dyb3VuZENvbG9yIHx8IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuXHRcdFx0aWYgKG1hcHBlciAmJiBjb2xvciAmJiBwb2ludHMubGVuZ3RoKSB7XG5cdFx0XHRcdGhlbHBlcnMkMS5jYW52YXMuY2xpcEFyZWEoY3R4LCBjaGFydC5jaGFydEFyZWEpO1xuXHRcdFx0XHRkb0ZpbGwoY3R4LCBwb2ludHMsIG1hcHBlciwgdmlldywgY29sb3IsIGVsLl9sb29wKTtcblx0XHRcdFx0aGVscGVycyQxLmNhbnZhcy51bmNsaXBBcmVhKGN0eCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgZ2V0UnRsSGVscGVyJDEgPSBoZWxwZXJzJDEucnRsLmdldFJ0bEFkYXB0ZXI7XG52YXIgbm9vcCQxID0gaGVscGVycyQxLm5vb3A7XG52YXIgdmFsdWVPckRlZmF1bHQkZSA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGxlZ2VuZDoge1xuXHRcdGRpc3BsYXk6IHRydWUsXG5cdFx0cG9zaXRpb246ICd0b3AnLFxuXHRcdGFsaWduOiAnY2VudGVyJyxcblx0XHRmdWxsV2lkdGg6IHRydWUsXG5cdFx0cmV2ZXJzZTogZmFsc2UsXG5cdFx0d2VpZ2h0OiAxMDAwLFxuXG5cdFx0Ly8gYSBjYWxsYmFjayB0aGF0IHdpbGwgaGFuZGxlXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG5cdFx0XHR2YXIgY2kgPSB0aGlzLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBjaS5nZXREYXRhc2V0TWV0YShpbmRleCk7XG5cblx0XHRcdC8vIFNlZSBjb250cm9sbGVyLmlzRGF0YXNldFZpc2libGUgY29tbWVudFxuXHRcdFx0bWV0YS5oaWRkZW4gPSBtZXRhLmhpZGRlbiA9PT0gbnVsbCA/ICFjaS5kYXRhLmRhdGFzZXRzW2luZGV4XS5oaWRkZW4gOiBudWxsO1xuXG5cdFx0XHQvLyBXZSBoaWQgYSBkYXRhc2V0IC4uLiByZXJlbmRlciB0aGUgY2hhcnRcblx0XHRcdGNpLnVwZGF0ZSgpO1xuXHRcdH0sXG5cblx0XHRvbkhvdmVyOiBudWxsLFxuXHRcdG9uTGVhdmU6IG51bGwsXG5cblx0XHRsYWJlbHM6IHtcblx0XHRcdGJveFdpZHRoOiA0MCxcblx0XHRcdHBhZGRpbmc6IDEwLFxuXHRcdFx0Ly8gR2VuZXJhdGVzIGxhYmVscyBzaG93biBpbiB0aGUgbGVnZW5kXG5cdFx0XHQvLyBWYWxpZCBwcm9wZXJ0aWVzIHRvIHJldHVybjpcblx0XHRcdC8vIHRleHQgOiB0ZXh0IHRvIGRpc3BsYXlcblx0XHRcdC8vIGZpbGxTdHlsZSA6IGZpbGwgb2YgY29sb3VyZWQgYm94XG5cdFx0XHQvLyBzdHJva2VTdHlsZTogc3Ryb2tlIG9mIGNvbG91cmVkIGJveFxuXHRcdFx0Ly8gaGlkZGVuIDogaWYgdGhpcyBsZWdlbmQgaXRlbSByZWZlcnMgdG8gYSBoaWRkZW4gaXRlbVxuXHRcdFx0Ly8gbGluZUNhcCA6IGNhcCBzdHlsZSBmb3IgbGluZVxuXHRcdFx0Ly8gbGluZURhc2hcblx0XHRcdC8vIGxpbmVEYXNoT2Zmc2V0IDpcblx0XHRcdC8vIGxpbmVKb2luIDpcblx0XHRcdC8vIGxpbmVXaWR0aCA6XG5cdFx0XHRnZW5lcmF0ZUxhYmVsczogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHRcdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHRcdFx0dmFyIG9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZCB8fCB7fTtcblx0XHRcdFx0dmFyIHVzZVBvaW50U3R5bGUgPSBvcHRpb25zLmxhYmVscyAmJiBvcHRpb25zLmxhYmVscy51c2VQb2ludFN0eWxlO1xuXG5cdFx0XHRcdHJldHVybiBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKCkubWFwKGZ1bmN0aW9uKG1ldGEpIHtcblx0XHRcdFx0XHR2YXIgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodXNlUG9pbnRTdHlsZSA/IDAgOiB1bmRlZmluZWQpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLFxuXHRcdFx0XHRcdFx0ZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdFx0XHRoaWRkZW46ICFjaGFydC5pc0RhdGFzZXRWaXNpYmxlKG1ldGEuaW5kZXgpLFxuXHRcdFx0XHRcdFx0bGluZUNhcDogc3R5bGUuYm9yZGVyQ2FwU3R5bGUsXG5cdFx0XHRcdFx0XHRsaW5lRGFzaDogc3R5bGUuYm9yZGVyRGFzaCxcblx0XHRcdFx0XHRcdGxpbmVEYXNoT2Zmc2V0OiBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LFxuXHRcdFx0XHRcdFx0bGluZUpvaW46IHN0eWxlLmJvcmRlckpvaW5TdHlsZSxcblx0XHRcdFx0XHRcdGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG5cdFx0XHRcdFx0XHRzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdFx0XHRwb2ludFN0eWxlOiBzdHlsZS5wb2ludFN0eWxlLFxuXHRcdFx0XHRcdFx0cm90YXRpb246IHN0eWxlLnJvdGF0aW9uLFxuXG5cdFx0XHRcdFx0XHQvLyBCZWxvdyBpcyBleHRyYSBkYXRhIHVzZWQgZm9yIHRvZ2dsaW5nIHRoZSBkYXRhc2V0c1xuXHRcdFx0XHRcdFx0ZGF0YXNldEluZGV4OiBtZXRhLmluZGV4XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcblx0XHR2YXIgZGF0YXNldHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzO1xuXHRcdHZhciBpLCBpbGVuLCBsaXN0SXRlbSwgbGlzdEl0ZW1TcGFuO1xuXG5cdFx0bGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2hhcnQuaWQgKyAnLWxlZ2VuZCcpO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0bGlzdEl0ZW0gPSBsaXN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykpO1xuXHRcdFx0bGlzdEl0ZW1TcGFuID0gbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpKTtcblx0XHRcdGxpc3RJdGVtU3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhc2V0c1tpXS5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHRpZiAoZGF0YXNldHNbaV0ubGFiZWwpIHtcblx0XHRcdFx0bGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YXNldHNbaV0ubGFiZWwpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdC5vdXRlckhUTUw7XG5cdH1cbn0pO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGJveCB3aWR0aCBiYXNlZCBvbiB0aGUgdXNlUG9pbnRTdHlsZSBvcHRpb25cbiAqIEBwYXJhbSB7b2JqZWN0fSBsYWJlbG9wdHMgLSB0aGUgbGFiZWwgb3B0aW9ucyBvbiB0aGUgbGVnZW5kXG4gKiBAcGFyYW0ge251bWJlcn0gZm9udFNpemUgLSB0aGUgbGFiZWwgZm9udCBzaXplXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHdpZHRoIG9mIHRoZSBjb2xvciBib3ggYXJlYVxuICovXG5mdW5jdGlvbiBnZXRCb3hXaWR0aChsYWJlbE9wdHMsIGZvbnRTaXplKSB7XG5cdHJldHVybiBsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSAmJiBsYWJlbE9wdHMuYm94V2lkdGggPiBmb250U2l6ZSA/XG5cdFx0Zm9udFNpemUgOlxuXHRcdGxhYmVsT3B0cy5ib3hXaWR0aDtcbn1cblxuLyoqXG4gKiBJTVBPUlRBTlQ6IHRoaXMgY2xhc3MgaXMgZXhwb3NlZCBwdWJsaWNseSBhcyBDaGFydC5MZWdlbmQsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgcmVxdWlyZWQhXG4gKi9cbnZhciBMZWdlbmQgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbihjb25maWcpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGhlbHBlcnMkMS5leHRlbmQobWUsIGNvbmZpZyk7XG5cblx0XHQvLyBDb250YWlucyBoaXQgYm94ZXMgZm9yIGVhY2ggZGF0YXNldCAoaW4gZGF0YXNldCBvcmRlcilcblx0XHRtZS5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuXG5cdFx0LyoqXG4gXHRcdCAqIEBwcml2YXRlXG4gXHRcdCAqL1xuXHRcdG1lLl9ob3ZlcmVkSXRlbSA9IG51bGw7XG5cblx0XHQvLyBBcmUgd2UgaW4gZG91Z2hudXQgbW9kZSB3aGljaCBoYXMgYSBkaWZmZXJlbnQgZGF0YSB0eXBlXG5cdFx0bWUuZG91Z2hudXRNb2RlID0gZmFsc2U7XG5cdH0sXG5cblx0Ly8gVGhlc2UgbWV0aG9kcyBhcmUgb3JkZXJlZCBieSBsaWZlY3ljbGUuIFV0aWxpdGllcyB0aGVuIGZvbGxvdy5cblx0Ly8gQW55IGZ1bmN0aW9uIGRlZmluZWQgaGVyZSBpcyBpbmhlcml0ZWQgYnkgYWxsIGxlZ2VuZCB0eXBlcy5cblx0Ly8gQW55IGZ1bmN0aW9uIGNhbiBiZSBleHRlbmRlZCBieSB0aGUgbGVnZW5kIHR5cGVcblxuXHRiZWZvcmVVcGRhdGU6IG5vb3AkMSxcblx0dXBkYXRlOiBmdW5jdGlvbihtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdC8vIFVwZGF0ZSBMaWZlY3ljbGUgLSBQcm9iYWJseSBkb24ndCB3YW50IHRvIGV2ZXIgZXh0ZW5kIG9yIG92ZXJ3cml0ZSB0aGlzIGZ1bmN0aW9uIDspXG5cdFx0bWUuYmVmb3JlVXBkYXRlKCk7XG5cblx0XHQvLyBBYnNvcmIgdGhlIG1hc3RlciBtZWFzdXJlbWVudHNcblx0XHRtZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdG1lLm1heEhlaWdodCA9IG1heEhlaWdodDtcblx0XHRtZS5tYXJnaW5zID0gbWFyZ2lucztcblxuXHRcdC8vIERpbWVuc2lvbnNcblx0XHRtZS5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuc2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuXHRcdC8vIExhYmVsc1xuXHRcdG1lLmJlZm9yZUJ1aWxkTGFiZWxzKCk7XG5cdFx0bWUuYnVpbGRMYWJlbHMoKTtcblx0XHRtZS5hZnRlckJ1aWxkTGFiZWxzKCk7XG5cblx0XHQvLyBGaXRcblx0XHRtZS5iZWZvcmVGaXQoKTtcblx0XHRtZS5maXQoKTtcblx0XHRtZS5hZnRlckZpdCgpO1xuXHRcdC8vXG5cdFx0bWUuYWZ0ZXJVcGRhdGUoKTtcblxuXHRcdHJldHVybiBtZS5taW5TaXplO1xuXHR9LFxuXHRhZnRlclVwZGF0ZTogbm9vcCQxLFxuXG5cdC8vXG5cblx0YmVmb3JlU2V0RGltZW5zaW9uczogbm9vcCQxLFxuXHRzZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdC8vIFNldCB0aGUgdW5jb25zdHJhaW5lZCBkaW1lbnNpb24gYmVmb3JlIGxhYmVsIHJvdGF0aW9uXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0XHRtZS5sZWZ0ID0gMDtcblx0XHRcdG1lLnJpZ2h0ID0gbWUud2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblxuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS50b3AgPSAwO1xuXHRcdFx0bWUuYm90dG9tID0gbWUuaGVpZ2h0O1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IHBhZGRpbmdcblx0XHRtZS5wYWRkaW5nTGVmdCA9IDA7XG5cdFx0bWUucGFkZGluZ1RvcCA9IDA7XG5cdFx0bWUucGFkZGluZ1JpZ2h0ID0gMDtcblx0XHRtZS5wYWRkaW5nQm90dG9tID0gMDtcblxuXHRcdC8vIFJlc2V0IG1pblNpemVcblx0XHRtZS5taW5TaXplID0ge1xuXHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRoZWlnaHQ6IDBcblx0XHR9O1xuXHR9LFxuXHRhZnRlclNldERpbWVuc2lvbnM6IG5vb3AkMSxcblxuXHQvL1xuXG5cdGJlZm9yZUJ1aWxkTGFiZWxzOiBub29wJDEsXG5cdGJ1aWxkTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbE9wdHMgPSBtZS5vcHRpb25zLmxhYmVscyB8fCB7fTtcblx0XHR2YXIgbGVnZW5kSXRlbXMgPSBoZWxwZXJzJDEuY2FsbGJhY2sobGFiZWxPcHRzLmdlbmVyYXRlTGFiZWxzLCBbbWUuY2hhcnRdLCBtZSkgfHwgW107XG5cblx0XHRpZiAobGFiZWxPcHRzLmZpbHRlcikge1xuXHRcdFx0bGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gbGFiZWxPcHRzLmZpbHRlcihpdGVtLCBtZS5jaGFydC5kYXRhKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChtZS5vcHRpb25zLnJldmVyc2UpIHtcblx0XHRcdGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcblx0XHR9XG5cblx0XHRtZS5sZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zO1xuXHR9LFxuXHRhZnRlckJ1aWxkTGFiZWxzOiBub29wJDEsXG5cblx0Ly9cblxuXHRiZWZvcmVGaXQ6IG5vb3AkMSxcblx0Zml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgbGFiZWxPcHRzID0gb3B0cy5sYWJlbHM7XG5cdFx0dmFyIGRpc3BsYXkgPSBvcHRzLmRpc3BsYXk7XG5cblx0XHR2YXIgY3R4ID0gbWUuY3R4O1xuXG5cdFx0dmFyIGxhYmVsRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQobGFiZWxPcHRzKTtcblx0XHR2YXIgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcblxuXHRcdC8vIFJlc2V0IGhpdCBib3hlc1xuXHRcdHZhciBoaXRib3hlcyA9IG1lLmxlZ2VuZEhpdEJveGVzID0gW107XG5cblx0XHR2YXIgbWluU2l6ZSA9IG1lLm1pblNpemU7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IG1lLm1heFdpZHRoOyAvLyBmaWxsIGFsbCB0aGUgd2lkdGhcblx0XHRcdG1pblNpemUuaGVpZ2h0ID0gZGlzcGxheSA/IDEwIDogMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IGRpc3BsYXkgPyAxMCA6IDA7XG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IG1lLm1heEhlaWdodDsgLy8gZmlsbCBhbGwgdGhlIGhlaWdodFxuXHRcdH1cblxuXHRcdC8vIEluY3JlYXNlIHNpemVzIGhlcmVcblx0XHRpZiAoIWRpc3BsYXkpIHtcblx0XHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aCA9IG1lLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0ID0gMDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuXG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0Ly8gTGFiZWxzXG5cblx0XHRcdC8vIFdpZHRoIG9mIGVhY2ggbGluZSBvZiBsZWdlbmQgYm94ZXMuIExhYmVscyB3cmFwIG9udG8gbXVsdGlwbGUgbGluZXMgd2hlbiB0aGVyZSBhcmUgdG9vIG1hbnkgdG8gZml0IG9uIG9uZVxuXHRcdFx0dmFyIGxpbmVXaWR0aHMgPSBtZS5saW5lV2lkdGhzID0gWzBdO1xuXHRcdFx0dmFyIHRvdGFsSGVpZ2h0ID0gMDtcblxuXHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdsZWZ0Jztcblx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuXHRcdFx0aGVscGVycyQxLmVhY2gobWUubGVnZW5kSXRlbXMsIGZ1bmN0aW9uKGxlZ2VuZEl0ZW0sIGkpIHtcblx0XHRcdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0XHRcdHZhciB3aWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcblxuXHRcdFx0XHRpZiAoaSA9PT0gMCB8fCBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKyB3aWR0aCArIDIgKiBsYWJlbE9wdHMucGFkZGluZyA+IG1pblNpemUud2lkdGgpIHtcblx0XHRcdFx0XHR0b3RhbEhlaWdodCArPSBmb250U2l6ZSArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0XHRcdGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAoaSA+IDAgPyAwIDogMSldID0gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN0b3JlIHRoZSBoaXRib3ggd2lkdGggYW5kIGhlaWdodCBoZXJlLiBGaW5hbCBwb3NpdGlvbiB3aWxsIGJlIHVwZGF0ZWQgaW4gYGRyYXdgXG5cdFx0XHRcdGhpdGJveGVzW2ldID0ge1xuXHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IGZvbnRTaXplXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IHdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWluU2l6ZS5oZWlnaHQgKz0gdG90YWxIZWlnaHQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHZQYWRkaW5nID0gbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHR2YXIgY29sdW1uV2lkdGhzID0gbWUuY29sdW1uV2lkdGhzID0gW107XG5cdFx0XHR2YXIgY29sdW1uSGVpZ2h0cyA9IG1lLmNvbHVtbkhlaWdodHMgPSBbXTtcblx0XHRcdHZhciB0b3RhbFdpZHRoID0gbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHR2YXIgY3VycmVudENvbFdpZHRoID0gMDtcblx0XHRcdHZhciBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcblxuXHRcdFx0aGVscGVycyQxLmVhY2gobWUubGVnZW5kSXRlbXMsIGZ1bmN0aW9uKGxlZ2VuZEl0ZW0sIGkpIHtcblx0XHRcdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0XHRcdHZhciBpdGVtV2lkdGggPSBib3hXaWR0aCArIChmb250U2l6ZSAvIDIpICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG5cblx0XHRcdFx0Ly8gSWYgdG9vIHRhbGwsIGdvIHRvIG5ldyBjb2x1bW5cblx0XHRcdFx0aWYgKGkgPiAwICYmIGN1cnJlbnRDb2xIZWlnaHQgKyBmb250U2l6ZSArIDIgKiB2UGFkZGluZyA+IG1pblNpemUuaGVpZ2h0KSB7XG5cdFx0XHRcdFx0dG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGggKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0XHRjb2x1bW5XaWR0aHMucHVzaChjdXJyZW50Q29sV2lkdGgpOyAvLyBwcmV2aW91cyBjb2x1bW4gd2lkdGhcblx0XHRcdFx0XHRjb2x1bW5IZWlnaHRzLnB1c2goY3VycmVudENvbEhlaWdodCk7XG5cdFx0XHRcdFx0Y3VycmVudENvbFdpZHRoID0gMDtcblx0XHRcdFx0XHRjdXJyZW50Q29sSGVpZ2h0ID0gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBtYXggd2lkdGhcblx0XHRcdFx0Y3VycmVudENvbFdpZHRoID0gTWF0aC5tYXgoY3VycmVudENvbFdpZHRoLCBpdGVtV2lkdGgpO1xuXHRcdFx0XHRjdXJyZW50Q29sSGVpZ2h0ICs9IGZvbnRTaXplICsgdlBhZGRpbmc7XG5cblx0XHRcdFx0Ly8gU3RvcmUgdGhlIGhpdGJveCB3aWR0aCBhbmQgaGVpZ2h0IGhlcmUuIEZpbmFsIHBvc2l0aW9uIHdpbGwgYmUgdXBkYXRlZCBpbiBgZHJhd2Bcblx0XHRcdFx0aGl0Ym94ZXNbaV0gPSB7XG5cdFx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0d2lkdGg6IGl0ZW1XaWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IGZvbnRTaXplXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblxuXHRcdFx0dG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGg7XG5cdFx0XHRjb2x1bW5XaWR0aHMucHVzaChjdXJyZW50Q29sV2lkdGgpO1xuXHRcdFx0Y29sdW1uSGVpZ2h0cy5wdXNoKGN1cnJlbnRDb2xIZWlnaHQpO1xuXHRcdFx0bWluU2l6ZS53aWR0aCArPSB0b3RhbFdpZHRoO1xuXHRcdH1cblxuXHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aDtcblx0XHRtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcblx0fSxcblx0YWZ0ZXJGaXQ6IG5vb3AkMSxcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG5cdH0sXG5cblx0Ly8gQWN0dWFsbHkgZHJhdyB0aGUgbGVnZW5kIG9uIHRoZSBjYW52YXNcblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGxhYmVsT3B0cyA9IG9wdHMubGFiZWxzO1xuXHRcdHZhciBnbG9iYWxEZWZhdWx0cyA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciBkZWZhdWx0Q29sb3IgPSBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Q29sb3I7XG5cdFx0dmFyIGxpbmVEZWZhdWx0ID0gZ2xvYmFsRGVmYXVsdHMuZWxlbWVudHMubGluZTtcblx0XHR2YXIgbGVnZW5kSGVpZ2h0ID0gbWUuaGVpZ2h0O1xuXHRcdHZhciBjb2x1bW5IZWlnaHRzID0gbWUuY29sdW1uSGVpZ2h0cztcblx0XHR2YXIgbGVnZW5kV2lkdGggPSBtZS53aWR0aDtcblx0XHR2YXIgbGluZVdpZHRocyA9IG1lLmxpbmVXaWR0aHM7XG5cblx0XHRpZiAoIW9wdHMuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBydGxIZWxwZXIgPSBnZXRSdGxIZWxwZXIkMShvcHRzLnJ0bCwgbWUubGVmdCwgbWUubWluU2l6ZS53aWR0aCk7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgZm9udENvbG9yID0gdmFsdWVPckRlZmF1bHQkZShsYWJlbE9wdHMuZm9udENvbG9yLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHR2YXIgbGFiZWxGb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChsYWJlbE9wdHMpO1xuXHRcdHZhciBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuXHRcdHZhciBjdXJzb3I7XG5cblx0XHQvLyBDYW52YXMgc2V0dXBcblx0XHRjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbignbGVmdCcpO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRjdHgubGluZVdpZHRoID0gMC41O1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IGZvbnRDb2xvcjsgLy8gZm9yIHN0cmlrZXRocm91Z2ggZWZmZWN0XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IGZvbnRDb2xvcjsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0Y3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuXG5cdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0dmFyIGhpdGJveGVzID0gbWUubGVnZW5kSGl0Qm94ZXM7XG5cblx0XHQvLyBjdXJyZW50IHBvc2l0aW9uXG5cdFx0dmFyIGRyYXdMZWdlbmRCb3ggPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG5cdFx0XHRpZiAoaXNOYU4oYm94V2lkdGgpIHx8IGJveFdpZHRoIDw9IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGN0eCBmb3IgdGhlIGJveFxuXHRcdFx0Y3R4LnNhdmUoKTtcblxuXHRcdFx0dmFyIGxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JGUobGVnZW5kSXRlbS5saW5lV2lkdGgsIGxpbmVEZWZhdWx0LmJvcmRlcldpZHRoKTtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuXHRcdFx0Y3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0ubGluZUNhcCwgbGluZURlZmF1bHQuYm9yZGVyQ2FwU3R5bGUpO1xuXHRcdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQkZShsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCBsaW5lRGVmYXVsdC5ib3JkZXJEYXNoT2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0JGUobGVnZW5kSXRlbS5saW5lSm9pbiwgbGluZURlZmF1bHQuYm9yZGVySm9pblN0eWxlKTtcblx0XHRcdGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG5cblx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0Ly8gSUUgOSBhbmQgMTAgZG8gbm90IHN1cHBvcnQgbGluZSBkYXNoXG5cdFx0XHRcdGN0eC5zZXRMaW5lRGFzaCh2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0ubGluZURhc2gsIGxpbmVEZWZhdWx0LmJvcmRlckRhc2gpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGxhYmVsT3B0cyAmJiBsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuXHRcdFx0XHQvLyBSZWNhbGN1bGF0ZSB4IGFuZCB5IGZvciBkcmF3UG9pbnQoKSBiZWNhdXNlIGl0cyBleHBlY3Rpbmdcblx0XHRcdFx0Ly8geCBhbmQgeSB0byBiZSBjZW50ZXIgb2YgZmlndXJlIChpbnN0ZWFkIG9mIHRvcCBsZWZ0KVxuXHRcdFx0XHR2YXIgcmFkaXVzID0gYm94V2lkdGggKiBNYXRoLlNRUlQyIC8gMjtcblx0XHRcdFx0dmFyIGNlbnRlclggPSBydGxIZWxwZXIueFBsdXMoeCwgYm94V2lkdGggLyAyKTtcblx0XHRcdFx0dmFyIGNlbnRlclkgPSB5ICsgZm9udFNpemUgLyAyO1xuXG5cdFx0XHRcdC8vIERyYXcgcG9pbnRTdHlsZSBhcyBsZWdlbmQgc3ltYm9sXG5cdFx0XHRcdGhlbHBlcnMkMS5jYW52YXMuZHJhd1BvaW50KGN0eCwgbGVnZW5kSXRlbS5wb2ludFN0eWxlLCByYWRpdXMsIGNlbnRlclgsIGNlbnRlclksIGxlZ2VuZEl0ZW0ucm90YXRpb24pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRHJhdyBib3ggYXMgbGVnZW5kIHN5bWJvbFxuXHRcdFx0XHRjdHguZmlsbFJlY3QocnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpLCB5LCBib3hXaWR0aCwgZm9udFNpemUpO1xuXHRcdFx0XHRpZiAobGluZVdpZHRoICE9PSAwKSB7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVJlY3QocnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpLCB5LCBib3hXaWR0aCwgZm9udFNpemUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0fTtcblxuXHRcdHZhciBmaWxsVGV4dCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0sIHRleHRXaWR0aCkge1xuXHRcdFx0dmFyIGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcblx0XHRcdHZhciB4TGVmdCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCArIGhhbGZGb250U2l6ZSk7XG5cdFx0XHR2YXIgeU1pZGRsZSA9IHkgKyBoYWxmRm9udFNpemU7XG5cblx0XHRcdGN0eC5maWxsVGV4dChsZWdlbmRJdGVtLnRleHQsIHhMZWZ0LCB5TWlkZGxlKTtcblxuXHRcdFx0aWYgKGxlZ2VuZEl0ZW0uaGlkZGVuKSB7XG5cdFx0XHRcdC8vIFN0cmlrZXRocm91Z2ggdGhlIHRleHQgaWYgaGlkZGVuXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDI7XG5cdFx0XHRcdGN0eC5tb3ZlVG8oeExlZnQsIHlNaWRkbGUpO1xuXHRcdFx0XHRjdHgubGluZVRvKHJ0bEhlbHBlci54UGx1cyh4TGVmdCwgdGV4dFdpZHRoKSwgeU1pZGRsZSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGFsaWdubWVudE9mZnNldCA9IGZ1bmN0aW9uKGRpbWVuc2lvbiwgYmxvY2tTaXplKSB7XG5cdFx0XHRzd2l0Y2ggKG9wdHMuYWxpZ24pIHtcblx0XHRcdGNhc2UgJ3N0YXJ0Jzpcblx0XHRcdFx0cmV0dXJuIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0Y2FzZSAnZW5kJzpcblx0XHRcdFx0cmV0dXJuIGRpbWVuc2lvbiAtIGJsb2NrU2l6ZTtcblx0XHRcdGRlZmF1bHQ6IC8vIGNlbnRlclxuXHRcdFx0XHRyZXR1cm4gKGRpbWVuc2lvbiAtIGJsb2NrU2l6ZSArIGxhYmVsT3B0cy5wYWRkaW5nKSAvIDI7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIEhvcml6b250YWxcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0Y3Vyc29yID0ge1xuXHRcdFx0XHR4OiBtZS5sZWZ0ICsgYWxpZ25tZW50T2Zmc2V0KGxlZ2VuZFdpZHRoLCBsaW5lV2lkdGhzWzBdKSxcblx0XHRcdFx0eTogbWUudG9wICsgbGFiZWxPcHRzLnBhZGRpbmcsXG5cdFx0XHRcdGxpbmU6IDBcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnNvciA9IHtcblx0XHRcdFx0eDogbWUubGVmdCArIGxhYmVsT3B0cy5wYWRkaW5nLFxuXHRcdFx0XHR5OiBtZS50b3AgKyBhbGlnbm1lbnRPZmZzZXQobGVnZW5kSGVpZ2h0LCBjb2x1bW5IZWlnaHRzWzBdKSxcblx0XHRcdFx0bGluZTogMFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRoZWxwZXJzJDEucnRsLm92ZXJyaWRlVGV4dERpcmVjdGlvbihtZS5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG5cblx0XHR2YXIgaXRlbUhlaWdodCA9IGZvbnRTaXplICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0aGVscGVycyQxLmVhY2gobWUubGVnZW5kSXRlbXMsIGZ1bmN0aW9uKGxlZ2VuZEl0ZW0sIGkpIHtcblx0XHRcdHZhciB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcblx0XHRcdHZhciB3aWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyB0ZXh0V2lkdGg7XG5cdFx0XHR2YXIgeCA9IGN1cnNvci54O1xuXHRcdFx0dmFyIHkgPSBjdXJzb3IueTtcblxuXHRcdFx0cnRsSGVscGVyLnNldFdpZHRoKG1lLm1pblNpemUud2lkdGgpO1xuXG5cdFx0XHQvLyBVc2UgKG1lLmxlZnQgKyBtZS5taW5TaXplLndpZHRoKSBhbmQgKG1lLnRvcCArIG1lLm1pblNpemUuaGVpZ2h0KVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiBtZS5yaWdodCBhbmQgbWUuYm90dG9tIGJlY2F1c2UgbWUud2lkdGggYW5kIG1lLmhlaWdodFxuXHRcdFx0Ly8gbWF5IGhhdmUgYmVlbiBjaGFuZ2VkIHNpbmNlIG1lLm1pblNpemUgd2FzIGNhbGN1bGF0ZWRcblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0aWYgKGkgPiAwICYmIHggKyB3aWR0aCArIGxhYmVsT3B0cy5wYWRkaW5nID4gbWUubGVmdCArIG1lLm1pblNpemUud2lkdGgpIHtcblx0XHRcdFx0XHR5ID0gY3Vyc29yLnkgKz0gaXRlbUhlaWdodDtcblx0XHRcdFx0XHRjdXJzb3IubGluZSsrO1xuXHRcdFx0XHRcdHggPSBjdXJzb3IueCA9IG1lLmxlZnQgKyBhbGlnbm1lbnRPZmZzZXQobGVnZW5kV2lkdGgsIGxpbmVXaWR0aHNbY3Vyc29yLmxpbmVdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChpID4gMCAmJiB5ICsgaXRlbUhlaWdodCA+IG1lLnRvcCArIG1lLm1pblNpemUuaGVpZ2h0KSB7XG5cdFx0XHRcdHggPSBjdXJzb3IueCA9IHggKyBtZS5jb2x1bW5XaWR0aHNbY3Vyc29yLmxpbmVdICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHRcdGN1cnNvci5saW5lKys7XG5cdFx0XHRcdHkgPSBjdXJzb3IueSA9IG1lLnRvcCArIGFsaWdubWVudE9mZnNldChsZWdlbmRIZWlnaHQsIGNvbHVtbkhlaWdodHNbY3Vyc29yLmxpbmVdKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlYWxYID0gcnRsSGVscGVyLngoeCk7XG5cblx0XHRcdGRyYXdMZWdlbmRCb3gocmVhbFgsIHksIGxlZ2VuZEl0ZW0pO1xuXG5cdFx0XHRoaXRib3hlc1tpXS5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocmVhbFgsIGhpdGJveGVzW2ldLndpZHRoKTtcblx0XHRcdGhpdGJveGVzW2ldLnRvcCA9IHk7XG5cblx0XHRcdC8vIEZpbGwgdGhlIGFjdHVhbCBsYWJlbFxuXHRcdFx0ZmlsbFRleHQocmVhbFgsIHksIGxlZ2VuZEl0ZW0sIHRleHRXaWR0aCk7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0Y3Vyc29yLnggKz0gd2lkdGggKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnNvci55ICs9IGl0ZW1IZWlnaHQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRoZWxwZXJzJDEucnRsLnJlc3RvcmVUZXh0RGlyZWN0aW9uKG1lLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRMZWdlbmRJdGVtQXQ6IGZ1bmN0aW9uKHgsIHkpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBpLCBoaXRCb3gsIGxoO1xuXG5cdFx0aWYgKHggPj0gbWUubGVmdCAmJiB4IDw9IG1lLnJpZ2h0ICYmIHkgPj0gbWUudG9wICYmIHkgPD0gbWUuYm90dG9tKSB7XG5cdFx0XHQvLyBTZWUgaWYgd2UgYXJlIHRvdWNoaW5nIG9uZSBvZiB0aGUgZGF0YXNldCBib3hlc1xuXHRcdFx0bGggPSBtZS5sZWdlbmRIaXRCb3hlcztcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsaC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRoaXRCb3ggPSBsaFtpXTtcblxuXHRcdFx0XHRpZiAoeCA+PSBoaXRCb3gubGVmdCAmJiB4IDw9IGhpdEJveC5sZWZ0ICsgaGl0Qm94LndpZHRoICYmIHkgPj0gaGl0Qm94LnRvcCAmJiB5IDw9IGhpdEJveC50b3AgKyBoaXRCb3guaGVpZ2h0KSB7XG5cdFx0XHRcdFx0Ly8gVG91Y2hpbmcgYW4gZWxlbWVudFxuXHRcdFx0XHRcdHJldHVybiBtZS5sZWdlbmRJdGVtc1tpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgYW4gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtJRXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGhhbmRsZVxuXHQgKi9cblx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdHlwZSA9IGUudHlwZSA9PT0gJ21vdXNldXAnID8gJ2NsaWNrJyA6IGUudHlwZTtcblx0XHR2YXIgaG92ZXJlZEl0ZW07XG5cblx0XHRpZiAodHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcblx0XHRcdGlmICghb3B0cy5vbkhvdmVyICYmICFvcHRzLm9uTGVhdmUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0aWYgKCFvcHRzLm9uQ2xpY2spIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2hhcnQgZXZlbnQgYWxyZWFkeSBoYXMgcmVsYXRpdmUgcG9zaXRpb24gaW4gaXRcblx0XHRob3ZlcmVkSXRlbSA9IG1lLl9nZXRMZWdlbmRJdGVtQXQoZS54LCBlLnkpO1xuXG5cdFx0aWYgKHR5cGUgPT09ICdjbGljaycpIHtcblx0XHRcdGlmIChob3ZlcmVkSXRlbSAmJiBvcHRzLm9uQ2xpY2spIHtcblx0XHRcdFx0Ly8gdXNlIGUubmF0aXZlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRvcHRzLm9uQ2xpY2suY2FsbChtZSwgZS5uYXRpdmUsIGhvdmVyZWRJdGVtKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG9wdHMub25MZWF2ZSAmJiBob3ZlcmVkSXRlbSAhPT0gbWUuX2hvdmVyZWRJdGVtKSB7XG5cdFx0XHRcdGlmIChtZS5faG92ZXJlZEl0ZW0pIHtcblx0XHRcdFx0XHRvcHRzLm9uTGVhdmUuY2FsbChtZSwgZS5uYXRpdmUsIG1lLl9ob3ZlcmVkSXRlbSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWUuX2hvdmVyZWRJdGVtID0gaG92ZXJlZEl0ZW07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRzLm9uSG92ZXIgJiYgaG92ZXJlZEl0ZW0pIHtcblx0XHRcdFx0Ly8gdXNlIGUubmF0aXZlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRvcHRzLm9uSG92ZXIuY2FsbChtZSwgZS5uYXRpdmUsIGhvdmVyZWRJdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdMZWdlbmRBbmRBdHRhY2goY2hhcnQsIGxlZ2VuZE9wdHMpIHtcblx0dmFyIGxlZ2VuZCA9IG5ldyBMZWdlbmQoe1xuXHRcdGN0eDogY2hhcnQuY3R4LFxuXHRcdG9wdGlvbnM6IGxlZ2VuZE9wdHMsXG5cdFx0Y2hhcnQ6IGNoYXJ0XG5cdH0pO1xuXG5cdGNvcmVfbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgbGVnZW5kT3B0cyk7XG5cdGNvcmVfbGF5b3V0cy5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG5cdGNoYXJ0LmxlZ2VuZCA9IGxlZ2VuZDtcbn1cblxudmFyIHBsdWdpbl9sZWdlbmQgPSB7XG5cdGlkOiAnbGVnZW5kJyxcblxuXHQvKipcblx0ICogQmFja3dhcmQgY29tcGF0aWJpbGl0eTogc2luY2UgMi4xLjUsIHRoZSBsZWdlbmQgaXMgcmVnaXN0ZXJlZCBhcyBhIHBsdWdpbiwgbWFraW5nXG5cdCAqIENoYXJ0LkxlZ2VuZCBvYnNvbGV0ZS4gVG8gYXZvaWQgYSBicmVha2luZyBjaGFuZ2UsIHdlIGV4cG9ydCB0aGUgTGVnZW5kIGFzIHBhcnQgb2Zcblx0ICogdGhlIHBsdWdpbiwgd2hpY2ggb25lIHdpbGwgYmUgcmUtZXhwb3NlZCBpbiB0aGUgY2hhcnQuanMgZmlsZS5cblx0ICogaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC8yNjQwXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZWxlbWVudDogTGVnZW5kLFxuXG5cdGJlZm9yZUluaXQ6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGxlZ2VuZE9wdHMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZDtcblxuXHRcdGlmIChsZWdlbmRPcHRzKSB7XG5cdFx0XHRjcmVhdGVOZXdMZWdlbmRBbmRBdHRhY2goY2hhcnQsIGxlZ2VuZE9wdHMpO1xuXHRcdH1cblx0fSxcblxuXHRiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGxlZ2VuZE9wdHMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZDtcblx0XHR2YXIgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuXG5cdFx0aWYgKGxlZ2VuZE9wdHMpIHtcblx0XHRcdGhlbHBlcnMkMS5tZXJnZUlmKGxlZ2VuZE9wdHMsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmxlZ2VuZCk7XG5cblx0XHRcdGlmIChsZWdlbmQpIHtcblx0XHRcdFx0Y29yZV9sYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBsZWdlbmRPcHRzKTtcblx0XHRcdFx0bGVnZW5kLm9wdGlvbnMgPSBsZWdlbmRPcHRzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGxlZ2VuZCkge1xuXHRcdFx0Y29yZV9sYXlvdXRzLnJlbW92ZUJveChjaGFydCwgbGVnZW5kKTtcblx0XHRcdGRlbGV0ZSBjaGFydC5sZWdlbmQ7XG5cdFx0fVxuXHR9LFxuXG5cdGFmdGVyRXZlbnQ6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG5cdFx0dmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcblx0XHRpZiAobGVnZW5kKSB7XG5cdFx0XHRsZWdlbmQuaGFuZGxlRXZlbnQoZSk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgbm9vcCQyID0gaGVscGVycyQxLm5vb3A7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHR0aXRsZToge1xuXHRcdGRpc3BsYXk6IGZhbHNlLFxuXHRcdGZvbnRTdHlsZTogJ2JvbGQnLFxuXHRcdGZ1bGxXaWR0aDogdHJ1ZSxcblx0XHRwYWRkaW5nOiAxMCxcblx0XHRwb3NpdGlvbjogJ3RvcCcsXG5cdFx0dGV4dDogJycsXG5cdFx0d2VpZ2h0OiAyMDAwICAgICAgICAgLy8gYnkgZGVmYXVsdCBncmVhdGVyIHRoYW4gbGVnZW5kICgxMDAwKSB0byBiZSBhYm92ZVxuXHR9XG59KTtcblxuLyoqXG4gKiBJTVBPUlRBTlQ6IHRoaXMgY2xhc3MgaXMgZXhwb3NlZCBwdWJsaWNseSBhcyBDaGFydC5MZWdlbmQsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgcmVxdWlyZWQhXG4gKi9cbnZhciBUaXRsZSA9IGNvcmVfZWxlbWVudC5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbihjb25maWcpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGhlbHBlcnMkMS5leHRlbmQobWUsIGNvbmZpZyk7XG5cblx0XHQvLyBDb250YWlucyBoaXQgYm94ZXMgZm9yIGVhY2ggZGF0YXNldCAoaW4gZGF0YXNldCBvcmRlcilcblx0XHRtZS5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuXHR9LFxuXG5cdC8vIFRoZXNlIG1ldGhvZHMgYXJlIG9yZGVyZWQgYnkgbGlmZWN5Y2xlLiBVdGlsaXRpZXMgdGhlbiBmb2xsb3cuXG5cblx0YmVmb3JlVXBkYXRlOiBub29wJDIsXG5cdHVwZGF0ZTogZnVuY3Rpb24obWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0bWUubWFyZ2lucyA9IG1hcmdpbnM7XG5cblx0XHQvLyBEaW1lbnNpb25zXG5cdFx0bWUuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLnNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5hZnRlclNldERpbWVuc2lvbnMoKTtcblx0XHQvLyBMYWJlbHNcblx0XHRtZS5iZWZvcmVCdWlsZExhYmVscygpO1xuXHRcdG1lLmJ1aWxkTGFiZWxzKCk7XG5cdFx0bWUuYWZ0ZXJCdWlsZExhYmVscygpO1xuXG5cdFx0Ly8gRml0XG5cdFx0bWUuYmVmb3JlRml0KCk7XG5cdFx0bWUuZml0KCk7XG5cdFx0bWUuYWZ0ZXJGaXQoKTtcblx0XHQvL1xuXHRcdG1lLmFmdGVyVXBkYXRlKCk7XG5cblx0XHRyZXR1cm4gbWUubWluU2l6ZTtcblxuXHR9LFxuXHRhZnRlclVwZGF0ZTogbm9vcCQyLFxuXG5cdC8vXG5cblx0YmVmb3JlU2V0RGltZW5zaW9uczogbm9vcCQyLFxuXHRzZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdC8vIFNldCB0aGUgdW5jb25zdHJhaW5lZCBkaW1lbnNpb24gYmVmb3JlIGxhYmVsIHJvdGF0aW9uXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0XHRtZS5sZWZ0ID0gMDtcblx0XHRcdG1lLnJpZ2h0ID0gbWUud2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblxuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS50b3AgPSAwO1xuXHRcdFx0bWUuYm90dG9tID0gbWUuaGVpZ2h0O1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IHBhZGRpbmdcblx0XHRtZS5wYWRkaW5nTGVmdCA9IDA7XG5cdFx0bWUucGFkZGluZ1RvcCA9IDA7XG5cdFx0bWUucGFkZGluZ1JpZ2h0ID0gMDtcblx0XHRtZS5wYWRkaW5nQm90dG9tID0gMDtcblxuXHRcdC8vIFJlc2V0IG1pblNpemVcblx0XHRtZS5taW5TaXplID0ge1xuXHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRoZWlnaHQ6IDBcblx0XHR9O1xuXHR9LFxuXHRhZnRlclNldERpbWVuc2lvbnM6IG5vb3AkMixcblxuXHQvL1xuXG5cdGJlZm9yZUJ1aWxkTGFiZWxzOiBub29wJDIsXG5cdGJ1aWxkTGFiZWxzOiBub29wJDIsXG5cdGFmdGVyQnVpbGRMYWJlbHM6IG5vb3AkMixcblxuXHQvL1xuXG5cdGJlZm9yZUZpdDogbm9vcCQyLFxuXHRmaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBtaW5TaXplID0gbWUubWluU2l6ZSA9IHt9O1xuXHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHR2YXIgbGluZUNvdW50LCB0ZXh0U2l6ZTtcblxuXHRcdGlmICghb3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRtZS53aWR0aCA9IG1pblNpemUud2lkdGggPSBtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodCA9IDA7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bGluZUNvdW50ID0gaGVscGVycyQxLmlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuXHRcdHRleHRTaXplID0gbGluZUNvdW50ICogaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChvcHRzKS5saW5lSGVpZ2h0ICsgb3B0cy5wYWRkaW5nICogMjtcblxuXHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aCA9IGlzSG9yaXpvbnRhbCA/IG1lLm1heFdpZHRoIDogdGV4dFNpemU7XG5cdFx0bWUuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQgPSBpc0hvcml6b250YWwgPyB0ZXh0U2l6ZSA6IG1lLm1heEhlaWdodDtcblx0fSxcblx0YWZ0ZXJGaXQ6IG5vb3AkMixcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG5cdFx0cmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcblx0fSxcblxuXHQvLyBBY3R1YWxseSBkcmF3IHRoZSB0aXRsZSBibG9jayBvbiB0aGUgY2FudmFzXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cblx0XHRpZiAoIW9wdHMuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBmb250T3B0cyA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQob3B0cyk7XG5cdFx0dmFyIGxpbmVIZWlnaHQgPSBmb250T3B0cy5saW5lSGVpZ2h0O1xuXHRcdHZhciBvZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMiArIG9wdHMucGFkZGluZztcblx0XHR2YXIgcm90YXRpb24gPSAwO1xuXHRcdHZhciB0b3AgPSBtZS50b3A7XG5cdFx0dmFyIGxlZnQgPSBtZS5sZWZ0O1xuXHRcdHZhciBib3R0b20gPSBtZS5ib3R0b207XG5cdFx0dmFyIHJpZ2h0ID0gbWUucmlnaHQ7XG5cdFx0dmFyIG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcblxuXHRcdGN0eC5maWxsU3R5bGUgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQob3B0cy5mb250Q29sb3IsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250Q29sb3IpOyAvLyByZW5kZXIgaW4gY29ycmVjdCBjb2xvdXJcblx0XHRjdHguZm9udCA9IGZvbnRPcHRzLnN0cmluZztcblxuXHRcdC8vIEhvcml6b250YWxcblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHRpdGxlWCA9IGxlZnQgKyAoKHJpZ2h0IC0gbGVmdCkgLyAyKTsgLy8gbWlkcG9pbnQgb2YgdGhlIHdpZHRoXG5cdFx0XHR0aXRsZVkgPSB0b3AgKyBvZmZzZXQ7XG5cdFx0XHRtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGl0bGVYID0gb3B0cy5wb3NpdGlvbiA9PT0gJ2xlZnQnID8gbGVmdCArIG9mZnNldCA6IHJpZ2h0IC0gb2Zmc2V0O1xuXHRcdFx0dGl0bGVZID0gdG9wICsgKChib3R0b20gLSB0b3ApIC8gMik7XG5cdFx0XHRtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcblx0XHRcdHJvdGF0aW9uID0gTWF0aC5QSSAqIChvcHRzLnBvc2l0aW9uID09PSAnbGVmdCcgPyAtMC41IDogMC41KTtcblx0XHR9XG5cblx0XHRjdHguc2F2ZSgpO1xuXHRcdGN0eC50cmFuc2xhdGUodGl0bGVYLCB0aXRsZVkpO1xuXHRcdGN0eC5yb3RhdGUocm90YXRpb24pO1xuXHRcdGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0XHR2YXIgdGV4dCA9IG9wdHMudGV4dDtcblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkodGV4dCkpIHtcblx0XHRcdHZhciB5ID0gMDtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRjdHguZmlsbFRleHQodGV4dFtpXSwgMCwgeSwgbWF4V2lkdGgpO1xuXHRcdFx0XHR5ICs9IGxpbmVIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN0eC5maWxsVGV4dCh0ZXh0LCAwLCAwLCBtYXhXaWR0aCk7XG5cdFx0fVxuXG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cykge1xuXHR2YXIgdGl0bGUgPSBuZXcgVGl0bGUoe1xuXHRcdGN0eDogY2hhcnQuY3R4LFxuXHRcdG9wdGlvbnM6IHRpdGxlT3B0cyxcblx0XHRjaGFydDogY2hhcnRcblx0fSk7XG5cblx0Y29yZV9sYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIHRpdGxlT3B0cyk7XG5cdGNvcmVfbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcblx0Y2hhcnQudGl0bGVCbG9jayA9IHRpdGxlO1xufVxuXG52YXIgcGx1Z2luX3RpdGxlID0ge1xuXHRpZDogJ3RpdGxlJyxcblxuXHQvKipcblx0ICogQmFja3dhcmQgY29tcGF0aWJpbGl0eTogc2luY2UgMi4xLjUsIHRoZSB0aXRsZSBpcyByZWdpc3RlcmVkIGFzIGEgcGx1Z2luLCBtYWtpbmdcblx0ICogQ2hhcnQuVGl0bGUgb2Jzb2xldGUuIFRvIGF2b2lkIGEgYnJlYWtpbmcgY2hhbmdlLCB3ZSBleHBvcnQgdGhlIFRpdGxlIGFzIHBhcnQgb2Zcblx0ICogdGhlIHBsdWdpbiwgd2hpY2ggb25lIHdpbGwgYmUgcmUtZXhwb3NlZCBpbiB0aGUgY2hhcnQuanMgZmlsZS5cblx0ICogaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC8yNjQwXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZWxlbWVudDogVGl0bGUsXG5cblx0YmVmb3JlSW5pdDogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgdGl0bGVPcHRzID0gY2hhcnQub3B0aW9ucy50aXRsZTtcblxuXHRcdGlmICh0aXRsZU9wdHMpIHtcblx0XHRcdGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cyk7XG5cdFx0fVxuXHR9LFxuXG5cdGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgdGl0bGVPcHRzID0gY2hhcnQub3B0aW9ucy50aXRsZTtcblx0XHR2YXIgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG5cblx0XHRpZiAodGl0bGVPcHRzKSB7XG5cdFx0XHRoZWxwZXJzJDEubWVyZ2VJZih0aXRsZU9wdHMsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLnRpdGxlKTtcblxuXHRcdFx0aWYgKHRpdGxlQmxvY2spIHtcblx0XHRcdFx0Y29yZV9sYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGVCbG9jaywgdGl0bGVPcHRzKTtcblx0XHRcdFx0dGl0bGVCbG9jay5vcHRpb25zID0gdGl0bGVPcHRzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlTmV3VGl0bGVCbG9ja0FuZEF0dGFjaChjaGFydCwgdGl0bGVPcHRzKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHRpdGxlQmxvY2spIHtcblx0XHRcdGNvcmVfbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIHRpdGxlQmxvY2spO1xuXHRcdFx0ZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgcGx1Z2lucyA9IHt9O1xudmFyIGZpbGxlciA9IHBsdWdpbl9maWxsZXI7XG52YXIgbGVnZW5kID0gcGx1Z2luX2xlZ2VuZDtcbnZhciB0aXRsZSA9IHBsdWdpbl90aXRsZTtcbnBsdWdpbnMuZmlsbGVyID0gZmlsbGVyO1xucGx1Z2lucy5sZWdlbmQgPSBsZWdlbmQ7XG5wbHVnaW5zLnRpdGxlID0gdGl0bGU7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydFxuICovXG5cblxuY29yZV9jb250cm9sbGVyLmhlbHBlcnMgPSBoZWxwZXJzJDE7XG5cbi8vIEB0b2RvIGRpc3BhdGNoIHRoZXNlIGhlbHBlcnMgaW50byBhcHByb3ByaWF0ZWQgaGVscGVycy9oZWxwZXJzLiogZmlsZSBhbmQgd3JpdGUgdW5pdCB0ZXN0cyFcbmNvcmVfaGVscGVycygpO1xuXG5jb3JlX2NvbnRyb2xsZXIuX2FkYXB0ZXJzID0gY29yZV9hZGFwdGVycztcbmNvcmVfY29udHJvbGxlci5BbmltYXRpb24gPSBjb3JlX2FuaW1hdGlvbjtcbmNvcmVfY29udHJvbGxlci5hbmltYXRpb25TZXJ2aWNlID0gY29yZV9hbmltYXRpb25zO1xuY29yZV9jb250cm9sbGVyLmNvbnRyb2xsZXJzID0gY29udHJvbGxlcnM7XG5jb3JlX2NvbnRyb2xsZXIuRGF0YXNldENvbnRyb2xsZXIgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyO1xuY29yZV9jb250cm9sbGVyLmRlZmF1bHRzID0gY29yZV9kZWZhdWx0cztcbmNvcmVfY29udHJvbGxlci5FbGVtZW50ID0gY29yZV9lbGVtZW50O1xuY29yZV9jb250cm9sbGVyLmVsZW1lbnRzID0gZWxlbWVudHM7XG5jb3JlX2NvbnRyb2xsZXIuSW50ZXJhY3Rpb24gPSBjb3JlX2ludGVyYWN0aW9uO1xuY29yZV9jb250cm9sbGVyLmxheW91dHMgPSBjb3JlX2xheW91dHM7XG5jb3JlX2NvbnRyb2xsZXIucGxhdGZvcm0gPSBwbGF0Zm9ybTtcbmNvcmVfY29udHJvbGxlci5wbHVnaW5zID0gY29yZV9wbHVnaW5zO1xuY29yZV9jb250cm9sbGVyLlNjYWxlID0gY29yZV9zY2FsZTtcbmNvcmVfY29udHJvbGxlci5zY2FsZVNlcnZpY2UgPSBjb3JlX3NjYWxlU2VydmljZTtcbmNvcmVfY29udHJvbGxlci5UaWNrcyA9IGNvcmVfdGlja3M7XG5jb3JlX2NvbnRyb2xsZXIuVG9vbHRpcCA9IGNvcmVfdG9vbHRpcDtcblxuLy8gUmVnaXN0ZXIgYnVpbHQtaW4gc2NhbGVzXG5cbmNvcmVfY29udHJvbGxlci5oZWxwZXJzLmVhY2goc2NhbGVzLCBmdW5jdGlvbihzY2FsZSwgdHlwZSkge1xuXHRjb3JlX2NvbnRyb2xsZXIuc2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKHR5cGUsIHNjYWxlLCBzY2FsZS5fZGVmYXVsdHMpO1xufSk7XG5cbi8vIExvYWQgdG8gcmVnaXN0ZXIgYnVpbHQtaW4gYWRhcHRlcnMgKGFzIHNpZGUgZWZmZWN0cylcblxuXG4vLyBMb2FkaW5nIGJ1aWx0LWluIHBsdWdpbnNcblxuZm9yICh2YXIgayBpbiBwbHVnaW5zKSB7XG5cdGlmIChwbHVnaW5zLmhhc093blByb3BlcnR5KGspKSB7XG5cdFx0Y29yZV9jb250cm9sbGVyLnBsdWdpbnMucmVnaXN0ZXIocGx1Z2luc1trXSk7XG5cdH1cbn1cblxuY29yZV9jb250cm9sbGVyLnBsYXRmb3JtLmluaXRpYWxpemUoKTtcblxudmFyIHNyYyA9IGNvcmVfY29udHJvbGxlcjtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHR3aW5kb3cuQ2hhcnQgPSBjb3JlX2NvbnRyb2xsZXI7XG59XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmVcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuQ2hhcnRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmNvcmVfY29udHJvbGxlci5DaGFydCA9IGNvcmVfY29udHJvbGxlcjtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlXG4gKiBAbmFtZXNwYWNlIENoYXJ0LkxlZ2VuZFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjEuNVxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLkxlZ2VuZCA9IHBsdWdpbnMubGVnZW5kLl9lbGVtZW50O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmVcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuVGl0bGVcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi4xLjVcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmNvcmVfY29udHJvbGxlci5UaXRsZSA9IHBsdWdpbnMudGl0bGUuX2VsZW1lbnQ7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5wbHVnaW5zIGluc3RlYWRcbiAqIEBuYW1lc3BhY2UgQ2hhcnQucGx1Z2luU2VydmljZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjEuNVxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLnBsdWdpblNlcnZpY2UgPSBjb3JlX2NvbnRyb2xsZXIucGx1Z2lucztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgaW5oZXJpdGluZyBmcm9tIENoYXJ0LlBsdWdpbmdCYXNlIGhhcyBub1xuICogZWZmZWN0LCBpbnN0ZWFkIHNpbXBseSBjcmVhdGUvcmVnaXN0ZXIgcGx1Z2lucyB2aWEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICogQGludGVyZmFjZSBDaGFydC5QbHVnaW5CYXNlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNS4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuUGx1Z2luQmFzZSA9IGNvcmVfY29udHJvbGxlci5FbGVtZW50LmV4dGVuZCh7fSk7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcyBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5jYW52YXNIZWxwZXJzXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuY2FudmFzSGVscGVycyA9IGNvcmVfY29udHJvbGxlci5oZWxwZXJzLmNhbnZhcztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmxheW91dHMgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQubGF5b3V0U2VydmljZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuM1xuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLmxheW91dFNlcnZpY2UgPSBjb3JlX2NvbnRyb2xsZXIubGF5b3V0cztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlLlxuICogQG5hbWVzcGFjZSBDaGFydC5MaW5lYXJTY2FsZUJhc2VcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44XG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuTGluZWFyU2NhbGVCYXNlID0gc2NhbGVfbGluZWFyYmFzZTtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgaW5zdGVhZCB3ZSBzaG91bGQgY3JlYXRlIGEgbmV3IENoYXJ0XG4gKiBieSBzZXR0aW5nIHRoZSB0eXBlIGluIHRoZSBjb25maWcgKGBuZXcgQ2hhcnQoaWQsIHt0eXBlOiAne2NoYXJ0LXR5cGV9J31gKS5cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqL1xuY29yZV9jb250cm9sbGVyLmhlbHBlcnMuZWFjaChcblx0W1xuXHRcdCdCYXInLFxuXHRcdCdCdWJibGUnLFxuXHRcdCdEb3VnaG51dCcsXG5cdFx0J0xpbmUnLFxuXHRcdCdQb2xhckFyZWEnLFxuXHRcdCdSYWRhcicsXG5cdFx0J1NjYXR0ZXInXG5cdF0sXG5cdGZ1bmN0aW9uKGtsYXNzKSB7XG5cdFx0Y29yZV9jb250cm9sbGVyW2tsYXNzXSA9IGZ1bmN0aW9uKGN0eCwgY2ZnKSB7XG5cdFx0XHRyZXR1cm4gbmV3IGNvcmVfY29udHJvbGxlcihjdHgsIGNvcmVfY29udHJvbGxlci5oZWxwZXJzLm1lcmdlKGNmZyB8fCB7fSwge1xuXHRcdFx0XHR0eXBlOiBrbGFzcy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGtsYXNzLnNsaWNlKDEpXG5cdFx0XHR9KSk7XG5cdFx0fTtcblx0fVxuKTtcblxucmV0dXJuIHNyYztcblxufSkpKTtcbiIsIi8qIVxuICogR2xpZGUuanMgdjMuNC4xXG4gKiAoYykgMjAxMy0yMDE5IErEmWRyemVqIENoYcWCdWJlayA8amVkcnplai5jaGFsdWJla0BnbWFpbC5jb20+IChodHRwOi8vamVkcnplamNoYWx1YmVrLmNvbS8pXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsLkdsaWRlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHRoZSBtb3ZlbWVudC5cbiAgICAgKlxuICAgICAqIEF2YWlsYWJsZSB0eXBlczpcbiAgICAgKiBgc2xpZGVyYCAtIFJld2luZHMgc2xpZGVyIHRvIHRoZSBzdGFydC9lbmQgd2hlbiBpdCByZWFjaGVzIHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlLlxuICAgICAqIGBjYXJvdXNlbGAgLSBDaGFuZ2VzIHNsaWRlcyB3aXRob3V0IHN0YXJ0aW5nIG92ZXIgd2hlbiBpdCByZWFjaGVzIHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlLlxuICAgICAqXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiAnc2xpZGVyJyxcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IGF0IHNwZWNpZmljIHNsaWRlIG51bWJlciBkZWZpbmVkIHdpdGggemVyby1iYXNlZCBpbmRleC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgc3RhcnRBdDogMCxcblxuICAgIC8qKlxuICAgICAqIEEgbnVtYmVyIG9mIHNsaWRlcyB2aXNpYmxlIG9uIHRoZSBzaW5nbGUgdmlld3BvcnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHBlclZpZXc6IDEsXG5cbiAgICAvKipcbiAgICAgKiBGb2N1cyBjdXJyZW50bHkgYWN0aXZlIHNsaWRlIGF0IGEgc3BlY2lmaWVkIHBvc2l0aW9uIGluIHRoZSB0cmFjay5cbiAgICAgKlxuICAgICAqIEF2YWlsYWJsZSBpbnB1dHM6XG4gICAgICogYGNlbnRlcmAgLSBDdXJyZW50IHNsaWRlIHdpbGwgYmUgYWx3YXlzIGZvY3VzZWQgYXQgdGhlIGNlbnRlciBvZiBhIHRyYWNrLlxuICAgICAqIGAwLDEsMiwzLi4uYCAtIEN1cnJlbnQgc2xpZGUgd2lsbCBiZSBmb2N1c2VkIG9uIHRoZSBzcGVjaWZpZWQgemVyby1iYXNlZCBpbmRleC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdHJpbmd8TnVtYmVyfVxuICAgICAqL1xuICAgIGZvY3VzQXQ6IDAsXG5cbiAgICAvKipcbiAgICAgKiBBIHNpemUgb2YgdGhlIGdhcCBhZGRlZCBiZXR3ZWVuIHNsaWRlcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2FwOiAxMCxcblxuICAgIC8qKlxuICAgICAqIENoYW5nZSBzbGlkZXMgYWZ0ZXIgYSBzcGVjaWZpZWQgaW50ZXJ2YWwuIFVzZSBgZmFsc2VgIGZvciB0dXJuaW5nIG9mZiBhdXRvcGxheS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ8Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBhdXRvcGxheTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBTdG9wIGF1dG9wbGF5IG9uIG1vdXNlb3ZlciBldmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIGhvdmVycGF1c2U6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBBbGxvdyBmb3IgY2hhbmdpbmcgc2xpZGVzIHdpdGggbGVmdCBhbmQgcmlnaHQga2V5Ym9hcmQgYXJyb3dzLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAga2V5Ym9hcmQ6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBTdG9wIHJ1bm5pbmcgYHBlclZpZXdgIG51bWJlciBvZiBzbGlkZXMgZnJvbSB0aGUgZW5kLiBVc2UgdGhpc1xuICAgICAqIG9wdGlvbiBpZiB5b3UgZG9uJ3Qgd2FudCB0byBoYXZlIGFuIGVtcHR5IHNwYWNlIGFmdGVyXG4gICAgICogYSBzbGlkZXIuIFdvcmtzIG9ubHkgd2l0aCBgc2xpZGVyYCB0eXBlIGFuZCBhXG4gICAgICogbm9uLWNlbnRlcmVkIGBmb2N1c0F0YCBzZXR0aW5nLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAgYm91bmQ6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogTWluaW1hbCBzd2lwZSBkaXN0YW5jZSBuZWVkZWQgdG8gY2hhbmdlIHRoZSBzbGlkZS4gVXNlIGBmYWxzZWAgZm9yIHR1cm5pbmcgb2ZmIGEgc3dpcGluZy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ8Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzd2lwZVRocmVzaG9sZDogODAsXG5cbiAgICAvKipcbiAgICAgKiBNaW5pbWFsIG1vdXNlIGRyYWcgZGlzdGFuY2UgbmVlZGVkIHRvIGNoYW5nZSB0aGUgc2xpZGUuIFVzZSBgZmFsc2VgIGZvciB0dXJuaW5nIG9mZiBhIGRyYWdnaW5nLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcnxCb29sZWFufVxuICAgICAqL1xuICAgIGRyYWdUaHJlc2hvbGQ6IDEyMCxcblxuICAgIC8qKlxuICAgICAqIEEgbWF4aW11bSBudW1iZXIgb2Ygc2xpZGVzIHRvIHdoaWNoIG1vdmVtZW50IHdpbGwgYmUgbWFkZSBvbiBzd2lwaW5nIG9yIGRyYWdnaW5nLiBVc2UgYGZhbHNlYCBmb3IgdW5saW1pdGVkLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcnxCb29sZWFufVxuICAgICAqL1xuICAgIHBlclRvdWNoOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIE1vdmluZyBkaXN0YW5jZSByYXRpbyBvZiB0aGUgc2xpZGVzIG9uIGEgc3dpcGluZyBhbmQgZHJhZ2dpbmcuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRvdWNoUmF0aW86IDAuNSxcblxuICAgIC8qKlxuICAgICAqIEFuZ2xlIHJlcXVpcmVkIHRvIGFjdGl2YXRlIHNsaWRlcyBtb3Zpbmcgb24gc3dpcGluZyBvciBkcmFnZ2luZy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdG91Y2hBbmdsZTogNDUsXG5cbiAgICAvKipcbiAgICAgKiBEdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDQwMCxcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBsb29waW5nIHRoZSBgc2xpZGVyYCB0eXBlLiBTbGlkZXIgd2lsbCByZXdpbmQgdG8gdGhlIGZpcnN0L2xhc3Qgc2xpZGUgd2hlbiBpdCdzIGF0IHRoZSBzdGFydC9lbmQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICByZXdpbmQ6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBEdXJhdGlvbiBvZiB0aGUgcmV3aW5kaW5nIGFuaW1hdGlvbiBvZiB0aGUgYHNsaWRlcmAgdHlwZSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHJld2luZER1cmF0aW9uOiA4MDAsXG5cbiAgICAvKipcbiAgICAgKiBFYXNpbmcgZnVuY3Rpb24gZm9yIHRoZSBhbmltYXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGFuaW1hdGlvblRpbWluZ0Z1bmM6ICdjdWJpYy1iZXppZXIoLjE2NSwgLjg0MCwgLjQ0MCwgMSknLFxuXG4gICAgLyoqXG4gICAgICogVGhyb3R0bGUgY29zdGx5IGV2ZW50cyBhdCBtb3N0IG9uY2UgcGVyIGV2ZXJ5IHdhaXQgbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aHJvdHRsZTogMTAsXG5cbiAgICAvKipcbiAgICAgKiBNb3ZpbmcgZGlyZWN0aW9uIG1vZGUuXG4gICAgICpcbiAgICAgKiBBdmFpbGFibGUgaW5wdXRzOlxuICAgICAqIC0gJ2x0cicgLSBsZWZ0IHRvIHJpZ2h0IG1vdmVtZW50LFxuICAgICAqIC0gJ3J0bCcgLSByaWdodCB0byBsZWZ0IG1vdmVtZW50LlxuICAgICAqXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBkaXJlY3Rpb246ICdsdHInLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGRpc3RhbmNlIHZhbHVlIG9mIHRoZSBuZXh0IGFuZCBwcmV2aW91cyB2aWV3cG9ydHMgd2hpY2hcbiAgICAgKiBoYXZlIHRvIHBlZWsgaW4gdGhlIGN1cnJlbnQgdmlldy4gQWNjZXB0cyBudW1iZXIgYW5kXG4gICAgICogcGl4ZWxzIGFzIGEgc3RyaW5nLiBMZWZ0IGFuZCByaWdodCBwZWVraW5nIGNhbiBiZVxuICAgICAqIHNldCB1cCBzZXBhcmF0ZWx5IHdpdGggYSBkaXJlY3Rpb25zIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlOlxuICAgICAqIGAxMDBgIC0gUGVlayAxMDBweCBvbiB0aGUgYm90aCBzaWRlcy5cbiAgICAgKiB7IGJlZm9yZTogMTAwLCBhZnRlcjogNTAgfWAgLSBQZWVrIDEwMHB4IG9uIHRoZSBsZWZ0IHNpZGUgYW5kIDUwcHggb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfFN0cmluZ3xPYmplY3R9XG4gICAgICovXG4gICAgcGVlazogMCxcblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2Ygb3B0aW9ucyBhcHBsaWVkIGF0IHNwZWNpZmllZCBtZWRpYSBicmVha3BvaW50cy5cbiAgICAgKiBGb3IgZXhhbXBsZTogZGlzcGxheSB0d28gc2xpZGVzIHBlciB2aWV3IHVuZGVyIDgwMHB4LlxuICAgICAqIGB7XG4gICAgICogICAnODAwcHgnOiB7XG4gICAgICogICAgIHBlclZpZXc6IDJcbiAgICAgKiAgIH1cbiAgICAgKiB9YFxuICAgICAqL1xuICAgIGJyZWFrcG9pbnRzOiB7fSxcblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgaW50ZXJuYWxseSB1c2VkIEhUTUwgY2xhc3Nlcy5cbiAgICAgKlxuICAgICAqIEB0b2RvIFJlZmFjdG9yIGBzbGlkZXJgIGFuZCBgY2Fyb3VzZWxgIHByb3BlcnRpZXMgdG8gc2luZ2xlIGB0eXBlOiB7IHNsaWRlcjogJycsIGNhcm91c2VsOiAnJyB9YCBvYmplY3RcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNsYXNzZXM6IHtcbiAgICAgIGRpcmVjdGlvbjoge1xuICAgICAgICBsdHI6ICdnbGlkZS0tbHRyJyxcbiAgICAgICAgcnRsOiAnZ2xpZGUtLXJ0bCdcbiAgICAgIH0sXG4gICAgICBzbGlkZXI6ICdnbGlkZS0tc2xpZGVyJyxcbiAgICAgIGNhcm91c2VsOiAnZ2xpZGUtLWNhcm91c2VsJyxcbiAgICAgIHN3aXBlYWJsZTogJ2dsaWRlLS1zd2lwZWFibGUnLFxuICAgICAgZHJhZ2dpbmc6ICdnbGlkZS0tZHJhZ2dpbmcnLFxuICAgICAgY2xvbmVTbGlkZTogJ2dsaWRlX19zbGlkZS0tY2xvbmUnLFxuICAgICAgYWN0aXZlTmF2OiAnZ2xpZGVfX2J1bGxldC0tYWN0aXZlJyxcbiAgICAgIGFjdGl2ZVNsaWRlOiAnZ2xpZGVfX3NsaWRlLS1hY3RpdmUnLFxuICAgICAgZGlzYWJsZWRBcnJvdzogJ2dsaWRlX19hcnJvdy0tZGlzYWJsZWQnXG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBPdXRwdXRzIHdhcm5pbmcgbWVzc2FnZSB0byB0aGUgYm93c2VyIGNvbnNvbGUuXG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbXNnXG4gICAqIEByZXR1cm4ge1ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJbR2xpZGUgd2Fybl06IFwiICsgbXNnKTtcbiAgfVxuXG4gIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH07XG5cbiAgdmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICB2YXIgZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTtcblxuICAgIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcblxuICAgICAgaWYgKHBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykge1xuICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDtcblxuICAgICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfTtcblxuICB2YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHZhbHVlIGVudGVyZWQgYXMgbnVtYmVyXG4gICAqIG9yIHN0cmluZyB0byBpbnRlZ2VyIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICogQHJldHVybnMge051bWJlcn1cbiAgICovXG4gIGZ1bmN0aW9uIHRvSW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB2YWx1ZSBlbnRlcmVkIGFzIG51bWJlclxuICAgKiBvciBzdHJpbmcgdG8gZmxhdCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiB0b0Zsb2F0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSAgeyp9ICAgdmFsdWVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAgeyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlXG4gICAqL1xuICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSk7XG5cbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIXZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1peGVkLW9wZXJhdG9yc1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSAgeyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtICB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0gIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgc3BlY2lmaWVkIGNvbGxlY3Rpb24gb2YgZXh0ZW5zaW9ucy5cbiAgICogRWFjaCBleHRlbnNpb24gcmVjZWl2ZXMgYWNjZXNzIHRvIGluc3RhbmNlIG9mIGdsaWRlIGFuZCByZXN0IG9mIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBnbGlkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZXh0ZW5zaW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gbW91bnQoZ2xpZGUsIGV4dGVuc2lvbnMsIGV2ZW50cykge1xuICAgIHZhciBjb21wb25lbnRzID0ge307XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGV4dGVuc2lvbnMpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGV4dGVuc2lvbnNbbmFtZV0pKSB7XG4gICAgICAgIGNvbXBvbmVudHNbbmFtZV0gPSBleHRlbnNpb25zW25hbWVdKGdsaWRlLCBjb21wb25lbnRzLCBldmVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybignRXh0ZW5zaW9uIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9uYW1lIGluIGNvbXBvbmVudHMpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbXBvbmVudHNbX25hbWVdLm1vdW50KSkge1xuICAgICAgICBjb21wb25lbnRzW19uYW1lXS5tb3VudCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZXMgZ2V0dGVyIGFuZCBzZXR0ZXIgcHJvcGVydHkgb24gdGhlIHNwZWNpZmllZCBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gb2JqICAgICAgICAgT2JqZWN0IHdoZXJlIHByb3BlcnR5IGhhcyB0byBiZSBkZWZpbmVkLlxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHByb3AgICAgICAgIE5hbWUgb2YgdGhlIGRlZmluZWQgcHJvcGVydHkuXG4gICAqIEBwYXJhbSAge09iamVjdH0gZGVmaW5pdGlvbiAgR2V0IGFuZCBzZXQgZGVmaW5pdGlvbnMgZm9yIHRoZSBwcm9wZXJ0eS5cbiAgICogQHJldHVybiB7Vm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIHByb3AsIGRlZmluaXRpb24pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBkZWZpbml0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0cyBhcGhhYmV0aWNhbGx5IG9iamVjdCBrZXlzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9ialxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBzb3J0S2V5cyhvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5zb3J0KCkucmVkdWNlKGZ1bmN0aW9uIChyLCBrKSB7XG4gICAgICByW2tdID0gb2JqW2tdO1xuXG4gICAgICByZXR1cm4gcltrXSwgcjtcbiAgICB9LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2VzIHBhc3NlZCBzZXR0aW5ncyBvYmplY3Qgd2l0aCBkZWZhdWx0IG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gZGVmYXVsdHNcbiAgICogQHBhcmFtICB7T2JqZWN0fSBzZXR0aW5nc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIHNldHRpbmdzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdHMsIHNldHRpbmdzKTtcblxuICAgIC8vIGBPYmplY3QuYXNzaWduYCBkbyBub3QgZGVlcGx5IG1lcmdlIG9iamVjdHMsIHNvIHdlXG4gICAgLy8gaGF2ZSB0byBkbyBpdCBtYW51YWxseSBmb3IgZXZlcnkgbmVzdGVkIG9iamVjdFxuICAgIC8vIGluIG9wdGlvbnMuIEFsdGhvdWdoIGl0IGRvZXMgbm90IGxvb2sgc21hcnQsXG4gICAgLy8gaXQncyBzbWFsbGVyIGFuZCBmYXN0ZXIgdGhhbiBzb21lIGZhbmN5XG4gICAgLy8gbWVyZ2luZyBkZWVwLW1lcmdlIGFsZ29yaXRobSBzY3JpcHQuXG4gICAgaWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KCdjbGFzc2VzJykpIHtcbiAgICAgIG9wdGlvbnMuY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cy5jbGFzc2VzLCBzZXR0aW5ncy5jbGFzc2VzKTtcblxuICAgICAgaWYgKHNldHRpbmdzLmNsYXNzZXMuaGFzT3duUHJvcGVydHkoJ2RpcmVjdGlvbicpKSB7XG4gICAgICAgIG9wdGlvbnMuY2xhc3Nlcy5kaXJlY3Rpb24gPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdHMuY2xhc3Nlcy5kaXJlY3Rpb24sIHNldHRpbmdzLmNsYXNzZXMuZGlyZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoJ2JyZWFrcG9pbnRzJykpIHtcbiAgICAgIG9wdGlvbnMuYnJlYWtwb2ludHMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdHMuYnJlYWtwb2ludHMsIHNldHRpbmdzLmJyZWFrcG9pbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIHZhciBFdmVudHNCdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgRXZlbnRCdXMgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRzXG4gICAgICovXG4gICAgZnVuY3Rpb24gRXZlbnRzQnVzKCkge1xuICAgICAgdmFyIGV2ZW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBFdmVudHNCdXMpO1xuXG4gICAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgICAgIHRoaXMuaG9wID0gZXZlbnRzLmhhc093blByb3BlcnR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgbGlzdGVuZXIgdG8gdGhlIHNwZWNpZmVkIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGV2ZW50XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgICAqL1xuXG5cbiAgICBjcmVhdGVDbGFzcyhFdmVudHNCdXMsIFt7XG4gICAgICBrZXk6ICdvbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5vbihldmVudFtpXSwgaGFuZGxlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBldmVudCdzIG9iamVjdCBpZiBub3QgeWV0IGNyZWF0ZWRcbiAgICAgICAgaWYgKCF0aGlzLmhvcC5jYWxsKHRoaXMuZXZlbnRzLCBldmVudCkpIHtcbiAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCB0aGUgaGFuZGxlciB0byBxdWV1ZVxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChoYW5kbGVyKSAtIDE7XG5cbiAgICAgICAgLy8gUHJvdmlkZSBoYW5kbGUgYmFjayBmb3IgcmVtb3ZhbCBvZiBldmVudFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZXZlbnRzW2V2ZW50XVtpbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJ1bnMgcmVnaXN0ZXJlZCBoYW5kbGVycyBmb3Igc3BlY2lmaWVkIGV2ZW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBldmVudFxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0XG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2VtaXQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KGV2ZW50W2ldLCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgZXZlbnQgZG9lc24ndCBleGlzdCwgb3IgdGhlcmUncyBubyBoYW5kbGVycyBpbiBxdWV1ZSwganVzdCBsZWF2ZVxuICAgICAgICBpZiAoIXRoaXMuaG9wLmNhbGwodGhpcy5ldmVudHMsIGV2ZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEN5Y2xlIHRocm91Z2ggZXZlbnRzIHF1ZXVlLCBmaXJlIVxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGl0ZW0oY29udGV4dCB8fCB7fSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gRXZlbnRzQnVzO1xuICB9KCk7XG5cbiAgdmFyIEdsaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0IGdsaWRlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gc2VsZWN0b3JcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xyXG4gICAgICovXG4gICAgZnVuY3Rpb24gR2xpZGUoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsaWRlKTtcblxuICAgICAgdGhpcy5fYyA9IHt9O1xuICAgICAgdGhpcy5fdCA9IFtdO1xuICAgICAgdGhpcy5fZSA9IG5ldyBFdmVudHNCdXMoKTtcblxuICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgdGhpcy5zZXR0aW5ncyA9IG1lcmdlT3B0aW9ucyhkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmluZGV4ID0gdGhpcy5zZXR0aW5ncy5zdGFydEF0O1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgZ2xpZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnMgQ29sbGVjdGlvbiBvZiBleHRlbnNpb25zIHRvIGluaXRpYWxpemUuXHJcbiAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAqL1xuXG5cbiAgICBjcmVhdGVDbGFzcyhHbGlkZSwgW3tcbiAgICAgIGtleTogJ21vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudCQkMSgpIHtcbiAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgIHRoaXMuX2UuZW1pdCgnbW91bnQuYmVmb3JlJyk7XG5cbiAgICAgICAgaWYgKGlzT2JqZWN0KGV4dGVuc2lvbnMpKSB7XG4gICAgICAgICAgdGhpcy5fYyA9IG1vdW50KHRoaXMsIGV4dGVuc2lvbnMsIHRoaXMuX2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSBvYmplY3Qgb24gYG1vdW50KClgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lLmVtaXQoJ21vdW50LmFmdGVyJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb2xsZWN0cyBhbiBpbnN0YW5jZSBgdHJhbnNsYXRlYCB0cmFuc2Zvcm1lcnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge0FycmF5fSB0cmFuc2Zvcm1lcnMgQ29sbGVjdGlvbiBvZiB0cmFuc2Zvcm1lcnMuXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnbXV0YXRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdXRhdGUoKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybWVycykpIHtcbiAgICAgICAgICB0aGlzLl90ID0gdHJhbnNmb3JtZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSBhcnJheSBvbiBgbXV0YXRlKClgJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIFVwZGF0ZXMgZ2xpZGUgd2l0aCBzcGVjaWZpZWQgc2V0dGluZ3MuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICd1cGRhdGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICB0aGlzLnNldHRpbmdzID0gbWVyZ2VPcHRpb25zKHRoaXMuc2V0dGluZ3MsIHNldHRpbmdzKTtcblxuICAgICAgICBpZiAoc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoJ3N0YXJ0QXQnKSkge1xuICAgICAgICAgIHRoaXMuaW5kZXggPSBzZXR0aW5ncy5zdGFydEF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZS5lbWl0KCd1cGRhdGUnKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIENoYW5nZSBzbGlkZSB3aXRoIHNwZWNpZmllZCBwYXR0ZXJuLiBBIHBhdHRlcm4gbXVzdCBiZSBpbiB0aGUgc3BlY2lhbCBmb3JtYXQ6XHJcbiAgICAgICAqIGA+YCAtIE1vdmUgb25lIGZvcndhcmRcclxuICAgICAgICogYDxgIC0gTW92ZSBvbmUgYmFja3dhcmRcclxuICAgICAgICogYD17aX1gIC0gR28gdG8ge2l9IHplcm8tYmFzZWQgc2xpZGUgKGVxLiAnPTEnLCB3aWxsIGdvIHRvIHNlY29uZCBzbGlkZSlcclxuICAgICAgICogYD4+YCAtIFJld2luZHMgdG8gZW5kIChsYXN0IHNsaWRlKVxyXG4gICAgICAgKiBgPDxgIC0gUmV3aW5kcyB0byBzdGFydCAoZmlyc3Qgc2xpZGUpXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2dvJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnbyhwYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMuX2MuUnVuLm1ha2UocGF0dGVybik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBNb3ZlIHRyYWNrIGJ5IHNwZWNpZmllZCBkaXN0YW5jZS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpc3RhbmNlXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ21vdmUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmUoZGlzdGFuY2UpIHtcbiAgICAgICAgdGhpcy5fYy5UcmFuc2l0aW9uLmRpc2FibGUoKTtcbiAgICAgICAgdGhpcy5fYy5Nb3ZlLm1ha2UoZGlzdGFuY2UpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogRGVzdHJveSBpbnN0YW5jZSBhbmQgcmV2ZXJ0IGFsbCBjaGFuZ2VzIGRvbmUgYnkgdGhpcy5fYy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZS5lbWl0KCdkZXN0cm95Jyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBTdGFydCBpbnN0YW5jZSBhdXRvcGxheWluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gaW50ZXJ2YWwgUnVuIGF1dG9wbGF5aW5nIHdpdGggcGFzc2VkIGludGVydmFsIHJlZ2FyZGxlc3Mgb2YgYGF1dG9wbGF5YCBzZXR0aW5nc1xyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdwbGF5JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICB2YXIgaW50ZXJ2YWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICAgIGlmIChpbnRlcnZhbCkge1xuICAgICAgICAgIHRoaXMuc2V0dGluZ3MuYXV0b3BsYXkgPSBpbnRlcnZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2UuZW1pdCgncGxheScpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogU3RvcCBpbnN0YW5jZSBhdXRvcGxheWluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAncGF1c2UnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgICB0aGlzLl9lLmVtaXQoJ3BhdXNlJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIGdsaWRlIGludG8gYSBpZGxlIHN0YXR1cy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZGlzYWJsZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIGdsaWRlIGludG8gYSBhY3RpdmUgc3RhdHVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6ICdlbmFibGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogQWRkcyBjdXV0b20gZXZlbnQgbGlzdGVuZXIgd2l0aCBoYW5kbGVyLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXl9IGV2ZW50XHJcbiAgICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBoYW5kbGVyXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ29uJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9lLm9uKGV2ZW50LCBoYW5kbGVyKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIENoZWNrcyBpZiBnbGlkZSBpcyBhIHByZWNpc2VkIHR5cGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZVxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2lzVHlwZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNUeXBlKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MudHlwZSA9PT0gbmFtZTtcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIGNvcmUgb3B0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ3NldHRpbmdzJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbztcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdGhlIGNvcmUgb3B0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBvXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xuICAgICAgLFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEobykge1xuICAgICAgICBpZiAoaXNPYmplY3QobykpIHtcbiAgICAgICAgICB0aGlzLl9vID0gbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKCdPcHRpb25zIG11c3QgYmUgYW4gYG9iamVjdGAgaW5zdGFuY2UuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgY3VycmVudCBpbmRleCBvZiB0aGUgc2xpZGVyLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnaW5kZXgnLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pO1xuICAgICAgfVxuXG4gICAgICAvKipcclxuICAgICAgICogU2V0cyBjdXJyZW50IGluZGV4IGEgc2xpZGVyLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgICAqL1xuICAgICAgLFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEoaSkge1xuICAgICAgICB0aGlzLl9pID0gdG9JbnQoaSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHR5cGUgbmFtZSBvZiB0aGUgc2xpZGVyLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAndHlwZScsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MudHlwZTtcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIGlkbGUgc3RhdHVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ2Rpc2FibGVkJyxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZDtcbiAgICAgIH1cblxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdGhlIGlkbGUgc3RhdHVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cbiAgICAgICxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKHN0YXR1cykge1xuICAgICAgICB0aGlzLl9kID0gISFzdGF0dXM7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBHbGlkZTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFJ1biAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIHZhciBSdW4gPSB7XG4gICAgICAvKipcbiAgICAgICAqIEluaXRpYWxpemVzIGF1dG9ydW5uaW5nIG9mIHRoZSBnbGlkZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMuX28gPSBmYWxzZTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBNYWtlcyBnbGlkZXMgcnVubmluZyBiYXNlZCBvbiB0aGUgcGFzc2VkIG1vdmluZyBzY2hlbWEuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG1vdmVcbiAgICAgICAqL1xuICAgICAgbWFrZTogZnVuY3Rpb24gbWFrZShtb3ZlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFHbGlkZS5kaXNhYmxlZCkge1xuICAgICAgICAgIEdsaWRlLmRpc2FibGUoKTtcblxuICAgICAgICAgIHRoaXMubW92ZSA9IG1vdmU7XG5cbiAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLmJlZm9yZScsIHRoaXMubW92ZSk7XG5cbiAgICAgICAgICB0aGlzLmNhbGN1bGF0ZSgpO1xuXG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3J1bicsIHRoaXMubW92ZSk7XG5cbiAgICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzU3RhcnQoKSkge1xuICAgICAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLnN0YXJ0JywgX3RoaXMubW92ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0VuZCgpKSB7XG4gICAgICAgICAgICAgIEV2ZW50cy5lbWl0KCdydW4uZW5kJywgX3RoaXMubW92ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5pc09mZnNldCgnPCcpIHx8IF90aGlzLmlzT2Zmc2V0KCc+JykpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX28gPSBmYWxzZTtcblxuICAgICAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLm9mZnNldCcsIF90aGlzLm1vdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLmFmdGVyJywgX3RoaXMubW92ZSk7XG5cbiAgICAgICAgICAgIEdsaWRlLmVuYWJsZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsY3VsYXRlcyBjdXJyZW50IGluZGV4IGJhc2VkIG9uIGRlZmluZWQgbW92ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBjYWxjdWxhdGU6IGZ1bmN0aW9uIGNhbGN1bGF0ZSgpIHtcbiAgICAgICAgdmFyIG1vdmUgPSB0aGlzLm1vdmUsXG4gICAgICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgdmFyIHN0ZXBzID0gbW92ZS5zdGVwcyxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IG1vdmUuZGlyZWN0aW9uO1xuXG5cbiAgICAgICAgdmFyIGNvdW50YWJsZVN0ZXBzID0gaXNOdW1iZXIodG9JbnQoc3RlcHMpKSAmJiB0b0ludChzdGVwcykgIT09IDA7XG5cbiAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgIGlmIChzdGVwcyA9PT0gJz4nKSB7XG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRW5kKCkpIHtcbiAgICAgICAgICAgICAgaWYgKCEoR2xpZGUuaXNUeXBlKCdzbGlkZXInKSAmJiAhR2xpZGUuc2V0dGluZ3MucmV3aW5kKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX28gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgR2xpZGUuaW5kZXggPSAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50YWJsZVN0ZXBzKSB7XG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4ICs9IE1hdGgubWluKGxlbmd0aCAtIEdsaWRlLmluZGV4LCAtdG9JbnQoc3RlcHMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgaWYgKHN0ZXBzID09PSAnPCcpIHtcbiAgICAgICAgICAgICAgR2xpZGUuaW5kZXggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU3RhcnQoKSkge1xuICAgICAgICAgICAgICBpZiAoIShHbGlkZS5pc1R5cGUoJ3NsaWRlcicpICYmICFHbGlkZS5zZXR0aW5ncy5yZXdpbmQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBHbGlkZS5pbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudGFibGVTdGVwcykge1xuICAgICAgICAgICAgICBHbGlkZS5pbmRleCAtPSBNYXRoLm1pbihHbGlkZS5pbmRleCwgdG9JbnQoc3RlcHMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgR2xpZGUuaW5kZXggPSBzdGVwcztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgZGlyZWN0aW9uIHBhdHRlcm4gWycgKyBkaXJlY3Rpb24gKyBzdGVwcyArICddIGhhcyBiZWVuIHVzZWQnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2tzIGlmIHdlIGFyZSBvbiB0aGUgZmlyc3Qgc2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgaXNTdGFydDogZnVuY3Rpb24gaXNTdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIEdsaWRlLmluZGV4ID09PSAwO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrcyBpZiB3ZSBhcmUgb24gdGhlIGxhc3Qgc2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgaXNFbmQ6IGZ1bmN0aW9uIGlzRW5kKCkge1xuICAgICAgICByZXR1cm4gR2xpZGUuaW5kZXggPT09IHRoaXMubGVuZ3RoO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrcyBpZiB3ZSBhcmUgbWFraW5nIGEgb2Zmc2V0IHJ1bi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAgICovXG4gICAgICBpc09mZnNldDogZnVuY3Rpb24gaXNPZmZzZXQoZGlyZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vICYmIHRoaXMubW92ZS5kaXJlY3Rpb24gPT09IGRpcmVjdGlvbjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lKFJ1biwgJ21vdmUnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIG1vdmUgc2NoZW1hLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIHZhbHVlIG9mIHRoZSBtb3ZlIHNjaGVtYS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICB2YXIgc3RlcCA9IHZhbHVlLnN1YnN0cigxKTtcblxuICAgICAgICB0aGlzLl9tID0ge1xuICAgICAgICAgIGRpcmVjdGlvbjogdmFsdWUuc3Vic3RyKDAsIDEpLFxuICAgICAgICAgIHN0ZXBzOiBzdGVwID8gdG9JbnQoc3RlcCkgPyB0b0ludChzdGVwKSA6IHN0ZXAgOiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoUnVuLCAnbGVuZ3RoJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBydW5uaW5nIGRpc3RhbmNlIGJhc2VkXG4gICAgICAgKiBvbiB6ZXJvLWluZGV4aW5nIG51bWJlciBvZiBzbGlkZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG4gICAgICAgIHZhciBsZW5ndGggPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICAvLyBJZiB0aGUgYGJvdW5kYCBvcHRpb24gaXMgYWNpdHZlLCBhIG1heGltdW0gcnVubmluZyBkaXN0YW5jZSBzaG91bGQgYmVcbiAgICAgICAgLy8gcmVkdWNlZCBieSBgcGVyVmlld2AgYW5kIGBmb2N1c0F0YCBzZXR0aW5ncy4gUnVubmluZyBkaXN0YW5jZVxuICAgICAgICAvLyBzaG91bGQgZW5kIGJlZm9yZSBjcmVhdGluZyBhbiBlbXB0eSBzcGFjZSBhZnRlciBpbnN0YW5jZS5cblxuICAgICAgICBpZiAoR2xpZGUuaXNUeXBlKCdzbGlkZXInKSAmJiBzZXR0aW5ncy5mb2N1c0F0ICE9PSAnY2VudGVyJyAmJiBzZXR0aW5ncy5ib3VuZCkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGggLSAxIC0gKHRvSW50KHNldHRpbmdzLnBlclZpZXcpIC0gMSkgKyB0b0ludChzZXR0aW5ncy5mb2N1c0F0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsZW5ndGggLSAxO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKFJ1biwgJ29mZnNldCcsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBzdGF0dXMgb2YgdGhlIG9mZnNldHRpbmcgZmxhZy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX287XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUnVuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBjdXJyZW50IHRpbWUuXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWRcbiAgICogYXQgbW9zdCBvbmNlIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB3YWl0XG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICpcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmVcbiAgICovXG4gIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGltZW91dCA9IHZvaWQgMCxcbiAgICAgICAgY29udGV4dCA9IHZvaWQgMCxcbiAgICAgICAgYXJncyA9IHZvaWQgMCxcbiAgICAgICAgcmVzdWx0ID0gdm9pZCAwO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgdGhyb3R0bGVkID0gZnVuY3Rpb24gdGhyb3R0bGVkKCkge1xuICAgICAgdmFyIGF0ID0gbm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gYXQ7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChhdCAtIHByZXZpb3VzKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzID0gYXQ7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHRocm90dGxlZC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBwcmV2aW91cyA9IDA7XG4gICAgICB0aW1lb3V0ID0gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhyb3R0bGVkO1xuICB9XG5cbiAgdmFyIE1BUkdJTl9UWVBFID0ge1xuICAgIGx0cjogWydtYXJnaW5MZWZ0JywgJ21hcmdpblJpZ2h0J10sXG4gICAgcnRsOiBbJ21hcmdpblJpZ2h0JywgJ21hcmdpbkxlZnQnXVxuICB9O1xuXG4gIGZ1bmN0aW9uIEdhcHMgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICB2YXIgR2FwcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQXBwbGllcyBnYXBzIGJldHdlZW4gc2xpZGVzLiBGaXJzdCBhbmQgbGFzdFxuICAgICAgICogc2xpZGVzIGRvIG5vdCByZWNlaXZlIGl0J3MgZWRnZSBtYXJnaW5zLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7SFRNTENvbGxlY3Rpb259IHNsaWRlc1xuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHNsaWRlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIHN0eWxlID0gc2xpZGVzW2ldLnN0eWxlO1xuICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBDb21wb25lbnRzLkRpcmVjdGlvbi52YWx1ZTtcblxuICAgICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgICBzdHlsZVtNQVJHSU5fVFlQRVtkaXJlY3Rpb25dWzBdXSA9IHRoaXMudmFsdWUgLyAyICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVbTUFSR0lOX1RZUEVbZGlyZWN0aW9uXVswXV0gPSAnJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaSAhPT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHN0eWxlW01BUkdJTl9UWVBFW2RpcmVjdGlvbl1bMV1dID0gdGhpcy52YWx1ZSAvIDIgKyAncHgnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHlsZVtNQVJHSU5fVFlQRVtkaXJlY3Rpb25dWzFdXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgZ2FwcyBmcm9tIHRoZSBzbGlkZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MQ29sbGVjdGlvbn0gc2xpZGVzXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgICovXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShzbGlkZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBzdHlsZSA9IHNsaWRlc1tpXS5zdHlsZTtcblxuICAgICAgICAgIHN0eWxlLm1hcmdpbkxlZnQgPSAnJztcbiAgICAgICAgICBzdHlsZS5tYXJnaW5SaWdodCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShHYXBzLCAndmFsdWUnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIGdhcC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KEdsaWRlLnNldHRpbmdzLmdhcCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoR2FwcywgJ2dyb3cnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgYWRkaXRpb25hbCBkaW1lbnRpb25zIHZhbHVlIGNhdXNlZCBieSBnYXBzLlxuICAgICAgICogVXNlZCB0byBpbmNyZWFzZSB3aWR0aCBvZiB0aGUgc2xpZGVzIHdyYXBwZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBHYXBzLnZhbHVlICogKENvbXBvbmVudHMuU2l6ZXMubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoR2FwcywgJ3JlZHVjdG9yJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHJlZHVjdGlvbiB2YWx1ZSBjYXVzZWQgYnkgZ2Fwcy5cbiAgICAgICAqIFVzZWQgdG8gc3VidHJhY3Qgd2lkdGggb2YgdGhlIHNsaWRlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHBlclZpZXcgPSBHbGlkZS5zZXR0aW5ncy5wZXJWaWV3O1xuXG4gICAgICAgIHJldHVybiBHYXBzLnZhbHVlICogKHBlclZpZXcgLSAxKSAvIHBlclZpZXc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBjYWxjdWxhdGVkIGdhcHM6XG4gICAgICogLSBhZnRlciBidWlsZGluZywgc28gc2xpZGVzIChpbmNsdWRpbmcgY2xvbmVzKSB3aWxsIHJlY2VpdmUgcHJvcGVyIG1hcmdpbnNcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEksIHRvIHJlY2FsY3VsYXRlIGdhcHMgd2l0aCBuZXcgb3B0aW9uc1xuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ2J1aWxkLmFmdGVyJywgJ3VwZGF0ZSddLCB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICBHYXBzLmFwcGx5KENvbXBvbmVudHMuSHRtbC53cmFwcGVyLmNoaWxkcmVuKTtcbiAgICB9LCAzMCkpO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGdhcHM6XG4gICAgICogLSBvbiBkZXN0cm95aW5nIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGFsIHN0YXRlXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgR2Fwcy5yZW1vdmUoQ29tcG9uZW50cy5IdG1sLndyYXBwZXIuY2hpbGRyZW4pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIEdhcHM7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgc2libGluZ3Mgbm9kZXMgb2YgdGhlIHBhc3NlZCBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtFbGVtZW50fSBub2RlXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gc2libGluZ3Mobm9kZSkge1xuICAgIGlmIChub2RlICYmIG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgdmFyIG4gPSBub2RlLnBhcmVudE5vZGUuZmlyc3RDaGlsZDtcbiAgICAgIHZhciBtYXRjaGVkID0gW107XG5cbiAgICAgIGZvciAoOyBuOyBuID0gbi5uZXh0U2libGluZykge1xuICAgICAgICBpZiAobi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBub2RlKSB7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKG4pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcGFzc2VkIG5vZGUgZXhpc3QgYW5kIGlzIGEgdmFsaWQgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtICB7RWxlbWVudH0gbm9kZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gZXhpc3Qobm9kZSkge1xuICAgIGlmIChub2RlICYmIG5vZGUgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBUUkFDS19TRUxFQ1RPUiA9ICdbZGF0YS1nbGlkZS1lbD1cInRyYWNrXCJdJztcblxuICBmdW5jdGlvbiBIdG1sIChHbGlkZSwgQ29tcG9uZW50cykge1xuICAgIHZhciBIdG1sID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXR1cCBzbGlkZXIgSFRNTCBub2Rlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0dsaWRlfSBnbGlkZVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMucm9vdCA9IEdsaWRlLnNlbGVjdG9yO1xuICAgICAgICB0aGlzLnRyYWNrID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoVFJBQ0tfU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLnNsaWRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMud3JhcHBlci5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICAgIHJldHVybiAhc2xpZGUuY2xhc3NMaXN0LmNvbnRhaW5zKEdsaWRlLnNldHRpbmdzLmNsYXNzZXMuY2xvbmVTbGlkZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoSHRtbCwgJ3Jvb3QnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgbm9kZSBvZiB0aGUgZ2xpZGUgbWFpbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBIdG1sLl9yO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgbm9kZSBvZiB0aGUgZ2xpZGUgbWFpbiBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocikge1xuICAgICAgICBpZiAoaXNTdHJpbmcocikpIHtcbiAgICAgICAgICByID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleGlzdChyKSkge1xuICAgICAgICAgIEh0bWwuX3IgPSByO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oJ1Jvb3QgZWxlbWVudCBtdXN0IGJlIGEgZXhpc3RpbmcgSHRtbCBub2RlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZShIdG1sLCAndHJhY2snLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgbm9kZSBvZiB0aGUgZ2xpZGUgdHJhY2sgd2l0aCBzbGlkZXMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEh0bWwuX3Q7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyBub2RlIG9mIHRoZSBnbGlkZSB0cmFjayB3aXRoIHNsaWRlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHQpIHtcbiAgICAgICAgaWYgKGV4aXN0KHQpKSB7XG4gICAgICAgICAgSHRtbC5fdCA9IHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybignQ291bGQgbm90IGZpbmQgdHJhY2sgZWxlbWVudC4gUGxlYXNlIHVzZSAnICsgVFJBQ0tfU0VMRUNUT1IgKyAnIGF0dHJpYnV0ZS4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKEh0bWwsICd3cmFwcGVyJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIG5vZGUgb2YgdGhlIHNsaWRlcyB3cmFwcGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBIdG1sLnRyYWNrLmNoaWxkcmVuWzBdO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIEh0bWw7XG4gIH1cblxuICBmdW5jdGlvbiBQZWVrIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgdmFyIFBlZWsgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFNldHVwcyBob3cgbXVjaCB0byBwZWVrIGJhc2VkIG9uIHNldHRpbmdzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IEdsaWRlLnNldHRpbmdzLnBlZWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShQZWVrLCAndmFsdWUnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIHBlZWsuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge051bWJlcnxPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gUGVlay5fdjtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIHZhbHVlIG9mIHRoZSBwZWVrLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gdmFsdWVcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZS5iZWZvcmUgPSB0b0ludCh2YWx1ZS5iZWZvcmUpO1xuICAgICAgICAgIHZhbHVlLmFmdGVyID0gdG9JbnQodmFsdWUuYWZ0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgUGVlay5fdiA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKFBlZWssICdyZWR1Y3RvcicsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyByZWR1Y3Rpb24gdmFsdWUgY2F1c2VkIGJ5IHBlZWsuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IFBlZWsudmFsdWU7XG4gICAgICAgIHZhciBwZXJWaWV3ID0gR2xpZGUuc2V0dGluZ3MucGVyVmlldztcblxuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmJlZm9yZSAvIHBlclZpZXcgKyB2YWx1ZS5hZnRlciAvIHBlclZpZXc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUgKiAyIC8gcGVyVmlldztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlY2FsY3VsYXRlIHBlZWtpbmcgc2l6ZXMgb246XG4gICAgICogLSB3aGVuIHJlc2l6aW5nIHdpbmRvdyB0byB1cGRhdGUgdG8gcHJvcGVyIHBlcmNlbnRzXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsncmVzaXplJywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBQZWVrLm1vdW50KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUGVlaztcbiAgfVxuXG4gIGZ1bmN0aW9uIE1vdmUgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICB2YXIgTW92ZSA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQ29uc3RydWN0cyBtb3ZlIGNvbXBvbmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICB0aGlzLl9vID0gMDtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxjdWxhdGVzIGEgbW92ZW1lbnQgdmFsdWUgYmFzZWQgb24gcGFzc2VkIG9mZnNldCBhbmQgY3VycmVudGx5IGFjdGl2ZSBpbmRleC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG9mZnNldFxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbWFrZTogZnVuY3Rpb24gbWFrZSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgICAgIEV2ZW50cy5lbWl0KCdtb3ZlJywge1xuICAgICAgICAgIG1vdmVtZW50OiB0aGlzLnZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIENvbXBvbmVudHMuVHJhbnNpdGlvbi5hZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ21vdmUuYWZ0ZXInLCB7XG4gICAgICAgICAgICBtb3ZlbWVudDogX3RoaXMudmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShNb3ZlLCAnb2Zmc2V0Jywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIGFuIG9mZnNldCB2YWx1ZSB1c2VkIHRvIG1vZGlmeSBjdXJyZW50IHRyYW5zbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTW92ZS5fbztcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIGFuIG9mZnNldCB2YWx1ZSB1c2VkIHRvIG1vZGlmeSBjdXJyZW50IHRyYW5zbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIE1vdmUuX28gPSAhaXNVbmRlZmluZWQodmFsdWUpID8gdG9JbnQodmFsdWUpIDogMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZShNb3ZlLCAndHJhbnNsYXRlJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIGEgcmF3IG1vdmVtZW50IHZhbHVlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGggKiBHbGlkZS5pbmRleDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZShNb3ZlLCAndmFsdWUnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgYW4gYWN0dWFsIG1vdmVtZW50IHZhbHVlIGNvcnJlY3RlZCBieSBvZmZzZXQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICB2YXIgdHJhbnNsYXRlID0gdGhpcy50cmFuc2xhdGU7XG5cbiAgICAgICAgaWYgKENvbXBvbmVudHMuRGlyZWN0aW9uLmlzKCdydGwnKSkge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUgKyBvZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlIC0gb2Zmc2V0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogTWFrZSBtb3ZlbWVudCB0byBwcm9wZXIgc2xpZGUgb246XG4gICAgICogLSBiZWZvcmUgYnVpbGQsIHNvIGdsaWRlIHdpbGwgc3RhcnQgYXQgYHN0YXJ0QXRgIGluZGV4XG4gICAgICogLSBvbiBlYWNoIHN0YW5kYXJkIHJ1biB0byBtb3ZlIHRvIG5ld2x5IGNhbGN1bGF0ZWQgaW5kZXhcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydidWlsZC5iZWZvcmUnLCAncnVuJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIE1vdmUubWFrZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIE1vdmU7XG4gIH1cblxuICBmdW5jdGlvbiBTaXplcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIHZhciBTaXplcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0dXBzIGRpbWVudGlvbnMgb2Ygc2xpZGVzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHNldHVwU2xpZGVzOiBmdW5jdGlvbiBzZXR1cFNsaWRlcygpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5zbGlkZVdpZHRoICsgJ3B4JztcbiAgICAgICAgdmFyIHNsaWRlcyA9IENvbXBvbmVudHMuSHRtbC5zbGlkZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHVwcyBkaW1lbnRpb25zIG9mIHNsaWRlcyB3cmFwcGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHNldHVwV3JhcHBlcjogZnVuY3Rpb24gc2V0dXBXcmFwcGVyKGRpbWVudGlvbikge1xuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS53aWR0aCA9IHRoaXMud3JhcHBlclNpemUgKyAncHgnO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgYXBwbGllZCBzdHlsZXMgZnJvbSBIVE1MIGVsZW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtWb2lkfVxuICAgICAgICovXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgdmFyIHNsaWRlcyA9IENvbXBvbmVudHMuSHRtbC5zbGlkZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShTaXplcywgJ2xlbmd0aCcsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBjb3VudCBudW1iZXIgb2YgdGhlIHNsaWRlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gQ29tcG9uZW50cy5IdG1sLnNsaWRlcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoU2l6ZXMsICd3aWR0aCcsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB3aWR0aCB2YWx1ZSBvZiB0aGUgZ2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudHMuSHRtbC5yb290Lm9mZnNldFdpZHRoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lKFNpemVzLCAnd3JhcHBlclNpemUnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgc2l6ZSBvZiB0aGUgc2xpZGVzIHdyYXBwZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFNpemVzLnNsaWRlV2lkdGggKiBTaXplcy5sZW5ndGggKyBDb21wb25lbnRzLkdhcHMuZ3JvdyArIENvbXBvbmVudHMuQ2xvbmVzLmdyb3c7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmUoU2l6ZXMsICdzbGlkZVdpZHRoJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHdpZHRoIHZhbHVlIG9mIHRoZSBzaW5nbGUgc2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFNpemVzLndpZHRoIC8gR2xpZGUuc2V0dGluZ3MucGVyVmlldyAtIENvbXBvbmVudHMuUGVlay5yZWR1Y3RvciAtIENvbXBvbmVudHMuR2Fwcy5yZWR1Y3RvcjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IGNhbGN1bGF0ZWQgZ2xpZGUncyBkaW1lbnNpb25zOlxuICAgICAqIC0gYmVmb3JlIGJ1aWxkaW5nLCBzbyBvdGhlciBkaW1lbnRpb25zIChlLmcuIHRyYW5zbGF0ZSkgd2lsbCBiZSBjYWxjdWxhdGVkIHByb3BlcnRseVxuICAgICAqIC0gd2hlbiByZXNpemluZyB3aW5kb3cgdG8gcmVjYWxjdWxhdGUgc2lsZGVzIGRpbWVuc2lvbnNcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEksIHRvIGNhbGN1bGF0ZSBkaW1lbnNpb25zIGJhc2VkIG9uIG5ldyBvcHRpb25zXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3Jlc2l6ZScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgU2l6ZXMuc2V0dXBTbGlkZXMoKTtcbiAgICAgIFNpemVzLnNldHVwV3JhcHBlcigpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGNhbGN1bGF0ZWQgZ2xpZGUncyBkaW1lbnNpb25zOlxuICAgICAqIC0gb24gZGVzdG90aW5nIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGFsIHN0YXRlXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgU2l6ZXMucmVtb3ZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gU2l6ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBCdWlsZCAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIHZhciBCdWlsZCA9IHtcbiAgICAgIC8qKlxuICAgICAgICogSW5pdCBnbGlkZSBidWlsZGluZy4gQWRkcyBjbGFzc2VzLCBzZXRzXG4gICAgICAgKiBkaW1lbnNpb25zIGFuZCBzZXR1cHMgaW5pdGlhbCBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIEV2ZW50cy5lbWl0KCdidWlsZC5iZWZvcmUnKTtcblxuICAgICAgICB0aGlzLnR5cGVDbGFzcygpO1xuICAgICAgICB0aGlzLmFjdGl2ZUNsYXNzKCk7XG5cbiAgICAgICAgRXZlbnRzLmVtaXQoJ2J1aWxkLmFmdGVyJyk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQWRkcyBgdHlwZWAgY2xhc3MgdG8gdGhlIGdsaWRlIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgdHlwZUNsYXNzOiBmdW5jdGlvbiB0eXBlQ2xhc3MoKSB7XG4gICAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5hZGQoR2xpZGUuc2V0dGluZ3MuY2xhc3Nlc1tHbGlkZS5zZXR0aW5ncy50eXBlXSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyBhY3RpdmUgY2xhc3MgdG8gY3VycmVudCBzbGlkZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBhY3RpdmVDbGFzczogZnVuY3Rpb24gYWN0aXZlQ2xhc3MoKSB7XG4gICAgICAgIHZhciBjbGFzc2VzID0gR2xpZGUuc2V0dGluZ3MuY2xhc3NlcztcbiAgICAgICAgdmFyIHNsaWRlID0gQ29tcG9uZW50cy5IdG1sLnNsaWRlc1tHbGlkZS5pbmRleF07XG5cbiAgICAgICAgaWYgKHNsaWRlKSB7XG4gICAgICAgICAgc2xpZGUuY2xhc3NMaXN0LmFkZChjbGFzc2VzLmFjdGl2ZVNsaWRlKTtcblxuICAgICAgICAgIHNpYmxpbmdzKHNsaWRlKS5mb3JFYWNoKGZ1bmN0aW9uIChzaWJsaW5nKSB7XG4gICAgICAgICAgICBzaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3Nlcy5hY3RpdmVTbGlkZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIEhUTUwgY2xhc3NlcyBhcHBsaWVkIGF0IGJ1aWxkaW5nLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzZXM6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gICAgICAgIHZhciBjbGFzc2VzID0gR2xpZGUuc2V0dGluZ3MuY2xhc3NlcztcblxuICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXNbR2xpZGUuc2V0dGluZ3MudHlwZV0pO1xuXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2libGluZykge1xuICAgICAgICAgIHNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZShjbGFzc2VzLmFjdGl2ZVNsaWRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFyIGJ1aWxkaW5nIGNsYXNzZXM6XG4gICAgICogLSBvbiBkZXN0cm95aW5nIHRvIGJyaW5nIEhUTUwgdG8gaXRzIGluaXRpYWwgc3RhdGVcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHRvIHJlbW92ZSBjbGFzc2VzIGJlZm9yZSByZW1vdW50aW5nIGNvbXBvbmVudFxuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ2Rlc3Ryb3knLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIEJ1aWxkLnJlbW92ZUNsYXNzZXMoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW91bnQgY29tcG9uZW50OlxuICAgICAqIC0gb24gcmVzaXppbmcgb2YgdGhlIHdpbmRvdyB0byBjYWxjdWxhdGUgbmV3IGRpbWVudGlvbnNcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHNldHRpbmdzIHZpYSBBUElcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydyZXNpemUnLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIEJ1aWxkLm1vdW50KCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTd2FwIGFjdGl2ZSBjbGFzcyBvZiBjdXJyZW50IHNsaWRlOlxuICAgICAqIC0gYWZ0ZXIgZWFjaCBtb3ZlIHRvIHRoZSBuZXcgaW5kZXhcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ21vdmUuYWZ0ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBCdWlsZC5hY3RpdmVDbGFzcygpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIEJ1aWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ2xvbmVzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgdmFyIENsb25lcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIHBhdHRlcm4gbWFwIGFuZCBjb2xsZWN0IHNsaWRlcyB0byBiZSBjbG9uZWQuXG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuXG4gICAgICAgIGlmIChHbGlkZS5pc1R5cGUoJ2Nhcm91c2VsJykpIHtcbiAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5jb2xsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBDb2xsZWN0IGNsb25lcyB3aXRoIHBhdHRlcm4uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgY29sbGVjdDogZnVuY3Rpb24gY29sbGVjdCgpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICAgICAgdmFyIHNsaWRlcyA9IENvbXBvbmVudHMuSHRtbC5zbGlkZXM7XG4gICAgICAgIHZhciBfR2xpZGUkc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncyxcbiAgICAgICAgICAgIHBlclZpZXcgPSBfR2xpZGUkc2V0dGluZ3MucGVyVmlldyxcbiAgICAgICAgICAgIGNsYXNzZXMgPSBfR2xpZGUkc2V0dGluZ3MuY2xhc3NlcztcblxuXG4gICAgICAgIHZhciBwZWVrSW5jcmVtZW50ZXIgPSArISFHbGlkZS5zZXR0aW5ncy5wZWVrO1xuICAgICAgICB2YXIgcGFydCA9IHBlclZpZXcgKyBwZWVrSW5jcmVtZW50ZXI7XG4gICAgICAgIHZhciBzdGFydCA9IHNsaWRlcy5zbGljZSgwLCBwYXJ0KTtcbiAgICAgICAgdmFyIGVuZCA9IHNsaWRlcy5zbGljZSgtcGFydCk7XG5cbiAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHBlclZpZXcgLyBzbGlkZXMubGVuZ3RoKSk7IHIrKykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjbG9uZSA9IHN0YXJ0W2ldLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgY2xvbmUuY2xhc3NMaXN0LmFkZChjbGFzc2VzLmNsb25lU2xpZGUpO1xuXG4gICAgICAgICAgICBpdGVtcy5wdXNoKGNsb25lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZW5kLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIF9jbG9uZSA9IGVuZFtfaV0uY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgICBfY2xvbmUuY2xhc3NMaXN0LmFkZChjbGFzc2VzLmNsb25lU2xpZGUpO1xuXG4gICAgICAgICAgICBpdGVtcy51bnNoaWZ0KF9jbG9uZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEFwcGVuZCBjbG9uZWQgc2xpZGVzIHdpdGggZ2VuZXJhdGVkIHBhdHRlcm4uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIHZhciBfQ29tcG9uZW50cyRIdG1sID0gQ29tcG9uZW50cy5IdG1sLFxuICAgICAgICAgICAgd3JhcHBlciA9IF9Db21wb25lbnRzJEh0bWwud3JhcHBlcixcbiAgICAgICAgICAgIHNsaWRlcyA9IF9Db21wb25lbnRzJEh0bWwuc2xpZGVzO1xuXG5cbiAgICAgICAgdmFyIGhhbGYgPSBNYXRoLmZsb29yKGl0ZW1zLmxlbmd0aCAvIDIpO1xuICAgICAgICB2YXIgcHJlcGVuZCA9IGl0ZW1zLnNsaWNlKDAsIGhhbGYpLnJldmVyc2UoKTtcbiAgICAgICAgdmFyIGFwcGVuZCA9IGl0ZW1zLnNsaWNlKGhhbGYsIGl0ZW1zLmxlbmd0aCk7XG4gICAgICAgIHZhciB3aWR0aCA9IENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aCArICdweCc7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcHBlbmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFwcGVuZFtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBwcmVwZW5kLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICB3cmFwcGVyLmluc2VydEJlZm9yZShwcmVwZW5kW19pMl0sIHNsaWRlc1swXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBpdGVtcy5sZW5ndGg7IF9pMysrKSB7XG4gICAgICAgICAgaXRlbXNbX2kzXS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlIGFsbCBjbG9uZWQgc2xpZGVzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zO1xuXG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnJlbW92ZUNoaWxkKGl0ZW1zW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoQ2xvbmVzLCAnZ3JvdycsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBhZGRpdGlvbmFsIGRpbWVudGlvbnMgdmFsdWUgY2F1c2VkIGJ5IGNsb25lcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gKENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aCArIENvbXBvbmVudHMuR2Fwcy52YWx1ZSkgKiBDbG9uZXMuaXRlbXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kIGFkZGl0aW9uYWwgc2xpZGUncyBjbG9uZXM6XG4gICAgICogLSB3aGlsZSBnbGlkZSdzIHR5cGUgaXMgYGNhcm91c2VsYFxuICAgICAqL1xuICAgIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgQ2xvbmVzLnJlbW92ZSgpO1xuICAgICAgQ2xvbmVzLm1vdW50KCk7XG4gICAgICBDbG9uZXMuYXBwZW5kKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmQgYWRkaXRpb25hbCBzbGlkZSdzIGNsb25lczpcbiAgICAgKiAtIHdoaWxlIGdsaWRlJ3MgdHlwZSBpcyBgY2Fyb3VzZWxgXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdidWlsZC5iZWZvcmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoR2xpZGUuaXNUeXBlKCdjYXJvdXNlbCcpKSB7XG4gICAgICAgIENsb25lcy5hcHBlbmQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjbG9uZXMgSFRNTEVsZW1lbnRzOlxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gYnJpbmcgSFRNTCB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIENsb25lcy5yZW1vdmUoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBDbG9uZXM7XG4gIH1cblxuICB2YXIgRXZlbnRzQmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIEV2ZW50c0JpbmRlciBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBFdmVudHNCaW5kZXIoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50c0JpbmRlcik7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnRzIGxpc3RlbmVycyB0byBhcnJvd3MgSFRNTCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ3xBcnJheX0gZXZlbnRzXG4gICAgICogQHBhcmFtICB7RWxlbWVudHxXaW5kb3d8RG9jdW1lbnR9IGVsXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNsb3N1cmVcbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufE9iamVjdH0gY2FwdHVyZVxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG5cblxuICAgIGNyZWF0ZUNsYXNzKEV2ZW50c0JpbmRlciwgW3tcbiAgICAgIGtleTogJ29uJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudHMsIGVsLCBjbG9zdXJlKSB7XG4gICAgICAgIHZhciBjYXB0dXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcblxuICAgICAgICBpZiAoaXNTdHJpbmcoZXZlbnRzKSkge1xuICAgICAgICAgIGV2ZW50cyA9IFtldmVudHNdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudHNbaV1dID0gY2xvc3VyZTtcblxuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCB0aGlzLmxpc3RlbmVyc1tldmVudHNbaV1dLCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGZyb20gYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7U3RyaW5nfEFycmF5fSBldmVudHNcbiAgICAgICAqIEBwYXJhbSAge0VsZW1lbnR8V2luZG93fERvY3VtZW50fSBlbFxuICAgICAgICogQHBhcmFtICB7Qm9vbGVhbnxPYmplY3R9IGNhcHR1cmVcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogJ29mZicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50cywgZWwpIHtcbiAgICAgICAgdmFyIGNhcHR1cmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc1N0cmluZyhldmVudHMpKSB7XG4gICAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCB0aGlzLmxpc3RlbmVyc1tldmVudHNbaV1dLCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIERlc3Ryb3kgY29sbGVjdGVkIGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gRXZlbnRzQmluZGVyO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gUmVzaXplIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAgICovXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAgIHZhciBSZXNpemUgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEluaXRpYWxpemVzIHdpbmRvdyBiaW5kaW5ncy5cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICB0aGlzLmJpbmQoKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBCaW5kcyBgcmV6c2l6ZWAgbGlzdGVuZXIgdG8gdGhlIHdpbmRvdy5cbiAgICAgICAqIEl0J3MgYSBjb3N0bHkgZXZlbnQsIHNvIHdlIGFyZSBkZWJvdW5jaW5nIGl0LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICAgIEJpbmRlci5vbigncmVzaXplJywgd2luZG93LCB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3Jlc2l6ZScpO1xuICAgICAgICB9LCBHbGlkZS5zZXR0aW5ncy50aHJvdHRsZSkpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFVuYmluZHMgbGlzdGVuZXJzIGZyb20gdGhlIHdpbmRvdy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgICAgQmluZGVyLm9mZigncmVzaXplJywgd2luZG93KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGJpbmRpbmdzIGZyb20gd2luZG93OlxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gcmVtb3ZlIGFkZGVkIEV2ZW50TGlzdGVuZXJcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBSZXNpemUudW5iaW5kKCk7XG4gICAgICBCaW5kZXIuZGVzdHJveSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlc2l6ZTtcbiAgfVxuXG4gIHZhciBWQUxJRF9ESVJFQ1RJT05TID0gWydsdHInLCAncnRsJ107XG4gIHZhciBGTElQRURfTU9WRU1FTlRTID0ge1xuICAgICc+JzogJzwnLFxuICAgICc8JzogJz4nLFxuICAgICc9JzogJz0nXG4gIH07XG5cbiAgZnVuY3Rpb24gRGlyZWN0aW9uIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgdmFyIERpcmVjdGlvbiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0dXBzIGdhcCB2YWx1ZSBiYXNlZCBvbiBzZXR0aW5ncy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBHbGlkZS5zZXR0aW5ncy5kaXJlY3Rpb247XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzb2x2ZXMgcGF0dGVybiBiYXNlZCBvbiBkaXJlY3Rpb24gdmFsdWVcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVyblxuICAgICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgICAqL1xuICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShwYXR0ZXJuKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHBhdHRlcm4uc2xpY2UoMCwgMSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXMoJ3J0bCcpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQodG9rZW4pLmpvaW4oRkxJUEVEX01PVkVNRU5UU1t0b2tlbl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2tzIHZhbHVlIG9mIGRpcmVjdGlvbiBtb2RlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb25cbiAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAgICovXG4gICAgICBpczogZnVuY3Rpb24gaXMoZGlyZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBkaXJlY3Rpb247XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQXBwbGllcyBkaXJlY3Rpb24gY2xhc3MgdG8gdGhlIHJvb3QgSFRNTCBlbGVtZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcygpIHtcbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LmFkZChHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmRpcmVjdGlvblt0aGlzLnZhbHVlXSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBkaXJlY3Rpb24gY2xhc3MgZnJvbSB0aGUgcm9vdCBIVE1MIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKCkge1xuICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QucmVtb3ZlKEdsaWRlLnNldHRpbmdzLmNsYXNzZXMuZGlyZWN0aW9uW3RoaXMudmFsdWVdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lKERpcmVjdGlvbiwgJ3ZhbHVlJywge1xuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBkaXJlY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEaXJlY3Rpb24uX3Y7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKFZBTElEX0RJUkVDVElPTlMuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgICAgIERpcmVjdGlvbi5fdiA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oJ0RpcmVjdGlvbiB2YWx1ZSBtdXN0IGJlIGBsdHJgIG9yIGBydGxgJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENsZWFyIGRpcmVjdGlvbiBjbGFzczpcbiAgICAgKiAtIG9uIGRlc3Ryb3kgdG8gYnJpbmcgSFRNTCB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgICAqIC0gb24gdXBkYXRlIHRvIHJlbW92ZSBjbGFzcyBiZWZvcmUgcmVhcHBsaW5nIGJlbGxvd1xuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ2Rlc3Ryb3knLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIERpcmVjdGlvbi5yZW1vdmVDbGFzcygpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3VudCBjb21wb25lbnQ6XG4gICAgICogLSBvbiB1cGRhdGUgdG8gcmVmbGVjdCBjaGFuZ2VzIGluIGRpcmVjdGlvbiB2YWx1ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgRGlyZWN0aW9uLm1vdW50KCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBkaXJlY3Rpb24gY2xhc3M6XG4gICAgICogLSBiZWZvcmUgYnVpbGRpbmcgdG8gYXBwbHkgY2xhc3MgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICogLSBvbiB1cGRhdGluZyB0byByZWFwcGx5IGRpcmVjdGlvbiBjbGFzcyB0aGF0IG1heSBjaGFuZ2VkXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBEaXJlY3Rpb24uYWRkQ2xhc3MoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBEaXJlY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogUmVmbGVjdHMgdmFsdWUgb2YgZ2xpZGUgbW92ZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIFJ0bCAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBOZWdhdGVzIHRoZSBwYXNzZWQgdHJhbnNsYXRlIGlmIGdsaWRlIGlzIGluIFJUTCBvcHRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7TnVtYmVyfSB0cmFuc2xhdGVcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgbW9kaWZ5OiBmdW5jdGlvbiBtb2RpZnkodHJhbnNsYXRlKSB7XG4gICAgICAgIGlmIChDb21wb25lbnRzLkRpcmVjdGlvbi5pcygncnRsJykpIHtcbiAgICAgICAgICByZXR1cm4gLXRyYW5zbGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGdsaWRlIG1vdmVtZW50IHdpdGggYSBgZ2FwYCBzZXR0aW5ncy5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBHbGlkZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gR2FwIChHbGlkZSwgQ29tcG9uZW50cykge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIE1vZGlmaWVzIHBhc3NlZCB0cmFuc2xhdGUgdmFsdWUgd2l0aCBudW1iZXIgaW4gdGhlIGBnYXBgIHNldHRpbmdzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIG1vZGlmeTogZnVuY3Rpb24gbW9kaWZ5KHRyYW5zbGF0ZSkge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRlICsgQ29tcG9uZW50cy5HYXBzLnZhbHVlICogR2xpZGUuaW5kZXg7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGdsaWRlIG1vdmVtZW50IHdpdGggd2lkdGggb2YgYWRkaXRpb25hbCBjbG9uZXMgd2lkdGguXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAgICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIEdyb3cgKEdsaWRlLCBDb21wb25lbnRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQWRkcyB0byB0aGUgcGFzc2VkIHRyYW5zbGF0ZSB3aWR0aCBvZiB0aGUgaGFsZiBvZiBjbG9uZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7TnVtYmVyfSB0cmFuc2xhdGVcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAqL1xuICAgICAgbW9kaWZ5OiBmdW5jdGlvbiBtb2RpZnkodHJhbnNsYXRlKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGUgKyBDb21wb25lbnRzLkNsb25lcy5ncm93IC8gMjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgZ2xpZGUgbW92ZW1lbnQgd2l0aCBhIGBwZWVrYCBzZXR0aW5ncy5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBHbGlkZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gUGVla2luZyAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBNb2RpZmllcyBwYXNzZWQgdHJhbnNsYXRlIHZhbHVlIHdpdGggYSBgcGVla2Agc2V0dGluZy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBtb2RpZnk6IGZ1bmN0aW9uIG1vZGlmeSh0cmFuc2xhdGUpIHtcbiAgICAgICAgaWYgKEdsaWRlLnNldHRpbmdzLmZvY3VzQXQgPj0gMCkge1xuICAgICAgICAgIHZhciBwZWVrID0gQ29tcG9uZW50cy5QZWVrLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHBlZWspKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlIC0gcGVlay5iZWZvcmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSAtIHBlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBnbGlkZSBtb3ZlbWVudCB3aXRoIGEgYGZvY3VzQXRgIHNldHRpbmdzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IEdsaWRlXG4gICAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBmdW5jdGlvbiBGb2N1c2luZyAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBNb2RpZmllcyBwYXNzZWQgdHJhbnNsYXRlIHZhbHVlIHdpdGggaW5kZXggaW4gdGhlIGBmb2N1c0F0YCBzZXR0aW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIG1vZGlmeTogZnVuY3Rpb24gbW9kaWZ5KHRyYW5zbGF0ZSkge1xuICAgICAgICB2YXIgZ2FwID0gQ29tcG9uZW50cy5HYXBzLnZhbHVlO1xuICAgICAgICB2YXIgd2lkdGggPSBDb21wb25lbnRzLlNpemVzLndpZHRoO1xuICAgICAgICB2YXIgZm9jdXNBdCA9IEdsaWRlLnNldHRpbmdzLmZvY3VzQXQ7XG4gICAgICAgIHZhciBzbGlkZVdpZHRoID0gQ29tcG9uZW50cy5TaXplcy5zbGlkZVdpZHRoO1xuXG4gICAgICAgIGlmIChmb2N1c0F0ID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUgLSAod2lkdGggLyAyIC0gc2xpZGVXaWR0aCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSAtIHNsaWRlV2lkdGggKiBmb2N1c0F0IC0gZ2FwICogZm9jdXNBdDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgZGlmZnJlbnQgdHJhbnNmb3JtZXJzIG9uIHRyYW5zbGF0ZSB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBHbGlkZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgZnVuY3Rpb24gbXV0YXRvciAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIE1lcmdlIGluc3RhbmNlIHRyYW5zZm9ybWVycyB3aXRoIGNvbGxlY3Rpb24gb2YgZGVmYXVsdCB0cmFuc2Zvcm1lcnMuXG4gICAgICogSXQncyBpbXBvcnRhbnQgdGhhdCB0aGUgUnRsIGNvbXBvbmVudCBiZSBsYXN0IG9uIHRoZSBsaXN0LFxuICAgICAqIHNvIGl0IHJlZmxlY3RzIGFsbCBwcmV2aW91cyB0cmFuc2Zvcm1hdGlvbnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgdmFyIFRSQU5TRk9STUVSUyA9IFtHYXAsIEdyb3csIFBlZWtpbmcsIEZvY3VzaW5nXS5jb25jYXQoR2xpZGUuX3QsIFtSdGxdKTtcblxuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIFBpcGxpbmVzIHRyYW5zbGF0ZSB2YWx1ZSB3aXRoIHJlZ2lzdGVyZWQgdHJhbnNmb3JtZXJzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIG11dGF0ZTogZnVuY3Rpb24gbXV0YXRlKHRyYW5zbGF0ZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRSQU5TRk9STUVSUy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0cmFuc2Zvcm1lciA9IFRSQU5TRk9STUVSU1tpXTtcblxuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRyYW5zZm9ybWVyKSAmJiBpc0Z1bmN0aW9uKHRyYW5zZm9ybWVyKCkubW9kaWZ5KSkge1xuICAgICAgICAgICAgdHJhbnNsYXRlID0gdHJhbnNmb3JtZXIoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykubW9kaWZ5KHRyYW5zbGF0ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhcm4oJ1RyYW5zZm9ybWVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgbW9kaWZ5KClgIG1ldGhvZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyYW5zbGF0ZSAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIHZhciBUcmFuc2xhdGUgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdHJhbnNsYXRlIG9uIEhUTUwgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBtdXRhdG9yKEdsaWRlLCBDb21wb25lbnRzKS5tdXRhdGUodmFsdWUpO1xuXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgLTEgKiB0cmFuc2Zvcm0gKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyB2YWx1ZSBvZiB0cmFuc2xhdGUgZnJvbSBIVE1MIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbmV3IHRyYW5zbGF0ZSB2YWx1ZTpcbiAgICAgKiAtIG9uIG1vdmUgdG8gcmVmbGVjdCBpbmRleCBjaGFuZ2VcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEkgdG8gcmVmbGVjdCBwb3NzaWJsZSBjaGFuZ2VzIGluIG9wdGlvbnNcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ21vdmUnLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgdmFyIGdhcCA9IENvbXBvbmVudHMuR2Fwcy52YWx1ZTtcbiAgICAgIHZhciBsZW5ndGggPSBDb21wb25lbnRzLlNpemVzLmxlbmd0aDtcbiAgICAgIHZhciB3aWR0aCA9IENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aDtcblxuICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSAmJiBDb21wb25lbnRzLlJ1bi5pc09mZnNldCgnPCcpKSB7XG4gICAgICAgIENvbXBvbmVudHMuVHJhbnNpdGlvbi5hZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3RyYW5zbGF0ZS5qdW1wJyk7XG5cbiAgICAgICAgICBUcmFuc2xhdGUuc2V0KHdpZHRoICogKGxlbmd0aCAtIDEpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFRyYW5zbGF0ZS5zZXQoLXdpZHRoIC0gZ2FwICogbGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSAmJiBDb21wb25lbnRzLlJ1bi5pc09mZnNldCgnPicpKSB7XG4gICAgICAgIENvbXBvbmVudHMuVHJhbnNpdGlvbi5hZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3RyYW5zbGF0ZS5qdW1wJyk7XG5cbiAgICAgICAgICBUcmFuc2xhdGUuc2V0KDApO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gVHJhbnNsYXRlLnNldCh3aWR0aCAqIGxlbmd0aCArIGdhcCAqIGxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBUcmFuc2xhdGUuc2V0KGNvbnRleHQubW92ZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRyYW5zbGF0ZTpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0YWwgc3RhdGVcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBUcmFuc2xhdGUucmVtb3ZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gVHJhbnNsYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbiAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIEhvbGRzIGluYWN0aXZpdHkgc3RhdHVzIG9mIHRyYW5zaXRpb24uXG4gICAgICogV2hlbiB0cnVlIHRyYW5zaXRpb24gaXMgbm90IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB2YXIgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIHZhciBUcmFuc2l0aW9uID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBDb21wb3NlcyBzdHJpbmcgb2YgdGhlIENTUyB0cmFuc2l0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAgICovXG4gICAgICBjb21wb3NlOiBmdW5jdGlvbiBjb21wb3NlKHByb3BlcnR5KSB7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuXG4gICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcGVydHkgKyAnICcgKyB0aGlzLmR1cmF0aW9uICsgJ21zICcgKyBzZXR0aW5ncy5hbmltYXRpb25UaW1pbmdGdW5jO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb3BlcnR5ICsgJyAwbXMgJyArIHNldHRpbmdzLmFuaW1hdGlvblRpbWluZ0Z1bmM7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB2YWx1ZSBvZiB0cmFuc2l0aW9uIG9uIEhUTUwgZWxlbWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZz19IHByb3BlcnR5XG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCgpIHtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAndHJhbnNmb3JtJztcblxuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS50cmFuc2l0aW9uID0gdGhpcy5jb21wb3NlKHByb3BlcnR5KTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIHZhbHVlIG9mIHRyYW5zaXRpb24gZnJvbSBIVE1MIGVsZW1lbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSdW5zIGNhbGxiYWNrIGFmdGVyIGFuaW1hdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGFmdGVyOiBmdW5jdGlvbiBhZnRlcihjYWxsYmFjaykge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9LCB0aGlzLmR1cmF0aW9uKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBFbmFibGUgdHJhbnNpdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnNldCgpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIERpc2FibGUgdHJhbnNpdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgICBkaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5zZXQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lKFRyYW5zaXRpb24sICdkdXJhdGlvbicsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBiYXNlZFxuICAgICAgICogb24gY3VycmVudGx5IHJ1bm5pbmcgYW5pbWF0aW9uIHR5cGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG5cbiAgICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnc2xpZGVyJykgJiYgQ29tcG9uZW50cy5SdW4ub2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRpbmdzLnJld2luZER1cmF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLmFuaW1hdGlvbkR1cmF0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRyYW5zaXRpb24gYHN0eWxlYCB2YWx1ZTpcbiAgICAgKiAtIG9uIGVhY2ggbW92aW5nLCBiZWNhdXNlIGl0IG1heSBiZSBjbGVhcmVkIGJ5IG9mZnNldCBtb3ZlXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdtb3ZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgVHJhbnNpdGlvbi5zZXQoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIERpc2FibGUgdHJhbnNpdGlvbjpcbiAgICAgKiAtIGJlZm9yZSBpbml0aWFsIGJ1aWxkIHRvIGF2b2lkIHRyYW5zaXRpb25pbmcgZnJvbSBgMGAgdG8gYHN0YXJ0QXRgIGluZGV4XG4gICAgICogLSB3aGlsZSByZXNpemluZyB3aW5kb3cgYW5kIHJlY2FsY3VsYXRpbmcgZGltZW50aW9uc1xuICAgICAqIC0gb24ganVtcGluZyBmcm9tIG9mZnNldCB0cmFuc2l0aW9uIGF0IHN0YXJ0IGFuZCBlbmQgZWRnZXMgaW4gYGNhcm91c2VsYCB0eXBlXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3Jlc2l6ZScsICd0cmFuc2xhdGUuanVtcCddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBUcmFuc2l0aW9uLmRpc2FibGUoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSB0cmFuc2l0aW9uOlxuICAgICAqIC0gb24gZWFjaCBydW5uaW5nLCBiZWNhdXNlIGl0IG1heSBiZSBkaXNhYmxlZCBieSBvZmZzZXQgbW92ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbigncnVuJywgZnVuY3Rpb24gKCkge1xuICAgICAgVHJhbnNpdGlvbi5lbmFibGUoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0cmFuc2l0aW9uOlxuICAgICAqIC0gb24gZGVzdHJveWluZyB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRhbCBzdGF0ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFRyYW5zaXRpb24ucmVtb3ZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gVHJhbnNpdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0IHZpYSBhIGdldHRlciBpbiB0aGUgb3B0aW9ucyBvYmplY3QgdG8gc2VlXG4gICAqIGlmIHRoZSBwYXNzaXZlIHByb3BlcnR5IGlzIGFjY2Vzc2VkLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL0V2ZW50TGlzdGVuZXJPcHRpb25zL2Jsb2IvZ2gtcGFnZXMvZXhwbGFpbmVyLm1kI2ZlYXR1cmUtZGV0ZWN0aW9uXG4gICAqL1xuXG4gIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxuICB0cnkge1xuICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHN1cHBvcnRzUGFzc2l2ZSQxID0gc3VwcG9ydHNQYXNzaXZlO1xuXG4gIHZhciBTVEFSVF9FVkVOVFMgPSBbJ3RvdWNoc3RhcnQnLCAnbW91c2Vkb3duJ107XG4gIHZhciBNT1ZFX0VWRU5UUyA9IFsndG91Y2htb3ZlJywgJ21vdXNlbW92ZSddO1xuICB2YXIgRU5EX0VWRU5UUyA9IFsndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnLCAnbW91c2V1cCcsICdtb3VzZWxlYXZlJ107XG4gIHZhciBNT1VTRV9FVkVOVFMgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCcsICdtb3VzZWxlYXZlJ107XG5cbiAgZnVuY3Rpb24gU3dpcGUgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxuICAgICAqXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cbiAgICAgKi9cbiAgICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gICAgdmFyIHN3aXBlU2luID0gMDtcbiAgICB2YXIgc3dpcGVTdGFydFggPSAwO1xuICAgIHZhciBzd2lwZVN0YXJ0WSA9IDA7XG4gICAgdmFyIGRpc2FibGVkID0gZmFsc2U7XG4gICAgdmFyIGNhcHR1cmUgPSBzdXBwb3J0c1Bhc3NpdmUkMSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogZmFsc2U7XG5cbiAgICB2YXIgU3dpcGUgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEluaXRpYWxpemVzIHN3aXBlIGJpbmRpbmdzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5iaW5kU3dpcGVTdGFydCgpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZXIgZm9yIGBzd2lwZXN0YXJ0YCBldmVudC4gQ2FsY3VsYXRlcyBlbnRyeSBwb2ludHMgb2YgdGhlIHVzZXIncyB0YXAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFkaXNhYmxlZCAmJiAhR2xpZGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcblxuICAgICAgICAgIHZhciBzd2lwZSA9IHRoaXMudG91Y2hlcyhldmVudCk7XG5cbiAgICAgICAgICBzd2lwZVNpbiA9IG51bGw7XG4gICAgICAgICAgc3dpcGVTdGFydFggPSB0b0ludChzd2lwZS5wYWdlWCk7XG4gICAgICAgICAgc3dpcGVTdGFydFkgPSB0b0ludChzd2lwZS5wYWdlWSk7XG5cbiAgICAgICAgICB0aGlzLmJpbmRTd2lwZU1vdmUoKTtcbiAgICAgICAgICB0aGlzLmJpbmRTd2lwZUVuZCgpO1xuXG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3N3aXBlLnN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGVyIGZvciBgc3dpcGVtb3ZlYCBldmVudC4gQ2FsY3VsYXRlcyB1c2VyJ3MgdGFwIGFuZ2xlIGFuZCBkaXN0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAqL1xuICAgICAgbW92ZTogZnVuY3Rpb24gbW92ZShldmVudCkge1xuICAgICAgICBpZiAoIUdsaWRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgdmFyIF9HbGlkZSRzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzLFxuICAgICAgICAgICAgICB0b3VjaEFuZ2xlID0gX0dsaWRlJHNldHRpbmdzLnRvdWNoQW5nbGUsXG4gICAgICAgICAgICAgIHRvdWNoUmF0aW8gPSBfR2xpZGUkc2V0dGluZ3MudG91Y2hSYXRpbyxcbiAgICAgICAgICAgICAgY2xhc3NlcyA9IF9HbGlkZSRzZXR0aW5ncy5jbGFzc2VzO1xuXG5cbiAgICAgICAgICB2YXIgc3dpcGUgPSB0aGlzLnRvdWNoZXMoZXZlbnQpO1xuXG4gICAgICAgICAgdmFyIHN1YkV4U3ggPSB0b0ludChzd2lwZS5wYWdlWCkgLSBzd2lwZVN0YXJ0WDtcbiAgICAgICAgICB2YXIgc3ViRXlTeSA9IHRvSW50KHN3aXBlLnBhZ2VZKSAtIHN3aXBlU3RhcnRZO1xuICAgICAgICAgIHZhciBwb3dFWCA9IE1hdGguYWJzKHN1YkV4U3ggPDwgMik7XG4gICAgICAgICAgdmFyIHBvd0VZID0gTWF0aC5hYnMoc3ViRXlTeSA8PCAyKTtcbiAgICAgICAgICB2YXIgc3dpcGVIeXBvdGVudXNlID0gTWF0aC5zcXJ0KHBvd0VYICsgcG93RVkpO1xuICAgICAgICAgIHZhciBzd2lwZUNhdGhldHVzID0gTWF0aC5zcXJ0KHBvd0VZKTtcblxuICAgICAgICAgIHN3aXBlU2luID0gTWF0aC5hc2luKHN3aXBlQ2F0aGV0dXMgLyBzd2lwZUh5cG90ZW51c2UpO1xuXG4gICAgICAgICAgaWYgKHN3aXBlU2luICogMTgwIC8gTWF0aC5QSSA8IHRvdWNoQW5nbGUpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBDb21wb25lbnRzLk1vdmUubWFrZShzdWJFeFN4ICogdG9GbG9hdCh0b3VjaFJhdGlvKSk7XG5cbiAgICAgICAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3Nlcy5kcmFnZ2luZyk7XG5cbiAgICAgICAgICAgIEV2ZW50cy5lbWl0KCdzd2lwZS5tb3ZlJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGVyIGZvciBgc3dpcGVlbmRgIGV2ZW50LiBGaW5pdGlhbGl6ZXMgdXNlcidzIHRhcCBhbmQgZGVjaWRlcyBhYm91dCBnbGlkZSBtb3ZlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFHbGlkZS5kaXNhYmxlZCkge1xuICAgICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuXG4gICAgICAgICAgdmFyIHN3aXBlID0gdGhpcy50b3VjaGVzKGV2ZW50KTtcbiAgICAgICAgICB2YXIgdGhyZXNob2xkID0gdGhpcy50aHJlc2hvbGQoZXZlbnQpO1xuXG4gICAgICAgICAgdmFyIHN3aXBlRGlzdGFuY2UgPSBzd2lwZS5wYWdlWCAtIHN3aXBlU3RhcnRYO1xuICAgICAgICAgIHZhciBzd2lwZURlZyA9IHN3aXBlU2luICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgICB2YXIgc3RlcHMgPSBNYXRoLnJvdW5kKHN3aXBlRGlzdGFuY2UgLyBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGgpO1xuXG4gICAgICAgICAgdGhpcy5lbmFibGUoKTtcblxuICAgICAgICAgIGlmIChzd2lwZURpc3RhbmNlID4gdGhyZXNob2xkICYmIHN3aXBlRGVnIDwgc2V0dGluZ3MudG91Y2hBbmdsZSkge1xuICAgICAgICAgICAgLy8gV2hpbGUgc3dpcGUgaXMgcG9zaXRpdmUgYW5kIGdyZWF0ZXIgdGhhbiB0aHJlc2hvbGQgbW92ZSBiYWNrd2FyZC5cbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5wZXJUb3VjaCkge1xuICAgICAgICAgICAgICBzdGVwcyA9IE1hdGgubWluKHN0ZXBzLCB0b0ludChzZXR0aW5ncy5wZXJUb3VjaCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoQ29tcG9uZW50cy5EaXJlY3Rpb24uaXMoJ3J0bCcpKSB7XG4gICAgICAgICAgICAgIHN0ZXBzID0gLXN0ZXBzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBDb21wb25lbnRzLlJ1bi5tYWtlKENvbXBvbmVudHMuRGlyZWN0aW9uLnJlc29sdmUoJzwnICsgc3RlcHMpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlRGlzdGFuY2UgPCAtdGhyZXNob2xkICYmIHN3aXBlRGVnIDwgc2V0dGluZ3MudG91Y2hBbmdsZSkge1xuICAgICAgICAgICAgLy8gV2hpbGUgc3dpcGUgaXMgbmVnYXRpdmUgYW5kIGxvd2VyIHRoYW4gbmVnYXRpdmUgdGhyZXNob2xkIG1vdmUgZm9yd2FyZC5cbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5wZXJUb3VjaCkge1xuICAgICAgICAgICAgICBzdGVwcyA9IE1hdGgubWF4KHN0ZXBzLCAtdG9JbnQoc2V0dGluZ3MucGVyVG91Y2gpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKENvbXBvbmVudHMuRGlyZWN0aW9uLmlzKCdydGwnKSkge1xuICAgICAgICAgICAgICBzdGVwcyA9IC1zdGVwcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZShDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlKCc+JyArIHN0ZXBzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdoaWxlIHN3aXBlIGRvbid0IHJlYWNoIGRpc3RhbmNlIGFwcGx5IHByZXZpb3VzIHRyYW5zZm9ybS5cbiAgICAgICAgICAgIENvbXBvbmVudHMuTW92ZS5tYWtlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShzZXR0aW5ncy5jbGFzc2VzLmRyYWdnaW5nKTtcblxuICAgICAgICAgIHRoaXMudW5iaW5kU3dpcGVNb3ZlKCk7XG4gICAgICAgICAgdGhpcy51bmJpbmRTd2lwZUVuZCgpO1xuXG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3N3aXBlLmVuZCcpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQmluZHMgc3dpcGUncyBzdGFydGluZyBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kU3dpcGVTdGFydDogZnVuY3Rpb24gYmluZFN3aXBlU3RhcnQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XG4gICAgICAgICAgQmluZGVyLm9uKFNUQVJUX0VWRU5UU1swXSwgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnQoZXZlbnQpO1xuICAgICAgICAgIH0sIGNhcHR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLmRyYWdUaHJlc2hvbGQpIHtcbiAgICAgICAgICBCaW5kZXIub24oU1RBUlRfRVZFTlRTWzFdLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5zdGFydChldmVudCk7XG4gICAgICAgICAgfSwgY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBVbmJpbmRzIHN3aXBlJ3Mgc3RhcnRpbmcgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgdW5iaW5kU3dpcGVTdGFydDogZnVuY3Rpb24gdW5iaW5kU3dpcGVTdGFydCgpIHtcbiAgICAgICAgQmluZGVyLm9mZihTVEFSVF9FVkVOVFNbMF0sIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBjYXB0dXJlKTtcbiAgICAgICAgQmluZGVyLm9mZihTVEFSVF9FVkVOVFNbMV0sIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBjYXB0dXJlKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBCaW5kcyBzd2lwZSdzIG1vdmluZyBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kU3dpcGVNb3ZlOiBmdW5jdGlvbiBiaW5kU3dpcGVNb3ZlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICBCaW5kZXIub24oTU9WRV9FVkVOVFMsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCB0aHJvdHRsZShmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBfdGhpczIubW92ZShldmVudCk7XG4gICAgICAgIH0sIEdsaWRlLnNldHRpbmdzLnRocm90dGxlKSwgY2FwdHVyZSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogVW5iaW5kcyBzd2lwZSdzIG1vdmluZyBldmVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICB1bmJpbmRTd2lwZU1vdmU6IGZ1bmN0aW9uIHVuYmluZFN3aXBlTW92ZSgpIHtcbiAgICAgICAgQmluZGVyLm9mZihNT1ZFX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGNhcHR1cmUpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEJpbmRzIHN3aXBlJ3MgZW5kaW5nIGV2ZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGJpbmRTd2lwZUVuZDogZnVuY3Rpb24gYmluZFN3aXBlRW5kKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICBCaW5kZXIub24oRU5EX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIF90aGlzMy5lbmQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBVbmJpbmRzIHN3aXBlJ3MgZW5kaW5nIGV2ZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHVuYmluZFN3aXBlRW5kOiBmdW5jdGlvbiB1bmJpbmRTd2lwZUVuZCgpIHtcbiAgICAgICAgQmluZGVyLm9mZihFTkRfRVZFTlRTLCBDb21wb25lbnRzLkh0bWwud3JhcHBlcik7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogTm9ybWFsaXplcyBldmVudCB0b3VjaGVzIHBvaW50cyBhY2NvcnRpbmcgdG8gZGlmZmVyZW50IHR5cGVzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAgICovXG4gICAgICB0b3VjaGVzOiBmdW5jdGlvbiB0b3VjaGVzKGV2ZW50KSB7XG4gICAgICAgIGlmIChNT1VTRV9FVkVOVFMuaW5kZXhPZihldmVudC50eXBlKSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50LnRvdWNoZXNbMF0gfHwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB2YWx1ZSBvZiBtaW5pbXVtIHN3aXBlIGRpc3RhbmNlIHNldHRpbmdzIGJhc2VkIG9uIGV2ZW50IHR5cGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAgICovXG4gICAgICB0aHJlc2hvbGQ6IGZ1bmN0aW9uIHRocmVzaG9sZChldmVudCkge1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcblxuICAgICAgICBpZiAoTU9VU0VfRVZFTlRTLmluZGV4T2YoZXZlbnQudHlwZSkgPiAtMSkge1xuICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5kcmFnVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLnN3aXBlVGhyZXNob2xkO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEVuYWJsZXMgc3dpcGUgZXZlbnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7c2VsZn1cbiAgICAgICAqL1xuICAgICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmVuYWJsZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIERpc2FibGVzIHN3aXBlIGV2ZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3NlbGZ9XG4gICAgICAgKi9cbiAgICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uZGlzYWJsZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGQgY29tcG9uZW50IGNsYXNzOlxuICAgICAqIC0gYWZ0ZXIgaW5pdGlhbCBidWlsZGluZ1xuICAgICAqL1xuICAgIEV2ZW50cy5vbignYnVpbGQuYWZ0ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QuYWRkKEdsaWRlLnNldHRpbmdzLmNsYXNzZXMuc3dpcGVhYmxlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBzd2lwaW5nIGJpbmRpbmdzOlxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gcmVtb3ZlIGFkZGVkIEV2ZW50TGlzdGVuZXJzXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgU3dpcGUudW5iaW5kU3dpcGVTdGFydCgpO1xuICAgICAgU3dpcGUudW5iaW5kU3dpcGVNb3ZlKCk7XG4gICAgICBTd2lwZS51bmJpbmRTd2lwZUVuZCgpO1xuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBTd2lwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEltYWdlcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgICAqL1xuICAgIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XG5cbiAgICB2YXIgSW1hZ2VzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBCaW5kcyBsaXN0ZW5lciB0byBnbGlkZSB3cmFwcGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQmluZHMgYGRyYWdzdGFydGAgZXZlbnQgb24gd3JhcHBlciB0byBwcmV2ZW50IGRyYWdnaW5nIGltYWdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgICBCaW5kZXIub24oJ2RyYWdzdGFydCcsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCB0aGlzLmRyYWdzdGFydCk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogVW5iaW5kcyBgZHJhZ3N0YXJ0YCBldmVudCBvbiB3cmFwcGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgICBCaW5kZXIub2ZmKCdkcmFnc3RhcnQnLCBDb21wb25lbnRzLkh0bWwud3JhcHBlcik7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogRXZlbnQgaGFuZGxlci4gUHJldmVudHMgZHJhZ2dpbmcuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgZHJhZ3N0YXJ0OiBmdW5jdGlvbiBkcmFnc3RhcnQoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGJpbmRpbmdzIGZyb20gaW1hZ2VzOlxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gcmVtb3ZlIGFkZGVkIEV2ZW50TGlzdGVuZXJzXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgSW1hZ2VzLnVuYmluZCgpO1xuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBJbWFnZXM7XG4gIH1cblxuICBmdW5jdGlvbiBBbmNob3JzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAgICovXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEhvbGRzIGRldGFjaGluZyBzdGF0dXMgb2YgYW5jaG9ycy5cbiAgICAgKiBQcmV2ZW50cyBkZXRhY2hpbmcgb2YgYWxyZWFkeSBkZXRhY2hlZCBhbmNob3JzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB2YXIgZGV0YWNoZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEhvbGRzIHByZXZlbnRpbmcgc3RhdHVzIG9mIGFuY2hvcnMuXG4gICAgICogSWYgYHRydWVgIHJlZGlyZWN0aW9uIGFmdGVyIGNsaWNrIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIHZhciBwcmV2ZW50ZWQgPSBmYWxzZTtcblxuICAgIHZhciBBbmNob3JzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBTZXR1cHMgYSBpbml0aWFsIHN0YXRlIG9mIGFuY2hvcnMgY29tcG9uZW50LlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb2xkcyBjb2xsZWN0aW9uIG9mIGFuY2hvcnMgZWxlbWVudHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEB0eXBlIHtIVE1MQ29sbGVjdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2EgPSBDb21wb25lbnRzLkh0bWwud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdhJyk7XG5cbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQmluZHMgZXZlbnRzIHRvIGFuY2hvcnMgaW5zaWRlIGEgdHJhY2suXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgICAgQmluZGVyLm9uKCdjbGljaycsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCB0aGlzLmNsaWNrKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBVbmJpbmRzIGV2ZW50cyBhdHRhY2hlZCB0byBhbmNob3JzIGluc2lkZSBhIHRyYWNrLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgICBCaW5kZXIub2ZmKCdjbGljaycsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGVyIGZvciBjbGljayBldmVudC4gUHJldmVudHMgY2xpY2tzIHdoZW4gZ2xpZGUgaXMgaW4gYHByZXZlbnRgIHN0YXR1cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGV2ZW50XG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soZXZlbnQpIHtcbiAgICAgICAgaWYgKHByZXZlbnRlZCkge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBEZXRhY2hlcyBhbmNob3JzIGNsaWNrIGV2ZW50IGluc2lkZSBnbGlkZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzZWxmfVxuICAgICAgICovXG4gICAgICBkZXRhY2g6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgICAgcHJldmVudGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIWRldGFjaGVkKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLmRyYWdnYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1ocmVmJywgdGhpcy5pdGVtc1tpXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSk7XG5cbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0ucmVtb3ZlQXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGV0YWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQXR0YWNoZXMgYW5jaG9ycyBjbGljayBldmVudHMgaW5zaWRlIGdsaWRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3NlbGZ9XG4gICAgICAgKi9cbiAgICAgIGF0dGFjaDogZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgICAgICBwcmV2ZW50ZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoZGV0YWNoZWQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0uZHJhZ2dhYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB0aGlzLml0ZW1zW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1ocmVmJykpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRldGFjaGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lKEFuY2hvcnMsICdpdGVtcycsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBjb2xsZWN0aW9uIG9mIHRoZSBhcnJvd3MgSFRNTCBlbGVtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudFtdfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEFuY2hvcnMuX2E7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBEZXRhY2ggYW5jaG9ycyBpbnNpZGUgc2xpZGVzOlxuICAgICAqIC0gb24gc3dpcGluZywgc28gdGhleSB3b24ndCByZWRpcmVjdCB0byBpdHMgYGhyZWZgIGF0dHJpYnV0ZXNcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ3N3aXBlLm1vdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBBbmNob3JzLmRldGFjaCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGFuY2hvcnMgaW5zaWRlIHNsaWRlczpcbiAgICAgKiAtIGFmdGVyIHN3aXBpbmcgYW5kIHRyYW5zaXRpb25zIGVuZHMsIHNvIHRoZXkgY2FuIHJlZGlyZWN0IGFmdGVyIGNsaWNrIGFnYWluXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdzd2lwZS5lbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBBbmNob3JzLmF0dGFjaCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmQgYW5jaG9ycyBpbnNpZGUgc2xpZGVzOlxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gYnJpbmcgYW5jaG9ycyB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIEFuY2hvcnMuYXR0YWNoKCk7XG4gICAgICBBbmNob3JzLnVuYmluZCgpO1xuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBBbmNob3JzO1xuICB9XG5cbiAgdmFyIE5BVl9TRUxFQ1RPUiA9ICdbZGF0YS1nbGlkZS1lbD1cImNvbnRyb2xzW25hdl1cIl0nO1xuICB2YXIgQ09OVFJPTFNfU0VMRUNUT1IgPSAnW2RhdGEtZ2xpZGUtZWxePVwiY29udHJvbHNcIl0nO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2xzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAgICovXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAgIHZhciBjYXB0dXJlID0gc3VwcG9ydHNQYXNzaXZlJDEgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuXG4gICAgdmFyIENvbnRyb2xzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBJbml0cyBhcnJvd3MuIEJpbmRzIGV2ZW50cyBsaXN0ZW5lcnNcbiAgICAgICAqIHRvIHRoZSBhcnJvd3MgSFRNTCBlbGVtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsZWN0aW9uIG9mIG5hdmlnYXRpb24gSFRNTCBlbGVtZW50cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHR5cGUge0hUTUxDb2xsZWN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbiA9IENvbXBvbmVudHMuSHRtbC5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoTkFWX1NFTEVDVE9SKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiBjb250cm9scyBIVE1MIGVsZW1lbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAdHlwZSB7SFRNTENvbGxlY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jID0gQ29tcG9uZW50cy5IdG1sLnJvb3QucXVlcnlTZWxlY3RvckFsbChDT05UUk9MU19TRUxFQ1RPUik7XG5cbiAgICAgICAgdGhpcy5hZGRCaW5kaW5ncygpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgc2xpZGUuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgc2V0QWN0aXZlOiBmdW5jdGlvbiBzZXRBY3RpdmUoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuYWRkQ2xhc3ModGhpcy5fbltpXS5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGFjdGl2ZSBjbGFzcyB0byBjdXJyZW50IHNsaWRlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUFjdGl2ZTogZnVuY3Rpb24gcmVtb3ZlQWN0aXZlKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKHRoaXMuX25baV0uY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogVG9nZ2xlcyBhY3RpdmUgY2xhc3Mgb24gaXRlbXMgaW5zaWRlIG5hdmlnYXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3MoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG4gICAgICAgIHZhciBpdGVtID0gY29udHJvbHNbR2xpZGUuaW5kZXhdO1xuXG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKHNldHRpbmdzLmNsYXNzZXMuYWN0aXZlTmF2KTtcblxuICAgICAgICAgIHNpYmxpbmdzKGl0ZW0pLmZvckVhY2goZnVuY3Rpb24gKHNpYmxpbmcpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZShzZXR0aW5ncy5jbGFzc2VzLmFjdGl2ZU5hdik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZW1vdmVzIGFjdGl2ZSBjbGFzcyBmcm9tIGFjdGl2ZSBjb250cm9sLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBjb250cm9sc1xuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNvbnRyb2xzKSB7XG4gICAgICAgIHZhciBpdGVtID0gY29udHJvbHNbR2xpZGUuaW5kZXhdO1xuXG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKEdsaWRlLnNldHRpbmdzLmNsYXNzZXMuYWN0aXZlTmF2KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZHMgaGFuZGxlcyB0byB0aGUgZWFjaCBncm91cCBvZiBjb250cm9scy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBhZGRCaW5kaW5nczogZnVuY3Rpb24gYWRkQmluZGluZ3MoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fYy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuYmluZCh0aGlzLl9jW2ldLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZXMgaGFuZGxlcyBmcm9tIHRoZSBlYWNoIGdyb3VwIG9mIGNvbnRyb2xzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUJpbmRpbmdzOiBmdW5jdGlvbiByZW1vdmVCaW5kaW5ncygpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy51bmJpbmQodGhpcy5fY1tpXS5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBCaW5kcyBldmVudHMgdG8gYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtIVE1MQ29sbGVjdGlvbn0gZWxlbWVudHNcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoZWxlbWVudHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIEJpbmRlci5vbignY2xpY2snLCBlbGVtZW50c1tpXSwgdGhpcy5jbGljayk7XG4gICAgICAgICAgQmluZGVyLm9uKCd0b3VjaHN0YXJ0JywgZWxlbWVudHNbaV0sIHRoaXMuY2xpY2ssIGNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogVW5iaW5kcyBldmVudHMgYmluZGVkIHRvIHRoZSBhcnJvd3MgSFRNTCBlbGVtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0hUTUxDb2xsZWN0aW9ufSBlbGVtZW50c1xuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoZWxlbWVudHMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIEJpbmRlci5vZmYoWydjbGljaycsICd0b3VjaHN0YXJ0J10sIGVsZW1lbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZXMgYGNsaWNrYCBldmVudCBvbiB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKiBNb3ZlcyBzbGlkZXIgaW4gZHJpZWN0aW9uIHByZWNpc2VkIGluXG4gICAgICAgKiBgZGF0YS1nbGlkZS1kaXJgIGF0dHJpYnV0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZShldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1nbGlkZS1kaXInKSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmUoQ29udHJvbHMsICdpdGVtcycsIHtcbiAgICAgIC8qKlxuICAgICAgICogR2V0cyBjb2xsZWN0aW9uIG9mIHRoZSBjb250cm9scyBIVE1MIGVsZW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge0hUTUxFbGVtZW50W119XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gQ29udHJvbHMuX2M7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTd2FwIGFjdGl2ZSBjbGFzcyBvZiBjdXJyZW50IG5hdmlnYXRpb24gaXRlbTpcbiAgICAgKiAtIGFmdGVyIG1vdW50aW5nIHRvIHNldCBpdCB0byBpbml0aWFsIGluZGV4XG4gICAgICogLSBhZnRlciBlYWNoIG1vdmUgdG8gdGhlIG5ldyBpbmRleFxuICAgICAqL1xuICAgIEV2ZW50cy5vbihbJ21vdW50LmFmdGVyJywgJ21vdmUuYWZ0ZXInXSwgZnVuY3Rpb24gKCkge1xuICAgICAgQ29udHJvbHMuc2V0QWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYmluZGluZ3MgYW5kIEhUTUwgQ2xhc3NlczpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgICAqL1xuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIENvbnRyb2xzLnJlbW92ZUJpbmRpbmdzKCk7XG4gICAgICBDb250cm9scy5yZW1vdmVBY3RpdmUoKTtcbiAgICAgIEJpbmRlci5kZXN0cm95KCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQ29udHJvbHM7XG4gIH1cblxuICBmdW5jdGlvbiBLZXlib2FyZCAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgICAqL1xuICAgIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XG5cbiAgICB2YXIgS2V5Ym9hcmQgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEJpbmRzIGtleWJvYXJkIGV2ZW50cyBvbiBjb21wb25lbnQgbW91bnQuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgICBpZiAoR2xpZGUuc2V0dGluZ3Mua2V5Ym9hcmQpIHtcbiAgICAgICAgICB0aGlzLmJpbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEFkZHMga2V5Ym9hcmQgcHJlc3MgZXZlbnRzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICAgIEJpbmRlci5vbigna2V5dXAnLCBkb2N1bWVudCwgdGhpcy5wcmVzcyk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlcyBrZXlib2FyZCBwcmVzcyBldmVudHMuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgICAqL1xuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICAgIEJpbmRlci5vZmYoJ2tleXVwJywgZG9jdW1lbnQpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZXMga2V5Ym9hcmQncyBhcnJvd3MgcHJlc3MgYW5kIG1vdmluZyBnbGlkZSBmb3dhcmQgYW5kIGJhY2t3YXJkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZXZlbnRcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIHByZXNzOiBmdW5jdGlvbiBwcmVzcyhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzkpIHtcbiAgICAgICAgICBDb21wb25lbnRzLlJ1bi5tYWtlKENvbXBvbmVudHMuRGlyZWN0aW9uLnJlc29sdmUoJz4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzcpIHtcbiAgICAgICAgICBDb21wb25lbnRzLlJ1bi5tYWtlKENvbXBvbmVudHMuRGlyZWN0aW9uLnJlc29sdmUoJzwnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGJpbmRpbmdzIGZyb20ga2V5Ym9hcmQ6XG4gICAgICogLSBvbiBkZXN0cm95aW5nIHRvIHJlbW92ZSBhZGRlZCBldmVudHNcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHRvIHJlbW92ZSBldmVudHMgYmVmb3JlIHJlbW91bnRpbmdcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydkZXN0cm95JywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBLZXlib2FyZC51bmJpbmQoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW91bnQgY29tcG9uZW50XG4gICAgICogLSBvbiB1cGRhdGluZyB0byByZWZsZWN0IHBvdGVudGlhbCBjaGFuZ2VzIGluIHNldHRpbmdzXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBLZXlib2FyZC5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSBiaW5kZXI6XG4gICAgICogLSBvbiBkZXN0cm95aW5nIHRvIHJlbW92ZSBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBCaW5kZXIuZGVzdHJveSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIEtleWJvYXJkO1xuICB9XG5cbiAgZnVuY3Rpb24gQXV0b3BsYXkgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxuICAgICAqXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cbiAgICAgKi9cbiAgICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gICAgdmFyIEF1dG9wbGF5ID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBJbml0aWFsaXplcyBhdXRvcGxheWluZyBhbmQgZXZlbnRzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICAgKi9cbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuXG4gICAgICAgIGlmIChHbGlkZS5zZXR0aW5ncy5ob3ZlcnBhdXNlKSB7XG4gICAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTdGFydHMgYXV0b3BsYXlpbmcgaW4gY29uZmlndXJlZCBpbnRlcnZhbC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW58TnVtYmVyfSBmb3JjZSBSdW4gYXV0b3BsYXlpbmcgd2l0aCBwYXNzZWQgaW50ZXJ2YWwgcmVnYXJkbGVzcyBvZiBgYXV0b3BsYXlgIHNldHRpbmdzXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKEdsaWRlLnNldHRpbmdzLmF1dG9wbGF5KSB7XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHRoaXMuX2kpKSB7XG4gICAgICAgICAgICB0aGlzLl9pID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZSgnPicpO1xuXG4gICAgICAgICAgICAgIF90aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgICB9LCB0aGlzLnRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFN0b3BzIGF1dG9ydW5uaW5nIG9mIHRoZSBnbGlkZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICB0aGlzLl9pID0gY2xlYXJJbnRlcnZhbCh0aGlzLl9pKTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBTdG9wcyBhdXRvcGxheWluZyB3aGlsZSBtb3VzZSBpcyBvdmVyIGdsaWRlJ3MgYXJlYS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAgICovXG4gICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICBCaW5kZXIub24oJ21vdXNlb3ZlcicsIENvbXBvbmVudHMuSHRtbC5yb290LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnN0b3AoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgQmluZGVyLm9uKCdtb3VzZW91dCcsIENvbXBvbmVudHMuSHRtbC5yb290LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnN0YXJ0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIFVuYmluZCBtb3VzZW92ZXIgZXZlbnRzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtWb2lkfVxuICAgICAgICovXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgICAgQmluZGVyLm9mZihbJ21vdXNlb3ZlcicsICdtb3VzZW91dCddLCBDb21wb25lbnRzLkh0bWwucm9vdCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZShBdXRvcGxheSwgJ3RpbWUnLCB7XG4gICAgICAvKipcbiAgICAgICAqIEdldHMgdGltZSBwZXJpb2QgdmFsdWUgZm9yIHRoZSBhdXRvcGxheSBpbnRlcnZhbC4gUHJpb3JpdGl6ZXNcbiAgICAgICAqIHRpbWVzIGluIGBkYXRhLWdsaWRlLWF1dG9wbGF5YCBhdHRydWJ1dGVzIG92ZXIgb3B0aW9ucy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgYXV0b3BsYXkgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzW0dsaWRlLmluZGV4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZ2xpZGUtYXV0b3BsYXknKTtcblxuICAgICAgICBpZiAoYXV0b3BsYXkpIHtcbiAgICAgICAgICByZXR1cm4gdG9JbnQoYXV0b3BsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvSW50KEdsaWRlLnNldHRpbmdzLmF1dG9wbGF5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFN0b3AgYXV0b3BsYXlpbmcgYW5kIHVuYmluZCBldmVudHM6XG4gICAgICogLSBvbiBkZXN0cm95aW5nLCB0byBjbGVhciBkZWZpbmVkIGludGVydmFsXG4gICAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJIHRvIHJlc2V0IGludGVydmFsIHRoYXQgbWF5IGNoYW5nZWRcbiAgICAgKi9cbiAgICBFdmVudHMub24oWydkZXN0cm95JywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBBdXRvcGxheS51bmJpbmQoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFN0b3AgYXV0b3BsYXlpbmc6XG4gICAgICogLSBiZWZvcmUgZWFjaCBydW4sIHRvIHJlc3RhcnQgYXV0b3BsYXlpbmdcbiAgICAgKiAtIG9uIHBhdXNpbmcgdmlhIEFQSVxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gY2xlYXIgZGVmaW5lZCBpbnRlcnZhbFxuICAgICAqIC0gd2hpbGUgc3RhcnRpbmcgYSBzd2lwZVxuICAgICAqIC0gb24gdXBkYXRpbmcgdmlhIEFQSSB0byByZXNldCBpbnRlcnZhbCB0aGF0IG1heSBjaGFuZ2VkXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsncnVuLmJlZm9yZScsICdwYXVzZScsICdkZXN0cm95JywgJ3N3aXBlLnN0YXJ0JywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgICBBdXRvcGxheS5zdG9wKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBhdXRvcGxheWluZzpcbiAgICAgKiAtIGFmdGVyIGVhY2ggcnVuLCB0byByZXN0YXJ0IGF1dG9wbGF5aW5nXG4gICAgICogLSBvbiBwbGF5aW5nIHZpYSBBUElcbiAgICAgKiAtIHdoaWxlIGVuZGluZyBhIHN3aXBlXG4gICAgICovXG4gICAgRXZlbnRzLm9uKFsncnVuLmFmdGVyJywgJ3BsYXknLCAnc3dpcGUuZW5kJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgIEF1dG9wbGF5LnN0YXJ0KCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdW50IGF1dG9wbGF5aW5nOlxuICAgICAqIC0gb24gdXBkYXRpbmcgdmlhIEFQSSB0byByZXNldCBpbnRlcnZhbCB0aGF0IG1heSBjaGFuZ2VkXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBBdXRvcGxheS5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSBhIGJpbmRlcjpcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcgZ2xpZGUgaW5zdGFuY2UgdG8gY2xlYXJ1cCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBCaW5kZXIuZGVzdHJveSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIEF1dG9wbGF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFNvcnRzIGtleXMgb2YgYnJlYWtwb2ludCBvYmplY3Qgc28gdGhleSB3aWxsIGJlIG9yZGVyZWQgZnJvbSBsb3dlciB0byBiaWdnZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludHNcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIHNvcnRCcmVha3BvaW50cyhwb2ludHMpIHtcbiAgICBpZiAoaXNPYmplY3QocG9pbnRzKSkge1xuICAgICAgcmV0dXJuIHNvcnRLZXlzKHBvaW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oJ0JyZWFrcG9pbnRzIG9wdGlvbiBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cblxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJyZWFrcG9pbnRzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAgICovXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEhvbGRzIHJlZmVyZW5jZSB0byBzZXR0aW5ncy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyByZWZlcmVuY2UgdG8gYnJlYWtwb2ludHMgb2JqZWN0IGluIHNldHRpbmdzLiBTb3J0cyBicmVha3BvaW50c1xuICAgICAqIGZyb20gc21hbGxlciB0byBsYXJnZXIuIEl0IGlzIHJlcXVpcmVkIGluIG9yZGVyIHRvIHByb3BlclxuICAgICAqIG1hdGNoaW5nIGN1cnJlbnRseSBhY3RpdmUgYnJlYWtwb2ludCBzZXR0aW5ncy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdmFyIHBvaW50cyA9IHNvcnRCcmVha3BvaW50cyhzZXR0aW5ncy5icmVha3BvaW50cyk7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZSBpbml0aWFsIHNldHRpbmdzIGJlZm9yZSBvdmVyd3JpdHRpbmcuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IF9leHRlbmRzKHt9LCBzZXR0aW5ncyk7XG5cbiAgICB2YXIgQnJlYWtwb2ludHMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIE1hdGNoZXMgc2V0dGluZ3MgZm9yIGN1cnJlY3RseSBtYXRjaGluZyBtZWRpYSBicmVha3BvaW50LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludHNcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgIG1hdGNoOiBmdW5jdGlvbiBtYXRjaChwb2ludHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubWF0Y2hNZWRpYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwb2ludCBpbiBwb2ludHMpIHtcbiAgICAgICAgICAgIGlmIChwb2ludHMuaGFzT3duUHJvcGVydHkocG9pbnQpKSB7XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogJyArIHBvaW50ICsgJ3B4KScpLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnRzW3BvaW50XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3ZlcndyaXRlIGluc3RhbmNlIHNldHRpbmdzIHdpdGggY3VycmVudGx5IG1hdGNoaW5nIGJyZWFrcG9pbnQgc2V0dGluZ3MuXG4gICAgICogVGhpcyBoYXBwZW5zIHJpZ2h0IGFmdGVyIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbi5cbiAgICAgKi9cbiAgICBfZXh0ZW5kcyhzZXR0aW5ncywgQnJlYWtwb2ludHMubWF0Y2gocG9pbnRzKSk7XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgZ2xpZGUgd2l0aCBzZXR0aW5ncyBvZiBtYXRjaGVkIGJyZWtwb2ludDpcbiAgICAgKiAtIHdpbmRvdyByZXNpemUgdG8gdXBkYXRlIHNsaWRlclxuICAgICAqL1xuICAgIEJpbmRlci5vbigncmVzaXplJywgd2luZG93LCB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICBHbGlkZS5zZXR0aW5ncyA9IG1lcmdlT3B0aW9ucyhzZXR0aW5ncywgQnJlYWtwb2ludHMubWF0Y2gocG9pbnRzKSk7XG4gICAgfSwgR2xpZGUuc2V0dGluZ3MudGhyb3R0bGUpKTtcblxuICAgIC8qKlxuICAgICAqIFJlc29ydCBhbmQgdXBkYXRlIGRlZmF1bHQgc2V0dGluZ3M6XG4gICAgICogLSBvbiByZWluaXQgdmlhIEFQSSwgc28gYnJlYWtwb2ludCBtYXRjaGluZyB3aWxsIGJlIHBlcmZvcm1lZCB3aXRoIG9wdGlvbnNcbiAgICAgKi9cbiAgICBFdmVudHMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBvaW50cyA9IHNvcnRCcmVha3BvaW50cyhwb2ludHMpO1xuXG4gICAgICBkZWZhdWx0cyA9IF9leHRlbmRzKHt9LCBzZXR0aW5ncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmQgcmVzaXplIGxpc3RlbmVyOlxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0aWFsIHN0YXRlXG4gICAgICovXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgQmluZGVyLm9mZigncmVzaXplJywgd2luZG93KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBCcmVha3BvaW50cztcbiAgfVxuXG4gIHZhciBDT01QT05FTlRTID0ge1xuICAgIC8vIFJlcXVpcmVkXG4gICAgSHRtbDogSHRtbCxcbiAgICBUcmFuc2xhdGU6IFRyYW5zbGF0ZSxcbiAgICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICAgIERpcmVjdGlvbjogRGlyZWN0aW9uLFxuICAgIFBlZWs6IFBlZWssXG4gICAgU2l6ZXM6IFNpemVzLFxuICAgIEdhcHM6IEdhcHMsXG4gICAgTW92ZTogTW92ZSxcbiAgICBDbG9uZXM6IENsb25lcyxcbiAgICBSZXNpemU6IFJlc2l6ZSxcbiAgICBCdWlsZDogQnVpbGQsXG4gICAgUnVuOiBSdW4sXG5cbiAgICAvLyBPcHRpb25hbFxuICAgIFN3aXBlOiBTd2lwZSxcbiAgICBJbWFnZXM6IEltYWdlcyxcbiAgICBBbmNob3JzOiBBbmNob3JzLFxuICAgIENvbnRyb2xzOiBDb250cm9scyxcbiAgICBLZXlib2FyZDogS2V5Ym9hcmQsXG4gICAgQXV0b3BsYXk6IEF1dG9wbGF5LFxuICAgIEJyZWFrcG9pbnRzOiBCcmVha3BvaW50c1xuICB9O1xuXG4gIHZhciBHbGlkZSQxID0gZnVuY3Rpb24gKF9Db3JlKSB7XG4gICAgaW5oZXJpdHMoR2xpZGUkJDEsIF9Db3JlKTtcblxuICAgIGZ1bmN0aW9uIEdsaWRlJCQxKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xpZGUkJDEpO1xuICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEdsaWRlJCQxLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoR2xpZGUkJDEpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhHbGlkZSQkMSwgW3tcbiAgICAgIGtleTogJ21vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBnZXQoR2xpZGUkJDEucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoR2xpZGUkJDEucHJvdG90eXBlKSwgJ21vdW50JywgdGhpcykuY2FsbCh0aGlzLCBfZXh0ZW5kcyh7fSwgQ09NUE9ORU5UUywgZXh0ZW5zaW9ucykpO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gR2xpZGUkJDE7XG4gIH0oR2xpZGUpO1xuXG4gIHJldHVybiBHbGlkZSQxO1xuXG59KSkpO1xuIiwiLy8gVGltZSB0byByZWZyZXNoIHRoZSBjaGFydHMgd2l0aCBuZXcgZGF0YSAoMTAgbWlucylcbnZhciByZWZyZXNoVGltZSA9IDYwICogMTAgKiAxMDAwO1xuXG4vLyBIb3cgbWFueSBkYXlzIHRvIHNob3cgdGhlIHJlcG9ydCBvdmVyXG52YXIgc2xpZGVUaW1lVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2xpZGUtdGltZS10aXRsZScpO1xudmFyIHJlcG9ydERheXNEaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWRheXMnKTtcbnZhciByZXBvcnREYXlzID0gcmVwb3J0RGF5c0Rpc3BsYXkudmFsdWU7XG5cbi8vIEZ1bGwgc2NyZWVuIHNlbGVjdG9yXG52YXIgZnVsbFNjcmVlbk9wZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZnVsbC1zY3JlZW4tb3BlbicpO1xudmFyIGZ1bGxTY3JlZW5DbG9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1mdWxsLXNjcmVlbi1jbG9zZScpO1xuXG4vLyBUaGVtZSBjb2xvdXJzXG52YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG52YXIgdGhlbWVHcmlkZUxpbmVzID0gYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2xpZ2h0LXRoZW1lJykgPyAncmdiYSgwLDAsMCwwLjA1KScgOiAncmdiYSgyNTUsMjU1LDI1NSwwLjA1KSc7XG52YXIgdGhlbWVGb250Q29sb3VyID0gYm9keS5jbGFzc0xpc3QuY29udGFpbnMoJ2xpZ2h0LXRoZW1lJykgPyAncmdiYSgwLDAsMCwwLjYpJyA6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNiknO1xudmFyIHRvZ2dsZVN3aXRjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10b2dnbGUtc3dpdGNoJyk7XG52YXIgdG9nZ2xlU3dpdGNoSW5wdXQgPSB0b2dnbGVTd2l0Y2gucXVlcnlTZWxlY3RvcignLm9ub2Zmc3dpdGNoLWNoZWNrYm94Jyk7XG5cbi8qXG4qIGdldERhdGFcbipcbiogRnVuY3Rpb24gdG8gZ2V0IHRoZSBkYXRhIGZyb20gdGhlIEFQSVxuKi9cbmZ1bmN0aW9uIGdldERhdGEoc2hlZXROYW1lLCBkYXRlUmFuZ2UsIGNhbGxiYWNrKSB7XG5cbiAgICAvLyBTZXQgb3VyIEhUVFAgcmVxdWVzdFxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIFNldHVwIGxpc3RlbmVyIHRvIHByb2Nlc3MgY29tcGxldGVkIHJlcXVlc3RzXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAvLyBQcm9jZXNzIHJldHVybiBkYXRhXG4gICAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XG5cbiAgICAgICAgICAgIHZhciB2YWxzID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpLnZhbHVlcztcbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICAgICAgZGF0YXNldFRpdGxlOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRhc2V0czoge1xuICAgICAgICAgICAgICAgICAgICAwOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgMTogW10sXG4gICAgICAgICAgICAgICAgICAgIDI6IFtdLFxuICAgICAgICAgICAgICAgICAgICAzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgNDogW10sXG4gICAgICAgICAgICAgICAgICAgIDU6IFtdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aXRsZTogdmFsc1sxXVswXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gU3RhcnQgYXQgMSBhcyB3ZSBkb24ndCBuZWVkIHRoZSBmaXJzdCBhcnJheSAoY29udGFpbnMgbGFiZWxzKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gZGF0ZVJhbmdlICogMjQ7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0VGl0bGUucHVzaCh2YWxzW2ldWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0VGl0bGUucHVzaCh2YWxzW2ldWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0VGl0bGUucHVzaCh2YWxzW2ldWzNdKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0VGl0bGUucHVzaCh2YWxzW2ldWzRdKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0VGl0bGUucHVzaCh2YWxzW2ldWzhdKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0VGl0bGUucHVzaCh2YWxzW2ldWzldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxzW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbMF0ucHVzaCh2YWxzW2ldWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbMV0ucHVzaCh2YWxzW2ldWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbMl0ucHVzaCh2YWxzW2ldWzNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbM10ucHVzaCh2YWxzW2ldWzRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbNF0ucHVzaCh2YWxzW2ldWzhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YXNldHNbNV0ucHVzaCh2YWxzW2ldWzldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGFiZWxzLnB1c2godmFsc1tpXVs2XSArICcgJyArIHZhbHNbaV1bNV0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0c1swXS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0c1sxXS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0c1syXS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0c1szXS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0c1s0XS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhc2V0c1s1XS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5sYWJlbHMucHVzaCgnMDA6MDA6MDAnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGRhdGFcbiAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVGhlIHJlcXVlc3QgZmFpbGVkIScpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICB4aHIub3BlbignR0VUJywgJ2h0dHBzOi8vc2hlZXRzLmdvb2dsZWFwaXMuY29tL3Y0L3NwcmVhZHNoZWV0cy8xU1NJa1J0MFdnU0RnRDZYdlFpV3NYQk9VQXBURTFSRlotekZmdEt5YUc2US92YWx1ZXMvJyArIHNoZWV0TmFtZSArICc/a2V5PUFJemFTeUR4dXpWYUY4MFR4NG5OM3hxZlNIZVl6bkhUQ1RBMDFMaycpO1xuICAgIHhoci5zZW5kKCk7XG59XG5cbi8qXG4qIGFkZENoYXJ0XG4qXG4qIEZ1bmN0aW9uIHRvIGFkZCBhIGNoYXJ0XG4qL1xuZnVuY3Rpb24gYWRkQ2hhcnQoY2hhcnQsIHRpdGxlLCBkYXRhLCBjYWxsYmFjaykge1xuXG4gICAgLy8gR2V0IHRoZSBjaGFydCBlbGVtZW50XG4gICAgdmFyIGN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoYXJ0KS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgLy8gU2V0IHRoZSBjaGFydFxuICAgIHZhciBjaGFydE9iamVjdCA9IG5ldyBDaGFydChjdHgsIHtcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBsYWJlbHM6IGRhdGEubGFiZWxzLFxuICAgICAgICAgICAgZGF0YXNldHM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLmRhdGFzZXRUaXRsZVswXSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YS5kYXRhc2V0c1swXSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAncmdiYSg1NCwgMTYyLCAyMzUsIDEpJ1xuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJ3JnYmEoNTQsIDE2MiwgMjM1LCAxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICdyZ2JhKDU0LCAxNjIsIDIzNSwgMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEuZGF0YXNldFRpdGxlWzFdLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGFzZXRzWzFdLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZ2JhKDI1NSwgOTksIDEzMiwgMSknLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LCA5OSwgMTMyLCAxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwgOTksIDEzMiwgMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRhdGEuZGF0YXNldFRpdGxlWzJdLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGFzZXRzWzJdLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZ2IoNjUsIDI1NSwgOTkpJyxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDY1LCAyNTUsIDk5LCAxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICdyZ2JhKDY1LCAyNTUsIDk5LCAxKScsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAxLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGF0YS5kYXRhc2V0VGl0bGVbM10sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEuZGF0YXNldHNbM10sXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3JnYigyNTUsIDE0MCwgMjYpJyxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwgMTQwLCAyNiwgMSknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDE0MCwgMjYsIDEpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLmRhdGFzZXRUaXRsZVs0XSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YS5kYXRhc2V0c1s0XSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAncmdiKDIwNiwxOTgsNTMpJyxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjA2LDE5OCw1MyknLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiKDIwNiwxOTgsNTMpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhLmRhdGFzZXRUaXRsZVs1XSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YS5kYXRhc2V0c1s1XSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAncmdiKDIwNiwxMSwzNiknLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJ3JnYigyMDYsMTEsMzYpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJ3JnYigyMDYsMTEsMzYpJyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogdGhlbWVGb250Q29sb3VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRNaW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRNYXg6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWVHcmlkZUxpbmVzXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgeEF4ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICd4QXhpczEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IHRoZW1lRm9udENvbG91cixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZlcnNlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Ta2lwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsLnN1YnN0cmluZygwLCA1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWVHcmlkZUxpbmVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3hBeGlzMicsXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmF3T25DaGFydEFyZWE6IGZhbHNlLCAvLyBvbmx5IHdhbnQgdGhlIGdyaWQgbGluZXMgZm9yIG9uZSBheGlzIHRvIHNob3cgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhlbWVHcmlkZUxpbmVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IHRoZW1lRm9udENvbG91cixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhSb3RhdGlvbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvU2tpcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbC5zdWJzdHJpbmcoMCwgMykgPT09ICcwMDonKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWwuc3Vic3RyaW5nKDkpICsgJyDihpInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdzb21ldGhpbmcnLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IHRoZW1lRm9udENvbG91clxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dDogdGl0bGUsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IDE4LFxuICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogdGhlbWVGb250Q29sb3VyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTZXQgaGVpZ2h0IG9mIGNoYXJ0XG4gICAgY2hhcnRPYmplY3QuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gMi43NSArICdweCc7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGNoYXJ0IG9iamVjdFxuICAgIGNhbGxiYWNrKGNoYXJ0T2JqZWN0KTtcblxufVxuXG4vKlxuKiB1cGRhdGVDaGFydFxuKlxuKiBGdW5jdGlvbiB0byB1cGRhdGUgdGhlIGNoYXJ0IHdpdGggbmV3IGRhdGFcbiovXG5mdW5jdGlvbiB1cGRhdGVDaGFydChjaGFydCwgZGF0YSkge1xuXG4gICAgLy8gU2V0IHRoZSBuZXcgbGFiZWxzXG4gICAgY2hhcnQuZGF0YS5sYWJlbHMgPSBkYXRhLmxhYmVscztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIC8vIFB1c2ggdGhlIG5ldyBkYXRhIHRvIHRoZSBjaGFydFxuICAgICAgICBjaGFydC5kYXRhLmRhdGFzZXRzW2ldLmRhdGEgPSBkYXRhLmRhdGFzZXRzW2ldO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB0aGUgY2hhcnRcbiAgICBjaGFydC51cGRhdGUoKTtcbn1cblxuXG4vKlxuKiB1cGRhdGVDaGFydENvbG91cnNcbipcbiogRnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBjaGFydCB3aXRoIG5ldyBjb2xvdXJzXG4qL1xuZnVuY3Rpb24gdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0KSB7XG5cbiAgICB0aGVtZUdyaWRlTGluZXMgPSBib2R5LmNsYXNzTGlzdC5jb250YWlucygnbGlnaHQtdGhlbWUnKSA/ICdyZ2JhKDAsMCwwLDAuMDUpJyA6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMDUpJztcbiAgICB0aGVtZUZvbnRDb2xvdXIgPSBib2R5LmNsYXNzTGlzdC5jb250YWlucygnbGlnaHQtdGhlbWUnKSA/ICdyZ2JhKDAsMCwwLDAuNiknIDogJ3JnYmEoMjU1LDI1NSwyNTUsMC42KSc7XG5cbiAgICAvLyBTZXQgbmV3IGNvbG91cnNcbiAgICBjaGFydC5vcHRpb25zLnNjYWxlcy55QXhlc1swXS50aWNrcy5mb250Q29sb3IgPSB0aGVtZUZvbnRDb2xvdXI7XG4gICAgY2hhcnQub3B0aW9ucy5zY2FsZXMueUF4ZXNbMF0uZ3JpZExpbmVzLmNvbG9yID0gdGhlbWVHcmlkZUxpbmVzO1xuICAgIGNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnhBeGVzWzBdLnRpY2tzLmZvbnRDb2xvciA9IHRoZW1lRm9udENvbG91cjtcbiAgICBjaGFydC5vcHRpb25zLnNjYWxlcy54QXhlc1swXS5ncmlkTGluZXMuY29sb3IgPSB0aGVtZUdyaWRlTGluZXM7XG4gICAgY2hhcnQub3B0aW9ucy5zY2FsZXMueEF4ZXNbMV0udGlja3MuZm9udENvbG9yID0gdGhlbWVGb250Q29sb3VyO1xuICAgIGNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnhBeGVzWzFdLmdyaWRMaW5lcy5jb2xvciA9IHRoZW1lR3JpZGVMaW5lcztcbiAgICBjaGFydC5vcHRpb25zLmxlZ2VuZC5sYWJlbHMuZm9udENvbG9yID0gdGhlbWVGb250Q29sb3VyO1xuICAgIGNoYXJ0Lm9wdGlvbnMudGl0bGUuZm9udENvbG9yID0gdGhlbWVGb250Q29sb3VyO1xuXG4gICAgLy8gdXBkYXRlIHRoZSBjaGFydFxuICAgIGNoYXJ0LnVwZGF0ZSgpO1xufVxuXG4vKlxuKiBvcGVuRnVsbFNjcmVlblxuKlxuKiBGdW5jdGlvbiB0byBvcGVuIGluIGZ1bGwgc2NyZWVuXG4qL1xuZnVuY3Rpb24gb3BlbkZ1bGxTY3JlZW4oZWxlbSkge1xuICAgIGlmIChlbGVtLnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgIGVsZW0ucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICB9IGVsc2UgaWYgKGVsZW0ubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHsgLy8gRmlyZWZveFxuICAgICAgICBlbGVtLm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gICAgfSBlbHNlIGlmIChlbGVtLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7IC8vIENocm9tZSwgU2FmYXJpICYgT3BlcmFcbiAgICAgICAgZWxlbS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5tc1JlcXVlc3RGdWxsc2NyZWVuKSB7IC8vIElFL0VkZ2VcbiAgICAgICAgZWxlbS5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgfVxuXG4gICAgYm9keS5jbGFzc0xpc3QuYWRkKCdmdWxsLXNjcmVlbicpO1xufVxuXG4vKlxuKiBjbG9zZUZ1bGxTY3JlZW5cbipcbiogRnVuY3Rpb24gdG8gb3BlbiBpbiBmdWxsIHNjcmVlblxuKi9cbmZ1bmN0aW9uIGNsb3NlRnVsbFNjcmVlbigpIHtcbiAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xuICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZnVsbC1zY3JlZW4nKTtcbn1cblxudmFyIGNoYXJ0T2JqZWN0O1xudmFyIGNoYXJ0T2JqZWN0MTtcbnZhciBjaGFydE9iamVjdDI7XG52YXIgY2hhcnRPYmplY3QzO1xudmFyIGNoYXJ0T2JqZWN0NDtcbnZhciBjaGFydE9iamVjdDU7XG52YXIgY2hhcnRPYmplY3Q2O1xudmFyIGNoYXJ0T2JqZWN0NztcbnZhciBjaGFydE9iamVjdDg7XG52YXIgY2hhcnRPYmplY3Q5O1xuXG5nZXREYXRhKCdIb21lJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQnLCBkYXRhLnRpdGxlLCBkYXRhLCBmdW5jdGlvbiAoY2hhcnQpIHtcblxuICAgICAgICBjaGFydE9iamVjdCA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ0hvbWUnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnQ2FyIEluc3VyYW5jZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYWRkQ2hhcnQoJ21ldHJpY0NoYXJ0MScsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0MSA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ0NhciBJbnN1cmFuY2UnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnTXVsdGkgQ2FyJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQyJywgZGF0YS50aXRsZSwgZGF0YSwgZnVuY3Rpb24gKGNoYXJ0KSB7XG5cbiAgICAgICAgY2hhcnRPYmplY3QyID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnTXVsdGkgQ2FyJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDaGFydChjaGFydCwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcmVmcmVzaFRpbWUpO1xuICAgIH0pO1xufSk7XG5cbmdldERhdGEoJ0NsYWltcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYWRkQ2hhcnQoJ21ldHJpY0NoYXJ0MycsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0MyA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ0NsYWltcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnQsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHJlZnJlc2hUaW1lKTtcbiAgICB9KTtcbn0pO1xuXG5nZXREYXRhKCdIb21lIEluc3VyYW5jZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYWRkQ2hhcnQoJ21ldHJpY0NoYXJ0NCcsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0NCA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ0hvbWUgSW5zdXJhbmNlJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDaGFydChjaGFydCwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcmVmcmVzaFRpbWUpO1xuICAgIH0pO1xufSk7XG5cbmdldERhdGEoJ1NtYXJ0bWlsZXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGFkZENoYXJ0KCdtZXRyaWNDaGFydDUnLCBkYXRhLnRpdGxlLCBkYXRhLCBmdW5jdGlvbiAoY2hhcnQpIHtcblxuICAgICAgICBjaGFydE9iamVjdDUgPSBjaGFydDtcblxuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnZXREYXRhKCdTbWFydG1pbGVzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDaGFydChjaGFydCwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcmVmcmVzaFRpbWUpO1xuICAgIH0pO1xufSk7XG5cbmdldERhdGEoJ0hlbHAnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGFkZENoYXJ0KCdtZXRyaWNDaGFydDYnLCBkYXRhLnRpdGxlLCBkYXRhLCBmdW5jdGlvbiAoY2hhcnQpIHtcblxuICAgICAgICBjaGFydE9iamVjdDYgPSBjaGFydDtcblxuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnZXREYXRhKCdIZWxwJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDaGFydChjaGFydCwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcmVmcmVzaFRpbWUpO1xuICAgIH0pO1xufSk7XG5cbmdldERhdGEoJ0Fib3V0IFVzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBhZGRDaGFydCgnbWV0cmljQ2hhcnQ3JywgZGF0YS50aXRsZSwgZGF0YSwgZnVuY3Rpb24gKGNoYXJ0KSB7XG5cbiAgICAgICAgY2hhcnRPYmplY3Q3ID0gY2hhcnQ7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2V0RGF0YSgnQWJvdXQgVXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnQ29udGFjdCBVcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYWRkQ2hhcnQoJ21ldHJpY0NoYXJ0OCcsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0OCA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ0NvbnRhY3QgVXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxuZ2V0RGF0YSgnQ29yb25hdmlydXMgRkFRcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYWRkQ2hhcnQoJ21ldHJpY0NoYXJ0OScsIGRhdGEudGl0bGUsIGRhdGEsIGZ1bmN0aW9uIChjaGFydCkge1xuXG4gICAgICAgIGNoYXJ0T2JqZWN0OSA9IGNoYXJ0O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldERhdGEoJ0Nvcm9uYXZpcnVzIEZBUXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0LCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWZyZXNoVGltZSk7XG4gICAgfSk7XG59KTtcblxucmVwb3J0RGF5c0Rpc3BsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICB1cGRhdGVBbGxDaGFydHMoZS50YXJnZXQudmFsdWUpO1xufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZUFsbENoYXJ0cyhyZXBvcnREYXlzKSB7XG4gICAgZ2V0RGF0YSgnSG9tZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0LCBkYXRhKTtcbiAgICB9KTtcblxuICAgIGdldERhdGEoJ0NhciBJbnN1cmFuY2UnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB1cGRhdGVDaGFydChjaGFydE9iamVjdDEsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgZ2V0RGF0YSgnTXVsdGkgQ2FyJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnRPYmplY3QyLCBkYXRhKTtcbiAgICB9KTtcblxuICAgIGdldERhdGEoJ0NsYWltcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0MywgZGF0YSk7XG4gICAgfSk7XG5cbiAgICBnZXREYXRhKCdIb21lIEluc3VyYW5jZScsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0NCwgZGF0YSk7XG4gICAgfSk7XG5cbiAgICBnZXREYXRhKCdTbWFydG1pbGVzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnRPYmplY3Q1LCBkYXRhKTtcbiAgICB9KTtcblxuICAgIGdldERhdGEoJ0hlbHAnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB1cGRhdGVDaGFydChjaGFydE9iamVjdDYsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgZ2V0RGF0YSgnQWJvdXQgVXMnLCByZXBvcnREYXlzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB1cGRhdGVDaGFydChjaGFydE9iamVjdDcsIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgZ2V0RGF0YSgnQ29udGFjdCBVcycsIHJlcG9ydERheXMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZUNoYXJ0KGNoYXJ0T2JqZWN0OCwgZGF0YSk7XG4gICAgfSk7XG5cbiAgICBnZXREYXRhKCdDb3JvbmF2aXJ1cyBGQVFzJywgcmVwb3J0RGF5cywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdXBkYXRlQ2hhcnQoY2hhcnRPYmplY3Q5LCBkYXRhKTtcbiAgICB9KTtcbn1cblxuZnVsbFNjcmVlbk9wZW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgb3BlbkZ1bGxTY3JlZW4oZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbn0pO1xuXG5mdWxsU2NyZWVuQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgY2xvc2VGdWxsU2NyZWVuKCk7XG59KTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciByZXNpemVWYWx1ZSA9IDIuNjA7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2hhcnRPYmplY3QuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDEuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDIuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDMuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDQuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDUuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDYuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDcuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDguY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgICAgICBjaGFydE9iamVjdDkuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC8gcmVzaXplVmFsdWUgKyAncHgnO1xuICAgIH0sIDUwMCk7XG59KTtcblxudmFyIGdsaWRlID0gbmV3IEdsaWRlKCcuZ2xpZGUnLCB7XG4gICAgYXV0b3BsYXk6IDMwMDAwLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAxMDAwLFxuICAgIGhvdmVycGF1c2U6IHRydWVcbn0pO1xuXG5nbGlkZS5vbihcInJ1blwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdsaWRlLmluZGV4ICE9PSAwKSB7XG4gICAgICAgIGlmICghc2xpZGVUaW1lVGl0bGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgc2xpZGVUaW1lVGl0bGUuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZVRpbWVUaXRsZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9XG59KTtcblxuLy8gSW5pdCB0aGUgc2xpZGVyXG5nbGlkZS5tb3VudCgpO1xuXG50b2dnbGVTd2l0Y2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgcmVwb3J0RGF5cyA9IHJlcG9ydERheXNEaXNwbGF5LnZhbHVlO1xuXG4gICAgaWYgKHRvZ2dsZVN3aXRjaElucHV0LmNoZWNrZWQpIHtcbiAgICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdsaWdodC10aGVtZScpO1xuICAgICAgICB1cGRhdGVDaGFydENvbG91cnMoY2hhcnRPYmplY3QpO1xuICAgICAgICB1cGRhdGVDaGFydENvbG91cnMoY2hhcnRPYmplY3QxKTtcbiAgICAgICAgdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0T2JqZWN0Mik7XG4gICAgICAgIHVwZGF0ZUNoYXJ0Q29sb3VycyhjaGFydE9iamVjdDMpO1xuICAgICAgICB1cGRhdGVDaGFydENvbG91cnMoY2hhcnRPYmplY3Q0KTtcbiAgICAgICAgdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0T2JqZWN0NSk7XG4gICAgICAgIHVwZGF0ZUNoYXJ0Q29sb3VycyhjaGFydE9iamVjdDYpO1xuICAgICAgICB1cGRhdGVDaGFydENvbG91cnMoY2hhcnRPYmplY3Q3KTtcbiAgICAgICAgdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0T2JqZWN0OCk7XG4gICAgICAgIHVwZGF0ZUNoYXJ0Q29sb3VycyhjaGFydE9iamVjdDkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZCgnbGlnaHQtdGhlbWUnKTtcbiAgICAgICAgdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0T2JqZWN0KTtcbiAgICAgICAgdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0T2JqZWN0MSk7XG4gICAgICAgIHVwZGF0ZUNoYXJ0Q29sb3VycyhjaGFydE9iamVjdDIpO1xuICAgICAgICB1cGRhdGVDaGFydENvbG91cnMoY2hhcnRPYmplY3QzKTtcbiAgICAgICAgdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0T2JqZWN0NCk7XG4gICAgICAgIHVwZGF0ZUNoYXJ0Q29sb3VycyhjaGFydE9iamVjdDUpO1xuICAgICAgICB1cGRhdGVDaGFydENvbG91cnMoY2hhcnRPYmplY3Q2KTtcbiAgICAgICAgdXBkYXRlQ2hhcnRDb2xvdXJzKGNoYXJ0T2JqZWN0Nyk7XG4gICAgICAgIHVwZGF0ZUNoYXJ0Q29sb3VycyhjaGFydE9iamVjdDgpO1xuICAgICAgICB1cGRhdGVDaGFydENvbG91cnMoY2hhcnRPYmplY3Q5KTtcbiAgICB9XG59KTsiXX0=
