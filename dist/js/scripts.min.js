!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(function(){try{return require("moment")}catch(t){}}()):"function"==typeof define&&define.amd?define(["require"],function(t){return e(function(){try{return t("moment")}catch(t){}}())}):(t=t||self).Chart=e(t.moment)}(this,function(i){"use strict";i=i&&i.hasOwnProperty("default")?i.default:i;var t,d={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},u=(function(t){var u={};for(var e in d)d.hasOwnProperty(e)&&(u[d[e]]=e);var o=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var n in o)if(o.hasOwnProperty(n)){if(!("channels"in o[n]))throw new Error("missing channels property: "+n);if(!("labels"in o[n]))throw new Error("missing channel labels property: "+n);if(o[n].labels.length!==o[n].channels)throw new Error("channel and label counts mismatch: "+n);var i=o[n].channels,r=o[n].labels;delete o[n].channels,delete o[n].labels,Object.defineProperty(o[n],"channels",{value:i}),Object.defineProperty(o[n],"labels",{value:r})}o.rgb.hsl=function(t){var e,n,i=t[0]/255,r=t[1]/255,a=t[2]/255,o=Math.min(i,r,a),s=Math.max(i,r,a),l=s-o;return s===o?e=0:i===s?e=(r-a)/l:r===s?e=2+(a-i)/l:a===s&&(e=4+(i-r)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(o+s)/2,[e,100*(s===o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]},o.rgb.hsv=function(t){function e(t){return(d-t)/6/c+.5}var n,i,r,a,o,s=t[0]/255,l=t[1]/255,u=t[2]/255,d=Math.max(s,l,u),c=d-Math.min(s,l,u);return 0==c?a=o=0:(o=c/d,n=e(s),i=e(l),r=e(u),s===d?a=r-i:l===d?a=1/3+n-r:u===d&&(a=2/3+i-n),a<0?a+=1:1<a&&--a),[360*a,100*o,100*d]},o.rgb.hwb=function(t){var e=t[0],n=t[1],i=t[2];return[o.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(n,i))),100*(i=1-1/255*Math.max(e,Math.max(n,i)))]},o.rgb.cmyk=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-i,1-r)))/(1-e)||0),100*((1-i-e)/(1-e)||0),100*((1-r-e)/(1-e)||0),100*e]},o.rgb.keyword=function(t){var e=u[t];if(e)return e;var n,i,r,a=1/0;for(var o in d)if(d.hasOwnProperty(o)){var s=d[o],l=(i=t,r=s,Math.pow(i[0]-r[0],2)+Math.pow(i[1]-r[1],2)+Math.pow(i[2]-r[2],2));l<a&&(a=l,n=o)}return n},o.keyword.rgb=function(t){return d[t]},o.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;return[100*(.4124*(e=.04045<e?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=.04045<n?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(i=.04045<i?Math.pow((i+.055)/1.055,2.4):i/12.92)),100*(.2126*e+.7152*n+.0722*i),100*(.0193*e+.1192*n+.9505*i)]},o.rgb.lab=function(t){var e=o.rgb.xyz(t),n=e[0],i=e[1],r=e[2];return i/=100,r/=108.883,n=.008856<(n/=95.047)?Math.pow(n,1/3):7.787*n+16/116,[116*(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116)-16,500*(n-i),200*(i-(r=.008856<r?Math.pow(r,1/3):7.787*r+16/116))]},o.hsl.rgb=function(t){var e,n,i,r,a,o=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return[a=255*l,a,a];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),r=[0,0,0];for(var u=0;u<3;u++)(i=o+1/3*-(u-1))<0&&i++,1<i&&i--,a=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,r[u]=255*a;return r},o.hsl.hsv=function(t){var e=t[0],n=t[1]/100,i=t[2]/100,r=n,a=Math.max(i,.01);return n*=(i*=2)<=1?i:2-i,r*=a<=1?a:2-a,[e,100*(0===i?2*r/(a+r):2*n/(i+n)),100*((i+n)/2)]},o.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,r=Math.floor(e)%6,a=e-Math.floor(e),o=255*i*(1-n),s=255*i*(1-n*a),l=255*i*(1-n*(1-a));switch(i*=255,r){case 0:return[i,l,o];case 1:return[s,i,o];case 2:return[o,i,l];case 3:return[o,s,i];case 4:return[l,o,i];case 5:return[i,o,s]}},o.hsv.hsl=function(t){var e,n,i,r=t[0],a=t[1]/100,o=t[2]/100,s=Math.max(o,.01);return i=(2-a)*o,n=a*s,[r,100*(n=(n/=(e=(2-a)*s)<=1?e:2-e)||0),100*(i/=2)]},o.hwb.rgb=function(t){var e,n,i,r,a,o,s,l=t[0]/360,u=t[1]/100,d=t[2]/100,c=u+d;switch(1<c&&(u/=c,d/=c),i=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(i=1-i),r=u+i*((n=1-d)-u),e){default:case 6:case 0:a=n,o=r,s=u;break;case 1:a=r,o=n,s=u;break;case 2:a=u,o=n,s=r;break;case 3:a=u,o=r,s=n;break;case 4:a=r,o=u,s=n;break;case 5:a=n,o=u,s=r}return[255*a,255*o,255*s]},o.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,i=t[2]/100,r=t[3]/100;return[255*(1-Math.min(1,e*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,i*(1-r)+r))]},o.xyz.rgb=function(t){var e,n,i,r=t[0]/100,a=t[1]/100,o=t[2]/100;return n=-.9689*r+1.8758*a+.0415*o,i=.0557*r+-.204*a+1.057*o,e=.0031308<(e=3.2406*r+-1.5372*a+-.4986*o)?1.055*Math.pow(e,1/2.4)-.055:12.92*e,n=.0031308<n?1.055*Math.pow(n,1/2.4)-.055:12.92*n,i=.0031308<i?1.055*Math.pow(i,1/2.4)-.055:12.92*i,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(i=Math.min(Math.max(0,i),1))]},o.xyz.lab=function(t){var e=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,e=.008856<(e/=95.047)?Math.pow(e,1/3):7.787*e+16/116,[116*(n=.008856<n?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116))]},o.lab.xyz=function(t){var e,n,i,r=t[0];e=t[1]/500+(n=(r+16)/116),i=n-t[2]/200;var a=Math.pow(n,3),o=Math.pow(e,3),s=Math.pow(i,3);return n=.008856<a?a:(n-16/116)/7.787,e=.008856<o?o:(e-16/116)/7.787,i=.008856<s?s:(i-16/116)/7.787,[e*=95.047,n*=100,i*=108.883]},o.lab.lch=function(t){var e,n=t[0],i=t[1],r=t[2];return(e=360*Math.atan2(r,i)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(i*i+r*r),e]},o.lch.lab=function(t){var e,n=t[0],i=t[1];return e=t[2]/360*2*Math.PI,[n,i*Math.cos(e),i*Math.sin(e)]},o.rgb.ansi16=function(t){var e=t[0],n=t[1],i=t[2],r=1 in arguments?arguments[1]:o.rgb.hsv(t)[2];if(0===(r=Math.round(r/50)))return 30;var a=30+(Math.round(i/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===r&&(a+=60),a},o.hsv.ansi16=function(t){return o.rgb.ansi16(o.hsv.rgb(t),t[2])},o.rgb.ansi256=function(t){var e=t[0],n=t[1],i=t[2];return e===n&&n===i?e<8?16:248<e?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},o.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return 50<t&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(50<t));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},o.ansi256.rgb=function(t){if(232<=t){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},o.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},o.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split("").map(function(t){return t+t}).join(""));var i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},o.rgb.hcg=function(t){var e,n=t[0]/255,i=t[1]/255,r=t[2]/255,a=Math.max(Math.max(n,i),r),o=Math.min(Math.min(n,i),r),s=a-o;return e=s<=0?0:a===n?(i-r)/s%6:a===i?2+(r-n)/s:4+(n-i)/s+4,e/=6,[360*(e%=1),100*s,100*(s<1?o/(1-s):0)]},o.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=1,r=0;return(i=n<.5?2*e*n:2*e*(1-n))<1&&(r=(n-.5*i)/(1-i)),[t[0],100*i,100*r]},o.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=e*n,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},o.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,i=t[2]/100;if(0==n)return[255*i,255*i,255*i];var r,a=[0,0,0],o=e%1*6,s=o%1,l=1-s;switch(Math.floor(o)){case 0:a[0]=1,a[1]=s,a[2]=0;break;case 1:a[0]=l,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=s;break;case 3:a[0]=0,a[1]=l,a[2]=1;break;case 4:a[0]=s,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=l}return r=(1-n)*i,[255*(n*a[0]+r),255*(n*a[1]+r),255*(n*a[2]+r)]},o.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),i=0;return 0<n&&(i=e/n),[t[0],100*i,100*n]},o.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,i=0;return 0<n&&n<.5?i=e/(2*n):.5<=n&&n<1&&(i=e/(2*(1-n))),[t[0],100*i,100*n]},o.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},o.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,i=n-e,r=0;return i<1&&(r=(n-i)/(1-i)),[t[0],100*i,100*r]},o.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},o.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},o.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},o.gray.hsl=o.gray.hsv=function(t){return[0,0,t[0]]},o.gray.hwb=function(t){return[0,100,t[0]]},o.gray.cmyk=function(t){return[0,0,0,t[0]]},o.gray.lab=function(t){return[t[0],0,0]},o.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(n.length)+n},o.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}}(t={exports:{}},t.exports),t.exports);u.rgb,u.hsl,u.hsv,u.hwb,u.cmyk,u.xyz,u.lab,u.lch,u.hex,u.keyword,u.ansi16,u.ansi256,u.hcg,u.apple,u.gray;function s(t){var e=function(){for(var t={},e=Object.keys(u),n=e.length,i=0;i<n;i++)t[e[i]]={distance:-1,parent:null};return t}(),n=[t];for(e[t].distance=0;n.length;)for(var i=n.pop(),r=Object.keys(u[i]),a=r.length,o=0;o<a;o++){var s=r[o],l=e[s];-1===l.distance&&(l.distance=e[i].distance+1,l.parent=i,n.unshift(s))}return e}function a(e,n){return function(t){return n(e(t))}}function l(t,e){for(var n=[e[t].parent,t],i=u[e[t].parent][t],r=e[t].parent;e[r].parent;)n.unshift(e[r].parent),i=a(u[e[r].parent][r],i),r=e[r].parent;return i.conversion=n,i}var r={};function o(e){function t(t){return null==t?t:(1<arguments.length&&(t=Array.prototype.slice.call(arguments)),e(t))}return"conversion"in e&&(t.conversion=e.conversion),t}function c(r){function t(t){if(null==t)return t;1<arguments.length&&(t=Array.prototype.slice.call(arguments));var e=r(t);if("object"==typeof e)for(var n=e.length,i=0;i<n;i++)e[i]=Math.round(e[i]);return e}return"conversion"in r&&(t.conversion=r.conversion),t}Object.keys(u).forEach(function(n){r[n]={},Object.defineProperty(r[n],"channels",{value:u[n].channels}),Object.defineProperty(r[n],"labels",{value:u[n].labels});var i=function(t){for(var e=s(t),n={},i=Object.keys(e),r=i.length,a=0;a<r;a++){var o=i[a];null!==e[o].parent&&(n[o]=l(o,e))}return n}(n);Object.keys(i).forEach(function(t){var e=i[t];r[n][t]=c(e),r[n][t].raw=o(e)})});var h=r,f={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n={getRgba:g,getHsla:p,getRgb:function(t){var e=g(t);return e&&e.slice(0,3)},getHsl:function(t){var e=p(t);return e&&e.slice(0,3)},getHwb:m,getAlpha:function(t){var e=g(t);{if(e)return e[3];if(e=p(t))return e[3];if(e=m(t))return e[3]}},hexString:function(t,e){e=void 0!==e&&3===t.length?e:t[3];return"#"+_(t[0])+_(t[1])+_(t[2])+(0<=e&&e<1?_(Math.round(255*e)):"")},rgbString:function(t,e){if(e<1||t[3]&&t[3]<1)return v(t,e);return"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:v,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return b(t,e);var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),r=Math.round(t[2]/255*100);return"rgb("+n+"%, "+i+"%, "+r+"%)"},percentaString:b,hslString:function(t,e){if(e<1||t[3]&&t[3]<1)return y(t,e);return"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:y,hwbString:function(t,e){void 0===e&&(e=void 0!==t[3]?t[3]:1);return"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return e[t.slice(0,3)]}};function g(t){if(t){var e=[0,0,0],n=1,i=t.match(/^#([a-fA-F0-9]{3,4})$/i),r="";if(i){r=(i=i[1])[3];for(var a=0;a<e.length;a++)e[a]=parseInt(i[a]+i[a],16);r&&(n=Math.round(parseInt(r+r,16)/255*100)/100)}else if(i=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){r=i[2],i=i[1];for(a=0;a<e.length;a++)e[a]=parseInt(i.slice(2*a,2*a+2),16);r&&(n=Math.round(parseInt(r,16)/255*100)/100)}else if(i=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=parseInt(i[a+1]);n=parseFloat(i[4])}else if(i=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=Math.round(2.55*parseFloat(i[a+1]));n=parseFloat(i[4])}else if(i=t.match(/(\w+)/)){if("transparent"==i[1])return[0,0,0,0];if(!(e=f[i[1]]))return}for(a=0;a<e.length;a++)e[a]=x(e[a],0,255);return n=n||0==n?x(n,0,1):1,e[3]=n,e}}function p(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[x(parseInt(e[1]),0,360),x(parseFloat(e[2]),0,100),x(parseFloat(e[3]),0,100),x(isNaN(n)?1:n,0,1)]}}}function m(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[x(parseInt(e[1]),0,360),x(parseFloat(e[2]),0,100),x(parseFloat(e[3]),0,100),x(isNaN(n)?1:n,0,1)]}}}function v(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function b(t,e){return"rgba("+Math.round(t[0]/255*100)+"%, "+Math.round(t[1]/255*100)+"%, "+Math.round(t[2]/255*100)+"%, "+(e||t[3]||1)+")"}function y(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function x(t,e,n){return Math.min(Math.max(e,t),n)}function _(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var e={};for(var w in f)e[f[w]]=w;var k=function(t){return t instanceof k?t:this instanceof k?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(e=n.getRgba(t))?this.setValues("rgb",e):(e=n.getHsla(t))?this.setValues("hsl",e):(e=n.getHwb(t))&&this.setValues("hwb",e):"object"==typeof t&&(void 0!==(e=t).r||void 0!==e.red?this.setValues("rgb",e):void 0!==e.l||void 0!==e.lightness?this.setValues("hsl",e):void 0!==e.v||void 0!==e.value?this.setValues("hsv",e):void 0!==e.w||void 0!==e.whiteness?this.setValues("hwb",e):void 0===e.c&&void 0===e.cyan||this.setValues("cmyk",e)))):new k(t);var e};k.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t=t&&((t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return n.hexString(this.values.rgb)},rgbString:function(){return n.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return n.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return n.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return n.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return n.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return n.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return n.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((.055+i)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return n<e?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return 7.1<=e?"AAA":4.5<=e?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=this,i=t,r=void 0===e?.5:e,a=2*r-1,o=n.alpha()-i.alpha(),s=(1+(a*o==-1?a:(a+o)/(1+a*o)))/2,l=1-s;return this.rgb(s*n.red()+l*i.red(),s*n.green()+l*i.green(),s*n.blue()+l*i.blue()).alpha(n.alpha()*r+i.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new k,i=this.values,r=n.values;for(var a in i)i.hasOwnProperty(a)&&(t=i[a],"[object Array]"===(e={}.toString.call(t))?r[a]=t.slice(0):"[object Number]"===e?r[a]=t:console.error("unexpected color value:",t));return n}},k.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},k.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},k.prototype.getValues=function(t){for(var e=this.values,n={},i=0;i<t.length;i++)n[t.charAt(i)]=e[t][i];return 1!==e.alpha&&(n.a=e.alpha),n},k.prototype.setValues=function(t,e){var n,i,r=this.values,a=this.spaces,o=this.maxes,s=1;if(this.valid=!0,"alpha"===t)s=e;else if(e.length)r[t]=e.slice(0,t.length),s=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)r[t][n]=e[t.charAt(n)];s=e.a}else if(void 0!==e[a[t][0]]){var l=a[t];for(n=0;n<t.length;n++)r[t][n]=e[l[n]];s=e.alpha}if(r.alpha=Math.max(0,Math.min(1,void 0===s?r.alpha:s)),"alpha"===t)return!1;for(n=0;n<t.length;n++)i=Math.max(0,Math.min(o[t][n],r[t][n])),r[t][n]=Math.round(i);for(var u in a)u!==t&&(r[u]=h[t][u](r[t]));return!0},k.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},k.prototype.setChannel=function(t,e,n){var i=this.values[t];return void 0===n?i[e]:(n===i[e]||(i[e]=n,this.setValues(t,i)),this)},"undefined"!=typeof window&&(window.Color=k);var M,C=k,S={noop:function(){},uid:(M=0,function(){return M++}),isNullOrUndef:function(t){return null==t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},isFinite:function(t){return("number"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return S.valueOrDefault(S.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,i){var r,a,o;if(S.isArray(t))if(a=t.length,i)for(r=a-1;0<=r;r--)e.call(n,t[r],r);else for(r=0;r<a;r++)e.call(n,t[r],r);else if(S.isObject(t))for(a=(o=Object.keys(t)).length,r=0;r<a;r++)e.call(n,t[o[r]],o[r])},arrayEquals:function(t,e){var n,i,r,a;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],a=e[n],r instanceof Array&&a instanceof Array){if(!S.arrayEquals(r,a))return!1}else if(r!==a)return!1;return!0},clone:function(t){if(S.isArray(t))return t.map(S.clone);if(S.isObject(t)){for(var e={},n=Object.keys(t),i=n.length,r=0;r<i;++r)e[n[r]]=S.clone(t[n[r]]);return e}return t},_merger:function(t,e,n,i){var r=e[t],a=n[t];S.isObject(r)&&S.isObject(a)?S.merge(r,a,i):e[t]=S.clone(a)},_mergerIf:function(t,e,n){var i=e[t],r=n[t];S.isObject(i)&&S.isObject(r)?S.mergeIf(i,r):e.hasOwnProperty(t)||(e[t]=S.clone(r))},merge:function(t,e,n){var i,r,a,o,s,l=S.isArray(e)?e:[e],u=l.length;if(!S.isObject(t))return t;for(i=(n=n||{}).merger||S._merger,r=0;r<u;++r)if(e=l[r],S.isObject(e))for(s=0,o=(a=Object.keys(e)).length;s<o;++s)i(a[s],t,e,n);return t},mergeIf:function(t,e){return S.merge(t,e,{merger:S._mergerIf})},extend:Object.assign||function(t){return S.merge(t,[].slice.call(arguments,1),{merger:function(t,e,n){e[t]=n[t]}})},inherits:function(t){function e(){this.constructor=i}var n=this,i=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return n.apply(this,arguments)};return e.prototype=n.prototype,i.prototype=new e,i.extend=S.inherits,t&&S.extend(i.prototype,t),i.__super__=n.prototype,i},_deprecated:function(t,e,n,i){void 0!==e&&console.warn(t+': "'+n+'" is deprecated. Please use "'+i+'" instead')}},D=S;S.callCallback=S.callback,S.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},S.getValueOrDefault=S.valueOrDefault,S.getValueAtIndexOrDefault=S.valueAtIndexOrDefault;var A={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-(--t*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return--t*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return 1<=t?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1- --t*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),-(i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2==(t/=.5)?1:(n=n||.45,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),t<1?i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*-.5:i*Math.pow(2,-10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){return t*t*(2.70158*t-1.70158)},easeOutBack:function(t){return--t*t*(2.70158*t+1.70158)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-A.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*A.easeInBounce(2*t):.5*A.easeOutBounce(2*t-1)+.5}},P={effects:A};D.easingEffects=A;var T=Math.PI,I=T/180,O=2*T,F=T/2,L=T/4,R=2*T/3,z={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,i,r,a){if(a){var o=Math.min(a,r/2,i/2),s=e+o,l=n+o,u=e+i-o,d=n+r-o;t.moveTo(e,l),s<u&&l<d?(t.arc(s,l,o,-T,-F),t.arc(u,l,o,-F,0),t.arc(u,d,o,0,F),t.arc(s,d,o,F,T)):s<u?(t.moveTo(s,n),t.arc(u,l,o,-F,F),t.arc(s,l,o,F,T+F)):l<d?(t.arc(s,l,o,-T,0),t.arc(s,d,o,0,T)):t.arc(s,l,o,-T,T),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,i,r)},drawPoint:function(t,e,n,i,r,a){var o,s,l,u,d,c=(a||0)*I;if(e&&"object"==typeof e&&("[object HTMLImageElement]"===(o=e.toString())||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,r),t.rotate(c),t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),void t.restore();if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(i,r,n,0,O),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(c)*n,r-Math.cos(c)*n),c+=R,t.lineTo(i+Math.sin(c)*n,r-Math.cos(c)*n),c+=R,t.lineTo(i+Math.sin(c)*n,r-Math.cos(c)*n),t.closePath();break;case"rectRounded":u=n-(d=.516*n),s=Math.cos(c+L)*u,l=Math.sin(c+L)*u,t.arc(i-s,r-l,d,c-T,c-F),t.arc(i+l,r-s,d,c-F,c),t.arc(i+s,r+l,d,c,c+F),t.arc(i-l,r+s,d,c+F,c+T),t.closePath();break;case"rect":if(!a){u=Math.SQRT1_2*n,t.rect(i-u,r-u,2*u,2*u);break}c+=L;case"rectRot":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+l,r-s),t.lineTo(i+s,r+l),t.lineTo(i-l,r+s),t.closePath();break;case"crossRot":c+=L;case"cross":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"star":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s),c+=L,s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"line":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l);break;case"dash":t.moveTo(i,r),t.lineTo(i+Math.cos(c)*n,r+Math.sin(c)*n)}t.fill(),t.stroke()}},_isPointInArea:function(t,e){return t.x>e.left-1e-6&&t.x<e.right+1e-6&&t.y>e.top-1e-6&&t.y<e.bottom+1e-6},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,i){var r=n.steppedLine;if(r){if("middle"===r){var a=(e.x+n.x)/2;t.lineTo(a,i?n.y:e.y),t.lineTo(a,i?e.y:n.y)}else"after"===r&&!i||"after"!==r&&i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}else n.tension?t.bezierCurveTo(i?e.controlPointPreviousX:e.controlPointNextX,i?e.controlPointPreviousY:e.controlPointNextY,i?n.controlPointNextX:n.controlPointPreviousX,i?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}},N=z;D.clear=z.clear,D.drawRoundedRectangle=function(t){t.beginPath(),z.roundedRect.apply(z,arguments)};var B={_set:function(t,e){return D.merge(this[t]||(this[t]={}),e)}};B._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var E=B,W=D.valueOrDefault;var H={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,i,r;return D.isObject(t)?(e=+t.top||0,n=+t.right||0,i=+t.bottom||0,r=+t.left||0):e=n=i=r=+t||0,{top:e,right:n,bottom:i,left:r,height:e+i,width:r+n}},_parseFont:function(t){var e,n=E.global,i=W(t.fontSize,n.defaultFontSize),r={family:W(t.fontFamily,n.defaultFontFamily),lineHeight:D.options.toLineHeight(W(t.lineHeight,n.defaultLineHeight),i),size:i,style:W(t.fontStyle,n.defaultFontStyle),weight:null,string:""};return r.string=!(e=r)||D.isNullOrUndef(e.size)||D.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family,r},resolve:function(t,e,n,i){var r,a,o,s=!0;for(r=0,a=t.length;r<a;++r)if(void 0!==(o=t[r])&&(void 0!==e&&"function"==typeof o&&(o=o(e),s=!1),void 0!==n&&D.isArray(o)&&(o=o[n],s=!1),void 0!==o))return i&&!s&&(i.cacheable=!1),o}},V={_factorize:function(t){var e,n=[],i=Math.sqrt(t);for(e=1;e<i;e++)t%e==0&&(n.push(e),n.push(t/e));return i===(0|i)&&n.push(i),n.sort(function(t,e){return t-e}).pop(),n},log10:Math.log10||function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e}},j=V;D.log10=V.log10;var q=D,U=P,Y=N,G=H,X=j,K={getRtlAdapter:function(t,e,n){return t?(i=e,r=n,{x:function(t){return i+i+r-t},setWidth:function(t){r=t},textAlign:function(t){return"center"===t?t:"right"===t?"left":"right"},xPlus:function(t,e){return t-e},leftForLtr:function(t,e){return t-e}}):{x:function(t){return t},setWidth:function(t){},textAlign:function(t){return t},xPlus:function(t,e){return t+e},leftForLtr:function(t,e){return t}};var i,r},overrideTextDirection:function(t,e){var n,i;"ltr"!==e&&"rtl"!==e||(i=[(n=t.canvas.style).getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)},restoreTextDirection:function(t){var e=t.prevTextDirection;void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}};q.easing=U,q.canvas=Y,q.options=G,q.math=X,q.rtl=K;function Z(t){q.extend(this,t),this.initialize.apply(this,arguments)}q.extend(Z.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=q.extend({},t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,i=e._start,r=e._view;return n&&1!==t?(r=r||(e._view={}),function(t,e,n,i){var r,a,o,s,l,u,d,c,h,f=Object.keys(n);for(r=0,a=f.length;r<a;++r)if(u=n[o=f[r]],e.hasOwnProperty(o)||(e[o]=u),(s=e[o])!==u&&"_"!==o[0]){if(t.hasOwnProperty(o)||(t[o]=s),(d=typeof u)==typeof(l=t[o]))if("string"==d){if((c=C(l)).valid&&(h=C(u)).valid){e[o]=h.mix(c,i).rgbString();continue}}else if(q.isFinite(l)&&q.isFinite(u)){e[o]=l+(u-l)*i;continue}e[o]=u}}(i=i||(e._start={}),r,n,t)):(e._view=q.extend({},n),e._start=null),e},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return q.isNumber(this._model.x)&&q.isNumber(this._model.y)}}),Z.extend=q.inherits;var $=Z,Q=$.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),J=Q;Object.defineProperty(Q.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(Q.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}}),E._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:q.noop,onComplete:q.noop}});var tt={animations:[],request:null,addAnimation:function(t,e,n,i){var r,a,o=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,i||(t.animating=!0),r=0,a=o.length;r<a;++r)if(o[r].chart===t)return void(o[r]=e);o.push(e),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=q.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=q.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){this.advance(),0<this.animations.length&&this.requestAnimationFrame()},advance:function(){for(var t,e,n,i,r=this.animations,a=0;a<r.length;)e=(t=r[a]).chart,n=t.numSteps,i=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(i,n),q.callback(t.render,[e,t],e),q.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(q.callback(t.onAnimationComplete,[t],e),e.animating=!1,r.splice(a,1)):++a}},et=q.options.resolve,nt=["push","pop","shift","splice","unshift"];function it(e,t){var n=e._chartjs;if(n){var i=n.listeners,r=i.indexOf(t);-1!==r&&i.splice(r,1),0<i.length||(nt.forEach(function(t){delete e[t]}),delete e._chartjs)}}function rt(t,e){this.initialize(t,e)}q.extend(rt.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(t,e){var n=this;n.chart=t,n.index=e,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(t){this.index=t},linkScales:function(){var t=this.getMeta(),e=this.chart,n=e.scales,i=this.getDataset(),r=e.options.scales;null!==t.xAxisID&&t.xAxisID in n&&!i.xAxisID||(t.xAxisID=i.xAxisID||r.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in n&&!i.yAxisID||(t.yAxisID=i.yAxisID||r.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&it(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),i=this.getDataset().data||[],r=n.data;for(t=0,e=i.length;t<e;++t)r[t]=r[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var r,t,e=this,n=e.getDataset(),i=n.data||(n.data=[]);e._data!==i&&(e._data&&it(e._data,e),i&&Object.isExtensible(i)&&(t=e,(r=i)._chartjs?r._chartjs.listeners.push(t):(Object.defineProperty(r,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),nt.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),i=r[t];Object.defineProperty(r,t,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),t=i.apply(this,e);return q.each(r._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),t}})}))),e._data=i),e.resyncElements()},_configure:function(){this._config=q.merge({},[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(t,e,n){"_meta"!==t&&"data"!==t&&q._merger(t,e,n)}})},_update:function(t){this._configure(),this._cachedDataOpts=null,this.update(t)},update:q.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],i=n.length,r=0;r<i;++r)n[r].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,i=0;for(t.dataset&&t.dataset.draw();i<n;++i)e[i].draw()},getStyle:function(t){var e,n=this.getMeta(),i=n.dataset;return this._configure(),!1!==(e=i&&void 0===t?this._resolveDatasetElementOptions(i||{}):(t=t||0,this._resolveDataElementOptions(n.data[t]||{},t))).fill&&null!==e.fill||(e.backgroundColor=e.borderColor),e},_resolveDatasetElementOptions:function(t,e){var n,i,r,a,o=this,s=o.chart,l=o._config,u=t.custom||{},d=s.options.elements[o.datasetElementType.prototype._type]||{},c=o._datasetElementOptions,h={},f={chart:s,dataset:o.getDataset(),datasetIndex:o.index,hover:e};for(n=0,i=c.length;n<i;++n)r=c[n],a=e?"hover"+r.charAt(0).toUpperCase()+r.slice(1):r,h[r]=et([u[a],l[a],d[a]],f);return h},_resolveDataElementOptions:function(t,e){var n=this,i=t&&t.custom,r=n._cachedDataOpts;if(r&&!i)return r;var a,o,s,l,u=n.chart,d=n._config,c=u.options.elements[n.dataElementType.prototype._type]||{},h=n._dataElementOptions,f={},g={chart:u,dataIndex:e,dataset:n.getDataset(),datasetIndex:n.index},p={cacheable:!i};if(i=i||{},q.isArray(h))for(o=0,s=h.length;o<s;++o)f[l=h[o]]=et([i[l],d[l],c[l]],g,e,p);else for(o=0,s=(a=Object.keys(h)).length;o<s;++o)f[l=a[o]]=et([i[l],d[h[l]],d[l],c[l]],g,e,p);return p.cacheable&&(n._cachedDataOpts=Object.freeze(f)),f},removeHoverStyle:function(t){q.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,i=t.custom||{},r=t._model,a=q.getHoverColor;t.$previousStyle={backgroundColor:r.backgroundColor,borderColor:r.borderColor,borderWidth:r.borderWidth},r.backgroundColor=et([i.hoverBackgroundColor,e.hoverBackgroundColor,a(r.backgroundColor)],void 0,n),r.borderColor=et([i.hoverBorderColor,e.hoverBorderColor,a(r.borderColor)],void 0,n),r.borderWidth=et([i.hoverBorderWidth,e.hoverBorderWidth,r.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var t=this.getMeta().dataset;t&&this.removeHoverStyle(t)},_setDatasetHoverStyle:function(){var t,e,n,i,r,a,o=this.getMeta().dataset,s={};if(o){for(a=o._model,r=this._resolveDatasetElementOptions(o,!0),t=0,e=(i=Object.keys(r)).length;t<e;++t)s[n=i[t]]=a[n],a[n]=r[n];o.$previousStyle=s}},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,i=e.length;i<n?t.data.splice(i,n-i):n<i&&this.insertElements(n,i-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),rt.extend=q.inherits;var at=rt,ot=2*Math.PI;function st(t,e){var n=e.startAngle,i=e.endAngle,r=e.pixelMargin,a=r/e.outerRadius,o=e.x,s=e.y;t.beginPath(),t.arc(o,s,e.outerRadius,n-a,i+a),e.innerRadius>r?(a=r/e.innerRadius,t.arc(o,s,e.innerRadius-r,i+a,n-a,!0)):t.arc(o,s,r,i+Math.PI/2,n-Math.PI/2),t.closePath(),t.clip()}function lt(t,e,n){var i="inner"===e.borderAlign;i?(t.lineWidth=2*e.borderWidth,t.lineJoin="round"):(t.lineWidth=e.borderWidth,t.lineJoin="bevel"),n.fullCircles&&function(t,e,n,i){var r,a=n.endAngle;for(i&&(n.endAngle=n.startAngle+ot,st(t,n),n.endAngle=a,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=ot,n.fullCircles--)),t.beginPath(),t.arc(n.x,n.y,n.innerRadius,n.startAngle+ot,n.startAngle,!0),r=0;r<n.fullCircles;++r)t.stroke();for(t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.startAngle+ot),r=0;r<n.fullCircles;++r)t.stroke()}(t,e,n,i),i&&st(t,n),t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.endAngle),t.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),t.closePath(),t.stroke()}E._set("global",{elements:{arc:{backgroundColor:E.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var ut=$.extend({_type:"arc",inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var i=q.getAngleFromPoint(n,{x:t,y:e}),r=i.angle,a=i.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=ot;for(;s<r;)r-=ot;for(;r<o;)r+=ot;var l=o<=r&&r<=s,u=a>=n.innerRadius&&a<=n.outerRadius;return l&&u}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,i="inner"===n.borderAlign?.33:0,r={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-i,0),pixelMargin:i,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/ot)};if(e.save(),e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,r.fullCircles){for(r.endAngle=r.startAngle+ot,e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),t=0;t<r.fullCircles;++t)e.fill();r.endAngle=r.startAngle+n.circumference%ot}e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),e.fill(),n.borderWidth&&lt(e,n,r),e.restore()}}),dt=q.valueOrDefault,ct=E.global.defaultColor;E._set("global",{elements:{line:{tension:.4,backgroundColor:ct,borderWidth:3,borderColor:ct,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var ht=$.extend({_type:"line",draw:function(){var t,e,n,i=this,r=i._view,a=i._chart.ctx,o=r.spanGaps,s=i._children.slice(),l=E.global,u=l.elements.line,d=-1,c=i._loop;if(s.length){if(i._loop){for(t=0;t<s.length;++t)if(e=q.previousItem(s,t),!s[t]._view.skip&&e._view.skip){s=s.slice(t).concat(s.slice(0,t)),c=o;break}c&&s.push(s[0])}for(a.save(),a.lineCap=r.borderCapStyle||u.borderCapStyle,a.setLineDash&&a.setLineDash(r.borderDash||u.borderDash),a.lineDashOffset=dt(r.borderDashOffset,u.borderDashOffset),a.lineJoin=r.borderJoinStyle||u.borderJoinStyle,a.lineWidth=dt(r.borderWidth,u.borderWidth),a.strokeStyle=r.borderColor||l.defaultColor,a.beginPath(),(n=s[0]._view).skip||(a.moveTo(n.x,n.y),d=0),t=1;t<s.length;++t)n=s[t]._view,e=-1===d?q.previousItem(s,t):s[d],n.skip||(d!==t-1&&!o||-1===d?a.moveTo(n.x,n.y):q.canvas.lineTo(a,e._view,n),d=t);c&&a.closePath(),a.stroke(),a.restore()}}}),ft=q.valueOrDefault,gt=E.global.defaultColor;function pt(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}E._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:gt,borderColor:gt,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var mt=$.extend({_type:"point",inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:pt,inXRange:pt,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,i=e.pointStyle,r=e.rotation,a=e.radius,o=e.x,s=e.y,l=E.global,u=l.defaultColor;e.skip||void 0!==t&&!q.canvas._isPointInArea(e,t)||(n.strokeStyle=e.borderColor||u,n.lineWidth=ft(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||u,q.canvas.drawPoint(n,i,a,o,s,r))}}),vt=E.global.defaultColor;function bt(t){return t&&void 0!==t.width}function yt(t){var e,n,i,r,a;return r=bt(t)?(a=t.width/2,e=t.x-a,n=t.x+a,i=Math.min(t.y,t.base),Math.max(t.y,t.base)):(a=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),i=t.y-a,t.y+a),{left:e,top:i,right:n,bottom:r}}function xt(t,e,n){return t===e?n:t===n?e:t}function _t(t,e,n){var i,r,a,o,s,l,u,d=t.borderWidth,c=(r=(i=t).borderSkipped,a={},r&&(i.horizontal?i.base>i.x&&(r=xt(r,"left","right")):i.base<i.y&&(r=xt(r,"bottom","top")),a[r]=!0),a);return q.isObject(d)?(o=+d.top||0,s=+d.right||0,l=+d.bottom||0,u=+d.left||0):o=s=l=u=+d||0,{t:c.top||o<0?0:n<o?n:o,r:c.right||s<0?0:e<s?e:s,b:c.bottom||l<0?0:n<l?n:l,l:c.left||u<0?0:e<u?e:u}}function wt(t,e,n){var i=null===e,r=null===n,a=!(!t||i&&r)&&yt(t);return a&&(i||e>=a.left&&e<=a.right)&&(r||n>=a.top&&n<=a.bottom)}E._set("global",{elements:{rectangle:{backgroundColor:vt,borderColor:vt,borderSkipped:"bottom",borderWidth:0}}});var kt=$.extend({_type:"rectangle",draw:function(){var t,e,n,i,r,a=this._chart.ctx,o=this._view,s=(e=yt(t=o),n=e.right-e.left,i=e.bottom-e.top,r=_t(t,n/2,i/2),{outer:{x:e.left,y:e.top,w:n,h:i},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b}}),l=s.outer,u=s.inner;a.fillStyle=o.backgroundColor,a.fillRect(l.x,l.y,l.w,l.h),l.w===u.w&&l.h===u.h||(a.save(),a.beginPath(),a.rect(l.x,l.y,l.w,l.h),a.clip(),a.fillStyle=o.borderColor,a.rect(u.x,u.y,u.w,u.h),a.fill("evenodd"),a.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return wt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return bt(n)?wt(n,t,null):wt(n,null,e)},inXRange:function(t){return wt(this._view,t,null)},inYRange:function(t){return wt(this._view,null,t)},getCenterPoint:function(){var t,e,n=this._view;return e=bt(n)?(t=n.x,(n.y+n.base)/2):(t=(n.x+n.base)/2,n.y),{x:t,y:e}},getArea:function(){var t=this._view;return bt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),Mt={},Ct=ut,St=ht,Dt=mt,At=kt;Mt.Arc=Ct,Mt.Line=St,Mt.Point=Dt,Mt.Rectangle=At;var Pt=q._deprecated,Tt=q.valueOrDefault;function It(t,e,n){var i,r,a=n.barThickness,o=e.stackCount,s=e.pixels[t],l=q.isNullOrUndef(a)?function(t,e){var n,i,r,a,o=t._length;for(r=1,a=e.length;r<a;++r)o=Math.min(o,Math.abs(e[r]-e[r-1]));for(r=0,a=t.getTicks().length;r<a;++r)i=t.getPixelForTick(r),o=0<r?Math.min(o,Math.abs(i-n)):o,n=i;return o}(e.scale,e.pixels):-1;return r=q.isNullOrUndef(a)?(i=l*n.categoryPercentage,n.barPercentage):(i=a*o,1),{chunk:i/o,ratio:r,start:s-i/2}}E._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),E._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var Ot=at.extend({dataElementType:Mt.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var t,e,n=this;at.prototype.initialize.apply(n,arguments),(t=n.getMeta()).stack=n.getDataset().stack,t.bar=!0,e=n._getIndexScale().options,Pt("bar chart",e.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),Pt("bar chart",e.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),Pt("bar chart",e.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),Pt("bar chart",n._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),Pt("bar chart",e.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(t){var e,n,i=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=i.length;e<n;++e)this.updateElement(i[e],e,t)},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=i.getDataset(),o=i._resolveDataElementOptions(t,e);t._xScale=i.getScaleForId(r.xAxisID),t._yScale=i.getScaleForId(r.yAxisID),t._datasetIndex=i.index,t._index=e,t._model={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderSkipped:o.borderSkipped,borderWidth:o.borderWidth,datasetLabel:a.label,label:i.chart.data.labels[e]},q.isArray(a.data[e])&&(t._model.borderSkipped=null),i._updateElementGeometry(t,e,n,o),t.pivot()},_updateElementGeometry:function(t,e,n,i){var r=this,a=t._model,o=r._getValueScale(),s=o.getBasePixel(),l=o.isHorizontal(),u=r._ruler||r.getRuler(),d=r.calculateBarValuePixels(r.index,e,i),c=r.calculateBarIndexPixels(r.index,e,u,i);a.horizontal=l,a.base=n?s:d.base,a.x=l?n?s:d.head:c.center,a.y=l?c.center:n?s:d.head,a.height=l?c.size:void 0,a.width=l?void 0:c.size},_getStacks:function(t){var e,n,i=this._getIndexScale(),r=i._getMatchingVisibleMetas(this._type),a=i.options.stacked,o=r.length,s=[];for(e=0;e<o&&(n=r[e],(!1===a||-1===s.indexOf(n.stack)||void 0===a&&void 0===n.stack)&&s.push(n.stack),n.index!==t);++e);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),i=void 0!==e?n.indexOf(e):-1;return-1===i?n.length-1:i},getRuler:function(){var t,e,n=this._getIndexScale(),i=[];for(t=0,e=this.getMeta().data.length;t<e;++t)i.push(n.getPixelForValue(null,t,this.index));return{pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this.getStackCount(),scale:n}},calculateBarValuePixels:function(t,e,n){var i,r,a,o,s,l,u,d=this.chart,c=this._getValueScale(),h=c.isHorizontal(),f=d.data.datasets,g=c._getMatchingVisibleMetas(this._type),p=c._parseValue(f[t].data[e]),m=n.minBarLength,v=c.options.stacked,b=this.getMeta().stack,y=void 0===p.start?0:0<=p.max&&0<=p.min?p.min:p.max,x=void 0===p.start?p.end:0<=p.max&&0<=p.min?p.max-p.min:p.min-p.max,_=g.length;if(v||void 0===v&&void 0!==b)for(i=0;i<_&&(r=g[i]).index!==t;++i)r.stack===b&&(a=void 0===(u=c._parseValue(f[r.index].data[e])).start?u.end:0<=u.min&&0<=u.max?u.max:u.min,(p.min<0&&a<0||0<=p.max&&0<a)&&(y+=a));return o=c.getPixelForValue(y),l=(s=c.getPixelForValue(y+x))-o,void 0!==m&&Math.abs(l)<m&&(l=m,s=0<=x&&!h||x<0&&h?o-m:o+m),{size:l,base:o,head:s,center:s+l/2}},calculateBarIndexPixels:function(t,e,n,i){var r,a,o,s,l,u,d,c,h,f="flex"===i.barThickness?(r=e,o=i,l=(a=n).pixels,u=l[r],d=0<r?l[r-1]:null,c=r<l.length-1?l[r+1]:null,h=o.categoryPercentage,null===d&&(d=u-(null===c?a.end-a.start:c-u)),null===c&&(c=u+u-d),s=u-(u-Math.min(d,c))/2*h,{chunk:Math.abs(c-d)/2*h/a.stackCount,ratio:o.barPercentage,start:s}):It(e,n,i),g=this.getStackIndex(t,this.getMeta().stack),p=f.start+f.chunk*g+f.chunk/2,m=Math.min(Tt(i.maxBarThickness,1/0),f.chunk*f.ratio);return{base:p-m/2,head:p+m/2,center:p,size:m}},draw:function(){var t=this.chart,e=this._getValueScale(),n=this.getMeta().data,i=this.getDataset(),r=n.length,a=0;for(q.canvas.clipArea(t.ctx,t.chartArea);a<r;++a){var o=e._parseValue(i.data[a]);isNaN(o.min)||isNaN(o.max)||n[a].draw()}q.canvas.unclipArea(t.ctx)},_resolveDataElementOptions:function(){var t=q.extend({},at.prototype._resolveDataElementOptions.apply(this,arguments)),e=this._getIndexScale().options,n=this._getValueScale().options;return t.barPercentage=Tt(e.barPercentage,t.barPercentage),t.barThickness=Tt(e.barThickness,t.barThickness),t.categoryPercentage=Tt(e.categoryPercentage,t.categoryPercentage),t.maxBarThickness=Tt(e.maxBarThickness,t.maxBarThickness),t.minBarLength=Tt(n.minBarLength,t.minBarLength),t}}),Ft=q.valueOrDefault,Lt=q.options.resolve;E._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",i=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+i.r+")"}}}});var Rt=at.extend({dataElementType:Mt.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(n){var i=this,t=i.getMeta().data;q.each(t,function(t,e){i.updateElement(t,e,n)})},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=t.custom||{},o=i.getScaleForId(r.xAxisID),s=i.getScaleForId(r.yAxisID),l=i._resolveDataElementOptions(t,e),u=i.getDataset().data[e],d=i.index,c=n?o.getPixelForDecimal(.5):o.getPixelForValue("object"==typeof u?u:NaN,e,d),h=n?s.getBasePixel():s.getPixelForValue(u,e,d);t._xScale=o,t._yScale=s,t._options=l,t._datasetIndex=d,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:a.skip||isNaN(c)||isNaN(h),x:c,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Ft(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Ft(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Ft(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(t,e){var n=this,i=n.chart,r=n.getDataset(),a=t.custom||{},o=r.data[e]||{},s=at.prototype._resolveDataElementOptions.apply(n,arguments),l={chart:i,dataIndex:e,dataset:r,datasetIndex:n.index};return n._cachedDataOpts===s&&(s=q.extend({},s)),s.radius=Lt([a.radius,o.r,n._config.radius,i.options.elements.point.radius],l,e),s}}),zt=q.valueOrDefault,Nt=Math.PI,Bt=2*Nt,Et=Nt/2;E._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){var n,i,r,a=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(r=o.getDatasetMeta(n)).data[a]&&(r.data[a].hidden=!r.data[a].hidden);o.update()}},cutoutPercentage:50,rotation:-Et,circumference:Bt,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],i=": "+e.datasets[t.datasetIndex].data[t.index];return q.isArray(n)?(n=n.slice())[0]+=i:n+=i,n}}}});var Wt=at.extend({dataElementType:Mt.Arc,linkScales:q.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,i,r,a=this,o=a.chart,s=o.chartArea,l=o.options,u=1,d=1,c=0,h=0,f=a.getMeta(),g=f.data,p=l.cutoutPercentage/100||0,m=l.circumference,v=a._getRingWeight(a.index);if(m<Bt){var b=l.rotation%Bt,y=(b+=Nt<=b?-Bt:b<-Nt?Bt:0)+m,x=Math.cos(b),_=Math.sin(b),w=Math.cos(y),k=Math.sin(y),M=b<=0&&0<=y||Bt<=y,C=b<=Et&&Et<=y||Bt+Et<=y,S=b<=-Et&&-Et<=y||Nt+Et<=y,D=b===-Nt||Nt<=y?-1:Math.min(x,x*p,w,w*p),A=S?-1:Math.min(_,_*p,k,k*p),P=M?1:Math.max(x,x*p,w,w*p),T=C?1:Math.max(_,_*p,k,k*p);u=(P-D)/2,d=(T-A)/2,c=-(P+D)/2,h=-(T+A)/2}for(i=0,r=g.length;i<r;++i)g[i]._options=a._resolveDataElementOptions(g[i],i);for(o.borderWidth=a.getMaxBorderWidth(),e=(s.right-s.left-o.borderWidth)/u,n=(s.bottom-s.top-o.borderWidth)/d,o.outerRadius=Math.max(Math.min(e,n)/2,0),o.innerRadius=Math.max(o.outerRadius*p,0),o.radiusLength=(o.outerRadius-o.innerRadius)/(a._getVisibleDatasetWeightTotal()||1),o.offsetX=c*o.outerRadius,o.offsetY=h*o.outerRadius,f.total=a.calculateTotal(),a.outerRadius=o.outerRadius-o.radiusLength*a._getRingWeightOffset(a.index),a.innerRadius=Math.max(a.outerRadius-o.radiusLength*v,0),i=0,r=g.length;i<r;++i)a.updateElement(g[i],i,t)},updateElement:function(t,e,n){var i=this,r=i.chart,a=r.chartArea,o=r.options,s=o.animation,l=(a.left+a.right)/2,u=(a.top+a.bottom)/2,d=o.rotation,c=o.rotation,h=i.getDataset(),f=n&&s.animateRotate||t.hidden?0:i.calculateCircumference(h.data[e])*(o.circumference/Bt),g=n&&s.animateScale?0:i.innerRadius,p=n&&s.animateScale?0:i.outerRadius,m=t._options||{};q.extend(t,{_datasetIndex:i.index,_index:e,_model:{backgroundColor:m.backgroundColor,borderColor:m.borderColor,borderWidth:m.borderWidth,borderAlign:m.borderAlign,x:l+r.offsetX,y:u+r.offsetY,startAngle:d,endAngle:c,circumference:f,outerRadius:p,innerRadius:g,label:q.valueAtIndexOrDefault(h.label,e,r.data.labels[e])}});var v=t._model;n&&s.animateRotate||(v.startAngle=0===e?o.rotation:i.getMeta().data[e-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),t.pivot()},calculateTotal:function(){var n,i=this.getDataset(),t=this.getMeta(),r=0;return q.each(t.data,function(t,e){n=i.data[e],isNaN(n)||t.hidden||(r+=Math.abs(n))}),r},calculateCircumference:function(t){var e=this.getMeta().total;return 0<e&&!isNaN(t)?Bt*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,i,r,a,o,s,l,u=0,d=this.chart;if(!t)for(e=0,n=d.data.datasets.length;e<n;++e)if(d.isDatasetVisible(e)){t=(i=d.getDatasetMeta(e)).data,e!==this.index&&(a=i.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)r=t[e],"inner"!==(o=a?(a._configure(),a._resolveDataElementOptions(r,e)):r._options).borderAlign&&(u=(u=u<(s=o.borderWidth)?s:u)<(l=o.hoverBorderWidth)?l:u);return u},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=zt(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(zt(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});E._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),E._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var Ht=Ot.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Vt=q.valueOrDefault,jt=q.options.resolve,qt=q.canvas._isPointInArea;function Ut(t,e){var n=t&&t.options.ticks||{},i=n.reverse,r=void 0===n.min?e:0,a=void 0===n.max?e:0;return{start:i?a:r,end:i?r:a}}E._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Yt=at.extend({datasetElementType:Mt.Line,dataElementType:Mt.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.options,l=i._config,u=i._showLine=Vt(l.showLine,s.showLines);for(i._xScale=i.getScaleForId(r.xAxisID),i._yScale=i.getScaleForId(r.yAxisID),u&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=i._yScale,a._datasetIndex=i.index,a._children=o,a._model=i._resolveDatasetElementOptions(a),a.pivot()),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(u&&0!==a._model.tension&&i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i,r,a=this,o=a.getMeta(),s=t.custom||{},l=a.getDataset(),u=a.index,d=l.data[e],c=a._xScale,h=a._yScale,f=o.dataset._model,g=a._resolveDataElementOptions(t,e);i=c.getPixelForValue("object"==typeof d?d:NaN,e,u),r=n?h.getBasePixel():a.calculatePointY(d,e,u),t._xScale=c,t._yScale=h,t._options=g,t._datasetIndex=u,t._index=e,t._model={x:i,y:r,skip:s.skip||isNaN(i)||isNaN(r),radius:g.radius,pointStyle:g.pointStyle,rotation:g.rotation,backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,tension:Vt(s.tension,f?f.tension:0),steppedLine:!!f&&f.steppedLine,hitRadius:g.hitRadius}},_resolveDatasetElementOptions:function(t){var e,n,i,r,a,o,s,l,u,d,c,h=this,f=h._config,g=t.custom||{},p=h.chart.options,m=p.elements.line,v=at.prototype._resolveDatasetElementOptions.apply(h,arguments);return v.spanGaps=Vt(f.spanGaps,p.spanGaps),v.tension=Vt(f.lineTension,m.tension),v.steppedLine=jt([g.steppedLine,f.steppedLine,m.stepped]),v.clip=(e=Vt(f.clip,(o=h._xScale,s=h._yScale,l=v.borderWidth,d=Ut(o,u=l/2),{top:(c=Ut(s,u)).end,right:d.end,bottom:c.start,left:d.start})),q.isObject(e)?(n=e.top,i=e.right,r=e.bottom,a=e.left):n=i=r=a=e,{top:n,right:i,bottom:r,left:a}),v},calculatePointY:function(t,e,n){var i,r,a,o,s,l,u,d=this.chart,c=this._yScale,h=0,f=0;if(c.options.stacked){for(s=+c.getRightValue(t),u=(l=d._getSortedVisibleDatasetMetas()).length,i=0;i<u&&(a=l[i]).index!==n;++i)r=d.data.datasets[a.index],"line"===a.type&&a.yAxisID===c.id&&((o=+c.getRightValue(r.data[e]))<0?f+=o||0:h+=o||0);return s<0?c.getPixelForValue(f+s):c.getPixelForValue(h+s)}return c.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,i,r=this.chart,a=this.getMeta(),o=a.dataset._model,s=r.chartArea,l=a.data||[];function u(t,e,n){return Math.max(Math.min(t,n),e)}if(o.spanGaps&&(l=l.filter(function(t){return!t._model.skip})),"monotone"===o.cubicInterpolationMode)q.splineCurveMonotone(l);else for(t=0,e=l.length;t<e;++t)n=l[t]._model,i=q.splineCurve(q.previousItem(l,t)._model,n,q.nextItem(l,t)._model,o.tension),n.controlPointPreviousX=i.previous.x,n.controlPointPreviousY=i.previous.y,n.controlPointNextX=i.next.x,n.controlPointNextY=i.next.y;if(r.options.elements.line.capBezierPoints)for(t=0,e=l.length;t<e;++t)n=l[t]._model,qt(n,s)&&(0<t&&qt(l[t-1]._model,s)&&(n.controlPointPreviousX=u(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=u(n.controlPointPreviousY,s.top,s.bottom)),t<l.length-1&&qt(l[t+1]._model,s)&&(n.controlPointNextX=u(n.controlPointNextX,s.left,s.right),n.controlPointNextY=u(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var t,e=this.chart,n=this.getMeta(),i=n.data||[],r=e.chartArea,a=e.canvas,o=0,s=i.length;for(this._showLine&&(t=n.dataset._model.clip,q.canvas.clipArea(e.ctx,{left:!1===t.left?0:r.left-t.left,right:!1===t.right?a.width:r.right+t.right,top:!1===t.top?0:r.top-t.top,bottom:!1===t.bottom?a.height:r.bottom+t.bottom}),n.dataset.draw(),q.canvas.unclipArea(e.ctx));o<s;++o)i[o].draw(r)},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Vt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Vt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Vt(n.hoverBorderWidth,n.borderWidth),e.radius=Vt(n.hoverRadius,n.radius)}}),Gt=q.options.resolve;E._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){var n,i,r,a=e.index,o=this.chart;for(n=0,i=(o.data.datasets||[]).length;n<i;++n)(r=o.getDatasetMeta(n)).data[a].hidden=!r.data[a].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});var Xt=at.extend({dataElementType:Mt.Arc,linkScales:q.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i,r=this,a=r.getDataset(),o=r.getMeta(),s=r.chart.options.startAngle||0,l=r._starts=[],u=r._angles=[],d=o.data;for(r._updateRadius(),o.count=r.countVisibleElements(),e=0,n=a.data.length;e<n;e++)l[e]=s,i=r._computeAngle(e),s+=u[e]=i;for(e=0,n=d.length;e<n;++e)d[e]._options=r._resolveDataElementOptions(d[e],e),r.updateElement(d[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,i=e.options,r=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(r/2,0),e.innerRadius=Math.max(i.cutoutPercentage?e.outerRadius/100*i.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var i=this,r=i.chart,a=i.getDataset(),o=r.options,s=o.animation,l=r.scale,u=r.data.labels,d=l.xCenter,c=l.yCenter,h=o.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(a.data[e]),g=i._starts[e],p=g+(t.hidden?0:i._angles[e]),m=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[e]),v=t._options||{};q.extend(t,{_datasetIndex:i.index,_index:e,_scale:l,_model:{backgroundColor:v.backgroundColor,borderColor:v.borderColor,borderWidth:v.borderWidth,borderAlign:v.borderAlign,x:d,y:c,innerRadius:0,outerRadius:n?m:f,startAngle:n&&s.animateRotate?h:g,endAngle:n&&s.animateRotate?h:p,label:q.valueAtIndexOrDefault(u,e,u[e])}}),t.pivot()},countVisibleElements:function(){var n=this.getDataset(),t=this.getMeta(),i=0;return q.each(t.data,function(t,e){isNaN(n.data[e])||t.hidden||i++}),i},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor,r=q.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=r(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=r(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=r(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(t){var e=this,n=this.getMeta().count,i=e.getDataset(),r=e.getMeta();if(isNaN(i.data[t])||r.data[t].hidden)return 0;var a={chart:e.chart,dataIndex:t,dataset:i,datasetIndex:e.index};return Gt([e.chart.options.elements.arc.angle,2*Math.PI/n],a,t)}});E._set("pie",q.clone(E.doughnut)),E._set("pie",{cutoutPercentage:0});var Kt=Wt,Zt=q.valueOrDefault;E._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var $t=at.extend({datasetElementType:Mt.Line,dataElementType:Mt.Point,linkScales:q.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.scale,l=i._config;for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=s,a._datasetIndex=i.index,a._children=o,a._loop=!0,a._model=i._resolveDatasetElementOptions(a),a.pivot(),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i=this,r=t.custom||{},a=i.getDataset(),o=i.chart.scale,s=o.getPointPositionForValue(e,a.data[e]),l=i._resolveDataElementOptions(t,e),u=i.getMeta().dataset._model,d=n?o.xCenter:s.x,c=n?o.yCenter:s.y;t._scale=o,t._options=l,t._datasetIndex=i.index,t._index=e,t._model={x:d,y:c,skip:r.skip||isNaN(d)||isNaN(c),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:Zt(r.tension,u?u.tension:0),hitRadius:l.hitRadius}},_resolveDatasetElementOptions:function(){var t=this._config,e=this.chart.options,n=at.prototype._resolveDatasetElementOptions.apply(this,arguments);return n.spanGaps=Zt(t.spanGaps,e.spanGaps),n.tension=Zt(t.lineTension,e.elements.line.tension),n},updateBezierControlPoints:function(){var t,e,n,i,r=this.getMeta(),a=this.chart.chartArea,o=r.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}for(r.dataset._model.spanGaps&&(o=o.filter(function(t){return!t._model.skip})),t=0,e=o.length;t<e;++t)n=o[t]._model,i=q.splineCurve(q.previousItem(o,t,!0)._model,n,q.nextItem(o,t,!0)._model,n.tension),n.controlPointPreviousX=s(i.previous.x,a.left,a.right),n.controlPointPreviousY=s(i.previous.y,a.top,a.bottom),n.controlPointNextX=s(i.next.x,a.left,a.right),n.controlPointNextY=s(i.next.y,a.top,a.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,i=q.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Zt(n.hoverBorderWidth,n.borderWidth),e.radius=Zt(n.hoverRadius,n.radius)}});E._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}}),E._set("global",{datasets:{scatter:{showLine:!1}}});var Qt={bar:Ot,bubble:Rt,doughnut:Wt,horizontalBar:Ht,line:Yt,polarArea:Xt,pie:Kt,radar:$t,scatter:Yt};function Jt(t,e){return t.native?{x:t.x,y:t.y}:q.getRelativePosition(t,e)}function te(t,e){var n,i,r,a,o,s,l=t._getSortedVisibleDatasetMetas();for(i=0,a=l.length;i<a;++i)for(r=0,o=(n=l[i].data).length;r<o;++r)(s=n[r])._view.skip||e(s)}function ee(t,e){var n=[];return te(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function ne(t,i,r,a){var o=Number.POSITIVE_INFINITY,s=[];return te(t,function(t){if(!r||t.inRange(i.x,i.y)){var e=t.getCenterPoint(),n=a(i,e);n<o?(s=[t],o=n):n===o&&s.push(t)}}),s}function ie(t){var r=-1!==t.indexOf("x"),a=-1!==t.indexOf("y");return function(t,e){var n=r?Math.abs(t.x-e.x):0,i=a?Math.abs(t.y-e.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(i,2))}}function re(t,e,n){var i=Jt(e,t);n.axis=n.axis||"x";var r=ie(n.axis),a=n.intersect?ee(t,i):ne(t,i,!1,r),o=[];return a.length?(t._getSortedVisibleDatasetMetas().forEach(function(t){var e=t.data[a[0]._index];e&&!e._view.skip&&o.push(e)}),o):[]}var ae={modes:{single:function(t,e){var n=Jt(e,t),i=[];return te(t,function(t){return t.inRange(n.x,n.y)&&(i.push(t),i)}),i.slice(0,1)},label:re,index:re,dataset:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||"xy";var r=ie(n.axis),a=n.intersect?ee(t,i):ne(t,i,!1,r);return 0<a.length&&(a=t.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(t,e){return re(t,e,{intersect:!1})},point:function(t,e){return ee(t,Jt(e,t))},nearest:function(t,e,n){var i=Jt(e,t);n.axis=n.axis||"xy";var r=ie(n.axis);return ne(t,i,n.intersect,r)},x:function(t,e,n){var i=Jt(e,t),r=[],a=!1;return te(t,function(t){t.inXRange(i.x)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r},y:function(t,e,n){var i=Jt(e,t),r=[],a=!1;return te(t,function(t){t.inYRange(i.y)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r}}},oe=q.extend;function se(t,e){return q.where(t,function(t){return t.pos===e})}function le(t,r){return t.sort(function(t,e){var n=r?e:t,i=r?t:e;return n.weight===i.weight?n.index-i.index:n.weight-i.weight})}function ue(t){var e=function(t){var e,n,i,r=[];for(e=0,n=(t||[]).length;e<n;++e)i=t[e],r.push({index:e,box:i,pos:i.position,horizontal:i.isHorizontal(),weight:i.weight});return r}(t),n=le(se(e,"left"),!0),i=le(se(e,"right")),r=le(se(e,"top"),!0),a=le(se(e,"bottom"));return{leftAndTop:n.concat(r),rightAndBottom:i.concat(a),chartArea:se(e,"chartArea"),vertical:n.concat(i),horizontal:r.concat(a)}}function de(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function ce(t,e,n){var i,r,a=n.box,o=t.maxPadding;if(n.size&&(t[n.pos]-=n.size),n.size=n.horizontal?a.height:a.width,t[n.pos]+=n.size,a.getPadding){var s=a.getPadding();o.top=Math.max(o.top,s.top),o.left=Math.max(o.left,s.left),o.bottom=Math.max(o.bottom,s.bottom),o.right=Math.max(o.right,s.right)}return i=e.outerWidth-de(o,t,"left","right"),r=e.outerHeight-de(o,t,"top","bottom"),i!==t.w||r!==t.h?(t.w=i,t.h=r,n.horizontal?i!==t.w:r!==t.h):void 0}function he(t,n){var i=n.maxPadding;function e(t){var e={left:0,top:0,right:0,bottom:0};return t.forEach(function(t){e[t]=Math.max(n[t],i[t])}),e}return e(t?["left","right"]:["top","bottom"])}function fe(t,e,n){var i,r,a,o,s,l,u=[];for(i=0,r=t.length;i<r;++i)(o=(a=t[i]).box).update(a.width||e.w,a.height||e.h,he(a.horizontal,e)),ce(e,n,a)&&(l=!0,u.length&&(s=!0)),o.fullWidth||u.push(a);return s&&fe(u,e,n)||l}function ge(t,e,n){var i,r,a,o,s=n.padding,l=e.x,u=e.y;for(i=0,r=t.length;i<r;++i)o=(a=t[i]).box,a.horizontal?(o.left=o.fullWidth?s.left:e.left,o.right=o.fullWidth?n.outerWidth-s.right:e.left+e.w,o.top=u,o.bottom=u+o.height,o.width=o.right-o.left,u=o.bottom):(o.left=l,o.right=l+o.width,o.top=e.top,o.bottom=e.top+e.h,o.height=o.bottom-o.top,l=o.right);e.x=l,e.y=u}E._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var pe,me={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw:function(){e.draw.apply(e,arguments)}}]},t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var i,r=["fullWidth","position","weight"],a=r.length,o=0;o<a;++o)i=r[o],n.hasOwnProperty(i)&&(e[i]=n[i])},update:function(n,t,e){if(n){var i,r,a=n.options.layout||{},o=q.options.toPadding(a.padding),s=t-o.width,l=e-o.height,u=ue(n.boxes),d=u.vertical,c=u.horizontal,h=Object.freeze({outerWidth:t,outerHeight:e,padding:o,availableWidth:s,vBoxMaxWidth:s/2/d.length,hBoxMaxHeight:l/2}),f=oe({maxPadding:oe({},o),w:s,h:l,x:o.left,y:o.top},o);!function(t,e){var n,i,r;for(n=0,i=t.length;n<i;++n)(r=t[n]).width=r.horizontal?r.box.fullWidth&&e.availableWidth:e.vBoxMaxWidth,r.height=r.horizontal&&e.hBoxMaxHeight}(d.concat(c),h),fe(d,f,h),fe(c,f,h)&&fe(d,f,h),r=(i=f).maxPadding,i.y+=g("top"),i.x+=g("left"),g("right"),g("bottom"),ge(u.leftAndTop,f,h),f.x+=f.w,f.y+=f.h,ge(u.rightAndBottom,f,h),n.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h},q.each(u.chartArea,function(t){var e=t.box;oe(e,n.chartArea),e.update(f.w,f.h)})}function g(t){var e=Math.max(r[t]-i[t],0);return i[t]+=e,e}}},ve=(pe=Object.freeze({__proto__:null,default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&pe.default||pe,be="$chartjs",ye="chartjs-",xe=ye+"size-monitor",_e=ye+"render-monitor",we=ye+"render-animation",ke=["animationstart","webkitAnimationStart"],Me={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function Ce(t,e){var n=q.getStyle(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?Number(i[1]):void 0}var Se=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function De(t,e,n){t.addEventListener(e,n,Se)}function Ae(t,e,n){t.removeEventListener(e,n,Se)}function Pe(t,e,n,i,r){return{type:t,chart:e,native:r||null,x:void 0!==n?n:null,y:void 0!==i?i:null}}function Te(t){var e=document.createElement("div");return e.className=t||"",e}function Ie(n,i,r){var t,e,a,o,s,l,u,d,c,h,f,g,p=n[be]||(n[be]={}),m=p.resizer=(u=!(s=function(){if(p.resizer){var t=r.options.maintainAspectRatio&&n.parentNode,e=t?t.clientWidth:0;i(Pe("resize",r)),t&&t.clientWidth<e&&r.canvas&&i(Pe("resize",r))}}),d=[],t=function(){d=Array.prototype.slice.call(arguments),l=l||this,u||(u=!0,q.requestAnimFrame.call(window,function(){u=!1,s.apply(l,d)}))},e=Te(xe),a=Te(xe+"-expand"),o=Te(xe+"-shrink"),a.appendChild(Te()),o.appendChild(Te()),e.appendChild(a),e.appendChild(o),e._reset=function(){a.scrollLeft=1e6,a.scrollTop=1e6,o.scrollLeft=1e6,o.scrollTop=1e6},De(a,"scroll",v.bind(a,"expand")),De(o,"scroll",v.bind(o,"shrink")),e);function v(){e._reset(),t()}h=function(){if(p.resizer){var t=n.parentNode;t&&t!==m.parentNode&&t.insertBefore(m,t.firstChild),m._reset()}},f=(c=n)[be]||(c[be]={}),g=f.renderProxy=function(t){t.animationName===we&&h()},q.each(ke,function(t){De(c,t,g)}),f.reflow=!!c.offsetParent,c.classList.add(_e)}function Oe(t){var e,n,i,r=t[be]||{},a=r.resizer;delete r.resizer,n=(e=t)[be]||{},(i=n.renderProxy)&&(q.each(ke,function(t){Ae(e,t,i)}),delete n.renderProxy),e.classList.remove(_e),a&&a.parentNode&&a.parentNode.removeChild(a)}var Fe={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(t){if(!this.disableCSSInjection){var e=t.getRootNode?t.getRootNode():document;!function(t,e){var n=t[be]||(t[be]={});if(!n.containsStyles){n.containsStyles=!0,e="/* Chart.js */\n"+e;var i=document.createElement("style");i.setAttribute("type","text/css"),i.appendChild(document.createTextNode(e)),t.appendChild(i)}}(e.host?e:document.head,ve)}},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(this._ensureLoaded(t),function(t,e){var n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t[be]={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===r||""===r){var a=Ce(t,"width");void 0!==a&&(t.width=a)}if(null===i||""===i)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var o=Ce(t,"height");void 0!==a&&(t.height=o)}}(t,e),n):null},releaseContext:function(t){var n=t.canvas;if(n[be]){var i=n[be].initial;["height","width"].forEach(function(t){var e=i[t];q.isNullOrUndef(e)?n.removeAttribute(t):n.setAttribute(t,e)}),q.each(i.style||{},function(t,e){n.style[e]=t}),n.width=n.width,delete n[be]}},addEventListener:function(a,t,o){var e=a.canvas;if("resize"!==t){var n=o[be]||(o[be]={});De(e,t,(n.proxies||(n.proxies={}))[a.id+"_"+t]=function(t){var e,n,i,r;o((n=a,i=Me[(e=t).type]||e.type,r=q.getRelativePosition(e,n),Pe(i,n,r.x,r.y,e)))})}else Ie(e,o,a)},removeEventListener:function(t,e,n){var i=t.canvas;if("resize"!==e){var r=((n[be]||{}).proxies||{})[t.id+"_"+e];r&&Ae(i,e,r)}else Oe(i)}};q.addEvent=De,q.removeEvent=Ae;var Le=Fe._enabled?Fe:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},Re=q.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Le);E._set("global",{plugins:{}});var ze={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),this._cacheId++},unregister:function(t){var n=this._plugins;[].concat(t).forEach(function(t){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var i,r,a,o,s,l=this.descriptors(t),u=l.length;for(i=0;i<u;++i)if("function"==typeof(s=(a=(r=l[i]).plugin)[e])&&((o=[t].concat(n||[])).push(r.options),!1===s.apply(a,o)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var i=[],r=[],n=t&&t.config||{},a=n.options&&n.options.plugins||{};return this._plugins.concat(n.plugins||[]).forEach(function(t){if(-1===i.indexOf(t)){var e=t.id,n=a[e];!1!==n&&(!0===n&&(n=q.clone(E.global.plugins[e])),i.push(t),r.push({plugin:t,options:n||{}}))}}),e.descriptors=r,e.id=this._cacheId,r},_invalidate:function(t){delete t.$plugins}},Ne={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=q.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?q.merge({},[E.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=q.extend(this.defaults[t],e))},addScalesToLayout:function(e){q.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,me.addBox(e,t)})}},Be=q.valueOrDefault,Ee=q.rtl.getRtlAdapter;E._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:q.noop,title:function(t,e){var n="",i=e.labels,r=i?i.length:0;if(0<t.length){var a=t[0];a.label?n=a.label:a.xLabel?n=a.xLabel:0<r&&a.index<r&&(n=i[a.index])}return n},afterTitle:q.noop,beforeBody:q.noop,beforeLabel:q.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),q.isNullOrUndef(t.value)?n+=t.yLabel:n+=t.value,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:q.noop,afterBody:q.noop,beforeFooter:q.noop,footer:q.noop,afterFooter:q.noop}}});var We={average:function(t){if(!t.length)return!1;var e,n,i=0,r=0,a=0;for(e=0,n=t.length;e<n;++e){var o=t[e];if(o&&o.hasValue()){var s=o.tooltipPosition();i+=s.x,r+=s.y,++a}}return{x:i/a,y:r/a}},nearest:function(t,e){var n,i,r,a=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){var l=t[n];if(l&&l.hasValue()){var u=l.getCenterPoint(),d=q.distanceBetweenPoints(e,u);d<s&&(s=d,r=l)}}if(r){var c=r.tooltipPosition();a=c.x,o=c.y}return{x:a,y:o}}};function He(t,e){return e&&(q.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ve(t){return("string"==typeof t||t instanceof String)&&-1<t.indexOf("\n")?t.split("\n"):t}function je(t){var e=E.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,rtl:t.rtl,textDirection:t.textDirection,bodyFontColor:t.bodyFontColor,_bodyFontFamily:Be(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:Be(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:Be(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:Be(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:Be(t.titleFontStyle,e.defaultFontStyle),titleFontSize:Be(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:Be(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:Be(t.footerFontStyle,e.defaultFontStyle),footerFontSize:Be(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function qe(t,e){var n=t._chart.ctx,i=2*e.yPadding,r=0,a=e.body,o=a.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);o+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,u=e.titleFontSize,d=e.bodyFontSize,c=e.footerFontSize;i+=s*u,i+=s?(s-1)*e.titleSpacing:0,i+=s?e.titleMarginBottom:0,i+=o*d,i+=o?(o-1)*e.bodySpacing:0,i+=l?e.footerMarginTop:0,i+=l*c,i+=l?(l-1)*e.footerSpacing:0;function h(t){r=Math.max(r,n.measureText(t).width+f)}var f=0;return n.font=q.fontString(u,e._titleFontStyle,e._titleFontFamily),q.each(e.title,h),n.font=q.fontString(d,e._bodyFontStyle,e._bodyFontFamily),q.each(e.beforeBody.concat(e.afterBody),h),f=e.displayColors?d+2:0,q.each(a,function(t){q.each(t.before,h),q.each(t.lines,h),q.each(t.after,h)}),f=0,n.font=q.fontString(c,e._footerFontStyle,e._footerFontFamily),q.each(e.footer,h),{width:r+=2*e.xPadding,height:i}}function Ue(t,e){return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function Ye(t){return He([],Ve(t))}var Ge=$.extend({initialize:function(){this._model=je(this._options),this._lastActive=[]},getTitle:function(){var t=this._options.callbacks,e=t.beforeTitle.apply(this,arguments),n=t.title.apply(this,arguments),i=t.afterTitle.apply(this,arguments),r=[];return r=He(r,Ve(e)),r=He(r,Ve(n)),r=He(r,Ve(i))},getBeforeBody:function(){return Ye(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,n){var i=this,r=i._options.callbacks,a=[];return q.each(t,function(t){var e={before:[],lines:[],after:[]};He(e.before,Ve(r.beforeLabel.call(i,t,n))),He(e.lines,r.label.call(i,t,n)),He(e.after,Ve(r.afterLabel.call(i,t,n))),a.push(e)}),a},getAfterBody:function(){return Ye(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this._options.callbacks,e=t.beforeFooter.apply(this,arguments),n=t.footer.apply(this,arguments),i=t.afterFooter.apply(this,arguments),r=[];return r=He(r,Ve(e)),r=He(r,Ve(n)),r=He(r,Ve(i))},update:function(t){var e,n,i,r,a,o,s,l,u,d,c,h,f,g,p,m,v,b,y,x,_,w,k,M=this,C=M._options,S=M._model,D=M._model=je(C),A=M._active,P=M._data,T={xAlign:S.xAlign,yAlign:S.yAlign},I={x:S.x,y:S.y},O={width:S.width,height:S.height},F={x:S.caretX,y:S.caretY};if(A.length){D.opacity=1;var L=[],R=[];F=We[C.position].call(M,A,M._eventPosition);var z=[];for(e=0,n=A.length;e<n;++e)z.push((m=A[e],k=w=_=b=v=void 0,v=m._xScale,b=m._yScale||m._scale,y=m._index,x=m._datasetIndex,_=m._chart.getDatasetMeta(x).controller,w=_._getIndexScale(),k=_._getValueScale(),{xLabel:v?v.getLabelForIndex(y,x):"",yLabel:b?b.getLabelForIndex(y,x):"",label:w?""+w.getLabelForIndex(y,x):"",value:k?""+k.getLabelForIndex(y,x):"",index:y,datasetIndex:x,x:m._model.x,y:m._model.y}));C.filter&&(z=z.filter(function(t){return C.filter(t,P)})),C.itemSort&&(z=z.sort(function(t,e){return C.itemSort(t,e,P)})),q.each(z,function(t){L.push(C.callbacks.labelColor.call(M,t,M._chart)),R.push(C.callbacks.labelTextColor.call(M,t,M._chart))}),D.title=M.getTitle(z,P),D.beforeBody=M.getBeforeBody(z,P),D.body=M.getBody(z,P),D.afterBody=M.getAfterBody(z,P),D.footer=M.getFooter(z,P),D.x=F.x,D.y=F.y,D.caretPadding=C.caretPadding,D.labelColors=L,D.labelTextColors=R,D.dataPoints=z,T=function(t,e){var n,i,r,a,o,s=t._model,l=t._chart,u=t._chart.chartArea,d="center",c="center";s.y<e.height?c="top":s.y>l.height-e.height&&(c="bottom");var h=(u.left+u.right)/2,f=(u.top+u.bottom)/2;i="center"===c?(n=function(t){return t<=h},function(t){return h<t}):(n=function(t){return t<=e.width/2},function(t){return t>=l.width-e.width/2}),r=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},a=function(t){return t-e.width-s.caretSize-s.caretPadding<0},o=function(t){return t<=f?"top":"bottom"},n(s.x)?(d="left",r(s.x)&&(d="center",c=o(s.y))):i(s.x)&&(d="right",a(s.x)&&(d="center",c=o(s.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:d,yAlign:g.yAlign?g.yAlign:c}}(this,O=qe(this,D)),i=D,r=O,a=T,o=M._chart,s=i.x,l=i.y,u=i.caretSize,d=i.caretPadding,c=i.cornerRadius,h=a.xAlign,f=a.yAlign,g=u+d,p=c+d,"right"===h?s-=r.width:"center"===h&&((s-=r.width/2)+r.width>o.width&&(s=o.width-r.width),s<0&&(s=0)),"top"===f?l+=g:l-="bottom"===f?r.height+g:r.height/2,"center"===f?"left"===h?s+=g:"right"===h&&(s-=g):"left"===h?s-=p:"right"===h&&(s+=p),I={x:s,y:l}}else D.opacity=0;return D.xAlign=T.xAlign,D.yAlign=T.yAlign,D.x=I.x,D.y=I.y,D.width=O.width,D.height=O.height,D.caretX=F.x,D.caretY=F.y,M._model=D,t&&C.custom&&C.custom.call(M,D),M},drawCaret:function(t,e){var n=this._chart.ctx,i=this._view,r=this.getCaretPosition(t,e,i);n.lineTo(r.x1,r.y1),n.lineTo(r.x2,r.y2),n.lineTo(r.x3,r.y3)},getCaretPosition:function(t,e,n){var i,r,a,o,s,l,u=n.caretSize,d=n.cornerRadius,c=n.xAlign,h=n.yAlign,f=t.x,g=t.y,p=e.width,m=e.height;if("center"===h)s=g+m/2,l="left"===c?(r=(i=f)-u,a=i,o=s+u,s-u):(r=(i=f+p)+u,a=i,o=s-u,s+u);else if(a=(i="left"===c?(r=f+d+u)-u:"right"===c?(r=f+p-d-u)-u:(r=n.caretX)-u,r+u),"top"===h)s=(o=g)-u,l=o;else{s=(o=g+m)+u,l=o;var v=a;a=i,i=v}return{x1:i,x2:r,x3:a,y1:o,y2:s,y3:l}},drawTitle:function(t,e,n){var i,r,a,o=e.title,s=o.length;if(s){var l=Ee(e.rtl,e.x,e.width);for(t.x=Ue(e,e._titleAlign),n.textAlign=l.textAlign(e._titleAlign),n.textBaseline="middle",i=e.titleFontSize,r=e.titleSpacing,n.fillStyle=e.titleFontColor,n.font=q.fontString(i,e._titleFontStyle,e._titleFontFamily),a=0;a<s;++a)n.fillText(o[a],l.x(t.x),t.y+i/2),t.y+=i+r,a+1===s&&(t.y+=e.titleMarginBottom-r)}},drawBody:function(e,t,n){function i(t){n.fillText(t,y.x(e.x+v),e.y+h/2),e.y+=h+f}var r,a,o,s,l,u,d,c,h=t.bodyFontSize,f=t.bodySpacing,g=t._bodyAlign,p=t.body,m=t.displayColors,v=0,b=m?Ue(t,"left"):0,y=Ee(t.rtl,t.x,t.width),x=y.textAlign(g);for(n.textAlign=g,n.textBaseline="middle",n.font=q.fontString(h,t._bodyFontStyle,t._bodyFontFamily),e.x=Ue(t,x),n.fillStyle=t.bodyFontColor,q.each(t.beforeBody,i),v=m&&"right"!==x?"center"===g?h/2+1:h+2:0,l=0,d=p.length;l<d;++l){for(r=p[l],a=t.labelTextColors[l],o=t.labelColors[l],n.fillStyle=a,q.each(r.before,i),u=0,c=(s=r.lines).length;u<c;++u){if(m){var _=y.x(b);n.fillStyle=t.legendColorBackground,n.fillRect(y.leftForLtr(_,h),e.y,h,h),n.lineWidth=1,n.strokeStyle=o.borderColor,n.strokeRect(y.leftForLtr(_,h),e.y,h,h),n.fillStyle=o.backgroundColor,n.fillRect(y.leftForLtr(y.xPlus(_,1),h-2),e.y+1,h-2,h-2),n.fillStyle=a}i(s[u])}q.each(r.after,i)}v=0,q.each(t.afterBody,i),e.y-=f},drawFooter:function(t,e,n){var i,r,a=e.footer,o=a.length;if(o){var s=Ee(e.rtl,e.x,e.width);for(t.x=Ue(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=s.textAlign(e._footerAlign),n.textBaseline="middle",i=e.footerFontSize,n.fillStyle=e.footerFontColor,n.font=q.fontString(i,e._footerFontStyle,e._footerFontFamily),r=0;r<o;++r)n.fillText(a[r],s.x(t.x),t.y+i/2),t.y+=i+e.footerSpacing}},drawBackground:function(t,e,n,i){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var r=e.xAlign,a=e.yAlign,o=t.x,s=t.y,l=i.width,u=i.height,d=e.cornerRadius;n.beginPath(),n.moveTo(o+d,s),"top"===a&&this.drawCaret(t,i),n.lineTo(o+l-d,s),n.quadraticCurveTo(o+l,s,o+l,s+d),"center"===a&&"right"===r&&this.drawCaret(t,i),n.lineTo(o+l,s+u-d),n.quadraticCurveTo(o+l,s+u,o+l-d,s+u),"bottom"===a&&this.drawCaret(t,i),n.lineTo(o+d,s+u),n.quadraticCurveTo(o,s+u,o,s+u-d),"center"===a&&"left"===r&&this.drawCaret(t,i),n.lineTo(o,s+d),n.quadraticCurveTo(o,s,o+d,s),n.closePath(),n.fill(),0<e.borderWidth&&n.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},i={x:e.x,y:e.y},r=Math.abs(e.opacity<.001)?0:e.opacity,a=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&a&&(t.save(),t.globalAlpha=r,this.drawBackground(i,e,t,n),i.y+=e.yPadding,q.rtl.overrideTextDirection(t,e.textDirection),this.drawTitle(i,e,t),this.drawBody(i,e,t),this.drawFooter(i,e,t),q.rtl.restoreTextDirection(t,e.textDirection),t.restore())}},handleEvent:function(t){var e,n=this,i=n._options;return n._lastActive=n._lastActive||[],"mouseout"===t.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(t,i.mode,i),i.reverse&&n._active.reverse()),(e=!q.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(i.enabled||i.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}}),Xe=We,Ke=Ge;Ke.positioners=Xe;var Ze=q.valueOrDefault;function $e(){return q.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){if("xAxes"===t||"yAxes"===t){var r,a,o,s=n[t].length;for(e[t]||(e[t]=[]),r=0;r<s;++r)o=n[t][r],a=Ze(o.type,"xAxes"===t?"category":"linear"),r>=e[t].length&&e[t].push({}),!e[t][r].type||o.type&&o.type!==e[t][r].type?q.merge(e[t][r],[Ne.getScaleDefaults(a),o]):q.merge(e[t][r],o)}else q._merger(t,e,n,i)}})}function Qe(){return q.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){var r=e[t]||{},a=n[t];"scales"===t?e[t]=$e(r,a):"scale"===t?e[t]=q.merge(r,[Ne.getScaleDefaults(a.type),a]):q._merger(t,e,n,i)}})}function Je(t,e,n){for(var i,r=function(t){return t.id===i};i=e+n++,0<=q.findIndex(t,r););return i}function tn(t){return"top"===t||"bottom"===t}function en(n,i){return function(t,e){return t[n]===e[n]?t[i]-e[i]:t[n]-e[n]}}E._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});function nn(t,e){return this.construct(t,e),this}q.extend(nn.prototype,{construct:function(t,e){var n,i,r=this;(i=(n=(n=e)||{}).data=n.data||{}).datasets=i.datasets||[],i.labels=i.labels||[],n.options=Qe(E.global,E[n.type],n.options||{}),e=n;var a=Re.acquireContext(t,e),o=a&&a.canvas,s=o&&o.height,l=o&&o.width;r.id=q.uid(),r.ctx=a,r.canvas=o,r.config=e,r.width=l,r.height=s,r.aspectRatio=s?l/s:null,r.options=e.options,r._bufferedRender=!1,r._layers=[],(r.chart=r).controller=r,nn.instances[r.id]=r,Object.defineProperty(r,"data",{get:function(){return r.config.data},set:function(t){r.config.data=t}}),a&&o?(r.initialize(),r.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return ze.notify(t,"beforeInit"),q.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.initToolTip(),ze.notify(t,"afterInit"),t},clear:function(){return q.canvas.clear(this),this},stop:function(){return tt.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,i=e.canvas,r=n.maintainAspectRatio&&e.aspectRatio||null,a=Math.max(0,Math.floor(q.getMaximumWidth(i))),o=Math.max(0,Math.floor(r?a/r:q.getMaximumHeight(i)));if((e.width!==a||e.height!==o)&&(i.width=e.width=a,i.height=e.height=o,i.style.width=a+"px",i.style.height=o+"px",q.retinaScale(e,n.devicePixelRatio),!t)){var s={width:a,height:o};ze.notify(e,"resize",[s]),n.onResize&&n.onResize(e,s),e.stop(),e.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,n=t.scales||{},e=t.scale;q.each(n.xAxes,function(t,e){t.id||(t.id=Je(n.xAxes,"x-axis-",e))}),q.each(n.yAxes,function(t,e){t.id||(t.id=Je(n.yAxes,"y-axis-",e))}),e&&(e.id=e.id||"scale")},buildOrUpdateScales:function(){var o=this,t=o.options,s=o.scales||{},e=[],l=Object.keys(s).reduce(function(t,e){return t[e]=!1,t},{});t.scales&&(e=e.concat((t.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(t.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),t.scale&&e.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),q.each(e,function(t){var e=t.options,n=e.id,i=Ze(e.type,t.dtype);tn(e.position)!==tn(t.dposition)&&(e.position=t.dposition),l[n]=!0;var r=null;if(n in s&&s[n].type===i)(r=s[n]).options=e,r.ctx=o.ctx,r.chart=o;else{var a=Ne.getScaleConstructor(i);if(!a)return;r=new a({id:n,type:i,options:e,ctx:o.ctx,chart:o}),s[r.id]=r}r.mergeTicksOptions(),t.isDefault&&(o.scale=r)}),q.each(l,function(t,e){t||delete s[e]}),o.scales=s,Ne.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t,e,n=this,i=[],r=n.data.datasets;for(t=0,e=r.length;t<e;t++){var a=r[t],o=n.getDatasetMeta(t),s=a.type||n.config.type;if(o.type&&o.type!==s&&(n.destroyDatasetMeta(t),o=n.getDatasetMeta(t)),o.type=s,o.order=a.order||0,o.index=t,o.controller)o.controller.updateIndex(t),o.controller.linkScales();else{var l=Qt[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(n,t),i.push(o.controller)}}return i},resetElements:function(){var n=this;q.each(n.data.datasets,function(t,e){n.getDatasetMeta(e).controller.reset()},n)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e,n,i,r,a=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),r=(i=a).options,q.each(i.scales,function(t){me.removeBox(i,t)}),r=Qe(E.global,E[i.config.type],r),i.options=i.config.options=r,i.ensureScalesHaveIDs(),i.buildOrUpdateScales(),i.tooltip._options=r.tooltips,i.tooltip.initialize(),ze._invalidate(a),!1!==ze.notify(a,"beforeUpdate")){a.tooltip._data=a.data;var o=a.buildOrUpdateControllers();for(e=0,n=a.data.datasets.length;e<n;e++)a.getDatasetMeta(e).controller.buildOrUpdateElements();a.updateLayout(),a.options.animation&&a.options.animation.duration&&q.each(o,function(t){t.reset()}),a.updateDatasets(),a.tooltip.initialize(),a.lastActive=[],ze.notify(a,"afterUpdate"),a._layers.sort(en("z","_idx")),a._bufferedRender?a._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:a.render(t)}},updateLayout:function(){var e=this;!1!==ze.notify(e,"beforeLayout")&&(me.update(this,this.width,this.height),e._layers=[],q.each(e.boxes,function(t){t._configure&&t._configure(),e._layers.push.apply(e._layers,t._layers())},e),e._layers.forEach(function(t,e){t._idx=e}),ze.notify(e,"afterScaleUpdate"),ze.notify(e,"afterLayout"))},updateDatasets:function(){if(!1!==ze.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);ze.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==ze.notify(this,"beforeDatasetUpdate",[n])&&(e.controller._update(),ze.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,i=Ze(t.duration,n&&n.duration),r=t.lazy;if(!1!==ze.notify(e,"beforeRender")){var a=function(t){ze.notify(e,"afterRender"),q.callback(n&&n.onComplete,[t],e)};if(n&&i){var o=new J({numSteps:i/16.66,easing:t.easing||n.easing,render:function(t,e){var n=q.easing.effects[e.easing],i=e.currentStep,r=i/e.numSteps;t.draw(n(r),r,i)},onAnimationProgress:n.onProgress,onAnimationComplete:a});tt.addAnimation(e,o,i,r)}else e.draw(),a(new J({numSteps:0,chart:e}));return e}},draw:function(t){var e,n,i=this;if(i.clear(),q.isNullOrUndef(t)&&(t=1),i.transition(t),!(i.width<=0||i.height<=0)&&!1!==ze.notify(i,"beforeDraw",[t])){for(n=i._layers,e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(i.chartArea);for(i.drawDatasets(t);e<n.length;++e)n[e].draw(i.chartArea);i._drawTooltip(t),ze.notify(i,"afterDraw",[t])}},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},_getSortedDatasetMetas:function(t){var e,n,i=[];for(e=0,n=(this.data.datasets||[]).length;e<n;++e)t&&!this.isDatasetVisible(e)||i.push(this.getDatasetMeta(e));return i.sort(en("order","index")),i},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(t){var e,n;if(!1!==ze.notify(this,"beforeDatasetsDraw",[t])){for(n=(e=this._getSortedVisibleDatasetMetas()).length-1;0<=n;--n)this.drawDataset(e[n],t);ze.notify(this,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n={meta:t,index:t.index,easingValue:e};!1!==ze.notify(this,"beforeDatasetDraw",[n])&&(t.controller.draw(e),ze.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==ze.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),ze.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return ae.modes.single(this,t)},getElementsAtEvent:function(t){return ae.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return ae.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var i=ae.modes[e];return"function"==typeof i?i(this,t,n):[]},getDatasetAtEvent:function(t){return ae.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n=n||(e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e.order||0,index:t})},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],i=n._meta&&n._meta[e];i&&(i.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,i=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),q.canvas.clear(n),Re.releaseContext(n.ctx),n.canvas=null,n.ctx=null),ze.notify(n,"destroy"),delete nn.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new Ke({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var e=this,n=e._listeners={},i=function(){e.eventHandler.apply(e,arguments)};q.each(e.options.events,function(t){Re.addEventListener(e,t,i),n[t]=i}),e.options.responsive&&(i=function(){e.resize()},Re.addEventListener(e,"resize",i),n.resize=i)},unbindEvents:function(){var n=this,t=n._listeners;t&&(delete n._listeners,q.each(t,function(t,e){Re.removeEventListener(n,e,t)}))},updateHoverStyle:function(t,e,n){var i,r,a,o=n?"set":"remove";for(r=0,a=t.length;r<a;++r)(i=t[r])&&this.getDatasetMeta(i._datasetIndex).controller[o+"HoverStyle"](i);"dataset"===e&&this.getDatasetMeta(t[0]._datasetIndex).controller["_"+o+"DatasetHoverStyle"]()},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==ze.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var i=e.handleEvent(t);n&&(i=n._start?n.handleEvent(t):i|n.handleEvent(t)),ze.notify(e,"afterEvent",[t]);var r=e._bufferedRequest;return r?e.render(r):i&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,i=n.options||{},r=i.hover;return n.lastActive=n.lastActive||[],"mouseout"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,r.mode,r),q.callback(i.onHover||i.hover.onHover,[t.native,n.active],n),"mouseup"!==t.type&&"click"!==t.type||i.onClick&&i.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,r.mode,!1),n.active.length&&r.mode&&n.updateHoverStyle(n.active,r.mode,!0),e=!q.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),nn.instances={};var rn=nn;(nn.Controller=nn).types={},q.configMerge=Qe,q.scaleMerge=$e;function an(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function on(t){this.options=t||{}}q.extend(on.prototype,{formats:an,parse:an,format:an,add:an,diff:an,startOf:an,endOf:an,_create:function(t){return t}}),on.override=function(t){q.extend(on.prototype,t)};var sn={_date:on},ln={formatters:{values:function(t){return q.isArray(t)?t:""+t},linear:function(t,e,n){var i=3<n.length?n[2]-n[1]:n[1]-n[0];1<Math.abs(i)&&t!==Math.floor(t)&&(i=t-Math.floor(t));var r=q.log10(Math.abs(i)),a="";if(0!==t)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var o=q.log10(Math.abs(t)),s=Math.floor(o)-Math.floor(r);s=Math.max(Math.min(s,20),0),a=t.toExponential(s)}else{var l=-1*Math.floor(r);l=Math.max(Math.min(l,20),0),a=t.toFixed(l)}else a="0";return a},logarithmic:function(t,e,n){var i=t/Math.pow(10,Math.floor(q.log10(t)));return 0===t?"0":1==i||2==i||5==i||0===e||e===n.length-1?t.toExponential():""}}},un=q.isArray,dn=q.isNullOrUndef,cn=q.valueOrDefault,hn=q.valueAtIndexOrDefault;function fn(t,e,n){var i,r=t.getTicks().length,a=Math.min(e,r-1),o=t.getPixelForTick(a),s=t._startPixel,l=t._endPixel;if(!(n&&(i=1===r?Math.max(o-s,l-o):0===e?(t.getPixelForTick(1)-o)/2:(o-t.getPixelForTick(a-1))/2,(o+=a<e?i:-i)<s-1e-6||l+1e-6<o)))return o}function gn(t,e,n,i){var r,a,o,s,l,u,d,c,h,f,g,p,m,v,b,y=n.length,x=[],_=[],w=[];for(r=0;r<y;++r){if(s=n[r].label,l=n[r].major?e.major:e.minor,t.font=u=l.string,d=i[u]=i[u]||{data:{},gc:[]},c=l.lineHeight,h=f=0,dn(s)||un(s)){if(un(s))for(a=0,o=s.length;a<o;++a)g=s[a],dn(g)||un(g)||(h=q.measureText(t,d.data,d.gc,h,g),f+=c)}else h=q.measureText(t,d.data,d.gc,h,s),f=c;x.push(h),_.push(f),w.push(c/2)}function k(t){return{width:x[t]||0,height:_[t]||0,offset:w[t]||0}}return v=i,b=y,q.each(v,function(t){var e,n=t.gc,i=n.length/2;if(b<i){for(e=0;e<i;++e)delete t.data[n[e]];n.splice(0,i)}}),p=x.indexOf(Math.max.apply(null,x)),m=_.indexOf(Math.max.apply(null,_)),{first:k(0),last:k(y-1),widest:k(p),highest:k(m)}}function pn(t){return t.drawTicks?t.tickMarkLength:0}function mn(t){var e,n;return t.display?(e=q.options._parseFont(t),n=q.options.toPadding(t.padding),e.lineHeight+n.height):0}function vn(t,e){return q.extend(q.options._parseFont({fontFamily:cn(e.fontFamily,t.fontFamily),fontSize:cn(e.fontSize,t.fontSize),fontStyle:cn(e.fontStyle,t.fontStyle),lineHeight:cn(e.lineHeight,t.lineHeight)}),{color:q.options.resolve([e.fontColor,t.fontColor,E.global.defaultFontColor])})}function bn(t){var e=vn(t,t.minor);return{minor:e,major:t.major.enabled?vn(t,t.major):e}}function yn(t){var e,n,i,r=[];for(n=0,i=t.length;n<i;++n)void 0!==(e=t[n])._index&&r.push(e);return r}function xn(t,e,n,i){var r,a,o,s,l=function(t){var e,n,i=t.length;if(i<2)return!1;for(n=t[0],e=1;e<i;++e)if(t[e]-t[e-1]!==n)return!1;return n}(t),u=(e.length-1)/i;if(!l)return Math.max(u,1);for(o=0,s=(r=q.math._factorize(l)).length-1;o<s;o++)if(u<(a=r[o]))return a;return Math.max(u,1)}function _n(t,e,n,i){var r,a,o,s,l=cn(n,0),u=Math.min(cn(i,t.length),t.length),d=0;for(e=Math.ceil(e),i&&(e=(r=i-n)/Math.floor(r/e)),s=l;s<0;)d++,s=Math.round(l+d*e);for(a=Math.max(l,0);a<u;a++)o=t[a],a===s?(o._index=a,d++,s=Math.round(l+d*e)):delete o.label}E._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:ln.formatters.values,minor:{},major:{}}});var wn=$.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){q.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var i,r,a,o,s,l=this,u=l.options.ticks,d=u.sampleSize;if(l.beforeUpdate(),l.maxWidth=t,l.maxHeight=e,l.margins=q.extend({left:0,right:0,top:0,bottom:0},n),l._ticks=null,l.ticks=null,l._labelSizes=null,l._maxLabelLines=0,l.longestLabelWidth=0,l.longestTextCache=l.longestTextCache||{},l._gridLineItems=null,l._labelItems=null,l.beforeSetDimensions(),l.setDimensions(),l.afterSetDimensions(),l.beforeDataLimits(),l.determineDataLimits(),l.afterDataLimits(),l.beforeBuildTicks(),o=l.buildTicks()||[],(!(o=l.afterBuildTicks(o)||o)||!o.length)&&l.ticks)for(o=[],i=0,r=l.ticks.length;i<r;++i)o.push({value:l.ticks[i],major:!1});return s=d<(l._ticks=o).length,a=l._convertTicksToLabels(s?function(t,e){for(var n=[],i=t.length/e,r=0,a=t.length;r<a;r+=i)n.push(t[Math.floor(r)]);return n}(o,d):o),l._configure(),l.beforeCalculateTickRotation(),l.calculateTickRotation(),l.afterCalculateTickRotation(),l.beforeFit(),l.fit(),l.afterFit(),l._ticksToDraw=u.display&&(u.autoSkip||"auto"===u.source)?l._autoSkip(o):o,s&&(a=l._convertTicksToLabels(l._ticksToDraw)),l.ticks=a,l.afterUpdate(),l.minSize},_configure:function(){var t,e,n=this,i=n.options.ticks.reverse;n.isHorizontal()?(t=n.left,e=n.right):(t=n.top,e=n.bottom,i=!i),n._startPixel=t,n._endPixel=e,n._reversePixels=i,n._length=e-t},afterUpdate:function(){q.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){q.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){q.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){q.callback(this.options.beforeDataLimits,[this])},determineDataLimits:q.noop,afterDataLimits:function(){q.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){q.callback(this.options.beforeBuildTicks,[this])},buildTicks:q.noop,afterBuildTicks:function(t){var e=this;return un(t)&&t.length?q.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=q.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){q.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){q.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){q.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t,e,n,i,r,a,o,s=this,l=s.options,u=l.ticks,d=s.getTicks().length,c=u.minRotation||0,h=u.maxRotation,f=c;!s._isVisible()||!u.display||h<=c||d<=1||!s.isHorizontal()?s.labelRotation=c:(e=(t=s._getLabelSizes()).widest.width,n=t.highest.height-t.highest.offset,i=Math.min(s.maxWidth,s.chart.width-e),(r=l.offset?s.maxWidth/d:i/(d-1))<e+6&&(r=i/(d-(l.offset?.5:1)),a=s.maxHeight-pn(l.gridLines)-u.padding-mn(l.scaleLabel),o=Math.sqrt(e*e+n*n),f=q.toDegrees(Math.min(Math.asin(Math.min((t.highest.height+6)/r,1)),Math.asin(Math.min(a/o,1))-Math.asin(n/o))),f=Math.max(c,Math.min(h,f))),s.labelRotation=f)},afterCalculateTickRotation:function(){q.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){q.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=t.chart,i=t.options,r=i.ticks,a=i.scaleLabel,o=i.gridLines,s=t._isVisible(),l="bottom"===i.position,u=t.isHorizontal();if(u?e.width=t.maxWidth:s&&(e.width=pn(o)+mn(a)),u?s&&(e.height=pn(o)+mn(a)):e.height=t.maxHeight,r.display&&s){var d=bn(r),c=t._getLabelSizes(),h=c.first,f=c.last,g=c.widest,p=c.highest,m=.4*d.minor.lineHeight,v=r.padding;if(u){var b=0!==t.labelRotation,y=q.toRadians(t.labelRotation),x=Math.cos(y),_=Math.sin(y),w=_*g.width+x*(p.height-(b?p.offset:0))+(b?0:m);e.height=Math.min(t.maxHeight,e.height+w+v);var k,M,C=t.getPixelForTick(0)-t.left,S=t.right-t.getPixelForTick(t.getTicks().length-1);M=b?(k=l?x*h.width+_*h.offset:_*(h.height-h.offset),l?_*(f.height-f.offset):x*f.width+_*f.offset):(k=h.width/2,f.width/2),t.paddingLeft=Math.max((k-C)*t.width/(t.width-C),0)+3,t.paddingRight=Math.max((M-S)*t.width/(t.width-S),0)+3}else{var D=r.mirror?0:g.width+v+m;e.width=Math.min(t.maxWidth,e.width+D),t.paddingTop=h.height/2,t.paddingBottom=f.height/2}}t.handleMargins(),u?(t.width=t._length=n.width-t.margins.left-t.margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=n.height-t.margins.top-t.margins.bottom)},handleMargins:function(){var t=this;t.margins&&(t.margins.left=Math.max(t.paddingLeft,t.margins.left),t.margins.top=Math.max(t.paddingTop,t.margins.top),t.margins.right=Math.max(t.paddingRight,t.margins.right),t.margins.bottom=Math.max(t.paddingBottom,t.margins.bottom))},afterFit:function(){q.callback(this.options.afterFit,[this])},isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(dn(t))return NaN;if(("number"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},_convertTicksToLabels:function(t){var e,n,i,r=this;for(r.ticks=t.map(function(t){return t.value}),r.beforeTickToLabelConversion(),e=r.convertTicksToLabels(t)||r.ticks,r.afterTickToLabelConversion(),n=0,i=t.length;n<i;++n)t[n].label=e[n];return e},_getLabelSizes:function(){var t=this,e=t._labelSizes;return e||(t._labelSizes=e=gn(t.ctx,bn(t.options.ticks),t.getTicks(),t.longestTextCache),t.longestLabelWidth=e.widest.width),e},_parseValue:function(t){var e,n,i,r;return r=un(t)?(e=+this.getRightValue(t[0]),n=+this.getRightValue(t[1]),i=Math.min(e,n),Math.max(e,n)):(e=void 0,i=n=t=+this.getRightValue(t)),{min:i,max:r,start:e,end:n}},_getScaleLabel:function(t){var e=this._parseValue(t);return void 0!==e.start?"["+e.start+", "+e.end+"]":+this.getRightValue(t)},getLabelForIndex:q.noop,getPixelForValue:q.noop,getValueForPixel:q.noop,getPixelForTick:function(t){var e=this.options.offset,n=this._ticks.length,i=1/Math.max(n-(e?0:1),1);return t<0||n-1<t?null:this.getPixelForDecimal(t*i+(e?i/2:0))},getPixelForDecimal:function(t){return this._reversePixels&&(t=1-t),this._startPixel+t*this._length},getDecimalForPixel:function(t){var e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:0<t&&0<e?t:0},_autoSkip:function(t){var e,n,i,r,a=this.options.ticks,o=this._length,s=a.maxTicksLimit||o/this._tickSize()+1,l=a.major.enabled?function(t){var e,n,i=[];for(e=0,n=t.length;e<n;e++)t[e].major&&i.push(e);return i}(t):[],u=l.length,d=l[0],c=l[u-1];if(s<u)return function(t,e,n){var i,r,a=0,o=e[0];for(n=Math.ceil(n),i=0;i<t.length;i++)r=t[i],i===o?(r._index=i,o=e[++a*n]):delete r.label}(t,l,u/s),yn(t);if(i=xn(l,t,0,s),0<u){for(e=0,n=u-1;e<n;e++)_n(t,i,l[e],l[e+1]);return r=1<u?(c-d)/(u-1):null,_n(t,i,q.isNullOrUndef(r)?0:d-r,d),_n(t,i,c,q.isNullOrUndef(r)?t.length:c+r),yn(t)}return _n(t,i),yn(t)},_tickSize:function(){var t=this.options.ticks,e=q.toRadians(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),a=t.autoSkipPadding||0,o=r?r.widest.width+a:0,s=r?r.highest.height+a:0;return this.isHorizontal()?o*i<s*n?o/n:s/i:s*i<o*n?s/n:o/i},_isVisible:function(){var t,e,n,i=this.chart,r=this.options.display;if("auto"!==r)return!!r;for(t=0,e=i.data.datasets.length;t<e;++t)if(i.isDatasetVisible(t)&&((n=i.getDatasetMeta(t)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(t){function e(t){return O(x,t,T)}var n,i,r,a,o,s,l,u,d,c,h,f,g,p,m,v,b,y=this,x=y.chart,_=y.options,w=_.gridLines,k=_.position,M=w.offsetGridLines,C=y.isHorizontal(),S=y._ticksToDraw,D=S.length+(M?1:0),A=pn(w),P=[],T=w.drawBorder?hn(w.lineWidth,0,0):0,I=T/2,O=q._alignPixel;for("top"===k?(n=e(y.bottom),l=y.bottom-A,d=n-I,h=e(t.top)+I,g=t.bottom):"bottom"===k?(n=e(y.top),h=t.top,g=e(t.bottom)-I,l=n+I,d=y.top+A):"left"===k?(n=e(y.right),s=y.right-A,u=n-I,c=e(t.left)+I,f=t.right):(n=e(y.left),c=t.left,f=e(t.right)-I,s=n+I,u=y.left+A),i=0;i<D;++i)r=S[i]||{},dn(r.label)&&i<S.length||(b=i===y.zeroLineIndex&&_.offset===M?(p=w.zeroLineWidth,m=w.zeroLineColor,v=w.zeroLineBorderDash||[],w.zeroLineBorderDashOffset||0):(p=hn(w.lineWidth,i,1),m=hn(w.color,i,"rgba(0,0,0,0.1)"),v=w.borderDash||[],w.borderDashOffset||0),void 0!==(a=fn(y,r._index||i,M))&&(o=O(x,a,p),C?s=u=c=f=o:l=d=h=g=o,P.push({tx1:s,ty1:l,tx2:u,ty2:d,x1:c,y1:h,x2:f,y2:g,width:p,color:m,borderDash:v,borderDashOffset:b})));return P.ticksLength=D,P.borderValue=n,P},_computeLabelItems:function(){var t,e,n,i,r,a,o,s,l,u,d,c,h=this,f=h.options,g=f.ticks,p=f.position,m=g.mirror,v=h.isHorizontal(),b=h._ticksToDraw,y=bn(g),x=g.padding,_=pn(f.gridLines),w=-q.toRadians(h.labelRotation),k=[];for(o="top"===p?(a=h.bottom-_-x,w?"left":"center"):"bottom"===p?(a=h.top+_+x,w?"right":"center"):"left"===p?(r=h.right-(m?0:_)-x,m?"left":"right"):(r=h.left+(m?0:_)+x,m?"right":"left"),t=0,e=b.length;t<e;++t)i=(n=b[t]).label,dn(i)||(s=h.getPixelForTick(n._index||t)+g.labelOffset,u=(l=n.major?y.major:y.minor).lineHeight,d=un(i)?i.length:1,c=v?(r=s,"top"===p?((w?1:.5)-d)*u:(w?0:.5)*u):(a=s,(1-d)*u/2),k.push({x:r,y:a,rotation:w,label:i,font:l,textOffset:c,textAlign:o}));return k},_drawGrid:function(t){var e=this,n=e.options.gridLines;if(n.display){var i,r,a,o,s,l=e.ctx,u=e.chart,d=q._alignPixel,c=n.drawBorder?hn(n.lineWidth,0,0):0,h=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));for(a=0,o=h.length;a<o;++a)i=(s=h[a]).width,r=s.color,i&&r&&(l.save(),l.lineWidth=i,l.strokeStyle=r,l.setLineDash&&(l.setLineDash(s.borderDash),l.lineDashOffset=s.borderDashOffset),l.beginPath(),n.drawTicks&&(l.moveTo(s.tx1,s.ty1),l.lineTo(s.tx2,s.ty2)),n.drawOnChartArea&&(l.moveTo(s.x1,s.y1),l.lineTo(s.x2,s.y2)),l.stroke(),l.restore());if(c){var f,g,p,m,v=c,b=hn(n.lineWidth,h.ticksLength-1,1),y=h.borderValue;e.isHorizontal()?(f=d(u,e.left,v)-v/2,g=d(u,e.right,b)+b/2,p=m=y):(p=d(u,e.top,v)-v/2,m=d(u,e.bottom,b)+b/2,f=g=y),l.lineWidth=c,l.strokeStyle=hn(n.color,0),l.beginPath(),l.moveTo(f,p),l.lineTo(g,m),l.stroke()}}},_drawLabels:function(){var t=this;if(t.options.ticks.display){var e,n,i,r,a,o,s,l,u=t.ctx,d=t._labelItems||(t._labelItems=t._computeLabelItems());for(e=0,i=d.length;e<i;++e){if(o=(a=d[e]).font,u.save(),u.translate(a.x,a.y),u.rotate(a.rotation),u.font=o.string,u.fillStyle=o.color,u.textBaseline="middle",u.textAlign=a.textAlign,s=a.label,l=a.textOffset,un(s))for(n=0,r=s.length;n<r;++n)u.fillText(""+s[n],0,l),l+=o.lineHeight;else u.fillText(s,0,l);u.restore()}}},_drawTitle:function(){var t=this,e=t.ctx,n=t.options,i=n.scaleLabel;if(i.display){var r,a,o=cn(i.fontColor,E.global.defaultFontColor),s=q.options._parseFont(i),l=q.options.toPadding(i.padding),u=s.lineHeight/2,d=n.position,c=0;if(t.isHorizontal())r=t.left+t.width/2,a="bottom"===d?t.bottom-u-l.bottom:t.top+u+l.top;else{var h="left"===d;r=h?t.left+u+l.top:t.right-u-l.top,a=t.top+t.height/2,c=h?-.5*Math.PI:.5*Math.PI}e.save(),e.translate(r,a),e.rotate(c),e.textAlign="center",e.textBaseline="middle",e.fillStyle=o,e.font=s.string,e.fillText(i.labelString,0,0),e.restore()}},draw:function(t){this._isVisible()&&(this._drawGrid(t),this._drawTitle(),this._drawLabels())},_layers:function(){var t=this,e=t.options,n=e.ticks&&e.ticks.z||0,i=e.gridLines&&e.gridLines.z||0;return t._isVisible()&&n!==i&&t.draw===t._draw?[{z:i,draw:function(){t._drawGrid.apply(t,arguments),t._drawTitle.apply(t,arguments)}},{z:n,draw:function(){t._drawLabels.apply(t,arguments)}}]:[{z:n,draw:function(){t.draw.apply(t,arguments)}}]},_getMatchingVisibleMetas:function(e){var n=this,i=n.isHorizontal();return n.chart._getSortedVisibleDatasetMetas().filter(function(t){return(!e||t.type===e)&&(i?t.xAxisID===n.id:t.yAxisID===n.id)})}});wn.prototype._draw=wn.prototype.draw;var kn=wn,Mn=q.isNullOrUndef,Cn=kn.extend({determineDataLimits:function(){var t,e=this,n=e._getLabels(),i=e.options.ticks,r=i.min,a=i.max,o=0,s=n.length-1;void 0!==r&&0<=(t=n.indexOf(r))&&(o=t),void 0!==a&&0<=(t=n.indexOf(a))&&(s=t),e.minIndex=o,e.maxIndex=s,e.min=n[o],e.max=n[s]},buildTicks:function(){var t=this._getLabels(),e=this.minIndex,n=this.maxIndex;this.ticks=0===e&&n===t.length-1?t:t.slice(e,n+1)},getLabelForIndex:function(t,e){var n=this.chart;return n.getDatasetMeta(e).controller._getValueScaleId()===this.id?this.getRightValue(n.data.datasets[e].data[t]):this._getLabels()[t]},_configure:function(){var t=this,e=t.options.offset,n=t.ticks;kn.prototype._configure.call(t),t.isHorizontal()||(t._reversePixels=!t._reversePixels),n&&(t._startValue=t.minIndex-(e?.5:0),t._valueRange=Math.max(n.length-(e?0:1),1))},getPixelForValue:function(t,e,n){var i,r,a,o=this;return Mn(e)||Mn(n)||(t=o.chart.data.datasets[n].data[e]),Mn(t)||(i=o.isHorizontal()?t.x:t.y),(void 0!==i||void 0!==t&&isNaN(e))&&(r=o._getLabels(),t=q.valueOrDefault(i,t),e=-1!==(a=r.indexOf(t))?a:e,isNaN(e)&&(e=t)),o.getPixelForDecimal((e-o._startValue)/o._valueRange)},getPixelForTick:function(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t],t+this.minIndex)},getValueForPixel:function(t){var e=Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange);return Math.min(Math.max(e,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),Sn={position:"bottom"};Cn._defaults=Sn;var Dn=q.noop,An=q.isNullOrUndef;var Pn=kn.extend({getRightValue:function(t){return"string"==typeof t?+t:kn.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;if(e.beginAtZero){var n=q.sign(t.min),i=q.sign(t.max);n<0&&i<0?t.max=0:0<n&&0<i&&(t.min=0)}var r=void 0!==e.min||void 0!==e.suggestedMin,a=void 0!==e.max||void 0!==e.suggestedMax;void 0!==e.min?t.min=e.min:void 0!==e.suggestedMin&&(null===t.min?t.min=e.suggestedMin:t.min=Math.min(t.min,e.suggestedMin)),void 0!==e.max?t.max=e.max:void 0!==e.suggestedMax&&(null===t.max?t.max=e.suggestedMax:t.max=Math.max(t.max,e.suggestedMax)),r!=a&&t.min>=t.max&&(r?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,e.beginAtZero||t.min--)},getTickLimit:function(){var t,e=this.options.ticks,n=e.stepSize,i=e.maxTicksLimit;return n?t=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(t=this._computeTickLimit(),i=i||11),i&&(t=Math.min(i,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:Dn,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),i={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:q.valueOrDefault(e.fixedStepSize,e.stepSize)},r=t.ticks=function(t,e){var n,i,r,a,o=[],s=t.stepSize,l=s||1,u=t.maxTicks-1,d=t.min,c=t.max,h=t.precision,f=e.min,g=e.max,p=q.niceNum((g-f)/u/l)*l;if(p<1e-14&&An(d)&&An(c))return[f,g];u<(a=Math.ceil(g/p)-Math.floor(f/p))&&(p=q.niceNum(a*p/u/l)*l),s||An(h)?n=Math.pow(10,q._decimalPlaces(p)):(n=Math.pow(10,h),p=Math.ceil(p*n)/n),i=Math.floor(f/p)*p,r=Math.ceil(g/p)*p,s&&(!An(d)&&q.almostWhole(d/p,p/1e3)&&(i=d),!An(c)&&q.almostWhole(c/p,p/1e3)&&(r=c)),a=(r-i)/p,a=q.almostEquals(a,Math.round(a),p/1e3)?Math.round(a):Math.ceil(a),i=Math.round(i*n)/n,r=Math.round(r*n)/n,o.push(An(d)?i:d);for(var m=1;m<a;++m)o.push(Math.round((i+m*p)*n)/n);return o.push(An(c)?r:c),o}(i,t);t.handleDirectionalChanges(),t.max=q.max(r),t.min=q.min(r),e.reverse?(r.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),kn.prototype.convertTicksToLabels.call(t)},_configure:function(){var t,e=this,n=e.getTicks(),i=e.min,r=e.max;kn.prototype._configure.call(e),e.options.offset&&n.length&&(i-=t=(r-i)/Math.max(n.length-1,1)/2,r+=t),e._startValue=i,e._endValue=r,e._valueRange=r-i}}),Tn={position:"left",ticks:{callback:ln.formatters.linear}};function In(t,e,n,i){var r,a,o,s,l,u,d=t.options,c=d.stacked,h=(r=e,a=c,s=[(o=n).type,void 0===a&&void 0===o.stack?o.index:"",o.stack].join("."),void 0===r[s]&&(r[s]={pos:[],neg:[]}),r[s]),f=h.pos,g=h.neg,p=i.length;for(l=0;l<p;++l)u=t._parseValue(i[l]),isNaN(u.min)||isNaN(u.max)||n.data[l].hidden||(f[l]=f[l]||0,g[l]=g[l]||0,d.relativePoints?f[l]=100:u.min<0||u.max<0?g[l]+=u.min:f[l]+=u.max)}function On(t,e,n){var i,r,a=n.length;for(i=0;i<a;++i)r=t._parseValue(n[i]),isNaN(r.min)||isNaN(r.max)||e.data[i].hidden||(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}var Fn=Pn.extend({determineDataLimits:function(){var t,e,n,i,r=this,a=r.options,o=r.chart.data.datasets,s=r._getMatchingVisibleMetas(),l=a.stacked,u={},d=s.length;if(r.min=Number.POSITIVE_INFINITY,r.max=Number.NEGATIVE_INFINITY,void 0===l)for(t=0;!l&&t<d;++t)l=void 0!==(e=s[t]).stack;for(t=0;t<d;++t)n=o[(e=s[t]).index].data,l?In(r,u,e,n):On(r,e,n);q.each(u,function(t){i=t.pos.concat(t.neg),r.min=Math.min(r.min,q.min(i)),r.max=Math.max(r.max,q.max(i))}),r.min=q.isFinite(r.min)&&!isNaN(r.min)?r.min:0,r.max=q.isFinite(r.max)&&!isNaN(r.max)?r.max:1,r.handleTickRangeOptions()},_computeTickLimit:function(){var t;return this.isHorizontal()?Math.ceil(this.width/40):(t=q.options._parseFont(this.options.ticks),Math.ceil(this.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){return this.getPixelForDecimal((this.getRightValue(t)-this._startValue)/this._valueRange)},getValueForPixel:function(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange},getPixelForTick:function(t){var e=this.ticksAsNumbers;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])}}),Ln=Tn;Fn._defaults=Ln;var Rn=q.valueOrDefault,zn=q.math.log10;var Nn={position:"left",ticks:{callback:ln.formatters.logarithmic}};function Bn(t,e){return q.isFinite(t)&&0<=t?t:e}var En=kn.extend({determineDataLimits:function(){var t,e,n,i,r,a,o=this,s=o.options,l=o.chart,u=l.data.datasets,d=o.isHorizontal();function c(t){return d?t.xAxisID===o.id:t.yAxisID===o.id}o.min=Number.POSITIVE_INFINITY,o.max=Number.NEGATIVE_INFINITY,o.minNotZero=Number.POSITIVE_INFINITY;var h=s.stacked;if(void 0===h)for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&c(e)&&void 0!==e.stack){h=!0;break}if(s.stacked||h){var f={};for(t=0;t<u.length;t++){var g=[(e=l.getDatasetMeta(t)).type,void 0===s.stacked&&void 0===e.stack?t:"",e.stack].join(".");if(l.isDatasetVisible(t)&&c(e))for(void 0===f[g]&&(f[g]=[]),r=0,a=(i=u[t].data).length;r<a;r++){var p=f[g];n=o._parseValue(i[r]),isNaN(n.min)||isNaN(n.max)||e.data[r].hidden||n.min<0||n.max<0||(p[r]=p[r]||0,p[r]+=n.max)}}q.each(f,function(t){if(0<t.length){var e=q.min(t),n=q.max(t);o.min=Math.min(o.min,e),o.max=Math.max(o.max,n)}})}else for(t=0;t<u.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&c(e))for(r=0,a=(i=u[t].data).length;r<a;r++)n=o._parseValue(i[r]),isNaN(n.min)||isNaN(n.max)||e.data[r].hidden||n.min<0||n.max<0||(o.min=Math.min(n.min,o.min),o.max=Math.max(n.max,o.max),0!==n.min&&(o.minNotZero=Math.min(n.min,o.minNotZero)));o.min=q.isFinite(o.min)?o.min:null,o.max=q.isFinite(o.max)?o.max:null,o.minNotZero=q.isFinite(o.minNotZero)?o.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;t.min=Bn(e.min,t.min),t.max=Bn(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(zn(t.min))-1),t.max=Math.pow(10,Math.floor(zn(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(zn(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(zn(t.min))+1):10),null===t.minNotZero&&(0<t.min?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(zn(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),i={min:Bn(e.min),max:Bn(e.max)},r=t.ticks=function(t,e){var n,i,r=[],a=Rn(t.min,Math.pow(10,Math.floor(zn(e.min)))),o=Math.floor(zn(e.max)),s=Math.ceil(e.max/Math.pow(10,o));0===a?(n=Math.floor(zn(e.minNotZero)),i=Math.floor(e.minNotZero/Math.pow(10,n)),r.push(a),a=i*Math.pow(10,n)):(n=Math.floor(zn(a)),i=Math.floor(a/Math.pow(10,n)));for(var l=n<0?Math.pow(10,Math.abs(n)):1;r.push(a),10===++i&&(i=1,l=0<=++n?1:l),a=Math.round(i*Math.pow(10,n)*l)/l,n<o||n===o&&i<s;);var u=Rn(t.max,a);return r.push(u),r}(i,t);t.max=q.max(r),t.min=q.min(r),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&r.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),kn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){var e=this.tickValues;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])},_getFirstTickValue:function(t){var e=Math.floor(zn(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},_configure:function(){var t=this,e=t.min,n=0;kn.prototype._configure.call(t),0===e&&(e=t._getFirstTickValue(t.minNotZero),n=Rn(t.options.ticks.fontSize,E.global.defaultFontSize)/t._length),t._startValue=zn(e),t._valueOffset=n,t._valueRange=(zn(t.max)-zn(e))/(1-n)},getPixelForValue:function(t){var e=this,n=0;return(t=+e.getRightValue(t))>e.min&&0<t&&(n=(zn(t)-e._startValue)/e._valueRange+e._valueOffset),e.getPixelForDecimal(n)},getValueForPixel:function(t){var e=this,n=e.getDecimalForPixel(t);return 0===n&&0===e.min?0:Math.pow(10,e._startValue+(n-e._valueOffset)*e._valueRange)}}),Wn=Nn;En._defaults=Wn;var Hn=q.valueOrDefault,Vn=q.valueAtIndexOrDefault,jn=q.options.resolve,qn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:ln.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function Un(t){var e=t.ticks;return e.display&&t.display?Hn(e.fontSize,E.global.defaultFontSize)+2*e.backdropPaddingY:0}function Yn(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||r<t?{start:e-n,end:e}:{start:e,end:e+n}}function Gn(t,e,n,i){var r,a,o=n.y+i/2;if(q.isArray(e))for(r=0,a=e.length;r<a;++r)t.fillText(e[r],n.x,o),o+=i;else t.fillText(e,n.x,o)}function Xn(t){return q.isNumber(t)?t:0}var Kn=Pn.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Un(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var r=this,n=r.chart,a=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY;q.each(n.data.datasets,function(t,e){if(n.isDatasetVisible(e)){var i=n.getDatasetMeta(e);q.each(t.data,function(t,e){var n=+r.getRightValue(t);isNaN(n)||i.data[e].hidden||(a=Math.min(n,a),o=Math.max(n,o))})}}),r.min=a===Number.POSITIVE_INFINITY?0:a,r.max=o===Number.NEGATIVE_INFINITY?0:o,r.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Un(this.options))},convertTicksToLabels:function(){var e=this;Pn.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(function(){var t=q.callback(e.options.pointLabels.callback,arguments,e);return t||0===t?t:""})},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this.options;t.display&&t.pointLabels.display?function(t){var e,n,i,r=q.options._parseFont(t.options.pointLabels),a={l:0,r:t.width,t:0,b:t.height-t.paddingTop},o={};t.ctx.font=r.string,t._pointLabelSizes=[];var s,l,u,d=t.chart.data.labels.length;for(e=0;e<d;e++){i=t.getPointPosition(e,t.drawingArea+5),s=t.ctx,l=r.lineHeight,u=t.pointLabels[e],n=q.isArray(u)?{w:q.longestText(s,s.font,u),h:u.length*l}:{w:s.measureText(u).width,h:l},t._pointLabelSizes[e]=n;var c=t.getIndexAngle(e),h=q.toDegrees(c)%360,f=Yn(h,i.x,n.w,0,180),g=Yn(h,i.y,n.h,90,270);f.start<a.l&&(a.l=f.start,o.l=c),f.end>a.r&&(a.r=f.end,o.r=c),g.start<a.t&&(a.t=g.start,o.t=c),g.end>a.b&&(a.b=g.end,o.b=c)}t.setReductions(t.drawingArea,a,o)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var i=this,r=e.l/Math.sin(n.l),a=Math.max(e.r-i.width,0)/Math.sin(n.r),o=-e.t/Math.cos(n.t),s=-Math.max(e.b-(i.height-i.paddingTop),0)/Math.cos(n.b);r=Xn(r),a=Xn(a),o=Xn(o),s=Xn(s),i.drawingArea=Math.min(Math.floor(t-(r+a)/2),Math.floor(t-(o+s)/2)),i.setCenterPoint(r,a,o,s)},setCenterPoint:function(t,e,n,i){var r=this,a=r.width-e-r.drawingArea,o=t+r.drawingArea,s=n+r.drawingArea,l=r.height-r.paddingTop-i-r.drawingArea;r.xCenter=Math.floor((o+a)/2+r.left),r.yCenter=Math.floor((s+l)/2+r.top+r.paddingTop)},getIndexAngle:function(t){var e=this.chart,n=(t*(360/e.data.labels.length)+((e.options||{}).startAngle||0))%360;return(n<0?360+n:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(q.isNullOrUndef(t))return NaN;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(t){var e=this.min,n=this.max;return this.getPointPositionForValue(t||0,this.beginAtZero?0:e<0&&n<0?n:0<e&&0<n?e:0)},_drawGrid:function(){var t,n,e,i=this,r=i.ctx,a=i.options,o=a.gridLines,s=a.angleLines,l=Hn(s.lineWidth,o.lineWidth),u=Hn(s.color,o.color);if(a.pointLabels.display&&function(t){var e,n,i,r,a=t.ctx,o=t.options,s=o.pointLabels,l=Un(o),u=t.getDistanceFromCenterForValue(o.ticks.reverse?t.min:t.max),d=q.options._parseFont(s);a.save(),a.font=d.string,a.textBaseline="middle";for(var c=t.chart.data.labels.length-1;0<=c;c--){var h=0===c?l/2:0,f=t.getPointPosition(c,u+h+5),g=Vn(s.fontColor,c,E.global.defaultFontColor);a.fillStyle=g;var p=t.getIndexAngle(c),m=q.toDegrees(p);a.textAlign=0===(r=m)||180===r?"center":r<180?"left":"right",e=m,n=t._pointLabelSizes[c],i=f,90===e||270===e?i.y-=n.h/2:(270<e||e<90)&&(i.y-=n.h),Gn(a,t.pointLabels[c],f,d.lineHeight)}a.restore()}(i),o.display&&q.each(i.ticks,function(t,e){0!==e&&(n=i.getDistanceFromCenterForValue(i.ticksAsNumbers[e]),function(t,e,n,i){var r,a=t.ctx,o=e.circular,s=t.chart.data.labels.length,l=Vn(e.color,i-1),u=Vn(e.lineWidth,i-1);if((o||s)&&l&&u){if(a.save(),a.strokeStyle=l,a.lineWidth=u,a.setLineDash&&(a.setLineDash(e.borderDash||[]),a.lineDashOffset=e.borderDashOffset||0),a.beginPath(),o)a.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{r=t.getPointPosition(0,n),a.moveTo(r.x,r.y);for(var d=1;d<s;d++)r=t.getPointPosition(d,n),a.lineTo(r.x,r.y)}a.closePath(),a.stroke(),a.restore()}}(i,o,n,e))}),s.display&&l&&u){for(r.save(),r.lineWidth=l,r.strokeStyle=u,r.setLineDash&&(r.setLineDash(jn([s.borderDash,o.borderDash,[]])),r.lineDashOffset=jn([s.borderDashOffset,o.borderDashOffset,0])),t=i.chart.data.labels.length-1;0<=t;t--)n=i.getDistanceFromCenterForValue(a.ticks.reverse?i.min:i.max),e=i.getPointPosition(t,n),r.beginPath(),r.moveTo(i.xCenter,i.yCenter),r.lineTo(e.x,e.y),r.stroke();r.restore()}},_drawLabels:function(){var n=this,i=n.ctx,r=n.options.ticks;if(r.display){var a,o,t=n.getIndexAngle(0),s=q.options._parseFont(r),l=Hn(r.fontColor,E.global.defaultFontColor);i.save(),i.font=s.string,i.translate(n.xCenter,n.yCenter),i.rotate(t),i.textAlign="center",i.textBaseline="middle",q.each(n.ticks,function(t,e){0===e&&!r.reverse||(a=n.getDistanceFromCenterForValue(n.ticksAsNumbers[e]),r.showLabelBackdrop&&(o=i.measureText(t).width,i.fillStyle=r.backdropColor,i.fillRect(-o/2-r.backdropPaddingX,-a-s.size/2-r.backdropPaddingY,o+2*r.backdropPaddingX,s.size+2*r.backdropPaddingY)),i.fillStyle=l,i.fillText(t,0,-a))}),i.restore()}},_drawTitle:q.noop}),Zn=qn;Kn._defaults=Zn;var $n=q._deprecated,Qn=q.options.resolve,Jn=q.valueOrDefault,ti=Number.MIN_SAFE_INTEGER||-9007199254740991,ei=Number.MAX_SAFE_INTEGER||9007199254740991,ni={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ii=Object.keys(ni);function ri(t,e){return t-e}function ai(t){return q.valueOrDefault(t.time.min,t.ticks.min)}function oi(t){return q.valueOrDefault(t.time.max,t.ticks.max)}function si(t,e,n,i){var r=function(t,e,n){for(var i,r,a,o=0,s=t.length-1;0<=o&&o<=s;){if(r=t[(i=o+s>>1)-1]||null,a=t[i],!r)return{lo:null,hi:a};if(a[e]<n)o=1+i;else{if(!(r[e]>n))return{lo:r,hi:a};s=i-1}}return{lo:a,hi:null}}(t,e,n),a=r.lo?r.hi?r.lo:t[t.length-2]:t[0],o=r.lo?r.hi?r.hi:t[t.length-1]:t[1],s=o[e]-a[e],l=s?(n-a[e])/s:0,u=(o[i]-a[i])*l;return a[i]+u}function li(t,e){var n=t._adapter,i=t.options.time,r=i.parser,a=r||i.format,o=e;return"function"==typeof r&&(o=r(o)),q.isFinite(o)||(o="string"==typeof a?n.parse(o,a):n.parse(o)),null!==o?+o:(r||"function"!=typeof a||(o=a(e),q.isFinite(o)||(o=n.parse(o))),o)}function ui(t,e){if(q.isNullOrUndef(e))return null;var n=t.options.time,i=li(t,t.getRightValue(e));return null===i||n.round&&(i=+t._adapter.startOf(i,n.round)),i}function di(t,e,n,i){var r,a,o,s=ii.length;for(r=ii.indexOf(t);r<s-1;++r)if(o=(a=ni[ii[r]]).steps?a.steps:ei,a.common&&Math.ceil((n-e)/(o*a.size))<=i)return ii[r];return ii[s-1]}function ci(t,e,n){var i,r,a=[],o={},s=e.length;for(i=0;i<s;++i)o[r=e[i]]=i,a.push({value:r,major:!1});return 0!==s&&n?function(t,e,n,i){var r,a,o=t._adapter,s=+o.startOf(e[0].value,i),l=e[e.length-1].value;for(r=s;r<=l;r=+o.add(r,1,i))0<=(a=n[r])&&(e[a].major=!0);return e}(t,a,o,n):a}var hi=kn.extend({initialize:function(){this.mergeTicksOptions(),kn.prototype.initialize.call(this)},update:function(){var t=this.options,e=t.time||(t.time={}),n=this._adapter=new sn._date(t.adapters.date);return $n("time scale",e.format,"time.format","time.parser"),$n("time scale",e.min,"time.min","ticks.min"),$n("time scale",e.max,"time.max","ticks.max"),q.mergeIf(e.displayFormats,n.formats()),kn.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),kn.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,i,r,a,o,s=this,l=s.chart,u=s._adapter,d=s.options,c=d.time.unit||"day",h=ei,f=ti,g=[],p=[],m=[],v=s._getLabels();for(t=0,n=v.length;t<n;++t)m.push(ui(s,v[t]));for(t=0,n=(l.data.datasets||[]).length;t<n;++t)if(l.isDatasetVisible(t))if(r=l.data.datasets[t].data,q.isObject(r[0]))for(p[t]=[],e=0,i=r.length;e<i;++e)a=ui(s,r[e]),g.push(a),p[t][e]=a;else p[t]=m.slice(0),o||(g=g.concat(m),o=!0);else p[t]=[];m.length&&(h=Math.min(h,m[0]),f=Math.max(f,m[m.length-1])),g.length&&(g=1<n?function(t){var e,n,i,r={},a=[];for(e=0,n=t.length;e<n;++e)r[i=t[e]]||(r[i]=!0,a.push(i));return a}(g).sort(ri):g.sort(ri),h=Math.min(h,g[0]),f=Math.max(f,g[g.length-1])),h=ui(s,ai(d))||h,f=ui(s,oi(d))||f,h=h===ei?+u.startOf(Date.now(),c):h,f=f===ti?+u.endOf(Date.now(),c)+1:f,s.min=Math.min(h,f),s.max=Math.max(h+1,f),s._table=[],s._timestamps={data:g,datasets:p,labels:m}},buildTicks:function(){var t,e,n,i,r,a,o,s,l,u=this,d=u.min,c=u.max,h=u.options,f=h.ticks,g=h.time,p=u._timestamps,m=[],v=u.getLabelCapacity(d),b=f.source,y=h.distribution;for(p="data"===b||"auto"===b&&"series"===y?p.data:"labels"===b?p.labels:function(t,e,n,i){var r,a=t._adapter,o=t.options,s=o.time,l=s.unit||di(s.minUnit,e,n,i),u=Qn([s.stepSize,s.unitStepSize,1]),d="week"===l&&s.isoWeekday,c=e,h=[];if(d&&(c=+a.startOf(c,"isoWeek",d)),c=+a.startOf(c,d?"day":l),a.diff(n,e,l)>1e5*u)throw e+" and "+n+" are too far apart with stepSize of "+u+" "+l;for(r=c;r<n;r=+a.add(r,u,l))h.push(r);return r!==n&&"ticks"!==o.bounds||h.push(r),h}(u,d,c,v),"ticks"===h.bounds&&p.length&&(d=p[0],c=p[p.length-1]),d=ui(u,ai(h))||d,c=ui(u,oi(h))||c,t=0,e=p.length;t<e;++t)d<=(n=p[t])&&n<=c&&m.push(n);return u.min=d,u.max=c,u._unit=g.unit||(f.autoSkip?di(g.minUnit,u.min,u.max,v):function(t,e,n,i,r){var a,o;for(a=ii.length-1;a>=ii.indexOf(n);a--)if(o=ii[a],ni[o].common&&t._adapter.diff(r,i,o)>=e-1)return o;return ii[n?ii.indexOf(n):0]}(u,m.length,g.minUnit,u.min,u.max)),u._majorUnit=f.major.enabled&&"year"!==u._unit?function(t){for(var e=ii.indexOf(t)+1,n=ii.length;e<n;++e)if(ni[ii[e]].common)return ii[e]}(u._unit):void 0,u._table=function(t,e,n,i){if("linear"===i||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var r,a,o,s,l,u=[],d=[e];for(r=0,a=t.length;r<a;++r)e<(s=t[r])&&s<n&&d.push(s);for(d.push(n),r=0,a=d.length;r<a;++r)l=d[r+1],o=d[r-1],s=d[r],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:r/(a-1)});return u}(u._timestamps.data,d,c,y),u._offsets=(i=u._table,r=m,l=s=0,h.offset&&r.length&&(a=si(i,"time",r[0],"pos"),s=1===r.length?1-a:(si(i,"time",r[1],"pos")-a)/2,o=si(i,"time",r[r.length-1],"pos"),l=1===r.length?o:(o-si(i,"time",r[r.length-2],"pos"))/2),{start:s,end:l,factor:1/(s+1+l)}),f.reverse&&m.reverse(),ci(u,m,u._majorUnit)},getLabelForIndex:function(t,e){var n=this,i=n._adapter,r=n.chart.data,a=n.options.time,o=r.labels&&t<r.labels.length?r.labels[t]:"",s=r.datasets[e].data[t];return q.isObject(s)&&(o=n.getRightValue(s)),a.tooltipFormat?i.format(li(n,o),a.tooltipFormat):"string"==typeof o?o:i.format(li(n,o),a.displayFormats.datetime)},tickFormatFunction:function(t,e,n,i){var r=this._adapter,a=this.options,o=a.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],d=n[e],c=a.ticks,h=l&&u&&d&&d.major,f=r.format(t,i||(h?u:s)),g=h?c.major:c.minor,p=Qn([g.callback,g.userCallback,c.callback,c.userCallback]);return p?p(f,e,n):f},convertTicksToLabels:function(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(this.tickFormatFunction(t[e].value,e,t));return i},getPixelForOffset:function(t){var e=this._offsets,n=si(this._table,"time",t,"pos");return this.getPixelForDecimal((e.start+n)*e.factor)},getPixelForValue:function(t,e,n){var i=null;if(void 0!==e&&void 0!==n&&(i=this._timestamps.datasets[n][e]),null===i&&(i=ui(this,t)),null!==i)return this.getPixelForOffset(i)},getPixelForTick:function(t){var e=this.getTicks();return 0<=t&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end,i=si(this._table,"pos",n,"time");return this._adapter._create(i)},_getLabelSize:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,i=q.toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),a=Math.sin(i),o=Jn(e.fontSize,E.global.defaultFontSize);return{w:n*r+o*a,h:n*a+o*r}},getLabelWidth:function(t){return this._getLabelSize(t).w},getLabelCapacity:function(t){var e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this.tickFormatFunction(t,0,ci(this,[t],this._majorUnit),i),a=this._getLabelSize(r),o=Math.floor(this.isHorizontal()?this.width/a.w:this.height/a.h);return this.options.offset&&o--,0<o?o:1}}),fi={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};hi._defaults=fi;var gi={category:Cn,linear:Fn,logarithmic:En,radialLinear:Kn,time:hi},pi={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};sn._date.override("function"==typeof i?{_id:"moment",formats:function(){return pi},parse:function(t,e){return"string"==typeof t&&"string"==typeof e?t=i(t,e):t instanceof i||(t=i(t)),t.isValid()?t.valueOf():null},format:function(t,e){return i(t).format(e)},add:function(t,e,n){return i(t).add(e,n).valueOf()},diff:function(t,e,n){return i(t).diff(i(e),n)},startOf:function(t,e,n){return t=i(t),"isoWeek"===e?t.isoWeekday(n).valueOf():t.startOf(e).valueOf()},endOf:function(t,e){return i(t).endOf(e).valueOf()},_create:function(t){return i(t)}}:{}),E._set("global",{plugins:{filler:{propagate:!0}}});var mi={dataset:function(t){var e=t.fill,n=t.chart,i=n.getDatasetMeta(e),r=i&&n.isDatasetVisible(e)&&i.dataset._children||[],a=r.length||0;return a?function(t,e){return e<a&&r[e]._view||null}:null},boundary:function(t){var n=t.boundary,e=n?n.x:null,i=n?n.y:null;return q.isArray(n)?function(t,e){return n[e]}:function(t){return{x:null===e?t.x:e,y:null===i?t.y:i}}}};function vi(t,e,n){var i,r=t._model||{},a=r.fill;if(void 0===a&&(a=!!r.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(i=parseFloat(a,10),isFinite(i)&&Math.floor(i)===i)return"-"!==a[0]&&"+"!==a[0]||(i=e+i),!(i===e||i<0||n<=i)&&i;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}function bi(t){return((t.el._scale||{}).getPointPositionForValue?function(t){var e,n,i,r,a,o=t.el._scale,s=o.options,l=o.chart.data.labels.length,u=t.fill,d=[];if(!l)return null;for(e=s.ticks.reverse?o.max:o.min,n=s.ticks.reverse?o.min:o.max,i=o.getPointPositionForValue(0,e),r=0;r<l;++r)a="start"===u||"end"===u?o.getPointPositionForValue(r,"start"===u?e:n):o.getBasePosition(r),s.gridLines.circular&&(a.cx=i.x,a.cy=i.y,a.angle=o.getIndexAngle(r)-Math.PI/2),d.push(a);return d}:function(t){var e,n=t.el._model||{},i=t.el._scale||{},r=t.fill,a=null;if(isFinite(r))return null;if("start"===r?a=void 0===n.scaleBottom?i.bottom:n.scaleBottom:"end"===r?a=void 0===n.scaleTop?i.top:n.scaleTop:void 0!==n.scaleZero?a=n.scaleZero:i.getBasePixel&&(a=i.getBasePixel()),null!=a){if(void 0!==a.x&&void 0!==a.y)return a;if(q.isFinite(a))return{x:(e=i.isHorizontal())?a:null,y:e?null:a}}return null})(t)}function yi(t,e,n){var i,r=t[e].fill,a=[e];if(!n)return r;for(;!1!==r&&-1===a.indexOf(r);){if(!isFinite(r))return r;if(!(i=t[r]))return!1;if(i.visible)return r;a.push(r),r=i.fill}return!1}function xi(t){return t&&!t.skip}function _i(t,e,n,i,r){var a,o,s,l;if(i&&r){for(t.moveTo(e[0].x,e[0].y),a=1;a<i;++a)q.canvas.lineTo(t,e[a-1],e[a]);if(void 0===n[0].angle)for(t.lineTo(n[r-1].x,n[r-1].y),a=r-1;0<a;--a)q.canvas.lineTo(t,n[a],n[a-1],!0);else for(o=n[0].cx,s=n[0].cy,l=Math.sqrt(Math.pow(n[0].x-o,2)+Math.pow(n[0].y-s,2)),a=r-1;0<a;--a)t.arc(o,s,l,n[a].angle,n[a-1].angle,!0)}}function wi(t,e,n,i,r,a){var o,s,l,u,d,c,h,f,g=e.length,p=i.spanGaps,m=[],v=[],b=0,y=0;for(t.beginPath(),o=0,s=g;o<s;++o)d=n(u=e[l=o%g]._view,l,i),c=xi(u),h=xi(d),a&&void 0===f&&c&&(s=g+(f=o+1)),c&&h?(b=m.push(u),y=v.push(d)):b&&y&&(p?(c&&m.push(u),h&&v.push(d)):(_i(t,m,v,b,y),b=y=0,m=[],v=[]));_i(t,m,v,b,y),t.closePath(),t.fillStyle=r,t.fill()}var ki={id:"filler",afterDatasetsUpdate:function(t,e){var n,i,r,a,o,s,l,u=(t.data.datasets||[]).length,d=e.propagate,c=[];for(i=0;i<u;++i)a=null,(r=(n=t.getDatasetMeta(i)).dataset)&&r._model&&r instanceof Mt.Line&&(a={visible:t.isDatasetVisible(i),fill:vi(r,i,u),chart:t,el:r}),n.$filler=a,c.push(a);for(i=0;i<u;++i)(a=c[i])&&(a.fill=yi(c,i,d),a.boundary=bi(a),a.mapper=(l=void 0,s=(o=a).fill,!(l="dataset")===s?null:(isFinite(s)||(l="boundary"),mi[l](o))))},beforeDatasetsDraw:function(t){var e,n,i,r,a,o,s,l=t._getSortedVisibleDatasetMetas(),u=t.ctx;for(n=l.length-1;0<=n;--n)(e=l[n].$filler)&&e.visible&&(r=(i=e.el)._view,a=i._children||[],o=e.mapper,s=r.backgroundColor||E.global.defaultColor,o&&s&&a.length&&(q.canvas.clipArea(u,t.chartArea),wi(u,a,o,r,s,i._loop),q.canvas.unclipArea(u)))}},Mi=q.rtl.getRtlAdapter,Ci=q.noop,Si=q.valueOrDefault;function Di(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}E._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,i=this.chart,r=i.getDatasetMeta(n);r.hidden=null===r.hidden?!i.data.datasets[n].hidden:null,i.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(n){var i=n.data.datasets,t=n.options.legend||{},r=t.labels&&t.labels.usePointStyle;return n._getSortedDatasetMetas().map(function(t){var e=t.controller.getStyle(r?0:void 0);return{text:i[t.index].label,fillStyle:e.backgroundColor,hidden:!n.isDatasetVisible(t.index),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,rotation:e.rotation,datasetIndex:t.index}},this)}}},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data.datasets;for(r.setAttribute("class",t.id+"-legend"),e=0,n=a.length;e<n;e++)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=a[e].backgroundColor,a[e].label&&i.appendChild(document.createTextNode(a[e].label));return r.outerHTML}});var Ai=$.extend({initialize:function(t){q.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:Ci,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ci,beforeSetDimensions:Ci,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ci,beforeBuildLabels:Ci,buildLabels:function(){var e=this,n=e.options.labels||{},t=q.callback(n.generateLabels,[e.chart],e)||[];n.filter&&(t=t.filter(function(t){return n.filter(t,e.chart.data)})),e.options.reverse&&t.reverse(),e.legendItems=t},afterBuildLabels:Ci,beforeFit:Ci,fit:function(){var t=this,e=t.options,i=e.labels,n=e.display,r=t.ctx,a=q.options._parseFont(i),o=a.size,s=t.legendHitBoxes=[],l=t.minSize,u=t.isHorizontal();if(u?(l.width=t.maxWidth,l.height=n?10:0):(l.width=n?10:0,l.height=t.maxHeight),n){if(r.font=a.string,u){var d=t.lineWidths=[0],c=0;r.textAlign="left",r.textBaseline="middle",q.each(t.legendItems,function(t,e){var n=Di(i,o)+o/2+r.measureText(t.text).width;(0===e||d[d.length-1]+n+2*i.padding>l.width)&&(c+=o+i.padding,d[d.length-(0<e?0:1)]=0),s[e]={left:0,top:0,width:n,height:o},d[d.length-1]+=n+i.padding}),l.height+=c}else{var h=i.padding,f=t.columnWidths=[],g=t.columnHeights=[],p=i.padding,m=0,v=0;q.each(t.legendItems,function(t,e){var n=Di(i,o)+o/2+r.measureText(t.text).width;0<e&&v+o+2*h>l.height&&(p+=m+i.padding,f.push(m),g.push(v),v=m=0),m=Math.max(m,n),v+=o+h,s[e]={left:0,top:0,width:n,height:o}}),p+=m,f.push(m),g.push(v),l.width+=p}t.width=l.width,t.height=l.height}else t.width=l.width=t.height=l.height=0},afterFit:Ci,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var g=this,n=g.options,p=n.labels,t=E.global,m=t.defaultColor,v=t.elements.line,b=g.height,y=g.columnHeights,x=g.width,_=g.lineWidths;if(n.display){var w,k=Mi(n.rtl,g.left,g.minSize.width),M=g.ctx,e=Si(p.fontColor,t.defaultFontColor),i=q.options._parseFont(p),C=i.size;M.textAlign=k.textAlign("left"),M.textBaseline="middle",M.lineWidth=.5,M.strokeStyle=e,M.fillStyle=e,M.font=i.string;var S=Di(p,C),D=g.legendHitBoxes,A=function(t,e){switch(n.align){case"start":return p.padding;case"end":return t-e;default:return(t-e+p.padding)/2}},P=g.isHorizontal();w=P?{x:g.left+A(x,_[0]),y:g.top+p.padding,line:0}:{x:g.left+p.padding,y:g.top+A(b,y[0]),line:0},q.rtl.overrideTextDirection(g.ctx,n.textDirection);var T=C+p.padding;q.each(g.legendItems,function(t,e){var n=M.measureText(t.text).width,i=S+C/2+n,r=w.x,a=w.y;k.setWidth(g.minSize.width),P?0<e&&r+i+p.padding>g.left+g.minSize.width&&(a=w.y+=T,w.line++,r=w.x=g.left+A(x,_[w.line])):0<e&&a+T>g.top+g.minSize.height&&(r=w.x=r+g.columnWidths[w.line]+p.padding,w.line++,a=w.y=g.top+A(b,y[w.line]));var o,s,l,u,d,c,h,f=k.x(r);!function(t,e,n){if(!(isNaN(S)||S<=0)){M.save();var i=Si(n.lineWidth,v.borderWidth);if(M.fillStyle=Si(n.fillStyle,m),M.lineCap=Si(n.lineCap,v.borderCapStyle),M.lineDashOffset=Si(n.lineDashOffset,v.borderDashOffset),M.lineJoin=Si(n.lineJoin,v.borderJoinStyle),M.lineWidth=i,M.strokeStyle=Si(n.strokeStyle,m),M.setLineDash&&M.setLineDash(Si(n.lineDash,v.borderDash)),p&&p.usePointStyle){var r=S*Math.SQRT2/2,a=k.xPlus(t,S/2),o=e+C/2;q.canvas.drawPoint(M,n.pointStyle,r,a,o,n.rotation)}else M.fillRect(k.leftForLtr(t,S),e,S,C),0!==i&&M.strokeRect(k.leftForLtr(t,S),e,S,C);M.restore()}}(f,a,t),D[e].left=k.leftForLtr(f,D[e].width),D[e].top=a,o=f,s=a,l=t,u=n,d=C/2,c=k.xPlus(o,S+d),h=s+d,M.fillText(l.text,c,h),l.hidden&&(M.beginPath(),M.lineWidth=2,M.moveTo(c,h),M.lineTo(k.xPlus(c,u),h),M.stroke()),P?w.x+=i+p.padding:w.y+=T}),q.rtl.restoreTextDirection(g.ctx,n.textDirection)}},_getLegendItemAt:function(t,e){var n,i,r;if(t>=this.left&&t<=this.right&&e>=this.top&&e<=this.bottom)for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(t>=(i=r[n]).left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return this.legendItems[n];return null},handleEvent:function(t){var e,n=this.options,i="mouseup"===t.type?"click":t.type;if("mousemove"===i){if(!n.onHover&&!n.onLeave)return}else{if("click"!==i)return;if(!n.onClick)return}e=this._getLegendItemAt(t.x,t.y),"click"===i?e&&n.onClick&&n.onClick.call(this,t.native,e):(n.onLeave&&e!==this._hoveredItem&&(this._hoveredItem&&n.onLeave.call(this,t.native,this._hoveredItem),this._hoveredItem=e),n.onHover&&e&&n.onHover.call(this,t.native,e))}});function Pi(t,e){var n=new Ai({ctx:t.ctx,options:e,chart:t});me.configure(t,n,e),me.addBox(t,n),t.legend=n}var Ti={id:"legend",_element:Ai,beforeInit:function(t){var e=t.options.legend;e&&Pi(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(q.mergeIf(e,E.global.legend),n?(me.configure(t,n,e),n.options=e):Pi(t,e)):n&&(me.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},Ii=q.noop;E._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Oi=$.extend({initialize:function(t){q.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:Ii,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:Ii,beforeSetDimensions:Ii,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Ii,beforeBuildLabels:Ii,buildLabels:Ii,afterBuildLabels:Ii,beforeFit:Ii,fit:function(){var t,e=this.options,n=this.minSize={},i=this.isHorizontal();e.display?(t=(q.isArray(e.text)?e.text.length:1)*q.options._parseFont(e).lineHeight+2*e.padding,this.width=n.width=i?this.maxWidth:t,this.height=n.height=i?t:this.maxHeight):this.width=n.width=this.height=n.height=0},afterFit:Ii,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this.ctx,e=this.options;if(e.display){var n,i,r,a=q.options._parseFont(e),o=a.lineHeight,s=o/2+e.padding,l=0,u=this.top,d=this.left,c=this.bottom,h=this.right;t.fillStyle=q.valueOrDefault(e.fontColor,E.global.defaultFontColor),t.font=a.string,this.isHorizontal()?(i=d+(h-d)/2,r=u+s,n=h-d):(i="left"===e.position?d+s:h-s,r=u+(c-u)/2,n=c-u,l=Math.PI*("left"===e.position?-.5:.5)),t.save(),t.translate(i,r),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var f=e.text;if(q.isArray(f))for(var g=0,p=0;p<f.length;++p)t.fillText(f[p],0,g,n),g+=o;else t.fillText(f,0,0,n);t.restore()}}});function Fi(t,e){var n=new Oi({ctx:t.ctx,options:e,chart:t});me.configure(t,n,e),me.addBox(t,n),t.titleBlock=n}var Li={},Ri=ki,zi=Ti,Ni={id:"title",_element:Oi,beforeInit:function(t){var e=t.options.title;e&&Fi(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(q.mergeIf(e,E.global.title),n?(me.configure(t,n,e),n.options=e):Fi(t,e)):n&&(me.removeBox(t,n),delete t.titleBlock)}};function Bi(t,e,n){var i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}function Ei(t){return null!=t&&"none"!==t}function Wi(t,e,n){var i=document.defaultView,r=q._getParentNode(t),a=i.getComputedStyle(t)[e],o=i.getComputedStyle(r)[e],s=Ei(a),l=Ei(o),u=Number.POSITIVE_INFINITY;return s||l?Math.min(s?Bi(a,t,n):u,l?Bi(o,r,n):u):"none"}for(var Hi in Li.filler=Ri,Li.legend=zi,Li.title=Ni,(rn.helpers=q).where=function(t,e){if(q.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return q.each(t,function(t){e(t)&&n.push(t)}),n},q.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var i=0,r=t.length;i<r;++i)if(e.call(n,t[i],i,t))return i;return-1},q.findNextWhere=function(t,e,n){q.isNullOrUndef(n)&&(n=-1);for(var i=n+1;i<t.length;i++){var r=t[i];if(e(r))return r}},q.findPreviousWhere=function(t,e,n){q.isNullOrUndef(n)&&(n=t.length);for(var i=n-1;0<=i;i--){var r=t[i];if(e(r))return r}},q.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},q.almostEquals=function(t,e,n){return Math.abs(t-e)<n},q.almostWhole=function(t,e){var n=Math.round(t);return n-e<=t&&t<=n+e},q.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},q.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},q.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0===(t=+t)||isNaN(t)?t:0<t?1:-1},q.toRadians=function(t){return t*(Math.PI/180)},q.toDegrees=function(t){return t*(180/Math.PI)},q._decimalPlaces=function(t){if(q.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},q.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i),a=Math.atan2(i,n);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:r}},q.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},q.aliasPixel=function(t){return t%2==0?0:.5},q._alignPixel=function(t,e,n){var i=t.currentDevicePixelRatio,r=n/2;return Math.round((e-r)*i)/i+r},q.splineCurve=function(t,e,n,i){var r=t.skip?e:t,a=e,o=n.skip?e:n,s=Math.sqrt(Math.pow(a.x-r.x,2)+Math.pow(a.y-r.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),u=s/(s+l),d=l/(s+l),c=i*(u=isNaN(u)?0:u),h=i*(d=isNaN(d)?0:d);return{previous:{x:a.x-c*(o.x-r.x),y:a.y-c*(o.y-r.y)},next:{x:a.x+h*(o.x-r.x),y:a.y+h*(o.y-r.y)}}},q.EPSILON=Number.EPSILON||1e-14,q.splineCurveMonotone=function(t){var e,n,i,r,a,o,s,l,u,d=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),c=d.length;for(e=0;e<c;++e)if(!(i=d[e]).model.skip){if(n=0<e?d[e-1]:null,(r=e<c-1?d[e+1]:null)&&!r.model.skip){var h=r.model.x-i.model.x;i.deltaK=0!=h?(r.model.y-i.model.y)/h:0}!n||n.model.skip?i.mK=i.deltaK:!r||r.model.skip?i.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(i.deltaK)?i.mK=0:i.mK=(n.deltaK+i.deltaK)/2}for(e=0;e<c-1;++e)i=d[e],r=d[e+1],i.model.skip||r.model.skip||(q.almostEquals(i.deltaK,0,this.EPSILON)?i.mK=r.mK=0:(a=i.mK/i.deltaK,o=r.mK/i.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),i.mK=a*s*i.deltaK,r.mK=o*s*i.deltaK)));for(e=0;e<c;++e)(i=d[e]).model.skip||(n=0<e?d[e-1]:null,r=e<c-1?d[e+1]:null,n&&!n.model.skip&&(u=(i.model.x-n.model.x)/3,i.model.controlPointPreviousX=i.model.x-u,i.model.controlPointPreviousY=i.model.y-u*i.mK),r&&!r.model.skip&&(u=(r.model.x-i.model.x)/3,i.model.controlPointNextX=i.model.x+u,i.model.controlPointNextY=i.model.y+u*i.mK))},q.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},q.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},q.niceNum=function(t,e){var n=Math.floor(q.log10(t)),i=t/Math.pow(10,n);return(e?i<1.5?1:i<3?2:i<7?5:10:i<=1?1:i<=2?2:i<=5?5:10)*Math.pow(10,n)},q.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},q.getRelativePosition=function(t,e){var n,i,r=t.originalEvent||t,a=t.target||t.srcElement,o=a.getBoundingClientRect(),s=r.touches;i=s&&0<s.length?(n=s[0].clientX,s[0].clientY):(n=r.clientX,r.clientY);var l=parseFloat(q.getStyle(a,"padding-left")),u=parseFloat(q.getStyle(a,"padding-top")),d=parseFloat(q.getStyle(a,"padding-right")),c=parseFloat(q.getStyle(a,"padding-bottom")),h=o.right-o.left-l-d,f=o.bottom-o.top-u-c;return{x:n=Math.round((n-o.left-l)/h*a.width/e.currentDevicePixelRatio),y:i=Math.round((i-o.top-u)/f*a.height/e.currentDevicePixelRatio)}},q.getConstraintWidth=function(t){return Wi(t,"max-width","clientWidth")},q.getConstraintHeight=function(t){return Wi(t,"max-height","clientHeight")},q._calculatePadding=function(t,e,n){return-1<(e=q.getStyle(t,e)).indexOf("%")?n*parseInt(e,10)/100:parseInt(e,10)},q._getParentNode=function(t){var e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e},q.getMaximumWidth=function(t){var e=q._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,i=n-q._calculatePadding(e,"padding-left",n)-q._calculatePadding(e,"padding-right",n),r=q.getConstraintWidth(t);return isNaN(r)?i:Math.min(i,r)},q.getMaximumHeight=function(t){var e=q._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,i=n-q._calculatePadding(e,"padding-top",n)-q._calculatePadding(e,"padding-bottom",n),r=q.getConstraintHeight(t);return isNaN(r)?i:Math.min(i,r)},q.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},q.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var i=t.canvas,r=t.height,a=t.width;i.height=r*n,i.width=a*n,t.ctx.scale(n,n),i.style.height||i.style.width||(i.style.height=r+"px",i.style.width=a+"px")}},q.fontString=function(t,e,n){return e+" "+t+"px "+n},q.longestText=function(t,e,n,i){var r=(i=i||{}).data=i.data||{},a=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},a=i.garbageCollect=[],i.font=e),t.font=e;var o,s,l,u,d,c=0,h=n.length;for(o=0;o<h;o++)if(null!=(u=n[o])&&!0!==q.isArray(u))c=q.measureText(t,r,a,c,u);else if(q.isArray(u))for(s=0,l=u.length;s<l;s++)null==(d=u[s])||q.isArray(d)||(c=q.measureText(t,r,a,c,d));var f=a.length/2;if(f>n.length){for(o=0;o<f;o++)delete r[a[o]];a.splice(0,f)}return c},q.measureText=function(t,e,n,i,r){var a=e[r];return a||(a=e[r]=t.measureText(r).width,n.push(r)),i<a&&(i=a),i},q.numberOfLabelLines=function(t){var e=1;return q.each(t,function(t){q.isArray(t)&&t.length>e&&(e=t.length)}),e},q.color=C?function(t){return t instanceof CanvasGradient&&(t=E.global.defaultColor),C(t)}:function(t){return console.error("Color.js not found!"),t},q.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:q.color(t).saturate(.5).darken(.1).rgbString()},rn._adapters=sn,rn.Animation=J,rn.animationService=tt,rn.controllers=Qt,rn.DatasetController=at,rn.defaults=E,rn.Element=$,rn.elements=Mt,rn.Interaction=ae,rn.layouts=me,rn.platform=Re,rn.plugins=ze,rn.Scale=kn,rn.scaleService=Ne,rn.Ticks=ln,rn.Tooltip=Ke,rn.helpers.each(gi,function(t,e){rn.scaleService.registerScaleType(e,t,t._defaults)}),Li)Li.hasOwnProperty(Hi)&&rn.plugins.register(Li[Hi]);rn.platform.initialize();var Vi=rn;return"undefined"!=typeof window&&(window.Chart=rn),(rn.Chart=rn).Legend=Li.legend._element,rn.Title=Li.title._element,rn.pluginService=rn.plugins,rn.PluginBase=rn.Element.extend({}),rn.canvasHelpers=rn.helpers.canvas,rn.layoutService=rn.layouts,rn.LinearScaleBase=Pn,rn.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],function(n){rn[n]=function(t,e){return new rn(t,rn.helpers.merge(e||{},{type:n.charAt(0).toLowerCase()+n.slice(1)}))}}),Vi}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Glide=e()}(this,function(){"use strict";var n={type:"slider",startAt:0,perView:1,focusAt:0,gap:10,autoplay:!1,hoverpause:!0,keyboard:!0,bound:!1,swipeThreshold:80,dragThreshold:120,perTouch:!1,touchRatio:.5,touchAngle:45,animationDuration:400,rewind:!0,rewindDuration:800,animationTimingFunc:"cubic-bezier(.165, .840, .440, 1)",throttle:10,direction:"ltr",peek:0,breakpoints:{},classes:{direction:{ltr:"glide--ltr",rtl:"glide--rtl"},slider:"glide--slider",carousel:"glide--carousel",swipeable:"glide--swipeable",dragging:"glide--dragging",cloneSlide:"glide__slide--clone",activeNav:"glide__bullet--active",activeSlide:"glide__slide--active",disabledArrow:"glide__arrow--disabled"}};function s(t){console.error("[Glide warn]: "+t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t=function(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t};function a(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function b(t){return parseInt(t)}function o(t){return"string"==typeof t}function u(t){var e=void 0===t?"undefined":r(t);return"function"===e||"object"===e&&t}function d(t){return"function"==typeof t}function c(t){return void 0===t}function h(t){return t.constructor===Array}function f(t,e,n){Object.defineProperty(t,e,n)}function g(t,e){var n=l({},t,e);return e.hasOwnProperty("classes")&&(n.classes=l({},t.classes,e.classes),e.classes.hasOwnProperty("direction")&&(n.classes.direction=l({},t.classes.direction,e.classes.direction))),e.hasOwnProperty("breakpoints")&&(n.breakpoints=l({},t.breakpoints,e.breakpoints)),n}var p=(t(e,[{key:"on",value:function(t,e){if(h(t))for(var n=0;n<t.length;n++)this.on(t[n],e);this.hop.call(this.events,t)||(this.events[t]=[]);var i=this.events[t].push(e)-1;return{remove:function(){delete this.events[t][i]}}}},{key:"emit",value:function(t,e){if(h(t))for(var n=0;n<t.length;n++)this.emit(t[n],e);this.hop.call(this.events,t)&&this.events[t].forEach(function(t){t(e||{})})}}]),e);function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,e),this.events=t,this.hop=t.hasOwnProperty}var m=(t(v,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this._e.emit("mount.before"),u(e)?this._c=function(t,e,n){var i={};for(var r in e)d(e[r])?i[r]=e[r](t,i,n):s("Extension must be a function");for(var a in i)d(i[a].mount)&&i[a].mount();return i}(this,e,this._e):s("You need to provide a object on `mount()`"),this._e.emit("mount.after"),this}},{key:"mutate",value:function(t){var e=0<arguments.length&&void 0!==t?t:[];return h(e)?this._t=e:s("You need to provide a array on `mutate()`"),this}},{key:"update",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this.settings=g(this.settings,e),e.hasOwnProperty("startAt")&&(this.index=e.startAt),this._e.emit("update"),this}},{key:"go",value:function(t){return this._c.Run.make(t),this}},{key:"move",value:function(t){return this._c.Transition.disable(),this._c.Move.make(t),this}},{key:"destroy",value:function(){return this._e.emit("destroy"),this}},{key:"play",value:function(t){var e=0<arguments.length&&void 0!==t&&t;return e&&(this.settings.autoplay=e),this._e.emit("play"),this}},{key:"pause",value:function(){return this._e.emit("pause"),this}},{key:"disable",value:function(){return this.disabled=!0,this}},{key:"enable",value:function(){return this.disabled=!1,this}},{key:"on",value:function(t,e){return this._e.on(t,e),this}},{key:"isType",value:function(t){return this.settings.type===t}},{key:"settings",get:function(){return this._o},set:function(t){u(t)?this._o=t:s("Options must be an `object` instance.")}},{key:"index",get:function(){return this._i},set:function(t){this._i=b(t)}},{key:"type",get:function(){return this.settings.type}},{key:"disabled",get:function(){return this._d},set:function(t){this._d=!!t}}]),v);function v(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};i(this,v),this._c={},this._t=[],this._e=new p,this.disabled=!1,this.selector=t,this.settings=g(n,e),this.index=this.settings.startAt}function y(){return(new Date).getTime()}function x(n,i,r){var a=void 0,o=void 0,s=void 0,l=void 0,u=0;r=r||{};function d(){u=!1===r.leading?0:y(),a=null,l=n.apply(o,s),a||(o=s=null)}function t(){var t=y();u||!1!==r.leading||(u=t);var e=i-(t-u);return o=this,s=arguments,e<=0||i<e?(a&&(clearTimeout(a),a=null),u=t,l=n.apply(o,s),a||(o=s=null)):a||!1===r.trailing||(a=setTimeout(d,e)),l}return t.cancel=function(){clearTimeout(a),u=0,a=o=s=null},t}var _={ltr:["marginLeft","marginRight"],rtl:["marginRight","marginLeft"]};function w(t){if(t&&t.parentNode){for(var e=t.parentNode.firstChild,n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}return[]}function k(t){return!!(t&&t instanceof window.HTMLElement)}var M='[data-glide-el="track"]';var C=(t(S,[{key:"on",value:function(t,e,n,i){var r=3<arguments.length&&void 0!==i&&i;o(t)&&(t=[t]);for(var a=0;a<t.length;a++)this.listeners[t[a]]=n,e.addEventListener(t[a],this.listeners[t[a]],r)}},{key:"off",value:function(t,e,n){var i=2<arguments.length&&void 0!==n&&n;o(t)&&(t=[t]);for(var r=0;r<t.length;r++)e.removeEventListener(t[r],this.listeners[t[r]],i)}},{key:"destroy",value:function(){delete this.listeners}}]),S);function S(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,S),this.listeners=t}var D=["ltr","rtl"],A={">":"<","<":">","=":"="};function P(t,e){return{modify:function(t){return e.Direction.is("rtl")?-t:t}}}function T(i,r,a){var o=[function(e,n){return{modify:function(t){return t+n.Gaps.value*e.index}}},function(t,e){return{modify:function(t){return t+e.Clones.grow/2}}},function(n,i){return{modify:function(t){if(0<=n.settings.focusAt){var e=i.Peek.value;return u(e)?t-e.before:t-e}return t}}},function(a,o){return{modify:function(t){var e=o.Gaps.value,n=o.Sizes.width,i=a.settings.focusAt,r=o.Sizes.slideWidth;return"center"===i?t-(n/2-r/2):t-r*i-e*i}}}].concat(i._t,[P]);return{mutate:function(t){for(var e=0;e<o.length;e++){var n=o[e];d(n)&&d(n().modify)?t=n(i,r,a).modify(t):s("Transformer should be a function that returns an object with `modify()` method")}return t}}}var I=!1;try{var O=Object.defineProperty({},"passive",{get:function(){I=!0}});window.addEventListener("testPassive",null,O),window.removeEventListener("testPassive",null,O)}catch(t){}var F=I,L=["touchstart","mousedown"],R=["touchmove","mousemove"],z=["touchend","touchcancel","mouseup","mouseleave"],N=["mousedown","mousemove","mouseup","mouseleave"];function B(t){return u(t)?(n=t,Object.keys(n).sort().reduce(function(t,e){return t[e]=n[e],t[e],t},{})):(s("Breakpoints option must be an object"),{});var n}var E={Html:function(e,t){var n={mount:function(){this.root=e.selector,this.track=this.root.querySelector(M),this.slides=Array.prototype.slice.call(this.wrapper.children).filter(function(t){return!t.classList.contains(e.settings.classes.cloneSlide)})}};return f(n,"root",{get:function(){return n._r},set:function(t){o(t)&&(t=document.querySelector(t)),k(t)?n._r=t:s("Root element must be a existing Html node")}}),f(n,"track",{get:function(){return n._t},set:function(t){k(t)?n._t=t:s("Could not find track element. Please use "+M+" attribute.")}}),f(n,"wrapper",{get:function(){return n.track.children[0]}}),n},Translate:function(r,a,o){var s={set:function(t){var e=T(r,a).mutate(t);a.Html.wrapper.style.transform="translate3d("+-1*e+"px, 0px, 0px)"},remove:function(){a.Html.wrapper.style.transform=""}};return o.on("move",function(t){var e=a.Gaps.value,n=a.Sizes.length,i=a.Sizes.slideWidth;return r.isType("carousel")&&a.Run.isOffset("<")?(a.Transition.after(function(){o.emit("translate.jump"),s.set(i*(n-1))}),s.set(-i-e*n)):r.isType("carousel")&&a.Run.isOffset(">")?(a.Transition.after(function(){o.emit("translate.jump"),s.set(0)}),s.set(i*n+e*n)):s.set(t.movement)}),o.on("destroy",function(){s.remove()}),s},Transition:function(n,i,t){var r=!1,e={compose:function(t){var e=n.settings;return r?t+" 0ms "+e.animationTimingFunc:t+" "+this.duration+"ms "+e.animationTimingFunc},set:function(t){var e=0<arguments.length&&void 0!==t?t:"transform";i.Html.wrapper.style.transition=this.compose(e)},remove:function(){i.Html.wrapper.style.transition=""},after:function(t){setTimeout(function(){t()},this.duration)},enable:function(){r=!1,this.set()},disable:function(){r=!0,this.set()}};return f(e,"duration",{get:function(){var t=n.settings;return n.isType("slider")&&i.Run.offset?t.rewindDuration:t.animationDuration}}),t.on("move",function(){e.set()}),t.on(["build.before","resize","translate.jump"],function(){e.disable()}),t.on("run",function(){e.enable()}),t.on("destroy",function(){e.remove()}),e},Direction:function(t,e,n){var i={mount:function(){this.value=t.settings.direction},resolve:function(t){var e=t.slice(0,1);return this.is("rtl")?t.split(e).join(A[e]):t},is:function(t){return this.value===t},addClass:function(){e.Html.root.classList.add(t.settings.classes.direction[this.value])},removeClass:function(){e.Html.root.classList.remove(t.settings.classes.direction[this.value])}};return f(i,"value",{get:function(){return i._v},set:function(t){-1<D.indexOf(t)?i._v=t:s("Direction value must be `ltr` or `rtl`")}}),n.on(["destroy","update"],function(){i.removeClass()}),n.on("update",function(){i.mount()}),n.on(["build.before","update"],function(){i.addClass()}),i},Peek:function(n,t,e){var i={mount:function(){this.value=n.settings.peek}};return f(i,"value",{get:function(){return i._v},set:function(t){u(t)?(t.before=b(t.before),t.after=b(t.after)):t=b(t),i._v=t}}),f(i,"reductor",{get:function(){var t=i.value,e=n.settings.perView;return u(t)?t.before/e+t.after/e:2*t/e}}),e.on(["resize","update"],function(){i.mount()}),i},Sizes:function(t,i,e){var n={setupSlides:function(){for(var t=this.slideWidth+"px",e=i.Html.slides,n=0;n<e.length;n++)e[n].style.width=t},setupWrapper:function(){i.Html.wrapper.style.width=this.wrapperSize+"px"},remove:function(){for(var t=i.Html.slides,e=0;e<t.length;e++)t[e].style.width="";i.Html.wrapper.style.width=""}};return f(n,"length",{get:function(){return i.Html.slides.length}}),f(n,"width",{get:function(){return i.Html.root.offsetWidth}}),f(n,"wrapperSize",{get:function(){return n.slideWidth*n.length+i.Gaps.grow+i.Clones.grow}}),f(n,"slideWidth",{get:function(){return n.width/t.settings.perView-i.Peek.reductor-i.Gaps.reductor}}),e.on(["build.before","resize","update"],function(){n.setupSlides(),n.setupWrapper()}),e.on("destroy",function(){n.remove()}),n},Gaps:function(e,a,t){var n={apply:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style,r=a.Direction.value;i[_[r][0]]=0!==e?this.value/2+"px":"",e!==t.length-1?i[_[r][1]]=this.value/2+"px":i[_[r][1]]=""}},remove:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style;i.marginLeft="",i.marginRight=""}}};return f(n,"value",{get:function(){return b(e.settings.gap)}}),f(n,"grow",{get:function(){return n.value*(a.Sizes.length-1)}}),f(n,"reductor",{get:function(){var t=e.settings.perView;return n.value*(t-1)/t}}),t.on(["build.after","update"],x(function(){n.apply(a.Html.wrapper.children)},30)),t.on("destroy",function(){n.remove(a.Html.wrapper.children)}),n},Move:function(t,i,r){var e={mount:function(){this._o=0},make:function(t){var e=this,n=0<arguments.length&&void 0!==t?t:0;this.offset=n,r.emit("move",{movement:this.value}),i.Transition.after(function(){r.emit("move.after",{movement:e.value})})}};return f(e,"offset",{get:function(){return e._o},set:function(t){e._o=c(t)?0:b(t)}}),f(e,"translate",{get:function(){return i.Sizes.slideWidth*t.index}}),f(e,"value",{get:function(){var t=this.offset,e=this.translate;return i.Direction.is("rtl")?e+t:e-t}}),r.on(["build.before","run"],function(){e.make()}),e},Clones:function(g,p,t){var e={mount:function(){this.items=[],g.isType("carousel")&&(this.items=this.collect())},collect:function(t){for(var e=0<arguments.length&&void 0!==t?t:[],n=p.Html.slides,i=g.settings,r=i.perView,a=i.classes,o=r+ +!!g.settings.peek,s=n.slice(0,o),l=n.slice(-o),u=0;u<Math.max(1,Math.floor(r/n.length));u++){for(var d=0;d<s.length;d++){var c=s[d].cloneNode(!0);c.classList.add(a.cloneSlide),e.push(c)}for(var h=0;h<l.length;h++){var f=l[h].cloneNode(!0);f.classList.add(a.cloneSlide),e.unshift(f)}}return e},append:function(){for(var t=this.items,e=p.Html,n=e.wrapper,i=e.slides,r=Math.floor(t.length/2),a=t.slice(0,r).reverse(),o=t.slice(r,t.length),s=p.Sizes.slideWidth+"px",l=0;l<o.length;l++)n.appendChild(o[l]);for(var u=0;u<a.length;u++)n.insertBefore(a[u],i[0]);for(var d=0;d<t.length;d++)t[d].style.width=s},remove:function(){for(var t=this.items,e=0;e<t.length;e++)p.Html.wrapper.removeChild(t[e])}};return f(e,"grow",{get:function(){return(p.Sizes.slideWidth+p.Gaps.value)*e.items.length}}),t.on("update",function(){e.remove(),e.mount(),e.append()}),t.on("build.before",function(){g.isType("carousel")&&e.append()}),t.on("destroy",function(){e.remove()}),e},Resize:function(t,e,n){var i=new C,r={mount:function(){this.bind()},bind:function(){i.on("resize",window,x(function(){n.emit("resize")},t.settings.throttle))},unbind:function(){i.off("resize",window)}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Build:function(n,i,t){var e={mount:function(){t.emit("build.before"),this.typeClass(),this.activeClass(),t.emit("build.after")},typeClass:function(){i.Html.root.classList.add(n.settings.classes[n.settings.type])},activeClass:function(){var e=n.settings.classes,t=i.Html.slides[n.index];t&&(t.classList.add(e.activeSlide),w(t).forEach(function(t){t.classList.remove(e.activeSlide)}))},removeClasses:function(){var e=n.settings.classes;i.Html.root.classList.remove(e[n.settings.type]),i.Html.slides.forEach(function(t){t.classList.remove(e.activeSlide)})}};return t.on(["destroy","update"],function(){e.removeClasses()}),t.on(["resize","update"],function(){e.mount()}),t.on("move.after",function(){e.activeClass()}),e},Run:function(a,n,i){var t={mount:function(){this._o=!1},make:function(t){var e=this;a.disabled||(a.disable(),this.move=t,i.emit("run.before",this.move),this.calculate(),i.emit("run",this.move),n.Transition.after(function(){e.isStart()&&i.emit("run.start",e.move),e.isEnd()&&i.emit("run.end",e.move),(e.isOffset("<")||e.isOffset(">"))&&(e._o=!1,i.emit("run.offset",e.move)),i.emit("run.after",e.move),a.enable()}))},calculate:function(){var t=this.move,e=this.length,n=t.steps,i=t.direction,r="number"==typeof b(n)&&0!==b(n);switch(i){case">":">"===n?a.index=e:this.isEnd()?a.isType("slider")&&!a.settings.rewind||(this._o=!0,a.index=0):r?a.index+=Math.min(e-a.index,-b(n)):a.index++;break;case"<":"<"===n?a.index=0:this.isStart()?a.isType("slider")&&!a.settings.rewind||(this._o=!0,a.index=e):r?a.index-=Math.min(a.index,b(n)):a.index--;break;case"=":a.index=n;break;default:s("Invalid direction pattern ["+i+n+"] has been used")}},isStart:function(){return 0===a.index},isEnd:function(){return a.index===this.length},isOffset:function(t){return this._o&&this.move.direction===t}};return f(t,"move",{get:function(){return this._m},set:function(t){var e=t.substr(1);this._m={direction:t.substr(0,1),steps:e?b(e)?b(e):e:0}}}),f(t,"length",{get:function(){var t=a.settings,e=n.Html.slides.length;return a.isType("slider")&&"center"!==t.focusAt&&t.bound?e-1-(b(t.perView)-1)+b(t.focusAt):e-1}}),f(t,"offset",{get:function(){return this._o}}),t},Swipe:function(h,f,g){var n=new C,p=0,m=0,v=0,i=!1,r=!!F&&{passive:!0},t={mount:function(){this.bindSwipeStart()},start:function(t){if(!i&&!h.disabled){this.disable();var e=this.touches(t);p=null,m=b(e.pageX),v=b(e.pageY),this.bindSwipeMove(),this.bindSwipeEnd(),g.emit("swipe.start")}},move:function(t){if(!h.disabled){var e=h.settings,n=e.touchAngle,i=e.touchRatio,r=e.classes,a=this.touches(t),o=b(a.pageX)-m,s=b(a.pageY)-v,l=Math.abs(o<<2),u=Math.abs(s<<2),d=Math.sqrt(l+u),c=Math.sqrt(u);if(!(180*(p=Math.asin(c/d))/Math.PI<n))return!1;t.stopPropagation(),f.Move.make(o*parseFloat(i)),f.Html.root.classList.add(r.dragging),g.emit("swipe.move")}},end:function(t){if(!h.disabled){var e=h.settings,n=this.touches(t),i=this.threshold(t),r=n.pageX-m,a=180*p/Math.PI,o=Math.round(r/f.Sizes.slideWidth);this.enable(),i<r&&a<e.touchAngle?(e.perTouch&&(o=Math.min(o,b(e.perTouch))),f.Direction.is("rtl")&&(o=-o),f.Run.make(f.Direction.resolve("<"+o))):r<-i&&a<e.touchAngle?(e.perTouch&&(o=Math.max(o,-b(e.perTouch))),f.Direction.is("rtl")&&(o=-o),f.Run.make(f.Direction.resolve(">"+o))):f.Move.make(),f.Html.root.classList.remove(e.classes.dragging),this.unbindSwipeMove(),this.unbindSwipeEnd(),g.emit("swipe.end")}},bindSwipeStart:function(){var e=this,t=h.settings;t.swipeThreshold&&n.on(L[0],f.Html.wrapper,function(t){e.start(t)},r),t.dragThreshold&&n.on(L[1],f.Html.wrapper,function(t){e.start(t)},r)},unbindSwipeStart:function(){n.off(L[0],f.Html.wrapper,r),n.off(L[1],f.Html.wrapper,r)},bindSwipeMove:function(){var e=this;n.on(R,f.Html.wrapper,x(function(t){e.move(t)},h.settings.throttle),r)},unbindSwipeMove:function(){n.off(R,f.Html.wrapper,r)},bindSwipeEnd:function(){var e=this;n.on(z,f.Html.wrapper,function(t){e.end(t)})},unbindSwipeEnd:function(){n.off(z,f.Html.wrapper)},touches:function(t){return-1<N.indexOf(t.type)?t:t.touches[0]||t.changedTouches[0]},threshold:function(t){var e=h.settings;return-1<N.indexOf(t.type)?e.dragThreshold:e.swipeThreshold},enable:function(){return i=!1,f.Transition.enable(),this},disable:function(){return i=!0,f.Transition.disable(),this}};return g.on("build.after",function(){f.Html.root.classList.add(h.settings.classes.swipeable)}),g.on("destroy",function(){t.unbindSwipeStart(),t.unbindSwipeMove(),t.unbindSwipeEnd(),n.destroy()}),t},Images:function(t,e,n){var i=new C,r={mount:function(){this.bind()},bind:function(){i.on("dragstart",e.Html.wrapper,this.dragstart)},unbind:function(){i.off("dragstart",e.Html.wrapper)},dragstart:function(t){t.preventDefault()}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Anchors:function(t,e,n){var i=new C,r=!1,a=!1,o={mount:function(){this._a=e.Html.wrapper.querySelectorAll("a"),this.bind()},bind:function(){i.on("click",e.Html.wrapper,this.click)},unbind:function(){i.off("click",e.Html.wrapper)},click:function(t){a&&(t.stopPropagation(),t.preventDefault())},detach:function(){if(a=!0,!r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!1,this.items[t].setAttribute("data-href",this.items[t].getAttribute("href")),this.items[t].removeAttribute("href");r=!0}return this},attach:function(){if(a=!1,r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!0,this.items[t].setAttribute("href",this.items[t].getAttribute("data-href"));r=!1}return this}};return f(o,"items",{get:function(){return o._a}}),n.on("swipe.move",function(){o.detach()}),n.on("swipe.end",function(){e.Transition.after(function(){o.attach()})}),n.on("destroy",function(){o.attach(),o.unbind(),i.destroy()}),o},Controls:function(i,e,t){var n=new C,r=!!F&&{passive:!0},a={mount:function(){this._n=e.Html.root.querySelectorAll('[data-glide-el="controls[nav]"]'),this._c=e.Html.root.querySelectorAll('[data-glide-el^="controls"]'),this.addBindings()},setActive:function(){for(var t=0;t<this._n.length;t++)this.addClass(this._n[t].children)},removeActive:function(){for(var t=0;t<this._n.length;t++)this.removeClass(this._n[t].children)},addClass:function(t){var e=i.settings,n=t[i.index];n&&(n.classList.add(e.classes.activeNav),w(n).forEach(function(t){t.classList.remove(e.classes.activeNav)}))},removeClass:function(t){var e=t[i.index];e&&e.classList.remove(i.settings.classes.activeNav)},addBindings:function(){for(var t=0;t<this._c.length;t++)this.bind(this._c[t].children)},removeBindings:function(){for(var t=0;t<this._c.length;t++)this.unbind(this._c[t].children)},bind:function(t){for(var e=0;e<t.length;e++)n.on("click",t[e],this.click),n.on("touchstart",t[e],this.click,r)},unbind:function(t){for(var e=0;e<t.length;e++)n.off(["click","touchstart"],t[e])},click:function(t){t.preventDefault(),e.Run.make(e.Direction.resolve(t.currentTarget.getAttribute("data-glide-dir")))}};return f(a,"items",{get:function(){return a._c}}),t.on(["mount.after","move.after"],function(){a.setActive()}),t.on("destroy",function(){a.removeBindings(),a.removeActive(),n.destroy()}),a},Keyboard:function(t,e,n){var i=new C,r={mount:function(){t.settings.keyboard&&this.bind()},bind:function(){i.on("keyup",document,this.press)},unbind:function(){i.off("keyup",document)},press:function(t){39===t.keyCode&&e.Run.make(e.Direction.resolve(">")),37===t.keyCode&&e.Run.make(e.Direction.resolve("<"))}};return n.on(["destroy","update"],function(){r.unbind()}),n.on("update",function(){r.mount()}),n.on("destroy",function(){i.destroy()}),r},Autoplay:function(e,n,t){var i=new C,r={mount:function(){this.start(),e.settings.hoverpause&&this.bind()},start:function(){var t=this;e.settings.autoplay&&c(this._i)&&(this._i=setInterval(function(){t.stop(),n.Run.make(">"),t.start()},this.time))},stop:function(){this._i=clearInterval(this._i)},bind:function(){var t=this;i.on("mouseover",n.Html.root,function(){t.stop()}),i.on("mouseout",n.Html.root,function(){t.start()})},unbind:function(){i.off(["mouseover","mouseout"],n.Html.root)}};return f(r,"time",{get:function(){var t=n.Html.slides[e.index].getAttribute("data-glide-autoplay");return b(t||e.settings.autoplay)}}),t.on(["destroy","update"],function(){r.unbind()}),t.on(["run.before","pause","destroy","swipe.start","update"],function(){r.stop()}),t.on(["run.after","play","swipe.end"],function(){r.start()}),t.on("update",function(){r.mount()}),t.on("destroy",function(){i.destroy()}),r},Breakpoints:function(t,e,n){var i=new C,r=t.settings,a=B(r.breakpoints),o=l({},r),s={match:function(t){if(void 0!==window.matchMedia)for(var e in t)if(t.hasOwnProperty(e)&&window.matchMedia("(max-width: "+e+"px)").matches)return t[e];return o}};return l(r,s.match(a)),i.on("resize",window,x(function(){t.settings=g(r,s.match(a))},t.settings.throttle)),n.on("update",function(){a=B(a),o=l({},r)}),n.on("destroy",function(){i.off("resize",window)}),s}};function W(){return i(this,W),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(W.__proto__||Object.getPrototypeOf(W)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(W,m),t(W,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,i)}if("value"in r)return r.value;var o=r.get;return void 0!==o?o.call(i):void 0}(W.prototype.__proto__||Object.getPrototypeOf(W.prototype),"mount",this).call(this,l({},E,e))}}]),W});var chartObject,chartObject1,chartObject2,chartObject3,chartObject4,chartObject5,chartObject6,chartObject7,chartObject8,chartObject9,refreshTime=6e5,reportDaysDisplay=document.querySelector(".js-days"),reportDays=reportDaysDisplay.value;function getData(t,i,r){var a=new XMLHttpRequest;a.onload=function(){if(200<=a.status&&a.status<300){for(var t=JSON.parse(a.response).values,e={labels:[],datasetTitle:[],datasets:{0:[],1:[],2:[],3:[],4:[]},title:t[1][0]},n=0;n<=24*i;n++)0===n?(e.datasetTitle.push(t[n][1]),e.datasetTitle.push(t[n][2]),e.datasetTitle.push(t[n][3]),e.datasetTitle.push(t[n][4]),e.datasetTitle.push(t[n][8])):(e.datasets[0].push(t[n][1]),e.datasets[1].push(t[n][2]),e.datasets[2].push(t[n][3]),e.datasets[3].push(t[n][4]),e.datasets[4].push(t[n][8]),e.labels.push(t[n][6]));r(e)}else console.log("The request failed!")},a.open("GET","https://sheets.googleapis.com/v4/spreadsheets/1SSIkRt0WgSDgD6XvQiWsXBOUApTE1RFZ-zFftKyaG6Q/values/"+t+"?key=AIzaSyDxuzVaF80Tx4nN3xqfSHeYznHTCTA01Lk"),a.send()}function addChart(t,e,n,i){var r=document.getElementById(t).getContext("2d"),a=new Chart(r,{type:"line",data:{labels:n.labels,datasets:[{label:n.datasetTitle[0],data:n.datasets[0],fill:!1,borderColor:["rgba(54, 162, 235, 1)"],pointBackgroundColor:"rgba(54, 162, 235, 1)",pointBorderColor:"rgba(54, 162, 235, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[1],data:n.datasets[1],fill:!1,borderColor:["rgba(255, 99, 132, 1)"],pointBackgroundColor:"rgba(255, 99, 132, 1)",pointBorderColor:"rgba(255, 99, 132, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[2],data:n.datasets[2],fill:!1,borderColor:["rgb(65, 255, 99)"],pointBackgroundColor:"rgba(65, 255, 99, 1)",pointBorderColor:"rgba(65, 255, 99, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[3],data:n.datasets[3],fill:!1,borderColor:["rgb(255, 140, 26)"],pointBackgroundColor:"rgba(255, 140, 26, 1)",pointBorderColor:"rgba(255, 140, 26, 1)",pointRadius:1,borderWidth:2},{label:n.datasetTitle[4],data:n.datasets[4],fill:!1,borderColor:["rgb(255,247,55)"],pointBackgroundColor:"rgba(255,247,55, 1)",pointBorderColor:"rgba(255,247,55, 1)",pointRadius:1,borderWidth:2}]},options:{scales:{yAxes:[{ticks:{fontColor:"#6e6e6e",beginAtZero:!0,suggestedMin:0,suggestedMax:3,stepSize:1},gridLines:{display:!0,color:"#262626"}}],xAxes:[{ticks:{fontColor:"#6e6e6e",reverse:!0},gridLines:{display:!0,color:"#262626"}}]},legend:{text:"something",labels:{fontColor:"#6e6e6e"}},title:{display:!0,text:e,fontSize:18,fontColor:"white"},animation:{duration:0},maintainAspectRatio:!1}});a.canvas.parentNode.style.height=window.innerHeight/2.75+"px",i(a)}function updateChart(t,e){t.data.labels=e.labels;for(var n=0;n<t.data.datasets.length;n++)t.data.datasets[n].data=e.datasets[n];t.update()}getData("Home",reportDays,function(t){addChart("metricChart",t.title,t,function(e){chartObject=e,setInterval(function(){getData("Home",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Car Insurance",reportDays,function(t){addChart("metricChart1",t.title,t,function(e){chartObject1=e,setInterval(function(){getData("Car Insurance",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Multi Car",reportDays,function(t){addChart("metricChart2",t.title,t,function(e){chartObject2=e,setInterval(function(){getData("Multi Car",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Claims",reportDays,function(t){addChart("metricChart3",t.title,t,function(e){chartObject3=e,setInterval(function(){getData("Claims",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Home Insurance",reportDays,function(t){addChart("metricChart4",t.title,t,function(e){chartObject4=e,setInterval(function(){getData("Home Insurance",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Smartmiles",reportDays,function(t){addChart("metricChart5",t.title,t,function(e){chartObject5=e,setInterval(function(){getData("Smartmiles",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Help",reportDays,function(t){addChart("metricChart6",t.title,t,function(e){chartObject6=e,setInterval(function(){getData("Help",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("About Us",reportDays,function(t){addChart("metricChart7",t.title,t,function(e){chartObject7=e,setInterval(function(){getData("About Us",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Contact Us",reportDays,function(t){addChart("metricChart8",t.title,t,function(e){chartObject8=e,setInterval(function(){getData("Contact Us",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),getData("Coronavirus FAQs",reportDays,function(t){addChart("metricChart9",t.title,t,function(e){chartObject9=e,setInterval(function(){getData("Coronavirus FAQs",reportDays,function(t){updateChart(e,t)})},refreshTime)})}),reportDaysDisplay.addEventListener("change",function(t){getData("Home",reportDays=t.target.value,function(t){updateChart(chartObject,t)}),getData("Car Insurance",reportDays,function(t){updateChart(chartObject1,t)}),getData("Multi Car",reportDays,function(t){updateChart(chartObject2,t)}),getData("Claims",reportDays,function(t){updateChart(chartObject3,t)}),getData("Home Insurance",reportDays,function(t){updateChart(chartObject4,t)}),getData("Smartmiles",reportDays,function(t){updateChart(chartObject5,t)}),getData("Help",reportDays,function(t){updateChart(chartObject6,t)}),getData("About Us",reportDays,function(t){updateChart(chartObject7,t)}),getData("Contact Us",reportDays,function(t){updateChart(chartObject8,t)}),getData("Coronavirus FAQs",reportDays,function(t){updateChart(chartObject9,t)})});var glide=new Glide(".glide",{autoplay:3e4,animationDuration:1e3,hoverpause:!0});glide.mount();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
